
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b2 fb 00 00       	call   c000fbd2 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 68 6c 02 c0       	mov    eax,0xc0026c68
c0000025:	3d 68 6c 02 c0       	cmp    eax,0xc0026c68
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 68 6c 02 c0       	push   0xc0026c68
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 68 6c 02 c0       	mov    eax,0xc0026c68
c0000051:	2d 68 6c 02 c0       	sub    eax,0xc0026c68
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 68 6c 02 c0       	push   0xc0026c68
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d0 26 02 c0       	mov    ebx,0xc00226d0
c0000097:	81 eb cc 26 02 c0    	sub    ebx,0xc00226cc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be cc 26 02 c0       	mov    esi,0xc00226cc
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 68 6c 02 c0       	push   0xc0026c68
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 68 6c 02 c0       	push   0xc0026c68
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 df 62 01 00       	call   c001658c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 46 42 01 00       	call   c001450b <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 bd 62 01 00       	call   c001658c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1e 68 01 00       	call   c0016b0c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 8d 6d 01 00       	call   c0017084 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 c1 02 c0 	lgdtd  ds:0xc002c118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 6a ec 00 00       	jmp    c000efe9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 26 02 c0 02 	test   BYTE PTR [edx-0x3ffdd920],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd920],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 26 02 c0 08 	test   BYTE PTR [edx-0x3ffdd920],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 26 02 c0 04 	test   BYTE PTR [ecx-0x3ffdd920],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 26 02 c0 01 	test   BYTE PTR [edx-0x3ffdd920],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 b5 e9 00 00       	call   c000f815 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 c2 e8 00 00       	call   c000f7b7 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 a1 e7 00 00       	call   c000f781 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 9c e7 00 00       	call   c000f7b7 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 48 e6 00 00       	call   c000f781 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 2e e6 00 00       	call   c000f781 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 04 e6 00 00       	call   c000f781 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 27 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd81c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 f5 a3 01 00       	jmp    c001c380 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 1f a4 01 00       	jmp    c001c3c0 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 60 ec 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd13a0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 40 a4 01 00       	jmp    c001c400 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 29 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd6c0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 29 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd6c0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 44 58 02 c0       	mov    edx,0xc0025844
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 27 02 c0       	mov    edx,0xc00227fc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 28 02 c0       	mov    eax,0xc0022802
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 28 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd740]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 28 02 c0       	mov    eax,0xc002280b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 29 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd6c0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 28 02 c0       	mov    eax,0xc0022890
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 28 02 c0       	mov    ebx,0xc0022880
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 28 02 c0       	mov    eax,0xc0022860
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 28 02 c0       	mov    eax,0xc0022870
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 28 02 c0       	mov    edx,0xc0022812
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 28 02 c0       	mov    edx,0xc002281e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 28 02 c0       	mov    edx,0xc0022832
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 80 9a 00 00       	call   c000f897 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 78 9a 00 00       	call   c000f8a7 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 2c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022c60
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 2c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022c60
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 2a 02 c0       	mov    eax,0xc0022a60
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 29 02 c0       	mov    eax,0xc00229a0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd6a0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 2d 02 c0       	push   0xc0022d60
c0006303:	e8 14 6a 01 00       	call   c001cd1c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 2d 02 c0       	push   0xc0022d6e
c000633b:	e8 dc 69 01 00       	call   c001cd1c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 45 69 01 00       	call   c001ccc0 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 2d 02 c0       	push   0xc0022d7d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 2d 02 c0       	push   0xc0022d80
c00069fa:	e8 1d 63 01 00       	call   c001cd1c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 31 63 01 00       	call   c001cd38 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d85
c0006a14:	e8 03 63 01 00       	call   c001cd1c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 13 63 01 00       	call   c001cd38 <iso_kprintfd>
c0006a25:	c7 04 24 8b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d8b
c0006a2c:	e8 eb 62 01 00       	call   c001cd1c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 fb 62 01 00       	call   c001cd38 <iso_kprintfd>
c0006a3d:	c7 04 24 91 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d91
c0006a44:	e8 d3 62 01 00       	call   c001cd1c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 e3 62 01 00       	call   c001cd38 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 2d 02 c0       	push   0xc0022d7d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 2d 02 c0       	push   0xc0022d9a
c0006c19:	e8 fe 60 01 00       	call   c001cd1c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 2d 02 c0       	push   0xc0022da5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 2d 02 c0       	push   0xc0022dac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 2d 02 c0       	push   0xc0022db3
c0006d30:	e8 e7 5f 01 00       	call   c001cd1c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 2d 02 c0       	push   0xc0022dbe
c0006d4b:	e8 cc 5f 01 00       	call   c001cd1c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 1d 8b 00 00       	call   c000f897 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 0c 8b 00 00       	call   c000f897 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 f7 8a 00 00       	call   c000f897 <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 de 8a 00 00       	call   c000f897 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 bc 8a 00 00       	call   c000f8a7 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 ae 8a 00 00       	call   c000f8a7 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 94 8a 00 00       	call   c000f8a7 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 7f 8a 00 00       	call   c000f8a7 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 2d 02 c0       	mov    esi,0xc0022dd0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 2d 02 c0       	mov    al,ds:0xc0022dcf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	53                   	push   ebx
c0006ee7:	83 ec 14             	sub    esp,0x14
c0006eea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006eee:	6a 10                	push   0x10
c0006ef0:	e8 c3 63 00 00       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006ef5:	83 c4 10             	add    esp,0x10
c0006ef8:	84 c0                	test   al,al
c0006efa:	75 12                	jne    c0006f0e <Dbg::logc(char)+0x28>
c0006efc:	ba fd 03 00 00       	mov    edx,0x3fd
c0006f01:	ec                   	in     al,dx
c0006f02:	a8 20                	test   al,0x20
c0006f04:	74 fb                	je     c0006f01 <Dbg::logc(char)+0x1b>
c0006f06:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f0b:	88 d8                	mov    al,bl
c0006f0d:	ee                   	out    dx,al
c0006f0e:	83 c4 08             	add    esp,0x8
c0006f11:	5b                   	pop    ebx
c0006f12:	c3                   	ret    

c0006f13 <Dbg::logs(char*)>:
c0006f13:	53                   	push   ebx
c0006f14:	83 ec 08             	sub    esp,0x8
c0006f17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f1b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	74 16                	je     c0006f38 <Dbg::logs(char*)+0x25>
c0006f22:	83 ec 0c             	sub    esp,0xc
c0006f25:	83 c3 01             	add    ebx,0x1
c0006f28:	50                   	push   eax
c0006f29:	e8 b8 ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f2e:	83 c4 10             	add    esp,0x10
c0006f31:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f34:	85 c0                	test   eax,eax
c0006f36:	75 ea                	jne    c0006f22 <Dbg::logs(char*)+0xf>
c0006f38:	83 c4 08             	add    esp,0x8
c0006f3b:	5b                   	pop    ebx
c0006f3c:	c3                   	ret    

c0006f3d <Dbg::logWriteInt(unsigned int)>:
c0006f3d:	83 ec 1c             	sub    esp,0x1c
c0006f40:	6a 0a                	push   0xa
c0006f42:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f46:	50                   	push   eax
c0006f47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f4b:	50                   	push   eax
c0006f4c:	e8 f5 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f51:	50                   	push   eax
c0006f52:	e8 bc ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f57:	83 c4 2c             	add    esp,0x2c
c0006f5a:	c3                   	ret    

c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f5b:	83 ec 1c             	sub    esp,0x1c
c0006f5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f62:	50                   	push   eax
c0006f63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f67:	50                   	push   eax
c0006f68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f6c:	52                   	push   edx
c0006f6d:	e8 d4 fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f72:	50                   	push   eax
c0006f73:	e8 9b ff ff ff       	call   c0006f13 <Dbg::logs(char*)>
c0006f78:	83 c4 2c             	add    esp,0x2c
c0006f7b:	c3                   	ret    

c0006f7c <Dbg::kprintf(char const*, ...)>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 1c             	sub    esp,0x1c
c0006f83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f87:	85 db                	test   ebx,ebx
c0006f89:	0f 84 4c 01 00 00    	je     c00070db <Dbg::kprintf(char const*, ...)+0x15f>
c0006f8f:	83 ec 0c             	sub    esp,0xc
c0006f92:	6a 10                	push   0x10
c0006f94:	e8 1f 63 00 00       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f99:	83 c4 10             	add    esp,0x10
c0006f9c:	84 c0                	test   al,al
c0006f9e:	74 08                	je     c0006fa8 <Dbg::kprintf(char const*, ...)+0x2c>
c0006fa0:	83 c4 1c             	add    esp,0x1c
c0006fa3:	5b                   	pop    ebx
c0006fa4:	5e                   	pop    esi
c0006fa5:	5f                   	pop    edi
c0006fa6:	5d                   	pop    ebp
c0006fa7:	c3                   	ret    
c0006fa8:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006fac:	31 ff                	xor    edi,edi
c0006fae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006fb2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006fb5:	85 c0                	test   eax,eax
c0006fb7:	74 e7                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0006fb9:	8d 77 01             	lea    esi,[edi+0x1]
c0006fbc:	83 f8 25             	cmp    eax,0x25
c0006fbf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fc2:	75 4c                	jne    c0007010 <Dbg::kprintf(char const*, ...)+0x94>
c0006fc4:	83 c7 02             	add    edi,0x2
c0006fc7:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fca:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fcd:	83 e8 25             	sub    eax,0x25
c0006fd0:	0f b6 c0             	movzx  eax,al
c0006fd3:	83 f8 53             	cmp    eax,0x53
c0006fd6:	0f 87 e1 00 00 00    	ja     c00070bd <Dbg::kprintf(char const*, ...)+0x141>
c0006fdc:	ff 24 85 18 2e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd1e8]
c0006fe3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fe7:	83 ec 0c             	sub    esp,0xc
c0006fea:	89 c8                	mov    eax,ecx
c0006fec:	83 c1 04             	add    ecx,0x4
c0006fef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ff5:	50                   	push   eax
c0006ff6:	e8 42 ff ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0006ffb:	83 c4 10             	add    esp,0x10
c0006ffe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007001:	85 c0                	test   eax,eax
c0007003:	74 9b                	je     c0006fa0 <Dbg::kprintf(char const*, ...)+0x24>
c0007005:	8d 77 01             	lea    esi,[edi+0x1]
c0007008:	83 f8 25             	cmp    eax,0x25
c000700b:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000700e:	74 b4                	je     c0006fc4 <Dbg::kprintf(char const*, ...)+0x48>
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 f7                	mov    edi,esi
c0007015:	50                   	push   eax
c0007016:	89 ee                	mov    esi,ebp
c0007018:	e8 c9 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	eb dc                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c0007022:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007026:	83 ec 0c             	sub    esp,0xc
c0007029:	89 c8                	mov    eax,ecx
c000702b:	83 c1 04             	add    ecx,0x4
c000702e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0007030:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007034:	55                   	push   ebp
c0007035:	e8 d9 fe ff ff       	call   c0006f13 <Dbg::logs(char*)>
c000703a:	83 c4 10             	add    esp,0x10
c000703d:	eb bf                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000703f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	89 d0                	mov    eax,edx
c0007048:	83 c2 04             	add    edx,0x4
c000704b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000704f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007051:	51                   	push   ecx
c0007052:	e8 e6 fe ff ff       	call   c0006f3d <Dbg::logWriteInt(unsigned int)>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	eb a2                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000705c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007060:	83 ec 0c             	sub    esp,0xc
c0007063:	89 d0                	mov    eax,edx
c0007065:	83 c2 04             	add    edx,0x4
c0007068:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000706b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000706f:	50                   	push   eax
c0007070:	e8 71 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007075:	83 c4 10             	add    esp,0x10
c0007078:	eb 84                	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000707a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707e:	89 c8                	mov    eax,ecx
c0007080:	83 c1 04             	add    ecx,0x4
c0007083:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	6a 10                	push   0x10
c000708c:	8b 10                	mov    edx,DWORD PTR [eax]
c000708e:	52                   	push   edx
c000708f:	e8 c7 fe ff ff       	call   c0006f5b <Dbg::logWriteIntBase(unsigned int, int)>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	e9 62 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c000709c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070a0:	89 d0                	mov    eax,edx
c00070a2:	83 c2 08             	add    edx,0x8
c00070a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a9:	eb dc                	jmp    c0007087 <Dbg::kprintf(char const*, ...)+0x10b>
c00070ab:	83 ec 0c             	sub    esp,0xc
c00070ae:	6a 25                	push   0x25
c00070b0:	e8 31 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070b5:	83 c4 10             	add    esp,0x10
c00070b8:	e9 41 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 25                	push   0x25
c00070c2:	e8 1f fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070c7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ce:	e8 13 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c00070d3:	83 c4 10             	add    esp,0x10
c00070d6:	e9 23 ff ff ff       	jmp    c0006ffe <Dbg::kprintf(char const*, ...)+0x82>
c00070db:	83 ec 0c             	sub    esp,0xc
c00070de:	68 e0 2d 02 c0       	push   0xc0022de0
c00070e3:	e8 94 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00070e8:	83 c4 10             	add    esp,0x10
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	5b                   	pop    ebx
c00070ef:	5e                   	pop    esi
c00070f0:	5f                   	pop    edi
c00070f1:	5d                   	pop    ebp
c00070f2:	c3                   	ret    
c00070f3:	90                   	nop

c00070f4 <KiUbsanPrintDetails(char const*, void*)>:
c00070f4:	83 ec 1c             	sub    esp,0x1c
c00070f7:	83 ec 08             	sub    esp,0x8
c00070fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070fe:	68 68 2f 02 c0       	push   0xc0022f68
c0007103:	e8 74 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007108:	83 c4 10             	add    esp,0x10
c000710b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000710f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007117:	8b 00                	mov    eax,DWORD PTR [eax]
c0007119:	83 ec 08             	sub    esp,0x8
c000711c:	50                   	push   eax
c000711d:	68 7c 2f 02 c0       	push   0xc0022f7c
c0007122:	e8 55 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007127:	83 c4 10             	add    esp,0x10
c000712a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000712e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007131:	83 ec 08             	sub    esp,0x8
c0007134:	50                   	push   eax
c0007135:	68 86 2f 02 c0       	push   0xc0022f86
c000713a:	e8 3d fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000713f:	83 c4 10             	add    esp,0x10
c0007142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007146:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007149:	83 ec 08             	sub    esp,0x8
c000714c:	50                   	push   eax
c000714d:	68 90 2f 02 c0       	push   0xc0022f90
c0007152:	e8 25 fe ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0007157:	83 c4 10             	add    esp,0x10
c000715a:	90                   	nop
c000715b:	83 c4 1c             	add    esp,0x1c
c000715e:	c3                   	ret    
c000715f:	90                   	nop

c0007160 <__ubsan_handle_type_mismatch_v1>:
c0007160:	83 ec 0c             	sub    esp,0xc
c0007163:	83 ec 08             	sub    esp,0x8
c0007166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000716a:	68 d4 30 02 c0       	push   0xc00230d4
c000716f:	e8 80 ff ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007174:	83 c4 10             	add    esp,0x10
c0007177:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000717c:	75 16                	jne    c0007194 <__ubsan_handle_type_mismatch_v1+0x34>
c000717e:	83 ec 0c             	sub    esp,0xc
c0007181:	68 9a 2f 02 c0       	push   0xc0022f9a
c0007186:	e8 f1 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000718b:	83 c4 10             	add    esp,0x10
c000718e:	e9 91 00 00 00       	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007193:	90                   	nop
c0007194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007198:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000719b:	85 c0                	test   eax,eax
c000719d:	74 29                	je     c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c000719f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00071a6:	83 e8 01             	sub    eax,0x1
c00071a9:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00071ad:	75 19                	jne    c00071c8 <__ubsan_handle_type_mismatch_v1+0x68>
c00071af:	83 ec 08             	sub    esp,0x8
c00071b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071b6:	68 f4 30 02 c0       	push   0xc00230f4
c00071bb:	e8 bc fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071c0:	83 c4 10             	add    esp,0x10
c00071c3:	eb 5f                	jmp    c0007224 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071c5:	8d 76 00             	lea    esi,[esi+0x0]
c00071c8:	83 ec 0c             	sub    esp,0xc
c00071cb:	68 af 2f 02 c0       	push   0xc0022faf
c00071d0:	e8 a7 fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071dc:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071df:	0f b6 c0             	movzx  eax,al
c00071e2:	83 ec 08             	sub    esp,0x8
c00071e5:	50                   	push   eax
c00071e6:	68 c9 2f 02 c0       	push   0xc0022fc9
c00071eb:	e8 8c fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071fa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007205:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007208:	0f b6 c0             	movzx  eax,al
c000720b:	8b 04 85 00 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9e00]
c0007212:	51                   	push   ecx
c0007213:	52                   	push   edx
c0007214:	50                   	push   eax
c0007215:	68 1c 31 02 c0       	push   0xc002311c
c000721a:	e8 5d fd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	66 90                	xchg   ax,ax
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	68 d4 30 02 c0       	push   0xc00230d4
c000722c:	e8 c3 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007231:	83 c4 10             	add    esp,0x10
c0007234:	90                   	nop
c0007235:	83 c4 0c             	add    esp,0xc
c0007238:	c3                   	ret    
c0007239:	8d 76 00             	lea    esi,[esi+0x0]

c000723c <__ubsan_handle_pointer_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 64 31 02 c0       	push   0xc0023164
c000724b:	e8 a4 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 64 31 02 c0       	push   0xc0023164
c000725b:	e8 94 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_out_of_bounds>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 d4 2f 02 c0       	push   0xc0022fd4
c0007277:	e8 78 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 d4 2f 02 c0       	push   0xc0022fd4
c0007287:	e8 68 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_add_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 f1 2f 02 c0       	push   0xc0022ff1
c00072a3:	e8 4c fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 f1 2f 02 c0       	push   0xc0022ff1
c00072b3:	e8 3c 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_load_invalid_value>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 84 31 02 c0       	push   0xc0023184
c00072cf:	e8 20 fe ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 84 31 02 c0       	push   0xc0023184
c00072df:	e8 10 8a 00 00       	call   c000fcf4 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_divrem_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 a8 31 02 c0       	push   0xc00231a8
c00072fb:	e8 f4 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 a8 31 02 c0       	push   0xc00231a8
c000730b:	e8 e4 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_mul_overflow>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 0d 30 02 c0       	push   0xc002300d
c0007327:	e8 c8 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 0d 30 02 c0       	push   0xc002300d
c0007337:	e8 b8 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_sub_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 29 30 02 c0       	push   0xc0023029
c0007353:	e8 9c fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 29 30 02 c0       	push   0xc0023029
c0007363:	e8 8c 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <__ubsan_handle_shift_out_of_bounds>:
c0007370:	83 ec 0c             	sub    esp,0xc
c0007373:	83 ec 08             	sub    esp,0x8
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	68 c8 31 02 c0       	push   0xc00231c8
c000737f:	e8 70 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c0007384:	83 c4 10             	add    esp,0x10
c0007387:	83 ec 0c             	sub    esp,0xc
c000738a:	68 c8 31 02 c0       	push   0xc00231c8
c000738f:	e8 60 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007394:	83 c4 10             	add    esp,0x10
c0007397:	90                   	nop
c0007398:	83 c4 0c             	add    esp,0xc
c000739b:	c3                   	ret    

c000739c <__ubsan_handle_negate_overflow>:
c000739c:	83 ec 0c             	sub    esp,0xc
c000739f:	83 ec 08             	sub    esp,0x8
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	68 ec 31 02 c0       	push   0xc00231ec
c00073ab:	e8 44 fd ff ff       	call   c00070f4 <KiUbsanPrintDetails(char const*, void*)>
c00073b0:	83 c4 10             	add    esp,0x10
c00073b3:	83 ec 0c             	sub    esp,0xc
c00073b6:	68 ec 31 02 c0       	push   0xc00231ec
c00073bb:	e8 34 89 00 00       	call   c000fcf4 <KePanic(char const*)>
c00073c0:	83 c4 10             	add    esp,0x10
c00073c3:	90                   	nop
c00073c4:	83 c4 0c             	add    esp,0xc
c00073c7:	c3                   	ret    

c00073c8 <KiIsHashInTable(unsigned short)>:
c00073c8:	0f b7 d0             	movzx  edx,ax
c00073cb:	83 e0 07             	and    eax,0x7
c00073ce:	c1 fa 03             	sar    edx,0x3
c00073d1:	88 c1                	mov    cl,al
c00073d3:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c00073da:	d3 fa                	sar    edx,cl
c00073dc:	89 d0                	mov    eax,edx
c00073de:	83 e0 01             	and    eax,0x1
c00073e1:	c3                   	ret    

c00073e2 <KiSetHashInTable(unsigned short, bool)>:
c00073e2:	56                   	push   esi
c00073e3:	53                   	push   ebx
c00073e4:	0f b7 d8             	movzx  ebx,ax
c00073e7:	83 e0 07             	and    eax,0x7
c00073ea:	c1 fb 03             	sar    ebx,0x3
c00073ed:	89 c1                	mov    ecx,eax
c00073ef:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c00073f6:	b8 01 00 00 00       	mov    eax,0x1
c00073fb:	d3 e0                	shl    eax,cl
c00073fd:	84 d2                	test   dl,dl
c00073ff:	74 04                	je     c0007405 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007401:	09 f0                	or     eax,esi
c0007403:	eb 04                	jmp    c0007409 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007405:	f7 d0                	not    eax
c0007407:	21 f0                	and    eax,esi
c0007409:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c000740f:	5b                   	pop    ebx
c0007410:	5e                   	pop    esi
c0007411:	c3                   	ret    

c0007412 <KiFlushSymlinkChanges()>:
c0007412:	57                   	push   edi
c0007413:	56                   	push   esi
c0007414:	53                   	push   ebx
c0007415:	83 ec 1c             	sub    esp,0x1c
c0007418:	68 14 01 00 00       	push   0x114
c000741d:	e8 75 84 00 00       	call   c000f897 <malloc>
c0007422:	83 c4 0c             	add    esp,0xc
c0007425:	89 c3                	mov    ebx,eax
c0007427:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000742d:	68 0b 32 02 c0       	push   0xc002320b
c0007432:	50                   	push   eax
c0007433:	e8 52 0d 00 00       	call   c000818a <File::File(char const*, Process*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	85 db                	test   ebx,ebx
c000743d:	75 10                	jne    c000744f <KiFlushSymlinkChanges()+0x3d>
c000743f:	83 ec 0c             	sub    esp,0xc
c0007442:	68 29 32 02 c0       	push   0xc0023229
c0007447:	e8 a8 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c000744c:	83 c4 10             	add    esp,0x10
c000744f:	50                   	push   eax
c0007450:	50                   	push   eax
c0007451:	6a 06                	push   0x6
c0007453:	53                   	push   ebx
c0007454:	e8 4f 0d 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	85 c0                	test   eax,eax
c000745e:	74 10                	je     c0007470 <KiFlushSymlinkChanges()+0x5e>
c0007460:	83 ec 0c             	sub    esp,0xc
c0007463:	68 43 32 02 c0       	push   0xc0023243
c0007468:	e8 87 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c000746d:	83 c4 10             	add    esp,0x10
c0007470:	31 f6                	xor    esi,esi
c0007472:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007478:	7e 70                	jle    c00074ea <KiFlushSymlinkChanges()+0xd8>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000747f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007483:	89 f0                	mov    eax,esi
c0007485:	57                   	push   edi
c0007486:	c1 e0 08             	shl    eax,0x8
c0007489:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000748e:	50                   	push   eax
c000748f:	6a 00                	push   0x0
c0007491:	68 00 01 00 00       	push   0x100
c0007496:	53                   	push   ebx
c0007497:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000749a:	83 c4 20             	add    esp,0x20
c000749d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00074a5:	74 10                	je     c00074b7 <KiFlushSymlinkChanges()+0xa5>
c00074a7:	83 ec 0c             	sub    esp,0xc
c00074aa:	68 5d 32 02 c0       	push   0xc002325d
c00074af:	e8 40 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c00074b4:	83 c4 10             	add    esp,0x10
c00074b7:	83 ec 0c             	sub    esp,0xc
c00074ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074bc:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c00074c3:	57                   	push   edi
c00074c4:	52                   	push   edx
c00074c5:	6a 00                	push   0x0
c00074c7:	6a 08                	push   0x8
c00074c9:	53                   	push   ebx
c00074ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074d5:	74 10                	je     c00074e7 <KiFlushSymlinkChanges()+0xd5>
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	68 77 32 02 c0       	push   0xc0023277
c00074df:	e8 10 88 00 00       	call   c000fcf4 <KePanic(char const*)>
c00074e4:	83 c4 10             	add    esp,0x10
c00074e7:	46                   	inc    esi
c00074e8:	eb 88                	jmp    c0007472 <KiFlushSymlinkChanges()+0x60>
c00074ea:	83 ec 0c             	sub    esp,0xc
c00074ed:	53                   	push   ebx
c00074ee:	e8 13 0d 00 00       	call   c0008206 <File::close()>
c00074f3:	83 c4 10             	add    esp,0x10
c00074f6:	85 db                	test   ebx,ebx
c00074f8:	74 0c                	je     c0007506 <KiFlushSymlinkChanges()+0xf4>
c00074fa:	83 ec 0c             	sub    esp,0xc
c00074fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074ff:	53                   	push   ebx
c0007500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007503:	83 c4 10             	add    esp,0x10
c0007506:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c0007510:	83 c4 10             	add    esp,0x10
c0007513:	5b                   	pop    ebx
c0007514:	5e                   	pop    esi
c0007515:	5f                   	pop    edi
c0007516:	c3                   	ret    

c0007517 <KiDeinitialiseSymlinks(void*)>:
c0007517:	e9 f6 fe ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>

c000751c <KiGetSymlinkHash(char const*)>:
c000751c:	53                   	push   ebx
c000751d:	89 c3                	mov    ebx,eax
c000751f:	83 ec 14             	sub    esp,0x14
c0007522:	50                   	push   eax
c0007523:	e8 48 90 ff ff       	call   c0000570 <strlen>
c0007528:	5a                   	pop    edx
c0007529:	59                   	pop    ecx
c000752a:	50                   	push   eax
c000752b:	53                   	push   ebx
c000752c:	e8 38 6c 00 00       	call   c000e169 <KeCalculateCRC32(unsigned char*, int)>
c0007531:	83 c4 18             	add    esp,0x18
c0007534:	89 c2                	mov    edx,eax
c0007536:	5b                   	pop    ebx
c0007537:	c1 ea 10             	shr    edx,0x10
c000753a:	31 d0                	xor    eax,edx
c000753c:	c3                   	ret    

c000753d <KiCreateSymlinkID()>:
c000753d:	55                   	push   ebp
c000753e:	57                   	push   edi
c000753f:	56                   	push   esi
c0007540:	53                   	push   ebx
c0007541:	31 db                	xor    ebx,ebx
c0007543:	83 ec 1c             	sub    esp,0x1c
c0007546:	e8 35 92 00 00       	call   c0010780 <KeRand()>
c000754b:	43                   	inc    ebx
c000754c:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c0007552:	31 d2                	xor    edx,edx
c0007554:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007557:	0f a4 c2 1f          	shld   edx,eax,0x1f
c000755b:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007561:	c1 e0 1f             	shl    eax,0x1f
c0007564:	89 d7                	mov    edi,edx
c0007566:	89 c6                	mov    esi,eax
c0007568:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000756c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007574:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000757a:	75 10                	jne    c000758c <KiCreateSymlinkID()+0x4f>
c000757c:	83 ec 0c             	sub    esp,0xc
c000757f:	68 91 32 02 c0       	push   0xc0023291
c0007584:	e8 6b 87 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007589:	83 c4 10             	add    esp,0x10
c000758c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007590:	75 04                	jne    c0007596 <KiCreateSymlinkID()+0x59>
c0007592:	39 f5                	cmp    ebp,esi
c0007594:	74 b0                	je     c0007546 <KiCreateSymlinkID()+0x9>
c0007596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000759e:	31 f0                	xor    eax,esi
c00075a0:	83 c4 1c             	add    esp,0x1c
c00075a3:	31 fa                	xor    edx,edi
c00075a5:	5b                   	pop    ebx
c00075a6:	5e                   	pop    esi
c00075a7:	5f                   	pop    edi
c00075a8:	5d                   	pop    ebp
c00075a9:	c3                   	ret    

c00075aa <KeRegisterSymlink(char const*, unsigned long long)>:
c00075aa:	53                   	push   ebx
c00075ab:	83 ec 0c             	sub    esp,0xc
c00075ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00075b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ba:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075bf:	68 00 01 00 00       	push   0x100
c00075c4:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c00075cb:	6a 00                	push   0x0
c00075cd:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c00075d4:	c1 e0 08             	shl    eax,0x8
c00075d7:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075dc:	50                   	push   eax
c00075dd:	e8 0e 8f ff ff       	call   c00004f0 <memset>
c00075e2:	58                   	pop    eax
c00075e3:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075e8:	5a                   	pop    edx
c00075e9:	c1 e0 08             	shl    eax,0x8
c00075ec:	53                   	push   ebx
c00075ed:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00075f2:	50                   	push   eax
c00075f3:	e8 48 90 ff ff       	call   c0000640 <strcpy>
c00075f8:	89 d8                	mov    eax,ebx
c00075fa:	e8 1d ff ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00075ff:	ba 01 00 00 00       	mov    edx,0x1
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	e8 d6 fd ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000760c:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007611:	83 c4 10             	add    esp,0x10
c0007614:	40                   	inc    eax
c0007615:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c000761a:	83 f8 03             	cmp    eax,0x3
c000761d:	7e 09                	jle    c0007628 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000761f:	83 c4 08             	add    esp,0x8
c0007622:	5b                   	pop    ebx
c0007623:	e9 ea fd ff ff       	jmp    c0007412 <KiFlushSymlinkChanges()>
c0007628:	83 c4 08             	add    esp,0x8
c000762b:	5b                   	pop    ebx
c000762c:	c3                   	ret    

c000762d <KeInitialiseSymlinks()>:
c000762d:	57                   	push   edi
c000762e:	56                   	push   esi
c000762f:	53                   	push   ebx
c0007630:	81 ec 14 01 00 00    	sub    esp,0x114
c0007636:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c0007640:	68 00 20 00 00       	push   0x2000
c0007645:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c000764f:	6a 00                	push   0x0
c0007651:	68 00 93 02 c0       	push   0xc0029300
c0007656:	e8 95 8e ff ff       	call   c00004f0 <memset>
c000765b:	59                   	pop    ecx
c000765c:	5b                   	pop    ebx
c000765d:	6a 00                	push   0x0
c000765f:	68 17 75 00 c0       	push   0xc0007517
c0007664:	e8 df 5b 00 00       	call   c000d248 <KeRegisterAtexit(void (*)(void*), void*)>
c0007669:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007670:	e8 22 82 00 00       	call   c000f897 <malloc>
c0007675:	83 c4 0c             	add    esp,0xc
c0007678:	89 c3                	mov    ebx,eax
c000767a:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007680:	68 0b 32 02 c0       	push   0xc002320b
c0007685:	50                   	push   eax
c0007686:	e8 ff 0a 00 00       	call   c000818a <File::File(char const*, Process*)>
c000768b:	83 c4 10             	add    esp,0x10
c000768e:	85 db                	test   ebx,ebx
c0007690:	75 10                	jne    c00076a2 <KeInitialiseSymlinks()+0x75>
c0007692:	83 ec 0c             	sub    esp,0xc
c0007695:	68 9a 32 02 c0       	push   0xc002329a
c000769a:	e8 55 86 00 00       	call   c000fcf4 <KePanic(char const*)>
c000769f:	83 c4 10             	add    esp,0x10
c00076a2:	83 ec 0c             	sub    esp,0xc
c00076a5:	53                   	push   ebx
c00076a6:	e8 c1 0d 00 00       	call   c000846c <File::exists()>
c00076ab:	83 c4 10             	add    esp,0x10
c00076ae:	84 c0                	test   al,al
c00076b0:	75 3a                	jne    c00076ec <KeInitialiseSymlinks()+0xbf>
c00076b2:	52                   	push   edx
c00076b3:	52                   	push   edx
c00076b4:	6a 12                	push   0x12
c00076b6:	53                   	push   ebx
c00076b7:	e8 ec 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076bc:	83 c4 10             	add    esp,0x10
c00076bf:	85 c0                	test   eax,eax
c00076c1:	74 10                	je     c00076d3 <KeInitialiseSymlinks()+0xa6>
c00076c3:	83 ec 0c             	sub    esp,0xc
c00076c6:	68 b7 32 02 c0       	push   0xc00232b7
c00076cb:	e8 24 86 00 00       	call   c000fcf4 <KePanic(char const*)>
c00076d0:	83 c4 10             	add    esp,0x10
c00076d3:	83 ec 0c             	sub    esp,0xc
c00076d6:	53                   	push   ebx
c00076d7:	e8 2a 0b 00 00       	call   c0008206 <File::close()>
c00076dc:	83 c4 10             	add    esp,0x10
c00076df:	85 db                	test   ebx,ebx
c00076e1:	0f 84 9e 00 00 00    	je     c0007785 <KeInitialiseSymlinks()+0x158>
c00076e7:	e9 8d 00 00 00       	jmp    c0007779 <KeInitialiseSymlinks()+0x14c>
c00076ec:	50                   	push   eax
c00076ed:	50                   	push   eax
c00076ee:	6a 01                	push   0x1
c00076f0:	53                   	push   ebx
c00076f1:	e8 b2 0a 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c00076f6:	83 c4 10             	add    esp,0x10
c00076f9:	85 c0                	test   eax,eax
c00076fb:	74 10                	je     c000770d <KeInitialiseSymlinks()+0xe0>
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	68 d4 32 02 c0       	push   0xc00232d4
c0007705:	e8 ea 85 00 00       	call   c000fcf4 <KePanic(char const*)>
c000770a:	83 c4 10             	add    esp,0x10
c000770d:	83 ec 0c             	sub    esp,0xc
c0007710:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c0007716:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000771a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000771c:	57                   	push   edi
c000771d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0007721:	56                   	push   esi
c0007722:	6a 00                	push   0x0
c0007724:	68 00 01 00 00       	push   0x100
c0007729:	53                   	push   ebx
c000772a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000772d:	83 c4 20             	add    esp,0x20
c0007730:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007738:	75 33                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c000773a:	83 ec 0c             	sub    esp,0xc
c000773d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000773f:	57                   	push   edi
c0007740:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007744:	52                   	push   edx
c0007745:	6a 00                	push   0x0
c0007747:	6a 08                	push   0x8
c0007749:	53                   	push   ebx
c000774a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000774d:	83 c4 20             	add    esp,0x20
c0007750:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007755:	75 16                	jne    c000776d <KeInitialiseSymlinks()+0x140>
c0007757:	89 f0                	mov    eax,esi
c0007759:	e8 be fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c000775e:	ba 01 00 00 00       	mov    edx,0x1
c0007763:	0f b7 c0             	movzx  eax,ax
c0007766:	e8 77 fc ff ff       	call   c00073e2 <KiSetHashInTable(unsigned short, bool)>
c000776b:	eb a0                	jmp    c000770d <KeInitialiseSymlinks()+0xe0>
c000776d:	83 ec 0c             	sub    esp,0xc
c0007770:	53                   	push   ebx
c0007771:	e8 90 0a 00 00       	call   c0008206 <File::close()>
c0007776:	83 c4 10             	add    esp,0x10
c0007779:	83 ec 0c             	sub    esp,0xc
c000777c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000777e:	53                   	push   ebx
c000777f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	81 c4 10 01 00 00    	add    esp,0x110
c000778b:	5b                   	pop    ebx
c000778c:	5e                   	pop    esi
c000778d:	5f                   	pop    edi
c000778e:	c3                   	ret    

c000778f <KiIsSymlinkRegistered(char const*)>:
c000778f:	55                   	push   ebp
c0007790:	57                   	push   edi
c0007791:	56                   	push   esi
c0007792:	53                   	push   ebx
c0007793:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007799:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c00077a0:	89 f0                	mov    eax,esi
c00077a2:	e8 75 fd ff ff       	call   c000751c <KiGetSymlinkHash(char const*)>
c00077a7:	0f b7 c0             	movzx  eax,ax
c00077aa:	e8 19 fc ff ff       	call   c00073c8 <KiIsHashInTable(unsigned short)>
c00077af:	31 d2                	xor    edx,edx
c00077b1:	88 c1                	mov    cl,al
c00077b3:	31 c0                	xor    eax,eax
c00077b5:	84 c9                	test   cl,cl
c00077b7:	0f 84 31 01 00 00    	je     c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077bd:	31 db                	xor    ebx,ebx
c00077bf:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c00077c5:	7e 30                	jle    c00077f7 <KiIsSymlinkRegistered(char const*)+0x68>
c00077c7:	89 d8                	mov    eax,ebx
c00077c9:	51                   	push   ecx
c00077ca:	c1 e0 08             	shl    eax,0x8
c00077cd:	51                   	push   ecx
c00077ce:	05 00 8f 02 c0       	add    eax,0xc0028f00
c00077d3:	50                   	push   eax
c00077d4:	56                   	push   esi
c00077d5:	e8 76 8f ff ff       	call   c0000750 <strcmp>
c00077da:	83 c4 10             	add    esp,0x10
c00077dd:	85 c0                	test   eax,eax
c00077df:	75 13                	jne    c00077f4 <KiIsSymlinkRegistered(char const*)+0x65>
c00077e1:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c00077e8:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c00077ef:	e9 fa 00 00 00       	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00077f4:	43                   	inc    ebx
c00077f5:	eb c8                	jmp    c00077bf <KiIsSymlinkRegistered(char const*)+0x30>
c00077f7:	83 ec 0c             	sub    esp,0xc
c00077fa:	68 14 01 00 00       	push   0x114
c00077ff:	e8 93 80 00 00       	call   c000f897 <malloc>
c0007804:	83 c4 0c             	add    esp,0xc
c0007807:	89 c3                	mov    ebx,eax
c0007809:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000780f:	68 0b 32 02 c0       	push   0xc002320b
c0007814:	50                   	push   eax
c0007815:	e8 70 09 00 00       	call   c000818a <File::File(char const*, Process*)>
c000781a:	83 c4 10             	add    esp,0x10
c000781d:	85 db                	test   ebx,ebx
c000781f:	75 12                	jne    c0007833 <KiIsSymlinkRegistered(char const*)+0xa4>
c0007821:	83 ec 0c             	sub    esp,0xc
c0007824:	68 ef 32 02 c0       	push   0xc00232ef
c0007829:	e8 c6 84 00 00       	call   c000fcf4 <KePanic(char const*)>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	eb 10                	jmp    c0007843 <KiIsSymlinkRegistered(char const*)+0xb4>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	53                   	push   ebx
c0007837:	e8 30 0c 00 00       	call   c000846c <File::exists()>
c000783c:	83 c4 10             	add    esp,0x10
c000783f:	84 c0                	test   al,al
c0007841:	74 de                	je     c0007821 <KiIsSymlinkRegistered(char const*)+0x92>
c0007843:	52                   	push   edx
c0007844:	52                   	push   edx
c0007845:	6a 01                	push   0x1
c0007847:	53                   	push   ebx
c0007848:	e8 5b 09 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c000784d:	83 c4 10             	add    esp,0x10
c0007850:	85 c0                	test   eax,eax
c0007852:	74 10                	je     c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007854:	83 ec 0c             	sub    esp,0xc
c0007857:	68 0a 33 02 c0       	push   0xc002330a
c000785c:	e8 93 84 00 00       	call   c000fcf4 <KePanic(char const*)>
c0007861:	83 c4 10             	add    esp,0x10
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007869:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000786d:	55                   	push   ebp
c000786e:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007872:	57                   	push   edi
c0007873:	6a 00                	push   0x0
c0007875:	68 00 01 00 00       	push   0x100
c000787a:	53                   	push   ebx
c000787b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007889:	75 4b                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007890:	55                   	push   ebp
c0007891:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007895:	52                   	push   edx
c0007896:	6a 00                	push   0x0
c0007898:	6a 08                	push   0x8
c000789a:	53                   	push   ebx
c000789b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000789e:	83 c4 20             	add    esp,0x20
c00078a1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00078a6:	75 2e                	jne    c00078d6 <KiIsSymlinkRegistered(char const*)+0x147>
c00078a8:	50                   	push   eax
c00078a9:	50                   	push   eax
c00078aa:	57                   	push   edi
c00078ab:	56                   	push   esi
c00078ac:	e8 9f 8e ff ff       	call   c0000750 <strcmp>
c00078b1:	83 c4 10             	add    esp,0x10
c00078b4:	85 c0                	test   eax,eax
c00078b6:	75 ac                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0xd5>
c00078b8:	83 ec 0c             	sub    esp,0xc
c00078bb:	53                   	push   ebx
c00078bc:	e8 45 09 00 00       	call   c0008206 <File::close()>
c00078c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	eb 18                	jmp    c00078ee <KiIsSymlinkRegistered(char const*)+0x15f>
c00078d6:	83 ec 0c             	sub    esp,0xc
c00078d9:	53                   	push   ebx
c00078da:	e8 27 09 00 00       	call   c0008206 <File::close()>
c00078df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078e7:	83 c4 10             	add    esp,0x10
c00078ea:	31 c0                	xor    eax,eax
c00078ec:	31 d2                	xor    edx,edx
c00078ee:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078f4:	5b                   	pop    ebx
c00078f5:	5e                   	pop    esi
c00078f6:	5f                   	pop    edi
c00078f7:	5d                   	pop    ebp
c00078f8:	c3                   	ret    

c00078f9 <KeDereferenceSymlink(char const*, char*)>:
c00078f9:	55                   	push   ebp
c00078fa:	57                   	push   edi
c00078fb:	56                   	push   esi
c00078fc:	53                   	push   ebx
c00078fd:	83 ec 48             	sub    esp,0x48
c0007900:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007904:	56                   	push   esi
c0007905:	e8 85 fe ff ff       	call   c000778f <KiIsSymlinkRegistered(char const*)>
c000790a:	83 c4 10             	add    esp,0x10
c000790d:	89 c7                	mov    edi,eax
c000790f:	89 d0                	mov    eax,edx
c0007911:	09 f8                	or     eax,edi
c0007913:	75 07                	jne    c000791c <KeDereferenceSymlink(char const*, char*)+0x23>
c0007915:	31 c0                	xor    eax,eax
c0007917:	e9 7c 01 00 00       	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c000791c:	83 ec 0c             	sub    esp,0xc
c000791f:	89 d5                	mov    ebp,edx
c0007921:	68 14 01 00 00       	push   0x114
c0007926:	e8 6c 7f 00 00       	call   c000f897 <malloc>
c000792b:	83 c4 0c             	add    esp,0xc
c000792e:	89 c3                	mov    ebx,eax
c0007930:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007936:	56                   	push   esi
c0007937:	50                   	push   eax
c0007938:	e8 4d 08 00 00       	call   c000818a <File::File(char const*, Process*)>
c000793d:	83 c4 10             	add    esp,0x10
c0007940:	85 db                	test   ebx,ebx
c0007942:	0f 84 32 01 00 00    	je     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007948:	56                   	push   esi
c0007949:	56                   	push   esi
c000794a:	6a 01                	push   0x1
c000794c:	53                   	push   ebx
c000794d:	e8 56 08 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007952:	83 c4 10             	add    esp,0x10
c0007955:	85 c0                	test   eax,eax
c0007957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007959:	74 09                	je     c0007964 <KeDereferenceSymlink(char const*, char*)+0x6b>
c000795b:	83 ec 0c             	sub    esp,0xc
c000795e:	53                   	push   ebx
c000795f:	e9 10 01 00 00       	jmp    c0007a74 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0007964:	83 ec 0c             	sub    esp,0xc
c0007967:	8d 74 24 18          	lea    esi,[esp+0x18]
c000796b:	56                   	push   esi
c000796c:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007970:	52                   	push   edx
c0007971:	6a 00                	push   0x0
c0007973:	6a 08                	push   0x8
c0007975:	53                   	push   ebx
c0007976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	85 c0                	test   eax,eax
c000797e:	0f 85 e2 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007984:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007989:	0f 85 d7 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007994:	56                   	push   esi
c0007995:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007999:	52                   	push   edx
c000799a:	6a 00                	push   0x0
c000799c:	6a 08                	push   0x8
c000799e:	53                   	push   ebx
c000799f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079a2:	83 c4 20             	add    esp,0x20
c00079a5:	85 c0                	test   eax,eax
c00079a7:	0f 85 b9 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ad:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00079b2:	0f 85 ae 00 00 00    	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b8:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079bc:	0f 85 53 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079c2:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079c6:	0f 85 49 ff ff ff    	jne    c0007915 <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079dc:	51                   	push   ecx
c00079dd:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079e1:	50                   	push   eax
c00079e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079e6:	50                   	push   eax
c00079e7:	53                   	push   ebx
c00079e8:	e8 bd 0a 00 00       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079f5:	75 6f                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	bf 0f 00 00 00       	mov    edi,0xf
c00079fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a06:	39 c7                	cmp    edi,eax
c0007a08:	89 cf                	mov    edi,ecx
c0007a0a:	19 d7                	sbb    edi,edx
c0007a0c:	73 58                	jae    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a0e:	83 c0 f0             	add    eax,0xfffffff0
c0007a11:	bf ff 00 00 00       	mov    edi,0xff
c0007a16:	83 d2 ff             	adc    edx,0xffffffff
c0007a19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a1d:	39 c7                	cmp    edi,eax
c0007a1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a23:	19 d1                	sbb    ecx,edx
c0007a25:	72 53                	jb     c0007a7a <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a27:	40                   	inc    eax
c0007a28:	52                   	push   edx
c0007a29:	50                   	push   eax
c0007a2a:	6a 00                	push   0x0
c0007a2c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a30:	e8 bb 8a ff ff       	call   c00004f0 <memset>
c0007a35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a37:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a46:	53                   	push   ebx
c0007a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a4a:	83 c4 20             	add    esp,0x20
c0007a4d:	85 c0                	test   eax,eax
c0007a4f:	75 15                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a55:	89 c7                	mov    edi,eax
c0007a57:	c1 ff 1f             	sar    edi,0x1f
c0007a5a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a5e:	75 06                	jne    c0007a66 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a60:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a64:	74 19                	je     c0007a7f <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a66:	83 ec 0c             	sub    esp,0xc
c0007a69:	53                   	push   ebx
c0007a6a:	e8 97 07 00 00       	call   c0008206 <File::close()>
c0007a6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a77:	83 c4 10             	add    esp,0x10
c0007a7a:	83 c8 ff             	or     eax,0xffffffff
c0007a7d:	eb 19                	jmp    c0007a98 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a7f:	83 ec 0c             	sub    esp,0xc
c0007a82:	53                   	push   ebx
c0007a83:	e8 7e 07 00 00       	call   c0008206 <File::close()>
c0007a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a90:	83 c4 10             	add    esp,0x10
c0007a93:	b8 01 00 00 00       	mov    eax,0x1
c0007a98:	83 c4 3c             	add    esp,0x3c
c0007a9b:	5b                   	pop    ebx
c0007a9c:	5e                   	pop    esi
c0007a9d:	5f                   	pop    edi
c0007a9e:	5d                   	pop    ebp
c0007a9f:	c3                   	ret    

c0007aa0 <KeCreateSymlink(char const*, char const*)>:
c0007aa0:	55                   	push   ebp
c0007aa1:	57                   	push   edi
c0007aa2:	56                   	push   esi
c0007aa3:	53                   	push   ebx
c0007aa4:	83 ec 38             	sub    esp,0x38
c0007aa7:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007aab:	68 14 01 00 00       	push   0x114
c0007ab0:	e8 e2 7d 00 00       	call   c000f897 <malloc>
c0007ab5:	6a 00                	push   0x0
c0007ab7:	89 c3                	mov    ebx,eax
c0007ab9:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0007abf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007ac3:	50                   	push   eax
c0007ac4:	e8 c3 05 00 00       	call   c000808c <File::File(char const*, Process*, bool)>
c0007ac9:	83 c4 20             	add    esp,0x20
c0007acc:	b8 01 00 00 00       	mov    eax,0x1
c0007ad1:	85 db                	test   ebx,ebx
c0007ad3:	0f 84 fb 00 00 00    	je     c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007ad9:	52                   	push   edx
c0007ada:	52                   	push   edx
c0007adb:	6a 12                	push   0x12
c0007add:	53                   	push   ebx
c0007ade:	e8 c5 06 00 00       	call   c00081a8 <File::open(FileOpenMode)>
c0007ae3:	83 c4 10             	add    esp,0x10
c0007ae6:	85 c0                	test   eax,eax
c0007ae8:	74 0b                	je     c0007af5 <KeCreateSymlink(char const*, char const*)+0x55>
c0007aea:	83 ec 0c             	sub    esp,0xc
c0007aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aef:	53                   	push   ebx
c0007af0:	e9 d4 00 00 00       	jmp    c0007bc9 <KeCreateSymlink(char const*, char const*)+0x129>
c0007af5:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007af9:	be 25 33 02 c0       	mov    esi,0xc0023325
c0007afe:	b9 09 00 00 00       	mov    ecx,0x9
c0007b03:	fc                   	cld    
c0007b04:	83 ec 0c             	sub    esp,0xc
c0007b07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007b09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007b0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0f:	56                   	push   esi
c0007b10:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007b14:	52                   	push   edx
c0007b15:	6a 00                	push   0x0
c0007b17:	6a 08                	push   0x8
c0007b19:	53                   	push   ebx
c0007b1a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b1d:	83 c4 20             	add    esp,0x20
c0007b20:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b25:	0f 85 90 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b2b:	85 c0                	test   eax,eax
c0007b2d:	0f 85 88 00 00 00    	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b33:	e8 05 fa ff ff       	call   c000753d <KiCreateSymlinkID()>
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b45:	56                   	push   esi
c0007b46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b4a:	52                   	push   edx
c0007b4b:	6a 00                	push   0x0
c0007b4d:	6a 08                	push   0x8
c0007b4f:	53                   	push   ebx
c0007b50:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b53:	83 c4 20             	add    esp,0x20
c0007b56:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b5b:	75 5e                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b5d:	85 c0                	test   eax,eax
c0007b5f:	75 5a                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b61:	83 ec 0c             	sub    esp,0xc
c0007b64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b66:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b69:	55                   	push   ebp
c0007b6a:	e8 01 8a ff ff       	call   c0000570 <strlen>
c0007b6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b72:	31 d2                	xor    edx,edx
c0007b74:	55                   	push   ebp
c0007b75:	52                   	push   edx
c0007b76:	50                   	push   eax
c0007b77:	53                   	push   ebx
c0007b78:	ff d7                	call   edi
c0007b7a:	83 c4 14             	add    esp,0x14
c0007b7d:	89 c6                	mov    esi,eax
c0007b7f:	55                   	push   ebp
c0007b80:	e8 eb 89 ff ff       	call   c0000570 <strlen>
c0007b85:	83 c4 10             	add    esp,0x10
c0007b88:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b8c:	75 2d                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b8e:	85 f6                	test   esi,esi
c0007b90:	75 29                	jne    c0007bbb <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b92:	50                   	push   eax
c0007b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b97:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b9b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b9f:	e8 06 fa ff ff       	call   c00075aa <KeRegisterSymlink(char const*, unsigned long long)>
c0007ba4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba7:	e8 5a 06 00 00       	call   c0008206 <File::close()>
c0007bac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb4:	83 c4 10             	add    esp,0x10
c0007bb7:	31 c0                	xor    eax,eax
c0007bb9:	eb 19                	jmp    c0007bd4 <KeCreateSymlink(char const*, char const*)+0x134>
c0007bbb:	83 ec 0c             	sub    esp,0xc
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 42 06 00 00       	call   c0008206 <File::close()>
c0007bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bcc:	83 c4 10             	add    esp,0x10
c0007bcf:	b8 01 00 00 00       	mov    eax,0x1
c0007bd4:	83 c4 2c             	add    esp,0x2c
c0007bd7:	5b                   	pop    ebx
c0007bd8:	5e                   	pop    esi
c0007bd9:	5f                   	pop    edi
c0007bda:	5d                   	pop    ebp
c0007bdb:	c3                   	ret    

c0007bdc <File::read(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::read(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::read(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::read(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <File::write(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <File::write(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <File::write(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <File::write(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::read(unsigned long long, void*, int*)>:
c0007c8c:	53                   	push   ebx
c0007c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c9c:	83 f8 19             	cmp    eax,0x19
c0007c9f:	77 35                	ja     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ca8:	85 c0                	test   eax,eax
c0007caa:	74 2a                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007cb2:	85 c0                	test   eax,eax
c0007cb4:	74 20                	je     c0007cd6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007cb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007cba:	74 21                	je     c0007cdd <Directory::read(unsigned long long, void*, int*)+0x51>
c0007cbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007cbe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cc2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ccc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cd0:	5b                   	pop    ebx
c0007cd1:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cd4:	ff e0                	jmp    eax
c0007cd6:	b8 0b 00 00 00       	mov    eax,0xb
c0007cdb:	eb 05                	jmp    c0007ce2 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cdd:	b8 05 00 00 00       	mov    eax,0x5
c0007ce2:	5b                   	pop    ebx
c0007ce3:	c3                   	ret    

c0007ce4 <Directory::write(unsigned long long, void*, int*)>:
c0007ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ce8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cef:	b8 0b 00 00 00       	mov    eax,0xb
c0007cf4:	83 fa 19             	cmp    edx,0x19
c0007cf7:	77 18                	ja     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cf9:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007d00:	85 d2                	test   edx,edx
c0007d02:	74 0d                	je     c0007d11 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007d04:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007d0b:	19 c0                	sbb    eax,eax
c0007d0d:	83 e0 0a             	and    eax,0xa
c0007d10:	40                   	inc    eax
c0007d11:	c3                   	ret    

c0007d12 <File::isAtty()>:
c0007d12:	31 c0                	xor    eax,eax
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <Directory::isAtty()>:
c0007d16:	31 c0                	xor    eax,eax
c0007d18:	c3                   	ret    
c0007d19:	90                   	nop

c0007d1a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d1a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d1f:	c3                   	ret    

c0007d20 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d20:	b8 0a 00 00 00       	mov    eax,0xa
c0007d25:	c3                   	ret    

c0007d26 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d26:	31 c0                	xor    eax,eax
c0007d28:	31 d2                	xor    edx,edx
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <File::~File()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	89 10                	mov    DWORD PTR [eax],edx
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	83 ec 0c             	sub    esp,0xc
c0007d41:	50                   	push   eax
c0007d42:	e8 83 b3 00 00       	call   c00130ca <UnixFile::~UnixFile()>
c0007d47:	83 c4 10             	add    esp,0x10
c0007d4a:	90                   	nop
c0007d4b:	83 c4 0c             	add    esp,0xc
c0007d4e:	c3                   	ret    
c0007d4f:	90                   	nop

c0007d50 <File::~File()>:
c0007d50:	83 ec 0c             	sub    esp,0xc
c0007d53:	83 ec 0c             	sub    esp,0xc
c0007d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d5a:	e8 cd ff ff ff       	call   c0007d2c <File::~File()>
c0007d5f:	83 c4 10             	add    esp,0x10
c0007d62:	83 ec 08             	sub    esp,0x8
c0007d65:	68 14 01 00 00       	push   0x114
c0007d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d6e:	e8 3d 56 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007d73:	83 c4 10             	add    esp,0x10
c0007d76:	83 c4 0c             	add    esp,0xc
c0007d79:	c3                   	ret    

c0007d7a <Directory::~Directory()>:
c0007d7a:	83 ec 0c             	sub    esp,0xc
c0007d7d:	ba 18 34 02 c0       	mov    edx,0xc0023418
c0007d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d86:	89 10                	mov    DWORD PTR [eax],edx
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	50                   	push   eax
c0007d90:	e8 35 b3 00 00       	call   c00130ca <UnixFile::~UnixFile()>
c0007d95:	83 c4 10             	add    esp,0x10
c0007d98:	90                   	nop
c0007d99:	83 c4 0c             	add    esp,0xc
c0007d9c:	c3                   	ret    
c0007d9d:	90                   	nop

c0007d9e <Directory::~Directory()>:
c0007d9e:	83 ec 0c             	sub    esp,0xc
c0007da1:	83 ec 0c             	sub    esp,0xc
c0007da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da8:	e8 cd ff ff ff       	call   c0007d7a <Directory::~Directory()>
c0007dad:	83 c4 10             	add    esp,0x10
c0007db0:	83 ec 08             	sub    esp,0x8
c0007db3:	68 14 01 00 00       	push   0x114
c0007db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dbc:	e8 ef 55 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	83 c4 0c             	add    esp,0xc
c0007dc7:	c3                   	ret    

c0007dc8 <Filesystem::Filesystem()>:
c0007dc8:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0007dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd1:	89 10                	mov    DWORD PTR [eax],edx
c0007dd3:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007dd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007de4:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007de9:	90                   	nop
c0007dea:	c3                   	ret    
c0007deb:	90                   	nop

c0007dec <Filesystem::~Filesystem()>:
c0007dec:	ba 90 33 02 c0       	mov    edx,0xc0023390
c0007df1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007df5:	89 10                	mov    DWORD PTR [eax],edx
c0007df7:	90                   	nop
c0007df8:	c3                   	ret    
c0007df9:	90                   	nop

c0007dfa <Filesystem::~Filesystem()>:
c0007dfa:	83 ec 0c             	sub    esp,0xc
c0007dfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007e01:	e8 e6 ff ff ff       	call   c0007dec <Filesystem::~Filesystem()>
c0007e06:	83 c4 04             	add    esp,0x4
c0007e09:	83 ec 08             	sub    esp,0x8
c0007e0c:	6a 08                	push   0x8
c0007e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e12:	e8 99 55 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0007e17:	83 c4 10             	add    esp,0x10
c0007e1a:	83 c4 0c             	add    esp,0xc
c0007e1d:	c3                   	ret    

c0007e1e <Fs::getcwd(Process*, char*, int)>:
c0007e1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e22:	31 c0                	xor    eax,eax
c0007e24:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e27:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e2b:	7d 15                	jge    c0007e42 <Fs::getcwd(Process*, char*, int)+0x24>
c0007e2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e31:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e38:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e3b:	84 c9                	test   cl,cl
c0007e3d:	74 06                	je     c0007e45 <Fs::getcwd(Process*, char*, int)+0x27>
c0007e3f:	40                   	inc    eax
c0007e40:	eb e2                	jmp    c0007e24 <Fs::getcwd(Process*, char*, int)+0x6>
c0007e42:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e45:	31 c0                	xor    eax,eax
c0007e47:	c3                   	ret    

c0007e48 <Fs::initVFS()>:
c0007e48:	83 ec 18             	sub    esp,0x18
c0007e4b:	6a 08                	push   0x8
c0007e4d:	e8 45 7a 00 00       	call   c000f897 <malloc>
c0007e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e55:	e8 c2 46 01 00       	call   c001c51c <FAT::FAT()>
c0007e5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e61:	e8 31 7a 00 00       	call   c000f897 <malloc>
c0007e66:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e69:	e8 da 55 01 00       	call   c001d448 <ISO9660::ISO9660()>
c0007e6e:	83 c4 1c             	add    esp,0x1c
c0007e71:	c3                   	ret    

c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e72:	55                   	push   ebp
c0007e73:	57                   	push   edi
c0007e74:	56                   	push   esi
c0007e75:	53                   	push   ebx
c0007e76:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e7c:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e83:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e8a:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e92:	68 00 04 00 00       	push   0x400
c0007e97:	6a 00                	push   0x0
c0007e99:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e9d:	57                   	push   edi
c0007e9e:	e8 4d 86 ff ff       	call   c00004f0 <memset>
c0007ea3:	83 c4 10             	add    esp,0x10
c0007ea6:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007eaa:	75 0b                	jne    c0007eb7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007eac:	50                   	push   eax
c0007ead:	50                   	push   eax
c0007eae:	55                   	push   ebp
c0007eaf:	57                   	push   edi
c0007eb0:	e8 8b 87 ff ff       	call   c0000640 <strcpy>
c0007eb5:	eb 51                	jmp    c0007f08 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007eb7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007ebb:	83 f8 5c             	cmp    eax,0x5c
c0007ebe:	74 05                	je     c0007ec5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007ec0:	83 f8 2f             	cmp    eax,0x2f
c0007ec3:	75 1e                	jne    c0007ee3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007ec5:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007ecc:	8a 00                	mov    al,BYTE PTR [eax]
c0007ece:	3c 60                	cmp    al,0x60
c0007ed0:	7e 03                	jle    c0007ed5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007ed2:	83 e8 20             	sub    eax,0x20
c0007ed5:	88 04 24             	mov    BYTE PTR [esp],al
c0007ed8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007edf:	50                   	push   eax
c0007ee0:	50                   	push   eax
c0007ee1:	eb 1e                	jmp    c0007f01 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007ee3:	50                   	push   eax
c0007ee4:	50                   	push   eax
c0007ee5:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007eec:	57                   	push   edi
c0007eed:	e8 4e 87 ff ff       	call   c0000640 <strcpy>
c0007ef2:	58                   	pop    eax
c0007ef3:	5a                   	pop    edx
c0007ef4:	68 b1 4d 02 c0       	push   0xc0024db1
c0007ef9:	57                   	push   edi
c0007efa:	e8 41 89 ff ff       	call   c0000840 <strcat>
c0007eff:	59                   	pop    ecx
c0007f00:	58                   	pop    eax
c0007f01:	55                   	push   ebp
c0007f02:	57                   	push   edi
c0007f03:	e8 38 89 ff ff       	call   c0000840 <strcat>
c0007f08:	83 c4 10             	add    esp,0x10
c0007f0b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007f0e:	3c 60                	cmp    al,0x60
c0007f10:	7e 03                	jle    c0007f15 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007f12:	83 e8 20             	sub    eax,0x20
c0007f15:	88 04 24             	mov    BYTE PTR [esp],al
c0007f18:	88 06                	mov    BYTE PTR [esi],al
c0007f1a:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007f21:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007f27:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007f2b:	bf 03 00 00 00       	mov    edi,0x3
c0007f30:	b8 03 00 00 00       	mov    eax,0x3
c0007f35:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007f39:	89 e9                	mov    ecx,ebp
c0007f3b:	85 ed                	test   ebp,ebp
c0007f3d:	0f 84 97 00 00 00    	je     c0007fda <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007f43:	8d 57 01             	lea    edx,[edi+0x1]
c0007f46:	83 fd 5c             	cmp    ebp,0x5c
c0007f49:	74 05                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007f4b:	83 fd 2f             	cmp    ebp,0x2f
c0007f4e:	75 12                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f50:	89 c5                	mov    ebp,eax
c0007f52:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007f57:	74 09                	je     c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f59:	40                   	inc    eax
c0007f5a:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f5e:	89 d7                	mov    edi,edx
c0007f60:	eb d3                	jmp    c0007f35 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f62:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f67:	0f be e9             	movsx  ebp,cl
c0007f6a:	75 5e                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f6c:	83 fd 2e             	cmp    ebp,0x2e
c0007f6f:	75 59                	jne    c0007fca <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f71:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f75:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f7a:	74 18                	je     c0007f94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f7c:	83 fd 2e             	cmp    ebp,0x2e
c0007f7f:	74 53                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f81:	89 fa                	mov    edx,edi
c0007f83:	42                   	inc    edx
c0007f84:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f88:	83 f9 2f             	cmp    ecx,0x2f
c0007f8b:	74 f6                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f8d:	83 f9 5c             	cmp    ecx,0x5c
c0007f90:	74 f1                	je     c0007f83 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f92:	eb ca                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f94:	83 fd 2e             	cmp    ebp,0x2e
c0007f97:	74 3b                	je     c0007fd4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f99:	83 f8 03             	cmp    eax,0x3
c0007f9c:	74 c0                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f9e:	42                   	inc    edx
c0007f9f:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007fa3:	83 f9 5c             	cmp    ecx,0x5c
c0007fa6:	74 f6                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fa8:	83 f9 2f             	cmp    ecx,0x2f
c0007fab:	74 f1                	je     c0007f9e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007fad:	48                   	dec    eax
c0007fae:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fb2:	75 06                	jne    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fb4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007fba:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007fbe:	74 07                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007fc0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fc4:	48                   	dec    eax
c0007fc5:	eb f3                	jmp    c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007fc7:	40                   	inc    eax
c0007fc8:	eb 94                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fca:	83 fd 5c             	cmp    ebp,0x5c
c0007fcd:	74 8f                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fcf:	83 fd 2f             	cmp    ebp,0x2f
c0007fd2:	74 8a                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fd4:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007fd7:	40                   	inc    eax
c0007fd8:	eb 84                	jmp    c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007fda:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007fde:	83 ec 0c             	sub    esp,0xc
c0007fe1:	56                   	push   esi
c0007fe2:	e8 89 85 ff ff       	call   c0000570 <strlen>
c0007fe7:	83 c4 10             	add    esp,0x10
c0007fea:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007fef:	74 17                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007ff1:	83 ec 0c             	sub    esp,0xc
c0007ff4:	56                   	push   esi
c0007ff5:	e8 76 85 ff ff       	call   c0000570 <strlen>
c0007ffa:	83 c4 10             	add    esp,0x10
c0007ffd:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0008002:	74 04                	je     c0008008 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0008004:	31 ff                	xor    edi,edi
c0008006:	eb 5c                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008008:	83 ec 0c             	sub    esp,0xc
c000800b:	56                   	push   esi
c000800c:	e8 5f 85 ff ff       	call   c0000570 <strlen>
c0008011:	83 c4 10             	add    esp,0x10
c0008014:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0008019:	74 e9                	je     c0008004 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000801b:	83 ec 0c             	sub    esp,0xc
c000801e:	56                   	push   esi
c000801f:	e8 4c 85 ff ff       	call   c0000570 <strlen>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000802c:	eb b0                	jmp    c0007fde <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000802e:	52                   	push   edx
c000802f:	52                   	push   edx
c0008030:	56                   	push   esi
c0008031:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0008035:	55                   	push   ebp
c0008036:	e8 05 86 ff ff       	call   c0000640 <strcpy>
c000803b:	59                   	pop    ecx
c000803c:	58                   	pop    eax
c000803d:	56                   	push   esi
c000803e:	55                   	push   ebp
c000803f:	e8 b5 f8 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0008044:	83 c4 10             	add    esp,0x10
c0008047:	48                   	dec    eax
c0008048:	75 37                	jne    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000804a:	50                   	push   eax
c000804b:	56                   	push   esi
c000804c:	55                   	push   ebp
c000804d:	68 2e 33 02 c0       	push   0xc002332e
c0008052:	e8 25 ef ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	8d 47 01             	lea    eax,[edi+0x1]
c000805d:	83 ff 14             	cmp    edi,0x14
c0008060:	74 08                	je     c000806a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c0008062:	89 c7                	mov    edi,eax
c0008064:	85 db                	test   ebx,ebx
c0008066:	75 c6                	jne    c000802e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008068:	eb 17                	jmp    c0008081 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c000806a:	83 ec 0c             	sub    esp,0xc
c000806d:	bf 15 00 00 00       	mov    edi,0x15
c0008072:	68 49 33 02 c0       	push   0xc0023349
c0008077:	e8 78 7c 00 00       	call   c000fcf4 <KePanic(char const*)>
c000807c:	83 c4 10             	add    esp,0x10
c000807f:	eb e3                	jmp    c0008064 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008081:	81 c4 0c 04 00 00    	add    esp,0x40c
c0008087:	5b                   	pop    ebx
c0008088:	5e                   	pop    esi
c0008089:	5f                   	pop    edi
c000808a:	5d                   	pop    ebp
c000808b:	c3                   	ret    

c000808c <File::File(char const*, Process*, bool)>:
c000808c:	83 ec 1c             	sub    esp,0x1c
c000808f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008093:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008097:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809b:	83 ec 08             	sub    esp,0x8
c000809e:	6a 00                	push   0x0
c00080a0:	50                   	push   eax
c00080a1:	e8 3e ae 00 00       	call   c0012ee4 <UnixFile::UnixFile(int)>
c00080a6:	83 c4 10             	add    esp,0x10
c00080a9:	ba fc 33 02 c0       	mov    edx,0xc00233fc
c00080ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b2:	89 10                	mov    DWORD PTR [eax],edx
c00080b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b9:	85 c0                	test   eax,eax
c00080bb:	74 0f                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080bd:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00080c2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c6:	74 04                	je     c00080cc <File::File(char const*, Process*, bool)+0x40>
c00080c8:	b0 01                	mov    al,0x1
c00080ca:	eb 02                	jmp    c00080ce <File::File(char const*, Process*, bool)+0x42>
c00080cc:	b0 00                	mov    al,0x0
c00080ce:	0f b6 c0             	movzx  eax,al
c00080d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d5:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080df:	83 c2 0d             	add    edx,0xd
c00080e2:	50                   	push   eax
c00080e3:	51                   	push   ecx
c00080e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e8:	52                   	push   edx
c00080e9:	e8 84 fd ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ee:	83 c4 10             	add    esp,0x10
c00080f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fc:	83 c2 0d             	add    edx,0xd
c00080ff:	83 ec 04             	sub    esp,0x4
c0008102:	50                   	push   eax
c0008103:	52                   	push   edx
c0008104:	68 6f 33 02 c0       	push   0xc002336f
c0008109:	e8 6e ee ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000810e:	83 c4 10             	add    esp,0x10
c0008111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008115:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008118:	83 e8 41             	sub    eax,0x41
c000811b:	88 c2                	mov    dl,al
c000811d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008121:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008127:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000812b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008133:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008139:	0f b6 c0             	movzx  eax,al
c000813c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008143:	85 c0                	test   eax,eax
c0008145:	74 3e                	je     c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000814b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008151:	0f b6 c0             	movzx  eax,al
c0008154:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c000815b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008161:	85 c0                	test   eax,eax
c0008163:	75 20                	jne    c0008185 <File::File(char const*, Process*, bool)+0xf9>
c0008165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008169:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816f:	0f b6 c0             	movzx  eax,al
c0008172:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	50                   	push   eax
c000817d:	e8 64 28 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008182:	83 c4 10             	add    esp,0x10
c0008185:	90                   	nop
c0008186:	83 c4 1c             	add    esp,0x1c
c0008189:	c3                   	ret    

c000818a <File::File(char const*, Process*)>:
c000818a:	83 ec 0c             	sub    esp,0xc
c000818d:	6a 01                	push   0x1
c000818f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000819b:	e8 ec fe ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	90                   	nop
c00081a4:	83 c4 0c             	add    esp,0xc
c00081a7:	c3                   	ret    

c00081a8 <File::open(FileOpenMode)>:
c00081a8:	53                   	push   ebx
c00081a9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081bc:	83 fa 19             	cmp    edx,0x19
c00081bf:	77 40                	ja     c0008201 <File::open(FileOpenMode)+0x59>
c00081c1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00081c8:	85 d2                	test   edx,edx
c00081ca:	74 35                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081cc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d2:	85 d2                	test   edx,edx
c00081d4:	74 2b                	je     c0008201 <File::open(FileOpenMode)+0x59>
c00081d6:	b8 06 00 00 00       	mov    eax,0x6
c00081db:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081df:	75 20                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081ed:	51                   	push   ecx
c00081ee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081f1:	51                   	push   ecx
c00081f2:	52                   	push   edx
c00081f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f6:	83 c4 10             	add    esp,0x10
c00081f9:	85 c0                	test   eax,eax
c00081fb:	75 04                	jne    c0008201 <File::open(FileOpenMode)+0x59>
c00081fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008201:	83 c4 08             	add    esp,0x8
c0008204:	5b                   	pop    ebx
c0008205:	c3                   	ret    

c0008206 <File::close()>:
c0008206:	53                   	push   ebx
c0008207:	b8 0b 00 00 00       	mov    eax,0xb
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008213:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000821a:	83 f9 19             	cmp    ecx,0x19
c000821d:	77 41                	ja     c0008260 <File::close()+0x5a>
c000821f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008226:	85 db                	test   ebx,ebx
c0008228:	74 36                	je     c0008260 <File::close()+0x5a>
c000822a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008231:	74 2d                	je     c0008260 <File::close()+0x5a>
c0008233:	b8 05 00 00 00       	mov    eax,0x5
c0008238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000823c:	74 22                	je     c0008260 <File::close()+0x5a>
c000823e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008242:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008249:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824f:	53                   	push   ebx
c0008250:	53                   	push   ebx
c0008251:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008253:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008259:	50                   	push   eax
c000825a:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825d:	83 c4 10             	add    esp,0x10
c0008260:	83 c4 08             	add    esp,0x8
c0008263:	5b                   	pop    ebx
c0008264:	c3                   	ret    
c0008265:	90                   	nop

c0008266 <File::seek(unsigned long long)>:
c0008266:	56                   	push   esi
c0008267:	53                   	push   ebx
c0008268:	b8 0b 00 00 00       	mov    eax,0xb
c000826d:	51                   	push   ecx
c000826e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008272:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008276:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008281:	83 fa 19             	cmp    edx,0x19
c0008284:	77 31                	ja     c00082b7 <File::seek(unsigned long long)+0x51>
c0008286:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828d:	85 d2                	test   edx,edx
c000828f:	74 26                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c0008291:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008297:	85 d2                	test   edx,edx
c0008299:	74 1c                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c000829b:	b8 05 00 00 00       	mov    eax,0x5
c00082a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a4:	74 11                	je     c00082b7 <File::seek(unsigned long long)+0x51>
c00082a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a8:	53                   	push   ebx
c00082a9:	51                   	push   ecx
c00082aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082b0:	52                   	push   edx
c00082b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	5a                   	pop    edx
c00082b8:	5b                   	pop    ebx
c00082b9:	5e                   	pop    esi
c00082ba:	c3                   	ret    
c00082bb:	90                   	nop

c00082bc <File::truncate(unsigned long long)>:
c00082bc:	56                   	push   esi
c00082bd:	53                   	push   ebx
c00082be:	b8 0b 00 00 00       	mov    eax,0xb
c00082c3:	51                   	push   ecx
c00082c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082d7:	83 fa 19             	cmp    edx,0x19
c00082da:	77 31                	ja     c000830d <File::truncate(unsigned long long)+0x51>
c00082dc:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 26                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082ed:	85 d2                	test   edx,edx
c00082ef:	74 1c                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082f1:	b8 05 00 00 00       	mov    eax,0x5
c00082f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082fa:	74 11                	je     c000830d <File::truncate(unsigned long long)+0x51>
c00082fc:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fe:	53                   	push   ebx
c00082ff:	51                   	push   ecx
c0008300:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008306:	52                   	push   edx
c0008307:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000830a:	83 c4 10             	add    esp,0x10
c000830d:	5a                   	pop    edx
c000830e:	5b                   	pop    ebx
c000830f:	5e                   	pop    esi
c0008310:	c3                   	ret    
c0008311:	90                   	nop

c0008312 <File::tell(unsigned long long*)>:
c0008312:	83 ec 0c             	sub    esp,0xc
c0008315:	b8 0b 00 00 00       	mov    eax,0xb
c000831a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008325:	83 fa 19             	cmp    edx,0x19
c0008328:	77 34                	ja     c000835e <File::tell(unsigned long long*)+0x4c>
c000832a:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008331:	85 d2                	test   edx,edx
c0008333:	74 29                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c0008335:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000833b:	85 d2                	test   edx,edx
c000833d:	74 1f                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000833f:	b8 05 00 00 00       	mov    eax,0x5
c0008344:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008348:	74 14                	je     c000835e <File::tell(unsigned long long*)+0x4c>
c000834a:	50                   	push   eax
c000834b:	8b 02                	mov    eax,DWORD PTR [edx]
c000834d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008351:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008357:	52                   	push   edx
c0008358:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000835b:	83 c4 10             	add    esp,0x10
c000835e:	83 c4 0c             	add    esp,0xc
c0008361:	c3                   	ret    

c0008362 <File::rewind()>:
c0008362:	83 ec 10             	sub    esp,0x10
c0008365:	6a 00                	push   0x0
c0008367:	6a 00                	push   0x0
c0008369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836d:	e8 f4 fe ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0008372:	83 c4 1c             	add    esp,0x1c
c0008375:	c3                   	ret    

c0008376 <File::unlink()>:
c0008376:	83 ec 0c             	sub    esp,0xc
c0008379:	b8 0b 00 00 00       	mov    eax,0xb
c000837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008382:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008389:	83 f9 19             	cmp    ecx,0x19
c000838c:	77 2f                	ja     c00083bd <File::unlink()+0x47>
c000838e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008395:	85 c9                	test   ecx,ecx
c0008397:	74 24                	je     c00083bd <File::unlink()+0x47>
c0008399:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839f:	85 c9                	test   ecx,ecx
c00083a1:	74 1a                	je     c00083bd <File::unlink()+0x47>
c00083a3:	b8 06 00 00 00       	mov    eax,0x6
c00083a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083ac:	75 0f                	jne    c00083bd <File::unlink()+0x47>
c00083ae:	83 c2 0d             	add    edx,0xd
c00083b1:	50                   	push   eax
c00083b2:	50                   	push   eax
c00083b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b5:	52                   	push   edx
c00083b6:	51                   	push   ecx
c00083b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083ba:	83 c4 10             	add    esp,0x10
c00083bd:	83 c4 0c             	add    esp,0xc
c00083c0:	c3                   	ret    
c00083c1:	90                   	nop

c00083c2 <File::rename(char const*)>:
c00083c2:	83 ec 0c             	sub    esp,0xc
c00083c5:	b8 0b 00 00 00       	mov    eax,0xb
c00083ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d5:	83 f9 19             	cmp    ecx,0x19
c00083d8:	77 32                	ja     c000840c <File::rename(char const*)+0x4a>
c00083da:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083e1:	85 c9                	test   ecx,ecx
c00083e3:	74 27                	je     c000840c <File::rename(char const*)+0x4a>
c00083e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083eb:	85 c9                	test   ecx,ecx
c00083ed:	74 1d                	je     c000840c <File::rename(char const*)+0x4a>
c00083ef:	b8 06 00 00 00       	mov    eax,0x6
c00083f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f8:	75 12                	jne    c000840c <File::rename(char const*)+0x4a>
c00083fa:	83 c2 0d             	add    edx,0xd
c00083fd:	50                   	push   eax
c00083fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	52                   	push   edx
c0008405:	51                   	push   ecx
c0008406:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	83 c4 0c             	add    esp,0xc
c000840f:	c3                   	ret    

c0008410 <File::chfatattr(unsigned char, unsigned char)>:
c0008410:	57                   	push   edi
c0008411:	b8 0b 00 00 00       	mov    eax,0xb
c0008416:	56                   	push   esi
c0008417:	53                   	push   ebx
c0008418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008420:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008427:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000842b:	83 f9 19             	cmp    ecx,0x19
c000842e:	77 37                	ja     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008430:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008437:	85 c9                	test   ecx,ecx
c0008439:	74 2c                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000843b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008441:	85 c9                	test   ecx,ecx
c0008443:	74 22                	je     c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008445:	b8 06 00 00 00       	mov    eax,0x6
c000844a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000844e:	75 17                	jne    c0008467 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	89 f0                	mov    eax,esi
c0008454:	83 c2 0d             	add    edx,0xd
c0008457:	0f b6 f0             	movzx  esi,al
c000845a:	0f b6 db             	movzx  ebx,bl
c000845d:	56                   	push   esi
c000845e:	53                   	push   ebx
c000845f:	52                   	push   edx
c0008460:	51                   	push   ecx
c0008461:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008464:	83 c4 10             	add    esp,0x10
c0008467:	5b                   	pop    ebx
c0008468:	5e                   	pop    esi
c0008469:	5f                   	pop    edi
c000846a:	c3                   	ret    
c000846b:	90                   	nop

c000846c <File::exists()>:
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	31 c0                	xor    eax,eax
c0008471:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008475:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847c:	83 f9 19             	cmp    ecx,0x19
c000847f:	77 24                	ja     c00084a5 <File::exists()+0x39>
c0008481:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008488:	85 c9                	test   ecx,ecx
c000848a:	74 19                	je     c00084a5 <File::exists()+0x39>
c000848c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008492:	85 c9                	test   ecx,ecx
c0008494:	74 0f                	je     c00084a5 <File::exists()+0x39>
c0008496:	83 c2 0d             	add    edx,0xd
c0008499:	50                   	push   eax
c000849a:	50                   	push   eax
c000849b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849d:	52                   	push   edx
c000849e:	51                   	push   ecx
c000849f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a2:	83 c4 10             	add    esp,0x10
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <File::stat(unsigned long long*, bool*)>:
c00084aa:	56                   	push   esi
c00084ab:	53                   	push   ebx
c00084ac:	50                   	push   eax
c00084ad:	b8 0b 00 00 00       	mov    eax,0xb
c00084b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084c5:	83 f9 19             	cmp    ecx,0x19
c00084c8:	77 3d                	ja     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084ca:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00084d1:	85 c9                	test   ecx,ecx
c00084d3:	74 32                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084db:	85 c9                	test   ecx,ecx
c00084dd:	74 28                	je     c0008507 <File::stat(unsigned long long*, bool*)+0x5d>
c00084df:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e5:	74 13                	je     c00084fa <File::stat(unsigned long long*, bool*)+0x50>
c00084e7:	83 ec 04             	sub    esp,0x4
c00084ea:	56                   	push   esi
c00084eb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084f1:	51                   	push   ecx
c00084f2:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f8:	eb 0a                	jmp    c0008504 <File::stat(unsigned long long*, bool*)+0x5a>
c00084fa:	53                   	push   ebx
c00084fb:	83 c2 0d             	add    edx,0xd
c00084fe:	56                   	push   esi
c00084ff:	52                   	push   edx
c0008500:	51                   	push   ecx
c0008501:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008504:	83 c4 10             	add    esp,0x10
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	c3                   	ret    

c000850b <Fs::setcwd(Process*, char*)>:
c000850b:	55                   	push   ebp
c000850c:	57                   	push   edi
c000850d:	56                   	push   esi
c000850e:	53                   	push   ebx
c000850f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008515:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851c:	6a 00                	push   0x0
c000851e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008524:	57                   	push   edi
c0008525:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0008530:	56                   	push   esi
c0008531:	e8 3c f9 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008536:	89 34 24             	mov    DWORD PTR [esp],esi
c0008539:	e8 32 80 ff ff       	call   c0000570 <strlen>
c000853e:	83 c4 10             	add    esp,0x10
c0008541:	83 f8 02             	cmp    eax,0x2
c0008544:	77 15                	ja     c000855b <Fs::setcwd(Process*, char*)+0x50>
c0008546:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000854b:	83 eb 41             	sub    ebx,0x41
c000854e:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c0008555:	85 c0                	test   eax,eax
c0008557:	75 1c                	jne    c0008575 <Fs::setcwd(Process*, char*)+0x6a>
c0008559:	eb 2f                	jmp    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	56                   	push   esi
c000855f:	e8 0c 80 ff ff       	call   c0000570 <strlen>
c0008564:	83 c4 10             	add    esp,0x10
c0008567:	83 f8 03             	cmp    eax,0x3
c000856a:	75 57                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c000856c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008571:	75 50                	jne    c00085c3 <Fs::setcwd(Process*, char*)+0xb8>
c0008573:	eb d1                	jmp    c0008546 <Fs::setcwd(Process*, char*)+0x3b>
c0008575:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857c:	75 0c                	jne    c000858a <Fs::setcwd(Process*, char*)+0x7f>
c000857e:	83 ec 0c             	sub    esp,0xc
c0008581:	50                   	push   eax
c0008582:	e8 5f 24 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c0008587:	83 c4 10             	add    esp,0x10
c000858a:	b8 03 00 00 00       	mov    eax,0x3
c000858f:	83 fb 19             	cmp    ebx,0x19
c0008592:	0f 87 c6 00 00 00    	ja     c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008598:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c000859f:	b8 05 00 00 00       	mov    eax,0x5
c00085a4:	85 d2                	test   edx,edx
c00085a6:	0f 84 b2 00 00 00    	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085ac:	b8 06 00 00 00       	mov    eax,0x6
c00085b1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b8:	0f 85 92 00 00 00    	jne    c0008650 <Fs::setcwd(Process*, char*)+0x145>
c00085be:	e9 9b 00 00 00       	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c00085c3:	83 ec 0c             	sub    esp,0xc
c00085c6:	68 14 01 00 00       	push   0x114
c00085cb:	e8 c7 72 00 00       	call   c000f897 <malloc>
c00085d0:	83 c4 0c             	add    esp,0xc
c00085d3:	89 c3                	mov    ebx,eax
c00085d5:	55                   	push   ebp
c00085d6:	56                   	push   esi
c00085d7:	50                   	push   eax
c00085d8:	e8 ad fb ff ff       	call   c000818a <File::File(char const*, Process*)>
c00085dd:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e2:	83 c4 0c             	add    esp,0xc
c00085e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e9:	50                   	push   eax
c00085ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ee:	50                   	push   eax
c00085ef:	53                   	push   ebx
c00085f0:	e8 b5 fe ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	83 f8 02             	cmp    eax,0x2
c00085fb:	74 27                	je     c0008624 <Fs::setcwd(Process*, char*)+0x119>
c00085fd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008602:	75 1c                	jne    c0008620 <Fs::setcwd(Process*, char*)+0x115>
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	85 db                	test   ebx,ebx
c000860b:	74 51                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008612:	53                   	push   ebx
c0008613:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008616:	83 c4 10             	add    esp,0x10
c0008619:	b8 02 00 00 00       	mov    eax,0x2
c000861e:	eb 3e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008620:	85 c0                	test   eax,eax
c0008622:	74 1c                	je     c0008640 <Fs::setcwd(Process*, char*)+0x135>
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	85 db                	test   ebx,ebx
c000862b:	74 31                	je     c000865e <Fs::setcwd(Process*, char*)+0x153>
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008632:	53                   	push   ebx
c0008633:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008636:	83 c4 10             	add    esp,0x10
c0008639:	b8 01 00 00 00       	mov    eax,0x1
c000863e:	eb 1e                	jmp    c000865e <Fs::setcwd(Process*, char*)+0x153>
c0008640:	85 db                	test   ebx,ebx
c0008642:	74 0c                	je     c0008650 <Fs::setcwd(Process*, char*)+0x145>
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008649:	53                   	push   ebx
c000864a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864d:	83 c4 10             	add    esp,0x10
c0008650:	50                   	push   eax
c0008651:	50                   	push   eax
c0008652:	56                   	push   esi
c0008653:	57                   	push   edi
c0008654:	e8 e7 7f ff ff       	call   c0000640 <strcpy>
c0008659:	83 c4 10             	add    esp,0x10
c000865c:	31 c0                	xor    eax,eax
c000865e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008664:	5b                   	pop    ebx
c0008665:	5e                   	pop    esi
c0008666:	5f                   	pop    edi
c0008667:	5d                   	pop    ebp
c0008668:	c3                   	ret    
c0008669:	90                   	nop

c000866a <Directory::Directory(char const*, Process*)>:
c000866a:	83 ec 0c             	sub    esp,0xc
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	83 ec 08             	sub    esp,0x8
c0008674:	6a 00                	push   0x0
c0008676:	50                   	push   eax
c0008677:	e8 68 a8 00 00       	call   c0012ee4 <UnixFile::UnixFile(int)>
c000867c:	83 c4 10             	add    esp,0x10
c000867f:	ba 18 34 02 c0       	mov    edx,0xc0023418
c0008684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008688:	89 10                	mov    DWORD PTR [eax],edx
c000868a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000868f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008693:	0f 95 c0             	setne  al
c0008696:	0f b6 c0             	movzx  eax,al
c0008699:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a7:	83 c2 0d             	add    edx,0xd
c00086aa:	50                   	push   eax
c00086ab:	51                   	push   ecx
c00086ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086b0:	52                   	push   edx
c00086b1:	e8 bc f7 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b6:	83 c4 10             	add    esp,0x10
c00086b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086c0:	83 e8 41             	sub    eax,0x41
c00086c3:	88 c2                	mov    dl,al
c00086c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086e1:	0f b6 c0             	movzx  eax,al
c00086e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 3e                	je     c000872d <Directory::Directory(char const*, Process*)+0xc3>
c00086ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f9:	0f b6 c0             	movzx  eax,al
c00086fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008703:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008709:	85 c0                	test   eax,eax
c000870b:	75 20                	jne    c000872d <Directory::Directory(char const*, Process*)+0xc3>
c000870d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008711:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008717:	0f b6 c0             	movzx  eax,al
c000871a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008721:	83 ec 0c             	sub    esp,0xc
c0008724:	50                   	push   eax
c0008725:	e8 bc 22 00 00       	call   c000a9e6 <LogicalDisk::mount()>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	90                   	nop
c000872e:	83 c4 0c             	add    esp,0xc
c0008731:	c3                   	ret    

c0008732 <Directory::open()>:
c0008732:	53                   	push   ebx
c0008733:	b8 0b 00 00 00       	mov    eax,0xb
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008746:	83 fa 19             	cmp    edx,0x19
c0008749:	77 3d                	ja     c0008788 <Directory::open()+0x56>
c000874b:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008752:	85 d2                	test   edx,edx
c0008754:	74 32                	je     c0008788 <Directory::open()+0x56>
c0008756:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875c:	85 d2                	test   edx,edx
c000875e:	74 28                	je     c0008788 <Directory::open()+0x56>
c0008760:	b8 06 00 00 00       	mov    eax,0x6
c0008765:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008769:	75 1d                	jne    c0008788 <Directory::open()+0x56>
c000876b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008771:	50                   	push   eax
c0008772:	8b 02                	mov    eax,DWORD PTR [edx]
c0008774:	51                   	push   ecx
c0008775:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008778:	51                   	push   ecx
c0008779:	52                   	push   edx
c000877a:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	75 04                	jne    c0008788 <Directory::open()+0x56>
c0008784:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008788:	83 c4 08             	add    esp,0x8
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <Directory::close()>:
c000878e:	53                   	push   ebx
c000878f:	b8 0b 00 00 00       	mov    eax,0xb
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000879b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a2:	83 f9 19             	cmp    ecx,0x19
c00087a5:	77 41                	ja     c00087e8 <Directory::close()+0x5a>
c00087a7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00087ae:	85 db                	test   ebx,ebx
c00087b0:	74 36                	je     c00087e8 <Directory::close()+0x5a>
c00087b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b9:	74 2d                	je     c00087e8 <Directory::close()+0x5a>
c00087bb:	b8 05 00 00 00       	mov    eax,0x5
c00087c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087c4:	74 22                	je     c00087e8 <Directory::close()+0x5a>
c00087c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087ca:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00087d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d7:	53                   	push   ebx
c00087d8:	53                   	push   ebx
c00087d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087e1:	50                   	push   eax
c00087e2:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e5:	83 c4 10             	add    esp,0x10
c00087e8:	83 c4 08             	add    esp,0x8
c00087eb:	5b                   	pop    ebx
c00087ec:	c3                   	ret    
c00087ed:	90                   	nop

c00087ee <Directory::unlink()>:
c00087ee:	83 ec 0c             	sub    esp,0xc
c00087f1:	b8 0b 00 00 00       	mov    eax,0xb
c00087f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008801:	83 f9 19             	cmp    ecx,0x19
c0008804:	77 2f                	ja     c0008835 <Directory::unlink()+0x47>
c0008806:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000880d:	85 c9                	test   ecx,ecx
c000880f:	74 24                	je     c0008835 <Directory::unlink()+0x47>
c0008811:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008817:	85 c9                	test   ecx,ecx
c0008819:	74 1a                	je     c0008835 <Directory::unlink()+0x47>
c000881b:	b8 06 00 00 00       	mov    eax,0x6
c0008820:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008824:	75 0f                	jne    c0008835 <Directory::unlink()+0x47>
c0008826:	83 c2 0d             	add    edx,0xd
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882d:	52                   	push   edx
c000882e:	51                   	push   ecx
c000882f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	83 c4 0c             	add    esp,0xc
c0008838:	c3                   	ret    
c0008839:	90                   	nop

c000883a <Directory::rename(char const*)>:
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	b8 0b 00 00 00       	mov    eax,0xb
c0008842:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008846:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884d:	83 f9 19             	cmp    ecx,0x19
c0008850:	77 32                	ja     c0008884 <Directory::rename(char const*)+0x4a>
c0008852:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008859:	85 c9                	test   ecx,ecx
c000885b:	74 27                	je     c0008884 <Directory::rename(char const*)+0x4a>
c000885d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008863:	85 c9                	test   ecx,ecx
c0008865:	74 1d                	je     c0008884 <Directory::rename(char const*)+0x4a>
c0008867:	b8 06 00 00 00       	mov    eax,0x6
c000886c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008870:	75 12                	jne    c0008884 <Directory::rename(char const*)+0x4a>
c0008872:	83 c2 0d             	add    edx,0xd
c0008875:	50                   	push   eax
c0008876:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008878:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887c:	52                   	push   edx
c000887d:	51                   	push   ecx
c000887e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008881:	83 c4 10             	add    esp,0x10
c0008884:	83 c4 0c             	add    esp,0xc
c0008887:	c3                   	ret    

c0008888 <Directory::exists()>:
c0008888:	83 ec 0c             	sub    esp,0xc
c000888b:	31 c0                	xor    eax,eax
c000888d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008891:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008898:	83 f9 19             	cmp    ecx,0x19
c000889b:	77 24                	ja     c00088c1 <Directory::exists()+0x39>
c000889d:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088a4:	85 c9                	test   ecx,ecx
c00088a6:	74 19                	je     c00088c1 <Directory::exists()+0x39>
c00088a8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ae:	85 c9                	test   ecx,ecx
c00088b0:	74 0f                	je     c00088c1 <Directory::exists()+0x39>
c00088b2:	83 c2 0d             	add    edx,0xd
c00088b5:	50                   	push   eax
c00088b6:	50                   	push   eax
c00088b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b9:	52                   	push   edx
c00088ba:	51                   	push   ecx
c00088bb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088be:	83 c4 10             	add    esp,0x10
c00088c1:	83 c4 0c             	add    esp,0xc
c00088c4:	c3                   	ret    
c00088c5:	90                   	nop

c00088c6 <Directory::read(dirent*)>:
c00088c6:	83 ec 1c             	sub    esp,0x1c
c00088c9:	b8 0b 00 00 00       	mov    eax,0xb
c00088ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d9:	83 f9 19             	cmp    ecx,0x19
c00088dc:	77 30                	ja     c000890e <Directory::read(dirent*)+0x48>
c00088de:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088e5:	85 c9                	test   ecx,ecx
c00088e7:	74 25                	je     c000890e <Directory::read(dirent*)+0x48>
c00088e9:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088f0:	74 1c                	je     c000890e <Directory::read(dirent*)+0x48>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088fb:	51                   	push   ecx
c00088fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008900:	6a 00                	push   0x0
c0008902:	68 10 01 00 00       	push   0x110
c0008907:	52                   	push   edx
c0008908:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000890b:	83 c4 20             	add    esp,0x20
c000890e:	83 c4 1c             	add    esp,0x1c
c0008911:	c3                   	ret    

c0008912 <Directory::create()>:
c0008912:	83 ec 0c             	sub    esp,0xc
c0008915:	b8 0b 00 00 00       	mov    eax,0xb
c000891a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008925:	83 f9 19             	cmp    ecx,0x19
c0008928:	77 2f                	ja     c0008959 <Directory::create()+0x47>
c000892a:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008931:	85 c9                	test   ecx,ecx
c0008933:	74 24                	je     c0008959 <Directory::create()+0x47>
c0008935:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000893b:	85 c9                	test   ecx,ecx
c000893d:	74 1a                	je     c0008959 <Directory::create()+0x47>
c000893f:	b8 06 00 00 00       	mov    eax,0x6
c0008944:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008948:	75 0f                	jne    c0008959 <Directory::create()+0x47>
c000894a:	83 c2 0d             	add    edx,0xd
c000894d:	50                   	push   eax
c000894e:	50                   	push   eax
c000894f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008951:	52                   	push   edx
c0008952:	51                   	push   ecx
c0008953:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008956:	83 c4 10             	add    esp,0x10
c0008959:	83 c4 0c             	add    esp,0xc
c000895c:	c3                   	ret    
c000895d:	90                   	nop

c000895e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895e:	b8 0a 00 00 00       	mov    eax,0xa
c0008963:	c3                   	ret    

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 3e 12 00 00       	call   c0009bb6 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba 34 34 02 c0       	mov    edx,0xc0023434
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba 34 34 02 c0       	mov    edx,0xc0023434
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 9f 0f 00 00       	call   c0009956 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 cd 49 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00089f8:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 05 e6 00 00       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 82 1c 01 00       	call   c001a69d <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 b5 e4 00 00       	jmp    c0016ee0 <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 5c 1c 01 00       	call   c001a69d <HalMakeBeep(int)>
c0008a41:	83 c4 10             	add    esp,0x10
c0008a44:	89 f0                	mov    eax,esi
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 bd e5 00 00       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 34 1c 01 00       	jmp    c001a69d <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0008a7a:	e8 e1 e0 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 f1 6d 00 00       	call   c000f897 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 60 34 02 c0       	push   0xc0023460
c0008ab9:	53                   	push   ebx
c0008aba:	e8 cb f6 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 7f 34 02 c0       	push   0xc002347f
c0008ad3:	e8 1c 72 00 00       	call   c000fcf4 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 c0 f6 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 ac f9 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 95 34 02 c0       	push   0xc0023495
c0008b10:	e8 67 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 6d 6d 00 00       	call   c000f897 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 a5 34 02 c0       	push   0xc00234a5
c0008b77:	e8 00 e4 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7c f6 ff ff       	call   c0008206 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 ce 6c 00 00       	call   c000f897 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 ae 34 02 c0       	push   0xc00234ae
c0008bea:	50                   	push   eax
c0008beb:	e8 50 7a ff ff       	call   c0000640 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 2a 79 ff ff       	call   c0000570 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 ae 34 02 c0       	push   0xc00234ae
c0008c6c:	50                   	push   eax
c0008c6d:	e8 ce 7b ff ff       	call   c0000840 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 d7 78 ff ff       	call   c0000570 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 ae 34 02 c0       	push   0xc00234ae
c0008cbb:	50                   	push   eax
c0008cbc:	e8 7f 7b ff ff       	call   c0000840 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 b0 34 02 c0       	push   0xc00234b0
c0008cf7:	e8 80 e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 c5 34 02 c0       	push   0xc00234c5
c0008d0d:	e8 6a e2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 3c 78 ff ff       	call   c0000570 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 e5 7a ff ff       	call   c0000840 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 fa 77 ff ff       	call   c0000570 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 c9 34 02 c0       	push   0xc00234c9
c0008d9c:	50                   	push   eax
c0008d9d:	e8 9e 7a ff ff       	call   c0000840 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 ce 34 02 c0       	push   0xc00234ce
c0008de3:	e8 94 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 dc 34 02 c0       	push   0xc00234dc
c0008e01:	e8 76 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 e5 34 02 c0       	push   0xc00234e5
c0008e26:	e8 51 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 03 35 02 c0       	push   0xc0023503
c0008e4a:	e8 2d e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 14 35 02 c0       	push   0xc0023514
c0008e63:	e8 14 e1 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 27 35 02 c0       	push   0xc0023527
c0008e9b:	e8 dc e0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	01 c0                	add    eax,eax
c0008f57:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f98:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f9f:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 34 35 02 c0       	push   0xc0023534
c0008fba:	e8 45 44 00 00       	call   c000d404 <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 59 35 02 c0       	push   0xc0023559
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 2f 50 00 00       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 ef 48 00 00       	call   c000d8d6 <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 2d 45 00 00       	call   c000d522 <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 34 35 02 c0       	push   0xc0023534
c0009054:	e8 ab 43 00 00       	call   c000d404 <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 59 35 02 c0       	push   0xc0023559
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 95 4f 00 00       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 e4 44 00 00       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 84 44 00 00       	call   c000d522 <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 ec 0a 00 00       	call   c0009bb6 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba b8 35 02 c0       	mov    edx,0xc00235b8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 4f 08 00 00       	call   c0009956 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 7d 42 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009167:	01 c2                	add    edx,eax
c0009169:	89 d0                	mov    eax,edx
c000916b:	01 c0                	add    eax,eax
c000916d:	01 d0                	add    eax,edx
c000916f:	01 c0                	add    eax,eax
c0009171:	01 d0                	add    eax,edx
c0009173:	c1 e0 05             	shl    eax,0x5
c0009176:	01 d0                	add    eax,edx
c0009178:	c1 e0 04             	shl    eax,0x4
c000917b:	89 c2                	mov    edx,eax
c000917d:	c1 fa 1f             	sar    edx,0x1f
c0009180:	01 c1                	add    ecx,eax
c0009182:	11 d3                	adc    ebx,edx
c0009184:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009189:	0f b6 c0             	movzx  eax,al
c000918c:	85 c0                	test   eax,eax
c000918e:	74 0c                	je     c000919c <Clock::timeInSecondsLocal()+0x62>
c0009190:	b8 08 07 00 00       	mov    eax,0x708
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	eb 0a                	jmp    c00091a6 <Clock::timeInSecondsLocal()+0x6c>
c000919c:	b8 00 00 00 00       	mov    eax,0x0
c00091a1:	ba 00 00 00 00       	mov    edx,0x0
c00091a6:	01 c8                	add    eax,ecx
c00091a8:	11 da                	adc    edx,ebx
c00091aa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091ad:	c9                   	leave  
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091b0:	55                   	push   ebp
c00091b1:	89 e5                	mov    ebp,esp
c00091b3:	56                   	push   esi
c00091b4:	53                   	push   ebx
c00091b5:	83 ec 10             	sub    esp,0x10
c00091b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00091c9:	83 c0 2c             	add    eax,0x2c
c00091cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00091ce:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c00091d3:	0f b6 d0             	movzx  edx,al
c00091d6:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00091db:	01 c2                	add    edx,eax
c00091dd:	89 d0                	mov    eax,edx
c00091df:	01 c0                	add    eax,eax
c00091e1:	01 d0                	add    eax,edx
c00091e3:	01 c0                	add    eax,eax
c00091e5:	01 d0                	add    eax,edx
c00091e7:	c1 e0 05             	shl    eax,0x5
c00091ea:	01 d0                	add    eax,edx
c00091ec:	c1 e0 04             	shl    eax,0x4
c00091ef:	89 c2                	mov    edx,eax
c00091f1:	c1 fa 1f             	sar    edx,0x1f
c00091f4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091f7:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091fa:	29 c1                	sub    ecx,eax
c00091fc:	19 d3                	sbb    ebx,edx
c00091fe:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009203:	0f b6 c0             	movzx  eax,al
c0009206:	85 c0                	test   eax,eax
c0009208:	74 0c                	je     c0009216 <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c000920a:	b8 08 07 00 00       	mov    eax,0x708
c000920f:	ba 00 00 00 00       	mov    edx,0x0
c0009214:	eb 0a                	jmp    c0009220 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c0009216:	b8 00 00 00 00       	mov    eax,0x0
c000921b:	ba 00 00 00 00       	mov    edx,0x0
c0009220:	29 c1                	sub    ecx,eax
c0009222:	19 d3                	sbb    ebx,edx
c0009224:	89 c8                	mov    eax,ecx
c0009226:	89 da                	mov    edx,ebx
c0009228:	83 ec 04             	sub    esp,0x4
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009230:	ff d6                	call   esi
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009238:	5b                   	pop    ebx
c0009239:	5e                   	pop    esi
c000923a:	5d                   	pop    ebp
c000923b:	c3                   	ret    

c000923c <KeDatetimeToSeconds(datetime_t)>:
c000923c:	55                   	push   ebp
c000923d:	89 e5                	mov    ebp,esp
c000923f:	53                   	push   ebx
c0009240:	83 ec 24             	sub    esp,0x24
c0009243:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009247:	2d 6c 07 00 00       	sub    eax,0x76c
c000924c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009250:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009253:	83 e8 01             	sub    eax,0x1
c0009256:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009260:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0009267:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000926e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0009275:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009278:	0f b6 c8             	movzx  ecx,al
c000927b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000927e:	0f b6 d0             	movzx  edx,al
c0009281:	89 d0                	mov    eax,edx
c0009283:	01 c0                	add    eax,eax
c0009285:	01 d0                	add    eax,edx
c0009287:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000928e:	01 d0                	add    eax,edx
c0009290:	c1 e0 02             	shl    eax,0x2
c0009293:	01 c1                	add    ecx,eax
c0009295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009298:	0f b6 d0             	movzx  edx,al
c000929b:	89 d0                	mov    eax,edx
c000929d:	01 c0                	add    eax,eax
c000929f:	01 d0                	add    eax,edx
c00092a1:	01 c0                	add    eax,eax
c00092a3:	01 d0                	add    eax,edx
c00092a5:	c1 e0 05             	shl    eax,0x5
c00092a8:	01 d0                	add    eax,edx
c00092aa:	c1 e0 04             	shl    eax,0x4
c00092ad:	01 c8                	add    eax,ecx
c00092af:	89 c2                	mov    edx,eax
c00092b1:	c1 fa 1f             	sar    edx,0x1f
c00092b4:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c00092b7:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c00092ba:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c00092bd:	0f b6 c0             	movzx  eax,al
c00092c0:	83 e8 01             	sub    eax,0x1
c00092c3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092c6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092c9:	0f b6 c0             	movzx  eax,al
c00092cc:	8b 04 85 80 35 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdca80]
c00092d3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092d6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092d9:	0f b6 c0             	movzx  eax,al
c00092dc:	83 f8 01             	cmp    eax,0x1
c00092df:	76 7c                	jbe    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092e1:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092e5:	0f b7 c0             	movzx  eax,ax
c00092e8:	83 e0 03             	and    eax,0x3
c00092eb:	85 c0                	test   eax,eax
c00092ed:	75 6e                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ef:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f3:	0f b7 c8             	movzx  ecx,ax
c00092f6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092fb:	89 c8                	mov    eax,ecx
c00092fd:	f7 e2                	mul    edx
c00092ff:	c1 ea 05             	shr    edx,0x5
c0009302:	89 d0                	mov    eax,edx
c0009304:	c1 e0 02             	shl    eax,0x2
c0009307:	01 d0                	add    eax,edx
c0009309:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009310:	01 d0                	add    eax,edx
c0009312:	c1 e0 02             	shl    eax,0x2
c0009315:	29 c1                	sub    ecx,eax
c0009317:	89 c8                	mov    eax,ecx
c0009319:	0f b7 c0             	movzx  eax,ax
c000931c:	85 c0                	test   eax,eax
c000931e:	75 39                	jne    c0009359 <KeDatetimeToSeconds(datetime_t)+0x11d>
c0009320:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009324:	0f b7 c0             	movzx  eax,ax
c0009327:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000932d:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009332:	f7 e9                	imul   ecx
c0009334:	c1 fa 07             	sar    edx,0x7
c0009337:	89 c8                	mov    eax,ecx
c0009339:	c1 f8 1f             	sar    eax,0x1f
c000933c:	29 c2                	sub    edx,eax
c000933e:	89 d0                	mov    eax,edx
c0009340:	c1 e0 02             	shl    eax,0x2
c0009343:	01 d0                	add    eax,edx
c0009345:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000934c:	01 d0                	add    eax,edx
c000934e:	c1 e0 04             	shl    eax,0x4
c0009351:	29 c1                	sub    ecx,eax
c0009353:	89 ca                	mov    edx,ecx
c0009355:	85 d2                	test   edx,edx
c0009357:	75 04                	jne    c000935d <KeDatetimeToSeconds(datetime_t)+0x121>
c0009359:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000935d:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009361:	0f b7 c0             	movzx  eax,ax
c0009364:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009367:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936a:	83 f8 46             	cmp    eax,0x46
c000936d:	0f 9f c0             	setg   al
c0009370:	0f b6 c0             	movzx  eax,al
c0009373:	85 c0                	test   eax,eax
c0009375:	0f 84 a4 00 00 00    	je     c000941f <KeDatetimeToSeconds(datetime_t)+0x1e3>
c000937b:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009382:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009386:	0f b7 d0             	movzx  edx,ax
c0009389:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000938c:	39 c2                	cmp    edx,eax
c000938e:	0f 8e b8 01 00 00    	jle    c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c0009394:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009397:	83 e0 03             	and    eax,0x3
c000939a:	85 c0                	test   eax,eax
c000939c:	75 6b                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c000939e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093a1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093a6:	f7 e9                	imul   ecx
c00093a8:	c1 fa 05             	sar    edx,0x5
c00093ab:	89 c8                	mov    eax,ecx
c00093ad:	c1 f8 1f             	sar    eax,0x1f
c00093b0:	29 c2                	sub    edx,eax
c00093b2:	89 d0                	mov    eax,edx
c00093b4:	c1 e0 02             	shl    eax,0x2
c00093b7:	01 d0                	add    eax,edx
c00093b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093c0:	01 d0                	add    eax,edx
c00093c2:	c1 e0 02             	shl    eax,0x2
c00093c5:	29 c1                	sub    ecx,eax
c00093c7:	89 ca                	mov    edx,ecx
c00093c9:	85 d2                	test   edx,edx
c00093cb:	75 35                	jne    c0009402 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c00093cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093d0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093d6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093db:	f7 e9                	imul   ecx
c00093dd:	c1 fa 07             	sar    edx,0x7
c00093e0:	89 c8                	mov    eax,ecx
c00093e2:	c1 f8 1f             	sar    eax,0x1f
c00093e5:	29 c2                	sub    edx,eax
c00093e7:	89 d0                	mov    eax,edx
c00093e9:	c1 e0 02             	shl    eax,0x2
c00093ec:	01 d0                	add    eax,edx
c00093ee:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093f5:	01 d0                	add    eax,edx
c00093f7:	c1 e0 04             	shl    eax,0x4
c00093fa:	29 c1                	sub    ecx,eax
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	85 d2                	test   edx,edx
c0009400:	75 07                	jne    c0009409 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009402:	b8 6e 01 00 00       	mov    eax,0x16e
c0009407:	eb 05                	jmp    c000940e <KeDatetimeToSeconds(datetime_t)+0x1d2>
c0009409:	b8 6d 01 00 00       	mov    eax,0x16d
c000940e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c0009411:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009414:	83 c0 01             	add    eax,0x1
c0009417:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000941a:	e9 63 ff ff ff       	jmp    c0009382 <KeDatetimeToSeconds(datetime_t)+0x146>
c000941f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009422:	83 f8 45             	cmp    eax,0x45
c0009425:	0f 8f 21 01 00 00    	jg     c000954c <KeDatetimeToSeconds(datetime_t)+0x310>
c000942b:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009432:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009436:	0f b7 d0             	movzx  edx,ax
c0009439:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000943c:	39 c2                	cmp    edx,eax
c000943e:	0f 8d 8b 00 00 00    	jge    c00094cf <KeDatetimeToSeconds(datetime_t)+0x293>
c0009444:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009447:	83 e0 03             	and    eax,0x3
c000944a:	85 c0                	test   eax,eax
c000944c:	75 6b                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000944e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009451:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009456:	f7 e9                	imul   ecx
c0009458:	c1 fa 05             	sar    edx,0x5
c000945b:	89 c8                	mov    eax,ecx
c000945d:	c1 f8 1f             	sar    eax,0x1f
c0009460:	29 c2                	sub    edx,eax
c0009462:	89 d0                	mov    eax,edx
c0009464:	c1 e0 02             	shl    eax,0x2
c0009467:	01 d0                	add    eax,edx
c0009469:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009470:	01 d0                	add    eax,edx
c0009472:	c1 e0 02             	shl    eax,0x2
c0009475:	29 c1                	sub    ecx,eax
c0009477:	89 ca                	mov    edx,ecx
c0009479:	85 d2                	test   edx,edx
c000947b:	75 35                	jne    c00094b2 <KeDatetimeToSeconds(datetime_t)+0x276>
c000947d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009480:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009486:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000948b:	f7 e9                	imul   ecx
c000948d:	c1 fa 07             	sar    edx,0x7
c0009490:	89 c8                	mov    eax,ecx
c0009492:	c1 f8 1f             	sar    eax,0x1f
c0009495:	29 c2                	sub    edx,eax
c0009497:	89 d0                	mov    eax,edx
c0009499:	c1 e0 02             	shl    eax,0x2
c000949c:	01 d0                	add    eax,edx
c000949e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a5:	01 d0                	add    eax,edx
c00094a7:	c1 e0 04             	shl    eax,0x4
c00094aa:	29 c1                	sub    ecx,eax
c00094ac:	89 ca                	mov    edx,ecx
c00094ae:	85 d2                	test   edx,edx
c00094b0:	75 07                	jne    c00094b9 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00094b2:	b8 6e 01 00 00       	mov    eax,0x16e
c00094b7:	eb 05                	jmp    c00094be <KeDatetimeToSeconds(datetime_t)+0x282>
c00094b9:	b8 6d 01 00 00       	mov    eax,0x16d
c00094be:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094c1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094c4:	83 e8 01             	sub    eax,0x1
c00094c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00094ca:	e9 63 ff ff ff       	jmp    c0009432 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c00094cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094d2:	83 e0 03             	and    eax,0x3
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 6b                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c00094d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094dc:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094e1:	f7 e9                	imul   ecx
c00094e3:	c1 fa 05             	sar    edx,0x5
c00094e6:	89 c8                	mov    eax,ecx
c00094e8:	c1 f8 1f             	sar    eax,0x1f
c00094eb:	29 c2                	sub    edx,eax
c00094ed:	89 d0                	mov    eax,edx
c00094ef:	c1 e0 02             	shl    eax,0x2
c00094f2:	01 d0                	add    eax,edx
c00094f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094fb:	01 d0                	add    eax,edx
c00094fd:	c1 e0 02             	shl    eax,0x2
c0009500:	29 c1                	sub    ecx,eax
c0009502:	89 ca                	mov    edx,ecx
c0009504:	85 d2                	test   edx,edx
c0009506:	75 35                	jne    c000953d <KeDatetimeToSeconds(datetime_t)+0x301>
c0009508:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000950b:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009511:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009516:	f7 e9                	imul   ecx
c0009518:	c1 fa 07             	sar    edx,0x7
c000951b:	89 c8                	mov    eax,ecx
c000951d:	c1 f8 1f             	sar    eax,0x1f
c0009520:	29 c2                	sub    edx,eax
c0009522:	89 d0                	mov    eax,edx
c0009524:	c1 e0 02             	shl    eax,0x2
c0009527:	01 d0                	add    eax,edx
c0009529:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009530:	01 d0                	add    eax,edx
c0009532:	c1 e0 04             	shl    eax,0x4
c0009535:	29 c1                	sub    ecx,eax
c0009537:	89 ca                	mov    edx,ecx
c0009539:	85 d2                	test   edx,edx
c000953b:	75 07                	jne    c0009544 <KeDatetimeToSeconds(datetime_t)+0x308>
c000953d:	b8 6e 01 00 00       	mov    eax,0x16e
c0009542:	eb 05                	jmp    c0009549 <KeDatetimeToSeconds(datetime_t)+0x30d>
c0009544:	b8 6d 01 00 00       	mov    eax,0x16d
c0009549:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c000954c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000954f:	89 c2                	mov    edx,eax
c0009551:	c1 fa 1f             	sar    edx,0x1f
c0009554:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000955a:	6b c8 00             	imul   ecx,eax,0x0
c000955d:	01 d9                	add    ecx,ebx
c000955f:	bb 80 51 01 00       	mov    ebx,0x15180
c0009564:	f7 e3                	mul    ebx
c0009566:	01 d1                	add    ecx,edx
c0009568:	89 ca                	mov    edx,ecx
c000956a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000956d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009573:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009576:	83 c4 24             	add    esp,0x24
c0009579:	5b                   	pop    ebx
c000957a:	5d                   	pop    ebp
c000957b:	c3                   	ret    

c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000957c:	55                   	push   ebp
c000957d:	89 e5                	mov    ebp,esp
c000957f:	56                   	push   esi
c0009580:	53                   	push   ebx
c0009581:	83 ec 20             	sub    esp,0x20
c0009584:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0009587:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000958a:	e8 ad fc ff ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c000958f:	83 c4 08             	add    esp,0x8
c0009592:	89 c3                	mov    ebx,eax
c0009594:	89 d6                	mov    esi,edx
c0009596:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000959b:	0f b6 d0             	movzx  edx,al
c000959e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c00095a3:	01 c2                	add    edx,eax
c00095a5:	89 d0                	mov    eax,edx
c00095a7:	01 c0                	add    eax,eax
c00095a9:	01 d0                	add    eax,edx
c00095ab:	01 c0                	add    eax,eax
c00095ad:	01 d0                	add    eax,edx
c00095af:	c1 e0 05             	shl    eax,0x5
c00095b2:	01 d0                	add    eax,edx
c00095b4:	c1 e0 04             	shl    eax,0x4
c00095b7:	89 c2                	mov    edx,eax
c00095b9:	c1 fa 1f             	sar    edx,0x1f
c00095bc:	29 c3                	sub    ebx,eax
c00095be:	19 d6                	sbb    esi,edx
c00095c0:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00095c5:	0f b6 c0             	movzx  eax,al
c00095c8:	85 c0                	test   eax,eax
c00095ca:	74 0c                	je     c00095d8 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c00095cc:	b8 08 07 00 00       	mov    eax,0x708
c00095d1:	ba 00 00 00 00       	mov    edx,0x0
c00095d6:	eb 0a                	jmp    c00095e2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c00095d8:	b8 00 00 00 00       	mov    eax,0x0
c00095dd:	ba 00 00 00 00       	mov    edx,0x0
c00095e2:	29 c3                	sub    ebx,eax
c00095e4:	19 d6                	sbb    esi,edx
c00095e6:	89 d8                	mov    eax,ebx
c00095e8:	89 f2                	mov    edx,esi
c00095ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095ed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	31 d2                	xor    edx,edx
c00095fa:	89 c3                	mov    ebx,eax
c00095fc:	89 d6                	mov    esi,edx
c00095fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009601:	80 e5 ff             	and    ch,0xff
c0009604:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0009607:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000960a:	83 e1 00             	and    ecx,0x0
c000960d:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0009610:	83 ec 0c             	sub    esp,0xc
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0009618:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000961b:	68 6e 35 02 c0       	push   0xc002356e
c0009620:	e8 57 d9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009625:	83 c4 20             	add    esp,0x20
c0009628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000962b:	8b 00                	mov    eax,DWORD PTR [eax]
c000962d:	83 c0 2c             	add    eax,0x2c
c0009630:	8b 00                	mov    eax,DWORD PTR [eax]
c0009632:	83 ec 04             	sub    esp,0x4
c0009635:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009638:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000963b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000963e:	ff d0                	call   eax
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009646:	5b                   	pop    ebx
c0009647:	5e                   	pop    esi
c0009648:	5d                   	pop    ebp
c0009649:	c3                   	ret    

c000964a <KeSecondsToDatetime(unsigned long long)>:
c000964a:	55                   	push   ebp
c000964b:	89 e5                	mov    ebp,esp
c000964d:	83 ec 48             	sub    esp,0x48
c0009650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009653:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009656:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009659:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c000965c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000965f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009662:	6a 00                	push   0x0
c0009664:	68 80 51 01 00       	push   0x15180
c0009669:	52                   	push   edx
c000966a:	50                   	push   eax
c000966b:	e8 94 83 01 00       	call   c0021a04 <__udivdi3>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009678:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000967b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c000967e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009681:	6a 00                	push   0x0
c0009683:	68 80 51 01 00       	push   0x15180
c0009688:	52                   	push   edx
c0009689:	50                   	push   eax
c000968a:	e8 75 84 01 00       	call   c0021b04 <__umoddi3>
c000968f:	83 c4 10             	add    esp,0x10
c0009692:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009695:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009699:	79 0b                	jns    c00096a6 <KeSecondsToDatetime(unsigned long long)+0x5c>
c000969b:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c00096a2:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c00096a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a9:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096ae:	89 c8                	mov    eax,ecx
c00096b0:	f7 ea                	imul   edx
c00096b2:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b5:	c1 f8 0b             	sar    eax,0xb
c00096b8:	89 c2                	mov    edx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	c1 f8 1f             	sar    eax,0x1f
c00096bf:	29 c2                	sub    edx,eax
c00096c1:	89 d0                	mov    eax,edx
c00096c3:	88 c2                	mov    dl,al
c00096c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c8:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00096cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096ce:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	f7 ea                	imul   edx
c00096d7:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096da:	c1 f8 0b             	sar    eax,0xb
c00096dd:	89 c2                	mov    edx,eax
c00096df:	89 c8                	mov    eax,ecx
c00096e1:	c1 f8 1f             	sar    eax,0x1f
c00096e4:	29 c2                	sub    edx,eax
c00096e6:	89 d0                	mov    eax,edx
c00096e8:	01 c0                	add    eax,eax
c00096ea:	01 d0                	add    eax,edx
c00096ec:	01 c0                	add    eax,eax
c00096ee:	01 d0                	add    eax,edx
c00096f0:	c1 e0 05             	shl    eax,0x5
c00096f3:	01 d0                	add    eax,edx
c00096f5:	c1 e0 04             	shl    eax,0x4
c00096f8:	29 c1                	sub    ecx,eax
c00096fa:	89 c8                	mov    eax,ecx
c00096fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096ff:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009702:	ba 89 88 88 88       	mov    edx,0x88888889
c0009707:	89 c8                	mov    eax,ecx
c0009709:	f7 ea                	imul   edx
c000970b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000970e:	c1 f8 05             	sar    eax,0x5
c0009711:	89 c2                	mov    edx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	c1 f8 1f             	sar    eax,0x1f
c0009718:	29 c2                	sub    edx,eax
c000971a:	89 d0                	mov    eax,edx
c000971c:	88 c2                	mov    dl,al
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009724:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009727:	ba 89 88 88 88       	mov    edx,0x88888889
c000972c:	89 c8                	mov    eax,ecx
c000972e:	f7 ea                	imul   edx
c0009730:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009733:	c1 f8 05             	sar    eax,0x5
c0009736:	89 c2                	mov    edx,eax
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	01 c0                	add    eax,eax
c0009743:	01 d0                	add    eax,edx
c0009745:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 02             	shl    eax,0x2
c0009751:	29 c1                	sub    ecx,eax
c0009753:	89 ca                	mov    edx,ecx
c0009755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009758:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c000975b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000975f:	79 20                	jns    c0009781 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009764:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c000976a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000976f:	89 c8                	mov    eax,ecx
c0009771:	f7 ea                	imul   edx
c0009773:	c1 fa 0f             	sar    edx,0xf
c0009776:	89 c8                	mov    eax,ecx
c0009778:	c1 f8 1f             	sar    eax,0x1f
c000977b:	29 c2                	sub    edx,eax
c000977d:	89 d0                	mov    eax,edx
c000977f:	eb 18                	jmp    c0009799 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009781:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c0009784:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009789:	89 c8                	mov    eax,ecx
c000978b:	f7 ea                	imul   edx
c000978d:	c1 fa 0f             	sar    edx,0xf
c0009790:	89 c8                	mov    eax,ecx
c0009792:	c1 f8 1f             	sar    eax,0x1f
c0009795:	29 c2                	sub    edx,eax
c0009797:	89 d0                	mov    eax,edx
c0009799:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000979c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000979f:	89 d0                	mov    eax,edx
c00097a1:	c1 e0 03             	shl    eax,0x3
c00097a4:	01 d0                	add    eax,edx
c00097a6:	c1 e0 04             	shl    eax,0x4
c00097a9:	01 d0                	add    eax,edx
c00097ab:	c1 e0 04             	shl    eax,0x4
c00097ae:	29 d0                	sub    eax,edx
c00097b0:	89 c2                	mov    edx,eax
c00097b2:	c1 e2 06             	shl    edx,0x6
c00097b5:	29 c2                	sub    edx,eax
c00097b7:	89 d0                	mov    eax,edx
c00097b9:	f7 d8                	neg    eax
c00097bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00097be:	01 d0                	add    eax,edx
c00097c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00097c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097c6:	c1 e8 02             	shr    eax,0x2
c00097c9:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c00097ce:	f7 e2                	mul    edx
c00097d0:	c1 ea 07             	shr    edx,0x7
c00097d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097d6:	29 d0                	sub    eax,edx
c00097d8:	89 c1                	mov    ecx,eax
c00097da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097dd:	c1 e8 02             	shr    eax,0x2
c00097e0:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c00097e5:	f7 e2                	mul    edx
c00097e7:	89 d0                	mov    eax,edx
c00097e9:	c1 e8 0b             	shr    eax,0xb
c00097ec:	01 c1                	add    ecx,eax
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	c1 e8 04             	shr    eax,0x4
c00097f4:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097f9:	f7 e2                	mul    edx
c00097fb:	89 d0                	mov    eax,edx
c00097fd:	c1 e8 04             	shr    eax,0x4
c0009800:	29 c1                	sub    ecx,eax
c0009802:	ba 61 f3 19 67       	mov    edx,0x6719f361
c0009807:	89 c8                	mov    eax,ecx
c0009809:	f7 e2                	mul    edx
c000980b:	89 c8                	mov    eax,ecx
c000980d:	29 d0                	sub    eax,edx
c000980f:	d1 e8                	shr    eax,1
c0009811:	01 d0                	add    eax,edx
c0009813:	c1 e8 08             	shr    eax,0x8
c0009816:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0009819:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000981c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c0009821:	f7 e2                	mul    edx
c0009823:	89 d1                	mov    ecx,edx
c0009825:	c1 e9 05             	shr    ecx,0x5
c0009828:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000982b:	89 d0                	mov    eax,edx
c000982d:	c1 e0 03             	shl    eax,0x3
c0009830:	01 d0                	add    eax,edx
c0009832:	c1 e0 03             	shl    eax,0x3
c0009835:	01 d0                	add    eax,edx
c0009837:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000983e:	01 c2                	add    edx,eax
c0009840:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009843:	c1 e8 02             	shr    eax,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	29 c1                	sub    ecx,eax
c000984a:	89 ca                	mov    edx,ecx
c000984c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000984f:	01 d0                	add    eax,edx
c0009851:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009854:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0009857:	89 d0                	mov    eax,edx
c0009859:	c1 e0 02             	shl    eax,0x2
c000985c:	01 d0                	add    eax,edx
c000985e:	83 c0 02             	add    eax,0x2
c0009861:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009866:	f7 e2                	mul    edx
c0009868:	89 d0                	mov    eax,edx
c000986a:	c1 e8 07             	shr    eax,0x7
c000986d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009870:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009873:	89 d0                	mov    eax,edx
c0009875:	c1 e0 03             	shl    eax,0x3
c0009878:	01 d0                	add    eax,edx
c000987a:	01 c0                	add    eax,eax
c000987c:	01 d0                	add    eax,edx
c000987e:	c1 e0 03             	shl    eax,0x3
c0009881:	01 d0                	add    eax,edx
c0009883:	83 c0 02             	add    eax,0x2
c0009886:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000988b:	f7 e2                	mul    edx
c000988d:	c1 ea 02             	shr    edx,0x2
c0009890:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009893:	29 d0                	sub    eax,edx
c0009895:	83 c0 01             	add    eax,0x1
c0009898:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000989b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000989f:	77 07                	ja     c00098a8 <KeSecondsToDatetime(unsigned long long)+0x25e>
c00098a1:	b8 02 00 00 00       	mov    eax,0x2
c00098a6:	eb 05                	jmp    c00098ad <KeSecondsToDatetime(unsigned long long)+0x263>
c00098a8:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c00098ad:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c00098b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00098b3:	89 d0                	mov    eax,edx
c00098b5:	c1 e0 02             	shl    eax,0x2
c00098b8:	01 d0                	add    eax,edx
c00098ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00098c1:	01 d0                	add    eax,edx
c00098c3:	c1 e0 04             	shl    eax,0x4
c00098c6:	89 c2                	mov    edx,eax
c00098c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00098cb:	01 c2                	add    edx,eax
c00098cd:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c00098d1:	0f 96 c0             	setbe  al
c00098d4:	0f b6 c0             	movzx  eax,al
c00098d7:	01 d0                	add    eax,edx
c00098d9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00098dc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00098df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00098e2:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00098e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00098e9:	83 c0 01             	add    eax,0x1
c00098ec:	88 c2                	mov    dl,al
c00098ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098f1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00098f4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00098f7:	88 c2                	mov    dl,al
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	88 10                	mov    BYTE PTR [eax],dl
c00098fe:	90                   	nop
c00098ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009902:	c9                   	leave  
c0009903:	c2 04 00             	ret    0x4

c0009906 <Clock::timeInDatetimeLocal()>:
c0009906:	55                   	push   ebp
c0009907:	89 e5                	mov    ebp,esp
c0009909:	83 ec 08             	sub    esp,0x8
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009912:	e8 23 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0009917:	83 c4 10             	add    esp,0x10
c000991a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000991d:	83 ec 04             	sub    esp,0x4
c0009920:	52                   	push   edx
c0009921:	50                   	push   eax
c0009922:	51                   	push   ecx
c0009923:	e8 22 fd ff ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c0009928:	83 c4 0c             	add    esp,0xc
c000992b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000992e:	c9                   	leave  
c000992f:	c2 04 00             	ret    0x4

c0009932 <Device::hibernate()>:
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::wake()>:
c0009934:	c3                   	ret    
c0009935:	90                   	nop

c0009936 <Device::detect()>:
c0009936:	c3                   	ret    
c0009937:	90                   	nop

c0009938 <Device::disableLegacy()>:
c0009938:	c3                   	ret    
c0009939:	90                   	nop

c000993a <Device::powerSaving(PowerSavingLevel)>:
c000993a:	c3                   	ret    
c000993b:	90                   	nop

c000993c <DriverlessDevice::close(int, int, void*)>:
c000993c:	31 c0                	xor    eax,eax
c000993e:	c3                   	ret    
c000993f:	90                   	nop

c0009940 <DriverlessDevice::detect()>:
c0009940:	c3                   	ret    
c0009941:	90                   	nop

c0009942 <DriverlessDevice::open(int, int, void*)>:
c0009942:	83 ec 18             	sub    esp,0x18
c0009945:	68 ec 35 02 c0       	push   0xc00235ec
c000994a:	e8 a5 63 00 00       	call   c000fcf4 <KePanic(char const*)>
c000994f:	83 c8 ff             	or     eax,0xffffffff
c0009952:	83 c4 1c             	add    esp,0x1c
c0009955:	c3                   	ret    

c0009956 <Device::~Device()>:
c0009956:	ba 90 36 02 c0       	mov    edx,0xc0023690
c000995b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000995f:	89 10                	mov    DWORD PTR [eax],edx
c0009961:	90                   	nop
c0009962:	c3                   	ret    
c0009963:	90                   	nop

c0009964 <Device::~Device()>:
c0009964:	83 ec 0c             	sub    esp,0xc
c0009967:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000996b:	e8 e6 ff ff ff       	call   c0009956 <Device::~Device()>
c0009970:	83 c4 04             	add    esp,0x4
c0009973:	83 ec 08             	sub    esp,0x8
c0009976:	68 58 01 00 00       	push   0x158
c000997b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000997f:	e8 2c 3a 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009984:	83 c4 10             	add    esp,0x10
c0009987:	83 c4 0c             	add    esp,0xc
c000998a:	c3                   	ret    
c000998b:	90                   	nop

c000998c <Device::findAndLoadDriver()>:
c000998c:	c7 44 24 04 0a 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc002360a
c0009994:	e9 e3 d5 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c0009999:	90                   	nop

c000999a <Device::preOpenPCI(PCIDeviceInfo)>:
c000999a:	57                   	push   edi
c000999b:	b9 09 00 00 00       	mov    ecx,0x9
c00099a0:	56                   	push   esi
c00099a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00099a5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00099a9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00099b3:	81 c7 18 01 00 00    	add    edi,0x118
c00099b9:	fc                   	cld    
c00099ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	c3                   	ret    
c00099bf:	90                   	nop

c00099c0 <Device::preOpenACPI(void*, char*, char*)>:
c00099c0:	57                   	push   edi
c00099c1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00099c6:	56                   	push   esi
c00099c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099cf:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00099d9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00099df:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00099e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00099e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099eb:	b9 0e 00 00 00       	mov    ecx,0xe
c00099f0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00099f6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099fc:	5e                   	pop    esi
c00099fd:	5f                   	pop    edi
c00099fe:	c3                   	ret    
c00099ff:	90                   	nop

c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0009a00:	53                   	push   ebx
c0009a01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009a09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009a11:	0f b6 c0             	movzx  eax,al
c0009a14:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a24:	5b                   	pop    ebx
c0009a25:	e9 27 11 01 00       	jmp    c001ab51 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009a2a <Device::getParent()>:
c0009a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a2e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009a34:	c3                   	ret    
c0009a35:	90                   	nop

c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009a36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a3e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009a43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009a47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009a4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a4f:	e9 5f 12 01 00       	jmp    c001acb3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009a54 <Device::addChild(Device*)>:
c0009a54:	53                   	push   ebx
c0009a55:	83 ec 08             	sub    esp,0x8
c0009a58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a60:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a66:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a6c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a6e:	85 d2                	test   edx,edx
c0009a70:	74 04                	je     c0009a76 <Device::addChild(Device*)+0x22>
c0009a72:	89 d3                	mov    ebx,edx
c0009a74:	eb f6                	jmp    c0009a6c <Device::addChild(Device*)+0x18>
c0009a76:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	6a 08                	push   0x8
c0009a7e:	e8 14 5e 00 00       	call   c000f897 <malloc>
c0009a83:	89 03                	mov    DWORD PTR [ebx],eax
c0009a85:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a8b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a92:	83 c4 18             	add    esp,0x18
c0009a95:	5b                   	pop    ebx
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <Device::removeAllChildren()>:
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	52                   	push   edx
c0009a9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a9f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009aa5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa8:	74 17                	je     c0009ac1 <Device::removeAllChildren()+0x29>
c0009aaa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009aad:	85 c0                	test   eax,eax
c0009aaf:	74 0c                	je     c0009abd <Device::removeAllChildren()+0x25>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	8b 10                	mov    edx,DWORD PTR [eax]
c0009ab6:	50                   	push   eax
c0009ab7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009aba:	83 c4 10             	add    esp,0x10
c0009abd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009abf:	eb e4                	jmp    c0009aa5 <Device::removeAllChildren()+0xd>
c0009ac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009acd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009ad3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ada:	58                   	pop    eax
c0009adb:	5b                   	pop    ebx
c0009adc:	5e                   	pop    esi
c0009add:	c3                   	ret    

c0009ade <Device::hibernateAll()>:
c0009ade:	53                   	push   ebx
c0009adf:	83 ec 14             	sub    esp,0x14
c0009ae2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ae8:	53                   	push   ebx
c0009ae9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009aec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009af8:	74 0f                	je     c0009b09 <Device::hibernateAll()+0x2b>
c0009afa:	83 ec 0c             	sub    esp,0xc
c0009afd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b00:	e8 d9 ff ff ff       	call   c0009ade <Device::hibernateAll()>
c0009b05:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b07:	eb e9                	jmp    c0009af2 <Device::hibernateAll()+0x14>
c0009b09:	83 c4 08             	add    esp,0x8
c0009b0c:	5b                   	pop    ebx
c0009b0d:	c3                   	ret    

c0009b0e <Device::wakeAll()>:
c0009b0e:	53                   	push   ebx
c0009b0f:	83 ec 14             	sub    esp,0x14
c0009b12:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b18:	53                   	push   ebx
c0009b19:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009b1c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b28:	74 0f                	je     c0009b39 <Device::wakeAll()+0x2b>
c0009b2a:	83 ec 0c             	sub    esp,0xc
c0009b2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b30:	e8 d9 ff ff ff       	call   c0009b0e <Device::wakeAll()>
c0009b35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b37:	eb e9                	jmp    c0009b22 <Device::wakeAll()+0x14>
c0009b39:	83 c4 08             	add    esp,0x8
c0009b3c:	5b                   	pop    ebx
c0009b3d:	c3                   	ret    

c0009b3e <Device::detectAll()>:
c0009b3e:	53                   	push   ebx
c0009b3f:	83 ec 14             	sub    esp,0x14
c0009b42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b48:	53                   	push   ebx
c0009b49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009b4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b52:	83 c4 10             	add    esp,0x10
c0009b55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b58:	74 0f                	je     c0009b69 <Device::detectAll()+0x2b>
c0009b5a:	83 ec 0c             	sub    esp,0xc
c0009b5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b60:	e8 d9 ff ff ff       	call   c0009b3e <Device::detectAll()>
c0009b65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b67:	eb e9                	jmp    c0009b52 <Device::detectAll()+0x14>
c0009b69:	83 c4 08             	add    esp,0x8
c0009b6c:	5b                   	pop    ebx
c0009b6d:	c3                   	ret    

c0009b6e <Device::disableLegacyAll()>:
c0009b6e:	c3                   	ret    
c0009b6f:	90                   	nop

c0009b70 <Device::loadDriversForAll()>:
c0009b70:	c3                   	ret    
c0009b71:	90                   	nop

c0009b72 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b72:	56                   	push   esi
c0009b73:	53                   	push   ebx
c0009b74:	83 ec 0c             	sub    esp,0xc
c0009b77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b7b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b81:	56                   	push   esi
c0009b82:	53                   	push   ebx
c0009b83:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b92:	74 0f                	je     c0009ba3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b94:	52                   	push   edx
c0009b95:	52                   	push   edx
c0009b96:	56                   	push   esi
c0009b97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b9a:	e8 d3 ff ff ff       	call   c0009b72 <Device::powerSavingAll(PowerSavingLevel)>
c0009b9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ba1:	eb e9                	jmp    c0009b8c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009ba3:	58                   	pop    eax
c0009ba4:	5b                   	pop    ebx
c0009ba5:	5e                   	pop    esi
c0009ba6:	c3                   	ret    
c0009ba7:	90                   	nop

c0009ba8 <Device::setName(char const*)>:
c0009ba8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009bb0:	e9 8b 6a ff ff       	jmp    c0000640 <strcpy>
c0009bb5:	90                   	nop

c0009bb6 <Device::Device(char const*)>:
c0009bb6:	83 ec 1c             	sub    esp,0x1c
c0009bb9:	ba 90 36 02 c0       	mov    edx,0xc0023690
c0009bbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc2:	89 10                	mov    DWORD PTR [eax],edx
c0009bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bc8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009bfc:	83 ec 08             	sub    esp,0x8
c0009bff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c07:	e8 9c ff ff ff       	call   c0009ba8 <Device::setName(char const*)>
c0009c0c:	83 c4 10             	add    esp,0x10
c0009c0f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009c17:	83 ec 0c             	sub    esp,0xc
c0009c1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c1e:	e8 74 5c 00 00       	call   c000f897 <malloc>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c37:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c41:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c51:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009c57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c62:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c6d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c78:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ca2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009cac:	90                   	nop
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	c3                   	ret    
c0009cb1:	90                   	nop

c0009cb2 <Device::getName()>:
c0009cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cb6:	05 d0 00 00 00       	add    eax,0xd0
c0009cbb:	c3                   	ret    

c0009cbc <Device::closeAll()>:
c0009cbc:	53                   	push   ebx
c0009cbd:	83 ec 08             	sub    esp,0x8
c0009cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009cc4:	53                   	push   ebx
c0009cc5:	e8 e8 ff ff ff       	call   c0009cb2 <Device::getName()>
c0009cca:	52                   	push   edx
c0009ccb:	50                   	push   eax
c0009ccc:	68 44 36 02 c0       	push   0xc0023644
c0009cd1:	e8 a6 d2 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0009cd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009cd8:	6a 00                	push   0x0
c0009cda:	6a 00                	push   0x0
c0009cdc:	6a 00                	push   0x0
c0009cde:	53                   	push   ebx
c0009cdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009ce2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ce8:	83 c4 20             	add    esp,0x20
c0009ceb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009cee:	74 12                	je     c0009d02 <Device::closeAll()+0x46>
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009cf6:	e8 c1 ff ff ff       	call   c0009cbc <Device::closeAll()>
c0009cfb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009cfd:	83 c4 10             	add    esp,0x10
c0009d00:	eb e9                	jmp    c0009ceb <Device::closeAll()+0x2f>
c0009d02:	83 c4 08             	add    esp,0x8
c0009d05:	5b                   	pop    ebx
c0009d06:	c3                   	ret    
c0009d07:	90                   	nop

c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009d08:	83 ec 0c             	sub    esp,0xc
c0009d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0f:	83 ec 08             	sub    esp,0x8
c0009d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d16:	50                   	push   eax
c0009d17:	e8 9a fe ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	ba bc 36 02 c0       	mov    edx,0xc00236bc
c0009d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d28:	89 10                	mov    DWORD PTR [eax],edx
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009d38:	90                   	nop
c0009d39:	83 c4 0c             	add    esp,0xc
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009d3e:	57                   	push   edi
c0009d3f:	56                   	push   esi
c0009d40:	53                   	push   ebx
c0009d41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d45:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009d49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009d4d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009d53:	75 0c                	jne    c0009d61 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	53                   	push   ebx
c0009d58:	56                   	push   esi
c0009d59:	e8 1e 7f 01 00       	call   c0021c7c <LinkedList<Device>::addElement(Device*)>
c0009d5e:	83 c4 10             	add    esp,0x10
c0009d61:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d6a:	74 12                	je     c0009d7e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d6c:	50                   	push   eax
c0009d6d:	57                   	push   edi
c0009d6e:	56                   	push   esi
c0009d6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d72:	e8 c7 ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	eb e9                	jmp    c0009d67 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d7e:	5b                   	pop    ebx
c0009d7f:	5e                   	pop    esi
c0009d80:	5f                   	pop    edi
c0009d81:	c3                   	ret    

c0009d82 <getDevicesOfType(DeviceType)>:
c0009d82:	53                   	push   ebx
c0009d83:	83 ec 14             	sub    esp,0x14
c0009d86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d8a:	53                   	push   ebx
c0009d8b:	e8 c8 7f 01 00       	call   c0021d58 <LinkedList<Device>::LinkedList()>
c0009d90:	83 c4 0c             	add    esp,0xc
c0009d93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d97:	53                   	push   ebx
c0009d98:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c0009d9e:	e8 9b ff ff ff       	call   c0009d3e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009da3:	89 d8                	mov    eax,ebx
c0009da5:	83 c4 18             	add    esp,0x18
c0009da8:	5b                   	pop    ebx
c0009da9:	c2 04 00             	ret    0x4

c0009dac <HardDiskController::HardDiskController(char const*)>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009db3:	83 ec 08             	sub    esp,0x8
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	50                   	push   eax
c0009dbb:	e8 f6 fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009ddc:	90                   	nop
c0009ddd:	83 c4 0c             	add    esp,0xc
c0009de0:	c3                   	ret    
c0009de1:	90                   	nop
c0009de2:	66 90                	xchg   ax,ax

c0009de4 <HardDiskController::~HardDiskController()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	ba e8 36 02 c0       	mov    edx,0xc00236e8
c0009dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df0:	89 10                	mov    DWORD PTR [eax],edx
c0009df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009df6:	83 ec 0c             	sub    esp,0xc
c0009df9:	50                   	push   eax
c0009dfa:	e8 57 fb ff ff       	call   c0009956 <Device::~Device()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	90                   	nop
c0009e03:	83 c4 0c             	add    esp,0xc
c0009e06:	c3                   	ret    
c0009e07:	90                   	nop

c0009e08 <HardDiskController::~HardDiskController()>:
c0009e08:	83 ec 0c             	sub    esp,0xc
c0009e0b:	83 ec 0c             	sub    esp,0xc
c0009e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e12:	e8 cd ff ff ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0009e17:	83 c4 10             	add    esp,0x10
c0009e1a:	83 ec 08             	sub    esp,0x8
c0009e1d:	68 58 01 00 00       	push   0x158
c0009e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e26:	e8 85 35 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009e2b:	83 c4 10             	add    esp,0x10
c0009e2e:	83 c4 0c             	add    esp,0xc
c0009e31:	c3                   	ret    

c0009e32 <PhysicalDisk::eject()>:
c0009e32:	83 c8 ff             	or     eax,0xffffffff
c0009e35:	c3                   	ret    

c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e3d:	83 ec 08             	sub    esp,0x8
c0009e40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e44:	50                   	push   eax
c0009e45:	e8 6c fd ff ff       	call   c0009bb6 <Device::Device(char const*)>
c0009e4a:	83 c4 10             	add    esp,0x10
c0009e4d:	ba 14 37 02 c0       	mov    edx,0xc0023714
c0009e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e56:	89 10                	mov    DWORD PTR [eax],edx
c0009e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e98:	90                   	nop
c0009e99:	83 c4 0c             	add    esp,0xc
c0009e9c:	c3                   	ret    
c0009e9d:	90                   	nop

c0009e9e <PhysicalDisk::startCache()>:
c0009e9e:	56                   	push   esi
c0009e9f:	53                   	push   ebx
c0009ea0:	83 ec 10             	sub    esp,0x10
c0009ea3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ea7:	6a 44                	push   0x44
c0009ea9:	e8 e9 59 00 00       	call   c000f897 <malloc>
c0009eae:	89 c6                	mov    esi,eax
c0009eb0:	58                   	pop    eax
c0009eb1:	5a                   	pop    edx
c0009eb2:	53                   	push   ebx
c0009eb3:	56                   	push   esi
c0009eb4:	e8 d3 13 00 00       	call   c000b28c <VCache::VCache(PhysicalDisk*)>
c0009eb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009ebf:	83 c4 14             	add    esp,0x14
c0009ec2:	5b                   	pop    ebx
c0009ec3:	5e                   	pop    esi
c0009ec4:	c3                   	ret    
c0009ec5:	90                   	nop

c0009ec6 <PhysicalDisk::~PhysicalDisk()>:
c0009ec6:	83 ec 0c             	sub    esp,0xc
c0009ec9:	ba 14 37 02 c0       	mov    edx,0xc0023714
c0009ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed2:	89 10                	mov    DWORD PTR [eax],edx
c0009ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ed8:	83 ec 0c             	sub    esp,0xc
c0009edb:	50                   	push   eax
c0009edc:	e8 75 fa ff ff       	call   c0009956 <Device::~Device()>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	90                   	nop
c0009ee5:	83 c4 0c             	add    esp,0xc
c0009ee8:	c3                   	ret    
c0009ee9:	90                   	nop

c0009eea <PhysicalDisk::~PhysicalDisk()>:
c0009eea:	83 ec 0c             	sub    esp,0xc
c0009eed:	83 ec 0c             	sub    esp,0xc
c0009ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef4:	e8 cd ff ff ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	83 ec 08             	sub    esp,0x8
c0009eff:	68 6c 01 00 00       	push   0x16c
c0009f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f08:	e8 a3 34 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	83 c4 0c             	add    esp,0xc
c0009f13:	c3                   	ret    

c0009f14 <startGUI(void*)>:
c0009f14:	55                   	push   ebp
c0009f15:	89 e5                	mov    ebp,esp
c0009f17:	53                   	push   ebx
c0009f18:	83 ec 04             	sub    esp,0x4
c0009f1b:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f23:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f28:	85 c0                	test   eax,eax
c0009f2a:	75 01                	jne    c0009f2d <startGUI(void*)+0x19>
c0009f2c:	fb                   	sti    
c0009f2d:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f33:	83 ec 08             	sub    esp,0x8
c0009f36:	6a 01                	push   0x1
c0009f38:	68 44 37 02 c0       	push   0xc0023744
c0009f3d:	e8 38 c3 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c0009f42:	83 c4 10             	add    esp,0x10
c0009f45:	83 ec 08             	sub    esp,0x8
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	e8 7d c5 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f58:	83 ec 08             	sub    esp,0x8
c0009f5b:	6a 01                	push   0x1
c0009f5d:	68 5e 37 02 c0       	push   0xc002375e
c0009f62:	e8 13 c3 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c0009f67:	83 c4 10             	add    esp,0x10
c0009f6a:	83 ec 08             	sub    esp,0x8
c0009f6d:	53                   	push   ebx
c0009f6e:	50                   	push   eax
c0009f6f:	e8 58 c5 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	eb fe                	jmp    c0009f77 <startGUI(void*)+0x63>

c0009f79 <startGUIVESA(void*)>:
c0009f79:	55                   	push   ebp
c0009f7a:	89 e5                	mov    ebp,esp
c0009f7c:	53                   	push   ebx
c0009f7d:	83 ec 04             	sub    esp,0x4
c0009f80:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0009f88:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0009f8d:	85 c0                	test   eax,eax
c0009f8f:	75 01                	jne    c0009f92 <startGUIVESA(void*)+0x19>
c0009f91:	fb                   	sti    
c0009f92:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009f98:	83 ec 08             	sub    esp,0x8
c0009f9b:	6a 01                	push   0x1
c0009f9d:	68 7c 37 02 c0       	push   0xc002377c
c0009fa2:	e8 d3 c2 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c0009fa7:	83 c4 10             	add    esp,0x10
c0009faa:	83 ec 08             	sub    esp,0x8
c0009fad:	53                   	push   ebx
c0009fae:	50                   	push   eax
c0009faf:	e8 18 c5 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c0009fb4:	83 c4 10             	add    esp,0x10
c0009fb7:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c0009fbd:	83 ec 08             	sub    esp,0x8
c0009fc0:	6a 01                	push   0x1
c0009fc2:	68 5e 37 02 c0       	push   0xc002375e
c0009fc7:	e8 ae c2 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c0009fcc:	83 c4 10             	add    esp,0x10
c0009fcf:	83 ec 08             	sub    esp,0x8
c0009fd2:	53                   	push   ebx
c0009fd3:	50                   	push   eax
c0009fd4:	e8 f3 c4 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	eb fe                	jmp    c0009fdc <startGUIVESA(void*)+0x63>

c0009fde <sendKeyToTerminal(unsigned char)>:
c0009fde:	55                   	push   ebp
c0009fdf:	89 e5                	mov    ebp,esp
c0009fe1:	83 ec 28             	sub    esp,0x28
c0009fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009fe7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009fea:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c0009fef:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	52                   	push   edx
c0009ff7:	50                   	push   eax
c0009ff8:	e8 5b 8a 00 00       	call   c0012a58 <VgaText::receiveKey(unsigned char)>
c0009ffd:	83 c4 10             	add    esp,0x10
c000a000:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a004:	83 f8 0a             	cmp    eax,0xa
c000a007:	74 16                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a009:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a00d:	83 f8 03             	cmp    eax,0x3
c000a010:	74 0d                	je     c000a01f <sendKeyToTerminal(unsigned char)+0x41>
c000a012:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000a016:	83 f8 1c             	cmp    eax,0x1c
c000a019:	0f 85 92 00 00 00    	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a01f:	fa                   	cli    
c000a020:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a025:	83 c0 01             	add    eax,0x1
c000a028:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a02d:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a032:	83 c0 01             	add    eax,0x1
c000a035:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a03a:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c000a03f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a042:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c000a04c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000a050:	74 1f                	je     c000a071 <sendKeyToTerminal(unsigned char)+0x93>
c000a052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a055:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a05b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a05e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a061:	83 ec 0c             	sub    esp,0xc
c000a064:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a067:	e8 10 d1 00 00       	call   c001717c <unblockTask(ThreadControlBlock*)>
c000a06c:	83 c4 10             	add    esp,0x10
c000a06f:	eb db                	jmp    c000a04c <sendKeyToTerminal(unsigned char)+0x6e>
c000a071:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a076:	83 e8 01             	sub    eax,0x1
c000a079:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000a07e:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000a083:	85 c0                	test   eax,eax
c000a085:	75 18                	jne    c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a087:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c000a08c:	85 c0                	test   eax,eax
c000a08e:	74 0f                	je     c000a09f <sendKeyToTerminal(unsigned char)+0xc1>
c000a090:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000a09a:	e8 81 cd 00 00       	call   c0016e20 <schedule()>
c000a09f:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a0a7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a0ac:	85 c0                	test   eax,eax
c000a0ae:	75 01                	jne    c000a0b1 <sendKeyToTerminal(unsigned char)+0xd3>
c000a0b0:	fb                   	sti    
c000a0b1:	90                   	nop
c000a0b2:	c9                   	leave  
c000a0b3:	c3                   	ret    

c000a0b4 <sendKeyboardToken(KeyboardToken)>:
c000a0b4:	55                   	push   ebp
c000a0b5:	89 e5                	mov    ebp,esp
c000a0b7:	83 ec 18             	sub    esp,0x18
c000a0ba:	e8 66 65 00 00       	call   c0010625 <KeUserIOReceived()>
c000a0bf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a0c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0c5:	0f b7 c0             	movzx  eax,ax
c000a0c8:	83 f2 01             	xor    edx,0x1
c000a0cb:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a0d1:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a0d6:	85 c0                	test   eax,eax
c000a0d8:	74 24                	je     c000a0fe <sendKeyboardToken(KeyboardToken)+0x4a>
c000a0da:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a0e0:	83 ec 04             	sub    esp,0x4
c000a0e3:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a0e8:	83 ec 08             	sub    esp,0x8
c000a0eb:	89 e2                	mov    edx,esp
c000a0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f0:	89 02                	mov    DWORD PTR [edx],eax
c000a0f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0f5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0f9:	ff d1                	call   ecx
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a102:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a105:	0f b6 c0             	movzx  eax,al
c000a108:	85 c0                	test   eax,eax
c000a10a:	0f 84 da 00 00 00    	je     c000a1ea <sendKeyboardToken(KeyboardToken)+0x136>
c000a110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a113:	0f b7 c0             	movzx  eax,ax
c000a116:	3d 18 03 00 00       	cmp    eax,0x318
c000a11b:	75 06                	jne    c000a123 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a11d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a126:	0f b7 c0             	movzx  eax,ax
c000a129:	3d 19 03 00 00       	cmp    eax,0x319
c000a12e:	75 06                	jne    c000a136 <sendKeyboardToken(KeyboardToken)+0x82>
c000a130:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a139:	0f b7 c0             	movzx  eax,ax
c000a13c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a141:	75 06                	jne    c000a149 <sendKeyboardToken(KeyboardToken)+0x95>
c000a143:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a14c:	0f b7 c0             	movzx  eax,ax
c000a14f:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a154:	75 06                	jne    c000a15c <sendKeyboardToken(KeyboardToken)+0xa8>
c000a156:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15f:	0f b7 c0             	movzx  eax,ax
c000a162:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a167:	75 06                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0xbb>
c000a169:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a17a:	75 06                	jne    c000a182 <sendKeyboardToken(KeyboardToken)+0xce>
c000a17c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a185:	0f b7 c0             	movzx  eax,ax
c000a188:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a18d:	75 06                	jne    c000a195 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a18f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a198:	0f b7 c0             	movzx  eax,ax
c000a19b:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a1a0:	75 06                	jne    c000a1a8 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a1a2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ab:	0f b7 c0             	movzx  eax,ax
c000a1ae:	3d 20 03 00 00       	cmp    eax,0x320
c000a1b3:	75 06                	jne    c000a1bb <sendKeyboardToken(KeyboardToken)+0x107>
c000a1b5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1be:	0f b7 c0             	movzx  eax,ax
c000a1c1:	3d 21 03 00 00       	cmp    eax,0x321
c000a1c6:	75 06                	jne    c000a1ce <sendKeyboardToken(KeyboardToken)+0x11a>
c000a1c8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a1ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1d1:	0f b7 c0             	movzx  eax,ax
c000a1d4:	3d 22 03 00 00       	cmp    eax,0x322
c000a1d9:	0f 85 f1 00 00 00    	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1df:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a1e5:	e9 e6 00 00 00       	jmp    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a1ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ed:	0f b7 c0             	movzx  eax,ax
c000a1f0:	3d 18 03 00 00       	cmp    eax,0x318
c000a1f5:	75 0a                	jne    c000a201 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a1f7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a204:	0f b7 c0             	movzx  eax,ax
c000a207:	3d 19 03 00 00       	cmp    eax,0x319
c000a20c:	75 0a                	jne    c000a218 <sendKeyboardToken(KeyboardToken)+0x164>
c000a20e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a214:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21b:	0f b7 c0             	movzx  eax,ax
c000a21e:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a223:	75 0a                	jne    c000a22f <sendKeyboardToken(KeyboardToken)+0x17b>
c000a225:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a22b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a232:	0f b7 c0             	movzx  eax,ax
c000a235:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a23a:	75 0a                	jne    c000a246 <sendKeyboardToken(KeyboardToken)+0x192>
c000a23c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a242:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a249:	0f b7 c0             	movzx  eax,ax
c000a24c:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a251:	75 0a                	jne    c000a25d <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a253:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a259:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a260:	0f b7 c0             	movzx  eax,ax
c000a263:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a268:	75 0a                	jne    c000a274 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a26a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a270:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a277:	0f b7 c0             	movzx  eax,ax
c000a27a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a27f:	75 0a                	jne    c000a28b <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a281:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a28e:	0f b7 c0             	movzx  eax,ax
c000a291:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a296:	75 0a                	jne    c000a2a2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a298:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a29e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2a5:	0f b7 c0             	movzx  eax,ax
c000a2a8:	3d 20 03 00 00       	cmp    eax,0x320
c000a2ad:	75 0a                	jne    c000a2b9 <sendKeyboardToken(KeyboardToken)+0x205>
c000a2af:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a2b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2bc:	0f b7 c0             	movzx  eax,ax
c000a2bf:	3d 21 03 00 00       	cmp    eax,0x321
c000a2c4:	75 0a                	jne    c000a2d0 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a2c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a2cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a2d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2d3:	0f b7 c0             	movzx  eax,ax
c000a2d6:	3d 00 02 00 00       	cmp    eax,0x200
c000a2db:	75 2f                	jne    c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2dd:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2e2:	83 f0 01             	xor    eax,0x1
c000a2e5:	0f b6 c0             	movzx  eax,al
c000a2e8:	85 c0                	test   eax,eax
c000a2ea:	74 20                	je     c000a30c <sendKeyboardToken(KeyboardToken)+0x258>
c000a2ec:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a2f1:	6a 01                	push   0x1
c000a2f3:	6a 00                	push   0x0
c000a2f5:	68 14 9f 00 c0       	push   0xc0009f14
c000a2fa:	50                   	push   eax
c000a2fb:	e8 60 c8 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a30a:	eb 3a                	jmp    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a30f:	0f b7 c0             	movzx  eax,ax
c000a312:	3d 01 02 00 00       	cmp    eax,0x201
c000a317:	75 2d                	jne    c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a319:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a31e:	83 f0 01             	xor    eax,0x1
c000a321:	0f b6 c0             	movzx  eax,al
c000a324:	85 c0                	test   eax,eax
c000a326:	74 1e                	je     c000a346 <sendKeyboardToken(KeyboardToken)+0x292>
c000a328:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000a32d:	6a 01                	push   0x1
c000a32f:	6a 00                	push   0x0
c000a331:	68 79 9f 00 c0       	push   0xc0009f79
c000a336:	50                   	push   eax
c000a337:	e8 24 c8 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c000a33c:	83 c4 10             	add    esp,0x10
c000a33f:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a349:	0f b7 c0             	movzx  eax,ax
c000a34c:	3d 25 03 00 00       	cmp    eax,0x325
c000a351:	75 06                	jne    c000a359 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a353:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a35c:	0f b7 c0             	movzx  eax,ax
c000a35f:	3d 24 03 00 00       	cmp    eax,0x324
c000a364:	75 06                	jne    c000a36c <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a366:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a36f:	0f b7 c0             	movzx  eax,ax
c000a372:	3d 23 03 00 00       	cmp    eax,0x323
c000a377:	75 06                	jne    c000a37f <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a379:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a382:	0f b7 c0             	movzx  eax,ax
c000a385:	3d 26 03 00 00       	cmp    eax,0x326
c000a38a:	75 06                	jne    c000a392 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a38c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a395:	0f b7 c0             	movzx  eax,ax
c000a398:	3d 27 03 00 00       	cmp    eax,0x327
c000a39d:	75 06                	jne    c000a3a5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a39f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a8:	0f b7 c0             	movzx  eax,ax
c000a3ab:	3d 22 03 00 00       	cmp    eax,0x322
c000a3b0:	75 06                	jne    c000a3b8 <sendKeyboardToken(KeyboardToken)+0x304>
c000a3b2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a3b8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a3bc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3bf:	83 f0 01             	xor    eax,0x1
c000a3c2:	0f b6 c0             	movzx  eax,al
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 7c                	je     c000a445 <sendKeyboardToken(KeyboardToken)+0x391>
c000a3c9:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	85 c0                	test   eax,eax
c000a3d3:	74 43                	je     c000a418 <sendKeyboardToken(KeyboardToken)+0x364>
c000a3d5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	74 2b                	je     c000a40c <sendKeyboardToken(KeyboardToken)+0x358>
c000a3e1:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a3e7:	89 d0                	mov    eax,edx
c000a3e9:	c1 e0 02             	shl    eax,0x2
c000a3ec:	01 d0                	add    eax,edx
c000a3ee:	01 c0                	add    eax,eax
c000a3f0:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f8:	0f b7 c0             	movzx  eax,ax
c000a3fb:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3fe:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a403:	01 d0                	add    eax,edx
c000a405:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a40a:	eb 71                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a40c:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a416:	eb 65                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a418:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a41d:	85 c0                	test   eax,eax
c000a41f:	74 18                	je     c000a439 <sendKeyboardToken(KeyboardToken)+0x385>
c000a421:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a426:	0f b6 c0             	movzx  eax,al
c000a429:	83 ec 0c             	sub    esp,0xc
c000a42c:	50                   	push   eax
c000a42d:	e8 ac fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a432:	83 c4 10             	add    esp,0x10
c000a435:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a439:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a443:	eb 38                	jmp    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a448:	0f b7 c0             	movzx  eax,ax
c000a44b:	3d 01 01 00 00       	cmp    eax,0x101
c000a450:	75 2b                	jne    c000a47d <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a452:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a457:	85 c0                	test   eax,eax
c000a459:	74 18                	je     c000a473 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a45b:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a460:	0f b6 c0             	movzx  eax,al
c000a463:	83 ec 0c             	sub    esp,0xc
c000a466:	50                   	push   eax
c000a467:	e8 72 fb ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a46c:	83 c4 10             	add    esp,0x10
c000a46f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a473:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a47d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a480:	83 f0 01             	xor    eax,0x1
c000a483:	0f b6 c0             	movzx  eax,al
c000a486:	85 c0                	test   eax,eax
c000a488:	74 5a                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a48a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a48d:	83 f0 01             	xor    eax,0x1
c000a490:	0f b6 c0             	movzx  eax,al
c000a493:	85 c0                	test   eax,eax
c000a495:	74 4d                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a497:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 3e                	je     c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4a9:	0f b7 c0             	movzx  eax,ax
c000a4ac:	83 f8 1f             	cmp    eax,0x1f
c000a4af:	76 0b                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x408>
c000a4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b4:	0f b7 c0             	movzx  eax,ax
c000a4b7:	83 f8 7e             	cmp    eax,0x7e
c000a4ba:	76 16                	jbe    c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	83 f8 0a             	cmp    eax,0xa
c000a4c5:	74 0b                	je     c000a4d2 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a4c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4ca:	0f b7 c0             	movzx  eax,ax
c000a4cd:	83 f8 08             	cmp    eax,0x8
c000a4d0:	75 12                	jne    c000a4e4 <sendKeyboardToken(KeyboardToken)+0x430>
c000a4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d5:	0f b6 c0             	movzx  eax,al
c000a4d8:	83 ec 0c             	sub    esp,0xc
c000a4db:	50                   	push   eax
c000a4dc:	e8 fd fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a4e1:	83 c4 10             	add    esp,0x10
c000a4e4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a4e7:	83 f0 01             	xor    eax,0x1
c000a4ea:	0f b6 c0             	movzx  eax,al
c000a4ed:	85 c0                	test   eax,eax
c000a4ef:	74 5d                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4f1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4f4:	83 f0 01             	xor    eax,0x1
c000a4f7:	0f b6 c0             	movzx  eax,al
c000a4fa:	85 c0                	test   eax,eax
c000a4fc:	74 50                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4fe:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a503:	0f b6 c0             	movzx  eax,al
c000a506:	85 c0                	test   eax,eax
c000a508:	74 44                	je     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a50a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a50d:	0f b7 c0             	movzx  eax,ax
c000a510:	83 f8 3f             	cmp    eax,0x3f
c000a513:	76 39                	jbe    c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a518:	0f b7 c0             	movzx  eax,ax
c000a51b:	83 f8 7f             	cmp    eax,0x7f
c000a51e:	77 2e                	ja     c000a54e <sendKeyboardToken(KeyboardToken)+0x49a>
c000a520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a528:	0f b7 c0             	movzx  eax,ax
c000a52b:	83 f8 5f             	cmp    eax,0x5f
c000a52e:	76 04                	jbe    c000a534 <sendKeyboardToken(KeyboardToken)+0x480>
c000a530:	b0 20                	mov    al,0x20
c000a532:	eb 02                	jmp    c000a536 <sendKeyboardToken(KeyboardToken)+0x482>
c000a534:	b0 00                	mov    al,0x0
c000a536:	89 d1                	mov    ecx,edx
c000a538:	29 c1                	sub    ecx,eax
c000a53a:	89 c8                	mov    eax,ecx
c000a53c:	83 e8 40             	sub    eax,0x40
c000a53f:	0f b6 c0             	movzx  eax,al
c000a542:	83 ec 0c             	sub    esp,0xc
c000a545:	50                   	push   eax
c000a546:	e8 93 fa ff ff       	call   c0009fde <sendKeyToTerminal(unsigned char)>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a551:	0f b7 c0             	movzx  eax,ax
c000a554:	3d 00 03 00 00       	cmp    eax,0x300
c000a559:	75 12                	jne    c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a55b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a55e:	83 f0 01             	xor    eax,0x1
c000a561:	0f b6 c0             	movzx  eax,al
c000a564:	85 c0                	test   eax,eax
c000a566:	74 05                	je     c000a56d <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a568:	e8 e0 7b 00 00       	call   c001214d <doTerminalCycle()>
c000a56d:	90                   	nop
c000a56e:	c9                   	leave  
c000a56f:	c3                   	ret    

c000a570 <clearInternalKeybuffer(VgaText*)>:
c000a570:	55                   	push   ebp
c000a571:	89 e5                	mov    ebp,esp
c000a573:	83 ec 08             	sub    esp,0x8
c000a576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a579:	05 02 01 00 00       	add    eax,0x102
c000a57e:	83 ec 0c             	sub    esp,0xc
c000a581:	50                   	push   eax
c000a582:	e8 e9 5f ff ff       	call   c0000570 <strlen>
c000a587:	83 c4 10             	add    esp,0x10
c000a58a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a58d:	81 c2 02 01 00 00    	add    edx,0x102
c000a593:	83 ec 04             	sub    esp,0x4
c000a596:	50                   	push   eax
c000a597:	6a 00                	push   0x0
c000a599:	52                   	push   edx
c000a59a:	e8 51 5f ff ff       	call   c00004f0 <memset>
c000a59f:	83 c4 10             	add    esp,0x10
c000a5a2:	90                   	nop
c000a5a3:	c9                   	leave  
c000a5a4:	c3                   	ret    

c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a5a5:	55                   	push   ebp
c000a5a6:	89 e5                	mov    ebp,esp
c000a5a8:	83 ec 18             	sub    esp,0x18
c000a5ab:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a5b0:	85 c0                	test   eax,eax
c000a5b2:	74 2a                	je     c000a5de <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a5b4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a5ba:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a5c0:	83 ec 04             	sub    esp,0x4
c000a5c3:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a5c8:	83 ec 08             	sub    esp,0x8
c000a5cb:	89 e2                	mov    edx,esp
c000a5cd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a5d0:	89 02                	mov    DWORD PTR [edx],eax
c000a5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a5d5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a5d9:	ff d1                	call   ecx
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	fb                   	sti    
c000a5df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a5e6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a5ea:	0f 84 08 01 00 00    	je     c000a6f8 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5f3:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5f9:	0f be c0             	movsx  eax,al
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	75 27                	jne    c000a627 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a600:	fa                   	cli    
c000a601:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a606:	83 c0 01             	add    eax,0x1
c000a609:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000a60e:	e8 0d c8 00 00       	call   c0016e20 <schedule()>
c000a613:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000a61b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000a620:	85 c0                	test   eax,eax
c000a622:	75 cc                	jne    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a624:	fb                   	sti    
c000a625:	eb c9                	jmp    c000a5f0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a627:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a62a:	8d 50 01             	lea    edx,[eax+0x1]
c000a62d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a633:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a639:	88 10                	mov    BYTE PTR [eax],dl
c000a63b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a63e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a644:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a647:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64b:	83 f8 03             	cmp    eax,0x3
c000a64e:	75 1e                	jne    c000a66e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a650:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a655:	8b 00                	mov    eax,DWORD PTR [eax]
c000a657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a65a:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a660:	83 ec 08             	sub    esp,0x8
c000a663:	6a 02                	push   0x2
c000a665:	50                   	push   eax
c000a666:	e8 50 69 00 00       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a66b:	83 c4 10             	add    esp,0x10
c000a66e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a672:	83 f8 1c             	cmp    eax,0x1c
c000a675:	75 1e                	jne    c000a695 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a677:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a67c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a67e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a681:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	6a 09                	push   0x9
c000a68c:	50                   	push   eax
c000a68d:	e8 29 69 00 00       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a698:	05 02 01 00 00       	add    eax,0x102
c000a69d:	83 ec 0c             	sub    esp,0xc
c000a6a0:	50                   	push   eax
c000a6a1:	e8 ca 5e ff ff       	call   c0000570 <strlen>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6ac:	81 c2 02 01 00 00    	add    edx,0x102
c000a6b2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a6b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a6b8:	81 c2 02 01 00 00    	add    edx,0x102
c000a6be:	83 ec 04             	sub    esp,0x4
c000a6c1:	50                   	push   eax
c000a6c2:	51                   	push   ecx
c000a6c3:	52                   	push   edx
c000a6c4:	e8 07 5d ff ff       	call   c00003d0 <memmove>
c000a6c9:	83 c4 10             	add    esp,0x10
c000a6cc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a6d0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a6d4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6d8:	83 f8 0a             	cmp    eax,0xa
c000a6db:	74 16                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6dd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6e1:	83 f8 03             	cmp    eax,0x3
c000a6e4:	74 0d                	je     c000a6f3 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a6e6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a6ea:	83 f8 1c             	cmp    eax,0x1c
c000a6ed:	0f 85 f3 fe ff ff    	jne    c000a5e6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a6f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6f6:	eb 03                	jmp    c000a6fb <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6fb:	c9                   	leave  
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <Keyboard::Keyboard(char const*)>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a705:	83 ec 08             	sub    esp,0x8
c000a708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70c:	50                   	push   eax
c000a70d:	e8 a4 f4 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a712:	83 c4 10             	add    esp,0x10
c000a715:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000a71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a71e:	89 10                	mov    DWORD PTR [eax],edx
c000a720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a724:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a72e:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a735:	90                   	nop
c000a736:	83 c4 0c             	add    esp,0xc
c000a739:	c3                   	ret    

c000a73a <Keyboard::~Keyboard()>:
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	89 10                	mov    DWORD PTR [eax],edx
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	50                   	push   eax
c000a750:	e8 01 f2 ff ff       	call   c0009956 <Device::~Device()>
c000a755:	83 c4 10             	add    esp,0x10
c000a758:	90                   	nop
c000a759:	83 c4 0c             	add    esp,0xc
c000a75c:	c3                   	ret    
c000a75d:	90                   	nop

c000a75e <Keyboard::~Keyboard()>:
c000a75e:	83 ec 0c             	sub    esp,0xc
c000a761:	83 ec 0c             	sub    esp,0xc
c000a764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a768:	e8 cd ff ff ff       	call   c000a73a <Keyboard::~Keyboard()>
c000a76d:	83 c4 10             	add    esp,0x10
c000a770:	83 ec 08             	sub    esp,0x8
c000a773:	68 5c 01 00 00       	push   0x15c
c000a778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a77c:	e8 2f 2c 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	83 c4 0c             	add    esp,0xc
c000a787:	c3                   	ret    

c000a788 <LogicalDisk::close(int, int, void*)>:
c000a788:	83 c8 ff             	or     eax,0xffffffff
c000a78b:	c3                   	ret    

c000a78c <LogicalDisk::~LogicalDisk()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 af f1 ff ff       	call   c0009956 <Device::~Device()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <LogicalDisk::~LogicalDisk()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <LogicalDisk::~LogicalDisk()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 78 01 00 00       	push   0x178
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 dd 2b 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <LogicalDisk::open(int, int, void*)>:
c000a7da:	83 ec 18             	sub    esp,0x18
c000a7dd:	68 cc 37 02 c0       	push   0xc00237cc
c000a7e2:	e8 0d 55 00 00       	call   c000fcf4 <KePanic(char const*)>
c000a7e7:	83 c8 ff             	or     eax,0xffffffff
c000a7ea:	83 c4 1c             	add    esp,0x1c
c000a7ed:	c3                   	ret    

c000a7ee <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a7ee:	53                   	push   ebx
c000a7ef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a7f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a7f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7fb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a801:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a807:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a80d:	77 10                	ja     c000a81f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a80f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a815:	89 d3                	mov    ebx,edx
c000a817:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a81d:	72 05                	jb     c000a824 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a81f:	83 c8 ff             	or     eax,0xffffffff
c000a822:	89 c2                	mov    edx,eax
c000a824:	5b                   	pop    ebx
c000a825:	c3                   	ret    

c000a826 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a826:	56                   	push   esi
c000a827:	83 c8 ff             	or     eax,0xffffffff
c000a82a:	53                   	push   ebx
c000a82b:	89 c2                	mov    edx,eax
c000a82d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a831:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a835:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a839:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a83f:	77 27                	ja     c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a841:	89 d8                	mov    eax,ebx
c000a843:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a849:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a84f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a854:	89 c2                	mov    edx,eax
c000a856:	73 10                	jae    c000a868 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a858:	89 c8                	mov    eax,ecx
c000a85a:	89 da                	mov    edx,ebx
c000a85c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a862:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a868:	5b                   	pop    ebx
c000a869:	5e                   	pop    esi
c000a86a:	c3                   	ret    
c000a86b:	90                   	nop

c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a86c:	83 ec 1c             	sub    esp,0x1c
c000a86f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a87f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a883:	89 04 24             	mov    DWORD PTR [esp],eax
c000a886:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a892:	83 ec 08             	sub    esp,0x8
c000a895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a899:	50                   	push   eax
c000a89a:	e8 17 f3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000a89f:	83 c4 10             	add    esp,0x10
c000a8a2:	ba 18 38 02 c0       	mov    edx,0xc0023818
c000a8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ab:	89 10                	mov    DWORD PTR [eax],edx
c000a8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8bc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a8dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a8e8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a8ee:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a8f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a905:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a913:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a927:	90                   	nop
c000a928:	83 c4 1c             	add    esp,0x1c
c000a92b:	c3                   	ret    

c000a92c <LogicalDisk::assignDriveLetter()>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 14             	sub    esp,0x14
c000a933:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a937:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a93d:	b0 41                	mov    al,0x41
c000a93f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a945:	84 d2                	test   dl,dl
c000a947:	75 02                	jne    c000a94b <LogicalDisk::assignDriveLetter()+0x1f>
c000a949:	b0 43                	mov    al,0x43
c000a94b:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a951:	0f b6 ca             	movzx  ecx,dl
c000a954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a958:	0f be e8             	movsx  ebp,al
c000a95b:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a961:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a965:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a969:	3c 43                	cmp    al,0x43
c000a96b:	75 10                	jne    c000a97d <LogicalDisk::assignDriveLetter()+0x51>
c000a96d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a974:	75 5a                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a976:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a97b:	75 53                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a97d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a980:	ba 01 00 00 00       	mov    edx,0x1
c000a985:	89 34 24             	mov    DWORD PTR [esp],esi
c000a988:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a98b:	d3 e2                	shl    edx,cl
c000a98d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a991:	89 d7                	mov    edi,edx
c000a993:	89 d6                	mov    esi,edx
c000a995:	c1 ff 1f             	sar    edi,0x1f
c000a998:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a99c:	21 f9                	and    ecx,edi
c000a99e:	09 d1                	or     ecx,edx
c000a9a0:	75 2e                	jne    c000a9d0 <LogicalDisk::assignDriveLetter()+0xa4>
c000a9a2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a9a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9aa:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a9b0:	09 f2                	or     edx,esi
c000a9b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a9b5:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a9bb:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a9c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9c6:	09 fa                	or     edx,edi
c000a9c8:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a9ce:	eb 0d                	jmp    c000a9dd <LogicalDisk::assignDriveLetter()+0xb1>
c000a9d0:	8d 50 01             	lea    edx,[eax+0x1]
c000a9d3:	45                   	inc    ebp
c000a9d4:	88 d0                	mov    al,dl
c000a9d6:	80 fa 5b             	cmp    dl,0x5b
c000a9d9:	75 8e                	jne    c000a969 <LogicalDisk::assignDriveLetter()+0x3d>
c000a9db:	31 c0                	xor    eax,eax
c000a9dd:	83 c4 14             	add    esp,0x14
c000a9e0:	5b                   	pop    ebx
c000a9e1:	5e                   	pop    esi
c000a9e2:	5f                   	pop    edi
c000a9e3:	5d                   	pop    ebp
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::mount()>:
c000a9e6:	56                   	push   esi
c000a9e7:	53                   	push   ebx
c000a9e8:	53                   	push   ebx
c000a9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a9ed:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a9f3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9fd:	85 db                	test   ebx,ebx
c000a9ff:	74 27                	je     c000aa28 <LogicalDisk::mount()+0x42>
c000aa01:	51                   	push   ecx
c000aa02:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000aa09:	8b 13                	mov    edx,DWORD PTR [ebx]
c000aa0b:	83 e8 41             	sub    eax,0x41
c000aa0e:	50                   	push   eax
c000aa0f:	56                   	push   esi
c000aa10:	53                   	push   ebx
c000aa11:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	84 c0                	test   al,al
c000aa19:	74 08                	je     c000aa23 <LogicalDisk::mount()+0x3d>
c000aa1b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000aa21:	eb 07                	jmp    c000aa2a <LogicalDisk::mount()+0x44>
c000aa23:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000aa26:	eb d5                	jmp    c000a9fd <LogicalDisk::mount()+0x17>
c000aa28:	31 c0                	xor    eax,eax
c000aa2a:	5a                   	pop    edx
c000aa2b:	5b                   	pop    ebx
c000aa2c:	5e                   	pop    esi
c000aa2d:	c3                   	ret    

c000aa2e <LogicalDisk::unmount()>:
c000aa2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa32:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000aa3c:	c3                   	ret    
c000aa3d:	90                   	nop

c000aa3e <LogicalDisk::eject()>:
c000aa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000aa48:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa4e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000aa51:	90                   	nop

c000aa52 <LogicalDisk::unassignDriveLetter()>:
c000aa52:	57                   	push   edi
c000aa53:	56                   	push   esi
c000aa54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa58:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa5f:	85 c9                	test   ecx,ecx
c000aa61:	75 0f                	jne    c000aa72 <LogicalDisk::unassignDriveLetter()+0x20>
c000aa63:	c7 44 24 0c f0 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc00237f0
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 82 52 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000aa72:	83 e9 41             	sub    ecx,0x41
c000aa75:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa7c:	b8 01 00 00 00       	mov    eax,0x1
c000aa81:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa8c:	d3 e0                	shl    eax,cl
c000aa8e:	89 c7                	mov    edi,eax
c000aa90:	f7 d0                	not    eax
c000aa92:	c1 ff 1f             	sar    edi,0x1f
c000aa95:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa9b:	89 fe                	mov    esi,edi
c000aa9d:	f7 d6                	not    esi
c000aa9f:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	c3                   	ret    

c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aaa8:	57                   	push   edi
c000aaa9:	56                   	push   esi
c000aaaa:	53                   	push   ebx
c000aaab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aaaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aac1:	77 41                	ja     c000ab04 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aac3:	99                   	cdq    
c000aac4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaca:	01 c8                	add    eax,ecx
c000aacc:	11 da                	adc    edx,ebx
c000aace:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aad4:	19 d7                	sbb    edi,edx
c000aad6:	72 33                	jb     c000ab0b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aad8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aade:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aae4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aae8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aaec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aaf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aafc:	5b                   	pop    ebx
c000aafd:	5e                   	pop    esi
c000aafe:	5f                   	pop    edi
c000aaff:	e9 a2 0b 00 00       	jmp    c000b6a6 <VCache::read(unsigned long long, int, void*)>
c000ab04:	b8 05 00 00 00       	mov    eax,0x5
c000ab09:	eb 05                	jmp    c000ab10 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ab0b:	b8 07 00 00 00       	mov    eax,0x7
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	c3                   	ret    

c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ab14:	57                   	push   edi
c000ab15:	56                   	push   esi
c000ab16:	53                   	push   ebx
c000ab17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab1f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab27:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ab2d:	77 41                	ja     c000ab70 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ab2f:	99                   	cdq    
c000ab30:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ab36:	01 c8                	add    eax,ecx
c000ab38:	11 da                	adc    edx,ebx
c000ab3a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ab40:	19 d7                	sbb    edi,edx
c000ab42:	72 33                	jb     c000ab77 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ab44:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ab4a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ab50:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ab54:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab58:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab68:	5b                   	pop    ebx
c000ab69:	5e                   	pop    esi
c000ab6a:	5f                   	pop    edi
c000ab6b:	e9 68 09 00 00       	jmp    c000b4d8 <VCache::write(unsigned long long, int, void*)>
c000ab70:	b8 05 00 00 00       	mov    eax,0x5
c000ab75:	eb 05                	jmp    c000ab7c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab77:	b8 07 00 00 00       	mov    eax,0x7
c000ab7c:	5b                   	pop    ebx
c000ab7d:	5e                   	pop    esi
c000ab7e:	5f                   	pop    edi
c000ab7f:	c3                   	ret    

c000ab80 <Mouse::Mouse(char const*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	50                   	push   eax
c000ab8f:	e8 22 f0 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	ba 44 38 02 c0       	mov    edx,0xc0023844
c000ab9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba0:	89 10                	mov    DWORD PTR [eax],edx
c000aba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000abb0:	90                   	nop
c000abb1:	83 c4 0c             	add    esp,0xc
c000abb4:	c3                   	ret    
c000abb5:	90                   	nop
c000abb6:	66 90                	xchg   ax,ax

c000abb8 <Mouse::~Mouse()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 44 38 02 c0       	mov    edx,0xc0023844
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 83 ed ff ff       	call   c0009956 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <Mouse::~Mouse()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <Mouse::~Mouse()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 b1 27 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <NIC::getMAC()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	31 d2                	xor    edx,edx
c000ac0a:	c3                   	ret    
c000ac0b:	90                   	nop

c000ac0c <NIC::write(int, unsigned char*, int*)>:
c000ac0c:	b8 01 00 00 00       	mov    eax,0x1
c000ac11:	c3                   	ret    

c000ac12 <NIC::NIC(char const*)>:
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac19:	83 ec 08             	sub    esp,0x8
c000ac1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac20:	50                   	push   eax
c000ac21:	e8 90 ef ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ac26:	83 c4 10             	add    esp,0x10
c000ac29:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac32:	89 10                	mov    DWORD PTR [eax],edx
c000ac34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac38:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ac42:	90                   	nop
c000ac43:	83 c4 0c             	add    esp,0xc
c000ac46:	c3                   	ret    
c000ac47:	90                   	nop

c000ac48 <NIC::~NIC()>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	ba 70 38 02 c0       	mov    edx,0xc0023870
c000ac50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac54:	89 10                	mov    DWORD PTR [eax],edx
c000ac56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac5a:	83 ec 0c             	sub    esp,0xc
c000ac5d:	50                   	push   eax
c000ac5e:	e8 f3 ec ff ff       	call   c0009956 <Device::~Device()>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	90                   	nop
c000ac67:	83 c4 0c             	add    esp,0xc
c000ac6a:	c3                   	ret    
c000ac6b:	90                   	nop

c000ac6c <NIC::~NIC()>:
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	83 ec 0c             	sub    esp,0xc
c000ac72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac76:	e8 cd ff ff ff       	call   c000ac48 <NIC::~NIC()>
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 ec 08             	sub    esp,0x8
c000ac81:	68 58 01 00 00       	push   0x158
c000ac86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8a:	e8 21 27 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000ac8f:	83 c4 10             	add    esp,0x10
c000ac92:	83 c4 0c             	add    esp,0xc
c000ac95:	c3                   	ret    

c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac96:	55                   	push   ebp
c000ac97:	57                   	push   edi
c000ac98:	56                   	push   esi
c000ac99:	53                   	push   ebx
c000ac9a:	81 ec 28 01 00 00    	sub    esp,0x128
c000aca0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000aca7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000acae:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000acb5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000acc0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000acc4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000accb:	e8 e2 ef ff ff       	call   c0009cb2 <Device::getName()>
c000acd0:	5a                   	pop    edx
c000acd1:	59                   	pop    ecx
c000acd2:	50                   	push   eax
c000acd3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000acd7:	55                   	push   ebp
c000acd8:	e8 63 59 ff ff       	call   c0000640 <strcpy>
c000acdd:	5b                   	pop    ebx
c000acde:	58                   	pop    eax
c000acdf:	68 9c 38 02 c0       	push   0xc002389c
c000ace4:	55                   	push   ebp
c000ace5:	e8 56 5b ff ff       	call   c0000840 <strcat>
c000acea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000acf1:	e8 a1 4b 00 00       	call   c000f897 <malloc>
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	89 c3                	mov    ebx,eax
c000acfb:	57                   	push   edi
c000acfc:	56                   	push   esi
c000acfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad05:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ad0c:	55                   	push   ebp
c000ad0d:	50                   	push   eax
c000ad0e:	e8 59 fb ff ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ad13:	83 c4 14             	add    esp,0x14
c000ad16:	53                   	push   ebx
c000ad17:	e8 10 fc ff ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c000ad1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad1f:	e8 c2 fc ff ff       	call   c000a9e6 <LogicalDisk::mount()>
c000ad24:	58                   	pop    eax
c000ad25:	5a                   	pop    edx
c000ad26:	53                   	push   ebx
c000ad27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ad2e:	e8 21 ed ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000ad33:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ad39:	5b                   	pop    ebx
c000ad3a:	5e                   	pop    esi
c000ad3b:	5f                   	pop    edi
c000ad3c:	5d                   	pop    ebp
c000ad3d:	c3                   	ret    

c000ad3e <createPartitionsForDisk(PhysicalDisk*)>:
c000ad3e:	55                   	push   ebp
c000ad3f:	57                   	push   edi
c000ad40:	56                   	push   esi
c000ad41:	53                   	push   ebx
c000ad42:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ad48:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ad4f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ad55:	3d 00 02 00 00       	cmp    eax,0x200
c000ad5a:	74 27                	je     c000ad83 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad5c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad62:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad6f:	99                   	cdq    
c000ad70:	c1 e6 0a             	shl    esi,0xa
c000ad73:	52                   	push   edx
c000ad74:	89 fd                	mov    ebp,edi
c000ad76:	50                   	push   eax
c000ad77:	55                   	push   ebp
c000ad78:	56                   	push   esi
c000ad79:	e8 86 6c 01 00       	call   c0021a04 <__udivdi3>
c000ad7e:	e9 b9 00 00 00       	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad83:	83 ec 0c             	sub    esp,0xc
c000ad86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad88:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad8c:	56                   	push   esi
c000ad8d:	6a 01                	push   0x1
c000ad8f:	6a 00                	push   0x0
c000ad91:	6a 00                	push   0x0
c000ad93:	53                   	push   ebx
c000ad94:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ada2:	75 0a                	jne    c000adae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ada4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000adac:	74 2c                	je     c000adda <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000adae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adb4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adc0:	83 ec 10             	sub    esp,0x10
c000adc3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000adc7:	89 f7                	mov    edi,esi
c000adc9:	c1 e0 0a             	shl    eax,0xa
c000adcc:	c1 ff 1f             	sar    edi,0x1f
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	52                   	push   edx
c000add2:	50                   	push   eax
c000add3:	e8 2c 6c 01 00       	call   c0021a04 <__udivdi3>
c000add8:	eb 62                	jmp    c000ae3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000adda:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ade1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ade8:	89 cf                	mov    edi,ecx
c000adea:	83 e2 7f             	and    edx,0x7f
c000aded:	83 e7 7f             	and    edi,0x7f
c000adf0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000adf7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000adfa:	83 e0 7f             	and    eax,0x7f
c000adfd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ae00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ae07:	83 e0 7f             	and    eax,0x7f
c000ae0a:	01 d0                	add    eax,edx
c000ae0c:	89 c5                	mov    ebp,eax
c000ae0e:	84 c0                	test   al,al
c000ae10:	74 41                	je     c000ae53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ae12:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae18:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae24:	83 ec 10             	sub    esp,0x10
c000ae27:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae2b:	89 f7                	mov    edi,esi
c000ae2d:	c1 e0 0a             	shl    eax,0xa
c000ae30:	c1 ff 1f             	sar    edi,0x1f
c000ae33:	57                   	push   edi
c000ae34:	56                   	push   esi
c000ae35:	52                   	push   edx
c000ae36:	50                   	push   eax
c000ae37:	e8 c8 6b 01 00       	call   c0021a04 <__udivdi3>
c000ae3c:	83 c4 14             	add    esp,0x14
c000ae3f:	52                   	push   edx
c000ae40:	50                   	push   eax
c000ae41:	6a 00                	push   0x0
c000ae43:	6a 00                	push   0x0
c000ae45:	53                   	push   ebx
c000ae46:	e8 4b fe ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ae4b:	83 c4 20             	add    esp,0x20
c000ae4e:	e9 73 01 00 00       	jmp    c000afc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ae53:	89 f0                	mov    eax,esi
c000ae55:	31 c9                	xor    ecx,ecx
c000ae57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae5e:	75 02                	jne    c000ae62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae60:	89 cd                	mov    ebp,ecx
c000ae62:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae69:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae70:	c1 e2 08             	shl    edx,0x8
c000ae73:	c1 e6 10             	shl    esi,0x10
c000ae76:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae7e:	09 f2                	or     edx,esi
c000ae80:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae88:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae8f:	83 c0 10             	add    eax,0x10
c000ae92:	09 f2                	or     edx,esi
c000ae94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae9b:	c1 e6 18             	shl    esi,0x18
c000ae9e:	09 f2                	or     edx,esi
c000aea0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000aea7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000aeab:	c1 e6 10             	shl    esi,0x10
c000aeae:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000aeb5:	c1 e2 08             	shl    edx,0x8
c000aeb8:	09 f2                	or     edx,esi
c000aeba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000aec1:	09 f2                	or     edx,esi
c000aec3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000aeca:	c1 e6 18             	shl    esi,0x18
c000aecd:	09 f2                	or     edx,esi
c000aecf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000aed3:	41                   	inc    ecx
c000aed4:	83 f9 04             	cmp    ecx,0x4
c000aed7:	0f 85 7a ff ff ff    	jne    c000ae57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	83 f0 01             	xor    eax,0x1
c000aee4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000aee8:	75 4f                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	83 f0 01             	xor    eax,0x1
c000aef1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000aef5:	75 42                	jne    c000af39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000aef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aeff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000af07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000af0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000af13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000af19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000af1d:	89 f7                	mov    edi,esi
c000af1f:	c1 e0 0a             	shl    eax,0xa
c000af22:	c1 ff 1f             	sar    edi,0x1f
c000af25:	57                   	push   edi
c000af26:	56                   	push   esi
c000af27:	52                   	push   edx
c000af28:	50                   	push   eax
c000af29:	e8 d6 6a 01 00       	call   c0021a04 <__udivdi3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000af35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000af39:	89 e8                	mov    eax,ebp
c000af3b:	0f b6 e8             	movzx  ebp,al
c000af3e:	85 ed                	test   ebp,ebp
c000af40:	74 50                	je     c000af92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000af42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000af4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000af52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af5a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af66:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af6e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af72:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af7a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af92:	31 ed                	xor    ebp,ebp
c000af94:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af98:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af9c:	89 f8                	mov    eax,edi
c000af9e:	09 f0                	or     eax,esi
c000afa0:	74 1e                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afa2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000afa6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000afaa:	89 d1                	mov    ecx,edx
c000afac:	09 c1                	or     ecx,eax
c000afae:	74 10                	je     c000afc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000afb0:	83 ec 0c             	sub    esp,0xc
c000afb3:	57                   	push   edi
c000afb4:	56                   	push   esi
c000afb5:	52                   	push   edx
c000afb6:	50                   	push   eax
c000afb7:	53                   	push   ebx
c000afb8:	e8 d9 fc ff ff       	call   c000ac96 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000afbd:	83 c4 20             	add    esp,0x20
c000afc0:	45                   	inc    ebp
c000afc1:	83 fd 04             	cmp    ebp,0x4
c000afc4:	75 ce                	jne    c000af94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000afc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000afcc:	5b                   	pop    ebx
c000afcd:	5e                   	pop    esi
c000afce:	5f                   	pop    edi
c000afcf:	5d                   	pop    ebp
c000afd0:	c3                   	ret    
c000afd1:	66 90                	xchg   ax,ax
c000afd3:	90                   	nop

c000afd4 <Serial::Serial(char const*)>:
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afdb:	83 ec 08             	sub    esp,0x8
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	50                   	push   eax
c000afe3:	e8 ce eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000afe8:	83 c4 10             	add    esp,0x10
c000afeb:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000aff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff4:	89 10                	mov    DWORD PTR [eax],edx
c000aff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000b004:	90                   	nop
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop
c000b00a:	66 90                	xchg   ax,ax

c000b00c <Serial::~Serial()>:
c000b00c:	83 ec 0c             	sub    esp,0xc
c000b00f:	ba b0 38 02 c0       	mov    edx,0xc00238b0
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	50                   	push   eax
c000b022:	e8 2f e9 ff ff       	call   c0009956 <Device::~Device()>
c000b027:	83 c4 10             	add    esp,0x10
c000b02a:	90                   	nop
c000b02b:	83 c4 0c             	add    esp,0xc
c000b02e:	c3                   	ret    
c000b02f:	90                   	nop

c000b030 <Serial::~Serial()>:
c000b030:	83 ec 0c             	sub    esp,0xc
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03a:	e8 cd ff ff ff       	call   c000b00c <Serial::~Serial()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 ec 08             	sub    esp,0x8
c000b045:	68 58 01 00 00       	push   0x158
c000b04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b04e:	e8 5d 23 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b053:	83 c4 10             	add    esp,0x10
c000b056:	83 c4 0c             	add    esp,0xc
c000b059:	c3                   	ret    
c000b05a:	66 90                	xchg   ax,ax

c000b05c <Timer::Timer(char const*)>:
c000b05c:	83 ec 0c             	sub    esp,0xc
c000b05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b063:	83 ec 08             	sub    esp,0x8
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	50                   	push   eax
c000b06b:	e8 46 eb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000b078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07c:	89 10                	mov    DWORD PTR [eax],edx
c000b07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b082:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b08c:	90                   	nop
c000b08d:	83 c4 0c             	add    esp,0xc
c000b090:	c3                   	ret    
c000b091:	90                   	nop
c000b092:	66 90                	xchg   ax,ax

c000b094 <Timer::~Timer()>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000b09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a0:	89 10                	mov    DWORD PTR [eax],edx
c000b0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	50                   	push   eax
c000b0aa:	e8 a7 e8 ff ff       	call   c0009956 <Device::~Device()>
c000b0af:	83 c4 10             	add    esp,0x10
c000b0b2:	90                   	nop
c000b0b3:	83 c4 0c             	add    esp,0xc
c000b0b6:	c3                   	ret    
c000b0b7:	90                   	nop

c000b0b8 <Timer::~Timer()>:
c000b0b8:	83 ec 0c             	sub    esp,0xc
c000b0bb:	83 ec 0c             	sub    esp,0xc
c000b0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0c2:	e8 cd ff ff ff       	call   c000b094 <Timer::~Timer()>
c000b0c7:	83 c4 10             	add    esp,0x10
c000b0ca:	83 ec 08             	sub    esp,0x8
c000b0cd:	68 5c 01 00 00       	push   0x15c
c000b0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d6:	e8 d5 22 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 c4 0c             	add    esp,0xc
c000b0e1:	c3                   	ret    

c000b0e2 <Timer::read()>:
c000b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0ec:	c3                   	ret    

c000b0ed <setupTimer(int)>:
c000b0ed:	53                   	push   ebx
c000b0ee:	83 ec 14             	sub    esp,0x14
c000b0f1:	68 5c 01 00 00       	push   0x15c
c000b0f6:	e8 9c 47 00 00       	call   c000f897 <malloc>
c000b0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0fe:	89 c3                	mov    ebx,eax
c000b100:	e8 b7 61 01 00       	call   c00212bc <PIT::PIT()>
c000b105:	58                   	pop    eax
c000b106:	5a                   	pop    edx
c000b107:	53                   	push   ebx
c000b108:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c000b10e:	e8 41 e9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000b113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b115:	6a 00                	push   0x0
c000b117:	6a 00                	push   0x0
c000b119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b11d:	53                   	push   ebx
c000b11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b121:	89 d8                	mov    eax,ebx
c000b123:	83 c4 28             	add    esp,0x28
c000b126:	5b                   	pop    ebx
c000b127:	c3                   	ret    

c000b128 <timerHandler(unsigned int)>:
c000b128:	57                   	push   edi
c000b129:	31 d2                	xor    edx,edx
c000b12b:	56                   	push   esi
c000b12c:	53                   	push   ebx
c000b12d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b131:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b137:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b13d:	80 3d 0d c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10d,0x0
c000b144:	75 12                	jne    c000b158 <timerHandler(unsigned int)+0x30>
c000b146:	c7 44 24 10 3f 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc002393f
c000b14e:	5b                   	pop    ebx
c000b14f:	5e                   	pop    esi
c000b150:	5f                   	pop    edi
c000b151:	e9 26 be ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c000b156:	66 90                	xchg   ax,ax
c000b158:	fa                   	cli    
c000b159:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	68 80 ca 02 c0       	push   0xc002ca80
c000b167:	e8 30 6c 01 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	84 c0                	test   al,al
c000b171:	0f 85 a9 00 00 00    	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b177:	83 ec 0c             	sub    esp,0xc
c000b17a:	68 80 ca 02 c0       	push   0xc002ca80
c000b17f:	e8 34 6c 01 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b184:	83 c4 10             	add    esp,0x10
c000b187:	89 c6                	mov    esi,eax
c000b189:	8d 76 00             	lea    esi,[esi+0x0]
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 80 ca 02 c0       	push   0xc002ca80
c000b194:	e8 1f 6c 01 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b199:	c7 04 24 80 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca80
c000b1a0:	89 c7                	mov    edi,eax
c000b1a2:	e8 19 6c 01 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b1a7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b1b0:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b1b6:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b1bb:	19 c8                	sbb    eax,ecx
c000b1bd:	72 21                	jb     c000b1e0 <timerHandler(unsigned int)+0xb8>
c000b1bf:	83 ec 0c             	sub    esp,0xc
c000b1c2:	57                   	push   edi
c000b1c3:	e8 b4 bf 00 00       	call   c001717c <unblockTask(ThreadControlBlock*)>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	39 fe                	cmp    esi,edi
c000b1cd:	75 25                	jne    c000b1f4 <timerHandler(unsigned int)+0xcc>
c000b1cf:	83 ec 0c             	sub    esp,0xc
c000b1d2:	68 80 ca 02 c0       	push   0xc002ca80
c000b1d7:	e8 dc 6b 01 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1dc:	89 c6                	mov    esi,eax
c000b1de:	eb 10                	jmp    c000b1f0 <timerHandler(unsigned int)+0xc8>
c000b1e0:	51                   	push   ecx
c000b1e1:	51                   	push   ecx
c000b1e2:	57                   	push   edi
c000b1e3:	68 80 ca 02 c0       	push   0xc002ca80
c000b1e8:	e8 8f 6c 01 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	90                   	nop
c000b1f4:	83 ec 0c             	sub    esp,0xc
c000b1f7:	68 80 ca 02 c0       	push   0xc002ca80
c000b1fc:	e8 9b 6b 01 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	84 c0                	test   al,al
c000b206:	75 18                	jne    c000b220 <timerHandler(unsigned int)+0xf8>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	68 80 ca 02 c0       	push   0xc002ca80
c000b210:	e8 a3 6b 01 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	39 f0                	cmp    eax,esi
c000b21a:	0f 85 6c ff ff ff    	jne    c000b18c <timerHandler(unsigned int)+0x64>
c000b220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b225:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b228:	85 c0                	test   eax,eax
c000b22a:	74 48                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b22c:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c000b233:	74 3f                	je     c000b274 <timerHandler(unsigned int)+0x14c>
c000b235:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b23a:	76 1c                	jbe    c000b258 <timerHandler(unsigned int)+0x130>
c000b23c:	52                   	push   edx
c000b23d:	52                   	push   edx
c000b23e:	50                   	push   eax
c000b23f:	68 55 39 02 c0       	push   0xc0023955
c000b244:	e8 33 bd ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b24e:	83 c4 10             	add    esp,0x10
c000b251:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b25e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b261:	89 c1                	mov    ecx,eax
c000b263:	29 d9                	sub    ecx,ebx
c000b265:	39 d8                	cmp    eax,ebx
c000b267:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b26a:	77 08                	ja     c000b274 <timerHandler(unsigned int)+0x14c>
c000b26c:	e8 af bb 00 00       	call   c0016e20 <schedule()>
c000b271:	8d 76 00             	lea    esi,[esi+0x0]
c000b274:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000b27b:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000b282:	75 04                	jne    c000b288 <timerHandler(unsigned int)+0x160>
c000b284:	fb                   	sti    
c000b285:	8d 76 00             	lea    esi,[esi+0x0]
c000b288:	5b                   	pop    ebx
c000b289:	5e                   	pop    esi
c000b28a:	5f                   	pop    edi
c000b28b:	c3                   	ret    

c000b28c <VCache::VCache(PhysicalDisk*)>:
c000b28c:	53                   	push   ebx
c000b28d:	83 ec 18             	sub    esp,0x18
c000b290:	ba 00 3a 02 c0       	mov    edx,0xc0023a00
c000b295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b299:	89 10                	mov    DWORD PTR [eax],edx
c000b29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b32c:	e8 66 45 00 00       	call   c000f897 <malloc>
c000b331:	83 c4 10             	add    esp,0x10
c000b334:	89 c3                	mov    ebx,eax
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	53                   	push   ebx
c000b33a:	e8 95 49 00 00       	call   c000fcd4 <Mutex::Mutex()>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b39c:	05 00 01 00 00       	add    eax,0x100
c000b3a1:	c1 e0 04             	shl    eax,0x4
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 ea 44 00 00       	call   c000f897 <malloc>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	89 c2                	mov    edx,eax
c000b3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3bd:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3d6:	89 d0                	mov    eax,edx
c000b3d8:	c1 e0 02             	shl    eax,0x2
c000b3db:	01 d0                	add    eax,edx
c000b3dd:	c1 e0 04             	shl    eax,0x4
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	50                   	push   eax
c000b3e4:	e8 ae 44 00 00       	call   c000f897 <malloc>
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	89 c2                	mov    edx,eax
c000b3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3f5:	90                   	nop
c000b3f6:	83 c4 18             	add    esp,0x18
c000b3f9:	5b                   	pop    ebx
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <VCache::invalidateReadBuffer()>:
c000b3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b40a:	c3                   	ret    
c000b40b:	90                   	nop

c000b40c <VCache::writeWriteBuffer()>:
c000b40c:	53                   	push   ebx
c000b40d:	83 ec 08             	sub    esp,0x8
c000b410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b418:	74 1e                	je     c000b438 <VCache::writeWriteBuffer()+0x2c>
c000b41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b41d:	83 ec 0c             	sub    esp,0xc
c000b420:	8b 10                	mov    edx,DWORD PTR [eax]
c000b422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b42e:	50                   	push   eax
c000b42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b432:	83 c4 20             	add    esp,0x20
c000b435:	8d 76 00             	lea    esi,[esi+0x0]
c000b438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b451:	83 c4 08             	add    esp,0x8
c000b454:	5b                   	pop    ebx
c000b455:	c3                   	ret    
c000b456:	66 90                	xchg   ax,ax

c000b458 <VCache::~VCache()>:
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	ba 00 3a 02 c0       	mov    edx,0xc0023a00
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	89 10                	mov    DWORD PTR [eax],edx
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b46d:	0f b6 c0             	movzx  eax,al
c000b470:	85 c0                	test   eax,eax
c000b472:	74 10                	je     c000b484 <VCache::~VCache()+0x2c>
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47b:	e8 8c ff ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	90                   	nop
c000b484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b48b:	83 ec 0c             	sub    esp,0xc
c000b48e:	50                   	push   eax
c000b48f:	e8 13 44 00 00       	call   c000f8a7 <free>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b49e:	83 ec 0c             	sub    esp,0xc
c000b4a1:	50                   	push   eax
c000b4a2:	e8 00 44 00 00       	call   c000f8a7 <free>
c000b4a7:	83 c4 10             	add    esp,0x10
c000b4aa:	90                   	nop
c000b4ab:	83 c4 0c             	add    esp,0xc
c000b4ae:	c3                   	ret    
c000b4af:	90                   	nop

c000b4b0 <VCache::~VCache()>:
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	83 ec 0c             	sub    esp,0xc
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	e8 99 ff ff ff       	call   c000b458 <VCache::~VCache()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	83 ec 08             	sub    esp,0x8
c000b4c5:	6a 44                	push   0x44
c000b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cb:	e8 e0 1e 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <VCache::write(unsigned long long, int, void*)>:
c000b4d8:	55                   	push   ebp
c000b4d9:	57                   	push   edi
c000b4da:	56                   	push   esi
c000b4db:	53                   	push   ebx
c000b4dc:	83 ec 1c             	sub    esp,0x1c
c000b4df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4e3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4e7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4eb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4ef:	e8 24 b6 00 00       	call   c0016b18 <KeDisablePreemption()>
c000b4f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4f9:	50                   	push   eax
c000b4fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4fd:	0f af c3             	imul   eax,ebx
c000b500:	05 ff 0f 00 00       	add    eax,0xfff
c000b505:	99                   	cdq    
c000b506:	f7 f9                	idiv   ecx
c000b508:	50                   	push   eax
c000b509:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b50d:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b513:	e8 74 8b 00 00       	call   c001408c <VAS::canLockPages(unsigned long, int)>
c000b518:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b51c:	83 c4 10             	add    esp,0x10
c000b51f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b524:	74 2a                	je     c000b550 <VCache::write(unsigned long long, int, void*)+0x78>
c000b526:	b9 00 10 00 00       	mov    ecx,0x1000
c000b52b:	50                   	push   eax
c000b52c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b52f:	0f af c3             	imul   eax,ebx
c000b532:	05 ff 0f 00 00       	add    eax,0xfff
c000b537:	99                   	cdq    
c000b538:	f7 f9                	idiv   ecx
c000b53a:	50                   	push   eax
c000b53b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b53f:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b545:	e8 ac 8d 00 00       	call   c00142f6 <VAS::lockPages(unsigned long, int)>
c000b54a:	83 c4 10             	add    esp,0x10
c000b54d:	8d 76 00             	lea    esi,[esi+0x0]
c000b550:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b554:	74 0e                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	55                   	push   ebp
c000b55a:	e8 9d fe ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	66 90                	xchg   ax,ax
c000b564:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b568:	74 72                	je     c000b5dc <VCache::write(unsigned long long, int, void*)+0x104>
c000b56a:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b56d:	89 c8                	mov    eax,ecx
c000b56f:	99                   	cdq    
c000b570:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b573:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b582:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b586:	31 f0                	xor    eax,esi
c000b588:	31 fa                	xor    edx,edi
c000b58a:	09 d0                	or     eax,edx
c000b58c:	75 42                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b58e:	83 fb 01             	cmp    ebx,0x1
c000b591:	75 3d                	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b596:	89 cf                	mov    edi,ecx
c000b598:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b59e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5a2:	0f af f8             	imul   edi,eax
c000b5a5:	89 c1                	mov    ecx,eax
c000b5a7:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5ac:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b5af:	40                   	inc    eax
c000b5b0:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b5b3:	83 f8 50             	cmp    eax,0x50
c000b5b6:	0f 85 a8 00 00 00    	jne    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	55                   	push   ebp
c000b5c0:	e8 47 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5c5:	83 c4 10             	add    esp,0x10
c000b5c8:	e9 97 00 00 00       	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b5d0:	83 ec 0c             	sub    esp,0xc
c000b5d3:	55                   	push   ebp
c000b5d4:	e8 33 fe ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5df:	83 fb 4f             	cmp    ebx,0x4f
c000b5e2:	7f 20                	jg     c000b604 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5e4:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5e7:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5ea:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5ed:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5f1:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5f4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5fa:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b600:	eb 62                	jmp    c000b664 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b602:	66 90                	xchg   ax,ax
c000b604:	83 ec 0c             	sub    esp,0xc
c000b607:	8b 10                	mov    edx,DWORD PTR [eax]
c000b609:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b60d:	53                   	push   ebx
c000b60e:	57                   	push   edi
c000b60f:	56                   	push   esi
c000b610:	50                   	push   eax
c000b611:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b614:	83 c4 20             	add    esp,0x20
c000b617:	89 c6                	mov    esi,eax
c000b619:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b61e:	74 28                	je     c000b648 <VCache::write(unsigned long long, int, void*)+0x170>
c000b620:	b9 00 10 00 00       	mov    ecx,0x1000
c000b625:	52                   	push   edx
c000b626:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b62a:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b630:	99                   	cdq    
c000b631:	f7 f9                	idiv   ecx
c000b633:	50                   	push   eax
c000b634:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b638:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b63e:	e8 85 8a 00 00       	call   c00140c8 <VAS::unlockPages(unsigned long, int)>
c000b643:	83 c4 10             	add    esp,0x10
c000b646:	66 90                	xchg   ax,ax
c000b648:	e8 f3 b4 00 00       	call   c0016b40 <KeRestorePreemption()>
c000b64d:	85 f6                	test   esi,esi
c000b64f:	74 4b                	je     c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b651:	83 ec 0c             	sub    esp,0xc
c000b654:	68 b8 39 02 c0       	push   0xc00239b8
c000b659:	e8 1e b9 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	eb 39                	jmp    c000b69c <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b663:	90                   	nop
c000b664:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b669:	74 29                	je     c000b694 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b66b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b670:	50                   	push   eax
c000b671:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b675:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b67b:	99                   	cdq    
c000b67c:	f7 f9                	idiv   ecx
c000b67e:	50                   	push   eax
c000b67f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b683:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b689:	e8 3a 8a 00 00       	call   c00140c8 <VAS::unlockPages(unsigned long, int)>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	8d 76 00             	lea    esi,[esi+0x0]
c000b694:	e8 a7 b4 00 00       	call   c0016b40 <KeRestorePreemption()>
c000b699:	31 f6                	xor    esi,esi
c000b69b:	90                   	nop
c000b69c:	83 c4 1c             	add    esp,0x1c
c000b69f:	89 f0                	mov    eax,esi
c000b6a1:	5b                   	pop    ebx
c000b6a2:	5e                   	pop    esi
c000b6a3:	5f                   	pop    edi
c000b6a4:	5d                   	pop    ebp
c000b6a5:	c3                   	ret    

c000b6a6 <VCache::read(unsigned long long, int, void*)>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	bf 00 10 00 00       	mov    edi,0x1000
c000b6ad:	56                   	push   esi
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 2c             	sub    esp,0x2c
c000b6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6b6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b6ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b6c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6ca:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6ce:	e8 45 b4 00 00       	call   c0016b18 <KeDisablePreemption()>
c000b6d3:	50                   	push   eax
c000b6d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6d7:	0f af c6             	imul   eax,esi
c000b6da:	05 ff 0f 00 00       	add    eax,0xfff
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	50                   	push   eax
c000b6e3:	55                   	push   ebp
c000b6e4:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b6ea:	e8 9d 89 00 00       	call   c001408c <VAS::canLockPages(unsigned long, int)>
c000b6ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6fb:	74 1f                	je     c000b71c <VCache::read(unsigned long long, int, void*)+0x76>
c000b6fd:	50                   	push   eax
c000b6fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b701:	0f af c6             	imul   eax,esi
c000b704:	05 ff 0f 00 00       	add    eax,0xfff
c000b709:	99                   	cdq    
c000b70a:	f7 ff                	idiv   edi
c000b70c:	50                   	push   eax
c000b70d:	55                   	push   ebp
c000b70e:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b714:	e8 dd 8b 00 00       	call   c00142f6 <VAS::lockPages(unsigned long, int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b720:	74 0e                	je     c000b730 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	53                   	push   ebx
c000b726:	e8 e1 fc ff ff       	call   c000b40c <VCache::writeWriteBuffer()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	66 90                	xchg   ax,ax
c000b730:	83 fe 01             	cmp    esi,0x1
c000b733:	0f 85 ef 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b739:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b73c:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b743:	0f 85 df 00 00 00    	jne    c000b828 <VCache::read(unsigned long long, int, void*)+0x182>
c000b749:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b74c:	89 fe                	mov    esi,edi
c000b74e:	f7 de                	neg    esi
c000b750:	89 f0                	mov    eax,esi
c000b752:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b756:	c1 f8 1f             	sar    eax,0x1f
c000b759:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b75d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b761:	89 f0                	mov    eax,esi
c000b763:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b767:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b76b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b76f:	89 f2                	mov    edx,esi
c000b771:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b776:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b77a:	74 0c                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b77c:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b77f:	75 07                	jne    c000b788 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b781:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b784:	74 4e                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	66 90                	xchg   ax,ax
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b78f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b792:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b795:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b797:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b79a:	57                   	push   edi
c000b79b:	52                   	push   edx
c000b79c:	50                   	push   eax
c000b79d:	51                   	push   ecx
c000b79e:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b7a1:	83 c4 20             	add    esp,0x20
c000b7a4:	89 c7                	mov    edi,eax
c000b7a6:	85 c0                	test   eax,eax
c000b7a8:	74 2a                	je     c000b7d4 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 d0 39 02 c0       	push   0xc00239d0
c000b7b2:	e8 c5 b7 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7bf:	0f 84 b3 00 00 00    	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7c5:	51                   	push   ecx
c000b7c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7c9:	05 ff 0f 00 00       	add    eax,0xfff
c000b7ce:	e9 8d 00 00 00       	jmp    c000b860 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7d3:	90                   	nop
c000b7d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7d7:	89 ef                	mov    edi,ebp
c000b7d9:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7df:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7e2:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7e5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7e9:	0f af f1             	imul   esi,ecx
c000b7ec:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7f6:	74 24                	je     c000b81c <VCache::read(unsigned long long, int, void*)+0x176>
c000b7f8:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7fd:	52                   	push   edx
c000b7fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b801:	05 ff 0f 00 00       	add    eax,0xfff
c000b806:	99                   	cdq    
c000b807:	f7 f9                	idiv   ecx
c000b809:	50                   	push   eax
c000b80a:	55                   	push   ebp
c000b80b:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b811:	e8 b2 88 00 00       	call   c00140c8 <VAS::unlockPages(unsigned long, int)>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	8d 76 00             	lea    esi,[esi+0x0]
c000b81c:	e8 1f b3 00 00       	call   c0016b40 <KeRestorePreemption()>
c000b821:	31 ff                	xor    edi,edi
c000b823:	eb 5b                	jmp    c000b880 <VCache::read(unsigned long long, int, void*)+0x1da>
c000b825:	8d 76 00             	lea    esi,[esi+0x0]
c000b828:	83 ec 0c             	sub    esp,0xc
c000b82b:	53                   	push   ebx
c000b82c:	e8 cb fb ff ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c000b831:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b834:	8b 10                	mov    edx,DWORD PTR [eax]
c000b836:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b839:	56                   	push   esi
c000b83a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b83e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b842:	50                   	push   eax
c000b843:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b846:	83 c4 20             	add    esp,0x20
c000b849:	89 c7                	mov    edi,eax
c000b84b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b850:	74 26                	je     c000b878 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b852:	50                   	push   eax
c000b853:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b857:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b85d:	8d 76 00             	lea    esi,[esi+0x0]
c000b860:	b9 00 10 00 00       	mov    ecx,0x1000
c000b865:	99                   	cdq    
c000b866:	f7 f9                	idiv   ecx
c000b868:	50                   	push   eax
c000b869:	55                   	push   ebp
c000b86a:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000b870:	e8 53 88 00 00       	call   c00140c8 <VAS::unlockPages(unsigned long, int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	e8 c3 b2 00 00       	call   c0016b40 <KeRestorePreemption()>
c000b87d:	8d 76 00             	lea    esi,[esi+0x0]
c000b880:	83 c4 2c             	add    esp,0x2c
c000b883:	89 f8                	mov    eax,edi
c000b885:	5b                   	pop    ebx
c000b886:	5e                   	pop    esi
c000b887:	5f                   	pop    edi
c000b888:	5d                   	pop    ebp
c000b889:	c3                   	ret    

c000b88a <Video::putrect(int, int, int, int, unsigned int)>:
c000b88a:	55                   	push   ebp
c000b88b:	57                   	push   edi
c000b88c:	56                   	push   esi
c000b88d:	53                   	push   ebx
c000b88e:	83 ec 1c             	sub    esp,0x1c
c000b891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b895:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b899:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b89d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b8a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8a9:	01 df                	add    edi,ebx
c000b8ab:	39 fb                	cmp    ebx,edi
c000b8ad:	7d 1f                	jge    c000b8ce <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b8af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8b3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b8b7:	7d 12                	jge    c000b8cb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b8b9:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b8bf:	53                   	push   ebx
c000b8c0:	55                   	push   ebp
c000b8c1:	45                   	inc    ebp
c000b8c2:	56                   	push   esi
c000b8c3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c6:	83 c4 10             	add    esp,0x10
c000b8c9:	eb e8                	jmp    c000b8b3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8cb:	43                   	inc    ebx
c000b8cc:	eb dd                	jmp    c000b8ab <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	5b                   	pop    ebx
c000b8d2:	5e                   	pop    esi
c000b8d3:	5f                   	pop    edi
c000b8d4:	5d                   	pop    ebp
c000b8d5:	c3                   	ret    

c000b8d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	31 ff                	xor    edi,edi
c000b8da:	56                   	push   esi
c000b8db:	53                   	push   ebx
c000b8dc:	83 ec 1c             	sub    esp,0x1c
c000b8df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8e7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ee:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8f7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8ff:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b902:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b906:	01 f9                	add    ecx,edi
c000b908:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b90c:	7d 2f                	jge    c000b93d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b90e:	31 f6                	xor    esi,esi
c000b910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b914:	01 f2                	add    edx,esi
c000b916:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b91a:	7d 1a                	jge    c000b936 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b91c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b91f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b922:	46                   	inc    esi
c000b923:	51                   	push   ecx
c000b924:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b928:	52                   	push   edx
c000b929:	55                   	push   ebp
c000b92a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b934:	eb da                	jmp    c000b910 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b936:	47                   	inc    edi
c000b937:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b93b:	eb c5                	jmp    c000b902 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Video::blit(unsigned int*, int, int, int, int)>:
c000b946:	55                   	push   ebp
c000b947:	57                   	push   edi
c000b948:	56                   	push   esi
c000b949:	53                   	push   ebx
c000b94a:	83 ec 1c             	sub    esp,0x1c
c000b94d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b951:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b955:	85 c0                	test   eax,eax
c000b957:	79 02                	jns    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b959:	31 c0                	xor    eax,eax
c000b95b:	c1 e0 02             	shl    eax,0x2
c000b95e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b962:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b96a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b96e:	39 d8                	cmp    eax,ebx
c000b970:	7e 49                	jle    c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b972:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b978:	7c 41                	jl     c000b9bb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b97a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b97e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b982:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b986:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b98a:	39 f9                	cmp    ecx,edi
c000b98c:	7e 22                	jle    c000b9b0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b98e:	83 c5 04             	add    ebp,0x4
c000b991:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b997:	7c 14                	jl     c000b9ad <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b999:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b99b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b99e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b9a6:	56                   	push   esi
c000b9a7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	47                   	inc    edi
c000b9ae:	eb d2                	jmp    c000b982 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b4:	43                   	inc    ebx
c000b9b5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b9b9:	eb ab                	jmp    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b9bb:	83 c4 1c             	add    esp,0x1c
c000b9be:	5b                   	pop    ebx
c000b9bf:	5e                   	pop    esi
c000b9c0:	5f                   	pop    edi
c000b9c1:	5d                   	pop    ebp
c000b9c2:	c3                   	ret    
c000b9c3:	90                   	nop

c000b9c4 <Video::clearScreen(unsigned int)>:
c000b9c4:	57                   	push   edi
c000b9c5:	56                   	push   esi
c000b9c6:	53                   	push   ebx
c000b9c7:	31 db                	xor    ebx,ebx
c000b9c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9cd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9d3:	7e 1f                	jle    c000b9f4 <Video::clearScreen(unsigned int)+0x30>
c000b9d5:	31 ff                	xor    edi,edi
c000b9d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9dd:	7e 12                	jle    c000b9f1 <Video::clearScreen(unsigned int)+0x2d>
c000b9df:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9e5:	53                   	push   ebx
c000b9e6:	57                   	push   edi
c000b9e7:	47                   	inc    edi
c000b9e8:	56                   	push   esi
c000b9e9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	eb e6                	jmp    c000b9d7 <Video::clearScreen(unsigned int)+0x13>
c000b9f1:	43                   	inc    ebx
c000b9f2:	eb d9                	jmp    c000b9cd <Video::clearScreen(unsigned int)+0x9>
c000b9f4:	5b                   	pop    ebx
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Video::putpixel(int, int, unsigned int)>:
c000b9f8:	c7 44 24 04 08 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023a08
c000ba00:	e9 ef 42 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000ba05:	90                   	nop

c000ba06 <Video::readPixelApprox(int, int)>:
c000ba06:	83 ec 18             	sub    esp,0x18
c000ba09:	68 29 3a 02 c0       	push   0xc0023a29
c000ba0e:	e8 e1 42 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ba13:	31 c0                	xor    eax,eax
c000ba15:	83 c4 1c             	add    esp,0x1c
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Video::Video(char const*)>:
c000ba1a:	83 ec 0c             	sub    esp,0xc
c000ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba21:	83 ec 08             	sub    esp,0x8
c000ba24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba28:	50                   	push   eax
c000ba29:	e8 88 e1 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000ba2e:	83 c4 10             	add    esp,0x10
c000ba31:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000ba36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3a:	89 10                	mov    DWORD PTR [eax],edx
c000ba3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba40:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	ba cc 3a 02 c0       	mov    edx,0xc0023acc
c000ba58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba62:	83 ec 0c             	sub    esp,0xc
c000ba65:	50                   	push   eax
c000ba66:	e8 eb de ff ff       	call   c0009956 <Device::~Device()>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	90                   	nop
c000ba6f:	83 c4 0c             	add    esp,0xc
c000ba72:	c3                   	ret    
c000ba73:	90                   	nop

c000ba74 <Video::~Video()>:
c000ba74:	83 ec 0c             	sub    esp,0xc
c000ba77:	83 ec 0c             	sub    esp,0xc
c000ba7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba7e:	e8 cd ff ff ff       	call   c000ba50 <Video::~Video()>
c000ba83:	83 c4 10             	add    esp,0x10
c000ba86:	83 ec 08             	sub    esp,0x8
c000ba89:	68 64 01 00 00       	push   0x164
c000ba8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba92:	e8 19 19 00 00       	call   c000d3b0 <operator delete(void*, unsigned long)>
c000ba97:	83 c4 10             	add    esp,0x10
c000ba9a:	83 c4 0c             	add    esp,0xc
c000ba9d:	c3                   	ret    

c000ba9e <Video::isMonochrome()>:
c000ba9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baa2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Video::getWidth()>:
c000baaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000bab4:	c3                   	ret    
c000bab5:	90                   	nop

c000bab6 <Video::getHeight()>:
c000bab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000baba:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <Video::drawCursor(int, int, unsigned int*, int)>:
c000bac2:	55                   	push   ebp
c000bac3:	57                   	push   edi
c000bac4:	56                   	push   esi
c000bac5:	53                   	push   ebx
c000bac6:	83 ec 2c             	sub    esp,0x2c
c000bac9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bacd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000bad1:	83 f8 01             	cmp    eax,0x1
c000bad4:	19 c9                	sbb    ecx,ecx
c000bad6:	31 db                	xor    ebx,ebx
c000bad8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000badc:	89 cd                	mov    ebp,ecx
c000bade:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bae6:	f7 d5                	not    ebp
c000bae8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baee:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000baf2:	01 d8                	add    eax,ebx
c000baf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000baf8:	56                   	push   esi
c000baf9:	e8 b8 ff ff ff       	call   c000bab6 <Video::getHeight()>
c000bafe:	59                   	pop    ecx
c000baff:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000bb03:	7e 70                	jle    c000bb75 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bb05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb09:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bb0d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bb10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bb18:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bb1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb23:	89 f8                	mov    eax,edi
c000bb25:	83 c0 20             	add    eax,0x20
c000bb28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb2c:	56                   	push   esi
c000bb2d:	e8 78 ff ff ff       	call   c000baaa <Video::getWidth()>
c000bb32:	5a                   	pop    edx
c000bb33:	39 c7                	cmp    edi,eax
c000bb35:	7d 34                	jge    c000bb6b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb37:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb3c:	74 05                	je     c000bb43 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb40:	55                   	push   ebp
c000bb41:	eb 0d                	jmp    c000bb50 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb43:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb48:	74 12                	je     c000bb5c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb4a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb54:	57                   	push   edi
c000bb55:	56                   	push   esi
c000bb56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb59:	83 c4 10             	add    esp,0x10
c000bb5c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb60:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb64:	47                   	inc    edi
c000bb65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb69:	75 c1                	jne    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb6b:	43                   	inc    ebx
c000bb6c:	83 fb 20             	cmp    ebx,0x20
c000bb6f:	0f 85 79 ff ff ff    	jne    c000baee <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb75:	83 c4 2c             	add    esp,0x2c
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	90                   	nop

c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb7e:	55                   	push   ebp
c000bb7f:	57                   	push   edi
c000bb80:	56                   	push   esi
c000bb81:	53                   	push   ebx
c000bb82:	83 ec 48             	sub    esp,0x48
c000bb85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb89:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb8d:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb91:	c1 e0 08             	shl    eax,0x8
c000bb94:	01 d0                	add    eax,edx
c000bb96:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb9a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bba2:	c1 e0 08             	shl    eax,0x8
c000bba5:	01 d0                	add    eax,edx
c000bba7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bbaf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bbb4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bbb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbbc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bbc3:	50                   	push   eax
c000bbc4:	e8 ce 3c 00 00       	call   c000f897 <malloc>
c000bbc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbcd:	83 c4 10             	add    esp,0x10
c000bbd0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbd5:	75 10                	jne    c000bbe7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbd7:	83 ec 0c             	sub    esp,0xc
c000bbda:	68 54 3a 02 c0       	push   0xc0023a54
c000bbdf:	e8 10 41 00 00       	call   c000fcf4 <KePanic(char const*)>
c000bbe4:	83 c4 10             	add    esp,0x10
c000bbe7:	51                   	push   ecx
c000bbe8:	51                   	push   ecx
c000bbe9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbed:	50                   	push   eax
c000bbee:	68 64 3a 02 c0       	push   0xc0023a64
c000bbf3:	e8 84 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bbf8:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbfb:	83 e0 20             	and    eax,0x20
c000bbfe:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bc02:	85 c0                	test   eax,eax
c000bc04:	5e                   	pop    esi
c000bc05:	0f 94 c0             	sete   al
c000bc08:	5f                   	pop    edi
c000bc09:	0f b6 c0             	movzx  eax,al
c000bc0c:	be 12 00 00 00       	mov    esi,0x12
c000bc11:	50                   	push   eax
c000bc12:	68 6e 3a 02 c0       	push   0xc0023a6e
c000bc17:	e8 60 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc1c:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	89 d0                	mov    eax,edx
c000bc25:	85 d2                	test   edx,edx
c000bc27:	74 11                	je     c000bc3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc29:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc2d:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc31:	c1 fe 03             	sar    esi,0x3
c000bc34:	0f af f1             	imul   esi,ecx
c000bc37:	83 c6 12             	add    esi,0x12
c000bc3a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc3f:	74 07                	je     c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc41:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc46:	75 12                	jne    c000bc5a <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	68 7c 3a 02 c0       	push   0xc0023a7c
c000bc50:	e8 27 b3 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bc55:	e9 a0 02 00 00       	jmp    c000befa <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc5a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc5e:	83 f9 02             	cmp    ecx,0x2
c000bc61:	74 0e                	je     c000bc71 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc63:	83 f9 0a             	cmp    ecx,0xa
c000bc66:	0f 84 c8 00 00 00    	je     c000bd34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc6c:	e9 72 02 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc76:	75 0e                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc78:	84 c0                	test   al,al
c000bc7a:	75 0a                	jne    c000bc86 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc7f:	83 e8 18             	sub    eax,0x18
c000bc82:	a8 f7                	test   al,0xf7
c000bc84:	74 0d                	je     c000bc93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc86:	83 ec 0c             	sub    esp,0xc
c000bc89:	68 91 3a 02 c0       	push   0xc0023a91
c000bc8e:	e9 58 02 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc93:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc98:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bca0:	31 c0                	xor    eax,eax
c000bca2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bca6:	89 c7                	mov    edi,eax
c000bca8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bcb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bcb5:	75 15                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcb7:	99                   	cdq    
c000bcb8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bcbc:	85 d2                	test   edx,edx
c000bcbe:	75 0c                	jne    c000bccc <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bcc0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bcc4:	29 c7                	sub    edi,eax
c000bcc6:	4f                   	dec    edi
c000bcc7:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bccc:	31 d2                	xor    edx,edx
c000bcce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcd2:	75 08                	jne    c000bcdc <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcd4:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcd9:	c1 e2 18             	shl    edx,0x18
c000bcdc:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bce1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bce5:	c1 e1 10             	shl    ecx,0x10
c000bce8:	8d 47 01             	lea    eax,[edi+0x1]
c000bceb:	89 cd                	mov    ebp,ecx
c000bced:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcf2:	c1 e1 08             	shl    ecx,0x8
c000bcf5:	09 e9                	or     ecx,ebp
c000bcf7:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcfb:	09 e9                	or     ecx,ebp
c000bcfd:	09 d1                	or     ecx,edx
c000bcff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bd03:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bd06:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bd0a:	c1 fa 03             	sar    edx,0x3
c000bd0d:	01 d6                	add    esi,edx
c000bd0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd13:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bd17:	7e 04                	jle    c000bd1d <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bd19:	89 c7                	mov    edi,eax
c000bd1b:	eb 93                	jmp    c000bcb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bd1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd25:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd29:	0f 8f 77 ff ff ff    	jg     c000bca6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd2f:	e9 d3 01 00 00       	jmp    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd34:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd39:	75 0e                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3b:	85 d2                	test   edx,edx
c000bd3d:	75 0a                	jne    c000bd49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd3f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd42:	83 e8 18             	sub    eax,0x18
c000bd45:	a8 f7                	test   al,0xf7
c000bd47:	74 0d                	je     c000bd56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd49:	83 ec 0c             	sub    esp,0xc
c000bd4c:	68 9f 3a 02 c0       	push   0xc0023a9f
c000bd51:	e9 95 01 00 00       	jmp    c000beeb <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd5e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd66:	31 c9                	xor    ecx,ecx
c000bd68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6c:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd70:	0f 8e 91 01 00 00    	jle    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd76:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd7a:	0f 8d 87 01 00 00    	jge    c000bf07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd80:	8d 46 01             	lea    eax,[esi+0x1]
c000bd83:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd8b:	83 fd 7f             	cmp    ebp,0x7f
c000bd8e:	89 e8                	mov    eax,ebp
c000bd90:	0f 8e 9d 00 00 00    	jle    c000be33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd96:	83 e0 7f             	and    eax,0x7f
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd9f:	40                   	inc    eax
c000bda0:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	75 0a                	jne    c000bdb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bdaa:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bdaf:	89 ea                	mov    edx,ebp
c000bdb1:	c1 e2 18             	shl    edx,0x18
c000bdb4:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bdb9:	c1 e0 10             	shl    eax,0x10
c000bdbc:	89 c7                	mov    edi,eax
c000bdbe:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bdc3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bdc7:	c1 e0 08             	shl    eax,0x8
c000bdca:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdce:	09 f8                	or     eax,edi
c000bdd0:	31 f6                	xor    esi,esi
c000bdd2:	09 c5                	or     ebp,eax
c000bdd4:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdd9:	09 d5                	or     ebp,edx
c000bddb:	85 ff                	test   edi,edi
c000bddd:	75 1d                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bddf:	89 c8                	mov    eax,ecx
c000bde1:	99                   	cdq    
c000bde2:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bde6:	85 d2                	test   edx,edx
c000bde8:	75 12                	jne    c000bdfc <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdee:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdf2:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdf6:	49                   	dec    ecx
c000bdf7:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	8d 51 01             	lea    edx,[ecx+0x1]
c000be03:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000be06:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000be0a:	8d 46 01             	lea    eax,[esi+0x1]
c000be0d:	7e 06                	jle    c000be15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000be0f:	89 c6                	mov    esi,eax
c000be11:	89 d1                	mov    ecx,edx
c000be13:	eb c6                	jmp    c000bddb <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000be15:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be19:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be1d:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be21:	c1 f8 03             	sar    eax,0x3
c000be24:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be28:	89 d1                	mov    ecx,edx
c000be2a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be2e:	e9 35 ff ff ff       	jmp    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be33:	8d 45 01             	lea    eax,[ebp+0x1]
c000be36:	31 f6                	xor    esi,esi
c000be38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be45:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be4a:	75 1d                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be4c:	89 c8                	mov    eax,ecx
c000be4e:	99                   	cdq    
c000be4f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be53:	85 d2                	test   edx,edx
c000be55:	75 12                	jne    c000be69 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be5b:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be5f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be63:	49                   	dec    ecx
c000be64:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be69:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be71:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be75:	75 10                	jne    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be7b:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be80:	c1 e7 18             	shl    edi,0x18
c000be83:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be8b:	8d 51 01             	lea    edx,[ecx+0x1]
c000be8e:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be93:	c1 e0 10             	shl    eax,0x10
c000be96:	89 c7                	mov    edi,eax
c000be98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be9c:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000bea1:	c1 e0 08             	shl    eax,0x8
c000bea4:	09 f8                	or     eax,edi
c000bea6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000beaa:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000beae:	09 f8                	or     eax,edi
c000beb0:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000beb4:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000beb8:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000bebb:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bebf:	c1 f8 03             	sar    eax,0x3
c000bec2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bec6:	8d 46 01             	lea    eax,[esi+0x1]
c000bec9:	39 f5                	cmp    ebp,esi
c000becb:	7e 09                	jle    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000becd:	89 c6                	mov    esi,eax
c000becf:	89 d1                	mov    ecx,edx
c000bed1:	e9 6f ff ff ff       	jmp    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000bed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beda:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bede:	e9 45 ff ff ff       	jmp    c000be28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bee3:	52                   	push   edx
c000bee4:	52                   	push   edx
c000bee5:	51                   	push   ecx
c000bee6:	68 ae 3a 02 c0       	push   0xc0023aae
c000beeb:	e8 8c b0 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000bef0:	58                   	pop    eax
c000bef1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef5:	e8 ad 39 00 00       	call   c000f8a7 <free>
c000befa:	83 c4 10             	add    esp,0x10
c000befd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bf05:	eb 14                	jmp    c000bf1b <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bf07:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf0b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bf0f:	89 18                	mov    DWORD PTR [eax],ebx
c000bf11:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bf15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf19:	89 18                	mov    DWORD PTR [eax],ebx
c000bf1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf1f:	83 c4 3c             	add    esp,0x3c
c000bf22:	5b                   	pop    ebx
c000bf23:	5e                   	pop    esi
c000bf24:	5f                   	pop    edi
c000bf25:	5d                   	pop    ebp
c000bf26:	c3                   	ret    
c000bf27:	90                   	nop

c000bf28 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf28:	55                   	push   ebp
c000bf29:	57                   	push   edi
c000bf2a:	56                   	push   esi
c000bf2b:	53                   	push   ebx
c000bf2c:	83 ec 28             	sub    esp,0x28
c000bf2f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf33:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf37:	50                   	push   eax
c000bf38:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf3c:	50                   	push   eax
c000bf3d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf45:	57                   	push   edi
c000bf46:	e8 33 fc ff ff       	call   c000bb7e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf4b:	83 c4 20             	add    esp,0x20
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf54:	74 3a                	je     c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf56:	89 c6                	mov    esi,eax
c000bf58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf5c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf60:	39 d8                	cmp    eax,ebx
c000bf62:	7e 2c                	jle    c000bf90 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf64:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf6c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf70:	39 e8                	cmp    eax,ebp
c000bf72:	7e 19                	jle    c000bf8d <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf74:	83 c6 04             	add    esi,0x4
c000bf77:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf7a:	85 c0                	test   eax,eax
c000bf7c:	79 0c                	jns    c000bf8a <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf7e:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf80:	50                   	push   eax
c000bf81:	53                   	push   ebx
c000bf82:	55                   	push   ebp
c000bf83:	57                   	push   edi
c000bf84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	45                   	inc    ebp
c000bf8b:	eb db                	jmp    c000bf68 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf8d:	43                   	inc    ebx
c000bf8e:	eb c8                	jmp    c000bf58 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf90:	83 c4 1c             	add    esp,0x1c
c000bf93:	5b                   	pop    ebx
c000bf94:	5e                   	pop    esi
c000bf95:	5f                   	pop    edi
c000bf96:	5d                   	pop    ebp
c000bf97:	c3                   	ret    

c000bf98 <ACPI::close(int, int, void*)>:
c000bf98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf9d:	c3                   	ret    
c000bf9e:	66 90                	xchg   ax,ax

c000bfa0 <loadACPITables(unsigned char*)>:
c000bfa0:	57                   	push   edi
c000bfa1:	56                   	push   esi
c000bfa2:	53                   	push   ebx
c000bfa3:	83 ec 60             	sub    esp,0x60
c000bfa6:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bfab:	0f 84 43 02 00 00    	je     c000c1f4 <loadACPITables(unsigned char*)+0x254>
c000bfb1:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bfb6:	0f b6 c0             	movzx  eax,al
c000bfb9:	85 c0                	test   eax,eax
c000bfbb:	74 7b                	je     c000c038 <loadACPITables(unsigned char*)+0x98>
c000bfbd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfc1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfc5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfcc:	83 e8 24             	sub    eax,0x24
c000bfcf:	c1 e8 03             	shr    eax,0x3
c000bfd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfd6:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfde:	66 90                	xchg   ax,ax
c000bfe0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfe8:	0f 8d ba 00 00 00    	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000bfee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff2:	83 c0 24             	add    eax,0x24
c000bff5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bff9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bffd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c001:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000c005:	c1 e0 03             	shl    eax,0x3
c000c008:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000c00c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c013:	8b 00                	mov    eax,DWORD PTR [eax]
c000c015:	89 c1                	mov    ecx,eax
c000c017:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c01c:	8d 50 01             	lea    edx,[eax+0x1]
c000c01f:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c025:	89 ca                	mov    edx,ecx
c000c027:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c02e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c033:	eb ab                	jmp    c000bfe0 <loadACPITables(unsigned char*)+0x40>
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c03c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c040:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c047:	83 e8 24             	sub    eax,0x24
c000c04a:	c1 e8 02             	shr    eax,0x2
c000c04d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c051:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c059:	8d 76 00             	lea    esi,[esi+0x0]
c000c05c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c060:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c064:	7d 42                	jge    c000c0a8 <loadACPITables(unsigned char*)+0x108>
c000c066:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c06a:	83 c0 24             	add    eax,0x24
c000c06d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c071:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c075:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c079:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c07d:	c1 e0 02             	shl    eax,0x2
c000c080:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c084:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c088:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c08a:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c08f:	8d 50 01             	lea    edx,[eax+0x1]
c000c092:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c098:	89 ca                	mov    edx,ecx
c000c09a:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c0a1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c0a6:	eb b4                	jmp    c000c05c <loadACPITables(unsigned char*)+0xbc>
c000c0a8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c0b0:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c0b5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c0b9:	0f 8d 39 01 00 00    	jge    c000c1f8 <loadACPITables(unsigned char*)+0x258>
c000c0bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0c3:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c0ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0da:	25 ff 0f 00 00       	and    eax,0xfff
c000c0df:	89 c6                	mov    esi,eax
c000c0e1:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c0e7:	83 ec 0c             	sub    esp,0xc
c000c0ea:	6a 01                	push   0x1
c000c0ec:	e8 46 72 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c000c0f1:	83 c4 10             	add    esp,0x10
c000c0f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0fe:	83 ec 0c             	sub    esp,0xc
c000c101:	6a 01                	push   0x1
c000c103:	6a 01                	push   0x1
c000c105:	50                   	push   eax
c000c106:	52                   	push   edx
c000c107:	53                   	push   ebx
c000c108:	e8 f7 7a 00 00       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c10d:	83 c4 20             	add    esp,0x20
c000c110:	09 f0                	or     eax,esi
c000c112:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c116:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c11a:	c1 e0 03             	shl    eax,0x3
c000c11d:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c122:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c12e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c136:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c13e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c142:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c146:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c14a:	89 c6                	mov    esi,eax
c000c14c:	89 d7                	mov    edi,edx
c000c14e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c150:	89 c8                	mov    eax,ecx
c000c152:	89 fa                	mov    edx,edi
c000c154:	89 f3                	mov    ebx,esi
c000c156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c15a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c15e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c169:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c16d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c171:	05 00 10 00 00       	add    eax,0x1000
c000c176:	c1 e8 0c             	shr    eax,0xc
c000c179:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c181:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c185:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c189:	25 ff 0f 00 00       	and    eax,0xfff
c000c18e:	89 c6                	mov    esi,eax
c000c190:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c19d:	e8 95 71 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c000c1a2:	83 c4 10             	add    esp,0x10
c000c1a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c1a9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c1af:	83 ec 0c             	sub    esp,0xc
c000c1b2:	6a 01                	push   0x1
c000c1b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b8:	50                   	push   eax
c000c1b9:	52                   	push   edx
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 44 7a 00 00       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c1c0:	83 c4 20             	add    esp,0x20
c000c1c3:	09 f0                	or     eax,esi
c000c1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cd:	83 ec 0c             	sub    esp,0xc
c000c1d0:	50                   	push   eax
c000c1d1:	e8 69 74 00 00       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c000c1d6:	83 c4 10             	add    esp,0x10
c000c1d9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1e1:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1e8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1ed:	e9 be fe ff ff       	jmp    c000c0b0 <loadACPITables(unsigned char*)+0x110>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	90                   	nop
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	83 c4 60             	add    esp,0x60
c000c1fb:	5b                   	pop    ebx
c000c1fc:	5e                   	pop    esi
c000c1fd:	5f                   	pop    edi
c000c1fe:	c3                   	ret    
c000c1ff:	90                   	nop

c000c200 <findRSDT(unsigned char*)>:
c000c200:	57                   	push   edi
c000c201:	56                   	push   esi
c000c202:	53                   	push   ebx
c000c203:	83 ec 50             	sub    esp,0x50
c000c206:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c20b:	85 c0                	test   eax,eax
c000c20d:	75 0d                	jne    c000c21c <findRSDT(unsigned char*)+0x1c>
c000c20f:	b8 00 00 00 00       	mov    eax,0x0
c000c214:	e9 2b 01 00 00       	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c219:	8d 76 00             	lea    esi,[esi+0x0]
c000c21c:	89 e0                	mov    eax,esp
c000c21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c246:	89 c6                	mov    esi,eax
c000c248:	89 d7                	mov    edi,edx
c000c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c24c:	89 c8                	mov    eax,ecx
c000c24e:	89 fa                	mov    edx,edi
c000c250:	89 f3                	mov    ebx,esi
c000c252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c286:	25 ff 0f 00 00       	and    eax,0xfff
c000c28b:	89 c6                	mov    esi,eax
c000c28d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c293:	83 ec 0c             	sub    esp,0xc
c000c296:	6a 02                	push   0x2
c000c298:	e8 9a 70 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c000c29d:	83 c4 10             	add    esp,0x10
c000c2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2aa:	83 ec 0c             	sub    esp,0xc
c000c2ad:	6a 01                	push   0x1
c000c2af:	6a 02                	push   0x2
c000c2b1:	50                   	push   eax
c000c2b2:	52                   	push   edx
c000c2b3:	53                   	push   ebx
c000c2b4:	e8 4b 79 00 00       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2b9:	83 c4 20             	add    esp,0x20
c000c2bc:	09 f0                	or     eax,esi
c000c2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000c2cb:	89 c6                	mov    esi,eax
c000c2cd:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	6a 02                	push   0x2
c000c2d8:	e8 5a 70 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c000c2dd:	83 c4 10             	add    esp,0x10
c000c2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2ea:	83 ec 0c             	sub    esp,0xc
c000c2ed:	6a 01                	push   0x1
c000c2ef:	6a 02                	push   0x2
c000c2f1:	50                   	push   eax
c000c2f2:	52                   	push   edx
c000c2f3:	53                   	push   ebx
c000c2f4:	e8 0b 79 00 00       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f9:	83 c4 20             	add    esp,0x20
c000c2fc:	09 f0                	or     eax,esi
c000c2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c302:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c307:	85 c0                	test   eax,eax
c000c309:	75 11                	jne    c000c31c <findRSDT(unsigned char*)+0x11c>
c000c30b:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c312:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c316:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c31a:	eb 24                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c31c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c321:	83 f8 02             	cmp    eax,0x2
c000c324:	75 12                	jne    c000c338 <findRSDT(unsigned char*)+0x138>
c000c326:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c32d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c331:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c335:	eb 09                	jmp    c000c340 <findRSDT(unsigned char*)+0x140>
c000c337:	90                   	nop
c000c338:	b8 00 00 00 00       	mov    eax,0x0
c000c33d:	eb 05                	jmp    c000c344 <findRSDT(unsigned char*)+0x144>
c000c33f:	90                   	nop
c000c340:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c344:	83 c4 50             	add    esp,0x50
c000c347:	5b                   	pop    ebx
c000c348:	5e                   	pop    esi
c000c349:	5f                   	pop    edi
c000c34a:	c3                   	ret    
c000c34b:	90                   	nop

c000c34c <findDataTable(unsigned char*, char*)>:
c000c34c:	83 ec 1c             	sub    esp,0x1c
c000c34f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c354:	75 0a                	jne    c000c360 <findDataTable(unsigned char*, char*)+0x14>
c000c356:	b8 00 00 00 00       	mov    eax,0x0
c000c35b:	eb 5f                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c35d:	8d 76 00             	lea    esi,[esi+0x0]
c000c360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c368:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c36d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c371:	7d 41                	jge    c000c3b4 <findDataTable(unsigned char*, char*)+0x68>
c000c373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c377:	c1 e0 03             	shl    eax,0x3
c000c37a:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c37f:	83 ec 04             	sub    esp,0x4
c000c382:	6a 04                	push   0x4
c000c384:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c388:	50                   	push   eax
c000c389:	e8 f2 3f ff ff       	call   c0000380 <memcmp>
c000c38e:	83 c4 10             	add    esp,0x10
c000c391:	85 c0                	test   eax,eax
c000c393:	0f 94 c0             	sete   al
c000c396:	0f b6 c0             	movzx  eax,al
c000c399:	85 c0                	test   eax,eax
c000c39b:	74 0f                	je     c000c3ac <findDataTable(unsigned char*, char*)+0x60>
c000c39d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c3a1:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c3a8:	eb 12                	jmp    c000c3bc <findDataTable(unsigned char*, char*)+0x70>
c000c3aa:	66 90                	xchg   ax,ax
c000c3ac:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c3b1:	eb b5                	jmp    c000c368 <findDataTable(unsigned char*, char*)+0x1c>
c000c3b3:	90                   	nop
c000c3b4:	b8 00 00 00 00       	mov    eax,0x0
c000c3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c3bc:	83 c4 1c             	add    esp,0x1c
c000c3bf:	c3                   	ret    

c000c3c0 <scanMADT()>:
c000c3c0:	53                   	push   ebx
c000c3c1:	83 ec 38             	sub    esp,0x38
c000c3c4:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c3ce:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c3d8:	83 ec 0c             	sub    esp,0xc
c000c3db:	68 10 3b 02 c0       	push   0xc0023b10
c000c3e0:	e8 97 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c3e5:	83 c4 10             	add    esp,0x10
c000c3e8:	e8 85 d8 00 00       	call   c0019c72 <HalFindRSDP()>
c000c3ed:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3f2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3f7:	85 c0                	test   eax,eax
c000c3f9:	0f 84 59 04 00 00    	je     c000c858 <scanMADT()+0x498>
c000c3ff:	83 ec 0c             	sub    esp,0xc
c000c402:	68 1e 3b 02 c0       	push   0xc0023b1e
c000c407:	e8 70 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c414:	83 ec 0c             	sub    esp,0xc
c000c417:	50                   	push   eax
c000c418:	e8 e3 fd ff ff       	call   c000c200 <findRSDT(unsigned char*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c425:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 2a 04 00 00    	je     c000c85c <scanMADT()+0x49c>
c000c432:	8b 15 84 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd84
c000c438:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c43d:	83 ec 04             	sub    esp,0x4
c000c440:	52                   	push   edx
c000c441:	50                   	push   eax
c000c442:	68 c8 3c 02 c0       	push   0xc0023cc8
c000c447:	e8 30 ab ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c454:	83 ec 0c             	sub    esp,0xc
c000c457:	50                   	push   eax
c000c458:	e8 43 fb ff ff       	call   c000bfa0 <loadACPITables(unsigned char*)>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c465:	83 ec 08             	sub    esp,0x8
c000c468:	68 2d 3b 02 c0       	push   0xc0023b2d
c000c46d:	50                   	push   eax
c000c46e:	e8 d9 fe ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000c473:	83 c4 10             	add    esp,0x10
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c47f:	0f 84 db 03 00 00    	je     c000c860 <scanMADT()+0x4a0>
c000c485:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c48d:	8d 76 00             	lea    esi,[esi+0x0]
c000c490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c494:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c497:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c49b:	0f 87 c7 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4a1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c4a9:	0f 87 b9 03 00 00    	ja     c000c868 <scanMADT()+0x4a8>
c000c4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bb:	8d 50 01             	lea    edx,[eax+0x1]
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4ca:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c4ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d2:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c4e1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c4e5:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c4ea:	83 f8 02             	cmp    eax,0x2
c000c4ed:	0f 86 71 03 00 00    	jbe    c000c864 <scanMADT()+0x4a4>
c000c4f3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f8:	85 c0                	test   eax,eax
c000c4fa:	75 58                	jne    c000c554 <scanMADT()+0x194>
c000c4fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c500:	8d 50 01             	lea    edx,[eax+0x1]
c000c503:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c507:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c50d:	0f b6 d2             	movzx  edx,dl
c000c510:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c514:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c518:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c51e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c522:	8d 50 01             	lea    edx,[eax+0x1]
c000c525:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c529:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c52f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c532:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c538:	0f b6 d2             	movzx  edx,dl
c000c53b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c53f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c543:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c549:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c54e:	e9 f1 02 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c553:	90                   	nop
c000c554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c559:	83 f8 01             	cmp    eax,0x1
c000c55c:	0f 85 32 01 00 00    	jne    c000c694 <scanMADT()+0x2d4>
c000c562:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c566:	8d 50 01             	lea    edx,[eax+0x1]
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c573:	0f b6 d2             	movzx  edx,dl
c000c576:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c57a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c57e:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c584:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c589:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c58d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c591:	01 d0                	add    eax,edx
c000c593:	83 c0 2c             	add    eax,0x2c
c000c596:	8a 00                	mov    al,BYTE PTR [eax]
c000c598:	0f b6 d0             	movzx  edx,al
c000c59b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59f:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5a6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5aa:	0f b6 c0             	movzx  eax,al
c000c5ad:	c1 e0 08             	shl    eax,0x8
c000c5b0:	89 d1                	mov    ecx,edx
c000c5b2:	09 c1                	or     ecx,eax
c000c5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b8:	8d 50 02             	lea    edx,[eax+0x2]
c000c5bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5bf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5c3:	0f b6 c0             	movzx  eax,al
c000c5c6:	c1 e0 10             	shl    eax,0x10
c000c5c9:	09 c1                	or     ecx,eax
c000c5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5cf:	8d 50 03             	lea    edx,[eax+0x3]
c000c5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5da:	0f b6 c0             	movzx  eax,al
c000c5dd:	c1 e0 18             	shl    eax,0x18
c000c5e0:	09 c1                	or     ecx,eax
c000c5e2:	89 ca                	mov    edx,ecx
c000c5e4:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5e9:	0f b6 c0             	movzx  eax,al
c000c5ec:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c5f3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c600:	01 d0                	add    eax,edx
c000c602:	83 c0 2c             	add    eax,0x2c
c000c605:	8a 00                	mov    al,BYTE PTR [eax]
c000c607:	0f b6 d0             	movzx  edx,al
c000c60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c60e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c611:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c615:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c619:	0f b6 c0             	movzx  eax,al
c000c61c:	c1 e0 08             	shl    eax,0x8
c000c61f:	89 d1                	mov    ecx,edx
c000c621:	09 c1                	or     ecx,eax
c000c623:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c627:	8d 50 02             	lea    edx,[eax+0x2]
c000c62a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c62e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c632:	0f b6 c0             	movzx  eax,al
c000c635:	c1 e0 10             	shl    eax,0x10
c000c638:	09 c1                	or     ecx,eax
c000c63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c63e:	8d 50 03             	lea    edx,[eax+0x3]
c000c641:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c645:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c649:	0f b6 c0             	movzx  eax,al
c000c64c:	c1 e0 18             	shl    eax,0x18
c000c64f:	09 c1                	or     ecx,eax
c000c651:	89 ca                	mov    edx,ecx
c000c653:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c658:	0f b6 c0             	movzx  eax,al
c000c65b:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c662:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c667:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c66c:	83 c0 01             	add    eax,0x1
c000c66f:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c674:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c679:	0f b6 c0             	movzx  eax,al
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	50                   	push   eax
c000c680:	68 32 3b 02 c0       	push   0xc0023b32
c000c685:	e8 f2 a8 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	e9 b2 01 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c692:	66 90                	xchg   ax,ax
c000c694:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c699:	83 f8 02             	cmp    eax,0x2
c000c69c:	0f 85 ea 00 00 00    	jne    c000c78c <scanMADT()+0x3cc>
c000c6a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6a6:	8d 50 01             	lea    edx,[eax+0x1]
c000c6a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c6b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6bd:	8d 50 01             	lea    edx,[eax+0x1]
c000c6c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c6d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d8:	01 d0                	add    eax,edx
c000c6da:	83 c0 2c             	add    eax,0x2c
c000c6dd:	8a 00                	mov    al,BYTE PTR [eax]
c000c6df:	0f b6 d0             	movzx  edx,al
c000c6e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6f1:	0f b6 c0             	movzx  eax,al
c000c6f4:	c1 e0 08             	shl    eax,0x8
c000c6f7:	89 d1                	mov    ecx,edx
c000c6f9:	09 c1                	or     ecx,eax
c000c6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ff:	8d 50 02             	lea    edx,[eax+0x2]
c000c702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c70a:	0f b6 c0             	movzx  eax,al
c000c70d:	c1 e0 10             	shl    eax,0x10
c000c710:	09 c1                	or     ecx,eax
c000c712:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c716:	8d 50 03             	lea    edx,[eax+0x3]
c000c719:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c71d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c721:	0f b6 c0             	movzx  eax,al
c000c724:	c1 e0 18             	shl    eax,0x18
c000c727:	09 c8                	or     eax,ecx
c000c729:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c72d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c732:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c736:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c73a:	01 d0                	add    eax,edx
c000c73c:	83 c0 2c             	add    eax,0x2c
c000c73f:	8a 00                	mov    al,BYTE PTR [eax]
c000c741:	0f b6 c0             	movzx  eax,al
c000c744:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c748:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c74b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c74f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c753:	0f b6 d2             	movzx  edx,dl
c000c756:	c1 e2 08             	shl    edx,0x8
c000c759:	09 d0                	or     eax,edx
c000c75b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c760:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c765:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c76a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c76e:	88 90 28 62 02 c0    	mov    BYTE PTR [eax-0x3ffd9dd8],dl
c000c774:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c779:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c77e:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c786:	e9 b9 00 00 00       	jmp    c000c844 <scanMADT()+0x484>
c000c78b:	90                   	nop
c000c78c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c791:	83 f8 04             	cmp    eax,0x4
c000c794:	0f 85 9a 00 00 00    	jne    c000c834 <scanMADT()+0x474>
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7bc:	01 d0                	add    eax,edx
c000c7be:	83 c0 2c             	add    eax,0x2c
c000c7c1:	8a 00                	mov    al,BYTE PTR [eax]
c000c7c3:	0f b6 d0             	movzx  edx,al
c000c7c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000c7cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c7d5:	0f b6 c0             	movzx  eax,al
c000c7d8:	c1 e0 08             	shl    eax,0x8
c000c7db:	09 d0                	or     eax,edx
c000c7dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c7e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ea:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7f9:	0f b6 c0             	movzx  eax,al
c000c7fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c804:	c1 e0 08             	shl    eax,0x8
c000c807:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c80b:	89 c1                	mov    ecx,eax
c000c80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c811:	c1 e0 18             	shl    eax,0x18
c000c814:	89 c3                	mov    ebx,eax
c000c816:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c81b:	8d 50 01             	lea    edx,[eax+0x1]
c000c81e:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c824:	09 d9                	or     ecx,ebx
c000c826:	89 ca                	mov    edx,ecx
c000c828:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c82f:	eb 13                	jmp    c000c844 <scanMADT()+0x484>
c000c831:	8d 76 00             	lea    esi,[esi+0x0]
c000c834:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c839:	83 f8 05             	cmp    eax,0x5
c000c83c:	75 06                	jne    c000c844 <scanMADT()+0x484>
c000c83e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c843:	90                   	nop
c000c844:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c84d:	01 d0                	add    eax,edx
c000c84f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c853:	e9 38 fc ff ff       	jmp    c000c490 <scanMADT()+0xd0>
c000c858:	90                   	nop
c000c859:	eb 0d                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85b:	90                   	nop
c000c85c:	90                   	nop
c000c85d:	eb 09                	jmp    c000c868 <scanMADT()+0x4a8>
c000c85f:	90                   	nop
c000c860:	90                   	nop
c000c861:	eb 05                	jmp    c000c868 <scanMADT()+0x4a8>
c000c863:	90                   	nop
c000c864:	90                   	nop
c000c865:	8d 76 00             	lea    esi,[esi+0x0]
c000c868:	83 c4 38             	add    esp,0x38
c000c86b:	5b                   	pop    ebx
c000c86c:	c3                   	ret    
c000c86d:	90                   	nop
c000c86e:	66 90                	xchg   ax,ax

c000c870 <ACPI::ACPI()>:
c000c870:	83 ec 0c             	sub    esp,0xc
c000c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	68 4e 3b 02 c0       	push   0xc0023b4e
c000c87f:	50                   	push   eax
c000c880:	e8 31 d3 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c000c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c891:	89 10                	mov    DWORD PTR [eax],edx
c000c893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c897:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8b0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c8ba:	90                   	nop
c000c8bb:	83 c4 0c             	add    esp,0xc
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c8c0:	83 ec 2c             	sub    esp,0x2c
c000c8c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c8cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c8d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c8d8:	88 d0                	mov    al,dl
c000c8da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c8e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c8eb:	90                   	nop
c000c8ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8fa:	0f 8d b0 00 00 00    	jge    c000c9b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c900:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c904:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c908:	83 c2 2a             	add    edx,0x2a
c000c90b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c90f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c914:	0f b7 c0             	movzx  eax,ax
c000c917:	39 c2                	cmp    edx,eax
c000c919:	0f 85 85 00 00 00    	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c91f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c923:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c927:	83 c2 2a             	add    edx,0x2a
c000c92a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c92e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c933:	0f b6 c0             	movzx  eax,al
c000c936:	39 c2                	cmp    edx,eax
c000c938:	75 6a                	jne    c000c9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c93a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c93f:	85 c0                	test   eax,eax
c000c941:	74 3d                	je     c000c980 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c943:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c94b:	83 c2 2a             	add    edx,0x2a
c000c94e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c959:	39 c2                	cmp    edx,eax
c000c95b:	74 13                	je     c000c970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c95d:	83 ec 0c             	sub    esp,0xc
c000c960:	68 ec 3c 02 c0       	push   0xc0023cec
c000c965:	e8 8a 33 00 00       	call   c000fcf4 <KePanic(char const*)>
c000c96a:	83 c4 10             	add    esp,0x10
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	83 ec 0c             	sub    esp,0xc
c000c973:	68 53 3b 02 c0       	push   0xc0023b53
c000c978:	e8 77 33 00 00       	call   c000fcf4 <KePanic(char const*)>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c98c:	83 c2 2a             	add    edx,0x2a
c000c98f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c993:	8b 02                	mov    eax,DWORD PTR [edx]
c000c995:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c998:	89 01                	mov    DWORD PTR [ecx],eax
c000c99a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c99d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9a2:	66 90                	xchg   ax,ax
c000c9a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c9a9:	e9 3e ff ff ff       	jmp    c000c8ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9b5:	83 c4 2c             	add    esp,0x2c
c000c9b8:	c2 04 00             	ret    0x4
c000c9bb:	90                   	nop

c000c9bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c9bc:	83 ec 1c             	sub    esp,0x1c
c000c9bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c9c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c9d0:	88 c8                	mov    al,cl
c000c9d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c9d6:	88 d0                	mov    al,dl
c000c9d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c9f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ca03:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ca06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca0a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca19:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ca1d:	83 c0 01             	add    eax,0x1
c000ca20:	88 c1                	mov    cl,al
c000ca22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca26:	83 c2 2a             	add    edx,0x2a
c000ca29:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ca2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca31:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ca37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ca3e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ca42:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca50:	8d 50 01             	lea    edx,[eax+0x1]
c000ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca57:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca67:	3d 00 02 00 00       	cmp    eax,0x200
c000ca6c:	75 12                	jne    c000ca80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca6e:	83 ec 0c             	sub    esp,0xc
c000ca71:	68 62 3b 02 c0       	push   0xc0023b62
c000ca76:	e8 79 32 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ca7b:	83 c4 10             	add    esp,0x10
c000ca7e:	66 90                	xchg   ax,ax
c000ca80:	90                   	nop
c000ca81:	83 c4 1c             	add    esp,0x1c
c000ca84:	c3                   	ret    
c000ca85:	90                   	nop
c000ca86:	66 90                	xchg   ax,ax

c000ca88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca88:	b8 00 00 00 00       	mov    eax,0x0
c000ca8d:	c3                   	ret    
c000ca8e:	66 90                	xchg   ax,ax

c000ca90 <ACPI::detectPCI()>:
c000ca90:	53                   	push   ebx
c000ca91:	83 ec 28             	sub    esp,0x28
c000ca94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca9e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000caa3:	83 ec 08             	sub    esp,0x8
c000caa6:	68 7f 3b 02 c0       	push   0xc0023b7f
c000caab:	50                   	push   eax
c000caac:	e8 9b f8 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cab8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000cabd:	74 0d                	je     c000cacc <ACPI::detectPCI()+0x3c>
c000cabf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cac9:	8d 76 00             	lea    esi,[esi+0x0]
c000cacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cad8:	8a 00                	mov    al,BYTE PTR [eax]
c000cada:	0f b6 c0             	movzx  eax,al
c000cadd:	83 f8 01             	cmp    eax,0x1
c000cae0:	75 0e                	jne    c000caf0 <ACPI::detectPCI()+0x60>
c000cae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cae7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caec:	eb 2e                	jmp    c000cb1c <ACPI::detectPCI()+0x8c>
c000caee:	66 90                	xchg   ax,ax
c000caf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caf4:	8a 00                	mov    al,BYTE PTR [eax]
c000caf6:	0f b6 c0             	movzx  eax,al
c000caf9:	83 f8 02             	cmp    eax,0x2
c000cafc:	75 1e                	jne    c000cb1c <ACPI::detectPCI()+0x8c>
c000cafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb03:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 10                	je     c000cb1c <ACPI::detectPCI()+0x8c>
c000cb0c:	83 ec 0c             	sub    esp,0xc
c000cb0f:	68 1c 3d 02 c0       	push   0xc0023d1c
c000cb14:	e8 db 31 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cb19:	83 c4 10             	add    esp,0x10
c000cb1c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cb20:	83 f0 01             	xor    eax,0x1
c000cb23:	0f b6 c0             	movzx  eax,al
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 46                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb2a:	e8 01 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cb2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb33:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cb38:	75 0e                	jne    c000cb48 <ACPI::detectPCI()+0xb8>
c000cb3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cb44:	eb 2a                	jmp    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb46:	66 90                	xchg   ax,ax
c000cb48:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb4d:	75 21                	jne    c000cb70 <ACPI::detectPCI()+0xe0>
c000cb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb54:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb59:	85 c0                	test   eax,eax
c000cb5b:	74 13                	je     c000cb70 <ACPI::detectPCI()+0xe0>
c000cb5d:	83 ec 0c             	sub    esp,0xc
c000cb60:	68 1c 3d 02 c0       	push   0xc0023d1c
c000cb65:	e8 8a 31 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb75:	85 c0                	test   eax,eax
c000cb77:	0f 84 87 00 00 00    	je     c000cc04 <ACPI::detectPCI()+0x174>
c000cb7d:	83 ec 0c             	sub    esp,0xc
c000cb80:	68 84 3b 02 c0       	push   0xc0023b84
c000cb85:	e8 7b 07 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000cb8a:	83 c4 10             	add    esp,0x10
c000cb8d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb95:	83 ec 0c             	sub    esp,0xc
c000cb98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb9c:	e8 f6 2c 00 00       	call   c000f897 <malloc>
c000cba1:	83 c4 10             	add    esp,0x10
c000cba4:	89 c3                	mov    ebx,eax
c000cba6:	83 ec 0c             	sub    esp,0xc
c000cba9:	53                   	push   ebx
c000cbaa:	e8 75 0f 01 00       	call   c001db24 <PCI::PCI()>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cbb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbba:	83 ec 08             	sub    esp,0x8
c000cbbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc1:	50                   	push   eax
c000cbc2:	e8 8d ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cbc7:	83 c4 10             	add    esp,0x10
c000cbca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	83 c0 08             	add    eax,0x8
c000cbd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cbda:	85 d2                	test   edx,edx
c000cbdc:	74 0a                	je     c000cbe8 <ACPI::detectPCI()+0x158>
c000cbde:	ba 01 00 00 00       	mov    edx,0x1
c000cbe3:	eb 0b                	jmp    c000cbf0 <ACPI::detectPCI()+0x160>
c000cbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000cbe8:	ba 02 00 00 00       	mov    edx,0x2
c000cbed:	8d 76 00             	lea    esi,[esi+0x0]
c000cbf0:	6a 00                	push   0x0
c000cbf2:	6a 00                	push   0x0
c000cbf4:	52                   	push   edx
c000cbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbf9:	ff d0                	call   eax
c000cbfb:	83 c4 10             	add    esp,0x10
c000cbfe:	e9 91 00 00 00       	jmp    c000cc94 <ACPI::detectPCI()+0x204>
c000cc03:	90                   	nop
c000cc04:	83 ec 0c             	sub    esp,0xc
c000cc07:	68 9c 3b 02 c0       	push   0xc0023b9c
c000cc0c:	e8 f4 06 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000cc11:	83 c4 10             	add    esp,0x10
c000cc14:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cc1b:	83 ec 0c             	sub    esp,0xc
c000cc1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cc22:	e8 70 2c 00 00       	call   c000f897 <malloc>
c000cc27:	83 c4 10             	add    esp,0x10
c000cc2a:	89 c3                	mov    ebx,eax
c000cc2c:	83 ec 0c             	sub    esp,0xc
c000cc2f:	53                   	push   ebx
c000cc30:	e8 f5 1a 01 00       	call   c001e72a <IDE::IDE()>
c000cc35:	83 c4 10             	add    esp,0x10
c000cc38:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cc3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc40:	83 ec 08             	sub    esp,0x8
c000cc43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cc47:	50                   	push   eax
c000cc48:	e8 07 ce ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000cc4d:	83 c4 10             	add    esp,0x10
c000cc50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc54:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc62:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc6f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc7e:	83 c0 08             	add    eax,0x8
c000cc81:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc83:	6a 00                	push   0x0
c000cc85:	6a 00                	push   0x0
c000cc87:	6a 00                	push   0x0
c000cc89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8d:	ff d0                	call   eax
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	90                   	nop
c000cc95:	83 c4 28             	add    esp,0x28
c000cc98:	5b                   	pop    ebx
c000cc99:	c3                   	ret    
c000cc9a:	66 90                	xchg   ax,ax

c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	83 ec 0c             	sub    esp,0xc
c000cca2:	68 b1 3b 02 c0       	push   0xc0023bb1
c000cca7:	e8 48 30 00 00       	call   c000fcf4 <KePanic(char const*)>
c000ccac:	83 c4 10             	add    esp,0x10
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <ACPI::open(int, int, void*)>:
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	81 ec 70 01 00 00    	sub    esp,0x170
c000ccbd:	83 ec 0c             	sub    esp,0xc
c000ccc0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ccc7:	e8 c4 fd ff ff       	call   c000ca90 <ACPI::detectPCI()>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 44 3d 02 c0       	push   0xc0023d44
c000ccd7:	e8 29 06 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 4c 05 00 00       	mov    eax,0x54c
c000cce4:	8a 00                	mov    al,BYTE PTR [eax]
c000cce6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cced:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000ccf5:	83 f8 01             	cmp    eax,0x1
c000ccf8:	75 12                	jne    c000cd0c <ACPI::open(int, int, void*)+0x58>
c000ccfa:	83 ec 0c             	sub    esp,0xc
c000ccfd:	68 c2 3b 02 c0       	push   0xc0023bc2
c000cd02:	e8 ea 8a 00 00       	call   c00157f1 <Thr::loadKernelSymbolTable(char const*)>
c000cd07:	83 c4 10             	add    esp,0x10
c000cd0a:	eb 34                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd0c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cd14:	3d bb 00 00 00       	cmp    eax,0xbb
c000cd19:	75 15                	jne    c000cd30 <ACPI::open(int, int, void*)+0x7c>
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	68 e0 3b 02 c0       	push   0xc0023be0
c000cd23:	e8 c9 8a 00 00       	call   c00157f1 <Thr::loadKernelSymbolTable(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	eb 13                	jmp    c000cd40 <ACPI::open(int, int, void*)+0x8c>
c000cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd30:	83 ec 0c             	sub    esp,0xc
c000cd33:	68 fe 3b 02 c0       	push   0xc0023bfe
c000cd38:	e8 b7 2f 00 00       	call   c000fcf4 <KePanic(char const*)>
c000cd3d:	83 c4 10             	add    esp,0x10
c000cd40:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cd48:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cd53:	83 ec 0c             	sub    esp,0xc
c000cd56:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cd5d:	e8 35 2b 00 00       	call   c000f897 <malloc>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	89 c3                	mov    ebx,eax
c000cd67:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cd6c:	83 ec 04             	sub    esp,0x4
c000cd6f:	50                   	push   eax
c000cd70:	68 18 3c 02 c0       	push   0xc0023c18
c000cd75:	53                   	push   ebx
c000cd76:	e8 0f b4 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd85:	83 ec 08             	sub    esp,0x8
c000cd88:	6a 01                	push   0x1
c000cd8a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd91:	e8 12 b4 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cda0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cda8:	75 16                	jne    c000cdc0 <ACPI::open(int, int, void*)+0x10c>
c000cdaa:	83 ec 0c             	sub    esp,0xc
c000cdad:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdb4:	e8 4d b4 ff ff       	call   c0008206 <File::close()>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	eb 0a                	jmp    c000cdc8 <ACPI::open(int, int, void*)+0x114>
c000cdbe:	66 90                	xchg   ax,ax
c000cdc0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cdc8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cdd0:	74 1e                	je     c000cdf0 <ACPI::open(int, int, void*)+0x13c>
c000cdd2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cdd9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cddb:	83 c0 08             	add    eax,0x8
c000cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cdea:	ff d0                	call   eax
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	90                   	nop
c000cdf0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cdf7:	83 f0 01             	xor    eax,0x1
c000cdfa:	0f b6 c0             	movzx  eax,al
c000cdfd:	85 c0                	test   eax,eax
c000cdff:	74 2f                	je     c000ce30 <ACPI::open(int, int, void*)+0x17c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	68 36 3c 02 c0       	push   0xc0023c36
c000ce09:	e8 f7 04 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ce0e:	83 c4 10             	add    esp,0x10
c000ce11:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ce26:	e8 3b 67 00 00       	call   c0013566 <Virt::setupPageSwapping(int)>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	66 90                	xchg   ax,ax
c000ce30:	83 ec 0c             	sub    esp,0xc
c000ce33:	68 51 3c 02 c0       	push   0xc0023c51
c000ce38:	e8 c8 04 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ce47:	83 ec 08             	sub    esp,0x8
c000ce4a:	6a 13                	push   0x13
c000ce4c:	50                   	push   eax
c000ce4d:	e8 30 cf ff ff       	call   c0009d82 <getDevicesOfType(DeviceType)>
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	8d 76 00             	lea    esi,[esi+0x0]
c000ce58:	83 ec 0c             	sub    esp,0xc
c000ce5b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce62:	50                   	push   eax
c000ce63:	e8 44 51 01 00       	call   c0021fac <LinkedList<Device>::isEmpty()>
c000ce68:	83 c4 10             	add    esp,0x10
c000ce6b:	83 f0 01             	xor    eax,0x1
c000ce6e:	0f b6 c0             	movzx  eax,al
c000ce71:	85 c0                	test   eax,eax
c000ce73:	0f 84 47 01 00 00    	je     c000cfc0 <ACPI::open(int, int, void*)+0x30c>
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce83:	50                   	push   eax
c000ce84:	e8 3f 51 01 00       	call   c0021fc8 <LinkedList<Device>::getFirstElement()>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce93:	83 ec 0c             	sub    esp,0xc
c000ce96:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce9d:	50                   	push   eax
c000ce9e:	e8 2d 51 01 00       	call   c0021fd0 <LinkedList<Device>::removeFirst()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cead:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ceb4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cebf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cec5:	ba 09 00 00 00       	mov    edx,0x9
c000ceca:	fc                   	cld    
c000cecb:	89 c7                	mov    edi,eax
c000cecd:	89 de                	mov    esi,ebx
c000cecf:	89 d1                	mov    ecx,edx
c000ced1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ced3:	83 ec 08             	sub    esp,0x8
c000ced6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ceda:	50                   	push   eax
c000cedb:	83 ec 24             	sub    esp,0x24
c000cede:	89 e0                	mov    eax,esp
c000cee0:	89 c3                	mov    ebx,eax
c000cee2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cee6:	ba 09 00 00 00       	mov    edx,0x9
c000ceeb:	89 df                	mov    edi,ebx
c000ceed:	89 c6                	mov    esi,eax
c000ceef:	89 d1                	mov    ecx,edx
c000cef1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cef3:	e8 16 11 01 00       	call   c001e00e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000cef8:	83 c4 30             	add    esp,0x30
c000cefb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000cf02:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000cf0a:	0f 84 48 ff ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf10:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cf1b:	83 ec 0c             	sub    esp,0xc
c000cf1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cf25:	e8 6d 29 00 00       	call   c000f897 <malloc>
c000cf2a:	83 c4 10             	add    esp,0x10
c000cf2d:	89 c3                	mov    ebx,eax
c000cf2f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000cf34:	83 ec 04             	sub    esp,0x4
c000cf37:	50                   	push   eax
c000cf38:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3f:	53                   	push   ebx
c000cf40:	e8 45 b2 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000cf45:	83 c4 10             	add    esp,0x10
c000cf48:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000cf4f:	83 ec 0c             	sub    esp,0xc
c000cf52:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf59:	e8 0e b5 ff ff       	call   c000846c <File::exists()>
c000cf5e:	83 c4 10             	add    esp,0x10
c000cf61:	0f b6 c0             	movzx  eax,al
c000cf64:	85 c0                	test   eax,eax
c000cf66:	74 28                	je     c000cf90 <ACPI::open(int, int, void*)+0x2dc>
c000cf68:	83 ec 08             	sub    esp,0x8
c000cf6b:	6a 01                	push   0x1
c000cf6d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf74:	e8 01 93 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	83 ec 08             	sub    esp,0x8
c000cf7f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf86:	50                   	push   eax
c000cf87:	e8 40 95 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	90                   	nop
c000cf90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf98:	0f 84 ba fe ff ff    	je     c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cf9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa7:	83 c0 08             	add    eax,0x8
c000cfaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cfb6:	ff d0                	call   eax
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	e9 98 fe ff ff       	jmp    c000ce58 <ACPI::open(int, int, void*)+0x1a4>
c000cfc0:	83 ec 0c             	sub    esp,0xc
c000cfc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cfca:	50                   	push   eax
c000cfcb:	e8 d8 4f 01 00       	call   c0021fa8 <LinkedList<Device>::~LinkedList()>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000cfd9:	83 ec 08             	sub    esp,0x8
c000cfdc:	6a 01                	push   0x1
c000cfde:	68 6b 3c 02 c0       	push   0xc0023c6b
c000cfe3:	e8 92 92 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	83 ec 08             	sub    esp,0x8
c000cfee:	53                   	push   ebx
c000cfef:	50                   	push   eax
c000cff0:	e8 d7 94 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c000cff5:	83 c4 10             	add    esp,0x10
c000cff8:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cffd:	85 c0                	test   eax,eax
c000cfff:	0f 84 27 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d005:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000d00a:	85 c0                	test   eax,eax
c000d00c:	0f 84 1a 01 00 00    	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d012:	83 ec 0c             	sub    esp,0xc
c000d015:	68 88 3c 02 c0       	push   0xc0023c88
c000d01a:	e8 e6 02 00 00       	call   c000d305 <KeSetBootMessage(char const*)>
c000d01f:	83 c4 10             	add    esp,0x10
c000d022:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000d02d:	83 ec 0c             	sub    esp,0xc
c000d030:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000d037:	e8 5b 28 00 00       	call   c000f897 <malloc>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	89 c3                	mov    ebx,eax
c000d041:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000d046:	83 ec 04             	sub    esp,0x4
c000d049:	50                   	push   eax
c000d04a:	68 a5 3c 02 c0       	push   0xc0023ca5
c000d04f:	53                   	push   ebx
c000d050:	e8 35 b1 ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000d05f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d067:	74 1f                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d069:	83 ec 0c             	sub    esp,0xc
c000d06c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d073:	e8 f4 b3 ff ff       	call   c000846c <File::exists()>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	85 c0                	test   eax,eax
c000d080:	74 06                	je     c000d088 <ACPI::open(int, int, void*)+0x3d4>
c000d082:	b0 01                	mov    al,0x1
c000d084:	eb 06                	jmp    c000d08c <ACPI::open(int, int, void*)+0x3d8>
c000d086:	66 90                	xchg   ax,ax
c000d088:	b0 00                	mov    al,0x0
c000d08a:	66 90                	xchg   ax,ax
c000d08c:	0f b6 c0             	movzx  eax,al
c000d08f:	85 c0                	test   eax,eax
c000d091:	74 25                	je     c000d0b8 <ACPI::open(int, int, void*)+0x404>
c000d093:	83 ec 08             	sub    esp,0x8
c000d096:	6a 01                	push   0x1
c000d098:	68 a5 3c 02 c0       	push   0xc0023ca5
c000d09d:	e8 d8 91 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d0af:	50                   	push   eax
c000d0b0:	e8 17 94 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c000d0b5:	83 c4 10             	add    esp,0x10
c000d0b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0c0:	74 2a                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0c2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d0ca:	74 20                	je     c000d0ec <ACPI::open(int, int, void*)+0x438>
c000d0cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	83 c0 08             	add    eax,0x8
c000d0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0da:	83 ec 0c             	sub    esp,0xc
c000d0dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d0e4:	ff d0                	call   eax
c000d0e6:	83 c4 10             	add    esp,0x10
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d0f1:	83 ec 08             	sub    esp,0x8
c000d0f4:	68 c2 3c 02 c0       	push   0xc0023cc2
c000d0f9:	50                   	push   eax
c000d0fa:	e8 4d f2 ff ff       	call   c000c34c <findDataTable(unsigned char*, char*)>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d109:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d111:	74 19                	je     c000d12c <ACPI::open(int, int, void*)+0x478>
c000d113:	83 ec 08             	sub    esp,0x8
c000d116:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d11d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d124:	e8 73 fb ff ff       	call   c000cc9c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	b8 00 00 00 00       	mov    eax,0x0
c000d131:	81 c4 70 01 00 00    	add    esp,0x170
c000d137:	5b                   	pop    ebx
c000d138:	5e                   	pop    esi
c000d139:	5f                   	pop    edi
c000d13a:	c3                   	ret    
c000d13b:	90                   	nop

c000d13c <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d13c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d142:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d149:	89 c2                	mov    edx,eax
c000d14b:	c1 fa 1f             	sar    edx,0x1f
c000d14e:	83 ec 04             	sub    esp,0x4
c000d151:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d155:	51                   	push   ecx
c000d156:	52                   	push   edx
c000d157:	50                   	push   eax
c000d158:	e8 2f 25 00 00       	call   c000f68c <KeItoa(long long, char*)>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	83 ec 08             	sub    esp,0x8
c000d163:	68 90 3d 02 c0       	push   0xc0023d90
c000d168:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d16c:	50                   	push   eax
c000d16d:	e8 ce 34 ff ff       	call   c0000640 <strcpy>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	83 ec 08             	sub    esp,0x8
c000d178:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d17f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d183:	50                   	push   eax
c000d184:	e8 b7 36 ff ff       	call   c0000840 <strcat>
c000d189:	83 c4 10             	add    esp,0x10
c000d18c:	83 ec 08             	sub    esp,0x8
c000d18f:	68 9e 3d 02 c0       	push   0xc0023d9e
c000d194:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d198:	50                   	push   eax
c000d199:	e8 a2 36 ff ff       	call   c0000840 <strcat>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	83 ec 08             	sub    esp,0x8
c000d1a4:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d1ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1af:	50                   	push   eax
c000d1b0:	e8 8b 36 ff ff       	call   c0000840 <strcat>
c000d1b5:	83 c4 10             	add    esp,0x10
c000d1b8:	83 ec 08             	sub    esp,0x8
c000d1bb:	68 a1 3d 02 c0       	push   0xc0023da1
c000d1c0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1c4:	50                   	push   eax
c000d1c5:	e8 76 36 ff ff       	call   c0000840 <strcat>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	83 ec 08             	sub    esp,0x8
c000d1d0:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d1d7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1db:	50                   	push   eax
c000d1dc:	e8 5f 36 ff ff       	call   c0000840 <strcat>
c000d1e1:	83 c4 10             	add    esp,0x10
c000d1e4:	83 ec 08             	sub    esp,0x8
c000d1e7:	68 a1 3d 02 c0       	push   0xc0023da1
c000d1ec:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d1f0:	50                   	push   eax
c000d1f1:	e8 4a 36 ff ff       	call   c0000840 <strcat>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	83 ec 08             	sub    esp,0x8
c000d1fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d200:	50                   	push   eax
c000d201:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d205:	50                   	push   eax
c000d206:	e8 35 36 ff ff       	call   c0000840 <strcat>
c000d20b:	83 c4 10             	add    esp,0x10
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d215:	50                   	push   eax
c000d216:	e8 d9 2a 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	90                   	nop
c000d21f:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d225:	c3                   	ret    

c000d226 <KeInitialiseAtexit()>:
c000d226:	83 ec 10             	sub    esp,0x10
c000d229:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d233:	68 80 00 00 00       	push   0x80
c000d238:	6a 00                	push   0x0
c000d23a:	68 80 c0 02 c0       	push   0xc002c080
c000d23f:	e8 ac 32 ff ff       	call   c00004f0 <memset>
c000d244:	83 c4 1c             	add    esp,0x1c
c000d247:	c3                   	ret    

c000d248 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d248:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d24d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d251:	89 14 85 80 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f80],edx
c000d258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d25c:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d263:	40                   	inc    eax
c000d264:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d269:	83 f8 1f             	cmp    eax,0x1f
c000d26c:	7e 0d                	jle    c000d27b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d26e:	c7 44 24 04 a3 3d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023da3
c000d276:	e9 79 2a 00 00       	jmp    c000fcf4 <KePanic(char const*)>
c000d27b:	c3                   	ret    

c000d27c <KeExecuteAtexit()>:
c000d27c:	53                   	push   ebx
c000d27d:	31 db                	xor    ebx,ebx
c000d27f:	83 ec 08             	sub    esp,0x8
c000d282:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d288:	7e 28                	jle    c000d2b2 <KeExecuteAtexit()+0x36>
c000d28a:	8b 04 9d 80 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3f80]
c000d291:	85 c0                	test   eax,eax
c000d293:	74 1a                	je     c000d2af <KeExecuteAtexit()+0x33>
c000d295:	83 ec 0c             	sub    esp,0xc
c000d298:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d29f:	ff d0                	call   eax
c000d2a1:	c7 04 9d 80 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3f80],0x0
c000d2ac:	83 c4 10             	add    esp,0x10
c000d2af:	43                   	inc    ebx
c000d2b0:	eb d0                	jmp    c000d282 <KeExecuteAtexit()+0x6>
c000d2b2:	83 c4 08             	add    esp,0x8
c000d2b5:	5b                   	pop    ebx
c000d2b6:	c3                   	ret    
c000d2b7:	90                   	nop

c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d2b8:	8b 15 00 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c100
c000d2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2c2:	21 d0                	and    eax,edx
c000d2c4:	0f 95 c0             	setne  al
c000d2c7:	c3                   	ret    

c000d2c8 <KeInitialiseBootConfigurationFlags()>:
c000d2c8:	b8 00 05 00 00       	mov    eax,0x500
c000d2cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2cf:	a3 00 c1 02 c0       	mov    ds:0xc002c100,eax
c000d2d4:	90                   	nop
c000d2d5:	c3                   	ret    

c000d2d6 <KeDisplaySplashScreen()>:
c000d2d6:	53                   	push   ebx
c000d2d7:	bb 01 00 00 00       	mov    ebx,0x1
c000d2dc:	83 ec 08             	sub    esp,0x8
c000d2df:	43                   	inc    ebx
c000d2e0:	0f be 83 ba 3d 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc246]
c000d2e7:	85 c0                	test   eax,eax
c000d2e9:	74 15                	je     c000d300 <KeDisplaySplashScreen()+0x2a>
c000d2eb:	83 ec 0c             	sub    esp,0xc
c000d2ee:	6a 01                	push   0x1
c000d2f0:	53                   	push   ebx
c000d2f1:	6a 00                	push   0x0
c000d2f3:	6a 0f                	push   0xf
c000d2f5:	50                   	push   eax
c000d2f6:	e8 09 e4 00 00       	call   c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d2fb:	83 c4 20             	add    esp,0x20
c000d2fe:	eb df                	jmp    c000d2df <KeDisplaySplashScreen()+0x9>
c000d300:	83 c4 08             	add    esp,0x8
c000d303:	5b                   	pop    ebx
c000d304:	c3                   	ret    

c000d305 <KeSetBootMessage(char const*)>:
c000d305:	57                   	push   edi
c000d306:	56                   	push   esi
c000d307:	53                   	push   ebx
c000d308:	31 db                	xor    ebx,ebx
c000d30a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	6a 14                	push   0x14
c000d313:	53                   	push   ebx
c000d314:	43                   	inc    ebx
c000d315:	6a 00                	push   0x0
c000d317:	6a 00                	push   0x0
c000d319:	6a 20                	push   0x20
c000d31b:	e8 e4 e3 00 00       	call   c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d320:	83 c4 20             	add    esp,0x20
c000d323:	83 fb 50             	cmp    ebx,0x50
c000d326:	75 e6                	jne    c000d30e <KeSetBootMessage(char const*)+0x9>
c000d328:	83 ec 0c             	sub    esp,0xc
c000d32b:	56                   	push   esi
c000d32c:	e8 3f 32 ff ff       	call   c0000570 <strlen>
c000d331:	83 c4 10             	add    esp,0x10
c000d334:	29 c3                	sub    ebx,eax
c000d336:	d1 eb                	shr    ebx,1
c000d338:	89 df                	mov    edi,ebx
c000d33a:	89 f0                	mov    eax,esi
c000d33c:	29 d8                	sub    eax,ebx
c000d33e:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d342:	85 c0                	test   eax,eax
c000d344:	74 16                	je     c000d35c <KeSetBootMessage(char const*)+0x57>
c000d346:	83 ec 0c             	sub    esp,0xc
c000d349:	6a 14                	push   0x14
c000d34b:	57                   	push   edi
c000d34c:	47                   	inc    edi
c000d34d:	6a 00                	push   0x0
c000d34f:	6a 07                	push   0x7
c000d351:	50                   	push   eax
c000d352:	e8 ad e3 00 00       	call   c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d357:	83 c4 20             	add    esp,0x20
c000d35a:	eb de                	jmp    c000d33a <KeSetBootMessage(char const*)+0x35>
c000d35c:	5b                   	pop    ebx
c000d35d:	5e                   	pop    esi
c000d35e:	5f                   	pop    edi
c000d35f:	c3                   	ret    

c000d360 <__cxa_atexit>:
c000d360:	31 c0                	xor    eax,eax
c000d362:	c3                   	ret    

c000d363 <__cxa_finalize>:
c000d363:	c3                   	ret    

c000d364 <__stack_chk_fail>:
c000d364:	55                   	push   ebp
c000d365:	89 e5                	mov    ebp,esp
c000d367:	83 ec 10             	sub    esp,0x10
c000d36a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d36d:	68 cf 3d 02 c0       	push   0xc0023dcf
c000d372:	e8 05 9c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d377:	58                   	pop    eax
c000d378:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d37b:	5a                   	pop    edx
c000d37c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d37f:	68 cf 3d 02 c0       	push   0xc0023dcf
c000d384:	e8 f3 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d389:	c7 04 24 d7 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dd7
c000d390:	e8 5f 29 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d395:	83 c4 10             	add    esp,0x10
c000d398:	c9                   	leave  
c000d399:	c3                   	ret    

c000d39a <__cxa_pure_virtual>:
c000d39a:	83 ec 18             	sub    esp,0x18
c000d39d:	68 ef 3d 02 c0       	push   0xc0023def
c000d3a2:	e8 4d 29 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d3a7:	83 c4 1c             	add    esp,0x1c
c000d3aa:	c3                   	ret    

c000d3ab <operator new[](unsigned long)>:
c000d3ab:	e9 e7 24 00 00       	jmp    c000f897 <malloc>

c000d3b0 <operator delete(void*, unsigned long)>:
c000d3b0:	e9 02 25 00 00       	jmp    c000f8b7 <rfree>

c000d3b5 <operator delete[](void*)>:
c000d3b5:	e9 fd 24 00 00       	jmp    c000f8b7 <rfree>

c000d3ba <operator delete[](void*, unsigned long)>:
c000d3ba:	e9 f8 24 00 00       	jmp    c000f8b7 <rfree>
c000d3bf:	90                   	nop

c000d3c0 <CUnlockScheduler>:
c000d3c0:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000d3c8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d3cd:	85 c0                	test   eax,eax
c000d3cf:	75 03                	jne    c000d3d4 <CUnlockScheduler+0x14>
c000d3d1:	fb                   	sti    
c000d3d2:	66 90                	xchg   ax,ax
c000d3d4:	90                   	nop
c000d3d5:	c3                   	ret    
c000d3d6:	66 90                	xchg   ax,ax

c000d3d8 <CLockScheduler>:
c000d3d8:	fa                   	cli    
c000d3d9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000d3de:	83 c0 01             	add    eax,0x1
c000d3e1:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000d3e6:	90                   	nop
c000d3e7:	c3                   	ret    

c000d3e8 <CPrintf>:
c000d3e8:	83 ec 0c             	sub    esp,0xc
c000d3eb:	83 ec 08             	sub    esp,0x8
c000d3ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f2:	68 02 3e 02 c0       	push   0xc0023e02
c000d3f7:	e8 80 9b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000d3fc:	83 c4 10             	add    esp,0x10
c000d3ff:	90                   	nop
c000d400:	83 c4 0c             	add    esp,0xc
c000d403:	c3                   	ret    

c000d404 <CmOpen(char const*)>:
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	53                   	push   ebx
c000d407:	83 ec 1c             	sub    esp,0x1c
c000d40a:	6a 30                	push   0x30
c000d40c:	e8 86 24 00 00       	call   c000f897 <malloc>
c000d411:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d418:	89 c3                	mov    ebx,eax
c000d41a:	e8 78 24 00 00       	call   c000f897 <malloc>
c000d41f:	83 c4 0c             	add    esp,0xc
c000d422:	89 c6                	mov    esi,eax
c000d424:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000d42a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d42e:	50                   	push   eax
c000d42f:	e8 56 ad ff ff       	call   c000818a <File::File(char const*, Process*)>
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	89 33                	mov    DWORD PTR [ebx],esi
c000d439:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d43d:	50                   	push   eax
c000d43e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d442:	50                   	push   eax
c000d443:	56                   	push   esi
c000d444:	e8 61 b0 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c000d449:	5a                   	pop    edx
c000d44a:	59                   	pop    ecx
c000d44b:	6a 01                	push   0x1
c000d44d:	ff 33                	push   DWORD PTR [ebx]
c000d44f:	e8 54 ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d454:	5e                   	pop    esi
c000d455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d459:	e8 39 24 00 00       	call   c000f897 <malloc>
c000d45e:	5a                   	pop    edx
c000d45f:	89 c7                	mov    edi,eax
c000d461:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d465:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d467:	8b 10                	mov    edx,DWORD PTR [eax]
c000d469:	56                   	push   esi
c000d46a:	57                   	push   edi
c000d46b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d46f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d473:	50                   	push   eax
c000d474:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d477:	83 c4 14             	add    esp,0x14
c000d47a:	ff 33                	push   DWORD PTR [ebx]
c000d47c:	e8 85 ad ff ff       	call   c0008206 <File::close()>
c000d481:	59                   	pop    ecx
c000d482:	58                   	pop    eax
c000d483:	6a 13                	push   0x13
c000d485:	ff 33                	push   DWORD PTR [ebx]
c000d487:	e8 1c ad ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000d48c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d48e:	8b 10                	mov    edx,DWORD PTR [eax]
c000d490:	89 34 24             	mov    DWORD PTR [esp],esi
c000d493:	57                   	push   edi
c000d494:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d498:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d49c:	50                   	push   eax
c000d49d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d4a0:	83 c4 14             	add    esp,0x14
c000d4a3:	57                   	push   edi
c000d4a4:	e8 fe 23 00 00       	call   c000f8a7 <free>
c000d4a9:	83 c4 10             	add    esp,0x10
c000d4ac:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d4af:	75 10                	jne    c000d4c1 <CmOpen(char const*)+0xbd>
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	68 05 3e 02 c0       	push   0xc0023e05
c000d4b9:	e8 36 28 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d4c4:	50                   	push   eax
c000d4c5:	6a 00                	push   0x0
c000d4c7:	6a 00                	push   0x0
c000d4c9:	ff 33                	push   DWORD PTR [ebx]
c000d4cb:	e8 96 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4d4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d4d7:	57                   	push   edi
c000d4d8:	6a 00                	push   0x0
c000d4da:	6a 2b                	push   0x2b
c000d4dc:	50                   	push   eax
c000d4dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4e0:	83 c4 1c             	add    esp,0x1c
c000d4e3:	6a 00                	push   0x0
c000d4e5:	6a 00                	push   0x0
c000d4e7:	ff 33                	push   DWORD PTR [ebx]
c000d4e9:	e8 78 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d4ee:	83 c4 0c             	add    esp,0xc
c000d4f1:	6a 08                	push   0x8
c000d4f3:	68 27 3e 02 c0       	push   0xc0023e27
c000d4f8:	57                   	push   edi
c000d4f9:	e8 82 2e ff ff       	call   c0000380 <memcmp>
c000d4fe:	83 c4 10             	add    esp,0x10
c000d501:	85 c0                	test   eax,eax
c000d503:	74 10                	je     c000d515 <CmOpen(char const*)+0x111>
c000d505:	83 ec 0c             	sub    esp,0xc
c000d508:	68 30 3e 02 c0       	push   0xc0023e30
c000d50d:	e8 e2 27 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d512:	83 c4 10             	add    esp,0x10
c000d515:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d519:	89 d8                	mov    eax,ebx
c000d51b:	83 c4 10             	add    esp,0x10
c000d51e:	5b                   	pop    ebx
c000d51f:	5e                   	pop    esi
c000d520:	5f                   	pop    edi
c000d521:	c3                   	ret    

c000d522 <CmClose(Reghive_Tag*)>:
c000d522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d526:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d52a:	74 0b                	je     c000d537 <CmClose(Reghive_Tag*)+0x15>
c000d52c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d52e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d532:	e9 cf ac ff ff       	jmp    c0008206 <File::close()>
c000d537:	c3                   	ret    

c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d538:	53                   	push   ebx
c000d539:	83 ec 18             	sub    esp,0x18
c000d53c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d540:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d544:	74 29                	je     c000d56f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d546:	50                   	push   eax
c000d547:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d54c:	99                   	cdq    
c000d54d:	52                   	push   edx
c000d54e:	50                   	push   eax
c000d54f:	ff 33                	push   DWORD PTR [ebx]
c000d551:	e8 10 ad ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d556:	5a                   	pop    edx
c000d557:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d559:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d55d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d55f:	51                   	push   ecx
c000d560:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d564:	6a 00                	push   0x0
c000d566:	6a 2b                	push   0x2b
c000d568:	50                   	push   eax
c000d569:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d56c:	83 c4 20             	add    esp,0x20
c000d56f:	83 c4 18             	add    esp,0x18
c000d572:	5b                   	pop    ebx
c000d573:	c3                   	ret    

c000d574 <CmGetString(Reghive_Tag*, int, char*)>:
c000d574:	55                   	push   ebp
c000d575:	57                   	push   edi
c000d576:	56                   	push   esi
c000d577:	53                   	push   ebx
c000d578:	31 db                	xor    ebx,ebx
c000d57a:	83 ec 70             	sub    esp,0x70
c000d57d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d584:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d588:	50                   	push   eax
c000d589:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d590:	55                   	push   ebp
c000d591:	e8 a2 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d596:	83 c4 10             	add    esp,0x10
c000d599:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d59e:	c1 e0 08             	shl    eax,0x8
c000d5a1:	89 c2                	mov    edx,eax
c000d5a3:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d5a8:	09 d0                	or     eax,edx
c000d5aa:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d5af:	c1 e0 08             	shl    eax,0x8
c000d5b2:	09 d0                	or     eax,edx
c000d5b4:	74 25                	je     c000d5db <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d5b6:	6b fb 0d             	imul   edi,ebx,0xd
c000d5b9:	52                   	push   edx
c000d5ba:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d5be:	52                   	push   edx
c000d5bf:	50                   	push   eax
c000d5c0:	55                   	push   ebp
c000d5c1:	e8 72 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5c6:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d5ca:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d5d1:	b9 27 00 00 00       	mov    ecx,0x27
c000d5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5d8:	83 c4 10             	add    esp,0x10
c000d5db:	83 c3 03             	add    ebx,0x3
c000d5de:	83 fb 15             	cmp    ebx,0x15
c000d5e1:	75 b6                	jne    c000d599 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d5e3:	83 c4 6c             	add    esp,0x6c
c000d5e6:	5b                   	pop    ebx
c000d5e7:	5e                   	pop    esi
c000d5e8:	5f                   	pop    edi
c000d5e9:	5d                   	pop    ebp
c000d5ea:	c3                   	ret    

c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>:
c000d5eb:	83 ec 40             	sub    esp,0x40
c000d5ee:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5f2:	50                   	push   eax
c000d5f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5fb:	e8 38 ff ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d600:	83 c4 10             	add    esp,0x10
c000d603:	83 c8 ff             	or     eax,0xffffffff
c000d606:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d60b:	75 19                	jne    c000d626 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d60d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d612:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d617:	c1 e0 08             	shl    eax,0x8
c000d61a:	09 c2                	or     edx,eax
c000d61c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d621:	c1 e0 10             	shl    eax,0x10
c000d624:	09 d0                	or     eax,edx
c000d626:	83 c4 3c             	add    esp,0x3c
c000d629:	c3                   	ret    

c000d62a <CmGetNext(Reghive_Tag*, int)>:
c000d62a:	83 ec 40             	sub    esp,0x40
c000d62d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d631:	50                   	push   eax
c000d632:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d636:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d63a:	e8 f9 fe ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d63f:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d644:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d649:	c1 e0 08             	shl    eax,0x8
c000d64c:	09 c2                	or     edx,eax
c000d64e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d653:	83 c4 4c             	add    esp,0x4c
c000d656:	c1 e0 10             	shl    eax,0x10
c000d659:	09 d0                	or     eax,edx
c000d65b:	c3                   	ret    

c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d65c:	53                   	push   ebx
c000d65d:	83 ec 18             	sub    esp,0x18
c000d660:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d664:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d668:	74 29                	je     c000d693 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d66a:	50                   	push   eax
c000d66b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d670:	99                   	cdq    
c000d671:	52                   	push   edx
c000d672:	50                   	push   eax
c000d673:	ff 33                	push   DWORD PTR [ebx]
c000d675:	e8 ec ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d67a:	5a                   	pop    edx
c000d67b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d67d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d681:	8b 10                	mov    edx,DWORD PTR [eax]
c000d683:	51                   	push   ecx
c000d684:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d688:	6a 00                	push   0x0
c000d68a:	6a 2b                	push   0x2b
c000d68c:	50                   	push   eax
c000d68d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d690:	83 c4 20             	add    esp,0x20
c000d693:	83 c4 18             	add    esp,0x18
c000d696:	5b                   	pop    ebx
c000d697:	c3                   	ret    

c000d698 <CmFreeExtent(Reghive_Tag*, int)>:
c000d698:	53                   	push   ebx
c000d699:	83 ec 3c             	sub    esp,0x3c
c000d69c:	6a 2b                	push   0x2b
c000d69e:	6a 00                	push   0x0
c000d6a0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d6a4:	53                   	push   ebx
c000d6a5:	e8 46 2e ff ff       	call   c00004f0 <memset>
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	53                   	push   ebx
c000d6ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d6b6:	e8 a1 ff ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6bb:	83 c4 48             	add    esp,0x48
c000d6be:	5b                   	pop    ebx
c000d6bf:	c3                   	ret    

c000d6c0 <CmUpdateHeader(Reghive_Tag*)>:
c000d6c0:	83 ec 0c             	sub    esp,0xc
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d6cb:	74 10                	je     c000d6dd <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d6cd:	52                   	push   edx
c000d6ce:	8d 50 05             	lea    edx,[eax+0x5]
c000d6d1:	52                   	push   edx
c000d6d2:	6a 00                	push   0x0
c000d6d4:	50                   	push   eax
c000d6d5:	e8 82 ff ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d6da:	83 c4 10             	add    esp,0x10
c000d6dd:	83 c4 0c             	add    esp,0xc
c000d6e0:	c3                   	ret    

c000d6e1 <CmExpand(Reghive_Tag*, int)>:
c000d6e1:	57                   	push   edi
c000d6e2:	56                   	push   esi
c000d6e3:	83 ce ff             	or     esi,0xffffffff
c000d6e6:	53                   	push   ebx
c000d6e7:	83 ec 30             	sub    esp,0x30
c000d6ea:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6ee:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d6f2:	74 5f                	je     c000d753 <CmExpand(Reghive_Tag*, int)+0x72>
c000d6f4:	31 d2                	xor    edx,edx
c000d6f6:	31 f6                	xor    esi,esi
c000d6f8:	50                   	push   eax
c000d6f9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6fd:	52                   	push   edx
c000d6fe:	50                   	push   eax
c000d6ff:	ff 33                	push   DWORD PTR [ebx]
c000d701:	e8 60 ab ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d706:	83 c4 0c             	add    esp,0xc
c000d709:	6a 2b                	push   0x2b
c000d70b:	6a 00                	push   0x0
c000d70d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d711:	57                   	push   edi
c000d712:	e8 d9 2d ff ff       	call   c00004f0 <memset>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d71e:	7d 1b                	jge    c000d73b <CmExpand(Reghive_Tag*, int)+0x5a>
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d725:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d729:	8b 10                	mov    edx,DWORD PTR [eax]
c000d72b:	46                   	inc    esi
c000d72c:	51                   	push   ecx
c000d72d:	57                   	push   edi
c000d72e:	6a 00                	push   0x0
c000d730:	6a 2b                	push   0x2b
c000d732:	50                   	push   eax
c000d733:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d736:	83 c4 20             	add    esp,0x20
c000d739:	eb df                	jmp    c000d71a <CmExpand(Reghive_Tag*, int)+0x39>
c000d73b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d73f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d742:	83 ec 0c             	sub    esp,0xc
c000d745:	01 f2                	add    edx,esi
c000d747:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d74a:	53                   	push   ebx
c000d74b:	e8 70 ff ff ff       	call   c000d6c0 <CmUpdateHeader(Reghive_Tag*)>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	83 c4 30             	add    esp,0x30
c000d756:	89 f0                	mov    eax,esi
c000d758:	5b                   	pop    ebx
c000d759:	5e                   	pop    esi
c000d75a:	5f                   	pop    edi
c000d75b:	c3                   	ret    

c000d75c <CmFindUnusedExtent(Reghive_Tag*)>:
c000d75c:	55                   	push   ebp
c000d75d:	57                   	push   edi
c000d75e:	56                   	push   esi
c000d75f:	53                   	push   ebx
c000d760:	83 cb ff             	or     ebx,0xffffffff
c000d763:	83 ec 1c             	sub    esp,0x1c
c000d766:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d76a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d76e:	74 68                	je     c000d7d8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d770:	be 2b 00 00 00       	mov    esi,0x2b
c000d775:	51                   	push   ecx
c000d776:	31 ff                	xor    edi,edi
c000d778:	6a 00                	push   0x0
c000d77a:	31 db                	xor    ebx,ebx
c000d77c:	6a 00                	push   0x0
c000d77e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d781:	e8 e0 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d786:	83 c4 10             	add    esp,0x10
c000d789:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d78c:	76 3b                	jbe    c000d7c9 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d78e:	83 ec 0c             	sub    esp,0xc
c000d791:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d794:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d798:	8b 10                	mov    edx,DWORD PTR [eax]
c000d79a:	51                   	push   ecx
c000d79b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d79f:	51                   	push   ecx
c000d7a0:	6a 00                	push   0x0
c000d7a2:	6a 01                	push   0x1
c000d7a4:	50                   	push   eax
c000d7a5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d7a8:	83 c4 20             	add    esp,0x20
c000d7ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d7b0:	74 26                	je     c000d7d8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d7b2:	43                   	inc    ebx
c000d7b3:	52                   	push   edx
c000d7b4:	57                   	push   edi
c000d7b5:	56                   	push   esi
c000d7b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d7b9:	e8 a8 aa ff ff       	call   c0008266 <File::seek(unsigned long long)>
c000d7be:	83 c6 2b             	add    esi,0x2b
c000d7c1:	83 d7 00             	adc    edi,0x0
c000d7c4:	83 c4 10             	add    esp,0x10
c000d7c7:	eb c0                	jmp    c000d789 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d7c9:	50                   	push   eax
c000d7ca:	50                   	push   eax
c000d7cb:	6a 40                	push   0x40
c000d7cd:	55                   	push   ebp
c000d7ce:	e8 0e ff ff ff       	call   c000d6e1 <CmExpand(Reghive_Tag*, int)>
c000d7d3:	83 c4 10             	add    esp,0x10
c000d7d6:	89 c3                	mov    ebx,eax
c000d7d8:	83 c4 1c             	add    esp,0x1c
c000d7db:	89 d8                	mov    eax,ebx
c000d7dd:	5b                   	pop    ebx
c000d7de:	5e                   	pop    esi
c000d7df:	5f                   	pop    edi
c000d7e0:	5d                   	pop    ebp
c000d7e1:	c3                   	ret    

c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7ec:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d7f3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7fa:	e8 5d ff ff ff       	call   c000d75c <CmFindUnusedExtent(Reghive_Tag*)>
c000d7ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d803:	83 c4 0c             	add    esp,0xc
c000d806:	6a 2b                	push   0x2b
c000d808:	6a 00                	push   0x0
c000d80a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d80e:	55                   	push   ebp
c000d80f:	e8 dc 2c ff ff       	call   c00004f0 <memset>
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	85 db                	test   ebx,ebx
c000d819:	74 12                	je     c000d82d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d81b:	51                   	push   ecx
c000d81c:	55                   	push   ebp
c000d81d:	53                   	push   ebx
c000d81e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d825:	e8 0e fd ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d82a:	83 c4 10             	add    esp,0x10
c000d82d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d831:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d838:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d83d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d83f:	85 db                	test   ebx,ebx
c000d841:	74 49                	je     c000d88c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d843:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d848:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d84d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d851:	c1 e0 08             	shl    eax,0x8
c000d854:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d85a:	09 c8                	or     eax,ecx
c000d85c:	74 11                	je     c000d86f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d85e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d862:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d866:	c1 e8 10             	shr    eax,0x10
c000d869:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d86d:	eb 0f                	jmp    c000d87e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d86f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d874:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d879:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d87e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d882:	c1 ea 08             	shr    edx,0x8
c000d885:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d88a:	eb 0f                	jmp    c000d89b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d88c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d891:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d896:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d89b:	52                   	push   edx
c000d89c:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d8a0:	50                   	push   eax
c000d8a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8a5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8ac:	e8 ab fd ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8b1:	83 c4 10             	add    esp,0x10
c000d8b4:	85 db                	test   ebx,ebx
c000d8b6:	74 12                	je     c000d8ca <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d8b8:	50                   	push   eax
c000d8b9:	55                   	push   ebp
c000d8ba:	53                   	push   ebx
c000d8bb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8c2:	e8 95 fd ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8c7:	83 c4 10             	add    esp,0x10
c000d8ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8ce:	83 c4 7c             	add    esp,0x7c
c000d8d1:	5b                   	pop    ebx
c000d8d2:	5e                   	pop    esi
c000d8d3:	5f                   	pop    edi
c000d8d4:	5d                   	pop    ebp
c000d8d5:	c3                   	ret    

c000d8d6 <CmSetString(Reghive_Tag*, int, char const*)>:
c000d8d6:	55                   	push   ebp
c000d8d7:	57                   	push   edi
c000d8d8:	56                   	push   esi
c000d8d9:	53                   	push   ebx
c000d8da:	bb 27 00 00 00       	mov    ebx,0x27
c000d8df:	81 ec 88 00 00 00    	sub    esp,0x88
c000d8e5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d8ec:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d8f3:	e8 78 2c ff ff       	call   c0000570 <strlen>
c000d8f8:	8d 48 26             	lea    ecx,[eax+0x26]
c000d8fb:	89 c8                	mov    eax,ecx
c000d8fd:	99                   	cdq    
c000d8fe:	f7 fb                	idiv   ebx
c000d900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d904:	83 c4 10             	add    esp,0x10
c000d907:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d90d:	7e 10                	jle    c000d91f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d90f:	83 ec 0c             	sub    esp,0xc
c000d912:	68 4b 3e 02 c0       	push   0xc0023e4b
c000d917:	e8 d8 23 00 00       	call   c000fcf4 <KePanic(char const*)>
c000d91c:	83 c4 10             	add    esp,0x10
c000d91f:	31 ff                	xor    edi,edi
c000d921:	50                   	push   eax
c000d922:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d926:	53                   	push   ebx
c000d927:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d92e:	56                   	push   esi
c000d92f:	e8 04 fc ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d934:	83 c4 10             	add    esp,0x10
c000d937:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d93b:	89 d0                	mov    eax,edx
c000d93d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d941:	c1 e0 08             	shl    eax,0x8
c000d944:	09 c2                	or     edx,eax
c000d946:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d94a:	c1 e2 08             	shl    edx,0x8
c000d94d:	09 c2                	or     edx,eax
c000d94f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d953:	7e 76                	jle    c000d9cb <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d955:	85 d2                	test   edx,edx
c000d957:	75 25                	jne    c000d97e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d959:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d95e:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d962:	50                   	push   eax
c000d963:	6a 00                	push   0x0
c000d965:	6a 00                	push   0x0
c000d967:	56                   	push   esi
c000d968:	e8 75 fe ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d96d:	83 c4 10             	add    esp,0x10
c000d970:	89 c2                	mov    edx,eax
c000d972:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d975:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d978:	c1 f8 10             	sar    eax,0x10
c000d97b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d97e:	55                   	push   ebp
c000d97f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d983:	55                   	push   ebp
c000d984:	52                   	push   edx
c000d985:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d989:	56                   	push   esi
c000d98a:	e8 a9 fb ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d98f:	83 c4 0c             	add    esp,0xc
c000d992:	6a 27                	push   0x27
c000d994:	6a 00                	push   0x0
c000d996:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d99a:	51                   	push   ecx
c000d99b:	e8 50 2b ff ff       	call   c00004f0 <memset>
c000d9a0:	83 c4 0c             	add    esp,0xc
c000d9a3:	6b c7 27             	imul   eax,edi,0x27
c000d9a6:	6a 27                	push   0x27
c000d9a8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d9af:	50                   	push   eax
c000d9b0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d9b4:	51                   	push   ecx
c000d9b5:	e8 c6 2c ff ff       	call   c0000680 <strncpy>
c000d9ba:	83 c4 0c             	add    esp,0xc
c000d9bd:	55                   	push   ebp
c000d9be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d9c2:	52                   	push   edx
c000d9c3:	56                   	push   esi
c000d9c4:	e8 93 fc ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c9:	eb 19                	jmp    c000d9e4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	74 18                	je     c000d9e7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d9cf:	51                   	push   ecx
c000d9d0:	51                   	push   ecx
c000d9d1:	52                   	push   edx
c000d9d2:	56                   	push   esi
c000d9d3:	e8 c0 fc ff ff       	call   c000d698 <CmFreeExtent(Reghive_Tag*, int)>
c000d9d8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d9dc:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d9e0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d9e4:	83 c4 10             	add    esp,0x10
c000d9e7:	47                   	inc    edi
c000d9e8:	83 c3 03             	add    ebx,0x3
c000d9eb:	83 ff 07             	cmp    edi,0x7
c000d9ee:	0f 85 43 ff ff ff    	jne    c000d937 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d9f4:	50                   	push   eax
c000d9f5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d9f9:	50                   	push   eax
c000d9fa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000da01:	56                   	push   esi
c000da02:	e8 55 fc ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da07:	81 c4 8c 00 00 00    	add    esp,0x8c
c000da0d:	5b                   	pop    ebx
c000da0e:	5e                   	pop    esi
c000da0f:	5f                   	pop    edi
c000da10:	5d                   	pop    ebp
c000da11:	c3                   	ret    

c000da12 <CmGetMatch(char*, char*, bool, bool*)>:
c000da12:	56                   	push   esi
c000da13:	53                   	push   ebx
c000da14:	50                   	push   eax
c000da15:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da19:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000da1e:	74 25                	je     c000da45 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000da20:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da23:	31 db                	xor    ebx,ebx
c000da25:	50                   	push   eax
c000da26:	50                   	push   eax
c000da27:	8d 04 9d 40 62 02 c0 	lea    eax,[ebx*4-0x3ffd9dc0]
c000da2e:	50                   	push   eax
c000da2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da33:	e8 18 2d ff ff       	call   c0000750 <strcmp>
c000da38:	83 c4 10             	add    esp,0x10
c000da3b:	85 c0                	test   eax,eax
c000da3d:	74 2e                	je     c000da6d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da3f:	43                   	inc    ebx
c000da40:	83 fb 3f             	cmp    ebx,0x3f
c000da43:	75 e0                	jne    c000da25 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000da45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da48:	31 db                	xor    ebx,ebx
c000da4a:	8d 04 9d 40 62 02 c0 	lea    eax,[ebx*4-0x3ffd9dc0]
c000da51:	51                   	push   ecx
c000da52:	51                   	push   ecx
c000da53:	50                   	push   eax
c000da54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da58:	e8 f3 2c ff ff       	call   c0000750 <strcmp>
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	85 c0                	test   eax,eax
c000da62:	74 09                	je     c000da6d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da64:	43                   	inc    ebx
c000da65:	83 fb 3f             	cmp    ebx,0x3f
c000da68:	75 e0                	jne    c000da4a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da6a:	83 cb ff             	or     ebx,0xffffffff
c000da6d:	89 d8                	mov    eax,ebx
c000da6f:	5a                   	pop    edx
c000da70:	5b                   	pop    ebx
c000da71:	5e                   	pop    esi
c000da72:	c3                   	ret    

c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da73:	55                   	push   ebp
c000da74:	31 c0                	xor    eax,eax
c000da76:	57                   	push   edi
c000da77:	56                   	push   esi
c000da78:	53                   	push   ebx
c000da79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da81:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da83:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da87:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da8e:	83 fd 1f             	cmp    ebp,0x1f
c000da91:	7f 0b                	jg     c000da9e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da93:	0f b6 c2             	movzx  eax,dl
c000da96:	d3 e0                	shl    eax,cl
c000da98:	09 07                	or     DWORD PTR [edi],eax
c000da9a:	b0 01                	mov    al,0x1
c000da9c:	01 33                	add    DWORD PTR [ebx],esi
c000da9e:	5b                   	pop    ebx
c000da9f:	5e                   	pop    esi
c000daa0:	5f                   	pop    edi
c000daa1:	5d                   	pop    ebp
c000daa2:	c3                   	ret    

c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000daa3:	57                   	push   edi
c000daa4:	56                   	push   esi
c000daa5:	53                   	push   ebx
c000daa6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000daaa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000daae:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000dab2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000dab6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000dab8:	7c 17                	jl     c000dad1 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000daba:	8b 17                	mov    edx,DWORD PTR [edi]
c000dabc:	b8 01 00 00 00       	mov    eax,0x1
c000dac1:	d3 e0                	shl    eax,cl
c000dac3:	48                   	dec    eax
c000dac4:	21 d0                	and    eax,edx
c000dac6:	d3 ea                	shr    edx,cl
c000dac8:	89 17                	mov    DWORD PTR [edi],edx
c000daca:	29 0b                	sub    DWORD PTR [ebx],ecx
c000dacc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000dacf:	eb 05                	jmp    c000dad6 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000dad1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000dad4:	31 c0                	xor    eax,eax
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	c3                   	ret    

c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000dada:	83 ec 40             	sub    esp,0x40
c000dadd:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dae1:	50                   	push   eax
c000dae2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dae6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000daea:	e8 49 fa ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daef:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000daf3:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000daf7:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000dafb:	89 10                	mov    DWORD PTR [eax],edx
c000dafd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000db00:	83 c4 4c             	add    esp,0x4c
c000db03:	c3                   	ret    

c000db04 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000db04:	55                   	push   ebp
c000db05:	57                   	push   edi
c000db06:	56                   	push   esi
c000db07:	53                   	push   ebx
c000db08:	83 ec 40             	sub    esp,0x40
c000db0b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000db0f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000db13:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000db17:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000db1b:	53                   	push   ebx
c000db1c:	56                   	push   esi
c000db1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db21:	e8 12 fa ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db26:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000db2a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000db2e:	83 c4 0c             	add    esp,0xc
c000db31:	53                   	push   ebx
c000db32:	56                   	push   esi
c000db33:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000db37:	e8 20 fb ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000db3c:	83 c4 4c             	add    esp,0x4c
c000db3f:	5b                   	pop    ebx
c000db40:	5e                   	pop    esi
c000db41:	5f                   	pop    edi
c000db42:	5d                   	pop    ebp
c000db43:	c3                   	ret    

c000db44 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000db44:	55                   	push   ebp
c000db45:	57                   	push   edi
c000db46:	56                   	push   esi
c000db47:	31 f6                	xor    esi,esi
c000db49:	53                   	push   ebx
c000db4a:	31 db                	xor    ebx,ebx
c000db4c:	83 ec 40             	sub    esp,0x40
c000db4f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000db57:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db5f:	6a 12                	push   0x12
c000db61:	68 ee 00 00 00       	push   0xee
c000db66:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db6a:	e8 81 29 ff ff       	call   c00004f0 <memset>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db76:	6a 08                	push   0x8
c000db78:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db7c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db80:	50                   	push   eax
c000db81:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db85:	55                   	push   ebp
c000db86:	57                   	push   edi
c000db87:	e8 e7 fe ff ff       	call   c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db93:	50                   	push   eax
c000db94:	6a 06                	push   0x6
c000db96:	55                   	push   ebp
c000db97:	57                   	push   edi
c000db98:	e8 06 ff ff ff       	call   c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db9d:	83 c4 10             	add    esp,0x10
c000dba0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dba5:	74 07                	je     c000dbae <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dba7:	46                   	inc    esi
c000dba8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dbac:	eb e1                	jmp    c000db8f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dbae:	43                   	inc    ebx
c000dbaf:	83 fb 12             	cmp    ebx,0x12
c000dbb2:	75 c2                	jne    c000db76 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dbb4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dbb8:	31 db                	xor    ebx,ebx
c000dbba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000dbbd:	50                   	push   eax
c000dbbe:	50                   	push   eax
c000dbbf:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000dbc4:	43                   	inc    ebx
c000dbc5:	8d 04 85 40 62 02 c0 	lea    eax,[eax*4-0x3ffd9dc0]
c000dbcc:	50                   	push   eax
c000dbcd:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000dbd1:	e8 6a 2c ff ff       	call   c0000840 <strcat>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	83 fb 18             	cmp    ebx,0x18
c000dbdc:	75 df                	jne    c000dbbd <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dbde:	83 c4 3c             	add    esp,0x3c
c000dbe1:	31 c0                	xor    eax,eax
c000dbe3:	5b                   	pop    ebx
c000dbe4:	5e                   	pop    esi
c000dbe5:	5f                   	pop    edi
c000dbe6:	5d                   	pop    ebp
c000dbe7:	c3                   	ret    

c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dbe8:	83 ec 40             	sub    esp,0x40
c000dbeb:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dbef:	50                   	push   eax
c000dbf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dbf8:	e8 3b f9 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dbfd:	58                   	pop    eax
c000dbfe:	5a                   	pop    edx
c000dbff:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dc03:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dc07:	50                   	push   eax
c000dc08:	e8 37 ff ff ff       	call   c000db44 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dc0d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dc12:	83 c4 4c             	add    esp,0x4c
c000dc15:	c3                   	ret    

c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dc16:	55                   	push   ebp
c000dc17:	57                   	push   edi
c000dc18:	56                   	push   esi
c000dc19:	53                   	push   ebx
c000dc1a:	31 db                	xor    ebx,ebx
c000dc1c:	83 ec 70             	sub    esp,0x70
c000dc1f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dc26:	6a 30                	push   0x30
c000dc28:	6a 00                	push   0x0
c000dc2a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dc2e:	56                   	push   esi
c000dc2f:	e8 bc 28 ff ff       	call   c00004f0 <memset>
c000dc34:	83 c4 10             	add    esp,0x10
c000dc37:	83 ec 0c             	sub    esp,0xc
c000dc3a:	57                   	push   edi
c000dc3b:	e8 30 29 ff ff       	call   c0000570 <strlen>
c000dc40:	83 c4 10             	add    esp,0x10
c000dc43:	39 d8                	cmp    eax,ebx
c000dc45:	76 16                	jbe    c000dc5d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dc4e:	50                   	push   eax
c000dc4f:	e8 dc 2c ff ff       	call   c0000930 <toupper>
c000dc54:	83 c4 10             	add    esp,0x10
c000dc57:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dc5a:	43                   	inc    ebx
c000dc5b:	eb da                	jmp    c000dc37 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc5d:	31 f6                	xor    esi,esi
c000dc5f:	52                   	push   edx
c000dc60:	31 ff                	xor    edi,edi
c000dc62:	6a 18                	push   0x18
c000dc64:	6a 3f                	push   0x3f
c000dc66:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc6a:	50                   	push   eax
c000dc6b:	e8 80 28 ff ff       	call   c00004f0 <memset>
c000dc70:	83 c4 10             	add    esp,0x10
c000dc73:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc77:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc7b:	84 c0                	test   al,al
c000dc7d:	0f 84 b0 00 00 00    	je     c000dd33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc83:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc87:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc8c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc90:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc95:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc98:	83 ec 0c             	sub    esp,0xc
c000dc9b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc9f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dca3:	53                   	push   ebx
c000dca4:	e8 c7 28 ff ff       	call   c0000570 <strlen>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	85 c0                	test   eax,eax
c000dcae:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dcb2:	74 0b                	je     c000dcbf <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dcb4:	50                   	push   eax
c000dcb5:	6a 01                	push   0x1
c000dcb7:	53                   	push   ebx
c000dcb8:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dcbc:	50                   	push   eax
c000dcbd:	eb 0a                	jmp    c000dcc9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dcbf:	50                   	push   eax
c000dcc0:	6a 00                	push   0x0
c000dcc2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dcc6:	50                   	push   eax
c000dcc7:	6a 00                	push   0x0
c000dcc9:	e8 44 fd ff ff       	call   c000da12 <CmGetMatch(char*, char*, bool, bool*)>
c000dcce:	83 c4 10             	add    esp,0x10
c000dcd1:	83 f8 ff             	cmp    eax,0xffffffff
c000dcd4:	75 1a                	jne    c000dcf0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dcd6:	83 ec 0c             	sub    esp,0xc
c000dcd9:	68 60 3e 02 c0       	push   0xc0023e60
c000dcde:	e8 11 20 00 00       	call   c000fcf4 <KePanic(char const*)>
c000dce3:	83 c4 10             	add    esp,0x10
c000dce6:	b8 02 00 00 00       	mov    eax,0x2
c000dceb:	e9 bc 00 00 00       	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcf0:	83 ff 18             	cmp    edi,0x18
c000dcf3:	75 1a                	jne    c000dd0f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dcf5:	83 ec 0c             	sub    esp,0xc
c000dcf8:	68 75 3e 02 c0       	push   0xc0023e75
c000dcfd:	e8 f2 1f 00 00       	call   c000fcf4 <KePanic(char const*)>
c000dd02:	83 c4 10             	add    esp,0x10
c000dd05:	b8 01 00 00 00       	mov    eax,0x1
c000dd0a:	e9 9d 00 00 00       	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd0f:	47                   	inc    edi
c000dd10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd15:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dd19:	74 02                	je     c000dd1d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dd1b:	89 ee                	mov    esi,ebp
c000dd1d:	83 ec 0c             	sub    esp,0xc
c000dd20:	53                   	push   ebx
c000dd21:	e8 4a 28 ff ff       	call   c0000570 <strlen>
c000dd26:	83 c4 10             	add    esp,0x10
c000dd29:	85 c0                	test   eax,eax
c000dd2b:	74 06                	je     c000dd33 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dd2d:	46                   	inc    esi
c000dd2e:	e9 40 ff ff ff       	jmp    c000dc73 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dd33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dd3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dd43:	31 f6                	xor    esi,esi
c000dd45:	50                   	push   eax
c000dd46:	31 ff                	xor    edi,edi
c000dd48:	6a 12                	push   0x12
c000dd4a:	68 ee 00 00 00       	push   0xee
c000dd4f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dd56:	e8 95 27 ff ff       	call   c00004f0 <memset>
c000dd5b:	83 c4 10             	add    esp,0x10
c000dd5e:	83 fe 17             	cmp    esi,0x17
c000dd61:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd65:	7e 26                	jle    c000dd8d <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd67:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd6b:	50                   	push   eax
c000dd6c:	6a 08                	push   0x8
c000dd6e:	55                   	push   ebp
c000dd6f:	53                   	push   ebx
c000dd70:	e8 2e fd ff ff       	call   c000daa3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd75:	83 c4 10             	add    esp,0x10
c000dd78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd7d:	74 26                	je     c000dda5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd7f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd86:	4e                   	dec    esi
c000dd87:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd8a:	47                   	inc    edi
c000dd8b:	eb 1c                	jmp    c000dda9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd8d:	6a 06                	push   0x6
c000dd8f:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd94:	50                   	push   eax
c000dd95:	55                   	push   ebp
c000dd96:	53                   	push   ebx
c000dd97:	e8 d7 fc ff ff       	call   c000da73 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd9c:	83 c4 10             	add    esp,0x10
c000dd9f:	84 c0                	test   al,al
c000dda1:	75 06                	jne    c000dda9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dda3:	eb c2                	jmp    c000dd67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dda5:	31 c0                	xor    eax,eax
c000dda7:	eb 03                	jmp    c000ddac <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dda9:	46                   	inc    esi
c000ddaa:	eb b2                	jmp    c000dd5e <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000ddac:	83 c4 6c             	add    esp,0x6c
c000ddaf:	5b                   	pop    ebx
c000ddb0:	5e                   	pop    esi
c000ddb1:	5f                   	pop    edi
c000ddb2:	5d                   	pop    ebp
c000ddb3:	c3                   	ret    

c000ddb4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000ddb4:	53                   	push   ebx
c000ddb5:	83 ec 3c             	sub    esp,0x3c
c000ddb8:	6a 2b                	push   0x2b
c000ddba:	6a 00                	push   0x0
c000ddbc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddc0:	53                   	push   ebx
c000ddc1:	e8 2a 27 ff ff       	call   c00004f0 <memset>
c000ddc6:	58                   	pop    eax
c000ddc7:	5a                   	pop    edx
c000ddc8:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddcc:	50                   	push   eax
c000ddcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddd1:	e8 40 fe ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddd6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dddb:	83 c4 0c             	add    esp,0xc
c000ddde:	6a 15                	push   0x15
c000dde0:	6a 00                	push   0x0
c000dde2:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dde6:	50                   	push   eax
c000dde7:	e8 04 27 ff ff       	call   c00004f0 <memset>
c000ddec:	53                   	push   ebx
c000dded:	6a 00                	push   0x0
c000ddef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf7:	e8 e6 f9 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddfc:	83 c4 58             	add    esp,0x58
c000ddff:	5b                   	pop    ebx
c000de00:	c3                   	ret    

c000de01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000de01:	56                   	push   esi
c000de02:	53                   	push   ebx
c000de03:	83 ec 48             	sub    esp,0x48
c000de06:	6a 12                	push   0x12
c000de08:	68 ff 00 00 00       	push   0xff
c000de0d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000de11:	56                   	push   esi
c000de12:	e8 d9 26 ff ff       	call   c00004f0 <memset>
c000de17:	5a                   	pop    edx
c000de18:	59                   	pop    ecx
c000de19:	56                   	push   esi
c000de1a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de1e:	e8 f3 fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de23:	83 c4 10             	add    esp,0x10
c000de26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de2a:	85 db                	test   ebx,ebx
c000de2c:	74 42                	je     c000de70 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000de2e:	50                   	push   eax
c000de2f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000de33:	50                   	push   eax
c000de34:	53                   	push   ebx
c000de35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de39:	e8 fa f6 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de3e:	83 c4 0c             	add    esp,0xc
c000de41:	6a 12                	push   0x12
c000de43:	8d 44 24 21          	lea    eax,[esp+0x21]
c000de47:	50                   	push   eax
c000de48:	56                   	push   esi
c000de49:	e8 32 25 ff ff       	call   c0000380 <memcmp>
c000de4e:	83 c4 10             	add    esp,0x10
c000de51:	85 c0                	test   eax,eax
c000de53:	74 1e                	je     c000de73 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000de55:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000de5a:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de5f:	c1 e3 08             	shl    ebx,0x8
c000de62:	09 d8                	or     eax,ebx
c000de64:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de69:	c1 e3 10             	shl    ebx,0x10
c000de6c:	09 c3                	or     ebx,eax
c000de6e:	eb ba                	jmp    c000de2a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de70:	83 cb ff             	or     ebx,0xffffffff
c000de73:	89 d8                	mov    eax,ebx
c000de75:	83 c4 44             	add    esp,0x44
c000de78:	5b                   	pop    ebx
c000de79:	5e                   	pop    esi
c000de7a:	c3                   	ret    

c000de7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de7b:	57                   	push   edi
c000de7c:	56                   	push   esi
c000de7d:	53                   	push   ebx
c000de7e:	83 ec 34             	sub    esp,0x34
c000de81:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de85:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de89:	6a 2b                	push   0x2b
c000de8b:	6a 00                	push   0x0
c000de8d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de91:	53                   	push   ebx
c000de92:	e8 59 26 ff ff       	call   c00004f0 <memset>
c000de97:	58                   	pop    eax
c000de98:	5a                   	pop    edx
c000de99:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de9d:	50                   	push   eax
c000de9e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dea2:	e8 6f fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dea7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000deab:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000deaf:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000deb3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000deb7:	53                   	push   ebx
c000deb8:	6a 00                	push   0x0
c000deba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000debe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dec2:	e8 1b f9 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dec7:	83 c4 50             	add    esp,0x50
c000deca:	5b                   	pop    ebx
c000decb:	5e                   	pop    esi
c000decc:	5f                   	pop    edi
c000decd:	c3                   	ret    

c000dece <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dece:	55                   	push   ebp
c000decf:	57                   	push   edi
c000ded0:	56                   	push   esi
c000ded1:	53                   	push   ebx
c000ded2:	83 ec 40             	sub    esp,0x40
c000ded5:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000ded9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dedd:	6a 2b                	push   0x2b
c000dedf:	6a 00                	push   0x0
c000dee1:	8d 74 24 11          	lea    esi,[esp+0x11]
c000dee5:	56                   	push   esi
c000dee6:	e8 05 26 ff ff       	call   c00004f0 <memset>
c000deeb:	5f                   	pop    edi
c000deec:	89 ef                	mov    edi,ebp
c000deee:	58                   	pop    eax
c000deef:	8d 44 24 11          	lea    eax,[esp+0x11]
c000def3:	50                   	push   eax
c000def4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000def8:	e8 19 fd ff ff       	call   c000dc16 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000defd:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000df02:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000df07:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000df0c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 ed                	test   ebp,ebp
c000df16:	74 14                	je     c000df2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df18:	51                   	push   ecx
c000df19:	51                   	push   ecx
c000df1a:	57                   	push   edi
c000df1b:	53                   	push   ebx
c000df1c:	e8 09 f7 ff ff       	call   c000d62a <CmGetNext(Reghive_Tag*, int)>
c000df21:	83 c4 10             	add    esp,0x10
c000df24:	85 c0                	test   eax,eax
c000df26:	74 04                	je     c000df2c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000df28:	89 c7                	mov    edi,eax
c000df2a:	eb e8                	jmp    c000df14 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000df2c:	56                   	push   esi
c000df2d:	6a 00                	push   0x0
c000df2f:	57                   	push   edi
c000df30:	53                   	push   ebx
c000df31:	e8 ac f8 ff ff       	call   c000d7e2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000df36:	83 c4 0c             	add    esp,0xc
c000df39:	89 c7                	mov    edi,eax
c000df3b:	56                   	push   esi
c000df3c:	50                   	push   eax
c000df3d:	53                   	push   ebx
c000df3e:	e8 f5 f5 ff ff       	call   c000d538 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000df43:	58                   	pop    eax
c000df44:	5a                   	pop    edx
c000df45:	6a 6c                	push   0x6c
c000df47:	6a 00                	push   0x0
c000df49:	6a 00                	push   0x0
c000df4b:	68 86 3e 02 c0       	push   0xc0023e86
c000df50:	57                   	push   edi
c000df51:	53                   	push   ebx
c000df52:	e8 24 ff ff ff       	call   c000de7b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000df57:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000df5b:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df5f:	c1 e8 10             	shr    eax,0x10
c000df62:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df66:	83 c4 1c             	add    esp,0x1c
c000df69:	56                   	push   esi
c000df6a:	57                   	push   edi
c000df6b:	53                   	push   ebx
c000df6c:	e8 eb f6 ff ff       	call   c000d65c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df71:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df76:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df7b:	c1 e0 08             	shl    eax,0x8
c000df7e:	09 c2                	or     edx,eax
c000df80:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df85:	83 c4 4c             	add    esp,0x4c
c000df88:	c1 e0 10             	shl    eax,0x10
c000df8b:	5b                   	pop    ebx
c000df8c:	09 d0                	or     eax,edx
c000df8e:	5e                   	pop    esi
c000df8f:	5f                   	pop    edi
c000df90:	5d                   	pop    ebp
c000df91:	c3                   	ret    

c000df92 <zStrtok(char*, char const*)>:
c000df92:	55                   	push   ebp
c000df93:	57                   	push   edi
c000df94:	56                   	push   esi
c000df95:	53                   	push   ebx
c000df96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df9e:	85 db                	test   ebx,ebx
c000dfa0:	74 2f                	je     c000dfd1 <zStrtok(char*, char const*)+0x3f>
c000dfa2:	85 c0                	test   eax,eax
c000dfa4:	75 09                	jne    c000dfaf <zStrtok(char*, char const*)+0x1d>
c000dfa6:	a1 04 c1 02 c0       	mov    eax,ds:0xc002c104
c000dfab:	85 c0                	test   eax,eax
c000dfad:	74 50                	je     c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfaf:	31 c9                	xor    ecx,ecx
c000dfb1:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dfb5:	74 03                	je     c000dfba <zStrtok(char*, char const*)+0x28>
c000dfb7:	41                   	inc    ecx
c000dfb8:	eb f7                	jmp    c000dfb1 <zStrtok(char*, char const*)+0x1f>
c000dfba:	31 d2                	xor    edx,edx
c000dfbc:	39 ca                	cmp    edx,ecx
c000dfbe:	74 15                	je     c000dfd5 <zStrtok(char*, char const*)+0x43>
c000dfc0:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000dfc4:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000dfc7:	8d 3c 10             	lea    edi,[eax+edx*1]
c000dfca:	39 ee                	cmp    esi,ebp
c000dfcc:	74 13                	je     c000dfe1 <zStrtok(char*, char const*)+0x4f>
c000dfce:	42                   	inc    edx
c000dfcf:	eb eb                	jmp    c000dfbc <zStrtok(char*, char const*)+0x2a>
c000dfd1:	31 c0                	xor    eax,eax
c000dfd3:	eb 2a                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfd5:	c7 05 04 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c104,0x0
c000dfdf:	eb 1e                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dfe1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000dfe4:	39 ce                	cmp    esi,ecx
c000dfe6:	75 0a                	jne    c000dff2 <zStrtok(char*, char const*)+0x60>
c000dfe8:	40                   	inc    eax
c000dfe9:	a3 04 c1 02 c0       	mov    ds:0xc002c104,eax
c000dfee:	89 d8                	mov    eax,ebx
c000dff0:	eb 0d                	jmp    c000dfff <zStrtok(char*, char const*)+0x6d>
c000dff2:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000dff6:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dff9:	89 15 04 c1 02 c0    	mov    DWORD PTR ds:0xc002c104,edx
c000dfff:	5b                   	pop    ebx
c000e000:	5e                   	pop    esi
c000e001:	5f                   	pop    edi
c000e002:	5d                   	pop    ebp
c000e003:	c3                   	ret    

c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000e004:	57                   	push   edi
c000e005:	56                   	push   esi
c000e006:	53                   	push   ebx
c000e007:	81 ec 08 01 00 00    	sub    esp,0x108
c000e00d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000e014:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000e01b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e01f:	53                   	push   ebx
c000e020:	e8 1b 26 ff ff       	call   c0000640 <strcpy>
c000e025:	59                   	pop    ecx
c000e026:	5e                   	pop    esi
c000e027:	68 b1 4d 02 c0       	push   0xc0024db1
c000e02c:	53                   	push   ebx
c000e02d:	bb 01 00 00 00       	mov    ebx,0x1
c000e032:	e8 5b ff ff ff       	call   c000df92 <zStrtok(char*, char const*)>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	85 c0                	test   eax,eax
c000e03c:	74 3b                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e03e:	52                   	push   edx
c000e03f:	50                   	push   eax
c000e040:	6a 01                	push   0x1
c000e042:	57                   	push   edi
c000e043:	e8 b9 fd ff ff       	call   c000de01 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000e048:	59                   	pop    ecx
c000e049:	89 c3                	mov    ebx,eax
c000e04b:	5e                   	pop    esi
c000e04c:	68 b1 4d 02 c0       	push   0xc0024db1
c000e051:	6a 00                	push   0x0
c000e053:	e8 3a ff ff ff       	call   c000df92 <zStrtok(char*, char const*)>
c000e058:	83 c4 10             	add    esp,0x10
c000e05b:	89 c6                	mov    esi,eax
c000e05d:	85 c0                	test   eax,eax
c000e05f:	74 18                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e061:	52                   	push   edx
c000e062:	52                   	push   edx
c000e063:	53                   	push   ebx
c000e064:	57                   	push   edi
c000e065:	e8 81 f5 ff ff       	call   c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>
c000e06a:	83 c4 10             	add    esp,0x10
c000e06d:	89 c3                	mov    ebx,eax
c000e06f:	83 f8 ff             	cmp    eax,0xffffffff
c000e072:	74 05                	je     c000e079 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e074:	50                   	push   eax
c000e075:	56                   	push   esi
c000e076:	53                   	push   ebx
c000e077:	eb c9                	jmp    c000e042 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e079:	81 c4 00 01 00 00    	add    esp,0x100
c000e07f:	89 d8                	mov    eax,ebx
c000e081:	5b                   	pop    ebx
c000e082:	5e                   	pop    esi
c000e083:	5f                   	pop    edi
c000e084:	c3                   	ret    
c000e085:	90                   	nop

c000e086 <Computer::close(int, int, void*)>:
c000e086:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e08b:	c3                   	ret    

c000e08c <Computer::Computer()>:
c000e08c:	83 ec 0c             	sub    esp,0xc
c000e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e093:	83 ec 08             	sub    esp,0x8
c000e096:	68 8c 3e 02 c0       	push   0xc0023e8c
c000e09b:	50                   	push   eax
c000e09c:	e8 15 bb ff ff       	call   c0009bb6 <Device::Device(char const*)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	ba e4 3e 02 c0       	mov    edx,0xc0023ee4
c000e0a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ad:	89 10                	mov    DWORD PTR [eax],edx
c000e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e0cb:	90                   	nop
c000e0cc:	83 c4 0c             	add    esp,0xc
c000e0cf:	c3                   	ret    

c000e0d0 <Computer::open(int, int, void*)>:
c000e0d0:	56                   	push   esi
c000e0d1:	53                   	push   ebx
c000e0d2:	83 ec 04             	sub    esp,0x4
c000e0d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0d9:	39 1d 08 c1 02 c0    	cmp    DWORD PTR ds:0xc002c108,ebx
c000e0df:	74 10                	je     c000e0f1 <Computer::open(int, int, void*)+0x21>
c000e0e1:	83 ec 0c             	sub    esp,0xc
c000e0e4:	68 b0 3e 02 c0       	push   0xc0023eb0
c000e0e9:	e8 06 1c 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e0ee:	83 c4 10             	add    esp,0x10
c000e0f1:	83 ec 0c             	sub    esp,0xc
c000e0f4:	68 78 11 00 00       	push   0x1178
c000e0f9:	e8 99 17 00 00       	call   c000f897 <malloc>
c000e0fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000e101:	89 c6                	mov    esi,eax
c000e103:	e8 fe c5 00 00       	call   c001a706 <CPU::CPU()>
c000e108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e10c:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000e112:	50                   	push   eax
c000e113:	6a 00                	push   0x0
c000e115:	6a 00                	push   0x0
c000e117:	56                   	push   esi
c000e118:	e8 cb c7 00 00       	call   c001a8e8 <CPU::open(int, int, void*)>
c000e11d:	83 c4 14             	add    esp,0x14
c000e120:	68 95 3e 02 c0       	push   0xc0023e95
c000e125:	e8 db f1 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000e12a:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e131:	e8 61 17 00 00       	call   c000f897 <malloc>
c000e136:	89 04 24             	mov    DWORD PTR [esp],eax
c000e139:	89 c6                	mov    esi,eax
c000e13b:	e8 30 e7 ff ff       	call   c000c870 <ACPI::ACPI()>
c000e140:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e146:	5a                   	pop    edx
c000e147:	59                   	pop    ecx
c000e148:	56                   	push   esi
c000e149:	53                   	push   ebx
c000e14a:	e8 05 b9 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e14f:	5e                   	pop    esi
c000e150:	58                   	pop    eax
c000e151:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e157:	50                   	push   eax
c000e158:	53                   	push   ebx
c000e159:	e8 f6 b8 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c000e15e:	83 c4 14             	add    esp,0x14
c000e161:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e166:	5b                   	pop    ebx
c000e167:	5e                   	pop    esi
c000e168:	c3                   	ret    

c000e169 <KeCalculateCRC32(unsigned char*, int)>:
c000e169:	53                   	push   ebx
c000e16a:	83 c8 ff             	or     eax,0xffffffff
c000e16d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e175:	01 cb                	add    ebx,ecx
c000e177:	39 d9                	cmp    ecx,ebx
c000e179:	74 15                	je     c000e190 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e17b:	41                   	inc    ecx
c000e17c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e17f:	31 c2                	xor    edx,eax
c000e181:	c1 e8 08             	shr    eax,0x8
c000e184:	0f b6 d2             	movzx  edx,dl
c000e187:	33 04 95 40 63 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9cc0]
c000e18e:	eb e7                	jmp    c000e177 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e190:	f7 d0                	not    eax
c000e192:	5b                   	pop    ebx
c000e193:	c3                   	ret    

c000e194 <EnvVarContainer::getEnv(char const*)>:
c000e194:	57                   	push   edi
c000e195:	56                   	push   esi
c000e196:	53                   	push   ebx
c000e197:	31 db                	xor    ebx,ebx
c000e199:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e19d:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e19f:	7e 2b                	jle    c000e1cc <EnvVarContainer::getEnv(char const*)+0x38>
c000e1a1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e1a8:	50                   	push   eax
c000e1a9:	50                   	push   eax
c000e1aa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1ad:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e1b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e1b4:	e8 97 25 ff ff       	call   c0000750 <strcmp>
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	85 c0                	test   eax,eax
c000e1be:	75 09                	jne    c000e1c9 <EnvVarContainer::getEnv(char const*)+0x35>
c000e1c0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e1c3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e1c7:	eb 05                	jmp    c000e1ce <EnvVarContainer::getEnv(char const*)+0x3a>
c000e1c9:	43                   	inc    ebx
c000e1ca:	eb d1                	jmp    c000e19d <EnvVarContainer::getEnv(char const*)+0x9>
c000e1cc:	31 c0                	xor    eax,eax
c000e1ce:	5b                   	pop    ebx
c000e1cf:	5e                   	pop    esi
c000e1d0:	5f                   	pop    edi
c000e1d1:	c3                   	ret    

c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e1d2:	55                   	push   ebp
c000e1d3:	57                   	push   edi
c000e1d4:	56                   	push   esi
c000e1d5:	53                   	push   ebx
c000e1d6:	83 ec 28             	sub    esp,0x28
c000e1d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e1dd:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e1e1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e1e5:	56                   	push   esi
c000e1e6:	e8 85 23 ff ff       	call   c0000570 <strlen>
c000e1eb:	40                   	inc    eax
c000e1ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1ef:	e8 a3 16 00 00       	call   c000f897 <malloc>
c000e1f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fb:	e8 70 23 ff ff       	call   c0000570 <strlen>
c000e200:	40                   	inc    eax
c000e201:	89 04 24             	mov    DWORD PTR [esp],eax
c000e204:	e8 8e 16 00 00       	call   c000f897 <malloc>
c000e209:	89 34 24             	mov    DWORD PTR [esp],esi
c000e20c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e210:	e8 5b 23 ff ff       	call   c0000570 <strlen>
c000e215:	83 c4 0c             	add    esp,0xc
c000e218:	40                   	inc    eax
c000e219:	50                   	push   eax
c000e21a:	6a 00                	push   0x0
c000e21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e220:	e8 cb 22 ff ff       	call   c00004f0 <memset>
c000e225:	89 34 24             	mov    DWORD PTR [esp],esi
c000e228:	e8 43 23 ff ff       	call   c0000570 <strlen>
c000e22d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e231:	8d 48 01             	lea    ecx,[eax+0x1]
c000e234:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e239:	89 de                	mov    esi,ebx
c000e23b:	e8 30 23 ff ff       	call   c0000570 <strlen>
c000e240:	83 c4 0c             	add    esp,0xc
c000e243:	40                   	inc    eax
c000e244:	50                   	push   eax
c000e245:	6a 00                	push   0x0
c000e247:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e24b:	e8 a0 22 ff ff       	call   c00004f0 <memset>
c000e250:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e253:	e8 18 23 ff ff       	call   c0000570 <strlen>
c000e258:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e25c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e25f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e261:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e264:	40                   	inc    eax
c000e265:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e268:	c1 e0 03             	shl    eax,0x3
c000e26b:	5a                   	pop    edx
c000e26c:	59                   	pop    ecx
c000e26d:	50                   	push   eax
c000e26e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e271:	e8 0d 16 00 00       	call   c000f883 <realloc>
c000e276:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e27a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e27d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e280:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e284:	b9 08 00 00 00       	mov    ecx,0x8
c000e289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e28b:	83 c4 2c             	add    esp,0x2c
c000e28e:	5b                   	pop    ebx
c000e28f:	5e                   	pop    esi
c000e290:	5f                   	pop    edi
c000e291:	5d                   	pop    ebp
c000e292:	c3                   	ret    
c000e293:	90                   	nop

c000e294 <EnvVarContainer::deleteEnv(char const*)>:
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e296:	55                   	push   ebp
c000e297:	57                   	push   edi
c000e298:	56                   	push   esi
c000e299:	53                   	push   ebx
c000e29a:	81 ec 38 01 00 00    	sub    esp,0x138
c000e2a0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e2a7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e2ae:	68 14 01 00 00       	push   0x114
c000e2b3:	e8 df 15 00 00       	call   c000f897 <malloc>
c000e2b8:	83 c4 0c             	add    esp,0xc
c000e2bb:	89 c3                	mov    ebx,eax
c000e2bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e2c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e2c7:	50                   	push   eax
c000e2c8:	e8 bd 9e ff ff       	call   c000818a <File::File(char const*, Process*)>
c000e2cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2d0:	e8 97 a1 ff ff       	call   c000846c <File::exists()>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	84 c0                	test   al,al
c000e2da:	75 31                	jne    c000e30d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e2dc:	50                   	push   eax
c000e2dd:	50                   	push   eax
c000e2de:	6a 12                	push   0x12
c000e2e0:	53                   	push   ebx
c000e2e1:	e8 c2 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e2e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2e8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e2eb:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2ee:	e8 7d 22 ff ff       	call   c0000570 <strlen>
c000e2f3:	5a                   	pop    edx
c000e2f4:	31 d2                	xor    edx,edx
c000e2f6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e2fa:	51                   	push   ecx
c000e2fb:	56                   	push   esi
c000e2fc:	52                   	push   edx
c000e2fd:	50                   	push   eax
c000e2fe:	53                   	push   ebx
c000e2ff:	ff d7                	call   edi
c000e301:	83 c4 14             	add    esp,0x14
c000e304:	53                   	push   ebx
c000e305:	e8 fc 9e ff ff       	call   c0008206 <File::close()>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	56                   	push   esi
c000e30e:	31 f6                	xor    esi,esi
c000e310:	68 00 01 00 00       	push   0x100
c000e315:	6a 00                	push   0x0
c000e317:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e31b:	50                   	push   eax
c000e31c:	e8 cf 21 ff ff       	call   c00004f0 <memset>
c000e321:	5f                   	pop    edi
c000e322:	58                   	pop    eax
c000e323:	6a 01                	push   0x1
c000e325:	53                   	push   ebx
c000e326:	e8 7d 9e ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c000e32b:	83 c4 10             	add    esp,0x10
c000e32e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e336:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e343:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e347:	51                   	push   ecx
c000e348:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e34c:	52                   	push   edx
c000e34d:	6a 00                	push   0x0
c000e34f:	6a 01                	push   0x1
c000e351:	53                   	push   ebx
c000e352:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e355:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e35a:	83 c4 20             	add    esp,0x20
c000e35d:	89 c2                	mov    edx,eax
c000e35f:	85 c0                	test   eax,eax
c000e361:	0f 84 36 01 00 00    	je     c000e49d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e367:	83 f8 0d             	cmp    eax,0xd
c000e36a:	0f 84 22 01 00 00    	je     c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e375:	0f 84 f0 00 00 00    	je     c000e46b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e37b:	83 f8 0a             	cmp    eax,0xa
c000e37e:	74 13                	je     c000e393 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e380:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e385:	74 0c                	je     c000e393 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e387:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e38d:	0f 8e f6 00 00 00    	jle    c000e489 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e397:	83 ec 0c             	sub    esp,0xc
c000e39a:	8d 78 01             	lea    edi,[eax+0x1]
c000e39d:	57                   	push   edi
c000e39e:	e8 f4 14 00 00       	call   c000f897 <malloc>
c000e3a3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3ab:	8d 56 04             	lea    edx,[esi+0x4]
c000e3ae:	89 14 24             	mov    DWORD PTR [esp],edx
c000e3b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e3b5:	e8 dd 14 00 00       	call   c000f897 <malloc>
c000e3ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3be:	83 c4 0c             	add    esp,0xc
c000e3c1:	57                   	push   edi
c000e3c2:	6a 00                	push   0x0
c000e3c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e3c8:	e8 23 21 ff ff       	call   c00004f0 <memset>
c000e3cd:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e3d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e3d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3db:	83 c4 0c             	add    esp,0xc
c000e3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e2:	52                   	push   edx
c000e3e3:	6a 00                	push   0x0
c000e3e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e3e9:	e8 02 21 ff ff       	call   c00004f0 <memset>
c000e3ee:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e3f2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e3f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3f9:	e8 72 21 ff ff       	call   c0000570 <strlen>
c000e3fe:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e402:	89 c1                	mov    ecx,eax
c000e404:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e406:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e409:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e40c:	40                   	inc    eax
c000e40d:	83 c4 10             	add    esp,0x10
c000e410:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e413:	85 d2                	test   edx,edx
c000e415:	75 0c                	jne    c000e423 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e417:	83 ec 0c             	sub    esp,0xc
c000e41a:	6a 08                	push   0x8
c000e41c:	e8 76 14 00 00       	call   c000f897 <malloc>
c000e421:	eb 0c                	jmp    c000e42f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e423:	c1 e0 03             	shl    eax,0x3
c000e426:	51                   	push   ecx
c000e427:	51                   	push   ecx
c000e428:	50                   	push   eax
c000e429:	52                   	push   edx
c000e42a:	e8 54 14 00 00       	call   c000f883 <realloc>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e435:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e438:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e43b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e43f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e443:	b9 08 00 00 00       	mov    ecx,0x8
c000e448:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e44a:	31 f6                	xor    esi,esi
c000e44c:	50                   	push   eax
c000e44d:	68 00 01 00 00       	push   0x100
c000e452:	6a 00                	push   0x0
c000e454:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e458:	50                   	push   eax
c000e459:	e8 92 20 ff ff       	call   c00004f0 <memset>
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e469:	eb 27                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e46b:	83 f8 3d             	cmp    eax,0x3d
c000e46e:	74 1e                	je     c000e48e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e470:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e476:	7f 07                	jg     c000e47f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e478:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e47c:	46                   	inc    esi
c000e47d:	eb 13                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e47f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e487:	eb 09                	jmp    c000e492 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e489:	83 f8 3d             	cmp    eax,0x3d
c000e48c:	75 ea                	jne    c000e478 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e48e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e492:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e497:	0f 85 99 fe ff ff    	jne    c000e336 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e49d:	83 ec 0c             	sub    esp,0xc
c000e4a0:	53                   	push   ebx
c000e4a1:	e8 60 9d ff ff       	call   c0008206 <File::close()>
c000e4a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e4ae:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e4b4:	5b                   	pop    ebx
c000e4b5:	5e                   	pop    esi
c000e4b6:	5f                   	pop    edi
c000e4b7:	5d                   	pop    ebp
c000e4b8:	c3                   	ret    
c000e4b9:	90                   	nop

c000e4ba <EnvVarContainer::__loadSystem()>:
c000e4ba:	83 ec 10             	sub    esp,0x10
c000e4bd:	68 40 67 02 c0       	push   0xc0026740
c000e4c2:	68 08 3f 02 c0       	push   0xc0023f08
c000e4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cb:	e8 c6 fd ff ff       	call   c000e296 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e4d0:	83 c4 1c             	add    esp,0x1c
c000e4d3:	c3                   	ret    

c000e4d4 <EnvVarContainer::__loadUser()>:
c000e4d4:	c3                   	ret    
c000e4d5:	90                   	nop

c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4f6:	90                   	nop
c000e4f7:	c3                   	ret    

c000e4f8 <EnvVarContainer::~EnvVarContainer()>:
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e502:	85 c0                	test   eax,eax
c000e504:	74 1d                	je     c000e523 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e50a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e50c:	85 c0                	test   eax,eax
c000e50e:	74 13                	je     c000e523 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e517:	83 ec 0c             	sub    esp,0xc
c000e51a:	50                   	push   eax
c000e51b:	e8 87 13 00 00       	call   c000f8a7 <free>
c000e520:	83 c4 10             	add    esp,0x10
c000e523:	90                   	nop
c000e524:	83 c4 0c             	add    esp,0xc
c000e527:	c3                   	ret    

c000e528 <KeGetEnv(Process*, char const*)>:
c000e528:	53                   	push   ebx
c000e529:	83 ec 08             	sub    esp,0x8
c000e52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e530:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e534:	39 05 98 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca98,eax
c000e53a:	74 04                	je     c000e540 <KeGetEnv(Process*, char const*)+0x18>
c000e53c:	85 c0                	test   eax,eax
c000e53e:	75 0b                	jne    c000e54b <KeGetEnv(Process*, char const*)+0x23>
c000e540:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e545:	85 c0                	test   eax,eax
c000e547:	75 19                	jne    c000e562 <KeGetEnv(Process*, char const*)+0x3a>
c000e549:	eb 27                	jmp    c000e572 <KeGetEnv(Process*, char const*)+0x4a>
c000e54b:	52                   	push   edx
c000e54c:	52                   	push   edx
c000e54d:	53                   	push   ebx
c000e54e:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e554:	e8 3b fc ff ff       	call   c000e194 <EnvVarContainer::getEnv(char const*)>
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	85 c0                	test   eax,eax
c000e55e:	75 28                	jne    c000e588 <KeGetEnv(Process*, char const*)+0x60>
c000e560:	eb de                	jmp    c000e540 <KeGetEnv(Process*, char const*)+0x18>
c000e562:	52                   	push   edx
c000e563:	52                   	push   edx
c000e564:	53                   	push   ebx
c000e565:	50                   	push   eax
c000e566:	e8 29 fc ff ff       	call   c000e194 <EnvVarContainer::getEnv(char const*)>
c000e56b:	83 c4 10             	add    esp,0x10
c000e56e:	85 c0                	test   eax,eax
c000e570:	75 16                	jne    c000e588 <KeGetEnv(Process*, char const*)+0x60>
c000e572:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e576:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e57b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e57f:	83 c4 08             	add    esp,0x8
c000e582:	5b                   	pop    ebx
c000e583:	e9 0c fc ff ff       	jmp    c000e194 <EnvVarContainer::getEnv(char const*)>
c000e588:	83 c4 08             	add    esp,0x8
c000e58b:	5b                   	pop    ebx
c000e58c:	c3                   	ret    

c000e58d <KeSetEnvSystem(char const*, char const*)>:
c000e58d:	83 ec 10             	sub    esp,0x10
c000e590:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e598:	ff 35 14 c1 02 c0    	push   DWORD PTR ds:0xc002c114
c000e59e:	e8 2f fc ff ff       	call   c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5a3:	83 c4 1c             	add    esp,0x1c
c000e5a6:	c3                   	ret    

c000e5a7 <KeSetEnvUser(char const*, char const*)>:
c000e5a7:	a1 10 c1 02 c0       	mov    eax,ds:0xc002c110
c000e5ac:	85 c0                	test   eax,eax
c000e5ae:	74 15                	je     c000e5c5 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e5b0:	83 ec 10             	sub    esp,0x10
c000e5b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5bb:	50                   	push   eax
c000e5bc:	e8 11 fc ff ff       	call   c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>
c000e5c1:	83 c4 1c             	add    esp,0x1c
c000e5c4:	c3                   	ret    
c000e5c5:	c3                   	ret    

c000e5c6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e5c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5ca:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e5d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5d4:	e9 f9 fb ff ff       	jmp    c000e1d2 <EnvVarContainer::setEnv(char const*, char const*)>

c000e5d9 <KeDeleteEnvSystem(char const*)>:
c000e5d9:	c3                   	ret    

c000e5da <KeDeleteEnvUser(char const*)>:
c000e5da:	c3                   	ret    

c000e5db <KeDeleteEnvProcess(Process*, char const*)>:
c000e5db:	c3                   	ret    

c000e5dc <KeNewProcessEnv(Process*)>:
c000e5dc:	83 ec 28             	sub    esp,0x28
c000e5df:	6a 0c                	push   0xc
c000e5e1:	e8 b1 12 00 00       	call   c000f897 <malloc>
c000e5e6:	5a                   	pop    edx
c000e5e7:	59                   	pop    ecx
c000e5e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5ec:	50                   	push   eax
c000e5ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5f1:	e8 e0 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e5f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5fa:	83 c4 2c             	add    esp,0x2c
c000e5fd:	c3                   	ret    

c000e5fe <KeCopyProcessEnv(Process*, Process*)>:
c000e5fe:	57                   	push   edi
c000e5ff:	56                   	push   esi
c000e600:	53                   	push   ebx
c000e601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e605:	83 ec 0c             	sub    esp,0xc
c000e608:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e60e:	6a 0c                	push   0xc
c000e610:	e8 82 12 00 00       	call   c000f897 <malloc>
c000e615:	89 c3                	mov    ebx,eax
c000e617:	58                   	pop    eax
c000e618:	5a                   	pop    edx
c000e619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61d:	53                   	push   ebx
c000e61e:	e8 b3 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e623:	8b 07                	mov    eax,DWORD PTR [edi]
c000e625:	89 03                	mov    DWORD PTR [ebx],eax
c000e627:	c1 e0 03             	shl    eax,0x3
c000e62a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62d:	e8 65 12 00 00       	call   c000f897 <malloc>
c000e632:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e635:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e637:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e63a:	c1 e1 03             	shl    ecx,0x3
c000e63d:	89 c7                	mov    edi,eax
c000e63f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	89 d8                	mov    eax,ebx
c000e646:	5b                   	pop    ebx
c000e647:	5e                   	pop    esi
c000e648:	5f                   	pop    edi
c000e649:	c3                   	ret    

c000e64a <KeLoadSystemEnv()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	6a 0c                	push   0xc
c000e650:	e8 42 12 00 00       	call   c000f897 <malloc>
c000e655:	89 c3                	mov    ebx,eax
c000e657:	58                   	pop    eax
c000e658:	5a                   	pop    edx
c000e659:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e65f:	53                   	push   ebx
c000e660:	e8 71 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e665:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e668:	89 1d 14 c1 02 c0    	mov    DWORD PTR ds:0xc002c114,ebx
c000e66e:	e8 47 fe ff ff       	call   c000e4ba <EnvVarContainer::__loadSystem()>
c000e673:	83 c4 18             	add    esp,0x18
c000e676:	5b                   	pop    ebx
c000e677:	c3                   	ret    

c000e678 <KeLoadUserEnv()>:
c000e678:	53                   	push   ebx
c000e679:	83 ec 14             	sub    esp,0x14
c000e67c:	6a 0c                	push   0xc
c000e67e:	e8 14 12 00 00       	call   c000f897 <malloc>
c000e683:	89 c3                	mov    ebx,eax
c000e685:	58                   	pop    eax
c000e686:	5a                   	pop    edx
c000e687:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c000e68d:	53                   	push   ebx
c000e68e:	e8 43 fe ff ff       	call   c000e4d6 <EnvVarContainer::EnvVarContainer(Process*)>
c000e693:	89 1d 10 c1 02 c0    	mov    DWORD PTR ds:0xc002c110,ebx
c000e699:	83 c4 18             	add    esp,0x18
c000e69c:	5b                   	pop    ebx
c000e69d:	c3                   	ret    

c000e69e <KeFlushEnv()>:
c000e69e:	c3                   	ret    

c000e69f <KeGetProcessTotalEnvCount(Process*)>:
c000e69f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6a3:	8b 15 10 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c110
c000e6a9:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6af:	a1 14 c1 02 c0       	mov    eax,ds:0xc002c114
c000e6b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b6:	03 01                	add    eax,DWORD PTR [ecx]
c000e6b8:	85 d2                	test   edx,edx
c000e6ba:	74 02                	je     c000e6be <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e6bc:	03 02                	add    eax,DWORD PTR [edx]
c000e6be:	c3                   	ret    

c000e6bf <KeGetProcessEnvPair(Process*, int)>:
c000e6bf:	57                   	push   edi
c000e6c0:	56                   	push   esi
c000e6c1:	8b 35 10 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c110
c000e6c7:	53                   	push   ebx
c000e6c8:	85 f6                	test   esi,esi
c000e6ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e6ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6d2:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e6d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e6de:	75 16                	jne    c000e6f6 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e6e0:	39 c2                	cmp    edx,eax
c000e6e2:	7c 16                	jl     c000e6fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6e4:	8b 0d 14 c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c114
c000e6ea:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e6ec:	01 c6                	add    esi,eax
c000e6ee:	39 d6                	cmp    esi,edx
c000e6f0:	7e 3c                	jle    c000e72e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e6f2:	29 c2                	sub    edx,eax
c000e6f4:	eb 04                	jmp    c000e6fa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e6f6:	39 c2                	cmp    edx,eax
c000e6f8:	7d 05                	jge    c000e6ff <KeGetProcessEnvPair(Process*, int)+0x40>
c000e6fa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e6fd:	eb 20                	jmp    c000e71f <KeGetProcessEnvPair(Process*, int)+0x60>
c000e6ff:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e701:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e704:	39 d1                	cmp    ecx,edx
c000e706:	7e 04                	jle    c000e70c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e708:	29 c2                	sub    edx,eax
c000e70a:	eb 10                	jmp    c000e71c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e70c:	8b 35 14 c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c114
c000e712:	03 0e                	add    ecx,DWORD PTR [esi]
c000e714:	39 d1                	cmp    ecx,edx
c000e716:	7e 16                	jle    c000e72e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e718:	29 c2                	sub    edx,eax
c000e71a:	29 fa                	sub    edx,edi
c000e71c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e71f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e722:	8b 02                	mov    eax,DWORD PTR [edx]
c000e724:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e727:	89 03                	mov    DWORD PTR [ebx],eax
c000e729:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e72c:	eb 1d                	jmp    c000e74b <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e72e:	83 ec 0c             	sub    esp,0xc
c000e731:	68 2a 3f 02 c0       	push   0xc0023f2a
c000e736:	e8 b9 15 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e73b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e741:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	89 d8                	mov    eax,ebx
c000e74d:	5b                   	pop    ebx
c000e74e:	5e                   	pop    esi
c000e74f:	5f                   	pop    edi
c000e750:	c2 04 00             	ret    0x4
c000e753:	90                   	nop

c000e754 <KeDisplayProgramFault(char const*)>:
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	83 ec 0c             	sub    esp,0xc
c000e75a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75e:	e8 19 88 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000e763:	83 c4 10             	add    esp,0x10
c000e766:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e76b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e76d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e770:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e776:	85 c0                	test   eax,eax
c000e778:	74 22                	je     c000e79c <KeDisplayProgramFault(char const*)+0x48>
c000e77a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e77f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e781:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e784:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e78a:	6a 04                	push   0x4
c000e78c:	6a 0f                	push   0xf
c000e78e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e792:	50                   	push   eax
c000e793:	e8 e6 3f 00 00       	call   c001277e <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	90                   	nop
c000e79c:	90                   	nop
c000e79d:	83 c4 0c             	add    esp,0xc
c000e7a0:	c3                   	ret    
c000e7a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e7a4 <KeGeneralProtectionFault(void*, void*)>:
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7b2:	e8 a5 b4 00 00       	call   c0019c5c <HalHandleGeneralProtectionFault(void*, void*)>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	0f b6 c0             	movzx  eax,al
c000e7bd:	85 c0                	test   eax,eax
c000e7bf:	75 2f                	jne    c000e7f0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e7c1:	83 ec 0c             	sub    esp,0xc
c000e7c4:	68 44 3f 02 c0       	push   0xc0023f44
c000e7c9:	e8 86 ff ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e7ce:	83 c4 10             	add    esp,0x10
c000e7d1:	83 ec 0c             	sub    esp,0xc
c000e7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7d8:	e8 e3 b5 00 00       	call   c0019dc0 <HalDisplayDebugInfo(void*)>
c000e7dd:	83 c4 10             	add    esp,0x10
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	6a 7e                	push   0x7e
c000e7e5:	e8 36 8e 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	eb 05                	jmp    c000e7f4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e7ef:	90                   	nop
c000e7f0:	90                   	nop
c000e7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f4:	83 c4 0c             	add    esp,0xc
c000e7f7:	c3                   	ret    

c000e7f8 <KePageFault(void*, void*)>:
c000e7f8:	83 ec 0c             	sub    esp,0xc
c000e7fb:	83 ec 08             	sub    esp,0x8
c000e7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e806:	e8 44 b5 00 00       	call   c0019d4f <HalHandlePageFault(void*, void*)>
c000e80b:	83 c4 10             	add    esp,0x10
c000e80e:	0f b6 c0             	movzx  eax,al
c000e811:	85 c0                	test   eax,eax
c000e813:	75 2f                	jne    c000e844 <KePageFault(void*, void*)+0x4c>
c000e815:	83 ec 0c             	sub    esp,0xc
c000e818:	68 5d 3f 02 c0       	push   0xc0023f5d
c000e81d:	e8 32 ff ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	83 ec 0c             	sub    esp,0xc
c000e828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e82c:	e8 8f b5 00 00       	call   c0019dc0 <HalDisplayDebugInfo(void*)>
c000e831:	83 c4 10             	add    esp,0x10
c000e834:	83 ec 0c             	sub    esp,0xc
c000e837:	6a 7f                	push   0x7f
c000e839:	e8 e2 8d 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c000e83e:	83 c4 10             	add    esp,0x10
c000e841:	eb 05                	jmp    c000e848 <KePageFault(void*, void*)+0x50>
c000e843:	90                   	nop
c000e844:	90                   	nop
c000e845:	8d 76 00             	lea    esi,[esi+0x0]
c000e848:	83 c4 0c             	add    esp,0xc
c000e84b:	c3                   	ret    

c000e84c <KeOpcodeFault(void*, void*)>:
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	83 ec 08             	sub    esp,0x8
c000e852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e85a:	e8 1f b5 00 00       	call   c0019d7e <HalHandleOpcodeFault(void*, void*)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	0f b6 c0             	movzx  eax,al
c000e865:	85 c0                	test   eax,eax
c000e867:	75 2f                	jne    c000e898 <KeOpcodeFault(void*, void*)+0x4c>
c000e869:	83 ec 0c             	sub    esp,0xc
c000e86c:	68 68 3f 02 c0       	push   0xc0023f68
c000e871:	e8 de fe ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e876:	83 c4 10             	add    esp,0x10
c000e879:	83 ec 0c             	sub    esp,0xc
c000e87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e880:	e8 3b b5 00 00       	call   c0019dc0 <HalDisplayDebugInfo(void*)>
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	83 ec 0c             	sub    esp,0xc
c000e88b:	6a 7c                	push   0x7c
c000e88d:	e8 8e 8d 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	eb 05                	jmp    c000e89c <KeOpcodeFault(void*, void*)+0x50>
c000e897:	90                   	nop
c000e898:	90                   	nop
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	83 c4 0c             	add    esp,0xc
c000e89f:	c3                   	ret    

c000e8a0 <KeOtherFault(void*, void*)>:
c000e8a0:	83 ec 0c             	sub    esp,0xc
c000e8a3:	83 ec 0c             	sub    esp,0xc
c000e8a6:	68 84 3f 02 c0       	push   0xc0023f84
c000e8ab:	e8 a4 fe ff ff       	call   c000e754 <KeDisplayProgramFault(char const*)>
c000e8b0:	83 c4 10             	add    esp,0x10
c000e8b3:	83 ec 0c             	sub    esp,0xc
c000e8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ba:	e8 01 b5 00 00       	call   c0019dc0 <HalDisplayDebugInfo(void*)>
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	83 ec 0c             	sub    esp,0xc
c000e8c5:	6a 7d                	push   0x7d
c000e8c7:	e8 54 8d 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	90                   	nop
c000e8d0:	83 c4 0c             	add    esp,0xc
c000e8d3:	c3                   	ret    

c000e8d4 <KeNonMaskableInterrupt(void*, void*)>:
c000e8d4:	83 ec 0c             	sub    esp,0xc
c000e8d7:	e8 72 b8 00 00       	call   c001a14e <HalReceivedNMI()>
c000e8dc:	90                   	nop
c000e8dd:	83 c4 0c             	add    esp,0xc
c000e8e0:	c3                   	ret    
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]

c000e8e4 <KeDoubleFault(void*, void*)>:
c000e8e4:	83 ec 0c             	sub    esp,0xc
c000e8e7:	83 ec 0c             	sub    esp,0xc
c000e8ea:	68 75 3f 02 c0       	push   0xc0023f75
c000e8ef:	e8 00 14 00 00       	call   c000fcf4 <KePanic(char const*)>
c000e8f4:	83 c4 10             	add    esp,0x10
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <GDTEntry::setBase(unsigned int)>:
c000e8fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e904:	89 c1                	mov    ecx,eax
c000e906:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e90a:	c1 e9 10             	shr    ecx,0x10
c000e90d:	c1 e8 18             	shr    eax,0x18
c000e910:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e913:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e916:	c3                   	ret    
c000e917:	90                   	nop

c000e918 <GDTEntry::setLimit(unsigned int)>:
c000e918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e920:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e923:	66 89 01             	mov    WORD PTR [ecx],ax
c000e926:	83 e2 f0             	and    edx,0xfffffff0
c000e929:	c1 e8 10             	shr    eax,0x10
c000e92c:	83 e0 0f             	and    eax,0xf
c000e92f:	09 d0                	or     eax,edx
c000e931:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e934:	c3                   	ret    
c000e935:	90                   	nop

c000e936 <GDT::GDT()>:
c000e936:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e93a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e94a:	90                   	nop
c000e94b:	c3                   	ret    

c000e94c <GDT::addEntry(GDTEntry)>:
c000e94c:	53                   	push   ebx
c000e94d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e955:	8b 02                	mov    eax,DWORD PTR [edx]
c000e957:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e95b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e95f:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e963:	8d 48 01             	lea    ecx,[eax+0x1]
c000e966:	c1 e0 03             	shl    eax,0x3
c000e969:	89 0a                	mov    DWORD PTR [edx],ecx
c000e96b:	5b                   	pop    ebx
c000e96c:	c3                   	ret    
c000e96d:	90                   	nop

c000e96e <GDT::getNumberOfEntries()>:
c000e96e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e972:	8b 00                	mov    eax,DWORD PTR [eax]
c000e974:	c3                   	ret    
c000e975:	90                   	nop

c000e976 <GDT::flush()>:
c000e976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e97c:	83 c0 04             	add    eax,0x4
c000e97f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e986:	a3 1a c1 02 c0       	mov    ds:0xc002c11a,eax
c000e98b:	66 89 15 18 c1 02 c0 	mov    WORD PTR ds:0xc002c118,dx
c000e992:	e9 c3 19 ff ff       	jmp    c000035a <loadGDT>
c000e997:	90                   	nop

c000e998 <GDT::setup()>:
c000e998:	57                   	push   edi
c000e999:	56                   	push   esi
c000e99a:	53                   	push   ebx
c000e99b:	83 ec 30             	sub    esp,0x30
c000e99e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9a2:	6a 00                	push   0x0
c000e9a4:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e9a8:	56                   	push   esi
c000e9a9:	e8 4e ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9ae:	6a 00                	push   0x0
c000e9b0:	56                   	push   esi
c000e9b1:	e8 62 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9b6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e9be:	6a 00                	push   0x0
c000e9c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e9c4:	56                   	push   esi
c000e9c5:	e8 32 ff ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000e9ca:	68 ff ff ff 00       	push   0xffffff
c000e9cf:	56                   	push   esi
c000e9d0:	e8 43 ff ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c000e9d5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e9d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9dd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e9e1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e9e5:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e9ea:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e9ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e9f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e9f7:	89 f8                	mov    eax,edi
c000e9f9:	89 fa                	mov    edx,edi
c000e9fb:	80 e4 f7             	and    ah,0xf7
c000e9fe:	80 ce 60             	or     dh,0x60
c000ea01:	89 c7                	mov    edi,eax
c000ea03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ea07:	80 cc 60             	or     ah,0x60
c000ea0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea12:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ea16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea1e:	83 c4 20             	add    esp,0x20
c000ea21:	6a 00                	push   0x0
c000ea23:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ea27:	50                   	push   eax
c000ea28:	e8 cf fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea2d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ea31:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ea35:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ea39:	83 e0 3f             	and    eax,0x3f
c000ea3c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ea40:	6a 00                	push   0x0
c000ea42:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ea46:	50                   	push   eax
c000ea47:	e8 b0 fe ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c000ea4c:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ea50:	83 e0 3f             	and    eax,0x3f
c000ea53:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ea57:	83 c4 0c             	add    esp,0xc
c000ea5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea62:	53                   	push   ebx
c000ea63:	e8 e4 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea68:	83 c4 0c             	add    esp,0xc
c000ea6b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea6f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea73:	53                   	push   ebx
c000ea74:	e8 d3 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea79:	83 c4 0c             	add    esp,0xc
c000ea7c:	57                   	push   edi
c000ea7d:	56                   	push   esi
c000ea7e:	53                   	push   ebx
c000ea7f:	e8 c8 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea84:	83 c4 0c             	add    esp,0xc
c000ea87:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea8b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ea8f:	53                   	push   ebx
c000ea90:	e8 b7 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000ea95:	83 c4 0c             	add    esp,0xc
c000ea98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eaa0:	53                   	push   ebx
c000eaa1:	e8 a6 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eaa6:	83 c4 0c             	add    esp,0xc
c000eaa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eab1:	53                   	push   ebx
c000eab2:	e8 95 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eab7:	83 c4 0c             	add    esp,0xc
c000eaba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eac2:	53                   	push   ebx
c000eac3:	e8 84 fe ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c000eac8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eacb:	e8 a6 fe ff ff       	call   c000e976 <GDT::flush()>
c000ead0:	83 c4 40             	add    esp,0x40
c000ead3:	5b                   	pop    ebx
c000ead4:	5e                   	pop    esi
c000ead5:	5f                   	pop    edi
c000ead6:	c3                   	ret    

c000ead7 <idleFunction(void*)>:
c000ead7:	83 ec 0c             	sub    esp,0xc
c000eada:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000eae1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000eae8:	75 01                	jne    c000eaeb <idleFunction(void*)+0x14>
c000eaea:	fb                   	sti    
c000eaeb:	e8 f9 b6 00 00       	call   c001a1e9 <HalSystemIdle()>
c000eaf0:	e8 e1 35 01 00       	call   c00220d6 <idleCommon()>
c000eaf5:	eb f4                	jmp    c000eaeb <idleFunction(void*)+0x14>
c000eaf7:	90                   	nop

c000eaf8 <IDTEntry::IDTEntry(bool)>:
c000eaf8:	53                   	push   ebx
c000eaf9:	83 ec 04             	sub    esp,0x4
c000eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb00:	88 04 24             	mov    BYTE PTR [esp],al
c000eb03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb07:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb11:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb19:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb1c:	83 e2 f0             	and    edx,0xfffffff0
c000eb1f:	83 ca 0e             	or     edx,0xe
c000eb22:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb29:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb2c:	83 e2 ef             	and    edx,0xffffffef
c000eb2f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb32:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eb36:	85 c0                	test   eax,eax
c000eb38:	74 06                	je     c000eb40 <IDTEntry::IDTEntry(bool)+0x48>
c000eb3a:	b2 03                	mov    dl,0x3
c000eb3c:	eb 06                	jmp    c000eb44 <IDTEntry::IDTEntry(bool)+0x4c>
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	b2 00                	mov    dl,0x0
c000eb42:	66 90                	xchg   ax,ax
c000eb44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb48:	83 e2 03             	and    edx,0x3
c000eb4b:	89 d3                	mov    ebx,edx
c000eb4d:	c1 e3 05             	shl    ebx,0x5
c000eb50:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb53:	83 e2 9f             	and    edx,0xffffff9f
c000eb56:	88 d1                	mov    cl,dl
c000eb58:	88 da                	mov    dl,bl
c000eb5a:	09 ca                	or     edx,ecx
c000eb5c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb63:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb66:	83 ca 80             	or     edx,0xffffff80
c000eb69:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb6c:	90                   	nop
c000eb6d:	83 c4 04             	add    esp,0x4
c000eb70:	5b                   	pop    ebx
c000eb71:	c3                   	ret    

c000eb72 <IDTEntry::setOffset(unsigned int)>:
c000eb72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eb76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7a:	66 89 02             	mov    WORD PTR [edx],ax
c000eb7d:	c1 e8 10             	shr    eax,0x10
c000eb80:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop
c000eb86:	66 90                	xchg   ax,ax

c000eb88 <IDT::IDT()>:
c000eb88:	90                   	nop
c000eb89:	c3                   	ret    

c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000eb8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb8e:	83 c0 30             	add    eax,0x30
c000eb91:	c3                   	ret    

c000eb92 <IDT::addEntry(IDTEntry, int)>:
c000eb92:	53                   	push   ebx
c000eb93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eba3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000eba6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebaa:	5b                   	pop    ebx
c000ebab:	c3                   	ret    

c000ebac <IDT::addEntry(int, void (*)(), bool)>:
c000ebac:	53                   	push   ebx
c000ebad:	83 ec 10             	sub    esp,0x10
c000ebb0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebb5:	50                   	push   eax
c000ebb6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebba:	53                   	push   ebx
c000ebbb:	e8 38 ff ff ff       	call   c000eaf8 <IDTEntry::IDTEntry(bool)>
c000ebc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebc4:	53                   	push   ebx
c000ebc5:	e8 a8 ff ff ff       	call   c000eb72 <IDTEntry::setOffset(unsigned int)>
c000ebca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ebd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ebda:	e8 b3 ff ff ff       	call   c000eb92 <IDT::addEntry(IDTEntry, int)>
c000ebdf:	83 c4 30             	add    esp,0x30
c000ebe2:	5b                   	pop    ebx
c000ebe3:	c3                   	ret    

c000ebe4 <IDT::flush()>:
c000ebe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebe8:	66 c7 05 20 c1 02 c0 ff 07 	mov    WORD PTR ds:0xc002c120,0x7ff
c000ebf1:	a3 22 c1 02 c0       	mov    ds:0xc002c122,eax
c000ebf6:	0f 01 1d 20 c1 02 c0 	lidtd  ds:0xc002c120
c000ebfd:	c3                   	ret    

c000ebfe <IDT::setup()>:
c000ebfe:	57                   	push   edi
c000ebff:	56                   	push   esi
c000ec00:	53                   	push   ebx
c000ec01:	83 ec 10             	sub    esp,0x10
c000ec04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec08:	6a 00                	push   0x0
c000ec0a:	68 b0 13 02 c0       	push   0xc00213b0
c000ec0f:	6a 00                	push   0x0
c000ec11:	53                   	push   ebx
c000ec12:	e8 95 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec17:	6a 00                	push   0x0
c000ec19:	68 c0 13 02 c0       	push   0xc00213c0
c000ec1e:	6a 01                	push   0x1
c000ec20:	53                   	push   ebx
c000ec21:	e8 86 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec26:	83 c4 20             	add    esp,0x20
c000ec29:	6a 00                	push   0x0
c000ec2b:	68 ca 13 02 c0       	push   0xc00213ca
c000ec30:	6a 02                	push   0x2
c000ec32:	53                   	push   ebx
c000ec33:	e8 74 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec38:	6a 00                	push   0x0
c000ec3a:	68 d4 13 02 c0       	push   0xc00213d4
c000ec3f:	6a 03                	push   0x3
c000ec41:	53                   	push   ebx
c000ec42:	e8 65 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec47:	83 c4 20             	add    esp,0x20
c000ec4a:	6a 00                	push   0x0
c000ec4c:	68 de 13 02 c0       	push   0xc00213de
c000ec51:	6a 04                	push   0x4
c000ec53:	53                   	push   ebx
c000ec54:	e8 53 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec59:	6a 00                	push   0x0
c000ec5b:	68 e8 13 02 c0       	push   0xc00213e8
c000ec60:	6a 05                	push   0x5
c000ec62:	53                   	push   ebx
c000ec63:	e8 44 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec68:	83 c4 20             	add    esp,0x20
c000ec6b:	6a 00                	push   0x0
c000ec6d:	68 f2 13 02 c0       	push   0xc00213f2
c000ec72:	6a 06                	push   0x6
c000ec74:	53                   	push   ebx
c000ec75:	e8 32 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec7a:	6a 00                	push   0x0
c000ec7c:	68 fc 13 02 c0       	push   0xc00213fc
c000ec81:	6a 07                	push   0x7
c000ec83:	53                   	push   ebx
c000ec84:	e8 23 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec89:	83 c4 20             	add    esp,0x20
c000ec8c:	6a 00                	push   0x0
c000ec8e:	68 06 14 02 c0       	push   0xc0021406
c000ec93:	6a 08                	push   0x8
c000ec95:	53                   	push   ebx
c000ec96:	e8 11 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ec9b:	6a 00                	push   0x0
c000ec9d:	68 0e 14 02 c0       	push   0xc002140e
c000eca2:	6a 09                	push   0x9
c000eca4:	53                   	push   ebx
c000eca5:	e8 02 ff ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecaa:	83 c4 20             	add    esp,0x20
c000ecad:	6a 00                	push   0x0
c000ecaf:	68 18 14 02 c0       	push   0xc0021418
c000ecb4:	6a 0a                	push   0xa
c000ecb6:	53                   	push   ebx
c000ecb7:	e8 f0 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecbc:	6a 00                	push   0x0
c000ecbe:	68 20 14 02 c0       	push   0xc0021420
c000ecc3:	6a 0b                	push   0xb
c000ecc5:	53                   	push   ebx
c000ecc6:	e8 e1 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eccb:	83 c4 20             	add    esp,0x20
c000ecce:	6a 00                	push   0x0
c000ecd0:	68 28 14 02 c0       	push   0xc0021428
c000ecd5:	6a 0c                	push   0xc
c000ecd7:	53                   	push   ebx
c000ecd8:	e8 cf fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecdd:	6a 00                	push   0x0
c000ecdf:	68 30 14 02 c0       	push   0xc0021430
c000ece4:	6a 0d                	push   0xd
c000ece6:	53                   	push   ebx
c000ece7:	e8 c0 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecec:	83 c4 20             	add    esp,0x20
c000ecef:	6a 00                	push   0x0
c000ecf1:	68 4a 14 02 c0       	push   0xc002144a
c000ecf6:	6a 0e                	push   0xe
c000ecf8:	53                   	push   ebx
c000ecf9:	e8 ae fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ecfe:	6a 00                	push   0x0
c000ed00:	68 52 14 02 c0       	push   0xc0021452
c000ed05:	6a 0f                	push   0xf
c000ed07:	53                   	push   ebx
c000ed08:	e8 9f fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed0d:	83 c4 20             	add    esp,0x20
c000ed10:	6a 00                	push   0x0
c000ed12:	68 5c 14 02 c0       	push   0xc002145c
c000ed17:	6a 10                	push   0x10
c000ed19:	53                   	push   ebx
c000ed1a:	e8 8d fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed1f:	6a 00                	push   0x0
c000ed21:	68 66 14 02 c0       	push   0xc0021466
c000ed26:	6a 11                	push   0x11
c000ed28:	53                   	push   ebx
c000ed29:	e8 7e fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed2e:	83 c4 20             	add    esp,0x20
c000ed31:	6a 00                	push   0x0
c000ed33:	68 70 14 02 c0       	push   0xc0021470
c000ed38:	6a 12                	push   0x12
c000ed3a:	53                   	push   ebx
c000ed3b:	e8 6c fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed40:	6a 01                	push   0x1
c000ed42:	68 0a 15 02 c0       	push   0xc002150a
c000ed47:	6a 60                	push   0x60
c000ed49:	53                   	push   ebx
c000ed4a:	e8 5d fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed4f:	83 c4 20             	add    esp,0x20
c000ed52:	6a 00                	push   0x0
c000ed54:	68 11 15 02 c0       	push   0xc0021511
c000ed59:	6a 20                	push   0x20
c000ed5b:	53                   	push   ebx
c000ed5c:	e8 4b fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed61:	6a 00                	push   0x0
c000ed63:	68 fc 14 02 c0       	push   0xc00214fc
c000ed68:	6a 21                	push   0x21
c000ed6a:	53                   	push   ebx
c000ed6b:	e8 3c fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed70:	83 c4 20             	add    esp,0x20
c000ed73:	6a 00                	push   0x0
c000ed75:	68 03 15 02 c0       	push   0xc0021503
c000ed7a:	6a 22                	push   0x22
c000ed7c:	53                   	push   ebx
c000ed7d:	e8 2a fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed82:	6a 00                	push   0x0
c000ed84:	68 7a 14 02 c0       	push   0xc002147a
c000ed89:	6a 23                	push   0x23
c000ed8b:	53                   	push   ebx
c000ed8c:	e8 1b fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ed91:	83 c4 20             	add    esp,0x20
c000ed94:	6a 00                	push   0x0
c000ed96:	68 84 14 02 c0       	push   0xc0021484
c000ed9b:	6a 24                	push   0x24
c000ed9d:	53                   	push   ebx
c000ed9e:	e8 09 fe ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eda3:	6a 00                	push   0x0
c000eda5:	68 8e 14 02 c0       	push   0xc002148e
c000edaa:	6a 25                	push   0x25
c000edac:	53                   	push   ebx
c000edad:	e8 fa fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edb2:	83 c4 20             	add    esp,0x20
c000edb5:	6a 00                	push   0x0
c000edb7:	68 98 14 02 c0       	push   0xc0021498
c000edbc:	6a 26                	push   0x26
c000edbe:	53                   	push   ebx
c000edbf:	e8 e8 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edc4:	6a 00                	push   0x0
c000edc6:	68 a2 14 02 c0       	push   0xc00214a2
c000edcb:	6a 27                	push   0x27
c000edcd:	53                   	push   ebx
c000edce:	e8 d9 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edd3:	83 c4 20             	add    esp,0x20
c000edd6:	6a 00                	push   0x0
c000edd8:	68 ac 14 02 c0       	push   0xc00214ac
c000eddd:	6a 28                	push   0x28
c000eddf:	53                   	push   ebx
c000ede0:	e8 c7 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ede5:	6a 00                	push   0x0
c000ede7:	68 b6 14 02 c0       	push   0xc00214b6
c000edec:	6a 29                	push   0x29
c000edee:	53                   	push   ebx
c000edef:	e8 b8 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000edf4:	83 c4 20             	add    esp,0x20
c000edf7:	6a 00                	push   0x0
c000edf9:	68 c0 14 02 c0       	push   0xc00214c0
c000edfe:	6a 2a                	push   0x2a
c000ee00:	53                   	push   ebx
c000ee01:	e8 a6 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee06:	6a 00                	push   0x0
c000ee08:	68 ca 14 02 c0       	push   0xc00214ca
c000ee0d:	6a 2b                	push   0x2b
c000ee0f:	53                   	push   ebx
c000ee10:	e8 97 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee15:	83 c4 20             	add    esp,0x20
c000ee18:	6a 00                	push   0x0
c000ee1a:	68 d4 14 02 c0       	push   0xc00214d4
c000ee1f:	6a 2c                	push   0x2c
c000ee21:	53                   	push   ebx
c000ee22:	e8 85 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee27:	6a 00                	push   0x0
c000ee29:	68 de 14 02 c0       	push   0xc00214de
c000ee2e:	6a 2d                	push   0x2d
c000ee30:	53                   	push   ebx
c000ee31:	e8 76 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee36:	83 c4 20             	add    esp,0x20
c000ee39:	6a 00                	push   0x0
c000ee3b:	68 e8 14 02 c0       	push   0xc00214e8
c000ee40:	6a 2e                	push   0x2e
c000ee42:	53                   	push   ebx
c000ee43:	e8 64 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee48:	6a 00                	push   0x0
c000ee4a:	68 f2 14 02 c0       	push   0xc00214f2
c000ee4f:	6a 2f                	push   0x2f
c000ee51:	53                   	push   ebx
c000ee52:	e8 55 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee57:	83 c4 20             	add    esp,0x20
c000ee5a:	6a 00                	push   0x0
c000ee5c:	68 14 16 02 c0       	push   0xc0021614
c000ee61:	6a 30                	push   0x30
c000ee63:	53                   	push   ebx
c000ee64:	e8 43 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee69:	6a 00                	push   0x0
c000ee6b:	68 1e 16 02 c0       	push   0xc002161e
c000ee70:	6a 31                	push   0x31
c000ee72:	53                   	push   ebx
c000ee73:	e8 34 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee78:	83 c4 20             	add    esp,0x20
c000ee7b:	6a 00                	push   0x0
c000ee7d:	68 28 16 02 c0       	push   0xc0021628
c000ee82:	6a 32                	push   0x32
c000ee84:	53                   	push   ebx
c000ee85:	e8 22 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee8a:	6a 00                	push   0x0
c000ee8c:	68 32 16 02 c0       	push   0xc0021632
c000ee91:	6a 33                	push   0x33
c000ee93:	53                   	push   ebx
c000ee94:	e8 13 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000ee99:	83 c4 20             	add    esp,0x20
c000ee9c:	6a 00                	push   0x0
c000ee9e:	68 3c 16 02 c0       	push   0xc002163c
c000eea3:	6a 34                	push   0x34
c000eea5:	53                   	push   ebx
c000eea6:	e8 01 fd ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eeab:	6a 00                	push   0x0
c000eead:	68 46 16 02 c0       	push   0xc0021646
c000eeb2:	6a 35                	push   0x35
c000eeb4:	53                   	push   ebx
c000eeb5:	e8 f2 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eeba:	83 c4 20             	add    esp,0x20
c000eebd:	6a 00                	push   0x0
c000eebf:	68 50 16 02 c0       	push   0xc0021650
c000eec4:	6a 36                	push   0x36
c000eec6:	53                   	push   ebx
c000eec7:	e8 e0 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eecc:	6a 00                	push   0x0
c000eece:	68 5a 16 02 c0       	push   0xc002165a
c000eed3:	6a 37                	push   0x37
c000eed5:	53                   	push   ebx
c000eed6:	e8 d1 fc ff ff       	call   c000ebac <IDT::addEntry(int, void (*)(), bool)>
c000eedb:	83 c4 1c             	add    esp,0x1c
c000eede:	6a 03                	push   0x3
c000eee0:	6a 02                	push   0x2
c000eee2:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000eee8:	e8 31 4c 00 00       	call   c0013b1e <VAS::allocatePages(int, int)>
c000eeed:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000eef4:	89 c6                	mov    esi,eax
c000eef6:	e8 9c 09 00 00       	call   c000f897 <malloc>
c000eefb:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef01:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef04:	89 c7                	mov    edi,eax
c000ef06:	e8 dd 3c 00 00       	call   c0012be8 <TSS::TSS()>
c000ef0b:	83 c4 0c             	add    esp,0xc
c000ef0e:	68 06 14 02 c0       	push   0xc0021406
c000ef13:	56                   	push   esi
c000ef14:	57                   	push   edi
c000ef15:	e8 12 3d 00 00       	call   c0012c2c <TSS::setup(unsigned long, unsigned long)>
c000ef1a:	89 c6                	mov    esi,eax
c000ef1c:	58                   	pop    eax
c000ef1d:	5a                   	pop    edx
c000ef1e:	6a 00                	push   0x0
c000ef20:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef24:	50                   	push   eax
c000ef25:	e8 ce fb ff ff       	call   c000eaf8 <IDTEntry::IDTEntry(bool)>
c000ef2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef2e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef33:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef3a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef44:	80 ce 05             	or     dh,0x5
c000ef47:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef52:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef58:	e8 87 fc ff ff       	call   c000ebe4 <IDT::flush()>
c000ef5d:	83 c4 20             	add    esp,0x20
c000ef60:	5b                   	pop    ebx
c000ef61:	5e                   	pop    esi
c000ef62:	5f                   	pop    edi
c000ef63:	c3                   	ret    

c000ef64 <CPU::current()>:
c000ef64:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000ef69:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ef6f:	c3                   	ret    

c000ef70 <operator new(unsigned long)>:
c000ef70:	e9 22 09 00 00       	jmp    c000f897 <malloc>

c000ef75 <operator delete(void*)>:
c000ef75:	e9 3d 09 00 00       	jmp    c000f8b7 <rfree>

c000ef7a <disableIRQs()>:
c000ef7a:	fa                   	cli    
c000ef7b:	c3                   	ret    

c000ef7c <enableIRQs()>:
c000ef7c:	fb                   	sti    
c000ef7d:	c3                   	ret    

c000ef7e <lockScheduler()>:
c000ef7e:	fa                   	cli    
c000ef7f:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef85:	c3                   	ret    

c000ef86 <unlockScheduler()>:
c000ef86:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000ef8d:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000ef94:	75 01                	jne    c000ef97 <unlockScheduler()+0x11>
c000ef96:	fb                   	sti    
c000ef97:	c3                   	ret    

c000ef98 <lockStuff()>:
c000ef98:	fa                   	cli    
c000ef99:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c000ef9f:	ff 05 6c ca 02 c0    	inc    DWORD PTR ds:0xc002ca6c
c000efa5:	c3                   	ret    

c000efa6 <unlockStuff()>:
c000efa6:	83 ec 0c             	sub    esp,0xc
c000efa9:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c000efae:	48                   	dec    eax
c000efaf:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c000efb4:	75 18                	jne    c000efce <unlockStuff()+0x28>
c000efb6:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c000efbd:	74 0f                	je     c000efce <unlockStuff()+0x28>
c000efbf:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c000efc9:	e8 52 7e 00 00       	call   c0016e20 <schedule()>
c000efce:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c000efd5:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000efdc:	75 01                	jne    c000efdf <unlockStuff()+0x39>
c000efde:	fb                   	sti    
c000efdf:	83 c4 0c             	add    esp,0xc
c000efe2:	c3                   	ret    

c000efe3 <Virt::getAKernelVAS()>:
c000efe3:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c000efe8:	c3                   	ret    

c000efe9 <__not_memcpy>:
c000efe9:	57                   	push   edi
c000efea:	56                   	push   esi
c000efeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eff3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eff7:	89 c7                	mov    edi,eax
c000eff9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000effb:	5e                   	pop    esi
c000effc:	5f                   	pop    edi
c000effd:	c3                   	ret    

c000effe <KeFormatDate(char*, int, int, int, int, bool)>:
c000effe:	55                   	push   ebp
c000efff:	b9 0a 00 00 00       	mov    ecx,0xa
c000f004:	57                   	push   edi
c000f005:	56                   	push   esi
c000f006:	53                   	push   ebx
c000f007:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f00c:	81 ec ac 00 00 00    	sub    esp,0xac
c000f012:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f019:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f01e:	99                   	cdq    
c000f01f:	f7 f9                	idiv   ecx
c000f021:	89 d5                	mov    ebp,edx
c000f023:	99                   	cdq    
c000f024:	f7 f9                	idiv   ecx
c000f026:	8d 42 30             	lea    eax,[edx+0x30]
c000f029:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f02d:	8d 45 30             	lea    eax,[ebp+0x30]
c000f030:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f034:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f03b:	99                   	cdq    
c000f03c:	f7 fb                	idiv   ebx
c000f03e:	bb 64 00 00 00       	mov    ebx,0x64
c000f043:	99                   	cdq    
c000f044:	f7 f9                	idiv   ecx
c000f046:	8d 42 30             	lea    eax,[edx+0x30]
c000f049:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f04d:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f054:	99                   	cdq    
c000f055:	f7 fb                	idiv   ebx
c000f057:	31 db                	xor    ebx,ebx
c000f059:	99                   	cdq    
c000f05a:	f7 f9                	idiv   ecx
c000f05c:	8d 42 30             	lea    eax,[edx+0x30]
c000f05f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f063:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f06b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f06f:	0f be 8b 44 c1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd3ebc]
c000f076:	83 f9 59             	cmp    ecx,0x59
c000f079:	74 1c                	je     c000f097 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f07b:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f082:	83 f9 4d             	cmp    ecx,0x4d
c000f085:	0f 84 e3 00 00 00    	je     c000f16e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f08b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f092:	e9 d7 00 00 00       	jmp    c000f16e <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f097:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f09c:	74 27                	je     c000f0c5 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f09e:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f0a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f0a7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0ab:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f0af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0b3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0b7:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f0bb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0bf:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f0c3:	eb 15                	jmp    c000f0da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f0c5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f0c9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f0cd:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0d1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0d5:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f0da:	50                   	push   eax
c000f0db:	50                   	push   eax
c000f0dc:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f0e0:	57                   	push   edi
c000f0e1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f0e5:	56                   	push   esi
c000f0e6:	e8 55 17 ff ff       	call   c0000840 <strcat>
c000f0eb:	83 c4 10             	add    esp,0x10
c000f0ee:	83 fb 02             	cmp    ebx,0x2
c000f0f1:	74 1a                	je     c000f10d <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f0f3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f0f8:	a1 48 c1 02 c0       	mov    eax,ds:0xc002c148
c000f0fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f101:	55                   	push   ebp
c000f102:	55                   	push   ebp
c000f103:	57                   	push   edi
c000f104:	56                   	push   esi
c000f105:	e8 36 17 ff ff       	call   c0000840 <strcat>
c000f10a:	83 c4 10             	add    esp,0x10
c000f10d:	43                   	inc    ebx
c000f10e:	83 fb 03             	cmp    ebx,0x3
c000f111:	0f 85 58 ff ff ff    	jne    c000f06f <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f117:	51                   	push   ecx
c000f118:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f11f:	6a 00                	push   0x0
c000f121:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f128:	e8 c3 13 ff ff       	call   c00004f0 <memset>
c000f12d:	89 34 24             	mov    DWORD PTR [esp],esi
c000f130:	e8 3b 14 ff ff       	call   c0000570 <strlen>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	40                   	inc    eax
c000f139:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f140:	72 17                	jb     c000f159 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f142:	52                   	push   edx
c000f143:	52                   	push   edx
c000f144:	56                   	push   esi
c000f145:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f14c:	e8 ef 14 ff ff       	call   c0000640 <strcpy>
c000f151:	83 c4 10             	add    esp,0x10
c000f154:	e9 8a 00 00 00       	jmp    c000f1e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f159:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f160:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f167:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f16c:	eb 75                	jmp    c000f1e3 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f16e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f172:	89 ef                	mov    edi,ebp
c000f174:	50                   	push   eax
c000f175:	c1 ff 1f             	sar    edi,0x1f
c000f178:	50                   	push   eax
c000f179:	57                   	push   edi
c000f17a:	55                   	push   ebp
c000f17b:	e8 70 04 00 00       	call   c000f5f0 <KeGetDigitsInNumber(long long)>
c000f180:	83 c4 10             	add    esp,0x10
c000f183:	48                   	dec    eax
c000f184:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f188:	75 1c                	jne    c000f1a6 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f18a:	83 f9 44             	cmp    ecx,0x44
c000f18d:	75 09                	jne    c000f198 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f18f:	80 3d 60 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c160,0x0
c000f196:	eb 0c                	jmp    c000f1a4 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f198:	83 f9 4d             	cmp    ecx,0x4d
c000f19b:	75 2b                	jne    c000f1c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f19d:	80 3d 61 c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c161,0x0
c000f1a4:	74 22                	je     c000f1c8 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f1a6:	89 e8                	mov    eax,ebp
c000f1a8:	b9 0a 00 00 00       	mov    ecx,0xa
c000f1ad:	99                   	cdq    
c000f1ae:	f7 f9                	idiv   ecx
c000f1b0:	89 d5                	mov    ebp,edx
c000f1b2:	99                   	cdq    
c000f1b3:	f7 f9                	idiv   ecx
c000f1b5:	83 c2 30             	add    edx,0x30
c000f1b8:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f1bc:	8d 55 30             	lea    edx,[ebp+0x30]
c000f1bf:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f1c3:	e9 0d ff ff ff       	jmp    c000f0d5 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f1c8:	89 e8                	mov    eax,ebp
c000f1ca:	b9 0a 00 00 00       	mov    ecx,0xa
c000f1cf:	99                   	cdq    
c000f1d0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f1d5:	f7 f9                	idiv   ecx
c000f1d7:	83 c2 30             	add    edx,0x30
c000f1da:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f1de:	e9 f7 fe ff ff       	jmp    c000f0da <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f1e3:	81 c4 ac 00 00 00    	add    esp,0xac
c000f1e9:	5b                   	pop    ebx
c000f1ea:	5e                   	pop    esi
c000f1eb:	5f                   	pop    edi
c000f1ec:	5d                   	pop    ebp
c000f1ed:	c3                   	ret    

c000f1ee <KeFormatShortDate(char*, int, int, int, int)>:
c000f1ee:	83 ec 14             	sub    esp,0x14
c000f1f1:	6a 00                	push   0x0
c000f1f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f1ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f207:	e8 f2 fd ff ff       	call   c000effe <KeFormatDate(char*, int, int, int, int, bool)>
c000f20c:	83 c4 2c             	add    esp,0x2c
c000f20f:	c3                   	ret    

c000f210 <KeFormatLongDate(char*, int, int, int, int)>:
c000f210:	83 ec 14             	sub    esp,0x14
c000f213:	6a 01                	push   0x1
c000f215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f21d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f225:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f229:	e8 d0 fd ff ff       	call   c000effe <KeFormatDate(char*, int, int, int, int, bool)>
c000f22e:	83 c4 2c             	add    esp,0x2c
c000f231:	c3                   	ret    

c000f232 <KeSetLocale(klocale_t)>:
c000f232:	57                   	push   edi
c000f233:	b9 09 00 00 00       	mov    ecx,0x9
c000f238:	56                   	push   esi
c000f239:	bf 40 c1 02 c0       	mov    edi,0xc002c140
c000f23e:	fc                   	cld    
c000f23f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f243:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f245:	5e                   	pop    esi
c000f246:	5f                   	pop    edi
c000f247:	c3                   	ret    

c000f248 <KeInitialiseLocale()>:
c000f248:	57                   	push   edi
c000f249:	56                   	push   esi
c000f24a:	83 ec 3c             	sub    esp,0x3c
c000f24d:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f255:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f25d:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f265:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f26d:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f274:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f27c:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f284:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f28b:	68 ac 3f 02 c0       	push   0xc0023fac
c000f290:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f294:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f298:	50                   	push   eax
c000f299:	e8 a2 13 ff ff       	call   c0000640 <strcpy>
c000f29e:	83 ec 20             	sub    esp,0x20
c000f2a1:	b9 09 00 00 00       	mov    ecx,0x9
c000f2a6:	fc                   	cld    
c000f2a7:	89 e7                	mov    edi,esp
c000f2a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f2ab:	e8 82 ff ff ff       	call   c000f232 <KeSetLocale(klocale_t)>
c000f2b0:	83 c4 64             	add    esp,0x64
c000f2b3:	5e                   	pop    esi
c000f2b4:	5f                   	pop    edi
c000f2b5:	c3                   	ret    

c000f2b6 <KeFormatCurrency(char*, int, long long, long long)>:
c000f2b6:	c3                   	ret    

c000f2b7 <KeFormatCurrency(char*, int, double)>:
c000f2b7:	c3                   	ret    

c000f2b8 <KeFormatNumber(char*, long long, long long)>:
c000f2b8:	c3                   	ret    

c000f2b9 <KeFormatNumber(char*, double)>:
c000f2b9:	c3                   	ret    
c000f2ba:	66 90                	xchg   ax,ax

c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f2bc:	55                   	push   ebp
c000f2bd:	57                   	push   edi
c000f2be:	56                   	push   esi
c000f2bf:	53                   	push   ebx
c000f2c0:	83 ec 5c             	sub    esp,0x5c
c000f2c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f2c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f2cb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f2cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f2d3:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f2d7:	bb cf 2d 02 c0       	mov    ebx,0xc0022dcf
c000f2dc:	bd 11 00 00 00       	mov    ebp,0x11
c000f2e1:	89 d0                	mov    eax,edx
c000f2e3:	83 e0 01             	and    eax,0x1
c000f2e6:	74 10                	je     c000f2f8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f2e8:	8a 03                	mov    al,BYTE PTR [ebx]
c000f2ea:	88 02                	mov    BYTE PTR [edx],al
c000f2ec:	8d 52 01             	lea    edx,[edx+0x1]
c000f2ef:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f2f2:	83 ed 01             	sub    ebp,0x1
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	89 d0                	mov    eax,edx
c000f2fa:	83 e0 02             	and    eax,0x2
c000f2fd:	74 11                	je     c000f310 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f2ff:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f302:	66 89 02             	mov    WORD PTR [edx],ax
c000f305:	8d 52 02             	lea    edx,[edx+0x2]
c000f308:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f30b:	83 ed 02             	sub    ebp,0x2
c000f30e:	66 90                	xchg   ax,ax
c000f310:	89 e8                	mov    eax,ebp
c000f312:	c1 e8 02             	shr    eax,0x2
c000f315:	fc                   	cld    
c000f316:	89 d7                	mov    edi,edx
c000f318:	89 de                	mov    esi,ebx
c000f31a:	89 c1                	mov    ecx,eax
c000f31c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f31e:	89 f3                	mov    ebx,esi
c000f320:	89 fa                	mov    edx,edi
c000f322:	b9 00 00 00 00       	mov    ecx,0x0
c000f327:	89 e8                	mov    eax,ebp
c000f329:	83 e0 02             	and    eax,0x2
c000f32c:	74 0e                	je     c000f33c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f32e:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f332:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f336:	8d 41 02             	lea    eax,[ecx+0x2]
c000f339:	89 c1                	mov    ecx,eax
c000f33b:	90                   	nop
c000f33c:	89 e8                	mov    eax,ebp
c000f33e:	83 e0 01             	and    eax,0x1
c000f341:	74 09                	je     c000f34c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f343:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f346:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f349:	8d 76 00             	lea    esi,[esi+0x0]
c000f34c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f350:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f354:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f358:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f35c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f360:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f364:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f369:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f36d:	89 c2                	mov    edx,eax
c000f36f:	c1 fa 1f             	sar    edx,0x1f
c000f372:	52                   	push   edx
c000f373:	50                   	push   eax
c000f374:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f378:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f37c:	e8 83 26 01 00       	call   c0021a04 <__udivdi3>
c000f381:	83 c4 10             	add    esp,0x10
c000f384:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f388:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f38c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f390:	80 f4 00             	xor    ah,0x0
c000f393:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f397:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f39b:	80 f4 00             	xor    ah,0x0
c000f39e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f3a6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f3aa:	89 f8                	mov    eax,edi
c000f3ac:	09 f0                	or     eax,esi
c000f3ae:	74 04                	je     c000f3b4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f3b0:	eb b2                	jmp    c000f364 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f3b2:	66 90                	xchg   ax,ax
c000f3b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f3bb:	90                   	nop
c000f3bc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3c0:	89 c1                	mov    ecx,eax
c000f3c2:	89 c3                	mov    ebx,eax
c000f3c4:	c1 fb 1f             	sar    ebx,0x1f
c000f3c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3cf:	53                   	push   ebx
c000f3d0:	51                   	push   ecx
c000f3d1:	52                   	push   edx
c000f3d2:	50                   	push   eax
c000f3d3:	e8 2c 27 01 00       	call   c0021b04 <__umoddi3>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f3e0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f3e4:	01 c8                	add    eax,ecx
c000f3e6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f3e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ec:	88 10                	mov    BYTE PTR [eax],dl
c000f3ee:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f3f2:	89 c2                	mov    edx,eax
c000f3f4:	c1 fa 1f             	sar    edx,0x1f
c000f3f7:	52                   	push   edx
c000f3f8:	50                   	push   eax
c000f3f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f3fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f401:	e8 fe 25 01 00       	call   c0021a04 <__udivdi3>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f40d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f411:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f415:	80 f4 00             	xor    ah,0x0
c000f418:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f41c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f420:	80 f4 00             	xor    ah,0x0
c000f423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f42b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f42f:	89 f8                	mov    eax,edi
c000f431:	09 f0                	or     eax,esi
c000f433:	74 03                	je     c000f438 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f435:	eb 85                	jmp    c000f3bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f437:	90                   	nop
c000f438:	90                   	nop
c000f439:	83 c4 5c             	add    esp,0x5c
c000f43c:	5b                   	pop    ebx
c000f43d:	5e                   	pop    esi
c000f43e:	5f                   	pop    edi
c000f43f:	5d                   	pop    ebp
c000f440:	c3                   	ret    
c000f441:	8d 76 00             	lea    esi,[esi+0x0]

c000f444 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f444:	55                   	push   ebp
c000f445:	57                   	push   edi
c000f446:	56                   	push   esi
c000f447:	53                   	push   ebx
c000f448:	83 ec 5c             	sub    esp,0x5c
c000f44b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f44f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f453:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f45b:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f45f:	bb cf 2d 02 c0       	mov    ebx,0xc0022dcf
c000f464:	bd 11 00 00 00       	mov    ebp,0x11
c000f469:	89 d0                	mov    eax,edx
c000f46b:	83 e0 01             	and    eax,0x1
c000f46e:	74 10                	je     c000f480 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f470:	8a 03                	mov    al,BYTE PTR [ebx]
c000f472:	88 02                	mov    BYTE PTR [edx],al
c000f474:	8d 52 01             	lea    edx,[edx+0x1]
c000f477:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f47a:	83 ed 01             	sub    ebp,0x1
c000f47d:	8d 76 00             	lea    esi,[esi+0x0]
c000f480:	89 d0                	mov    eax,edx
c000f482:	83 e0 02             	and    eax,0x2
c000f485:	74 11                	je     c000f498 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f487:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f48a:	66 89 02             	mov    WORD PTR [edx],ax
c000f48d:	8d 52 02             	lea    edx,[edx+0x2]
c000f490:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f493:	83 ed 02             	sub    ebp,0x2
c000f496:	66 90                	xchg   ax,ax
c000f498:	89 e8                	mov    eax,ebp
c000f49a:	c1 e8 02             	shr    eax,0x2
c000f49d:	fc                   	cld    
c000f49e:	89 d7                	mov    edi,edx
c000f4a0:	89 de                	mov    esi,ebx
c000f4a2:	89 c1                	mov    ecx,eax
c000f4a4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f4a6:	89 f3                	mov    ebx,esi
c000f4a8:	89 fa                	mov    edx,edi
c000f4aa:	b9 00 00 00 00       	mov    ecx,0x0
c000f4af:	89 e8                	mov    eax,ebp
c000f4b1:	83 e0 02             	and    eax,0x2
c000f4b4:	74 0e                	je     c000f4c4 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f4b6:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f4ba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f4be:	8d 41 02             	lea    eax,[ecx+0x2]
c000f4c1:	89 c1                	mov    ecx,eax
c000f4c3:	90                   	nop
c000f4c4:	89 e8                	mov    eax,ebp
c000f4c6:	83 e0 01             	and    eax,0x1
c000f4c9:	74 09                	je     c000f4d4 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f4cb:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f4ce:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f4d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4d4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f4d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f4dc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f4e1:	79 1d                	jns    c000f500 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f4e3:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f4e7:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f4ec:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f4f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f4f4:	8d 50 01             	lea    edx,[eax+0x1]
c000f4f7:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f4fb:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f4fe:	66 90                	xchg   ax,ax
c000f500:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f504:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f508:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f50c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f510:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f515:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f519:	89 c2                	mov    edx,eax
c000f51b:	c1 fa 1f             	sar    edx,0x1f
c000f51e:	52                   	push   edx
c000f51f:	50                   	push   eax
c000f520:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f524:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f528:	e8 d7 24 01 00       	call   c0021a04 <__udivdi3>
c000f52d:	83 c4 10             	add    esp,0x10
c000f530:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f534:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f538:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f53c:	80 f4 00             	xor    ah,0x0
c000f53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f543:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f547:	80 f4 00             	xor    ah,0x0
c000f54a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f54e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f552:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f556:	89 f8                	mov    eax,edi
c000f558:	09 f0                	or     eax,esi
c000f55a:	74 04                	je     c000f560 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f55c:	eb b2                	jmp    c000f510 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f55e:	66 90                	xchg   ax,ax
c000f560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f564:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f567:	90                   	nop
c000f568:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f56c:	89 c1                	mov    ecx,eax
c000f56e:	89 c3                	mov    ebx,eax
c000f570:	c1 fb 1f             	sar    ebx,0x1f
c000f573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f577:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f57b:	53                   	push   ebx
c000f57c:	51                   	push   ecx
c000f57d:	52                   	push   edx
c000f57e:	50                   	push   eax
c000f57f:	e8 00 23 01 00       	call   c0021884 <__moddi3>
c000f584:	83 c4 10             	add    esp,0x10
c000f587:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f58c:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f590:	01 c8                	add    eax,ecx
c000f592:	8a 10                	mov    dl,BYTE PTR [eax]
c000f594:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f598:	88 10                	mov    BYTE PTR [eax],dl
c000f59a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f59e:	89 c2                	mov    edx,eax
c000f5a0:	c1 fa 1f             	sar    edx,0x1f
c000f5a3:	52                   	push   edx
c000f5a4:	50                   	push   eax
c000f5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5ad:	e8 86 21 01 00       	call   c0021738 <__divdi3>
c000f5b2:	83 c4 10             	add    esp,0x10
c000f5b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f5b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f5bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5c1:	80 f4 00             	xor    ah,0x0
c000f5c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f5cc:	80 f4 00             	xor    ah,0x0
c000f5cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f5d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f5db:	89 f8                	mov    eax,edi
c000f5dd:	09 f0                	or     eax,esi
c000f5df:	74 03                	je     c000f5e4 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f5e1:	eb 85                	jmp    c000f568 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f5e3:	90                   	nop
c000f5e4:	90                   	nop
c000f5e5:	83 c4 5c             	add    esp,0x5c
c000f5e8:	5b                   	pop    ebx
c000f5e9:	5e                   	pop    esi
c000f5ea:	5f                   	pop    edi
c000f5eb:	5d                   	pop    ebp
c000f5ec:	c3                   	ret    
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]

c000f5f0 <KeGetDigitsInNumber(long long)>:
c000f5f0:	56                   	push   esi
c000f5f1:	53                   	push   ebx
c000f5f2:	83 ec 24             	sub    esp,0x24
c000f5f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f5fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f605:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f60d:	8d 76 00             	lea    esi,[esi+0x0]
c000f610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f614:	80 f4 00             	xor    ah,0x0
c000f617:	89 c3                	mov    ebx,eax
c000f619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f61d:	80 f4 00             	xor    ah,0x0
c000f620:	89 c6                	mov    esi,eax
c000f622:	89 f0                	mov    eax,esi
c000f624:	09 d8                	or     eax,ebx
c000f626:	74 28                	je     c000f650 <KeGetDigitsInNumber(long long)+0x60>
c000f628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f62c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f630:	6a 00                	push   0x0
c000f632:	6a 0a                	push   0xa
c000f634:	52                   	push   edx
c000f635:	50                   	push   eax
c000f636:	e8 fd 20 01 00       	call   c0021738 <__divdi3>
c000f63b:	83 c4 10             	add    esp,0x10
c000f63e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f642:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f646:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f64b:	eb c3                	jmp    c000f610 <KeGetDigitsInNumber(long long)+0x20>
c000f64d:	8d 76 00             	lea    esi,[esi+0x0]
c000f650:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f654:	83 c4 24             	add    esp,0x24
c000f657:	5b                   	pop    ebx
c000f658:	5e                   	pop    esi
c000f659:	c3                   	ret    
c000f65a:	66 90                	xchg   ax,ax

c000f65c <KeItoa(unsigned long long, char*)>:
c000f65c:	83 ec 1c             	sub    esp,0x1c
c000f65f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f667:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f66f:	6a 0a                	push   0xa
c000f671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f67d:	e8 3a fc ff ff       	call   c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f682:	83 c4 10             	add    esp,0x10
c000f685:	90                   	nop
c000f686:	83 c4 1c             	add    esp,0x1c
c000f689:	c3                   	ret    
c000f68a:	66 90                	xchg   ax,ax

c000f68c <KeItoa(long long, char*)>:
c000f68c:	83 ec 1c             	sub    esp,0x1c
c000f68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f697:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f69b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f69f:	6a 0a                	push   0xa
c000f6a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6ad:	e8 92 fd ff ff       	call   c000f444 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	90                   	nop
c000f6b6:	83 c4 1c             	add    esp,0x1c
c000f6b9:	c3                   	ret    
c000f6ba:	66 90                	xchg   ax,ax

c000f6bc <KeXtoa(unsigned long long, char*)>:
c000f6bc:	83 ec 1c             	sub    esp,0x1c
c000f6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6cf:	6a 10                	push   0x10
c000f6d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6dd:	e8 da fb ff ff       	call   c000f2bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	90                   	nop
c000f6e6:	83 c4 1c             	add    esp,0x1c
c000f6e9:	c3                   	ret    

c000f6ea <sbrk>:
c000f6ea:	55                   	push   ebp
c000f6eb:	57                   	push   edi
c000f6ec:	56                   	push   esi
c000f6ed:	53                   	push   ebx
c000f6ee:	83 ec 1c             	sub    esp,0x1c
c000f6f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f5:	85 c0                	test   eax,eax
c000f6f7:	74 61                	je     c000f75a <sbrk+0x70>
c000f6f9:	78 66                	js     c000f761 <sbrk+0x77>
c000f6fb:	8b 15 90 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026790
c000f701:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f705:	05 ff 0f 00 00       	add    eax,0xfff
c000f70a:	89 c5                	mov    ebp,eax
c000f70c:	78 6b                	js     c000f779 <sbrk+0x8f>
c000f70e:	c1 fd 0c             	sar    ebp,0xc
c000f711:	bb 00 00 00 00       	mov    ebx,0x0
c000f716:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f71c:	8b 3d 90 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026790
c000f722:	e8 c1 07 00 00       	call   c000fee8 <Phys::allocatePage()>
c000f727:	68 01 04 00 00       	push   0x401
c000f72c:	57                   	push   edi
c000f72d:	50                   	push   eax
c000f72e:	56                   	push   esi
c000f72f:	e8 e6 42 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f734:	81 05 90 67 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026790,0x1000
c000f73e:	83 c3 01             	add    ebx,0x1
c000f741:	83 c4 10             	add    esp,0x10
c000f744:	39 dd                	cmp    ebp,ebx
c000f746:	75 ce                	jne    c000f716 <sbrk+0x2c>
c000f748:	0f 20 d8             	mov    eax,cr3
c000f74b:	0f 22 d8             	mov    cr3,eax
c000f74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f752:	83 c4 1c             	add    esp,0x1c
c000f755:	5b                   	pop    ebx
c000f756:	5e                   	pop    esi
c000f757:	5f                   	pop    edi
c000f758:	5d                   	pop    ebp
c000f759:	c3                   	ret    
c000f75a:	a1 90 67 02 c0       	mov    eax,ds:0xc0026790
c000f75f:	eb f1                	jmp    c000f752 <sbrk+0x68>
c000f761:	83 ec 08             	sub    esp,0x8
c000f764:	50                   	push   eax
c000f765:	68 b0 3f 02 c0       	push   0xc0023fb0
c000f76a:	e8 0d 78 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f76f:	83 c4 10             	add    esp,0x10
c000f772:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f777:	eb d9                	jmp    c000f752 <sbrk+0x68>
c000f779:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f77f:	eb 8d                	jmp    c000f70e <sbrk+0x24>

c000f781 <sbrk_thunk>:
c000f781:	83 ec 0c             	sub    esp,0xc
c000f784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f788:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f78d:	7f 10                	jg     c000f79f <sbrk_thunk+0x1e>
c000f78f:	83 ec 0c             	sub    esp,0xc
c000f792:	50                   	push   eax
c000f793:	e8 52 ff ff ff       	call   c000f6ea <sbrk>
c000f798:	83 c4 10             	add    esp,0x10
c000f79b:	83 c4 0c             	add    esp,0xc
c000f79e:	c3                   	ret    
c000f79f:	83 ec 08             	sub    esp,0x8
c000f7a2:	50                   	push   eax
c000f7a3:	68 e0 3f 02 c0       	push   0xc0023fe0
c000f7a8:	e8 cf 77 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000f7ad:	83 c4 10             	add    esp,0x10
c000f7b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7b5:	eb e4                	jmp    c000f79b <sbrk_thunk+0x1a>

c000f7b7 <mmap>:
c000f7b7:	55                   	push   ebp
c000f7b8:	57                   	push   edi
c000f7b9:	56                   	push   esi
c000f7ba:	53                   	push   ebx
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f7c8:	89 fb                	mov    ebx,edi
c000f7ca:	c1 eb 0c             	shr    ebx,0xc
c000f7cd:	53                   	push   ebx
c000f7ce:	e8 64 3b 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c000f7d3:	89 c5                	mov    ebp,eax
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	85 db                	test   ebx,ebx
c000f7da:	7e 2f                	jle    c000f80b <mmap+0x54>
c000f7dc:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f7e2:	01 c7                	add    edi,eax
c000f7e4:	89 c3                	mov    ebx,eax
c000f7e6:	8b 35 90 c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c290
c000f7ec:	e8 f7 06 00 00       	call   c000fee8 <Phys::allocatePage()>
c000f7f1:	68 01 04 00 00       	push   0x401
c000f7f6:	53                   	push   ebx
c000f7f7:	50                   	push   eax
c000f7f8:	56                   	push   esi
c000f7f9:	e8 1c 42 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f804:	83 c4 10             	add    esp,0x10
c000f807:	39 fb                	cmp    ebx,edi
c000f809:	75 db                	jne    c000f7e6 <mmap+0x2f>
c000f80b:	89 e8                	mov    eax,ebp
c000f80d:	83 c4 0c             	add    esp,0xc
c000f810:	5b                   	pop    ebx
c000f811:	5e                   	pop    esi
c000f812:	5f                   	pop    edi
c000f813:	5d                   	pop    ebp
c000f814:	c3                   	ret    

c000f815 <munmap>:
c000f815:	83 ec 18             	sub    esp,0x18
c000f818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f81c:	e8 1e 3e 00 00       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c000f821:	b8 00 00 00 00       	mov    eax,0x0
c000f826:	83 c4 1c             	add    esp,0x1c
c000f829:	c3                   	ret    

c000f82a <liballoc_lock()>:
c000f82a:	fa                   	cli    
c000f82b:	83 05 70 ca 02 c0 01 	add    DWORD PTR ds:0xc002ca70,0x1
c000f832:	b8 00 00 00 00       	mov    eax,0x0
c000f837:	c3                   	ret    

c000f838 <liballoc_unlock()>:
c000f838:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f840:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c000f847:	75 01                	jne    c000f84a <liballoc_unlock()+0x12>
c000f849:	fb                   	sti    
c000f84a:	b8 00 00 00 00       	mov    eax,0x0
c000f84f:	c3                   	ret    

c000f850 <liballoc_alloc(int)>:
c000f850:	83 ec 10             	sub    esp,0x10
c000f853:	6a 01                	push   0x1
c000f855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f859:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f85f:	e8 ba 42 00 00       	call   c0013b1e <VAS::allocatePages(int, int)>
c000f864:	83 c4 1c             	add    esp,0x1c
c000f867:	c3                   	ret    

c000f868 <liballoc_free(void*, int)>:
c000f868:	83 ec 14             	sub    esp,0x14
c000f86b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f86f:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c000f875:	e8 02 3f 00 00       	call   c001377c <VAS::freeAllocatedPages(unsigned long)>
c000f87a:	b8 00 00 00 00       	mov    eax,0x0
c000f87f:	83 c4 1c             	add    esp,0x1c
c000f882:	c3                   	ret    

c000f883 <realloc>:
c000f883:	83 ec 14             	sub    esp,0x14
c000f886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f88e:	e8 c4 1e ff ff       	call   c0001757 <dlrealloc>
c000f893:	83 c4 1c             	add    esp,0x1c
c000f896:	c3                   	ret    

c000f897 <malloc>:
c000f897:	83 ec 18             	sub    esp,0x18
c000f89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89e:	e8 77 19 ff ff       	call   c000121a <dlmalloc>
c000f8a3:	83 c4 1c             	add    esp,0x1c
c000f8a6:	c3                   	ret    

c000f8a7 <free>:
c000f8a7:	83 ec 18             	sub    esp,0x18
c000f8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ae:	e8 a0 14 ff ff       	call   c0000d53 <dlfree>
c000f8b3:	83 c4 1c             	add    esp,0x1c
c000f8b6:	c3                   	ret    

c000f8b7 <rfree>:
c000f8b7:	83 ec 18             	sub    esp,0x18
c000f8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8be:	e8 90 14 ff ff       	call   c0000d53 <dlfree>
c000f8c3:	83 c4 1c             	add    esp,0x1c
c000f8c6:	c3                   	ret    

c000f8c7 <calloc>:
c000f8c7:	56                   	push   esi
c000f8c8:	53                   	push   ebx
c000f8c9:	83 ec 10             	sub    esp,0x10
c000f8cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8d0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8d5:	53                   	push   ebx
c000f8d6:	e8 bc ff ff ff       	call   c000f897 <malloc>
c000f8db:	89 c6                	mov    esi,eax
c000f8dd:	83 c4 0c             	add    esp,0xc
c000f8e0:	53                   	push   ebx
c000f8e1:	6a 00                	push   0x0
c000f8e3:	50                   	push   eax
c000f8e4:	e8 07 0c ff ff       	call   c00004f0 <memset>
c000f8e9:	89 f0                	mov    eax,esi
c000f8eb:	83 c4 14             	add    esp,0x14
c000f8ee:	5b                   	pop    ebx
c000f8ef:	5e                   	pop    esi
c000f8f0:	c3                   	ret    
c000f8f1:	66 90                	xchg   ax,ax
c000f8f3:	90                   	nop

c000f8f4 <KeMailboxTryPost(Mailbox*, void*)>:
c000f8f4:	83 ec 10             	sub    esp,0x10
c000f8f7:	fa                   	cli    
c000f8f8:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f8fd:	83 c0 01             	add    eax,0x1
c000f900:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f905:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f90a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f911:	85 c0                	test   eax,eax
c000f913:	75 23                	jne    c000f938 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f919:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f91d:	89 10                	mov    DWORD PTR [eax],edx
c000f91f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f923:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f926:	8d 50 01             	lea    edx,[eax+0x1]
c000f929:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f92d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f930:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f935:	8d 76 00             	lea    esi,[esi+0x0]
c000f938:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f940:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f945:	85 c0                	test   eax,eax
c000f947:	75 03                	jne    c000f94c <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f949:	fb                   	sti    
c000f94a:	66 90                	xchg   ax,ax
c000f94c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f950:	83 c4 10             	add    esp,0x10
c000f953:	c3                   	ret    

c000f954 <KeMailboxTryGet(Mailbox*, void**)>:
c000f954:	83 ec 10             	sub    esp,0x10
c000f957:	fa                   	cli    
c000f958:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f95d:	83 c0 01             	add    eax,0x1
c000f960:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000f965:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f971:	83 f8 01             	cmp    eax,0x1
c000f974:	75 22                	jne    c000f998 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f97a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f97c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f980:	89 10                	mov    DWORD PTR [eax],edx
c000f982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f989:	8d 50 ff             	lea    edx,[eax-0x1]
c000f98c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f990:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f993:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f998:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000f9a0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	75 03                	jne    c000f9ac <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f9a9:	fb                   	sti    
c000f9aa:	66 90                	xchg   ax,ax
c000f9ac:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	c3                   	ret    

c000f9b4 <KeMailboxCreate()>:
c000f9b4:	83 ec 1c             	sub    esp,0x1c
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	6a 08                	push   0x8
c000f9bc:	e8 d6 fe ff ff       	call   c000f897 <malloc>
c000f9c1:	83 c4 10             	add    esp,0x10
c000f9c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f9d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9e1:	83 c4 1c             	add    esp,0x1c
c000f9e4:	c3                   	ret    
c000f9e5:	8d 76 00             	lea    esi,[esi+0x0]

c000f9e8 <KeMailboxPost(Mailbox*, void*)>:
c000f9e8:	83 ec 1c             	sub    esp,0x1c
c000f9eb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f9f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9f8:	e8 f7 fe ff ff       	call   c000f8f4 <KeMailboxTryPost(Mailbox*, void*)>
c000f9fd:	83 c4 08             	add    esp,0x8
c000fa00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa04:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa08:	83 f0 01             	xor    eax,0x1
c000fa0b:	0f b6 c0             	movzx  eax,al
c000fa0e:	85 c0                	test   eax,eax
c000fa10:	74 26                	je     c000fa38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fa12:	fa                   	cli    
c000fa13:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa18:	83 c0 01             	add    eax,0x1
c000fa1b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000fa20:	e8 fb 73 00 00       	call   c0016e20 <schedule()>
c000fa25:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000fa2d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa32:	85 c0                	test   eax,eax
c000fa34:	75 02                	jne    c000fa38 <KeMailboxPost(Mailbox*, void*)+0x50>
c000fa36:	fb                   	sti    
c000fa37:	90                   	nop
c000fa38:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fa3d:	85 c0                	test   eax,eax
c000fa3f:	75 03                	jne    c000fa44 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fa41:	eb ad                	jmp    c000f9f0 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fa43:	90                   	nop
c000fa44:	90                   	nop
c000fa45:	83 c4 1c             	add    esp,0x1c
c000fa48:	c3                   	ret    
c000fa49:	8d 76 00             	lea    esi,[esi+0x0]

c000fa4c <KeMailboxGet(Mailbox*, void**)>:
c000fa4c:	83 ec 1c             	sub    esp,0x1c
c000fa4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fa54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fa5c:	e8 f3 fe ff ff       	call   c000f954 <KeMailboxTryGet(Mailbox*, void**)>
c000fa61:	83 c4 08             	add    esp,0x8
c000fa64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fa6c:	83 f0 01             	xor    eax,0x1
c000fa6f:	0f b6 c0             	movzx  eax,al
c000fa72:	85 c0                	test   eax,eax
c000fa74:	74 26                	je     c000fa9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa76:	fa                   	cli    
c000fa77:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa7c:	83 c0 01             	add    eax,0x1
c000fa7f:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c000fa84:	e8 97 73 00 00       	call   c0016e20 <schedule()>
c000fa89:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c000fa91:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c000fa96:	85 c0                	test   eax,eax
c000fa98:	75 02                	jne    c000fa9c <KeMailboxGet(Mailbox*, void**)+0x50>
c000fa9a:	fb                   	sti    
c000fa9b:	90                   	nop
c000fa9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000faa1:	85 c0                	test   eax,eax
c000faa3:	75 03                	jne    c000faa8 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000faa5:	eb ad                	jmp    c000fa54 <KeMailboxGet(Mailbox*, void**)+0x8>
c000faa7:	90                   	nop
c000faa8:	90                   	nop
c000faa9:	83 c4 1c             	add    esp,0x1c
c000faac:	c3                   	ret    
c000faad:	8d 76 00             	lea    esi,[esi+0x0]

c000fab0 <KeMailboxDestroy(Mailbox*)>:
c000fab0:	83 ec 0c             	sub    esp,0xc
c000fab3:	83 ec 0c             	sub    esp,0xc
c000fab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000faba:	e8 e8 fd ff ff       	call   c000f8a7 <free>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	90                   	nop
c000fac3:	83 c4 0c             	add    esp,0xc
c000fac6:	c3                   	ret    

c000fac7 <KeFirstTask()>:
c000fac7:	53                   	push   ebx
c000fac8:	83 ec 08             	sub    esp,0x8
c000facb:	fb                   	sti    
c000facc:	e8 dc a0 00 00       	call   c0019bad <HalEnableNMI()>
c000fad1:	83 ec 0c             	sub    esp,0xc
c000fad4:	68 ef 3f 02 c0       	push   0xc0023fef
c000fad9:	e8 27 d8 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fade:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000fae5:	e8 ad fd ff ff       	call   c000f897 <malloc>
c000faea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000faf1:	89 c3                	mov    ebx,eax
c000faf3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c000faf8:	50                   	push   eax
c000faf9:	68 08 40 02 c0       	push   0xc0024008
c000fafe:	6a 01                	push   0x1
c000fb00:	53                   	push   ebx
c000fb01:	e8 1a 6e 00 00       	call   c0016920 <Process::Process(bool, char const*, Process*, char**)>
c000fb06:	83 c4 20             	add    esp,0x20
c000fb09:	68 ff 00 00 00       	push   0xff
c000fb0e:	6a 00                	push   0x0
c000fb10:	68 d7 ea 00 c0       	push   0xc000ead7
c000fb15:	53                   	push   ebx
c000fb16:	e8 45 70 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c000fb1b:	8b 15 98 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca98
c000fb21:	6a 7a                	push   0x7a
c000fb23:	6a 00                	push   0x0
c000fb25:	68 08 75 01 c0       	push   0xc0017508
c000fb2a:	52                   	push   edx
c000fb2b:	e8 30 70 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c000fb30:	83 c4 14             	add    esp,0x14
c000fb33:	a3 50 ca 02 c0       	mov    ds:0xc002ca50,eax
c000fb38:	68 90 40 02 c0       	push   0xc0024090
c000fb3d:	e8 c3 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb42:	c6 05 0d c1 02 c0 01 	mov    BYTE PTR ds:0xc002c10d,0x1
c000fb49:	e8 9d 0c 00 00       	call   c00107eb <KeInitRand()>
c000fb4e:	e8 87 7d 00 00       	call   c00178da <Vm::initialise8086()>
c000fb53:	e8 f0 82 ff ff       	call   c0007e48 <Fs::initVFS()>
c000fb58:	c7 04 24 51 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c51
c000fb5f:	e8 a1 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb64:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c000fb69:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000fb6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb71:	6a 00                	push   0x0
c000fb73:	6a 00                	push   0x0
c000fb75:	6a 00                	push   0x0
c000fb77:	50                   	push   eax
c000fb78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb7b:	83 c4 14             	add    esp,0x14
c000fb7e:	68 90 40 02 c0       	push   0xc0024090
c000fb83:	e8 7d d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fb88:	e8 a0 7a ff ff       	call   c000762d <KeInitialiseSymlinks()>
c000fb8d:	e8 b8 ea ff ff       	call   c000e64a <KeLoadSystemEnv()>
c000fb92:	e8 99 0a 00 00       	call   c0010630 <KeSetupPowerManager()>
c000fb97:	c7 04 24 15 40 02 c0 	mov    DWORD PTR [esp],0xc0024015
c000fb9e:	e8 62 d7 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fba3:	59                   	pop    ecx
c000fba4:	8b 1d 08 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c108
c000fbaa:	58                   	pop    eax
c000fbab:	6a 01                	push   0x1
c000fbad:	68 26 40 02 c0       	push   0xc0024026
c000fbb2:	e8 c3 66 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c000fbb7:	5a                   	pop    edx
c000fbb8:	59                   	pop    ecx
c000fbb9:	53                   	push   ebx
c000fbba:	50                   	push   eax
c000fbbb:	e8 0c 69 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	6a 02                	push   0x2
c000fbc8:	e8 13 73 00 00       	call   c0016ee0 <blockTask(TaskState)>
c000fbcd:	83 c4 10             	add    esp,0x10
c000fbd0:	eb f1                	jmp    c000fbc3 <KeFirstTask()+0xfc>

c000fbd2 <KeEntryPoint>:
c000fbd2:	57                   	push   edi
c000fbd3:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbd8:	56                   	push   esi
c000fbd9:	31 f6                	xor    esi,esi
c000fbdb:	53                   	push   ebx
c000fbdc:	83 ec 20             	sub    esp,0x20
c000fbdf:	e8 e4 d6 ff ff       	call   c000d2c8 <KeInitialiseBootConfigurationFlags()>
c000fbe4:	89 f0                	mov    eax,esi
c000fbe6:	89 fa                	mov    edx,edi
c000fbe8:	ee                   	out    dx,al
c000fbe9:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fbee:	b0 80                	mov    al,0x80
c000fbf0:	89 da                	mov    edx,ebx
c000fbf2:	ee                   	out    dx,al
c000fbf3:	b1 03                	mov    cl,0x3
c000fbf5:	ba f8 03 00 00       	mov    edx,0x3f8
c000fbfa:	88 c8                	mov    al,cl
c000fbfc:	ee                   	out    dx,al
c000fbfd:	89 f0                	mov    eax,esi
c000fbff:	89 fa                	mov    edx,edi
c000fc01:	ee                   	out    dx,al
c000fc02:	88 c8                	mov    al,cl
c000fc04:	89 da                	mov    edx,ebx
c000fc06:	ee                   	out    dx,al
c000fc07:	b0 c7                	mov    al,0xc7
c000fc09:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc0e:	ee                   	out    dx,al
c000fc0f:	b0 0b                	mov    al,0xb
c000fc11:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc16:	ee                   	out    dx,al
c000fc17:	83 ec 0c             	sub    esp,0xc
c000fc1a:	68 42 40 02 c0       	push   0xc0024042
c000fc1f:	e8 58 73 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000fc24:	e8 ad d6 ff ff       	call   c000d2d6 <KeDisplaySplashScreen()>
c000fc29:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc2e:	05 ff 0f 00 00       	add    eax,0xfff
c000fc33:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc38:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc3b:	e8 39 04 00 00       	call   c0010079 <Phys::physicalMemorySetup(unsigned int)>
c000fc40:	e8 d0 38 00 00       	call   c0013515 <Virt::virtualMemorySetup()>
c000fc45:	e8 dc d5 ff ff       	call   c000d226 <KeInitialiseAtexit()>
c000fc4a:	58                   	pop    eax
c000fc4b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fc4f:	53                   	push   ebx
c000fc50:	e8 a7 3b 00 00       	call   c00137fc <VAS::VAS()>
c000fc55:	89 1d 90 c2 02 c0    	mov    DWORD PTR ds:0xc002c290,ebx
c000fc5b:	e8 be 1f 01 00       	call   c0021c1e <_init>
c000fc60:	c7 04 24 59 40 02 c0 	mov    DWORD PTR [esp],0xc0024059
c000fc67:	e8 99 d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fc6c:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fc73:	e8 1f fc ff ff       	call   c000f897 <malloc>
c000fc78:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc7b:	89 c6                	mov    esi,eax
c000fc7d:	e8 0a e4 ff ff       	call   c000e08c <Computer::Computer()>
c000fc82:	8b 15 90 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c290
c000fc88:	89 35 08 c1 02 c0    	mov    DWORD PTR ds:0xc002c108,esi
c000fc8e:	52                   	push   edx
c000fc8f:	6a 00                	push   0x0
c000fc91:	6a 00                	push   0x0
c000fc93:	56                   	push   esi
c000fc94:	e8 37 e4 ff ff       	call   c000e0d0 <Computer::open(int, int, void*)>
c000fc99:	83 c4 14             	add    esp,0x14
c000fc9c:	68 b4 40 02 c0       	push   0xc00240b4
c000fca1:	e8 5f d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fca6:	e8 62 a6 00 00       	call   c001a30d <HalInitialiseCoprocessor()>
c000fcab:	c7 04 24 73 40 02 c0 	mov    DWORD PTR [esp],0xc0024073
c000fcb2:	e8 4e d6 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c000fcb7:	c7 04 24 c7 fa 00 c0 	mov    DWORD PTR [esp],0xc000fac7
c000fcbe:	e8 15 70 00 00       	call   c0016cd8 <setupMultitasking(void (*)())>
c000fcc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcc6:	e8 e7 3b 00 00       	call   c00138b2 <VAS::~VAS()>
c000fccb:	83 c4 30             	add    esp,0x30
c000fcce:	5b                   	pop    ebx
c000fccf:	5e                   	pop    esi
c000fcd0:	5f                   	pop    edi
c000fcd1:	c3                   	ret    
c000fcd2:	66 90                	xchg   ax,ax

c000fcd4 <Mutex::Mutex()>:
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcdb:	83 ec 08             	sub    esp,0x8
c000fcde:	6a 01                	push   0x1
c000fce0:	50                   	push   eax
c000fce1:	e8 a6 0d 00 00       	call   c0010a8c <Semaphore::Semaphore(int)>
c000fce6:	83 c4 10             	add    esp,0x10
c000fce9:	90                   	nop
c000fcea:	83 c4 0c             	add    esp,0xc
c000fced:	c3                   	ret    

c000fcee <KeIsKernelInPanic()>:
c000fcee:	a0 64 c1 02 c0       	mov    al,ds:0xc002c164
c000fcf3:	c3                   	ret    

c000fcf4 <KePanic(char const*)>:
c000fcf4:	c6 05 64 c1 02 c0 01 	mov    BYTE PTR ds:0xc002c164,0x1
c000fcfb:	e9 91 a6 00 00       	jmp    c001a391 <HalPanic(char const*)>

c000fd00 <Phys::allocateDMA(unsigned long)>:
c000fd00:	55                   	push   ebp
c000fd01:	31 ed                	xor    ebp,ebp
c000fd03:	57                   	push   edi
c000fd04:	56                   	push   esi
c000fd05:	53                   	push   ebx
c000fd06:	31 db                	xor    ebx,ebx
c000fd08:	83 ec 1c             	sub    esp,0x1c
c000fd0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd0f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd17:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fd1d:	31 c0                	xor    eax,eax
c000fd1f:	c1 ef 0c             	shr    edi,0xc
c000fd22:	eb 1b                	jmp    c000fd3f <Phys::allocateDMA(unsigned long)+0x3f>
c000fd24:	85 c0                	test   eax,eax
c000fd26:	75 06                	jne    c000fd2e <Phys::allocateDMA(unsigned long)+0x2e>
c000fd28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd2c:	89 dd                	mov    ebp,ebx
c000fd2e:	8d 70 01             	lea    esi,[eax+0x1]
c000fd31:	39 f7                	cmp    edi,esi
c000fd33:	74 37                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x6c>
c000fd35:	89 f0                	mov    eax,esi
c000fd37:	83 c3 01             	add    ebx,0x1
c000fd3a:	83 fb 0f             	cmp    ebx,0xf
c000fd3d:	7f 13                	jg     c000fd52 <Phys::allocateDMA(unsigned long)+0x52>
c000fd3f:	80 bb 80 c1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3e80],0x0
c000fd46:	74 dc                	je     c000fd24 <Phys::allocateDMA(unsigned long)+0x24>
c000fd48:	31 c0                	xor    eax,eax
c000fd4a:	83 c3 01             	add    ebx,0x1
c000fd4d:	83 fb 0f             	cmp    ebx,0xf
c000fd50:	7e ed                	jle    c000fd3f <Phys::allocateDMA(unsigned long)+0x3f>
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	68 d8 40 02 c0       	push   0xc00240d8
c000fd5a:	e8 95 ff ff ff       	call   c000fcf4 <KePanic(char const*)>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	31 c0                	xor    eax,eax
c000fd64:	83 c4 1c             	add    esp,0x1c
c000fd67:	5b                   	pop    ebx
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	89 e9                	mov    ecx,ebp
c000fd6e:	c1 f9 04             	sar    ecx,0x4
c000fd71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000fd75:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000fd79:	89 ca                	mov    edx,ecx
c000fd7b:	83 ea 01             	sub    edx,0x1
c000fd7e:	79 03                	jns    c000fd83 <Phys::allocateDMA(unsigned long)+0x83>
c000fd80:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fd83:	c1 fa 04             	sar    edx,0x4
c000fd86:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000fd8a:	74 08                	je     c000fd94 <Phys::allocateDMA(unsigned long)+0x94>
c000fd8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000fd90:	31 c0                	xor    eax,eax
c000fd92:	eb b6                	jmp    c000fd4a <Phys::allocateDMA(unsigned long)+0x4a>
c000fd94:	85 f6                	test   esi,esi
c000fd96:	74 17                	je     c000fdaf <Phys::allocateDMA(unsigned long)+0xaf>
c000fd98:	8d 95 80 c1 02 c0    	lea    edx,[ebp-0x3ffd3e80]
c000fd9e:	8d 84 05 81 c1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd3e7f]
c000fda5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fda8:	83 c2 01             	add    edx,0x1
c000fdab:	39 d0                	cmp    eax,edx
c000fdad:	75 f6                	jne    c000fda5 <Phys::allocateDMA(unsigned long)+0xa5>
c000fdaf:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fdb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fdb8:	01 f8                	add    eax,edi
c000fdba:	85 d2                	test   edx,edx
c000fdbc:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fdc1:	74 17                	je     c000fdda <Phys::allocateDMA(unsigned long)+0xda>
c000fdc3:	83 ec 0c             	sub    esp,0xc
c000fdc6:	68 d8 40 02 c0       	push   0xc00240d8
c000fdcb:	e8 24 ff ff ff       	call   c000fcf4 <KePanic(char const*)>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 f0                	mov    eax,esi
c000fdd5:	e9 5d ff ff ff       	jmp    c000fd37 <Phys::allocateDMA(unsigned long)+0x37>
c000fdda:	c1 e5 0c             	shl    ebp,0xc
c000fddd:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000fde3:	e9 7c ff ff ff       	jmp    c000fd64 <Phys::allocateDMA(unsigned long)+0x64>

c000fde8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fde8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdec:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fdf2:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fdf7:	c1 ea 0c             	shr    edx,0xc
c000fdfa:	29 d0                	sub    eax,edx
c000fdfc:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000fe01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe05:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fe0a:	c1 e8 0c             	shr    eax,0xc
c000fe0d:	85 d2                	test   edx,edx
c000fe0f:	74 11                	je     c000fe22 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fe11:	05 80 c1 02 c0       	add    eax,0xc002c180
c000fe16:	01 c2                	add    edx,eax
c000fe18:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe1b:	83 c0 01             	add    eax,0x1
c000fe1e:	39 d0                	cmp    eax,edx
c000fe20:	75 f6                	jne    c000fe18 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fe22:	c3                   	ret    

c000fe23 <Phys::setPageState(unsigned long, bool)>:
c000fe23:	57                   	push   edi
c000fe24:	56                   	push   esi
c000fe25:	8b 35 94 67 02 c0    	mov    esi,DWORD PTR ds:0xc0026794
c000fe2b:	53                   	push   ebx
c000fe2c:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fe31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe35:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fe39:	0f b6 c0             	movzx  eax,al
c000fe3c:	89 ca                	mov    edx,ecx
c000fe3e:	83 e1 07             	and    ecx,0x7
c000fe41:	c1 ea 03             	shr    edx,0x3
c000fe44:	d3 c3                	rol    ebx,cl
c000fe46:	01 d6                	add    esi,edx
c000fe48:	d3 e0                	shl    eax,cl
c000fe4a:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fe4d:	21 fb                	and    ebx,edi
c000fe4f:	88 1e                	mov    BYTE PTR [esi],bl
c000fe51:	8b 1d 94 67 02 c0    	mov    ebx,DWORD PTR ds:0xc0026794
c000fe57:	01 da                	add    edx,ebx
c000fe59:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fe5b:	09 c8                	or     eax,ecx
c000fe5d:	88 02                	mov    BYTE PTR [edx],al
c000fe5f:	5b                   	pop    ebx
c000fe60:	5e                   	pop    esi
c000fe61:	5f                   	pop    edi
c000fe62:	c3                   	ret    

c000fe63 <Phys::getPageState(unsigned long)>:
c000fe63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe67:	8b 15 94 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026794
c000fe6d:	89 c8                	mov    eax,ecx
c000fe6f:	83 e1 07             	and    ecx,0x7
c000fe72:	c1 e8 03             	shr    eax,0x3
c000fe75:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe79:	d3 f8                	sar    eax,cl
c000fe7b:	83 e0 01             	and    eax,0x1
c000fe7e:	c3                   	ret    

c000fe7f <Phys::freePage(unsigned long)>:
c000fe7f:	53                   	push   ebx
c000fe80:	83 ec 08             	sub    esp,0x8
c000fe83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe87:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fe8d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fe93:	76 41                	jbe    c000fed6 <Phys::freePage(unsigned long)+0x57>
c000fe95:	c1 e8 0c             	shr    eax,0xc
c000fe98:	50                   	push   eax
c000fe99:	89 c3                	mov    ebx,eax
c000fe9b:	e8 c3 ff ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000fea0:	5a                   	pop    edx
c000fea1:	84 c0                	test   al,al
c000fea3:	74 20                	je     c000fec5 <Phys::freePage(unsigned long)+0x46>
c000fea5:	83 ec 08             	sub    esp,0x8
c000fea8:	a1 78 c1 02 c0       	mov    eax,ds:0xc002c178
c000fead:	6a 00                	push   0x0
c000feaf:	83 e8 01             	sub    eax,0x1
c000feb2:	53                   	push   ebx
c000feb3:	a3 78 c1 02 c0       	mov    ds:0xc002c178,eax
c000feb8:	e8 66 ff ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	83 c4 08             	add    esp,0x8
c000fec3:	5b                   	pop    ebx
c000fec4:	c3                   	ret    
c000fec5:	c7 44 24 10 dd 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241dd
c000fecd:	83 c4 08             	add    esp,0x8
c000fed0:	5b                   	pop    ebx
c000fed1:	e9 1e fe ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c000fed6:	68 00 10 00 00       	push   0x1000
c000fedb:	50                   	push   eax
c000fedc:	e8 07 ff ff ff       	call   c000fde8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fee1:	59                   	pop    ecx
c000fee2:	5b                   	pop    ebx
c000fee3:	83 c4 08             	add    esp,0x8
c000fee6:	5b                   	pop    ebx
c000fee7:	c3                   	ret    

c000fee8 <Phys::allocatePage()>:
c000fee8:	56                   	push   esi
c000fee9:	53                   	push   ebx
c000feea:	83 ec 14             	sub    esp,0x14
c000feed:	8b 35 6c c1 02 c0    	mov    esi,DWORD PTR ds:0xc002c16c
c000fef3:	89 f3                	mov    ebx,esi
c000fef5:	eb 0a                	jmp    c000ff01 <Phys::allocatePage()+0x19>
c000fef7:	89 1d 6c c1 02 c0    	mov    DWORD PTR ds:0xc002c16c,ebx
c000fefd:	39 de                	cmp    esi,ebx
c000feff:	74 26                	je     c000ff27 <Phys::allocatePage()+0x3f>
c000ff01:	53                   	push   ebx
c000ff02:	e8 5c ff ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000ff07:	59                   	pop    ecx
c000ff08:	84 c0                	test   al,al
c000ff0a:	74 67                	je     c000ff73 <Phys::allocatePage()+0x8b>
c000ff0c:	83 c3 01             	add    ebx,0x1
c000ff0f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff15:	75 e0                	jne    c000fef7 <Phys::allocatePage()+0xf>
c000ff17:	31 db                	xor    ebx,ebx
c000ff19:	c7 05 6c c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c16c,0x0
c000ff23:	39 de                	cmp    esi,ebx
c000ff25:	75 da                	jne    c000ff01 <Phys::allocatePage()+0x19>
c000ff27:	83 ec 0c             	sub    esp,0xc
c000ff2a:	a0 90 c1 02 c0       	mov    al,ds:0xc002c190
c000ff2f:	83 f0 01             	xor    eax,0x1
c000ff32:	a2 90 c1 02 c0       	mov    ds:0xc002c190,al
c000ff37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff3f:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000ff45:	51                   	push   ecx
c000ff46:	e8 87 44 00 00       	call   c00143d2 <VAS::scanForEviction()>
c000ff4b:	83 c4 10             	add    esp,0x10
c000ff4e:	85 c0                	test   eax,eax
c000ff50:	75 48                	jne    c000ff9a <Phys::allocatePage()+0xb2>
c000ff52:	83 ec 0c             	sub    esp,0xc
c000ff55:	68 00 41 02 c0       	push   0xc0024100
c000ff5a:	e8 95 fd ff ff       	call   c000fcf4 <KePanic(char const*)>
c000ff5f:	83 c4 10             	add    esp,0x10
c000ff62:	8b 1d 6c c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c16c
c000ff68:	53                   	push   ebx
c000ff69:	e8 f5 fe ff ff       	call   c000fe63 <Phys::getPageState(unsigned long)>
c000ff6e:	59                   	pop    ecx
c000ff6f:	84 c0                	test   al,al
c000ff71:	75 99                	jne    c000ff0c <Phys::allocatePage()+0x24>
c000ff73:	6a 01                	push   0x1
c000ff75:	53                   	push   ebx
c000ff76:	e8 a8 fe ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000ff7b:	8b 1d 78 c1 02 c0    	mov    ebx,DWORD PTR ds:0xc002c178
c000ff81:	a1 6c c1 02 c0       	mov    eax,ds:0xc002c16c
c000ff86:	83 c3 01             	add    ebx,0x1
c000ff89:	5e                   	pop    esi
c000ff8a:	89 1d 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,ebx
c000ff90:	c1 e0 0c             	shl    eax,0xc
c000ff93:	5a                   	pop    edx
c000ff94:	83 c4 14             	add    esp,0x14
c000ff97:	5b                   	pop    ebx
c000ff98:	5e                   	pop    esi
c000ff99:	c3                   	ret    
c000ff9a:	83 ec 08             	sub    esp,0x8
c000ff9d:	8b 15 78 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c178
c000ffa3:	6a 01                	push   0x1
c000ffa5:	83 c2 01             	add    edx,0x1
c000ffa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffac:	89 15 78 c1 02 c0    	mov    DWORD PTR ds:0xc002c178,edx
c000ffb2:	89 c2                	mov    edx,eax
c000ffb4:	c1 ea 0c             	shr    edx,0xc
c000ffb7:	52                   	push   edx
c000ffb8:	e8 66 fe ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c000ffbd:	83 c4 10             	add    esp,0x10
c000ffc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffc4:	eb ce                	jmp    c000ff94 <Phys::allocatePage()+0xac>

c000ffc6 <Phys::allocateContiguousPages(int)>:
c000ffc6:	57                   	push   edi
c000ffc7:	56                   	push   esi
c000ffc8:	53                   	push   ebx
c000ffc9:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffcd:	fa                   	cli    
c000ffce:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	83 c2 01             	add    edx,0x1
c000ffda:	68 30 41 02 c0       	push   0xc0024130
c000ffdf:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c000ffe5:	31 db                	xor    ebx,ebx
c000ffe7:	e8 90 6f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c000ffec:	83 c4 10             	add    esp,0x10
c000ffef:	85 db                	test   ebx,ebx
c000fff1:	75 11                	jne    c0010004 <Phys::allocateContiguousPages(int)+0x3e>
c000fff3:	e8 f0 fe ff ff       	call   c000fee8 <Phys::allocatePage()>
c000fff8:	83 ff 01             	cmp    edi,0x1
c000fffb:	89 c6                	mov    esi,eax
c000fffd:	74 21                	je     c0010020 <Phys::allocateContiguousPages(int)+0x5a>
c000ffff:	bb 01 00 00 00       	mov    ebx,0x1
c0010004:	e8 df fe ff ff       	call   c000fee8 <Phys::allocatePage()>
c0010009:	89 da                	mov    edx,ebx
c001000b:	c1 e2 0c             	shl    edx,0xc
c001000e:	01 f2                	add    edx,esi
c0010010:	39 c2                	cmp    edx,eax
c0010012:	74 24                	je     c0010038 <Phys::allocateContiguousPages(int)+0x72>
c0010014:	bb 01 00 00 00       	mov    ebx,0x1
c0010019:	89 c6                	mov    esi,eax
c001001b:	83 ff 01             	cmp    edi,0x1
c001001e:	75 e4                	jne    c0010004 <Phys::allocateContiguousPages(int)+0x3e>
c0010020:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010028:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001002d:	85 c0                	test   eax,eax
c001002f:	75 01                	jne    c0010032 <Phys::allocateContiguousPages(int)+0x6c>
c0010031:	fb                   	sti    
c0010032:	89 f0                	mov    eax,esi
c0010034:	5b                   	pop    ebx
c0010035:	5e                   	pop    esi
c0010036:	5f                   	pop    edi
c0010037:	c3                   	ret    
c0010038:	83 c3 01             	add    ebx,0x1
c001003b:	39 fb                	cmp    ebx,edi
c001003d:	75 b0                	jne    c000ffef <Phys::allocateContiguousPages(int)+0x29>
c001003f:	eb df                	jmp    c0010020 <Phys::allocateContiguousPages(int)+0x5a>

c0010041 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010041:	56                   	push   esi
c0010042:	53                   	push   ebx
c0010043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010047:	39 1d 70 c1 02 c0    	cmp    DWORD PTR ds:0xc002c170,ebx
c001004d:	73 06                	jae    c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001004f:	89 1d 70 c1 02 c0    	mov    DWORD PTR ds:0xc002c170,ebx
c0010055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010059:	c1 eb 0c             	shr    ebx,0xc
c001005c:	c1 e8 0c             	shr    eax,0xc
c001005f:	39 d8                	cmp    eax,ebx
c0010061:	73 13                	jae    c0010076 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010063:	6a 00                	push   0x0
c0010065:	8d 70 01             	lea    esi,[eax+0x1]
c0010068:	50                   	push   eax
c0010069:	e8 b5 fd ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c001006e:	5a                   	pop    edx
c001006f:	89 f0                	mov    eax,esi
c0010071:	59                   	pop    ecx
c0010072:	39 f3                	cmp    ebx,esi
c0010074:	75 ed                	jne    c0010063 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010076:	5b                   	pop    ebx
c0010077:	5e                   	pop    esi
c0010078:	c3                   	ret    

c0010079 <Phys::physicalMemorySetup(unsigned int)>:
c0010079:	55                   	push   ebp
c001007a:	57                   	push   edi
c001007b:	56                   	push   esi
c001007c:	53                   	push   ebx
c001007d:	83 ec 40             	sub    esp,0x40
c0010080:	6a 10                	push   0x10
c0010082:	6a 00                	push   0x0
c0010084:	68 80 c1 02 c0       	push   0xc002c180
c0010089:	e8 62 04 ff ff       	call   c00004f0 <memset>
c001008e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010092:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010097:	05 00 10 00 00       	add    eax,0x1000
c001009c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100a0:	5b                   	pop    ebx
c00100a1:	31 db                	xor    ebx,ebx
c00100a3:	5e                   	pop    esi
c00100a4:	50                   	push   eax
c00100a5:	68 f3 41 02 c0       	push   0xc00241f3
c00100aa:	e8 cd 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	83 ec 08             	sub    esp,0x8
c00100b5:	6a 01                	push   0x1
c00100b7:	53                   	push   ebx
c00100b8:	83 c3 01             	add    ebx,0x1
c00100bb:	e8 63 fd ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100c9:	75 e7                	jne    c00100b2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00100cb:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00100d2:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00100d9:	c1 e0 08             	shl    eax,0x8
c00100dc:	09 c2                	or     edx,eax
c00100de:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00100e2:	0f 84 98 01 00 00    	je     c0010280 <Phys::physicalMemorySetup(unsigned int)+0x207>
c00100e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100fd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010105:	eb 1c                	jmp    c0010123 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0010107:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001010b:	83 c3 18             	add    ebx,0x18
c001010e:	83 c6 01             	add    esi,0x1
c0010111:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010119:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001011d:	0f 84 6d 01 00 00    	je     c0010290 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010123:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010126:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010129:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001012c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010130:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010134:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010136:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010139:	01 f0                	add    eax,esi
c001013b:	55                   	push   ebp
c001013c:	11 fa                	adc    edx,edi
c001013e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010142:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010146:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001014a:	51                   	push   ecx
c001014b:	56                   	push   esi
c001014c:	68 90 41 02 c0       	push   0xc0024190
c0010151:	e8 26 6e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001015a:	83 c4 10             	add    esp,0x10
c001015d:	09 f8                	or     eax,edi
c001015f:	0f 85 2b 01 00 00    	jne    c0010290 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010165:	83 fd 01             	cmp    ebp,0x1
c0010168:	75 9d                	jne    c0010107 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001016a:	ba 00 00 08 00       	mov    edx,0x80000
c001016f:	89 c1                	mov    ecx,eax
c0010171:	39 f2                	cmp    edx,esi
c0010173:	19 f9                	sbb    ecx,edi
c0010175:	0f 82 ab 00 00 00    	jb     c0010226 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001017b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001017f:	89 c1                	mov    ecx,eax
c0010181:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010185:	0f 83 9b 00 00 00    	jae    c0010226 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c001018b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010190:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010194:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010198:	39 fa                	cmp    edx,edi
c001019a:	19 e8                	sbb    eax,ebp
c001019c:	0f 82 b0 01 00 00    	jb     c0010352 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c00101a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101aa:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101b0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101b5:	83 d5 ff             	adc    ebp,0xffffffff
c00101b8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101bc:	31 c0                	xor    eax,eax
c00101be:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101c2:	39 fa                	cmp    edx,edi
c00101c4:	89 c1                	mov    ecx,eax
c00101c6:	19 e9                	sbb    ecx,ebp
c00101c8:	0f 83 39 ff ff ff    	jae    c0010107 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00101ce:	be 00 00 08 00       	mov    esi,0x80000
c00101d3:	83 ec 04             	sub    esp,0x4
c00101d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101da:	57                   	push   edi
c00101db:	56                   	push   esi
c00101dc:	68 b4 41 02 c0       	push   0xc00241b4
c00101e1:	e8 96 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00101e6:	5d                   	pop    ebp
c00101e7:	58                   	pop    eax
c00101e8:	57                   	push   edi
c00101e9:	56                   	push   esi
c00101ea:	e8 52 fe ff ff       	call   c0010041 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f7:	83 c4 0c             	add    esp,0xc
c00101fa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101fe:	8b 15 7c c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c17c
c0010204:	01 d0                	add    eax,edx
c0010206:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001020d:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c0010212:	52                   	push   edx
c0010213:	50                   	push   eax
c0010214:	68 19 42 02 c0       	push   0xc0024219
c0010219:	e8 5e 6d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001021e:	83 c4 10             	add    esp,0x10
c0010221:	e9 e1 fe ff ff       	jmp    c0010107 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010226:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001022a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001022e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010232:	39 ea                	cmp    edx,ebp
c0010234:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010238:	0f 82 c9 fe ff ff    	jb     c0010107 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001023e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010243:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010247:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001024b:	0f 83 b6 fe ff ff    	jae    c0010107 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010251:	39 ee                	cmp    esi,ebp
c0010253:	89 f8                	mov    eax,edi
c0010255:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010259:	0f 83 74 ff ff ff    	jae    c00101d3 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001025f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010263:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010267:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001026b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001026f:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001027b:	e9 53 ff ff ff       	jmp    c00101d3 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0010280:	83 ec 0c             	sub    esp,0xc
c0010283:	68 0b 42 02 c0       	push   0xc002420b
c0010288:	e8 67 fa ff ff       	call   c000fcf4 <KePanic(char const*)>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	83 ec 08             	sub    esp,0x8
c0010293:	bb 60 00 00 00       	mov    ebx,0x60
c0010298:	6a 00                	push   0x0
c001029a:	6a 06                	push   0x6
c001029c:	e8 82 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102a1:	58                   	pop    eax
c00102a2:	5a                   	pop    edx
c00102a3:	6a 00                	push   0x0
c00102a5:	6a 07                	push   0x7
c00102a7:	e8 77 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102ac:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c00102b2:	83 c4 10             	add    esp,0x10
c00102b5:	83 c1 02             	add    ecx,0x2
c00102b8:	89 0d 7c c1 02 c0    	mov    DWORD PTR ds:0xc002c17c,ecx
c00102be:	83 ec 08             	sub    esp,0x8
c00102c1:	6a 00                	push   0x0
c00102c3:	53                   	push   ebx
c00102c4:	83 c3 01             	add    ebx,0x1
c00102c7:	e8 57 fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102cc:	83 c4 10             	add    esp,0x10
c00102cf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00102d5:	75 e7                	jne    c00102be <Phys::physicalMemorySetup(unsigned int)+0x245>
c00102d7:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00102dc:	bb 40 01 00 00       	mov    ebx,0x140
c00102e1:	83 c0 20             	add    eax,0x20
c00102e4:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c00102e9:	eb 26                	jmp    c0010311 <Phys::physicalMemorySetup(unsigned int)+0x298>
c00102eb:	83 ec 08             	sub    esp,0x8
c00102ee:	6a 00                	push   0x0
c00102f0:	53                   	push   ebx
c00102f1:	83 c3 01             	add    ebx,0x1
c00102f4:	e8 2a fb ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c00102f9:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c00102fe:	83 c4 10             	add    esp,0x10
c0010301:	83 c0 01             	add    eax,0x1
c0010304:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c001030a:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c001030f:	74 07                	je     c0010318 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0010311:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010316:	7e d3                	jle    c00102eb <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010318:	bb d0 01 00 00       	mov    ebx,0x1d0
c001031d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010322:	7f 26                	jg     c001034a <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0010324:	83 ec 08             	sub    esp,0x8
c0010327:	6a 00                	push   0x0
c0010329:	53                   	push   ebx
c001032a:	83 c3 01             	add    ebx,0x1
c001032d:	e8 f1 fa ff ff       	call   c000fe23 <Phys::setPageState(unsigned long, bool)>
c0010332:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c0010337:	83 c4 10             	add    esp,0x10
c001033a:	83 c0 01             	add    eax,0x1
c001033d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010343:	a3 7c c1 02 c0       	mov    ds:0xc002c17c,eax
c0010348:	75 d3                	jne    c001031d <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c001034a:	83 c4 3c             	add    esp,0x3c
c001034d:	5b                   	pop    ebx
c001034e:	5e                   	pop    esi
c001034f:	5f                   	pop    edi
c0010350:	5d                   	pop    ebp
c0010351:	c3                   	ret    
c0010352:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001035a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010362:	e9 3b fe ff ff       	jmp    c00101a2 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010367:	90                   	nop

c0010368 <Pipe::isAtty()>:
c0010368:	31 c0                	xor    eax,eax
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <Pipe::~Pipe()>:
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	ba 78 42 02 c0       	mov    edx,0xc0024278
c0010374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010378:	89 10                	mov    DWORD PTR [eax],edx
c001037a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001037e:	83 ec 0c             	sub    esp,0xc
c0010381:	50                   	push   eax
c0010382:	e8 43 2d 00 00       	call   c00130ca <UnixFile::~UnixFile()>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	90                   	nop
c001038b:	83 c4 0c             	add    esp,0xc
c001038e:	c3                   	ret    
c001038f:	90                   	nop

c0010390 <Pipe::~Pipe()>:
c0010390:	83 ec 0c             	sub    esp,0xc
c0010393:	83 ec 0c             	sub    esp,0xc
c0010396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001039a:	e8 cd ff ff ff       	call   c001036c <Pipe::~Pipe()>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	83 ec 08             	sub    esp,0x8
c00103a5:	6a 20                	push   0x20
c00103a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ab:	e8 00 d0 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	83 c4 0c             	add    esp,0xc
c00103b6:	c3                   	ret    
c00103b7:	90                   	nop

c00103b8 <Pipe::write(unsigned long long, void*, int*)>:
c00103b8:	55                   	push   ebp
c00103b9:	57                   	push   edi
c00103ba:	56                   	push   esi
c00103bb:	53                   	push   ebx
c00103bc:	83 ec 1c             	sub    esp,0x1c
c00103bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103c7:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00103ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00103d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103d5:	89 d8                	mov    eax,ebx
c00103d7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00103da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00103de:	89 d6                	mov    esi,edx
c00103e0:	89 d7                	mov    edi,edx
c00103e2:	c1 ff 1f             	sar    edi,0x1f
c00103e5:	03 34 24             	add    esi,DWORD PTR [esp]
c00103e8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00103ec:	c1 f8 1f             	sar    eax,0x1f
c00103ef:	39 f3                	cmp    ebx,esi
c00103f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103f9:	19 f8                	sbb    eax,edi
c00103fb:	b8 01 00 00 00       	mov    eax,0x1
c0010400:	72 6e                	jb     c0010470 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010402:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010405:	01 d0                	add    eax,edx
c0010407:	99                   	cdq    
c0010408:	f7 fb                	idiv   ebx
c001040a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001040e:	29 d3                	sub    ebx,edx
c0010410:	89 d7                	mov    edi,edx
c0010412:	89 de                	mov    esi,ebx
c0010414:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010417:	c1 fb 1f             	sar    ebx,0x1f
c001041a:	39 f2                	cmp    edx,esi
c001041c:	19 d8                	sbb    eax,ebx
c001041e:	b8 00 00 00 00       	mov    eax,0x0
c0010423:	72 04                	jb     c0010429 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010425:	89 d0                	mov    eax,edx
c0010427:	29 f0                	sub    eax,esi
c0010429:	89 d3                	mov    ebx,edx
c001042b:	29 c3                	sub    ebx,eax
c001042d:	74 0b                	je     c001043a <Pipe::write(unsigned long long, void*, int*)+0x82>
c001042f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010432:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010436:	89 d9                	mov    ecx,ebx
c0010438:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001043a:	85 c0                	test   eax,eax
c001043c:	74 0d                	je     c001044b <Pipe::write(unsigned long long, void*, int*)+0x93>
c001043e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010442:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010445:	89 de                	mov    esi,ebx
c0010447:	89 c1                	mov    ecx,eax
c0010449:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001044b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001044e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010453:	75 10                	jne    c0010465 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010455:	83 ec 0c             	sub    esp,0xc
c0010458:	68 35 42 02 c0       	push   0xc0024235
c001045d:	e8 92 f8 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010469:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001046c:	89 08                	mov    DWORD PTR [eax],ecx
c001046e:	31 c0                	xor    eax,eax
c0010470:	83 c4 1c             	add    esp,0x1c
c0010473:	5b                   	pop    ebx
c0010474:	5e                   	pop    esi
c0010475:	5f                   	pop    edi
c0010476:	5d                   	pop    ebp
c0010477:	c3                   	ret    

c0010478 <Pipe::read(unsigned long long, void*, int*)>:
c0010478:	55                   	push   ebp
c0010479:	57                   	push   edi
c001047a:	56                   	push   esi
c001047b:	53                   	push   ebx
c001047c:	83 ec 1c             	sub    esp,0x1c
c001047f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010483:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010487:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001048b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001048e:	89 c8                	mov    eax,ecx
c0010490:	99                   	cdq    
c0010491:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010495:	74 27                	je     c00104be <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010497:	39 f9                	cmp    ecx,edi
c0010499:	89 d1                	mov    ecx,edx
c001049b:	19 f1                	sbb    ecx,esi
c001049d:	73 1f                	jae    c00104be <Pipe::read(unsigned long long, void*, int*)+0x46>
c001049f:	fa                   	cli    
c00104a0:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00104a6:	e8 75 69 00 00       	call   c0016e20 <schedule()>
c00104ab:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00104b2:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00104b9:	75 d0                	jne    c001048b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00104bb:	fb                   	sti    
c00104bc:	eb cd                	jmp    c001048b <Pipe::read(unsigned long long, void*, int*)+0x13>
c00104be:	39 f8                	cmp    eax,edi
c00104c0:	89 d1                	mov    ecx,edx
c00104c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00104c5:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00104c9:	19 f1                	sbb    ecx,esi
c00104cb:	73 07                	jae    c00104d4 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00104cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00104d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104d4:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00104d7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00104da:	29 f7                	sub    edi,esi
c00104dc:	89 f8                	mov    eax,edi
c00104de:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00104e2:	99                   	cdq    
c00104e3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00104e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ea:	19 d0                	sbb    eax,edx
c00104ec:	73 07                	jae    c00104f5 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c00104ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00104f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104f5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00104f8:	89 ea                	mov    edx,ebp
c00104fa:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00104fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010503:	74 0d                	je     c0010512 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010505:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010508:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001050c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010510:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010512:	85 d2                	test   edx,edx
c0010514:	74 11                	je     c0010527 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001051a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001051d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010521:	89 d1                	mov    ecx,edx
c0010523:	89 c7                	mov    edi,eax
c0010525:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010527:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001052a:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001052d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010530:	99                   	cdq    
c0010531:	89 f7                	mov    edi,esi
c0010533:	03 04 24             	add    eax,DWORD PTR [esp]
c0010536:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001053a:	c1 ff 1f             	sar    edi,0x1f
c001053d:	57                   	push   edi
c001053e:	56                   	push   esi
c001053f:	52                   	push   edx
c0010540:	50                   	push   eax
c0010541:	e8 be 15 01 00       	call   c0021b04 <__umoddi3>
c0010546:	83 c4 10             	add    esp,0x10
c0010549:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001054c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010551:	75 10                	jne    c0010563 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010553:	83 ec 0c             	sub    esp,0xc
c0010556:	68 52 42 02 c0       	push   0xc0024252
c001055b:	e8 94 f7 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010560:	83 c4 10             	add    esp,0x10
c0010563:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010567:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001056a:	89 10                	mov    DWORD PTR [eax],edx
c001056c:	83 c4 1c             	add    esp,0x1c
c001056f:	31 c0                	xor    eax,eax
c0010571:	5b                   	pop    ebx
c0010572:	5e                   	pop    esi
c0010573:	5f                   	pop    edi
c0010574:	5d                   	pop    ebp
c0010575:	c3                   	ret    

c0010576 <Pipe::Pipe(int)>:
c0010576:	83 ec 0c             	sub    esp,0xc
c0010579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057d:	83 ec 08             	sub    esp,0x8
c0010580:	6a 00                	push   0x0
c0010582:	50                   	push   eax
c0010583:	e8 5c 29 00 00       	call   c0012ee4 <UnixFile::UnixFile(int)>
c0010588:	83 c4 10             	add    esp,0x10
c001058b:	ba 78 42 02 c0       	mov    edx,0xc0024278
c0010590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010594:	89 10                	mov    DWORD PTR [eax],edx
c0010596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001059e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00105a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00105ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00105b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105bb:	83 ec 0c             	sub    esp,0xc
c00105be:	50                   	push   eax
c00105bf:	e8 d3 f2 ff ff       	call   c000f897 <malloc>
c00105c4:	83 c4 10             	add    esp,0x10
c00105c7:	89 c2                	mov    edx,eax
c00105c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105cd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105d8:	90                   	nop
c00105d9:	83 c4 0c             	add    esp,0xc
c00105dc:	c3                   	ret    

c00105dd <KePowerThread(void*)>:
c00105dd:	83 ec 0c             	sub    esp,0xc
c00105e0:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00105e7:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00105ee:	75 01                	jne    c00105f1 <KePowerThread(void*)+0x14>
c00105f0:	fb                   	sti    
c00105f1:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c00105f8:	50                   	push   eax
c00105f9:	50                   	push   eax
c00105fa:	6a 00                	push   0x0
c00105fc:	6a 0a                	push   0xa
c00105fe:	e8 29 6a 00 00       	call   c001702c <sleep(unsigned long long)>
c0010603:	83 05 e4 c1 02 c0 0a 	add    DWORD PTR ds:0xc002c1e4,0xa
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	eb e2                	jmp    c00105f1 <KePowerThread(void*)+0x14>

c001060f <KeChangePowerSettings(PowerSettings)>:
c001060f:	57                   	push   edi
c0010610:	b9 09 00 00 00       	mov    ecx,0x9
c0010615:	56                   	push   esi
c0010616:	bf c0 c1 02 c0       	mov    edi,0xc002c1c0
c001061b:	fc                   	cld    
c001061c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010620:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010622:	5e                   	pop    esi
c0010623:	5f                   	pop    edi
c0010624:	c3                   	ret    

c0010625 <KeUserIOReceived()>:
c0010625:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c001062f:	c3                   	ret    

c0010630 <KeSetupPowerManager()>:
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	c7 05 e4 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1e4,0x0
c001063d:	68 f0 00 00 00       	push   0xf0
c0010642:	c6 05 ac c1 02 c0 00 	mov    BYTE PTR ds:0xc002c1ac,0x0
c0010649:	6a 00                	push   0x0
c001064b:	68 dd 05 01 c0       	push   0xc00105dd
c0010650:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0010656:	e8 05 65 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c001065b:	c7 05 c0 c1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c1c0,0x2
c0010665:	c7 05 c4 c1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c1c4,0x1
c001066f:	c7 05 c8 c1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c1c8,0x3
c0010679:	c7 05 cc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1cc,0x0
c0010683:	c7 05 d8 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d8,0x0
c001068d:	c7 05 d0 c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1d0,0x0
c0010697:	c7 05 dc c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1dc,0x0
c00106a1:	c7 05 d4 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1d4,0x3c
c00106ab:	c7 05 e0 c1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002c1e0,0x3c
c00106b5:	83 c4 1c             	add    esp,0x1c
c00106b8:	c3                   	ret    

c00106b9 <KePrepareShutdown()>:
c00106b9:	83 ec 0c             	sub    esp,0xc
c00106bc:	e8 bb cb ff ff       	call   c000d27c <KeExecuteAtexit()>
c00106c1:	83 ec 0c             	sub    esp,0xc
c00106c4:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00106c9:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00106cf:	e8 e8 95 ff ff       	call   c0009cbc <Device::closeAll()>
c00106d4:	83 c4 1c             	add    esp,0x1c
c00106d7:	c3                   	ret    

c00106d8 <KeRegisterShutdownHandler(void (*)())>:
c00106d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106dc:	a3 a8 c1 02 c0       	mov    ds:0xc002c1a8,eax
c00106e1:	c3                   	ret    

c00106e2 <KeRegisterRestartHandler(void (*)())>:
c00106e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e6:	a3 a4 c1 02 c0       	mov    ds:0xc002c1a4,eax
c00106eb:	c3                   	ret    

c00106ec <KeRegisterSleepHandler(void (*)())>:
c00106ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f0:	a3 a0 c1 02 c0       	mov    ds:0xc002c1a0,eax
c00106f5:	c3                   	ret    

c00106f6 <KeShutdown()>:
c00106f6:	83 ec 0c             	sub    esp,0xc
c00106f9:	e8 bb ff ff ff       	call   c00106b9 <KePrepareShutdown()>
c00106fe:	a1 a8 c1 02 c0       	mov    eax,ds:0xc002c1a8
c0010703:	85 c0                	test   eax,eax
c0010705:	74 04                	je     c001070b <KeShutdown()+0x15>
c0010707:	ff d0                	call   eax
c0010709:	eb 10                	jmp    c001071b <KeShutdown()+0x25>
c001070b:	83 ec 0c             	sub    esp,0xc
c001070e:	68 8c 42 02 c0       	push   0xc002428c
c0010713:	e8 dc f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010718:	83 c4 10             	add    esp,0x10
c001071b:	83 ec 0c             	sub    esp,0xc
c001071e:	68 ad 42 02 c0       	push   0xc00242ad
c0010723:	e8 cc f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010728:	83 c4 1c             	add    esp,0x1c
c001072b:	c3                   	ret    

c001072c <KeSleep()>:
c001072c:	a1 a0 c1 02 c0       	mov    eax,ds:0xc002c1a0
c0010731:	85 c0                	test   eax,eax
c0010733:	74 02                	je     c0010737 <KeSleep()+0xb>
c0010735:	ff e0                	jmp    eax
c0010737:	c3                   	ret    

c0010738 <KeHandlePowerButton()>:
c0010738:	a1 c0 c1 02 c0       	mov    eax,ds:0xc002c1c0
c001073d:	83 f8 02             	cmp    eax,0x2
c0010740:	75 02                	jne    c0010744 <KeHandlePowerButton()+0xc>
c0010742:	eb b2                	jmp    c00106f6 <KeShutdown()>
c0010744:	48                   	dec    eax
c0010745:	75 02                	jne    c0010749 <KeHandlePowerButton()+0x11>
c0010747:	eb e3                	jmp    c001072c <KeSleep()>
c0010749:	c3                   	ret    

c001074a <KeHandleSleepButton()>:
c001074a:	a1 c4 c1 02 c0       	mov    eax,ds:0xc002c1c4
c001074f:	83 f8 02             	cmp    eax,0x2
c0010752:	75 02                	jne    c0010756 <KeHandleSleepButton()+0xc>
c0010754:	eb a0                	jmp    c00106f6 <KeShutdown()>
c0010756:	48                   	dec    eax
c0010757:	75 02                	jne    c001075b <KeHandleSleepButton()+0x11>
c0010759:	eb d1                	jmp    c001072c <KeSleep()>
c001075b:	c3                   	ret    

c001075c <KeRestart()>:
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	e8 55 ff ff ff       	call   c00106b9 <KePrepareShutdown()>
c0010764:	a1 a4 c1 02 c0       	mov    eax,ds:0xc002c1a4
c0010769:	85 c0                	test   eax,eax
c001076b:	74 02                	je     c001076f <KeRestart()+0x13>
c001076d:	ff d0                	call   eax
c001076f:	83 ec 0c             	sub    esp,0xc
c0010772:	68 d1 42 02 c0       	push   0xc00242d1
c0010777:	e8 78 f5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001077c:	83 c4 1c             	add    esp,0x1c
c001077f:	c3                   	ret    

c0010780 <KeRand()>:
c0010780:	69 05 e8 c1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002c1e8,0x2875
c001078a:	69 0d ec c1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002c1ec,0xa2e7b175
c0010794:	53                   	push   ebx
c0010795:	01 c1                	add    ecx,eax
c0010797:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001079c:	f7 25 e8 c1 02 c0    	mul    DWORD PTR ds:0xc002c1e8
c00107a2:	01 ca                	add    edx,ecx
c00107a4:	05 ef 04 b5 00       	add    eax,0xb504ef
c00107a9:	83 d2 00             	adc    edx,0x0
c00107ac:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00107b1:	0f b7 da             	movzx  ebx,dx
c00107b4:	89 da                	mov    edx,ebx
c00107b6:	89 1d ec c1 02 c0    	mov    DWORD PTR ds:0xc002c1ec,ebx
c00107bc:	0f ac d0 0e          	shrd   eax,edx,0xe
c00107c0:	5b                   	pop    ebx
c00107c1:	c3                   	ret    

c00107c2 <KeSeedRand(unsigned int)>:
c00107c2:	53                   	push   ebx
c00107c3:	83 ec 08             	sub    esp,0x8
c00107c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107ca:	e8 08 9f 00 00       	call   c001a6d7 <HalGetRand()>
c00107cf:	c7 05 ec c1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c1ec,0x0
c00107d9:	31 d8                	xor    eax,ebx
c00107db:	a3 e8 c1 02 c0       	mov    ds:0xc002c1e8,eax
c00107e0:	e8 9b ff ff ff       	call   c0010780 <KeRand()>
c00107e5:	83 c4 08             	add    esp,0x8
c00107e8:	5b                   	pop    ebx
c00107e9:	eb 95                	jmp    c0010780 <KeRand()>

c00107eb <KeInitRand()>:
c00107eb:	83 ec 0c             	sub    esp,0xc
c00107ee:	e8 b2 9c 00 00       	call   c001a4a5 <HalQueryPerformanceCounter()>
c00107f3:	0f 20 da             	mov    edx,cr3
c00107f6:	0f 22 da             	mov    cr3,edx
c00107f9:	0f 20 da             	mov    edx,cr3
c00107fc:	0f 22 da             	mov    cr3,edx
c00107ff:	0f 20 da             	mov    edx,cr3
c0010802:	0f 22 da             	mov    cr3,edx
c0010805:	0f 20 da             	mov    edx,cr3
c0010808:	0f 22 da             	mov    cr3,edx
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010813:	50                   	push   eax
c0010814:	e8 a9 ff ff ff       	call   c00107c2 <KeSeedRand(unsigned int)>
c0010819:	83 c4 1c             	add    esp,0x1c
c001081c:	c3                   	ret    
c001081d:	66 90                	xchg   ax,ax
c001081f:	90                   	nop

c0010820 <KeResolveCompatibilitySymbol(char*)>:
c0010820:	83 ec 0c             	sub    esp,0xc
c0010823:	83 ec 08             	sub    esp,0x8
c0010826:	68 e0 42 02 c0       	push   0xc00242e0
c001082b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001082f:	e8 1c ff fe ff       	call   c0000750 <strcmp>
c0010834:	83 c4 10             	add    esp,0x10
c0010837:	85 c0                	test   eax,eax
c0010839:	0f 94 c0             	sete   al
c001083c:	0f b6 c0             	movzx  eax,al
c001083f:	85 c0                	test   eax,eax
c0010841:	74 0d                	je     c0010850 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010843:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c0010848:	e9 3b 02 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c001084d:	8d 76 00             	lea    esi,[esi+0x0]
c0010850:	83 ec 08             	sub    esp,0x8
c0010853:	68 e9 42 02 c0       	push   0xc00242e9
c0010858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001085c:	e8 ef fe fe ff       	call   c0000750 <strcmp>
c0010861:	83 c4 10             	add    esp,0x10
c0010864:	85 c0                	test   eax,eax
c0010866:	0f 94 c0             	sete   al
c0010869:	0f b6 c0             	movzx  eax,al
c001086c:	85 c0                	test   eax,eax
c001086e:	74 0c                	je     c001087c <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010870:	b8 04 1a 02 c0       	mov    eax,0xc0021a04
c0010875:	e9 0e 02 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c001087a:	66 90                	xchg   ax,ax
c001087c:	83 ec 08             	sub    esp,0x8
c001087f:	68 f3 42 02 c0       	push   0xc00242f3
c0010884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010888:	e8 c3 fe fe ff       	call   c0000750 <strcmp>
c001088d:	83 c4 10             	add    esp,0x10
c0010890:	85 c0                	test   eax,eax
c0010892:	0f 94 c0             	sete   al
c0010895:	0f b6 c0             	movzx  eax,al
c0010898:	85 c0                	test   eax,eax
c001089a:	74 0c                	je     c00108a8 <KeResolveCompatibilitySymbol(char*)+0x88>
c001089c:	b8 08 c1 02 c0       	mov    eax,0xc002c108
c00108a1:	e9 e2 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108a6:	66 90                	xchg   ax,ax
c00108a8:	83 ec 08             	sub    esp,0x8
c00108ab:	68 06 43 02 c0       	push   0xc0024306
c00108b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b4:	e8 97 fe fe ff       	call   c0000750 <strcmp>
c00108b9:	83 c4 10             	add    esp,0x10
c00108bc:	85 c0                	test   eax,eax
c00108be:	0f 94 c0             	sete   al
c00108c1:	0f b6 c0             	movzx  eax,al
c00108c4:	85 c0                	test   eax,eax
c00108c6:	74 0c                	je     c00108d4 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00108c8:	b8 38 17 02 c0       	mov    eax,0xc0021738
c00108cd:	e9 b6 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108d2:	66 90                	xchg   ax,ax
c00108d4:	83 ec 08             	sub    esp,0x8
c00108d7:	68 0f 43 02 c0       	push   0xc002430f
c00108dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e0:	e8 6b fe fe ff       	call   c0000750 <strcmp>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	85 c0                	test   eax,eax
c00108ea:	0f 94 c0             	sete   al
c00108ed:	0f b6 c0             	movzx  eax,al
c00108f0:	85 c0                	test   eax,eax
c00108f2:	74 0c                	je     c0010900 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00108f4:	b8 f4 fc 00 c0       	mov    eax,0xc000fcf4
c00108f9:	e9 8a 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c00108fe:	66 90                	xchg   ax,ax
c0010900:	83 ec 08             	sub    esp,0x8
c0010903:	68 22 43 02 c0       	push   0xc0024322
c0010908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090c:	e8 3f fe fe ff       	call   c0000750 <strcmp>
c0010911:	83 c4 10             	add    esp,0x10
c0010914:	85 c0                	test   eax,eax
c0010916:	0f 94 c0             	sete   al
c0010919:	0f b6 c0             	movzx  eax,al
c001091c:	85 c0                	test   eax,eax
c001091e:	74 0c                	je     c001092c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010920:	b8 05 d3 00 c0       	mov    eax,0xc000d305
c0010925:	e9 5e 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c001092a:	66 90                	xchg   ax,ax
c001092c:	83 ec 08             	sub    esp,0x8
c001092f:	68 3f 43 02 c0       	push   0xc002433f
c0010934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010938:	e8 13 fe fe ff       	call   c0000750 <strcmp>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	85 c0                	test   eax,eax
c0010942:	0f 94 c0             	sete   al
c0010945:	0f b6 c0             	movzx  eax,al
c0010948:	85 c0                	test   eax,eax
c001094a:	74 0c                	je     c0010958 <KeResolveCompatibilitySymbol(char*)+0x138>
c001094c:	b8 04 1b 02 c0       	mov    eax,0xc0021b04
c0010951:	e9 32 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010956:	66 90                	xchg   ax,ax
c0010958:	83 ec 08             	sub    esp,0x8
c001095b:	68 49 43 02 c0       	push   0xc0024349
c0010960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010964:	e8 e7 fd fe ff       	call   c0000750 <strcmp>
c0010969:	83 c4 10             	add    esp,0x10
c001096c:	85 c0                	test   eax,eax
c001096e:	0f 94 c0             	sete   al
c0010971:	0f b6 c0             	movzx  eax,al
c0010974:	85 c0                	test   eax,eax
c0010976:	74 0c                	je     c0010984 <KeResolveCompatibilitySymbol(char*)+0x164>
c0010978:	b8 84 18 02 c0       	mov    eax,0xc0021884
c001097d:	e9 06 01 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010982:	66 90                	xchg   ax,ax
c0010984:	83 ec 08             	sub    esp,0x8
c0010987:	68 52 43 02 c0       	push   0xc0024352
c001098c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010990:	e8 bb fd fe ff       	call   c0000750 <strcmp>
c0010995:	83 c4 10             	add    esp,0x10
c0010998:	85 c0                	test   eax,eax
c001099a:	0f 94 c0             	sete   al
c001099d:	0f b6 c0             	movzx  eax,al
c00109a0:	85 c0                	test   eax,eax
c00109a2:	74 0c                	je     c00109b0 <KeResolveCompatibilitySymbol(char*)+0x190>
c00109a4:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00109a9:	e9 da 00 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c00109ae:	66 90                	xchg   ax,ax
c00109b0:	83 ec 08             	sub    esp,0x8
c00109b3:	68 6a 43 02 c0       	push   0xc002436a
c00109b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109bc:	e8 8f fd fe ff       	call   c0000750 <strcmp>
c00109c1:	83 c4 10             	add    esp,0x10
c00109c4:	85 c0                	test   eax,eax
c00109c6:	0f 94 c0             	sete   al
c00109c9:	0f b6 c0             	movzx  eax,al
c00109cc:	85 c0                	test   eax,eax
c00109ce:	74 0c                	je     c00109dc <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00109d0:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c00109d5:	e9 ae 00 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c00109da:	66 90                	xchg   ax,ax
c00109dc:	83 ec 08             	sub    esp,0x8
c00109df:	68 77 43 02 c0       	push   0xc0024377
c00109e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e8:	e8 63 fd fe ff       	call   c0000750 <strcmp>
c00109ed:	83 c4 10             	add    esp,0x10
c00109f0:	85 c0                	test   eax,eax
c00109f2:	0f 94 c0             	sete   al
c00109f5:	0f b6 c0             	movzx  eax,al
c00109f8:	85 c0                	test   eax,eax
c00109fa:	74 0c                	je     c0010a08 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c00109fc:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c0010a01:	e9 82 00 00 00       	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a06:	66 90                	xchg   ax,ax
c0010a08:	83 ec 08             	sub    esp,0x8
c0010a0b:	68 84 43 02 c0       	push   0xc0024384
c0010a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a14:	e8 37 fd fe ff       	call   c0000750 <strcmp>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	85 c0                	test   eax,eax
c0010a1e:	0f 94 c0             	sete   al
c0010a21:	0f b6 c0             	movzx  eax,al
c0010a24:	85 c0                	test   eax,eax
c0010a26:	74 08                	je     c0010a30 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010a28:	b8 0c c1 02 c0       	mov    eax,0xc002c10c
c0010a2d:	eb 59                	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a2f:	90                   	nop
c0010a30:	83 ec 08             	sub    esp,0x8
c0010a33:	68 95 43 02 c0       	push   0xc0024395
c0010a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3c:	e8 0f fd fe ff       	call   c0000750 <strcmp>
c0010a41:	83 c4 10             	add    esp,0x10
c0010a44:	85 c0                	test   eax,eax
c0010a46:	0f 94 c0             	sete   al
c0010a49:	0f b6 c0             	movzx  eax,al
c0010a4c:	85 c0                	test   eax,eax
c0010a4e:	74 08                	je     c0010a58 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010a50:	b8 0d c1 02 c0       	mov    eax,0xc002c10d
c0010a55:	eb 31                	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a57:	90                   	nop
c0010a58:	83 ec 08             	sub    esp,0x8
c0010a5b:	68 a6 43 02 c0       	push   0xc00243a6
c0010a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a64:	e8 e7 fc fe ff       	call   c0000750 <strcmp>
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	85 c0                	test   eax,eax
c0010a6e:	0f 94 c0             	sete   al
c0010a71:	0f b6 c0             	movzx  eax,al
c0010a74:	85 c0                	test   eax,eax
c0010a76:	74 08                	je     c0010a80 <KeResolveCompatibilitySymbol(char*)+0x260>
c0010a78:	b8 20 76 01 c0       	mov    eax,0xc0017620
c0010a7d:	eb 09                	jmp    c0010a88 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010a7f:	90                   	nop
c0010a80:	b8 00 00 00 00       	mov    eax,0x0
c0010a85:	8d 76 00             	lea    esi,[esi+0x0]
c0010a88:	83 c4 0c             	add    esp,0xc
c0010a8b:	c3                   	ret    

c0010a8c <Semaphore::Semaphore(int)>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010ab7:	90                   	nop
c0010ab8:	c3                   	ret    
c0010ab9:	90                   	nop
c0010aba:	66 90                	xchg   ax,ax

c0010abc <Semaphore::tryAcquire()>:
c0010abc:	83 ec 0c             	sub    esp,0xc
c0010abf:	fa                   	cli    
c0010ac0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010ac5:	83 c0 01             	add    eax,0x1
c0010ac8:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010acd:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010ad2:	83 c0 01             	add    eax,0x1
c0010ad5:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ade:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ae7:	39 c2                	cmp    edx,eax
c0010ae9:	7d 59                	jge    c0010b44 <Semaphore::tryAcquire()+0x88>
c0010aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010af2:	8d 50 01             	lea    edx,[eax+0x1]
c0010af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010afc:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b01:	83 e8 01             	sub    eax,0x1
c0010b04:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010b09:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b0e:	85 c0                	test   eax,eax
c0010b10:	75 1a                	jne    c0010b2c <Semaphore::tryAcquire()+0x70>
c0010b12:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010b17:	85 c0                	test   eax,eax
c0010b19:	74 11                	je     c0010b2c <Semaphore::tryAcquire()+0x70>
c0010b1b:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010b25:	e8 f6 62 00 00       	call   c0016e20 <schedule()>
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010b34:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b39:	85 c0                	test   eax,eax
c0010b3b:	75 03                	jne    c0010b40 <Semaphore::tryAcquire()+0x84>
c0010b3d:	fb                   	sti    
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	b0 01                	mov    al,0x1
c0010b42:	eb 48                	jmp    c0010b8c <Semaphore::tryAcquire()+0xd0>
c0010b44:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b49:	83 e8 01             	sub    eax,0x1
c0010b4c:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010b51:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010b56:	85 c0                	test   eax,eax
c0010b58:	75 1a                	jne    c0010b74 <Semaphore::tryAcquire()+0xb8>
c0010b5a:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010b5f:	85 c0                	test   eax,eax
c0010b61:	74 11                	je     c0010b74 <Semaphore::tryAcquire()+0xb8>
c0010b63:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010b6d:	e8 ae 62 00 00       	call   c0016e20 <schedule()>
c0010b72:	66 90                	xchg   ax,ax
c0010b74:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010b7c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b81:	85 c0                	test   eax,eax
c0010b83:	75 03                	jne    c0010b88 <Semaphore::tryAcquire()+0xcc>
c0010b85:	fb                   	sti    
c0010b86:	66 90                	xchg   ax,ax
c0010b88:	b0 00                	mov    al,0x0
c0010b8a:	66 90                	xchg   ax,ax
c0010b8c:	83 c4 0c             	add    esp,0xc
c0010b8f:	c3                   	ret    

c0010b90 <Semaphore::assertLocked(char const*)>:
c0010b90:	83 ec 0c             	sub    esp,0xc
c0010b93:	fa                   	cli    
c0010b94:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010b99:	83 c0 01             	add    eax,0x1
c0010b9c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010ba1:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010ba6:	83 c0 01             	add    eax,0x1
c0010ba9:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bbb:	39 c2                	cmp    edx,eax
c0010bbd:	7d 11                	jge    c0010bd0 <Semaphore::assertLocked(char const*)+0x40>
c0010bbf:	83 ec 0c             	sub    esp,0xc
c0010bc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bc6:	e8 29 f1 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	66 90                	xchg   ax,ax
c0010bd0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010bd5:	83 e8 01             	sub    eax,0x1
c0010bd8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010bdd:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010be2:	85 c0                	test   eax,eax
c0010be4:	75 1a                	jne    c0010c00 <Semaphore::assertLocked(char const*)+0x70>
c0010be6:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010beb:	85 c0                	test   eax,eax
c0010bed:	74 11                	je     c0010c00 <Semaphore::assertLocked(char const*)+0x70>
c0010bef:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010bf9:	e8 22 62 00 00       	call   c0016e20 <schedule()>
c0010bfe:	66 90                	xchg   ax,ax
c0010c00:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010c08:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010c0d:	85 c0                	test   eax,eax
c0010c0f:	75 03                	jne    c0010c14 <Semaphore::assertLocked(char const*)+0x84>
c0010c11:	fb                   	sti    
c0010c12:	66 90                	xchg   ax,ax
c0010c14:	90                   	nop
c0010c15:	83 c4 0c             	add    esp,0xc
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop
c0010c1a:	66 90                	xchg   ax,ax

c0010c1c <Semaphore::acquire(int)>:
c0010c1c:	83 ec 1c             	sub    esp,0x1c
c0010c1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010c24:	0f 84 ae 00 00 00    	je     c0010cd8 <Semaphore::acquire(int)+0xbc>
c0010c2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c32:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010c37:	90                   	nop
c0010c38:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010c3d:	85 c0                	test   eax,eax
c0010c3f:	0f 84 87 00 00 00    	je     c0010ccc <Semaphore::acquire(int)+0xb0>
c0010c45:	83 ec 0c             	sub    esp,0xc
c0010c48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c4c:	e8 6b fe ff ff       	call   c0010abc <Semaphore::tryAcquire()>
c0010c51:	83 c4 10             	add    esp,0x10
c0010c54:	83 f0 01             	xor    eax,0x1
c0010c57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010c5b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010c5f:	83 f0 01             	xor    eax,0x1
c0010c62:	0f b6 c0             	movzx  eax,al
c0010c65:	85 c0                	test   eax,eax
c0010c67:	75 5f                	jne    c0010cc8 <Semaphore::acquire(int)+0xac>
c0010c69:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010c6e:	7f 34                	jg     c0010ca4 <Semaphore::acquire(int)+0x88>
c0010c70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c74:	89 d0                	mov    eax,edx
c0010c76:	c1 e0 02             	shl    eax,0x2
c0010c79:	01 d0                	add    eax,edx
c0010c7b:	01 c0                	add    eax,eax
c0010c7d:	89 c2                	mov    edx,eax
c0010c7f:	c1 fa 1f             	sar    edx,0x1f
c0010c82:	83 ec 08             	sub    esp,0x8
c0010c85:	52                   	push   edx
c0010c86:	50                   	push   eax
c0010c87:	e8 88 63 00 00       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0010c8c:	83 c4 10             	add    esp,0x10
c0010c8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c93:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010c97:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010c9f:	eb 97                	jmp    c0010c38 <Semaphore::acquire(int)+0x1c>
c0010ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca4:	83 ec 08             	sub    esp,0x8
c0010ca7:	6a 00                	push   0x0
c0010ca9:	68 90 01 00 00       	push   0x190
c0010cae:	e8 61 63 00 00       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0010cb3:	83 c4 10             	add    esp,0x10
c0010cb6:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010cbb:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010cc0:	e9 73 ff ff ff       	jmp    c0010c38 <Semaphore::acquire(int)+0x1c>
c0010cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc8:	90                   	nop
c0010cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cd0:	e9 fb 00 00 00       	jmp    c0010dd0 <Semaphore::acquire(int)+0x1b4>
c0010cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cd8:	fa                   	cli    
c0010cd9:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010cde:	83 c0 01             	add    eax,0x1
c0010ce1:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010ce6:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010ceb:	83 c0 01             	add    eax,0x1
c0010cee:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d00:	39 c2                	cmp    edx,eax
c0010d02:	7d 14                	jge    c0010d18 <Semaphore::acquire(int)+0xfc>
c0010d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d0b:	8d 50 01             	lea    edx,[eax+0x1]
c0010d0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d15:	eb 6d                	jmp    c0010d84 <Semaphore::acquire(int)+0x168>
c0010d17:	90                   	nop
c0010d18:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d1f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d2d:	85 c0                	test   eax,eax
c0010d2f:	75 13                	jne    c0010d44 <Semaphore::acquire(int)+0x128>
c0010d31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d36:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d3f:	eb 17                	jmp    c0010d58 <Semaphore::acquire(int)+0x13c>
c0010d41:	8d 76 00             	lea    esi,[esi+0x0]
c0010d44:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d50:	8b 12                	mov    edx,DWORD PTR [edx]
c0010d52:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010d55:	8d 76 00             	lea    esi,[esi+0x0]
c0010d58:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010d5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	68 bc 43 02 c0       	push   0xc00243bc
c0010d6e:	e8 09 62 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	83 ec 0c             	sub    esp,0xc
c0010d79:	6a 05                	push   0x5
c0010d7b:	e8 60 61 00 00       	call   c0016ee0 <blockTask(TaskState)>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	90                   	nop
c0010d84:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d89:	83 e8 01             	sub    eax,0x1
c0010d8c:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010d91:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010d96:	85 c0                	test   eax,eax
c0010d98:	75 1a                	jne    c0010db4 <Semaphore::acquire(int)+0x198>
c0010d9a:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010d9f:	85 c0                	test   eax,eax
c0010da1:	74 11                	je     c0010db4 <Semaphore::acquire(int)+0x198>
c0010da3:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010dad:	e8 6e 60 00 00       	call   c0016e20 <schedule()>
c0010db2:	66 90                	xchg   ax,ax
c0010db4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010dbc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010dc1:	85 c0                	test   eax,eax
c0010dc3:	75 03                	jne    c0010dc8 <Semaphore::acquire(int)+0x1ac>
c0010dc5:	fb                   	sti    
c0010dc6:	66 90                	xchg   ax,ax
c0010dc8:	b8 00 00 00 00       	mov    eax,0x0
c0010dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd0:	83 c4 1c             	add    esp,0x1c
c0010dd3:	c3                   	ret    

c0010dd4 <Semaphore::acquire()>:
c0010dd4:	83 ec 0c             	sub    esp,0xc
c0010dd7:	83 ec 08             	sub    esp,0x8
c0010dda:	6a 00                	push   0x0
c0010ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010de0:	e8 37 fe ff ff       	call   c0010c1c <Semaphore::acquire(int)>
c0010de5:	83 c4 10             	add    esp,0x10
c0010de8:	90                   	nop
c0010de9:	83 c4 0c             	add    esp,0xc
c0010dec:	c3                   	ret    
c0010ded:	90                   	nop
c0010dee:	66 90                	xchg   ax,ax

c0010df0 <Semaphore::release()>:
c0010df0:	83 ec 1c             	sub    esp,0x1c
c0010df3:	fa                   	cli    
c0010df4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010df9:	83 c0 01             	add    eax,0x1
c0010dfc:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0010e01:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010e06:	83 c0 01             	add    eax,0x1
c0010e09:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e15:	85 c0                	test   eax,eax
c0010e17:	74 2b                	je     c0010e44 <Semaphore::release()+0x54>
c0010e19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e28:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e32:	83 ec 0c             	sub    esp,0xc
c0010e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e39:	e8 3e 63 00 00       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	eb 15                	jmp    c0010e58 <Semaphore::release()+0x68>
c0010e43:	90                   	nop
c0010e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e48:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0010e4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e52:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e55:	8d 76 00             	lea    esi,[esi+0x0]
c0010e58:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010e5d:	83 e8 01             	sub    eax,0x1
c0010e60:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0010e65:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0010e6a:	85 c0                	test   eax,eax
c0010e6c:	75 1a                	jne    c0010e88 <Semaphore::release()+0x98>
c0010e6e:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c0010e73:	85 c0                	test   eax,eax
c0010e75:	74 11                	je     c0010e88 <Semaphore::release()+0x98>
c0010e77:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0010e81:	e8 9a 5f 00 00       	call   c0016e20 <schedule()>
c0010e86:	66 90                	xchg   ax,ax
c0010e88:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0010e90:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0010e95:	85 c0                	test   eax,eax
c0010e97:	75 03                	jne    c0010e9c <Semaphore::release()+0xac>
c0010e99:	fb                   	sti    
c0010e9a:	66 90                	xchg   ax,ax
c0010e9c:	90                   	nop
c0010e9d:	83 c4 1c             	add    esp,0x1c
c0010ea0:	c3                   	ret    

c0010ea1 <KiSigKill(int)>:
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	6a 00                	push   0x0
c0010ea6:	6a 00                	push   0x0
c0010ea8:	6a ff                	push   0xffffffff
c0010eaa:	6a 01                	push   0x1
c0010eac:	e8 a1 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010eb1:	83 c4 1c             	add    esp,0x1c
c0010eb4:	c3                   	ret    

c0010eb5 <KiDefaultSignalHandlerIgnore(int)>:
c0010eb5:	c3                   	ret    

c0010eb6 <KiDefaultSignalHandlerPause(int)>:
c0010eb6:	57                   	push   edi
c0010eb7:	b9 07 00 00 00       	mov    ecx,0x7
c0010ebc:	56                   	push   esi
c0010ebd:	be 17 44 02 c0       	mov    esi,0xc0024417
c0010ec2:	83 ec 24             	sub    esp,0x24
c0010ec5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ec9:	fc                   	cld    
c0010eca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010ecc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010ed0:	50                   	push   eax
c0010ed1:	6a 00                	push   0x0
c0010ed3:	6a 00                	push   0x0
c0010ed5:	6a 27                	push   0x27
c0010ed7:	e8 76 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010edc:	83 c4 34             	add    esp,0x34
c0010edf:	5e                   	pop    esi
c0010ee0:	5f                   	pop    edi
c0010ee1:	c3                   	ret    

c0010ee2 <KiDefaultSignalHandlerResume(int)>:
c0010ee2:	57                   	push   edi
c0010ee3:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010ee8:	56                   	push   esi
c0010ee9:	be 33 44 02 c0       	mov    esi,0xc0024433
c0010eee:	83 ec 24             	sub    esp,0x24
c0010ef1:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010ef5:	fc                   	cld    
c0010ef6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ef8:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010efc:	50                   	push   eax
c0010efd:	6a 00                	push   0x0
c0010eff:	6a 00                	push   0x0
c0010f01:	6a 27                	push   0x27
c0010f03:	e8 4a 61 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f08:	83 c4 34             	add    esp,0x34
c0010f0b:	5e                   	pop    esi
c0010f0c:	5f                   	pop    edi
c0010f0d:	c3                   	ret    

c0010f0e <KeDeinitSignals(SigHandlerBlock*)>:
c0010f0e:	e9 94 e9 ff ff       	jmp    c000f8a7 <free>

c0010f13 <KeInitSignals()>:
c0010f13:	53                   	push   ebx
c0010f14:	83 ec 14             	sub    esp,0x14
c0010f17:	68 c8 00 00 00       	push   0xc8
c0010f1c:	e8 76 e9 ff ff       	call   c000f897 <malloc>
c0010f21:	83 c4 0c             	add    esp,0xc
c0010f24:	89 c3                	mov    ebx,eax
c0010f26:	6a 04                	push   0x4
c0010f28:	6a 00                	push   0x0
c0010f2a:	50                   	push   eax
c0010f2b:	e8 c0 f5 fe ff       	call   c00004f0 <memset>
c0010f30:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010f3a:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010f44:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010f4b:	83 c4 0c             	add    esp,0xc
c0010f4e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010f54:	6a 20                	push   0x20
c0010f56:	6a 00                	push   0x0
c0010f58:	50                   	push   eax
c0010f59:	e8 92 f5 fe ff       	call   c00004f0 <memset>
c0010f5e:	83 c4 0c             	add    esp,0xc
c0010f61:	6a 44                	push   0x44
c0010f63:	6a 00                	push   0x0
c0010f65:	53                   	push   ebx
c0010f66:	e8 85 f5 fe ff       	call   c00004f0 <memset>
c0010f6b:	83 c4 0c             	add    esp,0xc
c0010f6e:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010f74:	6a 11                	push   0x11
c0010f76:	6a 00                	push   0x0
c0010f78:	50                   	push   eax
c0010f79:	e8 72 f5 fe ff       	call   c00004f0 <memset>
c0010f7e:	89 d8                	mov    eax,ebx
c0010f80:	83 c4 18             	add    esp,0x18
c0010f83:	5b                   	pop    ebx
c0010f84:	c3                   	ret    

c0010f85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010f85:	53                   	push   ebx
c0010f86:	b8 01 00 00 00       	mov    eax,0x1
c0010f8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f93:	83 f9 10             	cmp    ecx,0x10
c0010f96:	7f 21                	jg     c0010fb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010f98:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9f:	89 03                	mov    DWORD PTR [ebx],eax
c0010fa1:	b8 01 00 00 00       	mov    eax,0x1
c0010fa6:	d3 e0                	shl    eax,cl
c0010fa8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010fac:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010faf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010fb7:	31 c0                	xor    eax,eax
c0010fb9:	5b                   	pop    ebx
c0010fba:	c3                   	ret    

c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010fbb:	55                   	push   ebp
c0010fbc:	57                   	push   edi
c0010fbd:	bf 08 00 00 00       	mov    edi,0x8
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	83 ec 14             	sub    esp,0x14
c0010fc7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010fcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010fcf:	68 50 44 02 c0       	push   0xc0024450
c0010fd4:	e8 a3 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0010fd9:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010fe0:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	31 c9                	xor    ecx,ecx
c0010feb:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010fef:	99                   	cdq    
c0010ff0:	f7 ff                	idiv   edi
c0010ff2:	8d 42 24             	lea    eax,[edx+0x24]
c0010ff5:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010ff9:	85 f6                	test   esi,esi
c0010ffb:	75 1a                	jne    c0011017 <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010ffd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011001:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0011005:	50                   	push   eax
c0011006:	50                   	push   eax
c0011007:	52                   	push   edx
c0011008:	68 66 44 02 c0       	push   0xc0024466
c001100d:	e8 6a 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011012:	83 c4 10             	add    esp,0x10
c0011015:	eb 1b                	jmp    c0011032 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0011017:	41                   	inc    ecx
c0011018:	83 f9 08             	cmp    ecx,0x8
c001101b:	75 ce                	jne    c0010feb <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c001101d:	83 ec 0c             	sub    esp,0xc
c0011020:	be 01 00 00 00       	mov    esi,0x1
c0011025:	68 87 44 02 c0       	push   0xc0024487
c001102a:	e8 4d 5f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	83 c4 0c             	add    esp,0xc
c0011035:	89 f0                	mov    eax,esi
c0011037:	5b                   	pop    ebx
c0011038:	5e                   	pop    esi
c0011039:	5f                   	pop    edi
c001103a:	5d                   	pop    ebp
c001103b:	c3                   	ret    

c001103c <KeCheckSignal(SigHandlerBlock*, int*)>:
c001103c:	55                   	push   ebp
c001103d:	57                   	push   edi
c001103e:	56                   	push   esi
c001103f:	53                   	push   ebx
c0011040:	83 ec 1c             	sub    esp,0x1c
c0011043:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011047:	85 db                	test   ebx,ebx
c0011049:	0f 84 e0 00 00 00    	je     c001112f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001104f:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011056:	0f 84 d3 00 00 00    	je     c001112f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c001105c:	31 c9                	xor    ecx,ecx
c001105e:	bf 08 00 00 00       	mov    edi,0x8
c0011063:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011069:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001106c:	99                   	cdq    
c001106d:	f7 ff                	idiv   edi
c001106f:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011076:	85 ed                	test   ebp,ebp
c0011078:	0f 84 d2 00 00 00    	je     c0011150 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c001107e:	89 e9                	mov    ecx,ebp
c0011080:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011086:	bf 01 00 00 00       	mov    edi,0x1
c001108b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001108f:	d3 e7                	shl    edi,cl
c0011091:	31 c9                	xor    ecx,ecx
c0011093:	b8 01 00 00 00       	mov    eax,0x1
c0011098:	d3 e0                	shl    eax,cl
c001109a:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c001109e:	74 0a                	je     c00110aa <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c00110a0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00110a4:	0f 85 85 00 00 00    	jne    c001112f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c00110aa:	41                   	inc    ecx
c00110ab:	83 f9 11             	cmp    ecx,0x11
c00110ae:	75 e3                	jne    c0011093 <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c00110b0:	46                   	inc    esi
c00110b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110b5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00110bb:	09 f8                	or     eax,edi
c00110bd:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00110c8:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00110ce:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00110d5:	31 c0                	xor    eax,eax
c00110d7:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00110df:	74 09                	je     c00110ea <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c00110e1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00110e8:	eb 06                	jmp    c00110f0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c00110ea:	40                   	inc    eax
c00110eb:	83 f8 08             	cmp    eax,0x8
c00110ee:	75 e7                	jne    c00110d7 <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c00110f0:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00110f3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00110f7:	83 fd 09             	cmp    ebp,0x9
c00110fa:	89 2a                	mov    DWORD PTR [edx],ebp
c00110fc:	75 14                	jne    c0011112 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	68 98 44 02 c0       	push   0xc0024498
c0011106:	e8 71 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001110b:	b8 a1 0e 01 c0       	mov    eax,0xc0010ea1
c0011110:	eb 39                	jmp    c001114b <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0011112:	83 f8 01             	cmp    eax,0x1
c0011115:	75 1c                	jne    c0011133 <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0011117:	83 ec 0c             	sub    esp,0xc
c001111a:	f7 d7                	not    edi
c001111c:	68 a2 44 02 c0       	push   0xc00244a2
c0011121:	e8 56 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011126:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	31 c0                	xor    eax,eax
c0011131:	eb 30                	jmp    c0011163 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011133:	85 c0                	test   eax,eax
c0011135:	75 2c                	jne    c0011163 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011137:	83 ec 0c             	sub    esp,0xc
c001113a:	68 af 44 02 c0       	push   0xc00244af
c001113f:	e8 38 5e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011144:	8b 04 ad a0 67 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9860]
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	eb 13                	jmp    c0011163 <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0011150:	46                   	inc    esi
c0011151:	41                   	inc    ecx
c0011152:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011158:	83 f9 08             	cmp    ecx,0x8
c001115b:	0f 85 02 ff ff ff    	jne    c0011063 <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0011161:	eb cc                	jmp    c001112f <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0011163:	83 c4 1c             	add    esp,0x1c
c0011166:	5b                   	pop    ebx
c0011167:	5e                   	pop    esi
c0011168:	5f                   	pop    edi
c0011169:	5d                   	pop    ebp
c001116a:	c3                   	ret    

c001116b <KiCheckSignalZ>:
c001116b:	80 3d 0c c1 02 c0 00 	cmp    BYTE PTR ds:0xc002c10c,0x0
c0011172:	74 43                	je     c00111b7 <KiCheckSignalZ+0x4c>
c0011174:	83 ec 24             	sub    esp,0x24
c0011177:	8d 44 24 14          	lea    eax,[esp+0x14]
c001117b:	50                   	push   eax
c001117c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011181:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011184:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001118a:	e8 ad fe ff ff       	call   c001103c <KeCheckSignal(SigHandlerBlock*, int*)>
c001118f:	83 c4 10             	add    esp,0x10
c0011192:	31 d2                	xor    edx,edx
c0011194:	85 c0                	test   eax,eax
c0011196:	74 19                	je     c00111b1 <KiCheckSignalZ+0x46>
c0011198:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001119e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00111a1:	89 02                	mov    DWORD PTR [edx],eax
c00111a3:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00111aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ae:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00111b1:	89 d0                	mov    eax,edx
c00111b3:	83 c4 1c             	add    esp,0x1c
c00111b6:	c3                   	ret    
c00111b7:	31 d2                	xor    edx,edx
c00111b9:	89 d0                	mov    eax,edx
c00111bb:	c3                   	ret    

c00111bc <KeCompleteSignal(SigHandlerBlock*, int)>:
c00111bc:	56                   	push   esi
c00111bd:	53                   	push   ebx
c00111be:	bb 01 00 00 00       	mov    ebx,0x1
c00111c3:	52                   	push   edx
c00111c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111cc:	d3 e3                	shl    ebx,cl
c00111ce:	83 f9 10             	cmp    ecx,0x10
c00111d1:	7f 08                	jg     c00111db <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00111d3:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00111d9:	75 10                	jne    c00111eb <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00111db:	83 ec 0c             	sub    esp,0xc
c00111de:	68 d2 44 02 c0       	push   0xc00244d2
c00111e3:	e8 0c eb ff ff       	call   c000fcf4 <KePanic(char const*)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	f7 d3                	not    ebx
c00111ed:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00111f3:	58                   	pop    eax
c00111f4:	5b                   	pop    ebx
c00111f5:	5e                   	pop    esi
c00111f6:	c3                   	ret    

c00111f7 <KiFinishSignalZ>:
c00111f7:	53                   	push   ebx
c00111f8:	83 ec 08             	sub    esp,0x8
c00111fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011200:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011204:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0011207:	83 fa 08             	cmp    edx,0x8
c001120a:	75 0c                	jne    c0011218 <KiFinishSignalZ+0x21>
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	50                   	push   eax
c0011210:	e8 67 5f 00 00       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0011215:	83 c4 10             	add    esp,0x10
c0011218:	50                   	push   eax
c0011219:	50                   	push   eax
c001121a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001121d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011222:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011225:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c001122b:	e8 8c ff ff ff       	call   c00111bc <KeCompleteSignal(SigHandlerBlock*, int)>
c0011230:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011236:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001123d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011244:	83 c4 18             	add    esp,0x18
c0011247:	5b                   	pop    ebx
c0011248:	c3                   	ret    

c0011249 <SysSeekDir(regs*)>:
c0011249:	31 c0                	xor    eax,eax
c001124b:	31 d2                	xor    edx,edx
c001124d:	c3                   	ret    

c001124e <SysTellDir(regs*)>:
c001124e:	31 c0                	xor    eax,eax
c0011250:	31 d2                	xor    edx,edx
c0011252:	c3                   	ret    

c0011253 <SysVerify(regs*)>:
c0011253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011257:	31 d2                	xor    edx,edx
c0011259:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001125c:	c3                   	ret    

c001125d <SysGetArgc(regs*)>:
c001125d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011265:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c001126b:	89 c2                	mov    edx,eax
c001126d:	c1 fa 1f             	sar    edx,0x1f
c0011270:	c3                   	ret    

c0011271 <SysTTYName(regs*)>:
c0011271:	b8 01 00 00 00       	mov    eax,0x1
c0011276:	31 d2                	xor    edx,edx
c0011278:	c3                   	ret    

c0011279 <SysFormatDisk(regs*)>:
c0011279:	56                   	push   esi
c001127a:	53                   	push   ebx
c001127b:	83 ec 04             	sub    esp,0x4
c001127e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011282:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011288:	eb 28                	jmp    c00112b2 <SysFormatDisk(regs*)+0x39>
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011290:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011293:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011295:	51                   	push   ecx
c0011296:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011299:	51                   	push   ecx
c001129a:	50                   	push   eax
c001129b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00112a2:	50                   	push   eax
c00112a3:	53                   	push   ebx
c00112a4:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00112a7:	83 c4 20             	add    esp,0x20
c00112aa:	83 f8 08             	cmp    eax,0x8
c00112ad:	75 14                	jne    c00112c3 <SysFormatDisk(regs*)+0x4a>
c00112af:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00112b2:	85 db                	test   ebx,ebx
c00112b4:	75 d4                	jne    c001128a <SysFormatDisk(regs*)+0x11>
c00112b6:	83 c4 04             	add    esp,0x4
c00112b9:	b8 03 00 00 00       	mov    eax,0x3
c00112be:	31 d2                	xor    edx,edx
c00112c0:	5b                   	pop    ebx
c00112c1:	5e                   	pop    esi
c00112c2:	c3                   	ret    
c00112c3:	85 c0                	test   eax,eax
c00112c5:	74 1f                	je     c00112e6 <SysFormatDisk(regs*)+0x6d>
c00112c7:	83 f8 09             	cmp    eax,0x9
c00112ca:	74 0d                	je     c00112d9 <SysFormatDisk(regs*)+0x60>
c00112cc:	83 c4 04             	add    esp,0x4
c00112cf:	b8 02 00 00 00       	mov    eax,0x2
c00112d4:	31 d2                	xor    edx,edx
c00112d6:	5b                   	pop    ebx
c00112d7:	5e                   	pop    esi
c00112d8:	c3                   	ret    
c00112d9:	83 c4 04             	add    esp,0x4
c00112dc:	b8 01 00 00 00       	mov    eax,0x1
c00112e1:	31 d2                	xor    edx,edx
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	c3                   	ret    
c00112e6:	83 c4 04             	add    esp,0x4
c00112e9:	31 c0                	xor    eax,eax
c00112eb:	31 d2                	xor    edx,edx
c00112ed:	5b                   	pop    ebx
c00112ee:	5e                   	pop    esi
c00112ef:	c3                   	ret    

c00112f0 <SysSetDiskVolumeLabel(regs*)>:
c00112f0:	56                   	push   esi
c00112f1:	53                   	push   ebx
c00112f2:	83 ec 04             	sub    esp,0x4
c00112f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00112f9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00112fc:	83 f8 19             	cmp    eax,0x19
c00112ff:	77 33                	ja     c0011334 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011301:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c0011308:	85 c9                	test   ecx,ecx
c001130a:	74 28                	je     c0011334 <SysSetDiskVolumeLabel(regs*)+0x44>
c001130c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001130f:	85 db                	test   ebx,ebx
c0011311:	74 21                	je     c0011334 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011313:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011319:	85 d2                	test   edx,edx
c001131b:	74 17                	je     c0011334 <SysSetDiskVolumeLabel(regs*)+0x44>
c001131d:	8b 32                	mov    esi,DWORD PTR [edx]
c001131f:	53                   	push   ebx
c0011320:	50                   	push   eax
c0011321:	51                   	push   ecx
c0011322:	52                   	push   edx
c0011323:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	89 c2                	mov    edx,eax
c001132b:	83 c4 04             	add    esp,0x4
c001132e:	c1 fa 1f             	sar    edx,0x1f
c0011331:	5b                   	pop    ebx
c0011332:	5e                   	pop    esi
c0011333:	c3                   	ret    
c0011334:	83 c4 04             	add    esp,0x4
c0011337:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001133c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011341:	5b                   	pop    ebx
c0011342:	5e                   	pop    esi
c0011343:	c3                   	ret    

c0011344 <SysGetDiskVolumeLabel(regs*)>:
c0011344:	57                   	push   edi
c0011345:	56                   	push   esi
c0011346:	53                   	push   ebx
c0011347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001134e:	83 fa 19             	cmp    edx,0x19
c0011351:	77 3c                	ja     c001138f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011353:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001135a:	85 c9                	test   ecx,ecx
c001135c:	74 31                	je     c001138f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001135e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011361:	85 db                	test   ebx,ebx
c0011363:	74 2a                	je     c001138f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011365:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011368:	85 f6                	test   esi,esi
c001136a:	74 23                	je     c001138f <SysGetDiskVolumeLabel(regs*)+0x4b>
c001136c:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011372:	85 c0                	test   eax,eax
c0011374:	74 19                	je     c001138f <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011376:	83 ec 0c             	sub    esp,0xc
c0011379:	8b 38                	mov    edi,DWORD PTR [eax]
c001137b:	56                   	push   esi
c001137c:	53                   	push   ebx
c001137d:	52                   	push   edx
c001137e:	51                   	push   ecx
c001137f:	50                   	push   eax
c0011380:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011383:	83 c4 20             	add    esp,0x20
c0011386:	89 c2                	mov    edx,eax
c0011388:	5b                   	pop    ebx
c0011389:	c1 fa 1f             	sar    edx,0x1f
c001138c:	5e                   	pop    esi
c001138d:	5f                   	pop    edi
c001138e:	c3                   	ret    
c001138f:	5b                   	pop    ebx
c0011390:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011395:	ba ff ff ff ff       	mov    edx,0xffffffff
c001139a:	5e                   	pop    esi
c001139b:	5f                   	pop    edi
c001139c:	c3                   	ret    

c001139d <SysRealpath(regs*)>:
c001139d:	83 ec 0c             	sub    esp,0xc
c00113a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113a4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00113a7:	85 d2                	test   edx,edx
c00113a9:	74 07                	je     c00113b2 <SysRealpath(regs*)+0x15>
c00113ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00113ae:	85 c0                	test   eax,eax
c00113b0:	75 0b                	jne    c00113bd <SysRealpath(regs*)+0x20>
c00113b2:	b8 01 00 00 00       	mov    eax,0x1
c00113b7:	31 d2                	xor    edx,edx
c00113b9:	83 c4 0c             	add    esp,0xc
c00113bc:	c3                   	ret    
c00113bd:	6a 00                	push   0x0
c00113bf:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00113c5:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00113c8:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00113ce:	51                   	push   ecx
c00113cf:	52                   	push   edx
c00113d0:	50                   	push   eax
c00113d1:	e8 9c 6a ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	31 c0                	xor    eax,eax
c00113db:	31 d2                	xor    edx,edx
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	c3                   	ret    

c00113e1 <SysReadDir(regs*)>:
c00113e1:	53                   	push   ebx
c00113e2:	83 ec 18             	sub    esp,0x18
c00113e5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113e9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00113ec:	83 f8 02             	cmp    eax,0x2
c00113ef:	76 61                	jbe    c0011452 <SysReadDir(regs*)+0x71>
c00113f1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00113f8:	77 49                	ja     c0011443 <SysReadDir(regs*)+0x62>
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	50                   	push   eax
c00113fe:	e8 d6 1d 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	85 c0                	test   eax,eax
c0011408:	74 39                	je     c0011443 <SysReadDir(regs*)+0x62>
c001140a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011412:	83 ec 0c             	sub    esp,0xc
c0011415:	8b 10                	mov    edx,DWORD PTR [eax]
c0011417:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001141b:	51                   	push   ecx
c001141c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001141f:	51                   	push   ecx
c0011420:	6a 00                	push   0x0
c0011422:	68 10 01 00 00       	push   0x110
c0011427:	50                   	push   eax
c0011428:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001142b:	83 c4 20             	add    esp,0x20
c001142e:	85 c0                	test   eax,eax
c0011430:	74 29                	je     c001145b <SysReadDir(regs*)+0x7a>
c0011432:	83 f8 07             	cmp    eax,0x7
c0011435:	74 1b                	je     c0011452 <SysReadDir(regs*)+0x71>
c0011437:	b8 02 00 00 00       	mov    eax,0x2
c001143c:	31 d2                	xor    edx,edx
c001143e:	83 c4 18             	add    esp,0x18
c0011441:	5b                   	pop    ebx
c0011442:	c3                   	ret    
c0011443:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011448:	ba ff ff ff ff       	mov    edx,0xffffffff
c001144d:	83 c4 18             	add    esp,0x18
c0011450:	5b                   	pop    ebx
c0011451:	c3                   	ret    
c0011452:	b8 01 00 00 00       	mov    eax,0x1
c0011457:	31 d2                	xor    edx,edx
c0011459:	eb e3                	jmp    c001143e <SysReadDir(regs*)+0x5d>
c001145b:	31 c0                	xor    eax,eax
c001145d:	31 d2                	xor    edx,edx
c001145f:	eb dd                	jmp    c001143e <SysReadDir(regs*)+0x5d>

c0011461 <SysIsATTY(regs*)>:
c0011461:	83 ec 0c             	sub    esp,0xc
c0011464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011468:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001146b:	83 f8 02             	cmp    eax,0x2
c001146e:	76 07                	jbe    c0011477 <SysIsATTY(regs*)+0x16>
c0011470:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011475:	75 26                	jne    c001149d <SysIsATTY(regs*)+0x3c>
c0011477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001147c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001147f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0011485:	85 c0                	test   eax,eax
c0011487:	74 24                	je     c00114ad <SysIsATTY(regs*)+0x4c>
c0011489:	83 ec 0c             	sub    esp,0xc
c001148c:	8b 10                	mov    edx,DWORD PTR [eax]
c001148e:	50                   	push   eax
c001148f:	ff 12                	call   DWORD PTR [edx]
c0011491:	31 d2                	xor    edx,edx
c0011493:	0f b6 c0             	movzx  eax,al
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	83 c4 0c             	add    esp,0xc
c001149c:	c3                   	ret    
c001149d:	83 ec 0c             	sub    esp,0xc
c00114a0:	50                   	push   eax
c00114a1:	e8 33 1d 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	85 c0                	test   eax,eax
c00114ab:	75 dc                	jne    c0011489 <SysIsATTY(regs*)+0x28>
c00114ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114b7:	83 c4 0c             	add    esp,0xc
c00114ba:	c3                   	ret    

c00114bb <SysSeek(regs*)>:
c00114bb:	53                   	push   ebx
c00114bc:	83 ec 08             	sub    esp,0x8
c00114bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114c6:	8d 50 fd             	lea    edx,[eax-0x3]
c00114c9:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00114cf:	77 39                	ja     c001150a <SysSeek(regs*)+0x4f>
c00114d1:	83 ec 0c             	sub    esp,0xc
c00114d4:	50                   	push   eax
c00114d5:	e8 ff 1c 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	85 c0                	test   eax,eax
c00114df:	74 29                	je     c001150a <SysSeek(regs*)+0x4f>
c00114e1:	83 ec 04             	sub    esp,0x4
c00114e4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00114e7:	31 db                	xor    ebx,ebx
c00114e9:	53                   	push   ebx
c00114ea:	51                   	push   ecx
c00114eb:	50                   	push   eax
c00114ec:	e8 75 6d ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00114f1:	83 c4 10             	add    esp,0x10
c00114f4:	85 c0                	test   eax,eax
c00114f6:	0f 95 c0             	setne  al
c00114f9:	31 d2                	xor    edx,edx
c00114fb:	0f b6 c0             	movzx  eax,al
c00114fe:	f7 d8                	neg    eax
c0011500:	83 d2 00             	adc    edx,0x0
c0011503:	83 c4 08             	add    esp,0x8
c0011506:	f7 da                	neg    edx
c0011508:	5b                   	pop    ebx
c0011509:	c3                   	ret    
c001150a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001150f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011514:	83 c4 08             	add    esp,0x8
c0011517:	5b                   	pop    ebx
c0011518:	c3                   	ret    

c0011519 <SysTell(regs*)>:
c0011519:	53                   	push   ebx
c001151a:	83 ec 08             	sub    esp,0x8
c001151d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011521:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011524:	83 f8 02             	cmp    eax,0x2
c0011527:	76 56                	jbe    c001157f <SysTell(regs*)+0x66>
c0011529:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001152e:	76 19                	jbe    c0011549 <SysTell(regs*)+0x30>
c0011530:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011533:	31 d2                	xor    edx,edx
c0011535:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001153b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011542:	31 c0                	xor    eax,eax
c0011544:	83 c4 08             	add    esp,0x8
c0011547:	5b                   	pop    ebx
c0011548:	c3                   	ret    
c0011549:	83 ec 0c             	sub    esp,0xc
c001154c:	50                   	push   eax
c001154d:	e8 87 1c 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	85 c0                	test   eax,eax
c0011557:	74 26                	je     c001157f <SysTell(regs*)+0x66>
c0011559:	83 ec 08             	sub    esp,0x8
c001155c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001155f:	52                   	push   edx
c0011560:	50                   	push   eax
c0011561:	e8 ac 6d ff ff       	call   c0008312 <File::tell(unsigned long long*)>
c0011566:	83 c4 10             	add    esp,0x10
c0011569:	85 c0                	test   eax,eax
c001156b:	0f 95 c0             	setne  al
c001156e:	31 d2                	xor    edx,edx
c0011570:	0f b6 c0             	movzx  eax,al
c0011573:	f7 d8                	neg    eax
c0011575:	83 d2 00             	adc    edx,0x0
c0011578:	83 c4 08             	add    esp,0x8
c001157b:	f7 da                	neg    edx
c001157d:	5b                   	pop    ebx
c001157e:	c3                   	ret    
c001157f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011589:	83 c4 08             	add    esp,0x8
c001158c:	5b                   	pop    ebx
c001158d:	c3                   	ret    

c001158e <SysSize(regs*)>:
c001158e:	53                   	push   ebx
c001158f:	83 ec 18             	sub    esp,0x18
c0011592:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011596:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011599:	83 f8 02             	cmp    eax,0x2
c001159c:	76 5b                	jbe    c00115f9 <SysSize(regs*)+0x6b>
c001159e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115a3:	76 19                	jbe    c00115be <SysSize(regs*)+0x30>
c00115a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115a8:	31 d2                	xor    edx,edx
c00115aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115b7:	31 c0                	xor    eax,eax
c00115b9:	83 c4 18             	add    esp,0x18
c00115bc:	5b                   	pop    ebx
c00115bd:	c3                   	ret    
c00115be:	83 ec 0c             	sub    esp,0xc
c00115c1:	50                   	push   eax
c00115c2:	e8 12 1c 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c00115c7:	83 c4 10             	add    esp,0x10
c00115ca:	85 c0                	test   eax,eax
c00115cc:	74 2b                	je     c00115f9 <SysSize(regs*)+0x6b>
c00115ce:	83 ec 04             	sub    esp,0x4
c00115d1:	8d 54 24 13          	lea    edx,[esp+0x13]
c00115d5:	52                   	push   edx
c00115d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115d9:	52                   	push   edx
c00115da:	50                   	push   eax
c00115db:	e8 ca 6e ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	85 c0                	test   eax,eax
c00115e5:	0f 95 c0             	setne  al
c00115e8:	31 d2                	xor    edx,edx
c00115ea:	0f b6 c0             	movzx  eax,al
c00115ed:	f7 d8                	neg    eax
c00115ef:	83 d2 00             	adc    edx,0x0
c00115f2:	83 c4 18             	add    esp,0x18
c00115f5:	f7 da                	neg    edx
c00115f7:	5b                   	pop    ebx
c00115f8:	c3                   	ret    
c00115f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011603:	83 c4 18             	add    esp,0x18
c0011606:	5b                   	pop    ebx
c0011607:	c3                   	ret    

c0011608 <SysSizeFromFilename(regs*)>:
c0011608:	55                   	push   ebp
c0011609:	57                   	push   edi
c001160a:	56                   	push   esi
c001160b:	53                   	push   ebx
c001160c:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011612:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011619:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001161c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001161f:	85 f6                	test   esi,esi
c0011621:	74 34                	je     c0011657 <SysSizeFromFilename(regs*)+0x4f>
c0011623:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011629:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001162c:	83 f8 02             	cmp    eax,0x2
c001162f:	76 2d                	jbe    c001165e <SysSizeFromFilename(regs*)+0x56>
c0011631:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011636:	76 3b                	jbe    c0011673 <SysSizeFromFilename(regs*)+0x6b>
c0011638:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001163b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011641:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011648:	81 c4 4c 02 00 00    	add    esp,0x24c
c001164e:	31 c0                	xor    eax,eax
c0011650:	5b                   	pop    ebx
c0011651:	31 d2                	xor    edx,edx
c0011653:	5e                   	pop    esi
c0011654:	5f                   	pop    edi
c0011655:	5d                   	pop    ebp
c0011656:	c3                   	ret    
c0011657:	89 f8                	mov    eax,edi
c0011659:	83 f8 02             	cmp    eax,0x2
c001165c:	77 d3                	ja     c0011631 <SysSizeFromFilename(regs*)+0x29>
c001165e:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011664:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011669:	5b                   	pop    ebx
c001166a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001166f:	5e                   	pop    esi
c0011670:	5f                   	pop    edi
c0011671:	5d                   	pop    ebp
c0011672:	c3                   	ret    
c0011673:	83 ec 0c             	sub    esp,0xc
c0011676:	68 14 01 00 00       	push   0x114
c001167b:	e8 17 e2 ff ff       	call   c000f897 <malloc>
c0011680:	6a 01                	push   0x1
c0011682:	89 c5                	mov    ebp,eax
c0011684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011689:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168c:	50                   	push   eax
c001168d:	57                   	push   edi
c001168e:	55                   	push   ebp
c001168f:	e8 f8 69 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011694:	83 c4 20             	add    esp,0x20
c0011697:	85 ed                	test   ebp,ebp
c0011699:	74 c3                	je     c001165e <SysSizeFromFilename(regs*)+0x56>
c001169b:	83 ec 04             	sub    esp,0x4
c001169e:	8d 44 24 13          	lea    eax,[esp+0x13]
c00116a2:	50                   	push   eax
c00116a3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00116a6:	51                   	push   ecx
c00116a7:	55                   	push   ebp
c00116a8:	e8 fd 6d ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00116ad:	89 c3                	mov    ebx,eax
c00116af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00116b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b8:	83 c4 10             	add    esp,0x10
c00116bb:	85 db                	test   ebx,ebx
c00116bd:	75 9f                	jne    c001165e <SysSizeFromFilename(regs*)+0x56>
c00116bf:	6a 00                	push   0x0
c00116c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c9:	05 0c 01 00 00       	add    eax,0x10c
c00116ce:	50                   	push   eax
c00116cf:	57                   	push   edi
c00116d0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00116d7:	53                   	push   ebx
c00116d8:	e8 95 67 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00116dd:	58                   	pop    eax
c00116de:	5a                   	pop    edx
c00116df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00116e3:	50                   	push   eax
c00116e4:	53                   	push   ebx
c00116e5:	e8 0f 62 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c00116ea:	83 c4 10             	add    esp,0x10
c00116ed:	83 f8 01             	cmp    eax,0x1
c00116f0:	74 1a                	je     c001170c <SysSizeFromFilename(regs*)+0x104>
c00116f2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116f7:	74 26                	je     c001171f <SysSizeFromFilename(regs*)+0x117>
c00116f9:	85 f6                	test   esi,esi
c00116fb:	0f 84 47 ff ff ff    	je     c0011648 <SysSizeFromFilename(regs*)+0x40>
c0011701:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011707:	e9 3c ff ff ff       	jmp    c0011648 <SysSizeFromFilename(regs*)+0x40>
c001170c:	85 f6                	test   esi,esi
c001170e:	0f 84 34 ff ff ff    	je     c0011648 <SysSizeFromFilename(regs*)+0x40>
c0011714:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001171a:	e9 29 ff ff ff       	jmp    c0011648 <SysSizeFromFilename(regs*)+0x40>
c001171f:	85 f6                	test   esi,esi
c0011721:	0f 84 21 ff ff ff    	je     c0011648 <SysSizeFromFilename(regs*)+0x40>
c0011727:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001172d:	e9 16 ff ff ff       	jmp    c0011648 <SysSizeFromFilename(regs*)+0x40>

c0011732 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011732:	55                   	push   ebp
c0011733:	57                   	push   edi
c0011734:	56                   	push   esi
c0011735:	53                   	push   ebx
c0011736:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001173c:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011743:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011746:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011749:	85 f6                	test   esi,esi
c001174b:	74 34                	je     c0011781 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001174d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011753:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011756:	83 f8 02             	cmp    eax,0x2
c0011759:	76 2d                	jbe    c0011788 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001175b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011760:	76 3b                	jbe    c001179d <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011762:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011765:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001176b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011772:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011778:	31 c0                	xor    eax,eax
c001177a:	5b                   	pop    ebx
c001177b:	31 d2                	xor    edx,edx
c001177d:	5e                   	pop    esi
c001177e:	5f                   	pop    edi
c001177f:	5d                   	pop    ebp
c0011780:	c3                   	ret    
c0011781:	89 f8                	mov    eax,edi
c0011783:	83 f8 02             	cmp    eax,0x2
c0011786:	77 d3                	ja     c001175b <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011788:	81 c4 4c 02 00 00    	add    esp,0x24c
c001178e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011793:	5b                   	pop    ebx
c0011794:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011799:	5e                   	pop    esi
c001179a:	5f                   	pop    edi
c001179b:	5d                   	pop    ebp
c001179c:	c3                   	ret    
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	68 14 01 00 00       	push   0x114
c00117a5:	e8 ed e0 ff ff       	call   c000f897 <malloc>
c00117aa:	6a 00                	push   0x0
c00117ac:	89 c5                	mov    ebp,eax
c00117ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117b6:	50                   	push   eax
c00117b7:	57                   	push   edi
c00117b8:	55                   	push   ebp
c00117b9:	e8 ce 68 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c00117be:	83 c4 20             	add    esp,0x20
c00117c1:	85 ed                	test   ebp,ebp
c00117c3:	74 c3                	je     c0011788 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00117c5:	83 ec 04             	sub    esp,0x4
c00117c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00117cc:	50                   	push   eax
c00117cd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00117d0:	51                   	push   ecx
c00117d1:	55                   	push   ebp
c00117d2:	e8 d3 6c ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c00117d7:	89 c3                	mov    ebx,eax
c00117d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00117df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	85 db                	test   ebx,ebx
c00117e7:	75 9f                	jne    c0011788 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00117e9:	6a 00                	push   0x0
c00117eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117f3:	05 0c 01 00 00       	add    eax,0x10c
c00117f8:	50                   	push   eax
c00117f9:	57                   	push   edi
c00117fa:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011801:	53                   	push   ebx
c0011802:	e8 6b 66 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011807:	58                   	pop    eax
c0011808:	5a                   	pop    edx
c0011809:	8d 44 24 18          	lea    eax,[esp+0x18]
c001180d:	50                   	push   eax
c001180e:	53                   	push   ebx
c001180f:	e8 e5 60 ff ff       	call   c00078f9 <KeDereferenceSymlink(char const*, char*)>
c0011814:	83 c4 10             	add    esp,0x10
c0011817:	83 f8 01             	cmp    eax,0x1
c001181a:	74 1a                	je     c0011836 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c001181c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011821:	74 26                	je     c0011849 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011823:	85 f6                	test   esi,esi
c0011825:	0f 84 47 ff ff ff    	je     c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001182b:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011831:	e9 3c ff ff ff       	jmp    c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011836:	85 f6                	test   esi,esi
c0011838:	0f 84 34 ff ff ff    	je     c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001183e:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011844:	e9 29 ff ff ff       	jmp    c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011849:	85 f6                	test   esi,esi
c001184b:	0f 84 21 ff ff ff    	je     c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011851:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011857:	e9 16 ff ff ff       	jmp    c0011772 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001185c <SysClose(regs*)>:
c001185c:	53                   	push   ebx
c001185d:	83 ec 08             	sub    esp,0x8
c0011860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011864:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011867:	83 f8 02             	cmp    eax,0x2
c001186a:	76 41                	jbe    c00118ad <SysClose(regs*)+0x51>
c001186c:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011872:	83 fa 01             	cmp    edx,0x1
c0011875:	76 2d                	jbe    c00118a4 <SysClose(regs*)+0x48>
c0011877:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001187c:	77 2f                	ja     c00118ad <SysClose(regs*)+0x51>
c001187e:	83 ec 0c             	sub    esp,0xc
c0011881:	50                   	push   eax
c0011882:	e8 52 19 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	89 c3                	mov    ebx,eax
c001188c:	85 c0                	test   eax,eax
c001188e:	74 1d                	je     c00118ad <SysClose(regs*)+0x51>
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	50                   	push   eax
c0011894:	e8 6d 69 ff ff       	call   c0008206 <File::close()>
c0011899:	8b 03                	mov    eax,DWORD PTR [ebx]
c001189b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001189e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	31 c0                	xor    eax,eax
c00118a6:	31 d2                	xor    edx,edx
c00118a8:	83 c4 08             	add    esp,0x8
c00118ab:	5b                   	pop    ebx
c00118ac:	c3                   	ret    
c00118ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118b7:	83 c4 08             	add    esp,0x8
c00118ba:	5b                   	pop    ebx
c00118bb:	c3                   	ret    

c00118bc <SysOpenDir(regs*)>:
c00118bc:	56                   	push   esi
c00118bd:	53                   	push   ebx
c00118be:	83 ec 04             	sub    esp,0x4
c00118c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00118c8:	85 c9                	test   ecx,ecx
c00118ca:	74 5d                	je     c0011929 <SysOpenDir(regs*)+0x6d>
c00118cc:	83 ec 0c             	sub    esp,0xc
c00118cf:	68 14 01 00 00       	push   0x114
c00118d4:	e8 be df ff ff       	call   c000f897 <malloc>
c00118d9:	83 c4 0c             	add    esp,0xc
c00118dc:	89 c6                	mov    esi,eax
c00118de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e6:	50                   	push   eax
c00118e7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00118ea:	52                   	push   edx
c00118eb:	56                   	push   esi
c00118ec:	e8 79 6d ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c00118f1:	83 c4 10             	add    esp,0x10
c00118f4:	85 f6                	test   esi,esi
c00118f6:	74 31                	je     c0011929 <SysOpenDir(regs*)+0x6d>
c00118f8:	83 ec 0c             	sub    esp,0xc
c00118fb:	56                   	push   esi
c00118fc:	e8 31 6e ff ff       	call   c0008732 <Directory::open()>
c0011901:	83 c4 10             	add    esp,0x10
c0011904:	85 c0                	test   eax,eax
c0011906:	75 21                	jne    c0011929 <SysOpenDir(regs*)+0x6d>
c0011908:	83 ec 0c             	sub    esp,0xc
c001190b:	56                   	push   esi
c001190c:	e8 cb 15 00 00       	call   c0012edc <UnixFile::getFileDescriptor()>
c0011911:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011914:	83 c4 10             	add    esp,0x10
c0011917:	89 02                	mov    DWORD PTR [edx],eax
c0011919:	c1 f8 1f             	sar    eax,0x1f
c001191c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001191f:	83 c4 04             	add    esp,0x4
c0011922:	31 c0                	xor    eax,eax
c0011924:	31 d2                	xor    edx,edx
c0011926:	5b                   	pop    ebx
c0011927:	5e                   	pop    esi
c0011928:	c3                   	ret    
c0011929:	83 c4 04             	add    esp,0x4
c001192c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011931:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011936:	5b                   	pop    ebx
c0011937:	5e                   	pop    esi
c0011938:	c3                   	ret    

c0011939 <SysMakeDir(regs*)>:
c0011939:	56                   	push   esi
c001193a:	53                   	push   ebx
c001193b:	83 ec 10             	sub    esp,0x10
c001193e:	68 14 01 00 00       	push   0x114
c0011943:	e8 4f df ff ff       	call   c000f897 <malloc>
c0011948:	83 c4 0c             	add    esp,0xc
c001194b:	89 c3                	mov    ebx,eax
c001194d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011955:	50                   	push   eax
c0011956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001195a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001195d:	52                   	push   edx
c001195e:	53                   	push   ebx
c001195f:	e8 06 6d ff ff       	call   c000866a <Directory::Directory(char const*, Process*)>
c0011964:	83 c4 10             	add    esp,0x10
c0011967:	85 db                	test   ebx,ebx
c0011969:	74 2c                	je     c0011997 <SysMakeDir(regs*)+0x5e>
c001196b:	83 ec 0c             	sub    esp,0xc
c001196e:	53                   	push   ebx
c001196f:	e8 9e 6f ff ff       	call   c0008912 <Directory::create()>
c0011974:	89 c6                	mov    esi,eax
c0011976:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001197b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	31 c0                	xor    eax,eax
c0011983:	85 f6                	test   esi,esi
c0011985:	0f 95 c0             	setne  al
c0011988:	31 d2                	xor    edx,edx
c001198a:	f7 d8                	neg    eax
c001198c:	83 d2 00             	adc    edx,0x0
c001198f:	83 c4 04             	add    esp,0x4
c0011992:	f7 da                	neg    edx
c0011994:	5b                   	pop    ebx
c0011995:	5e                   	pop    esi
c0011996:	c3                   	ret    
c0011997:	83 c4 04             	add    esp,0x4
c001199a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001199f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119a4:	5b                   	pop    ebx
c00119a5:	5e                   	pop    esi
c00119a6:	c3                   	ret    

c00119a7 <SysCloseDir(regs*)>:
c00119a7:	53                   	push   ebx
c00119a8:	83 ec 08             	sub    esp,0x8
c00119ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119b2:	8d 50 fd             	lea    edx,[eax-0x3]
c00119b5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00119bb:	77 2f                	ja     c00119ec <SysCloseDir(regs*)+0x45>
c00119bd:	83 ec 0c             	sub    esp,0xc
c00119c0:	50                   	push   eax
c00119c1:	e8 13 18 00 00       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c00119c6:	83 c4 10             	add    esp,0x10
c00119c9:	89 c3                	mov    ebx,eax
c00119cb:	85 c0                	test   eax,eax
c00119cd:	74 1d                	je     c00119ec <SysCloseDir(regs*)+0x45>
c00119cf:	83 ec 0c             	sub    esp,0xc
c00119d2:	50                   	push   eax
c00119d3:	e8 b6 6d ff ff       	call   c000878e <Directory::close()>
c00119d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	31 c0                	xor    eax,eax
c00119e5:	31 d2                	xor    edx,edx
c00119e7:	83 c4 08             	add    esp,0x8
c00119ea:	5b                   	pop    ebx
c00119eb:	c3                   	ret    
c00119ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119f6:	83 c4 08             	add    esp,0x8
c00119f9:	5b                   	pop    ebx
c00119fa:	c3                   	ret    

c00119fb <SysWait(regs*)>:
c00119fb:	83 ec 10             	sub    esp,0x10
c00119fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a02:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a05:	52                   	push   edx
c0011a06:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011a09:	51                   	push   ecx
c0011a0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a0d:	50                   	push   eax
c0011a0e:	e8 09 55 00 00       	call   c0016f1c <waitTask(int, int*, int)>
c0011a13:	83 c4 1c             	add    esp,0x1c
c0011a16:	89 c2                	mov    edx,eax
c0011a18:	c1 fa 1f             	sar    edx,0x1f
c0011a1b:	c3                   	ret    

c0011a1c <SysNotImpl(regs*)>:
c0011a1c:	83 ec 18             	sub    esp,0x18
c0011a1f:	68 e3 44 02 c0       	push   0xc00244e3
c0011a24:	e8 cb e2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0011a29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a33:	83 c4 1c             	add    esp,0x1c
c0011a36:	c3                   	ret    

c0011a37 <SysPanic(regs*)>:
c0011a37:	83 ec 18             	sub    esp,0x18
c0011a3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a3e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a41:	50                   	push   eax
c0011a42:	e8 ad e2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0011a47:	b8 01 00 00 00       	mov    eax,0x1
c0011a4c:	31 d2                	xor    edx,edx
c0011a4e:	83 c4 1c             	add    esp,0x1c
c0011a51:	c3                   	ret    

c0011a52 <SysRmdir(regs*)>:
c0011a52:	56                   	push   esi
c0011a53:	53                   	push   ebx
c0011a54:	83 ec 20             	sub    esp,0x20
c0011a57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a5b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011a5e:	68 14 01 00 00       	push   0x114
c0011a63:	e8 2f de ff ff       	call   c000f897 <malloc>
c0011a68:	6a 00                	push   0x0
c0011a6a:	89 c3                	mov    ebx,eax
c0011a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a74:	50                   	push   eax
c0011a75:	56                   	push   esi
c0011a76:	53                   	push   ebx
c0011a77:	e8 10 66 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011a7c:	83 c4 14             	add    esp,0x14
c0011a7f:	53                   	push   ebx
c0011a80:	e8 f1 68 ff ff       	call   c0008376 <File::unlink()>
c0011a85:	83 c4 10             	add    esp,0x10
c0011a88:	85 db                	test   ebx,ebx
c0011a8a:	74 14                	je     c0011aa0 <SysRmdir(regs*)+0x4e>
c0011a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a90:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a92:	83 ec 0c             	sub    esp,0xc
c0011a95:	53                   	push   ebx
c0011a96:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aa0:	85 c0                	test   eax,eax
c0011aa2:	0f 95 c0             	setne  al
c0011aa5:	31 d2                	xor    edx,edx
c0011aa7:	0f b6 c0             	movzx  eax,al
c0011aaa:	f7 d8                	neg    eax
c0011aac:	83 d2 00             	adc    edx,0x0
c0011aaf:	83 c4 14             	add    esp,0x14
c0011ab2:	f7 da                	neg    edx
c0011ab4:	5b                   	pop    ebx
c0011ab5:	5e                   	pop    esi
c0011ab6:	c3                   	ret    

c0011ab7 <SysUnlink(regs*)>:
c0011ab7:	56                   	push   esi
c0011ab8:	53                   	push   ebx
c0011ab9:	83 ec 20             	sub    esp,0x20
c0011abc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ac0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ac3:	68 14 01 00 00       	push   0x114
c0011ac8:	e8 ca dd ff ff       	call   c000f897 <malloc>
c0011acd:	6a 00                	push   0x0
c0011acf:	89 c3                	mov    ebx,eax
c0011ad1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ad9:	50                   	push   eax
c0011ada:	56                   	push   esi
c0011adb:	53                   	push   ebx
c0011adc:	e8 ab 65 ff ff       	call   c000808c <File::File(char const*, Process*, bool)>
c0011ae1:	83 c4 14             	add    esp,0x14
c0011ae4:	53                   	push   ebx
c0011ae5:	e8 8c 68 ff ff       	call   c0008376 <File::unlink()>
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	85 db                	test   ebx,ebx
c0011aef:	74 14                	je     c0011b05 <SysUnlink(regs*)+0x4e>
c0011af1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011af5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011af7:	83 ec 0c             	sub    esp,0xc
c0011afa:	53                   	push   ebx
c0011afb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b05:	85 c0                	test   eax,eax
c0011b07:	0f 95 c0             	setne  al
c0011b0a:	31 d2                	xor    edx,edx
c0011b0c:	0f b6 c0             	movzx  eax,al
c0011b0f:	f7 d8                	neg    eax
c0011b11:	83 d2 00             	adc    edx,0x0
c0011b14:	83 c4 14             	add    esp,0x14
c0011b17:	f7 da                	neg    edx
c0011b19:	5b                   	pop    ebx
c0011b1a:	5e                   	pop    esi
c0011b1b:	c3                   	ret    

c0011b1c <SysGetArgv(regs*)>:
c0011b1c:	83 ec 0c             	sub    esp,0xc
c0011b1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011b23:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011b26:	85 c0                	test   eax,eax
c0011b28:	78 2c                	js     c0011b56 <SysGetArgv(regs*)+0x3a>
c0011b2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b30:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011b33:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011b39:	7d 1b                	jge    c0011b56 <SysGetArgv(regs*)+0x3a>
c0011b3b:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c0011b42:	85 c0                	test   eax,eax
c0011b44:	74 18                	je     c0011b5e <SysGetArgv(regs*)+0x42>
c0011b46:	83 ec 08             	sub    esp,0x8
c0011b49:	50                   	push   eax
c0011b4a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011b4d:	50                   	push   eax
c0011b4e:	e8 ed ea fe ff       	call   c0000640 <strcpy>
c0011b53:	83 c4 10             	add    esp,0x10
c0011b56:	31 c0                	xor    eax,eax
c0011b58:	31 d2                	xor    edx,edx
c0011b5a:	83 c4 0c             	add    esp,0xc
c0011b5d:	c3                   	ret    
c0011b5e:	b8 01 00 00 00       	mov    eax,0x1
c0011b63:	31 d2                	xor    edx,edx
c0011b65:	83 c4 0c             	add    esp,0xc
c0011b68:	c3                   	ret    

c0011b69 <SysUSleep(regs*)>:
c0011b69:	83 ec 1c             	sub    esp,0x1c
c0011b6c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011b70:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011b73:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011b76:	6a 00                	push   0x0
c0011b78:	6a 64                	push   0x64
c0011b7a:	52                   	push   edx
c0011b7b:	50                   	push   eax
c0011b7c:	e8 83 fe 00 00       	call   c0021a04 <__udivdi3>
c0011b81:	83 c4 18             	add    esp,0x18
c0011b84:	52                   	push   edx
c0011b85:	50                   	push   eax
c0011b86:	e8 89 54 00 00       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0011b8b:	31 c0                	xor    eax,eax
c0011b8d:	31 d2                	xor    edx,edx
c0011b8f:	83 c4 1c             	add    esp,0x1c
c0011b92:	c3                   	ret    

c0011b93 <SysSpawn(regs*)>:
c0011b93:	56                   	push   esi
c0011b94:	53                   	push   ebx
c0011b95:	83 ec 04             	sub    esp,0x4
c0011b98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b9c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b9f:	85 f6                	test   esi,esi
c0011ba1:	75 0a                	jne    c0011bad <SysSpawn(regs*)+0x1a>
c0011ba3:	83 c4 04             	add    esp,0x4
c0011ba6:	31 c0                	xor    eax,eax
c0011ba8:	31 d2                	xor    edx,edx
c0011baa:	5b                   	pop    ebx
c0011bab:	5e                   	pop    esi
c0011bac:	c3                   	ret    
c0011bad:	83 ec 0c             	sub    esp,0xc
c0011bb0:	68 c4 07 00 00       	push   0x7c4
c0011bb5:	e8 dd dc ff ff       	call   c000f897 <malloc>
c0011bba:	83 c4 10             	add    esp,0x10
c0011bbd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011bc0:	89 c6                	mov    esi,eax
c0011bc2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011bc5:	85 c9                	test   ecx,ecx
c0011bc7:	74 39                	je     c0011c02 <SysSpawn(regs*)+0x6f>
c0011bc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bd1:	52                   	push   edx
c0011bd2:	50                   	push   eax
c0011bd3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011bd6:	50                   	push   eax
c0011bd7:	56                   	push   esi
c0011bd8:	e8 0b 4b 00 00       	call   c00166e8 <Process::Process(char const*, Process*, char**)>
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011be7:	75 ba                	jne    c0011ba3 <SysSpawn(regs*)+0x10>
c0011be9:	83 ec 0c             	sub    esp,0xc
c0011bec:	56                   	push   esi
c0011bed:	e8 c6 50 00 00       	call   c0016cb8 <Process::createUserThread()>
c0011bf2:	8b 06                	mov    eax,DWORD PTR [esi]
c0011bf4:	83 c4 10             	add    esp,0x10
c0011bf7:	89 c2                	mov    edx,eax
c0011bf9:	83 c4 04             	add    esp,0x4
c0011bfc:	c1 fa 1f             	sar    edx,0x1f
c0011bff:	5b                   	pop    ebx
c0011c00:	5e                   	pop    esi
c0011c01:	c3                   	ret    
c0011c02:	31 c0                	xor    eax,eax
c0011c04:	eb cb                	jmp    c0011bd1 <SysSpawn(regs*)+0x3e>

c0011c06 <SysGetEnv(regs*)>:
c0011c06:	57                   	push   edi
c0011c07:	56                   	push   esi
c0011c08:	53                   	push   ebx
c0011c09:	83 ec 1c             	sub    esp,0x1c
c0011c0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c15:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c18:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c1b:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011c1e:	51                   	push   ecx
c0011c1f:	e8 7b ca ff ff       	call   c000e69f <KeGetProcessTotalEnvCount(Process*)>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	39 c7                	cmp    edi,eax
c0011c29:	7c 14                	jl     c0011c3f <SysGetEnv(regs*)+0x39>
c0011c2b:	85 f6                	test   esi,esi
c0011c2d:	75 0b                	jne    c0011c3a <SysGetEnv(regs*)+0x34>
c0011c2f:	83 c4 10             	add    esp,0x10
c0011c32:	31 c0                	xor    eax,eax
c0011c34:	5b                   	pop    ebx
c0011c35:	31 d2                	xor    edx,edx
c0011c37:	5e                   	pop    esi
c0011c38:	5f                   	pop    edi
c0011c39:	c3                   	ret    
c0011c3a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c3d:	eb f0                	jmp    c0011c2f <SysGetEnv(regs*)+0x29>
c0011c3f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011c43:	83 ec 04             	sub    esp,0x4
c0011c46:	57                   	push   edi
c0011c47:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c4d:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011c50:	57                   	push   edi
c0011c51:	50                   	push   eax
c0011c52:	e8 68 ca ff ff       	call   c000e6bf <KeGetProcessEnvPair(Process*, int)>
c0011c57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c5e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011c62:	83 c4 0c             	add    esp,0xc
c0011c65:	85 d2                	test   edx,edx
c0011c67:	75 23                	jne    c0011c8c <SysGetEnv(regs*)+0x86>
c0011c69:	83 ec 0c             	sub    esp,0xc
c0011c6c:	50                   	push   eax
c0011c6d:	e8 fe e8 fe ff       	call   c0000570 <strlen>
c0011c72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c75:	89 c3                	mov    ebx,eax
c0011c77:	e8 f4 e8 fe ff       	call   c0000570 <strlen>
c0011c7c:	83 c4 10             	add    esp,0x10
c0011c7f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	31 d2                	xor    edx,edx
c0011c88:	5b                   	pop    ebx
c0011c89:	5e                   	pop    esi
c0011c8a:	5f                   	pop    edi
c0011c8b:	c3                   	ret    
c0011c8c:	83 ec 08             	sub    esp,0x8
c0011c8f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c92:	50                   	push   eax
c0011c93:	56                   	push   esi
c0011c94:	e8 a7 e9 fe ff       	call   c0000640 <strcpy>
c0011c99:	58                   	pop    eax
c0011c9a:	5a                   	pop    edx
c0011c9b:	68 fd 44 02 c0       	push   0xc00244fd
c0011ca0:	56                   	push   esi
c0011ca1:	e8 9a eb fe ff       	call   c0000840 <strcat>
c0011ca6:	59                   	pop    ecx
c0011ca7:	5b                   	pop    ebx
c0011ca8:	57                   	push   edi
c0011ca9:	56                   	push   esi
c0011caa:	e8 91 eb fe ff       	call   c0000840 <strcat>
c0011caf:	83 c4 10             	add    esp,0x10
c0011cb2:	e9 78 ff ff ff       	jmp    c0011c2f <SysGetEnv(regs*)+0x29>

c0011cb7 <SysSetFatAttrib(regs*)>:
c0011cb7:	57                   	push   edi
c0011cb8:	56                   	push   esi
c0011cb9:	53                   	push   ebx
c0011cba:	83 ec 1c             	sub    esp,0x1c
c0011cbd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011cc1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011cc4:	68 14 01 00 00       	push   0x114
c0011cc9:	e8 c9 db ff ff       	call   c000f897 <malloc>
c0011cce:	83 c4 0c             	add    esp,0xc
c0011cd1:	89 c3                	mov    ebx,eax
c0011cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cdb:	50                   	push   eax
c0011cdc:	57                   	push   edi
c0011cdd:	53                   	push   ebx
c0011cde:	e8 a7 64 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0011ce3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011ce6:	83 c4 0c             	add    esp,0xc
c0011ce9:	0f b6 d4             	movzx  edx,ah
c0011cec:	0f b6 c0             	movzx  eax,al
c0011cef:	52                   	push   edx
c0011cf0:	50                   	push   eax
c0011cf1:	53                   	push   ebx
c0011cf2:	e8 19 67 ff ff       	call   c0008410 <File::chfatattr(unsigned char, unsigned char)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	85 db                	test   ebx,ebx
c0011cfc:	74 14                	je     c0011d12 <SysSetFatAttrib(regs*)+0x5b>
c0011cfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d02:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d04:	83 ec 0c             	sub    esp,0xc
c0011d07:	53                   	push   ebx
c0011d08:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d12:	85 c0                	test   eax,eax
c0011d14:	0f 95 c0             	setne  al
c0011d17:	31 d2                	xor    edx,edx
c0011d19:	0f b6 c0             	movzx  eax,al
c0011d1c:	f7 d8                	neg    eax
c0011d1e:	83 d2 00             	adc    edx,0x0
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	f7 da                	neg    edx
c0011d26:	5b                   	pop    ebx
c0011d27:	5e                   	pop    esi
c0011d28:	5f                   	pop    edi
c0011d29:	c3                   	ret    

c0011d2a <SysShutdown(regs*)>:
c0011d2a:	83 ec 1c             	sub    esp,0x1c
c0011d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d31:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011d34:	85 c9                	test   ecx,ecx
c0011d36:	74 18                	je     c0011d50 <SysShutdown(regs*)+0x26>
c0011d38:	83 f9 01             	cmp    ecx,0x1
c0011d3b:	74 26                	je     c0011d63 <SysShutdown(regs*)+0x39>
c0011d3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d47:	83 f9 02             	cmp    ecx,0x2
c0011d4a:	74 24                	je     c0011d70 <SysShutdown(regs*)+0x46>
c0011d4c:	83 c4 1c             	add    esp,0x1c
c0011d4f:	c3                   	ret    
c0011d50:	e8 a1 e9 ff ff       	call   c00106f6 <KeShutdown()>
c0011d55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d5f:	83 c4 1c             	add    esp,0x1c
c0011d62:	c3                   	ret    
c0011d63:	e8 c4 e9 ff ff       	call   c001072c <KeSleep()>
c0011d68:	31 c0                	xor    eax,eax
c0011d6a:	31 d2                	xor    edx,edx
c0011d6c:	83 c4 1c             	add    esp,0x1c
c0011d6f:	c3                   	ret    
c0011d70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d78:	e8 df e9 ff ff       	call   c001075c <KeRestart()>
c0011d7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d85:	eb c5                	jmp    c0011d4c <SysShutdown(regs*)+0x22>

c0011d87 <SysPipe(regs*)>:
c0011d87:	57                   	push   edi
c0011d88:	56                   	push   esi
c0011d89:	53                   	push   ebx
c0011d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d8e:	83 ec 0c             	sub    esp,0xc
c0011d91:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011d94:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011d97:	6a 20                	push   0x20
c0011d99:	e8 f9 da ff ff       	call   c000f897 <malloc>
c0011d9e:	89 c3                	mov    ebx,eax
c0011da0:	58                   	pop    eax
c0011da1:	5a                   	pop    edx
c0011da2:	68 00 50 00 00       	push   0x5000
c0011da7:	53                   	push   ebx
c0011da8:	e8 c9 e7 ff ff       	call   c0010576 <Pipe::Pipe(int)>
c0011dad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011db0:	e8 27 11 00 00       	call   c0012edc <UnixFile::getFileDescriptor()>
c0011db5:	89 07                	mov    DWORD PTR [edi],eax
c0011db7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011dba:	e8 1d 11 00 00       	call   c0012edc <UnixFile::getFileDescriptor()>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	89 06                	mov    DWORD PTR [esi],eax
c0011dc4:	31 d2                	xor    edx,edx
c0011dc6:	5b                   	pop    ebx
c0011dc7:	31 c0                	xor    eax,eax
c0011dc9:	5e                   	pop    esi
c0011dca:	5f                   	pop    edi
c0011dcb:	c3                   	ret    

c0011dcc <SysGetUnixTime(regs*)>:
c0011dcc:	57                   	push   edi
c0011dcd:	56                   	push   esi
c0011dce:	53                   	push   ebx
c0011dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dd3:	83 ec 08             	sub    esp,0x8
c0011dd6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011dd9:	52                   	push   edx
c0011dda:	68 ff 44 02 c0       	push   0xc00244ff
c0011ddf:	e8 98 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011deb:	74 3d                	je     c0011e2a <SysGetUnixTime(regs*)+0x5e>
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011df5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011dfb:	50                   	push   eax
c0011dfc:	e8 39 73 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011e01:	83 c4 0c             	add    esp,0xc
c0011e04:	52                   	push   edx
c0011e05:	50                   	push   eax
c0011e06:	68 13 45 02 c0       	push   0xc0024513
c0011e0b:	e8 6c 51 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0011e10:	83 c4 10             	add    esp,0x10
c0011e13:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0011e18:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011e1e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e22:	5b                   	pop    ebx
c0011e23:	5e                   	pop    esi
c0011e24:	5f                   	pop    edi
c0011e25:	e9 10 73 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011e2a:	8b 35 50 bb 02 c0    	mov    esi,DWORD PTR ds:0xc002bb50
c0011e30:	8b 3d 54 bb 02 c0    	mov    edi,DWORD PTR ds:0xc002bb54
c0011e36:	89 f0                	mov    eax,esi
c0011e38:	89 fa                	mov    edx,edi
c0011e3a:	01 f0                	add    eax,esi
c0011e3c:	11 fa                	adc    edx,edi
c0011e3e:	01 f0                	add    eax,esi
c0011e40:	11 fa                	adc    edx,edi
c0011e42:	89 c1                	mov    ecx,eax
c0011e44:	89 d3                	mov    ebx,edx
c0011e46:	0f a4 cb 05          	shld   ebx,ecx,0x5
c0011e4a:	c1 e1 05             	shl    ecx,0x5
c0011e4d:	01 c8                	add    eax,ecx
c0011e4f:	11 da                	adc    edx,ebx
c0011e51:	01 f0                	add    eax,esi
c0011e53:	5b                   	pop    ebx
c0011e54:	11 fa                	adc    edx,edi
c0011e56:	5e                   	pop    esi
c0011e57:	5f                   	pop    edi
c0011e58:	c3                   	ret    

c0011e59 <string_ends_with(char const*, char const*)>:
c0011e59:	57                   	push   edi
c0011e5a:	56                   	push   esi
c0011e5b:	53                   	push   ebx
c0011e5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e60:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e64:	83 ec 0c             	sub    esp,0xc
c0011e67:	53                   	push   ebx
c0011e68:	e8 03 e7 fe ff       	call   c0000570 <strlen>
c0011e6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e70:	89 c6                	mov    esi,eax
c0011e72:	e8 f9 e6 fe ff       	call   c0000570 <strlen>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	39 c6                	cmp    esi,eax
c0011e7c:	7d 06                	jge    c0011e84 <string_ends_with(char const*, char const*)+0x2b>
c0011e7e:	5b                   	pop    ebx
c0011e7f:	31 c0                	xor    eax,eax
c0011e81:	5e                   	pop    esi
c0011e82:	5f                   	pop    edi
c0011e83:	c3                   	ret    
c0011e84:	83 ec 08             	sub    esp,0x8
c0011e87:	29 c6                	sub    esi,eax
c0011e89:	57                   	push   edi
c0011e8a:	01 f3                	add    ebx,esi
c0011e8c:	53                   	push   ebx
c0011e8d:	e8 be e8 fe ff       	call   c0000750 <strcmp>
c0011e92:	83 c4 10             	add    esp,0x10
c0011e95:	85 c0                	test   eax,eax
c0011e97:	5b                   	pop    ebx
c0011e98:	0f 94 c0             	sete   al
c0011e9b:	5e                   	pop    esi
c0011e9c:	0f b6 c0             	movzx  eax,al
c0011e9f:	5f                   	pop    edi
c0011ea0:	c3                   	ret    

c0011ea1 <SysOpen(regs*)>:
c0011ea1:	56                   	push   esi
c0011ea2:	53                   	push   ebx
c0011ea3:	81 ec 04 01 00 00    	sub    esp,0x104
c0011ea9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011eb0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	0f 84 bc 01 00 00    	je     c0012077 <SysOpen(regs*)+0x1d6>
c0011ebb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ebe:	85 c0                	test   eax,eax
c0011ec0:	0f 84 b1 01 00 00    	je     c0012077 <SysOpen(regs*)+0x1d6>
c0011ec6:	6a 00                	push   0x0
c0011ec8:	68 1a 45 02 c0       	push   0xc002451a
c0011ecd:	50                   	push   eax
c0011ece:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011ed2:	56                   	push   esi
c0011ed3:	e8 9a 5f ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ed8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011edb:	e8 90 e6 fe ff       	call   c0000570 <strlen>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	83 e8 01             	sub    eax,0x1
c0011ee6:	74 21                	je     c0011f09 <SysOpen(regs*)+0x68>
c0011ee8:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011eec:	eb 12                	jmp    c0011f00 <SysOpen(regs*)+0x5f>
c0011eee:	83 fa 3a             	cmp    edx,0x3a
c0011ef1:	74 12                	je     c0011f05 <SysOpen(regs*)+0x64>
c0011ef3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011ef7:	83 e8 01             	sub    eax,0x1
c0011efa:	74 0d                	je     c0011f09 <SysOpen(regs*)+0x68>
c0011efc:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011f00:	83 fa 2e             	cmp    edx,0x2e
c0011f03:	75 e9                	jne    c0011eee <SysOpen(regs*)+0x4d>
c0011f05:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011f09:	83 ec 08             	sub    esp,0x8
c0011f0c:	68 1e 45 02 c0       	push   0xc002451e
c0011f11:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f14:	50                   	push   eax
c0011f15:	e8 3f ff ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011f1a:	83 c4 10             	add    esp,0x10
c0011f1d:	85 c0                	test   eax,eax
c0011f1f:	74 1d                	je     c0011f3e <SysOpen(regs*)+0x9d>
c0011f21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f24:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011f2a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f31:	81 c4 04 01 00 00    	add    esp,0x104
c0011f37:	31 c0                	xor    eax,eax
c0011f39:	31 d2                	xor    edx,edx
c0011f3b:	5b                   	pop    ebx
c0011f3c:	5e                   	pop    esi
c0011f3d:	c3                   	ret    
c0011f3e:	83 ec 08             	sub    esp,0x8
c0011f41:	68 23 45 02 c0       	push   0xc0024523
c0011f46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f49:	50                   	push   eax
c0011f4a:	e8 0a ff ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011f4f:	83 c4 10             	add    esp,0x10
c0011f52:	85 c0                	test   eax,eax
c0011f54:	75 cb                	jne    c0011f21 <SysOpen(regs*)+0x80>
c0011f56:	83 ec 08             	sub    esp,0x8
c0011f59:	68 1f 45 02 c0       	push   0xc002451f
c0011f5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f61:	50                   	push   eax
c0011f62:	e8 e9 e7 fe ff       	call   c0000750 <strcmp>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	85 c0                	test   eax,eax
c0011f6c:	74 b3                	je     c0011f21 <SysOpen(regs*)+0x80>
c0011f6e:	83 ec 08             	sub    esp,0x8
c0011f71:	68 1e 45 02 c0       	push   0xc002451e
c0011f76:	56                   	push   esi
c0011f77:	e8 dd fe ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011f7c:	83 c4 10             	add    esp,0x10
c0011f7f:	85 c0                	test   eax,eax
c0011f81:	75 9e                	jne    c0011f21 <SysOpen(regs*)+0x80>
c0011f83:	83 ec 08             	sub    esp,0x8
c0011f86:	68 28 45 02 c0       	push   0xc0024528
c0011f8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f8e:	50                   	push   eax
c0011f8f:	e8 c5 fe ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011f94:	83 c4 10             	add    esp,0x10
c0011f97:	85 c0                	test   eax,eax
c0011f99:	0f 85 eb 00 00 00    	jne    c001208a <SysOpen(regs*)+0x1e9>
c0011f9f:	83 ec 08             	sub    esp,0x8
c0011fa2:	68 2d 45 02 c0       	push   0xc002452d
c0011fa7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011faa:	50                   	push   eax
c0011fab:	e8 a9 fe ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	85 c0                	test   eax,eax
c0011fb5:	0f 85 cf 00 00 00    	jne    c001208a <SysOpen(regs*)+0x1e9>
c0011fbb:	83 ec 08             	sub    esp,0x8
c0011fbe:	68 29 45 02 c0       	push   0xc0024529
c0011fc3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011fc6:	51                   	push   ecx
c0011fc7:	e8 84 e7 fe ff       	call   c0000750 <strcmp>
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	85 c0                	test   eax,eax
c0011fd1:	0f 84 b3 00 00 00    	je     c001208a <SysOpen(regs*)+0x1e9>
c0011fd7:	83 ec 08             	sub    esp,0x8
c0011fda:	68 28 45 02 c0       	push   0xc0024528
c0011fdf:	56                   	push   esi
c0011fe0:	e8 74 fe ff ff       	call   c0011e59 <string_ends_with(char const*, char const*)>
c0011fe5:	83 c4 10             	add    esp,0x10
c0011fe8:	85 c0                	test   eax,eax
c0011fea:	0f 85 9a 00 00 00    	jne    c001208a <SysOpen(regs*)+0x1e9>
c0011ff0:	83 ec 0c             	sub    esp,0xc
c0011ff3:	68 14 01 00 00       	push   0x114
c0011ff8:	e8 9a d8 ff ff       	call   c000f897 <malloc>
c0011ffd:	83 c4 0c             	add    esp,0xc
c0012000:	89 c6                	mov    esi,eax
c0012002:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012007:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001200a:	50                   	push   eax
c001200b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001200e:	52                   	push   edx
c001200f:	56                   	push   esi
c0012010:	e8 75 61 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	85 f6                	test   esi,esi
c001201a:	74 5b                	je     c0012077 <SysOpen(regs*)+0x1d6>
c001201c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001201f:	0f b6 c2             	movzx  eax,dl
c0012022:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012025:	89 d0                	mov    eax,edx
c0012027:	83 e0 01             	and    eax,0x1
c001202a:	f6 c2 02             	test   dl,0x2
c001202d:	74 03                	je     c0012032 <SysOpen(regs*)+0x191>
c001202f:	83 c8 02             	or     eax,0x2
c0012032:	f6 c2 04             	test   dl,0x4
c0012035:	74 03                	je     c001203a <SysOpen(regs*)+0x199>
c0012037:	83 c8 04             	or     eax,0x4
c001203a:	f6 c2 08             	test   dl,0x8
c001203d:	74 03                	je     c0012042 <SysOpen(regs*)+0x1a1>
c001203f:	83 c8 0a             	or     eax,0xa
c0012042:	80 e2 10             	and    dl,0x10
c0012045:	74 03                	je     c001204a <SysOpen(regs*)+0x1a9>
c0012047:	83 c8 12             	or     eax,0x12
c001204a:	83 ec 08             	sub    esp,0x8
c001204d:	50                   	push   eax
c001204e:	56                   	push   esi
c001204f:	e8 54 61 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0012054:	83 c4 10             	add    esp,0x10
c0012057:	85 c0                	test   eax,eax
c0012059:	75 1c                	jne    c0012077 <SysOpen(regs*)+0x1d6>
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	56                   	push   esi
c001205f:	e8 78 0e 00 00       	call   c0012edc <UnixFile::getFileDescriptor()>
c0012064:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	89 02                	mov    DWORD PTR [edx],eax
c001206c:	c1 f8 1f             	sar    eax,0x1f
c001206f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012072:	e9 ba fe ff ff       	jmp    c0011f31 <SysOpen(regs*)+0x90>
c0012077:	81 c4 04 01 00 00    	add    esp,0x104
c001207d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012082:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012087:	5b                   	pop    ebx
c0012088:	5e                   	pop    esi
c0012089:	c3                   	ret    
c001208a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001208d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012093:	e9 92 fe ff ff       	jmp    c0011f2a <SysOpen(regs*)+0x89>

c0012098 <KeSystemCall(regs*, void*)>:
c0012098:	53                   	push   ebx
c0012099:	83 ec 08             	sub    esp,0x8
c001209c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120a3:	83 f8 48             	cmp    eax,0x48
c00120a6:	77 16                	ja     c00120be <KeSystemCall(regs*, void*)+0x26>
c00120a8:	8b 14 85 00 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9800]
c00120af:	85 d2                	test   edx,edx
c00120b1:	74 0b                	je     c00120be <KeSystemCall(regs*, void*)+0x26>
c00120b3:	83 ec 0c             	sub    esp,0xc
c00120b6:	53                   	push   ebx
c00120b7:	ff d2                	call   edx
c00120b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00120bc:	eb 0d                	jmp    c00120cb <KeSystemCall(regs*, void*)+0x33>
c00120be:	52                   	push   edx
c00120bf:	52                   	push   edx
c00120c0:	50                   	push   eax
c00120c1:	68 32 45 02 c0       	push   0xc0024532
c00120c6:	e8 b1 4e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00120d3:	31 d2                	xor    edx,edx
c00120d5:	83 c4 08             	add    esp,0x8
c00120d8:	5b                   	pop    ebx
c00120d9:	c3                   	ret    

c00120da <VgaText::isAtty()>:
c00120da:	b0 01                	mov    al,0x1
c00120dc:	c3                   	ret    
c00120dd:	90                   	nop

c00120de <VgaText::~VgaText()>:
c00120de:	83 ec 0c             	sub    esp,0xc
c00120e1:	ba 9c 45 02 c0       	mov    edx,0xc002459c
c00120e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ea:	89 10                	mov    DWORD PTR [eax],edx
c00120ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f0:	83 ec 0c             	sub    esp,0xc
c00120f3:	50                   	push   eax
c00120f4:	e8 d1 0f 00 00       	call   c00130ca <UnixFile::~UnixFile()>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	90                   	nop
c00120fd:	83 c4 0c             	add    esp,0xc
c0012100:	c3                   	ret    
c0012101:	90                   	nop

c0012102 <VgaText::~VgaText()>:
c0012102:	83 ec 0c             	sub    esp,0xc
c0012105:	83 ec 0c             	sub    esp,0xc
c0012108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001210c:	e8 cd ff ff ff       	call   c00120de <VgaText::~VgaText()>
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	83 ec 08             	sub    esp,0x8
c0012117:	68 84 01 00 00       	push   0x184
c001211c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012120:	e8 8b b2 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0012125:	83 c4 10             	add    esp,0x10
c0012128:	83 c4 0c             	add    esp,0xc
c001212b:	c3                   	ret    

c001212c <VgaText::read(unsigned long long, void*, int*)>:
c001212c:	83 ec 10             	sub    esp,0x10
c001212f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012133:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001213b:	e8 65 84 ff ff       	call   c000a5a5 <readKeyboard(VgaText*, char*, unsigned long)>
c0012140:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012144:	89 02                	mov    DWORD PTR [edx],eax
c0012146:	31 c0                	xor    eax,eax
c0012148:	83 c4 1c             	add    esp,0x1c
c001214b:	c3                   	ret    

c001214c <setTerminalScrollLock(bool)>:
c001214c:	c3                   	ret    

c001214d <doTerminalCycle()>:
c001214d:	c3                   	ret    

c001214e <addToTerminalCycle(VgaText*)>:
c001214e:	c3                   	ret    

c001214f <scrollTerminalScrollLock(int)>:
c001214f:	c3                   	ret    

c0012150 <VgaText::updateTitle()>:
c0012150:	c3                   	ret    
c0012151:	90                   	nop

c0012152 <VgaText::load()>:
c0012152:	c3                   	ret    
c0012153:	90                   	nop

c0012154 <VgaText::updateCursor()>:
c0012154:	83 ec 14             	sub    esp,0x14
c0012157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001215b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001215e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012161:	e8 02 96 00 00       	call   c001b768 <HalConsoleCursorUpdate(int, int)>
c0012166:	83 c4 1c             	add    esp,0x1c
c0012169:	c3                   	ret    

c001216a <VgaText::doANSI_SGR(int)>:
c001216a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001216e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012172:	85 d2                	test   edx,edx
c0012174:	75 0b                	jne    c0012181 <VgaText::doANSI_SGR(int)+0x17>
c0012176:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012179:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001217c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001217f:	eb 59                	jmp    c00121da <VgaText::doANSI_SGR(int)+0x70>
c0012181:	83 fa 07             	cmp    edx,0x7
c0012184:	75 0b                	jne    c0012191 <VgaText::doANSI_SGR(int)+0x27>
c0012186:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012189:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001218c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001218f:	eb 49                	jmp    c00121da <VgaText::doANSI_SGR(int)+0x70>
c0012191:	83 fa 1b             	cmp    edx,0x1b
c0012194:	74 e0                	je     c0012176 <VgaText::doANSI_SGR(int)+0xc>
c0012196:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012199:	83 f9 07             	cmp    ecx,0x7
c001219c:	77 09                	ja     c00121a7 <VgaText::doANSI_SGR(int)+0x3d>
c001219e:	8b 14 8d 60 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd96a0]
c00121a5:	eb 20                	jmp    c00121c7 <VgaText::doANSI_SGR(int)+0x5d>
c00121a7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00121aa:	83 f9 07             	cmp    ecx,0x7
c00121ad:	77 09                	ja     c00121b8 <VgaText::doANSI_SGR(int)+0x4e>
c00121af:	8b 14 8d 60 69 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd96a0]
c00121b6:	eb 22                	jmp    c00121da <VgaText::doANSI_SGR(int)+0x70>
c00121b8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00121bb:	83 f9 07             	cmp    ecx,0x7
c00121be:	77 0b                	ja     c00121cb <VgaText::doANSI_SGR(int)+0x61>
c00121c0:	8b 14 95 18 68 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd97e8]
c00121c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121ca:	c3                   	ret    
c00121cb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00121ce:	83 f9 07             	cmp    ecx,0x7
c00121d1:	77 0a                	ja     c00121dd <VgaText::doANSI_SGR(int)+0x73>
c00121d3:	8b 14 95 f0 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9810]
c00121da:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121dd:	c3                   	ret    

c00121de <VgaText::setDefaultBgColour(VgaColour)>:
c00121de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00121e9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00121ec:	c3                   	ret    
c00121ed:	90                   	nop

c00121ee <VgaText::setDefaultFgColour(VgaColour)>:
c00121ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00121f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121fc:	c3                   	ret    
c00121fd:	90                   	nop

c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00121fe:	53                   	push   ebx
c00121ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012203:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012207:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001220b:	51                   	push   ecx
c001220c:	e8 cd ff ff ff       	call   c00121de <VgaText::setDefaultBgColour(VgaColour)>
c0012211:	58                   	pop    eax
c0012212:	5a                   	pop    edx
c0012213:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012217:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001221b:	5b                   	pop    ebx
c001221c:	eb d0                	jmp    c00121ee <VgaText::setDefaultFgColour(VgaColour)>

c001221e <VgaText::setTitleTextColour(VgaColour)>:
c001221e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012222:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012226:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012229:	c3                   	ret    

c001222a <VgaText::setTitleColour(VgaColour)>:
c001222a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001222e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012232:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012235:	c3                   	ret    

c0012236 <VgaText::setTitle(char*)>:
c0012236:	c3                   	ret    
c0012237:	90                   	nop

c0012238 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001223c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012241:	83 e0 0f             	and    eax,0xf
c0012244:	c1 e2 04             	shl    edx,0x4
c0012247:	09 d0                	or     eax,edx
c0012249:	c3                   	ret    

c001224a <VgaText::scrollScreen()>:
c001224a:	55                   	push   ebp
c001224b:	57                   	push   edi
c001224c:	56                   	push   esi
c001224d:	be 01 00 00 00       	mov    esi,0x1
c0012252:	53                   	push   ebx
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001225a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001225d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0012263:	31 ff                	xor    edi,edi
c0012265:	01 e9                	add    ecx,ebp
c0012267:	8a 01                	mov    al,BYTE PTR [ecx]
c0012269:	83 fe 18             	cmp    esi,0x18
c001226c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0012272:	75 20                	jne    c0012294 <VgaText::scrollScreen()+0x4a>
c0012274:	f7 c7 01 00 00 00    	test   edi,0x1
c001227a:	74 15                	je     c0012291 <VgaText::scrollScreen()+0x47>
c001227c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012280:	50                   	push   eax
c0012281:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012285:	50                   	push   eax
c0012286:	e8 ad ff ff ff       	call   c0012238 <VgaText::combineColours(unsigned char, unsigned char)>
c001228b:	5a                   	pop    edx
c001228c:	5a                   	pop    edx
c001228d:	88 01                	mov    BYTE PTR [ecx],al
c001228f:	eb 03                	jmp    c0012294 <VgaText::scrollScreen()+0x4a>
c0012291:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0012294:	47                   	inc    edi
c0012295:	41                   	inc    ecx
c0012296:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001229c:	75 c9                	jne    c0012267 <VgaText::scrollScreen()+0x1d>
c001229e:	46                   	inc    esi
c001229f:	83 fe 19             	cmp    esi,0x19
c00122a2:	75 b9                	jne    c001225d <VgaText::scrollScreen()+0x13>
c00122a4:	39 1d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,ebx
c00122aa:	75 1f                	jne    c00122cb <VgaText::scrollScreen()+0x81>
c00122ac:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00122b0:	74 05                	je     c00122b7 <VgaText::scrollScreen()+0x6d>
c00122b2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00122b5:	eb 14                	jmp    c00122cb <VgaText::scrollScreen()+0x81>
c00122b7:	50                   	push   eax
c00122b8:	50                   	push   eax
c00122b9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00122bd:	50                   	push   eax
c00122be:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00122c2:	50                   	push   eax
c00122c3:	e8 34 93 00 00       	call   c001b5fc <HalConsoleScroll(int, int)>
c00122c8:	83 c4 10             	add    esp,0x10
c00122cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00122cf:	83 c4 0c             	add    esp,0xc
c00122d2:	5b                   	pop    ebx
c00122d3:	5e                   	pop    esi
c00122d4:	5f                   	pop    edi
c00122d5:	5d                   	pop    ebp
c00122d6:	e9 79 fe ff ff       	jmp    c0012154 <VgaText::updateCursor()>
c00122db:	90                   	nop

c00122dc <VgaText::combineCharAndColour(char, unsigned char)>:
c00122dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00122e1:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00122e6:	c1 e0 08             	shl    eax,0x8
c00122e9:	09 d0                	or     eax,edx
c00122eb:	c3                   	ret    

c00122ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00122ec:	55                   	push   ebp
c00122ed:	57                   	push   edi
c00122ee:	56                   	push   esi
c00122ef:	53                   	push   ebx
c00122f0:	83 ec 1c             	sub    esp,0x1c
c00122f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00122f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122ff:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012302:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012306:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001230a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001230e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012312:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012316:	85 ed                	test   ebp,ebp
c0012318:	75 14                	jne    c001232e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001231a:	c7 44 24 30 46 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024546
c0012322:	83 c4 1c             	add    esp,0x1c
c0012325:	5b                   	pop    ebx
c0012326:	5e                   	pop    esi
c0012327:	5f                   	pop    edi
c0012328:	5d                   	pop    ebp
c0012329:	e9 c6 d9 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001232e:	50                   	push   eax
c001232f:	50                   	push   eax
c0012330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012335:	50                   	push   eax
c0012336:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001233b:	50                   	push   eax
c001233c:	e8 f7 fe ff ff       	call   c0012238 <VgaText::combineColours(unsigned char, unsigned char)>
c0012341:	5a                   	pop    edx
c0012342:	0f be c9             	movsx  ecx,cl
c0012345:	5a                   	pop    edx
c0012346:	0f b6 c0             	movzx  eax,al
c0012349:	50                   	push   eax
c001234a:	51                   	push   ecx
c001234b:	e8 8c ff ff ff       	call   c00122dc <VgaText::combineCharAndColour(char, unsigned char)>
c0012350:	6b d6 50             	imul   edx,esi,0x50
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	01 da                	add    edx,ebx
c0012358:	0f b7 d2             	movzx  edx,dx
c001235b:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012360:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012366:	75 28                	jne    c0012390 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001236c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012370:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012374:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012378:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001237c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012380:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012384:	83 c4 1c             	add    esp,0x1c
c0012387:	5b                   	pop    ebx
c0012388:	5e                   	pop    esi
c0012389:	5f                   	pop    edi
c001238a:	5d                   	pop    ebp
c001238b:	e9 74 93 00 00       	jmp    c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012390:	83 c4 1c             	add    esp,0x1c
c0012393:	5b                   	pop    ebx
c0012394:	5e                   	pop    esi
c0012395:	5f                   	pop    edi
c0012396:	5d                   	pop    ebp
c0012397:	c3                   	ret    

c0012398 <VgaText::getCursorX()>:
c0012398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001239c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001239f:	c3                   	ret    

c00123a0 <VgaText::getCursorY()>:
c00123a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123a4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a7:	c3                   	ret    

c00123a8 <VgaText::setCursor(int, int)>:
c00123a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123b0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00123b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00123ba:	e9 95 fd ff ff       	jmp    c0012154 <VgaText::updateCursor()>

c00123bf <setActiveTerminal(VgaText*)>:
c00123bf:	53                   	push   ebx
c00123c0:	83 ec 08             	sub    esp,0x8
c00123c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123c7:	85 db                	test   ebx,ebx
c00123c9:	75 11                	jne    c00123dc <setActiveTerminal(VgaText*)+0x1d>
c00123cb:	c7 44 24 10 56 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024556
c00123d3:	83 c4 08             	add    esp,0x8
c00123d6:	5b                   	pop    ebx
c00123d7:	e9 18 d9 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00123dc:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c00123e1:	85 c0                	test   eax,eax
c00123e3:	74 0c                	je     c00123f1 <setActiveTerminal(VgaText*)+0x32>
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	50                   	push   eax
c00123e9:	e8 66 fd ff ff       	call   c0012154 <VgaText::updateCursor()>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	89 1d f4 c1 02 c0    	mov    DWORD PTR ds:0xc002c1f4,ebx
c00123f7:	50                   	push   eax
c00123f8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00123fb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00123fe:	53                   	push   ebx
c00123ff:	e8 a4 ff ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c0012404:	83 c4 18             	add    esp,0x18
c0012407:	5b                   	pop    ebx
c0012408:	c3                   	ret    
c0012409:	90                   	nop

c001240a <VgaText::clearScreen()>:
c001240a:	57                   	push   edi
c001240b:	56                   	push   esi
c001240c:	31 f6                	xor    esi,esi
c001240e:	53                   	push   ebx
c001240f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012413:	52                   	push   edx
c0012414:	6a 00                	push   0x0
c0012416:	6a 00                	push   0x0
c0012418:	53                   	push   ebx
c0012419:	e8 8a ff ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c001241e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012425:	83 c4 10             	add    esp,0x10
c0012428:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001242b:	7e 20                	jle    c001244d <VgaText::clearScreen()+0x43>
c001242d:	31 ff                	xor    edi,edi
c001242f:	50                   	push   eax
c0012430:	50                   	push   eax
c0012431:	56                   	push   esi
c0012432:	57                   	push   edi
c0012433:	47                   	inc    edi
c0012434:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012437:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001243a:	6a 20                	push   0x20
c001243c:	53                   	push   ebx
c001243d:	e8 aa fe ff ff       	call   c00122ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012442:	83 c4 20             	add    esp,0x20
c0012445:	83 ff 50             	cmp    edi,0x50
c0012448:	75 e5                	jne    c001242f <VgaText::clearScreen()+0x25>
c001244a:	46                   	inc    esi
c001244b:	eb db                	jmp    c0012428 <VgaText::clearScreen()+0x1e>
c001244d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012454:	5b                   	pop    ebx
c0012455:	5e                   	pop    esi
c0012456:	5f                   	pop    edi
c0012457:	c3                   	ret    

c0012458 <VgaText::setCursorX(int)>:
c0012458:	83 ec 10             	sub    esp,0x10
c001245b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001245f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012466:	50                   	push   eax
c0012467:	e8 3c ff ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c001246c:	83 c4 1c             	add    esp,0x1c
c001246f:	c3                   	ret    

c0012470 <VgaText::setCursorY(int)>:
c0012470:	83 ec 10             	sub    esp,0x10
c0012473:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012477:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001247b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001247e:	50                   	push   eax
c001247f:	e8 24 ff ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c0012484:	83 c4 1c             	add    esp,0x1c
c0012487:	c3                   	ret    

c0012488 <VgaText::incrementCursor(bool)>:
c0012488:	56                   	push   esi
c0012489:	53                   	push   ebx
c001248a:	51                   	push   ecx
c001248b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001248f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012493:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012496:	40                   	inc    eax
c0012497:	83 f8 50             	cmp    eax,0x50
c001249a:	74 05                	je     c00124a1 <VgaText::incrementCursor(bool)+0x19>
c001249c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001249f:	eb 24                	jmp    c00124c5 <VgaText::incrementCursor(bool)+0x3d>
c00124a1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00124a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00124ab:	8d 50 01             	lea    edx,[eax+0x1]
c00124ae:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00124b1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00124b4:	75 0f                	jne    c00124c5 <VgaText::incrementCursor(bool)+0x3d>
c00124b6:	83 ec 0c             	sub    esp,0xc
c00124b9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00124bc:	53                   	push   ebx
c00124bd:	e8 88 fd ff ff       	call   c001224a <VgaText::scrollScreen()>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	89 f0                	mov    eax,esi
c00124c7:	84 c0                	test   al,al
c00124c9:	74 0c                	je     c00124d7 <VgaText::incrementCursor(bool)+0x4f>
c00124cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00124cf:	5a                   	pop    edx
c00124d0:	5b                   	pop    ebx
c00124d1:	5e                   	pop    esi
c00124d2:	e9 7d fc ff ff       	jmp    c0012154 <VgaText::updateCursor()>
c00124d7:	58                   	pop    eax
c00124d8:	5b                   	pop    ebx
c00124d9:	5e                   	pop    esi
c00124da:	c3                   	ret    
c00124db:	90                   	nop

c00124dc <VgaText::decrementCursor(bool)>:
c00124dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00124e4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00124e7:	85 c0                	test   eax,eax
c00124e9:	74 04                	je     c00124ef <VgaText::decrementCursor(bool)+0x13>
c00124eb:	48                   	dec    eax
c00124ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00124ef:	84 c9                	test   cl,cl
c00124f1:	74 09                	je     c00124fc <VgaText::decrementCursor(bool)+0x20>
c00124f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00124f7:	e9 58 fc ff ff       	jmp    c0012154 <VgaText::updateCursor()>
c00124fc:	c3                   	ret    
c00124fd:	90                   	nop

c00124fe <VgaText::putchar(char, VgaColour, VgaColour)>:
c00124fe:	53                   	push   ebx
c00124ff:	83 ec 08             	sub    esp,0x8
c0012502:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012507:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001250b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001250f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012513:	83 f8 07             	cmp    eax,0x7
c0012516:	75 21                	jne    c0012539 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012518:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012520:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012528:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012530:	83 c4 08             	add    esp,0x8
c0012533:	5b                   	pop    ebx
c0012534:	e9 f2 64 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c0012539:	83 f8 0d             	cmp    eax,0xd
c001253c:	75 09                	jne    c0012547 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001253e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012545:	eb 2d                	jmp    c0012574 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012547:	83 f8 0a             	cmp    eax,0xa
c001254a:	75 31                	jne    c001257d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001254c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001254f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012556:	8d 50 01             	lea    edx,[eax+0x1]
c0012559:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001255c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001255f:	75 0f                	jne    c0012570 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012561:	83 ec 0c             	sub    esp,0xc
c0012564:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012567:	53                   	push   ebx
c0012568:	e8 dd fc ff ff       	call   c001224a <VgaText::scrollScreen()>
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012574:	83 c4 08             	add    esp,0x8
c0012577:	5b                   	pop    ebx
c0012578:	e9 d7 fb ff ff       	jmp    c0012154 <VgaText::updateCursor()>
c001257d:	83 f8 08             	cmp    eax,0x8
c0012580:	75 25                	jne    c00125a7 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012582:	50                   	push   eax
c0012583:	50                   	push   eax
c0012584:	6a 01                	push   0x1
c0012586:	53                   	push   ebx
c0012587:	e8 50 ff ff ff       	call   c00124dc <VgaText::decrementCursor(bool)>
c001258c:	5a                   	pop    edx
c001258d:	59                   	pop    ecx
c001258e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012591:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012594:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012597:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001259a:	6a 20                	push   0x20
c001259c:	53                   	push   ebx
c001259d:	e8 4a fd ff ff       	call   c00122ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125a2:	83 c4 28             	add    esp,0x28
c00125a5:	5b                   	pop    ebx
c00125a6:	c3                   	ret    
c00125a7:	83 ec 08             	sub    esp,0x8
c00125aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125ad:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125b0:	51                   	push   ecx
c00125b1:	52                   	push   edx
c00125b2:	50                   	push   eax
c00125b3:	53                   	push   ebx
c00125b4:	e8 33 fd ff ff       	call   c00122ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125b9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00125bd:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00125c5:	83 c4 28             	add    esp,0x28
c00125c8:	5b                   	pop    ebx
c00125c9:	e9 ba fe ff ff       	jmp    c0012488 <VgaText::incrementCursor(bool)>

c00125ce <VgaText::putchar(char)>:
c00125ce:	57                   	push   edi
c00125cf:	56                   	push   esi
c00125d0:	53                   	push   ebx
c00125d1:	83 ec 10             	sub    esp,0x10
c00125d4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00125d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00125dc:	89 f8                	mov    eax,edi
c00125de:	0f be c0             	movsx  eax,al
c00125e1:	83 f8 5b             	cmp    eax,0x5b
c00125e4:	75 18                	jne    c00125fe <VgaText::putchar(char)+0x30>
c00125e6:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00125ea:	74 20                	je     c001260c <VgaText::putchar(char)+0x3e>
c00125ec:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00125f2:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00125f9:	e9 c1 00 00 00       	jmp    c00126bf <VgaText::putchar(char)+0xf1>
c00125fe:	83 f8 1b             	cmp    eax,0x1b
c0012601:	75 09                	jne    c001260c <VgaText::putchar(char)+0x3e>
c0012603:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012607:	e9 b3 00 00 00       	jmp    c00126bf <VgaText::putchar(char)+0xf1>
c001260c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001260f:	84 c9                	test   cl,cl
c0012611:	0f 84 98 00 00 00    	je     c00126af <VgaText::putchar(char)+0xe1>
c0012617:	8d 77 c0             	lea    esi,[edi-0x40]
c001261a:	89 f2                	mov    edx,esi
c001261c:	80 fa 3e             	cmp    dl,0x3e
c001261f:	77 78                	ja     c0012699 <VgaText::putchar(char)+0xcb>
c0012621:	83 f8 6d             	cmp    eax,0x6d
c0012624:	75 47                	jne    c001266d <VgaText::putchar(char)+0x9f>
c0012626:	31 f6                	xor    esi,esi
c0012628:	31 d2                	xor    edx,edx
c001262a:	31 c0                	xor    eax,eax
c001262c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001262f:	7e 2d                	jle    c001265e <VgaText::putchar(char)+0x90>
c0012631:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012636:	83 fa 3b             	cmp    edx,0x3b
c0012639:	75 17                	jne    c0012652 <VgaText::putchar(char)+0x84>
c001263b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001263f:	50                   	push   eax
c0012640:	53                   	push   ebx
c0012641:	e8 24 fb ff ff       	call   c001216a <VgaText::doANSI_SGR(int)>
c0012646:	59                   	pop    ecx
c0012647:	31 d2                	xor    edx,edx
c0012649:	5f                   	pop    edi
c001264a:	31 c0                	xor    eax,eax
c001264c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012650:	eb 09                	jmp    c001265b <VgaText::putchar(char)+0x8d>
c0012652:	6b c0 0a             	imul   eax,eax,0xa
c0012655:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012659:	88 ca                	mov    dl,cl
c001265b:	46                   	inc    esi
c001265c:	eb ce                	jmp    c001262c <VgaText::putchar(char)+0x5e>
c001265e:	84 d2                	test   dl,dl
c0012660:	74 2f                	je     c0012691 <VgaText::putchar(char)+0xc3>
c0012662:	50                   	push   eax
c0012663:	53                   	push   ebx
c0012664:	e8 01 fb ff ff       	call   c001216a <VgaText::doANSI_SGR(int)>
c0012669:	58                   	pop    eax
c001266a:	5a                   	pop    edx
c001266b:	eb 24                	jmp    c0012691 <VgaText::putchar(char)+0xc3>
c001266d:	83 f8 4a             	cmp    eax,0x4a
c0012670:	75 1f                	jne    c0012691 <VgaText::putchar(char)+0xc3>
c0012672:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012676:	75 19                	jne    c0012691 <VgaText::putchar(char)+0xc3>
c0012678:	83 ec 0c             	sub    esp,0xc
c001267b:	53                   	push   ebx
c001267c:	e8 89 fd ff ff       	call   c001240a <VgaText::clearScreen()>
c0012681:	83 c4 0c             	add    esp,0xc
c0012684:	6a 00                	push   0x0
c0012686:	6a 00                	push   0x0
c0012688:	53                   	push   ebx
c0012689:	e8 1a fd ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012697:	eb 26                	jmp    c00126bf <VgaText::putchar(char)+0xf1>
c0012699:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001269c:	83 f8 0e             	cmp    eax,0xe
c001269f:	7f 1e                	jg     c00126bf <VgaText::putchar(char)+0xf1>
c00126a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00126a4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00126a7:	89 f9                	mov    ecx,edi
c00126a9:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00126ad:	eb 10                	jmp    c00126bf <VgaText::putchar(char)+0xf1>
c00126af:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00126b2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00126b5:	50                   	push   eax
c00126b6:	53                   	push   ebx
c00126b7:	e8 42 fe ff ff       	call   c00124fe <VgaText::putchar(char, VgaColour, VgaColour)>
c00126bc:	83 c4 10             	add    esp,0x10
c00126bf:	83 c4 10             	add    esp,0x10
c00126c2:	5b                   	pop    ebx
c00126c3:	5e                   	pop    esi
c00126c4:	5f                   	pop    edi
c00126c5:	c3                   	ret    

c00126c6 <VgaText::putx(unsigned int)>:
c00126c6:	57                   	push   edi
c00126c7:	b9 11 00 00 00       	mov    ecx,0x11
c00126cc:	56                   	push   esi
c00126cd:	be cf 2d 02 c0       	mov    esi,0xc0022dcf
c00126d2:	53                   	push   ebx
c00126d3:	83 ec 20             	sub    esp,0x20
c00126d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00126da:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126de:	fc                   	cld    
c00126df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126e1:	be 08 00 00 00       	mov    esi,0x8
c00126e6:	50                   	push   eax
c00126e7:	50                   	push   eax
c00126e8:	89 d8                	mov    eax,ebx
c00126ea:	c1 e3 04             	shl    ebx,0x4
c00126ed:	c1 e8 1c             	shr    eax,0x1c
c00126f0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00126f5:	50                   	push   eax
c00126f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126fa:	e8 cf fe ff ff       	call   c00125ce <VgaText::putchar(char)>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	4e                   	dec    esi
c0012703:	75 e1                	jne    c00126e6 <VgaText::putx(unsigned int)+0x20>
c0012705:	83 c4 20             	add    esp,0x20
c0012708:	5b                   	pop    ebx
c0012709:	5e                   	pop    esi
c001270a:	5f                   	pop    edi
c001270b:	c3                   	ret    

c001270c <VgaText::puts(char const*)>:
c001270c:	53                   	push   ebx
c001270d:	83 ec 08             	sub    esp,0x8
c0012710:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012714:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012717:	85 c0                	test   eax,eax
c0012719:	74 12                	je     c001272d <VgaText::puts(char const*)+0x21>
c001271b:	43                   	inc    ebx
c001271c:	51                   	push   ecx
c001271d:	51                   	push   ecx
c001271e:	50                   	push   eax
c001271f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012723:	e8 a6 fe ff ff       	call   c00125ce <VgaText::putchar(char)>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	eb e7                	jmp    c0012714 <VgaText::puts(char const*)+0x8>
c001272d:	83 c4 08             	add    esp,0x8
c0012730:	5b                   	pop    ebx
c0012731:	c3                   	ret    

c0012732 <VgaText::write(unsigned long long, void*, int*)>:
c0012732:	55                   	push   ebp
c0012733:	57                   	push   edi
c0012734:	56                   	push   esi
c0012735:	53                   	push   ebx
c0012736:	83 ec 0c             	sub    esp,0xc
c0012739:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001273d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012741:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012745:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001274c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001274f:	39 eb                	cmp    ebx,ebp
c0012751:	74 13                	je     c0012766 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012753:	43                   	inc    ebx
c0012754:	50                   	push   eax
c0012755:	50                   	push   eax
c0012756:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001275a:	50                   	push   eax
c001275b:	56                   	push   esi
c001275c:	e8 6d fe ff ff       	call   c00125ce <VgaText::putchar(char)>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	eb e9                	jmp    c001274f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012766:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001276d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012771:	89 38                	mov    DWORD PTR [eax],edi
c0012773:	83 c4 0c             	add    esp,0xc
c0012776:	31 c0                	xor    eax,eax
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	5d                   	pop    ebp
c001277c:	c3                   	ret    
c001277d:	90                   	nop

c001277e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001277e:	55                   	push   ebp
c001277f:	57                   	push   edi
c0012780:	56                   	push   esi
c0012781:	53                   	push   ebx
c0012782:	83 ec 1c             	sub    esp,0x1c
c0012785:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012789:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001278d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012791:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0012794:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012798:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001279c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127a0:	85 db                	test   ebx,ebx
c00127a2:	75 14                	jne    c00127b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00127a4:	c7 44 24 30 64 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024564
c00127ac:	83 c4 1c             	add    esp,0x1c
c00127af:	5b                   	pop    ebx
c00127b0:	5e                   	pop    esi
c00127b1:	5f                   	pop    edi
c00127b2:	5d                   	pop    ebp
c00127b3:	e9 3c d5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00127b8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00127bf:	50                   	push   eax
c00127c0:	50                   	push   eax
c00127c1:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00127c6:	50                   	push   eax
c00127c7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00127cc:	50                   	push   eax
c00127cd:	e8 66 fa ff ff       	call   c0012238 <VgaText::combineColours(unsigned char, unsigned char)>
c00127d2:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00127d6:	83 c4 10             	add    esp,0x10
c00127d9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00127dc:	0f b6 e8             	movzx  ebp,al
c00127df:	0f b7 c9             	movzx  ecx,cx
c00127e2:	01 c9                	add    ecx,ecx
c00127e4:	01 cb                	add    ebx,ecx
c00127e6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127e9:	85 c0                	test   eax,eax
c00127eb:	0f 84 ef 00 00 00    	je     c00128e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00127f1:	83 f8 0d             	cmp    eax,0xd
c00127f4:	75 0c                	jne    c0012802 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00127f6:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00127fd:	e9 d8 00 00 00       	jmp    c00128da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012802:	83 f8 0a             	cmp    eax,0xa
c0012805:	75 44                	jne    c001284b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012807:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001280a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012811:	8d 48 01             	lea    ecx,[eax+0x1]
c0012814:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012817:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001281a:	75 0f                	jne    c001282b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001281c:	83 ec 0c             	sub    esp,0xc
c001281f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012822:	57                   	push   edi
c0012823:	e8 22 fa ff ff       	call   c001224a <VgaText::scrollScreen()>
c0012828:	83 c4 10             	add    esp,0x10
c001282b:	83 ec 0c             	sub    esp,0xc
c001282e:	57                   	push   edi
c001282f:	e8 20 f9 ff ff       	call   c0012154 <VgaText::updateCursor()>
c0012834:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012838:	83 c4 10             	add    esp,0x10
c001283b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001283e:	0f b7 db             	movzx  ebx,bx
c0012841:	01 db                	add    ebx,ebx
c0012843:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012846:	e9 8f 00 00 00       	jmp    c00128da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001284b:	83 f8 08             	cmp    eax,0x8
c001284e:	75 34                	jne    c0012884 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012850:	51                   	push   ecx
c0012851:	51                   	push   ecx
c0012852:	6a 01                	push   0x1
c0012854:	57                   	push   edi
c0012855:	e8 82 fc ff ff       	call   c00124dc <VgaText::decrementCursor(bool)>
c001285a:	5b                   	pop    ebx
c001285b:	58                   	pop    eax
c001285c:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001285f:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012862:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012865:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012868:	6a 20                	push   0x20
c001286a:	57                   	push   edi
c001286b:	e8 7c fa ff ff       	call   c00122ec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012870:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012874:	83 c4 20             	add    esp,0x20
c0012877:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001287a:	0f b7 db             	movzx  ebx,bx
c001287d:	01 db                	add    ebx,ebx
c001287f:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012882:	eb 56                	jmp    c00128da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012884:	52                   	push   edx
c0012885:	52                   	push   edx
c0012886:	55                   	push   ebp
c0012887:	50                   	push   eax
c0012888:	e8 4f fa ff ff       	call   c00122dc <VgaText::combineCharAndColour(char, unsigned char)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	66 89 03             	mov    WORD PTR [ebx],ax
c0012893:	39 3d f4 c1 02 c0    	cmp    DWORD PTR ds:0xc002c1f4,edi
c0012899:	75 1d                	jne    c00128b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c001289b:	83 ec 0c             	sub    esp,0xc
c001289e:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00128a1:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00128a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128af:	50                   	push   eax
c00128b0:	e8 4f 8e 00 00       	call   c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00128b5:	83 c4 20             	add    esp,0x20
c00128b8:	83 c3 02             	add    ebx,0x2
c00128bb:	50                   	push   eax
c00128bc:	50                   	push   eax
c00128bd:	6a 00                	push   0x0
c00128bf:	57                   	push   edi
c00128c0:	e8 c3 fb ff ff       	call   c0012488 <VgaText::incrementCursor(bool)>
c00128c5:	83 c4 10             	add    esp,0x10
c00128c8:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00128cc:	75 0c                	jne    c00128da <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00128ce:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00128d2:	0f b7 db             	movzx  ebx,bx
c00128d5:	01 db                	add    ebx,ebx
c00128d7:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00128da:	46                   	inc    esi
c00128db:	e9 06 ff ff ff       	jmp    c00127e6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00128e0:	83 ec 0c             	sub    esp,0xc
c00128e3:	57                   	push   edi
c00128e4:	e8 6b f8 ff ff       	call   c0012154 <VgaText::updateCursor()>
c00128e9:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00128f0:	83 c4 2c             	add    esp,0x2c
c00128f3:	5b                   	pop    ebx
c00128f4:	5e                   	pop    esi
c00128f5:	5f                   	pop    edi
c00128f6:	5d                   	pop    ebp
c00128f7:	c3                   	ret    

c00128f8 <VgaText::VgaText(char const*)>:
c00128f8:	56                   	push   esi
c00128f9:	53                   	push   ebx
c00128fa:	83 ec 04             	sub    esp,0x4
c00128fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012901:	83 ec 08             	sub    esp,0x8
c0012904:	6a 00                	push   0x0
c0012906:	50                   	push   eax
c0012907:	e8 d8 05 00 00       	call   c0012ee4 <UnixFile::UnixFile(int)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	ba 9c 45 02 c0       	mov    edx,0xc002459c
c0012914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012918:	89 10                	mov    DWORD PTR [eax],edx
c001291a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001291e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012929:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012944:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001294b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012965:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001296c:	83 ec 0c             	sub    esp,0xc
c001296f:	68 74 45 02 c0       	push   0xc0024574
c0012974:	e8 03 46 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012979:	83 c4 10             	add    esp,0x10
c001297c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012980:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012987:	83 ec 0c             	sub    esp,0xc
c001298a:	6a 01                	push   0x1
c001298c:	e8 a6 09 00 00       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	89 c2                	mov    edx,eax
c0012996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001299d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c00129a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129aa:	89 c6                	mov    esi,eax
c00129ac:	e8 37 d5 ff ff       	call   c000fee8 <Phys::allocatePage()>
c00129b1:	68 05 0c 00 00       	push   0xc05
c00129b6:	56                   	push   esi
c00129b7:	50                   	push   eax
c00129b8:	53                   	push   ebx
c00129b9:	e8 5c 10 00 00       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129c8:	83 ec 04             	sub    esp,0x4
c00129cb:	68 a0 0f 00 00       	push   0xfa0
c00129d0:	6a 00                	push   0x0
c00129d2:	50                   	push   eax
c00129d3:	e8 18 db fe ff       	call   c00004f0 <memset>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	83 ec 04             	sub    esp,0x4
c00129de:	6a 00                	push   0x0
c00129e0:	6a 07                	push   0x7
c00129e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129e6:	e8 13 f8 ff ff       	call   c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00129eb:	83 c4 10             	add    esp,0x10
c00129ee:	83 ec 04             	sub    esp,0x4
c00129f1:	6a 00                	push   0x0
c00129f3:	6a 00                	push   0x0
c00129f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f9:	e8 aa f9 ff ff       	call   c00123a8 <VgaText::setCursor(int, int)>
c00129fe:	83 c4 10             	add    esp,0x10
c0012a01:	83 ec 0c             	sub    esp,0xc
c0012a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a08:	e8 fd f9 ff ff       	call   c001240a <VgaText::clearScreen()>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a14:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a1c:	05 82 00 00 00       	add    eax,0x82
c0012a21:	83 ec 04             	sub    esp,0x4
c0012a24:	68 80 00 00 00       	push   0x80
c0012a29:	6a 00                	push   0x0
c0012a2b:	50                   	push   eax
c0012a2c:	e8 bf da fe ff       	call   c00004f0 <memset>
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a38:	05 02 01 00 00       	add    eax,0x102
c0012a3d:	83 ec 04             	sub    esp,0x4
c0012a40:	68 80 00 00 00       	push   0x80
c0012a45:	6a 00                	push   0x0
c0012a47:	50                   	push   eax
c0012a48:	e8 a3 da fe ff       	call   c00004f0 <memset>
c0012a4d:	83 c4 10             	add    esp,0x10
c0012a50:	90                   	nop
c0012a51:	83 c4 04             	add    esp,0x4
c0012a54:	5b                   	pop    ebx
c0012a55:	5e                   	pop    esi
c0012a56:	c3                   	ret    
c0012a57:	90                   	nop

c0012a58 <VgaText::receiveKey(unsigned char)>:
c0012a58:	55                   	push   ebp
c0012a59:	57                   	push   edi
c0012a5a:	56                   	push   esi
c0012a5b:	53                   	push   ebx
c0012a5c:	83 ec 2c             	sub    esp,0x2c
c0012a5f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012a63:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a67:	89 ef                	mov    edi,ebp
c0012a69:	81 e7 ff 00 00 00    	and    edi,0xff
c0012a6f:	0f 84 66 01 00 00    	je     c0012bdb <VgaText::receiveKey(unsigned char)+0x183>
c0012a75:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012a7b:	83 ff 08             	cmp    edi,0x8
c0012a7e:	75 73                	jne    c0012af3 <VgaText::receiveKey(unsigned char)+0x9b>
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	56                   	push   esi
c0012a84:	e8 e7 da fe ff       	call   c0000570 <strlen>
c0012a89:	83 c4 10             	add    esp,0x10
c0012a8c:	85 c0                	test   eax,eax
c0012a8e:	0f 84 02 01 00 00    	je     c0012b96 <VgaText::receiveKey(unsigned char)+0x13e>
c0012a94:	50                   	push   eax
c0012a95:	50                   	push   eax
c0012a96:	6a 08                	push   0x8
c0012a98:	53                   	push   ebx
c0012a99:	e8 30 fb ff ff       	call   c00125ce <VgaText::putchar(char)>
c0012a9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa1:	e8 ca da fe ff       	call   c0000570 <strlen>
c0012aa6:	83 c4 10             	add    esp,0x10
c0012aa9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012ab1:	83 fa 0d             	cmp    edx,0xd
c0012ab4:	89 d0                	mov    eax,edx
c0012ab6:	0f 95 c1             	setne  cl
c0012ab9:	83 fa 1f             	cmp    edx,0x1f
c0012abc:	0f 9e c2             	setle  dl
c0012abf:	0f b6 d2             	movzx  edx,dl
c0012ac2:	85 ca                	test   edx,ecx
c0012ac4:	74 17                	je     c0012add <VgaText::receiveKey(unsigned char)+0x85>
c0012ac6:	83 e8 08             	sub    eax,0x8
c0012ac9:	3c 02                	cmp    al,0x2
c0012acb:	76 10                	jbe    c0012add <VgaText::receiveKey(unsigned char)+0x85>
c0012acd:	55                   	push   ebp
c0012ace:	55                   	push   ebp
c0012acf:	68 87 45 02 c0       	push   0xc0024587
c0012ad4:	53                   	push   ebx
c0012ad5:	e8 32 fc ff ff       	call   c001270c <VgaText::puts(char const*)>
c0012ada:	83 c4 10             	add    esp,0x10
c0012add:	83 ec 0c             	sub    esp,0xc
c0012ae0:	56                   	push   esi
c0012ae1:	e8 8a da fe ff       	call   c0000570 <strlen>
c0012ae6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012aee:	e9 a0 00 00 00       	jmp    c0012b93 <VgaText::receiveKey(unsigned char)+0x13b>
c0012af3:	83 ec 0c             	sub    esp,0xc
c0012af6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012afc:	50                   	push   eax
c0012afd:	e8 6e da fe ff       	call   c0000570 <strlen>
c0012b02:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b09:	e8 62 da fe ff       	call   c0000570 <strlen>
c0012b0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b12:	83 c4 10             	add    esp,0x10
c0012b15:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012b19:	3d 80 00 00 00       	cmp    eax,0x80
c0012b1e:	0f 87 b7 00 00 00    	ja     c0012bdb <VgaText::receiveKey(unsigned char)+0x183>
c0012b24:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012b27:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012b2a:	3c 1e                	cmp    al,0x1e
c0012b2c:	0f 96 c0             	setbe  al
c0012b2f:	80 fa 01             	cmp    dl,0x1
c0012b32:	0f 97 c2             	seta   dl
c0012b35:	0f b6 d2             	movzx  edx,dl
c0012b38:	85 c2                	test   edx,eax
c0012b3a:	74 2e                	je     c0012b6a <VgaText::receiveKey(unsigned char)+0x112>
c0012b3c:	83 ff 0d             	cmp    edi,0xd
c0012b3f:	74 29                	je     c0012b6a <VgaText::receiveKey(unsigned char)+0x112>
c0012b41:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b44:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b47:	68 8d 45 02 c0       	push   0xc002458d
c0012b4c:	53                   	push   ebx
c0012b4d:	e8 2c fc ff ff       	call   c001277e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012b52:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b55:	8d 45 40             	lea    eax,[ebp+0x40]
c0012b58:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b5b:	0f b6 c0             	movzx  eax,al
c0012b5e:	50                   	push   eax
c0012b5f:	53                   	push   ebx
c0012b60:	e8 99 f9 ff ff       	call   c00124fe <VgaText::putchar(char, VgaColour, VgaColour)>
c0012b65:	83 c4 20             	add    esp,0x20
c0012b68:	eb 11                	jmp    c0012b7b <VgaText::receiveKey(unsigned char)+0x123>
c0012b6a:	89 e8                	mov    eax,ebp
c0012b6c:	51                   	push   ecx
c0012b6d:	0f be c0             	movsx  eax,al
c0012b70:	51                   	push   ecx
c0012b71:	50                   	push   eax
c0012b72:	53                   	push   ebx
c0012b73:	e8 56 fa ff ff       	call   c00125ce <VgaText::putchar(char)>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012b80:	89 e8                	mov    eax,ebp
c0012b82:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012b86:	52                   	push   edx
c0012b87:	52                   	push   edx
c0012b88:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012b8c:	50                   	push   eax
c0012b8d:	56                   	push   esi
c0012b8e:	e8 ad dc fe ff       	call   c0000840 <strcat>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012b9c:	b0 01                	mov    al,0x1
c0012b9e:	83 ff 1c             	cmp    edi,0x1c
c0012ba1:	77 0e                	ja     c0012bb1 <VgaText::receiveKey(unsigned char)+0x159>
c0012ba3:	b8 08 04 00 10       	mov    eax,0x10000408
c0012ba8:	89 f9                	mov    ecx,edi
c0012baa:	d3 e8                	shr    eax,cl
c0012bac:	f7 d0                	not    eax
c0012bae:	83 e0 01             	and    eax,0x1
c0012bb1:	84 c0                	test   al,al
c0012bb3:	74 04                	je     c0012bb9 <VgaText::receiveKey(unsigned char)+0x161>
c0012bb5:	84 d2                	test   dl,dl
c0012bb7:	74 22                	je     c0012bdb <VgaText::receiveKey(unsigned char)+0x183>
c0012bb9:	81 c3 02 01 00 00    	add    ebx,0x102
c0012bbf:	50                   	push   eax
c0012bc0:	50                   	push   eax
c0012bc1:	56                   	push   esi
c0012bc2:	53                   	push   ebx
c0012bc3:	e8 78 dc fe ff       	call   c0000840 <strcat>
c0012bc8:	83 c4 0c             	add    esp,0xc
c0012bcb:	68 80 00 00 00       	push   0x80
c0012bd0:	6a 00                	push   0x0
c0012bd2:	56                   	push   esi
c0012bd3:	e8 18 d9 fe ff       	call   c00004f0 <memset>
c0012bd8:	83 c4 10             	add    esp,0x10
c0012bdb:	83 c4 2c             	add    esp,0x2c
c0012bde:	5b                   	pop    ebx
c0012bdf:	5e                   	pop    esi
c0012be0:	5f                   	pop    edi
c0012be1:	5d                   	pop    ebp
c0012be2:	c3                   	ret    
c0012be3:	90                   	nop

c0012be4 <VgaText::doUpdate()>:
c0012be4:	c3                   	ret    
c0012be5:	66 90                	xchg   ax,ax
c0012be7:	90                   	nop

c0012be8 <TSS::TSS()>:
c0012be8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012bf3:	90                   	nop
c0012bf4:	c3                   	ret    
c0012bf5:	90                   	nop
c0012bf6:	66 90                	xchg   ax,ax

c0012bf8 <TSS::setESP(unsigned long)>:
c0012bf8:	55                   	push   ebp
c0012bf9:	89 e5                	mov    ebp,esp
c0012bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c01:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c04:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c07:	90                   	nop
c0012c08:	5d                   	pop    ebp
c0012c09:	c3                   	ret    
c0012c0a:	66 90                	xchg   ax,ax

c0012c0c <TSS::flush()>:
c0012c0c:	55                   	push   ebp
c0012c0d:	89 e5                	mov    ebp,esp
c0012c0f:	83 ec 10             	sub    esp,0x10
c0012c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c17:	83 c8 03             	or     eax,0x3
c0012c1a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012c1e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012c22:	66 89 d0             	mov    ax,dx
c0012c25:	0f 00 d8             	ltr    ax
c0012c28:	90                   	nop
c0012c29:	c9                   	leave  
c0012c2a:	c3                   	ret    
c0012c2b:	90                   	nop

c0012c2c <TSS::setup(unsigned long, unsigned long)>:
c0012c2c:	55                   	push   ebp
c0012c2d:	89 e5                	mov    ebp,esp
c0012c2f:	83 ec 18             	sub    esp,0x18
c0012c32:	83 ec 0c             	sub    esp,0xc
c0012c35:	6a 68                	push   0x68
c0012c37:	e8 5b cc ff ff       	call   c000f897 <malloc>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	89 c2                	mov    edx,eax
c0012c41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c4d:	83 ec 08             	sub    esp,0x8
c0012c50:	50                   	push   eax
c0012c51:	68 b0 45 02 c0       	push   0xc00245b0
c0012c56:	e8 21 43 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c64:	83 ec 04             	sub    esp,0x4
c0012c67:	6a 68                	push   0x68
c0012c69:	6a 00                	push   0x0
c0012c6b:	50                   	push   eax
c0012c6c:	e8 7f d8 fe ff       	call   c00004f0 <memset>
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c7a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c86:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c92:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c95:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ca7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012caa:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cc2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ccb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cce:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cda:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012ce9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cf2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012cf5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cfe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012d05:	83 ec 0c             	sub    esp,0xc
c0012d08:	68 c7 45 02 c0       	push   0xc00245c7
c0012d0d:	e8 6a 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d12:	83 c4 10             	add    esp,0x10
c0012d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d1b:	0f 20 da             	mov    edx,cr3
c0012d1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012d21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012d24:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012d27:	83 ec 0c             	sub    esp,0xc
c0012d2a:	68 ca 45 02 c0       	push   0xc00245ca
c0012d2f:	e8 48 42 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d3d:	83 ec 08             	sub    esp,0x8
c0012d40:	50                   	push   eax
c0012d41:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d44:	50                   	push   eax
c0012d45:	e8 b2 bb ff ff       	call   c000e8fc <GDTEntry::setBase(unsigned int)>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	83 ec 08             	sub    esp,0x8
c0012d50:	6a 68                	push   0x68
c0012d52:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d55:	50                   	push   eax
c0012d56:	e8 bd bb ff ff       	call   c000e918 <GDTEntry::setLimit(unsigned int)>
c0012d5b:	83 c4 10             	add    esp,0x10
c0012d5e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012d62:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d65:	83 e0 0f             	and    eax,0xf
c0012d68:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d6b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012d6e:	83 c8 40             	or     eax,0x40
c0012d71:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012d74:	83 ec 0c             	sub    esp,0xc
c0012d77:	68 cd 45 02 c0       	push   0xc00245cd
c0012d7c:	e8 fb 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012d89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012d8f:	83 ec 08             	sub    esp,0x8
c0012d92:	50                   	push   eax
c0012d93:	68 d0 45 02 c0       	push   0xc00245d0
c0012d98:	e8 df 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012da5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012dab:	05 64 01 00 00       	add    eax,0x164
c0012db0:	83 ec 04             	sub    esp,0x4
c0012db3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012db6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012db9:	50                   	push   eax
c0012dba:	e8 8d bb ff ff       	call   c000e94c <GDT::addEntry(GDTEntry)>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	89 c2                	mov    edx,eax
c0012dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dc7:	89 10                	mov    DWORD PTR [eax],edx
c0012dc9:	83 ec 0c             	sub    esp,0xc
c0012dcc:	68 e5 45 02 c0       	push   0xc00245e5
c0012dd1:	e8 a6 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012dd6:	83 c4 10             	add    esp,0x10
c0012dd9:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0012dde:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012de4:	05 64 01 00 00       	add    eax,0x164
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	50                   	push   eax
c0012ded:	e8 84 bb ff ff       	call   c000e976 <GDT::flush()>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	83 ec 0c             	sub    esp,0xc
c0012df8:	68 e8 45 02 c0       	push   0xc00245e8
c0012dfd:	e8 7a 41 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0012e02:	83 c4 10             	add    esp,0x10
c0012e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e08:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e0a:	c9                   	leave  
c0012e0b:	c3                   	ret    

c0012e0c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e17:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e1c:	75 08                	jne    c0012e26 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012e1e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e24:	eb 38                	jmp    c0012e5e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012e26:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e2b:	75 17                	jne    c0012e44 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012e2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012e35:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012e3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e41:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012e44:	89 c1                	mov    ecx,eax
c0012e46:	83 e1 fd             	and    ecx,0xfffffffd
c0012e49:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012e4f:	74 cd                	je     c0012e1e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e51:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012e56:	83 e0 ef             	and    eax,0xffffffef
c0012e59:	83 f8 08             	cmp    eax,0x8
c0012e5c:	76 c0                	jbe    c0012e1e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012e5e:	31 c0                	xor    eax,eax
c0012e60:	c3                   	ret    
c0012e61:	90                   	nop

c0012e62 <ReservedFilename::isAtty()>:
c0012e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e66:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e69:	31 c0                	xor    eax,eax
c0012e6b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012e71:	74 09                	je     c0012e7c <ReservedFilename::isAtty()+0x1a>
c0012e73:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012e79:	0f 94 c0             	sete   al
c0012e7c:	c3                   	ret    
c0012e7d:	90                   	nop

c0012e7e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012e7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e92:	75 08                	jne    c0012e9c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012e94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e9a:	eb 3d                	jmp    c0012ed9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012e9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012ea1:	75 17                	jne    c0012eba <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012ea3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012eab:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012eb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012eb7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012eba:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012ebf:	75 04                	jne    c0012ec5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012ec1:	89 0a                	mov    DWORD PTR [edx],ecx
c0012ec3:	eb 14                	jmp    c0012ed9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012ec5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012eca:	74 c8                	je     c0012e94 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ecc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012ed1:	83 e0 ef             	and    eax,0xffffffef
c0012ed4:	83 f8 08             	cmp    eax,0x8
c0012ed7:	76 bb                	jbe    c0012e94 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012ed9:	31 c0                	xor    eax,eax
c0012edb:	c3                   	ret    

c0012edc <UnixFile::getFileDescriptor()>:
c0012edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ee3:	c3                   	ret    

c0012ee4 <UnixFile::UnixFile(int)>:
c0012ee4:	53                   	push   ebx
c0012ee5:	83 ec 28             	sub    esp,0x28
c0012ee8:	ba 14 46 02 c0       	mov    edx,0xc0024614
c0012eed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ef1:	89 10                	mov    DWORD PTR [eax],edx
c0012ef3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012efb:	0f 8f 90 01 00 00    	jg     c0013091 <UnixFile::UnixFile(int)+0x1ad>
c0012f01:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0012f06:	8d 50 01             	lea    edx,[eax+0x1]
c0012f09:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0012f0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f13:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012f16:	83 ec 08             	sub    esp,0x8
c0012f19:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f1d:	68 78 c2 02 c0       	push   0xc002c278
c0012f22:	e8 17 f2 00 00       	call   c002213e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	a0 74 c2 02 c0       	mov    al,ds:0xc002c274
c0012f2f:	83 f0 01             	xor    eax,0x1
c0012f32:	0f b6 c0             	movzx  eax,al
c0012f35:	85 c0                	test   eax,eax
c0012f37:	0f 84 55 01 00 00    	je     c0013092 <UnixFile::UnixFile(int)+0x1ae>
c0012f3d:	c6 05 74 c2 02 c0 01 	mov    BYTE PTR ds:0xc002c274,0x1
c0012f44:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012f4c:	83 ec 0c             	sub    esp,0xc
c0012f4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f53:	e8 3f c9 ff ff       	call   c000f897 <malloc>
c0012f58:	83 c4 10             	add    esp,0x10
c0012f5b:	89 c3                	mov    ebx,eax
c0012f5d:	83 ec 08             	sub    esp,0x8
c0012f60:	68 03 ff ff 0f       	push   0xfffff03
c0012f65:	53                   	push   ebx
c0012f66:	e8 2d 01 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	89 1d 6c c2 02 c0    	mov    DWORD PTR ds:0xc002c26c,ebx
c0012f74:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012f7c:	83 ec 0c             	sub    esp,0xc
c0012f7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f83:	e8 0f c9 ff ff       	call   c000f897 <malloc>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	89 c3                	mov    ebx,eax
c0012f8d:	83 ec 08             	sub    esp,0x8
c0012f90:	68 01 ff ff 0f       	push   0xfffff01
c0012f95:	53                   	push   ebx
c0012f96:	e8 fd 00 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	89 1d 70 c2 02 c0    	mov    DWORD PTR ds:0xc002c270,ebx
c0012fa4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012fac:	83 ec 0c             	sub    esp,0xc
c0012faf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fb3:	e8 df c8 ff ff       	call   c000f897 <malloc>
c0012fb8:	83 c4 10             	add    esp,0x10
c0012fbb:	89 c3                	mov    ebx,eax
c0012fbd:	83 ec 08             	sub    esp,0x8
c0012fc0:	68 00 ff ff 0f       	push   0xfffff00
c0012fc5:	53                   	push   ebx
c0012fc6:	e8 cd 00 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c0012fcb:	83 c4 10             	add    esp,0x10
c0012fce:	89 1d 64 c2 02 c0    	mov    DWORD PTR ds:0xc002c264,ebx
c0012fd4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012fdc:	83 ec 0c             	sub    esp,0xc
c0012fdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012fe3:	e8 af c8 ff ff       	call   c000f897 <malloc>
c0012fe8:	83 c4 10             	add    esp,0x10
c0012feb:	89 c3                	mov    ebx,eax
c0012fed:	83 ec 08             	sub    esp,0x8
c0012ff0:	68 02 ff ff 0f       	push   0xfffff02
c0012ff5:	53                   	push   ebx
c0012ff6:	e8 9d 00 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	89 1d 68 c2 02 c0    	mov    DWORD PTR ds:0xc002c268,ebx
c0013004:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001300c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013011:	7f 7f                	jg     c0013092 <UnixFile::UnixFile(int)+0x1ae>
c0013013:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001301b:	83 ec 0c             	sub    esp,0xc
c001301e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013022:	e8 70 c8 ff ff       	call   c000f897 <malloc>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	89 c3                	mov    ebx,eax
c001302c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013030:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013035:	83 ec 08             	sub    esp,0x8
c0013038:	50                   	push   eax
c0013039:	53                   	push   ebx
c001303a:	e8 59 00 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013046:	89 1c 85 40 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3dc0],ebx
c001304d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0013055:	83 ec 0c             	sub    esp,0xc
c0013058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001305c:	e8 36 c8 ff ff       	call   c000f897 <malloc>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	89 c3                	mov    ebx,eax
c0013066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001306a:	05 20 ff ff 0f       	add    eax,0xfffff20
c001306f:	83 ec 08             	sub    esp,0x8
c0013072:	50                   	push   eax
c0013073:	53                   	push   ebx
c0013074:	e8 1f 00 00 00       	call   c0013098 <ReservedFilename::ReservedFilename(int)>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013080:	89 1c 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],ebx
c0013087:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001308c:	e9 7b ff ff ff       	jmp    c001300c <UnixFile::UnixFile(int)+0x128>
c0013091:	90                   	nop
c0013092:	83 c4 28             	add    esp,0x28
c0013095:	5b                   	pop    ebx
c0013096:	c3                   	ret    
c0013097:	90                   	nop

c0013098 <ReservedFilename::ReservedFilename(int)>:
c0013098:	83 ec 0c             	sub    esp,0xc
c001309b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309f:	83 ec 08             	sub    esp,0x8
c00130a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a6:	50                   	push   eax
c00130a7:	e8 38 fe ff ff       	call   c0012ee4 <UnixFile::UnixFile(int)>
c00130ac:	83 c4 10             	add    esp,0x10
c00130af:	ba 30 46 02 c0       	mov    edx,0xc0024630
c00130b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b8:	89 10                	mov    DWORD PTR [eax],edx
c00130ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00130c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130c5:	90                   	nop
c00130c6:	83 c4 0c             	add    esp,0xc
c00130c9:	c3                   	ret    

c00130ca <UnixFile::~UnixFile()>:
c00130ca:	83 ec 1c             	sub    esp,0x1c
c00130cd:	ba 14 46 02 c0       	mov    edx,0xc0024614
c00130d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130d6:	89 10                	mov    DWORD PTR [eax],edx
c00130d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130df:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00130e4:	7f 76                	jg     c001315c <UnixFile::~UnixFile()+0x92>
c00130e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130ee:	83 ec 0c             	sub    esp,0xc
c00130f1:	68 78 c2 02 c0       	push   0xc002c278
c00130f6:	e8 17 f1 00 00       	call   c0022212 <LinkedList<UnixFile>::getFirstElement()>
c00130fb:	83 c4 10             	add    esp,0x10
c00130fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013102:	83 ec 0c             	sub    esp,0xc
c0013105:	68 78 c2 02 c0       	push   0xc002c278
c001310a:	e8 0b f1 00 00       	call   c002221a <LinkedList<UnixFile>::removeFirst()>
c001310f:	83 c4 10             	add    esp,0x10
c0013112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013116:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001311a:	74 43                	je     c001315f <UnixFile::~UnixFile()+0x95>
c001311c:	83 ec 08             	sub    esp,0x8
c001311f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013123:	68 78 c2 02 c0       	push   0xc002c278
c0013128:	e8 11 f0 00 00       	call   c002213e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001312d:	83 c4 10             	add    esp,0x10
c0013130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013134:	8d 50 01             	lea    edx,[eax+0x1]
c0013137:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001313b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013140:	0f 94 c0             	sete   al
c0013143:	0f b6 c0             	movzx  eax,al
c0013146:	85 c0                	test   eax,eax
c0013148:	74 a4                	je     c00130ee <UnixFile::~UnixFile()+0x24>
c001314a:	83 ec 0c             	sub    esp,0xc
c001314d:	68 ec 45 02 c0       	push   0xc00245ec
c0013152:	e8 9d cb ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013157:	83 c4 10             	add    esp,0x10
c001315a:	eb 92                	jmp    c00130ee <UnixFile::~UnixFile()+0x24>
c001315c:	90                   	nop
c001315d:	eb 01                	jmp    c0013160 <UnixFile::~UnixFile()+0x96>
c001315f:	90                   	nop
c0013160:	90                   	nop
c0013161:	83 c4 1c             	add    esp,0x1c
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <UnixFile::~UnixFile()>:
c0013166:	83 ec 0c             	sub    esp,0xc
c0013169:	83 ec 0c             	sub    esp,0xc
c001316c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013170:	e8 55 ff ff ff       	call   c00130ca <UnixFile::~UnixFile()>
c0013175:	83 c4 10             	add    esp,0x10
c0013178:	83 ec 08             	sub    esp,0x8
c001317b:	6a 0c                	push   0xc
c001317d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013181:	e8 2a a2 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	83 c4 0c             	add    esp,0xc
c001318c:	c3                   	ret    
c001318d:	90                   	nop

c001318e <ReservedFilename::~ReservedFilename()>:
c001318e:	83 ec 0c             	sub    esp,0xc
c0013191:	ba 30 46 02 c0       	mov    edx,0xc0024630
c0013196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001319a:	89 10                	mov    DWORD PTR [eax],edx
c001319c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	50                   	push   eax
c00131a4:	e8 21 ff ff ff       	call   c00130ca <UnixFile::~UnixFile()>
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	90                   	nop
c00131ad:	83 c4 0c             	add    esp,0xc
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <ReservedFilename::~ReservedFilename()>:
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131bc:	e8 cd ff ff ff       	call   c001318e <ReservedFilename::~ReservedFilename()>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	83 ec 08             	sub    esp,0x8
c00131c7:	6a 0c                	push   0xc
c00131c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cd:	e8 de a1 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	83 c4 0c             	add    esp,0xc
c00131d8:	c3                   	ret    

c00131d9 <KeGetFileFromDescriptor(int)>:
c00131d9:	53                   	push   ebx
c00131da:	83 ec 08             	sub    esp,0x8
c00131dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00131e1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00131e7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00131ed:	7f 30                	jg     c001321f <KeGetFileFromDescriptor(int)+0x46>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	68 78 c2 02 c0       	push   0xc002c278
c00131f7:	e8 16 f0 00 00       	call   c0022212 <LinkedList<UnixFile>::getFirstElement()>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	8d 50 ff             	lea    edx,[eax-0x1]
c0013202:	83 fa fd             	cmp    edx,0xfffffffd
c0013205:	76 04                	jbe    c001320b <KeGetFileFromDescriptor(int)+0x32>
c0013207:	31 c0                	xor    eax,eax
c0013209:	eb 6e                	jmp    c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c001320b:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001320e:	74 69                	je     c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c0013210:	52                   	push   edx
c0013211:	52                   	push   edx
c0013212:	50                   	push   eax
c0013213:	68 78 c2 02 c0       	push   0xc002c278
c0013218:	e8 9f f0 00 00       	call   c00222bc <LinkedList<UnixFile>::getNext(UnixFile*)>
c001321d:	eb dd                	jmp    c00131fc <KeGetFileFromDescriptor(int)+0x23>
c001321f:	a1 6c c2 02 c0       	mov    eax,ds:0xc002c26c
c0013224:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001322a:	74 4d                	je     c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c001322c:	a1 70 c2 02 c0       	mov    eax,ds:0xc002c270
c0013231:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013237:	74 40                	je     c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c0013239:	a1 68 c2 02 c0       	mov    eax,ds:0xc002c268
c001323e:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0013244:	74 33                	je     c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c0013246:	a1 64 c2 02 c0       	mov    eax,ds:0xc002c264
c001324b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013251:	74 26                	je     c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c0013253:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0013259:	83 f8 08             	cmp    eax,0x8
c001325c:	77 09                	ja     c0013267 <KeGetFileFromDescriptor(int)+0x8e>
c001325e:	8b 04 85 40 c2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3dc0]
c0013265:	eb 12                	jmp    c0013279 <KeGetFileFromDescriptor(int)+0xa0>
c0013267:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001326d:	83 fb 08             	cmp    ebx,0x8
c0013270:	77 95                	ja     c0013207 <KeGetFileFromDescriptor(int)+0x2e>
c0013272:	8b 04 9d 00 c2 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3e00]
c0013279:	83 c4 08             	add    esp,0x8
c001327c:	5b                   	pop    ebx
c001327d:	c3                   	ret    

c001327e <__static_initialization_and_destruction_0(int, int)>:
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013286:	75 34                	jne    c00132bc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013288:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013290:	75 2a                	jne    c00132bc <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013292:	83 ec 0c             	sub    esp,0xc
c0013295:	68 78 c2 02 c0       	push   0xc002c278
c001329a:	e8 5d ee 00 00       	call   c00220fc <LinkedList<UnixFile>::LinkedList()>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	83 ec 04             	sub    esp,0x4
c00132a5:	68 f0 61 02 c0       	push   0xc00261f0
c00132aa:	68 78 c2 02 c0       	push   0xc002c278
c00132af:	68 fa 20 02 c0       	push   0xc00220fa
c00132b4:	e8 a7 a0 ff ff       	call   c000d360 <__cxa_atexit>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	90                   	nop
c00132bd:	83 c4 0c             	add    esp,0xc
c00132c0:	c3                   	ret    

c00132c1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00132c1:	83 ec 0c             	sub    esp,0xc
c00132c4:	83 ec 08             	sub    esp,0x8
c00132c7:	68 ff ff 00 00       	push   0xffff
c00132cc:	6a 01                	push   0x1
c00132ce:	e8 ab ff ff ff       	call   c001327e <__static_initialization_and_destruction_0(int, int)>
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	83 c4 0c             	add    esp,0xc
c00132d9:	c3                   	ret    

c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00132da:	53                   	push   ebx
c00132db:	8b 15 a8 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269a8
c00132e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00132e9:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00132ef:	89 d8                	mov    eax,ebx
c00132f1:	d1 e8                	shr    eax,1
c00132f3:	01 d0                	add    eax,edx
c00132f5:	80 e3 01             	and    bl,0x1
c00132f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00132fa:	75 09                	jne    c0013305 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00132fc:	83 e2 f0             	and    edx,0xfffffff0
c00132ff:	09 ca                	or     edx,ecx
c0013301:	88 10                	mov    BYTE PTR [eax],dl
c0013303:	5b                   	pop    ebx
c0013304:	c3                   	ret    
c0013305:	83 e2 0f             	and    edx,0xf
c0013308:	0f b6 c9             	movzx  ecx,cl
c001330b:	c1 e1 04             	shl    ecx,0x4
c001330e:	09 ca                	or     edx,ecx
c0013310:	88 10                	mov    BYTE PTR [eax],dl
c0013312:	5b                   	pop    ebx
c0013313:	c3                   	ret    

c0013314 <Virt::getPageState(unsigned long)>:
c0013314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013318:	8b 0d a8 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269a8
c001331e:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013324:	89 d0                	mov    eax,edx
c0013326:	d1 e8                	shr    eax,1
c0013328:	80 e2 01             	and    dl,0x1
c001332b:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001332e:	74 03                	je     c0013333 <Virt::getPageState(unsigned long)+0x1f>
c0013330:	c1 e8 04             	shr    eax,0x4
c0013333:	83 e0 0f             	and    eax,0xf
c0013336:	c3                   	ret    

c0013337 <Virt::allocateKernelVirtualPages(int)>:
c0013337:	55                   	push   ebp
c0013338:	31 ed                	xor    ebp,ebp
c001333a:	57                   	push   edi
c001333b:	31 ff                	xor    edi,edi
c001333d:	56                   	push   esi
c001333e:	53                   	push   ebx
c001333f:	31 db                	xor    ebx,ebx
c0013341:	83 ec 0c             	sub    esp,0xc
c0013344:	8b 35 a4 69 02 c0    	mov    esi,DWORD PTR ds:0xc00269a4
c001334a:	56                   	push   esi
c001334b:	e8 c4 ff ff ff       	call   c0013314 <Virt::getPageState(unsigned long)>
c0013350:	5a                   	pop    edx
c0013351:	84 c0                	test   al,al
c0013353:	75 41                	jne    c0013396 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0013355:	85 db                	test   ebx,ebx
c0013357:	75 02                	jne    c001335b <Virt::allocateKernelVirtualPages(int)+0x24>
c0013359:	89 f5                	mov    ebp,esi
c001335b:	83 c3 01             	add    ebx,0x1
c001335e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013362:	74 5f                	je     c00133c3 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0013364:	83 c6 01             	add    esi,0x1
c0013367:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001336d:	76 34                	jbe    c00133a3 <Virt::allocateKernelVirtualPages(int)+0x6c>
c001336f:	c7 05 a4 69 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00269a4,0xc8000
c0013379:	f7 c7 01 00 00 00    	test   edi,0x1
c001337f:	75 2a                	jne    c00133ab <Virt::allocateKernelVirtualPages(int)+0x74>
c0013381:	be 00 80 0c 00       	mov    esi,0xc8000
c0013386:	bf 01 00 00 00       	mov    edi,0x1
c001338b:	56                   	push   esi
c001338c:	e8 83 ff ff ff       	call   c0013314 <Virt::getPageState(unsigned long)>
c0013391:	5a                   	pop    edx
c0013392:	84 c0                	test   al,al
c0013394:	74 bf                	je     c0013355 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0013396:	31 db                	xor    ebx,ebx
c0013398:	83 c6 01             	add    esi,0x1
c001339b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00133a1:	77 cc                	ja     c001336f <Virt::allocateKernelVirtualPages(int)+0x38>
c00133a3:	89 35 a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,esi
c00133a9:	eb 9f                	jmp    c001334a <Virt::allocateKernelVirtualPages(int)+0x13>
c00133ab:	83 ec 0c             	sub    esp,0xc
c00133ae:	68 44 46 02 c0       	push   0xc0024644
c00133b3:	e8 3c c9 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00133b8:	8b 35 a4 69 02 c0    	mov    esi,DWORD PTR ds:0xc00269a4
c00133be:	83 c4 10             	add    esp,0x10
c00133c1:	eb 87                	jmp    c001334a <Virt::allocateKernelVirtualPages(int)+0x13>
c00133c3:	89 2d a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,ebp
c00133c9:	83 fb 01             	cmp    ebx,0x1
c00133cc:	74 6f                	je     c001343d <Virt::allocateKernelVirtualPages(int)+0x106>
c00133ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133d2:	85 c9                	test   ecx,ecx
c00133d4:	74 49                	je     c001341f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00133d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133da:	89 e8                	mov    eax,ebp
c00133dc:	31 db                	xor    ebx,ebx
c00133de:	8d 79 ff             	lea    edi,[ecx-0x1]
c00133e1:	eb 18                	jmp    c00133fb <Virt::allocateKernelVirtualPages(int)+0xc4>
c00133e3:	6a 01                	push   0x1
c00133e5:	83 c3 01             	add    ebx,0x1
c00133e8:	50                   	push   eax
c00133e9:	e8 ec fe ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00133ee:	58                   	pop    eax
c00133ef:	5a                   	pop    edx
c00133f0:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00133f4:	74 29                	je     c001341f <Virt::allocateKernelVirtualPages(int)+0xe8>
c00133f6:	a1 a4 69 02 c0       	mov    eax,ds:0xc00269a4
c00133fb:	8d 50 01             	lea    edx,[eax+0x1]
c00133fe:	85 db                	test   ebx,ebx
c0013400:	89 15 a4 69 02 c0    	mov    DWORD PTR ds:0xc00269a4,edx
c0013406:	74 24                	je     c001342c <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013408:	39 df                	cmp    edi,ebx
c001340a:	75 d7                	jne    c00133e3 <Virt::allocateKernelVirtualPages(int)+0xac>
c001340c:	6a 03                	push   0x3
c001340e:	83 c3 01             	add    ebx,0x1
c0013411:	50                   	push   eax
c0013412:	e8 c3 fe ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013417:	59                   	pop    ecx
c0013418:	5e                   	pop    esi
c0013419:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001341d:	75 d7                	jne    c00133f6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001341f:	83 c4 0c             	add    esp,0xc
c0013422:	89 e8                	mov    eax,ebp
c0013424:	5b                   	pop    ebx
c0013425:	c1 e0 0c             	shl    eax,0xc
c0013428:	5e                   	pop    esi
c0013429:	5f                   	pop    edi
c001342a:	5d                   	pop    ebp
c001342b:	c3                   	ret    
c001342c:	6a 02                	push   0x2
c001342e:	bb 01 00 00 00       	mov    ebx,0x1
c0013433:	50                   	push   eax
c0013434:	e8 a1 fe ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013439:	58                   	pop    eax
c001343a:	5a                   	pop    edx
c001343b:	eb b9                	jmp    c00133f6 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001343d:	6a 04                	push   0x4
c001343f:	8d 45 01             	lea    eax,[ebp+0x1]
c0013442:	55                   	push   ebp
c0013443:	a3 a4 69 02 c0       	mov    ds:0xc00269a4,eax
c0013448:	e8 8d fe ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001344d:	5b                   	pop    ebx
c001344e:	89 e8                	mov    eax,ebp
c0013450:	5e                   	pop    esi
c0013451:	c1 e0 0c             	shl    eax,0xc
c0013454:	83 c4 0c             	add    esp,0xc
c0013457:	5b                   	pop    ebx
c0013458:	5e                   	pop    esi
c0013459:	5f                   	pop    edi
c001345a:	5d                   	pop    ebp
c001345b:	c3                   	ret    

c001345c <Virt::freeSwapfilePage(unsigned long)>:
c001345c:	53                   	push   ebx
c001345d:	8b 15 8c c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c28c
c0013463:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013467:	b8 01 00 00 00       	mov    eax,0x1
c001346c:	89 cb                	mov    ebx,ecx
c001346e:	d3 e0                	shl    eax,cl
c0013470:	c1 eb 05             	shr    ebx,0x5
c0013473:	f7 d0                	not    eax
c0013475:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013478:	21 c1                	and    ecx,eax
c001347a:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001347d:	5b                   	pop    ebx
c001347e:	c3                   	ret    

c001347f <Virt::swapIDToSector(unsigned long)>:
c001347f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013483:	8b 15 ac 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269ac
c0013489:	8b 0d b4 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269b4
c001348f:	0f af c2             	imul   eax,edx
c0013492:	01 c8                	add    eax,ecx
c0013494:	c3                   	ret    

c0013495 <Virt::allocateSwapfilePage()>:
c0013495:	55                   	push   ebp
c0013496:	31 d2                	xor    edx,edx
c0013498:	57                   	push   edi
c0013499:	56                   	push   esi
c001349a:	53                   	push   ebx
c001349b:	83 ec 0c             	sub    esp,0xc
c001349e:	8b 0d ac 69 02 c0    	mov    ecx,DWORD PTR ds:0xc00269ac
c00134a4:	a1 b0 69 02 c0       	mov    eax,ds:0xc00269b0
c00134a9:	f7 f1                	div    ecx
c00134ab:	39 0d b0 69 02 c0    	cmp    DWORD PTR ds:0xc00269b0,ecx
c00134b1:	72 2f                	jb     c00134e2 <Virt::allocateSwapfilePage()+0x4d>
c00134b3:	8b 35 8c c2 02 c0    	mov    esi,DWORD PTR ds:0xc002c28c
c00134b9:	8b 16                	mov    edx,DWORD PTR [esi]
c00134bb:	f6 c2 01             	test   dl,0x1
c00134be:	74 3e                	je     c00134fe <Virt::allocateSwapfilePage()+0x69>
c00134c0:	31 c9                	xor    ecx,ecx
c00134c2:	bf 01 00 00 00       	mov    edi,0x1
c00134c7:	eb 12                	jmp    c00134db <Virt::allocateSwapfilePage()+0x46>
c00134c9:	89 fd                	mov    ebp,edi
c00134cb:	89 ca                	mov    edx,ecx
c00134cd:	d3 e5                	shl    ebp,cl
c00134cf:	c1 ea 05             	shr    edx,0x5
c00134d2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00134d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00134d7:	85 ea                	test   edx,ebp
c00134d9:	74 2c                	je     c0013507 <Virt::allocateSwapfilePage()+0x72>
c00134db:	83 c1 01             	add    ecx,0x1
c00134de:	39 c8                	cmp    eax,ecx
c00134e0:	77 e7                	ja     c00134c9 <Virt::allocateSwapfilePage()+0x34>
c00134e2:	83 ec 0c             	sub    esp,0xc
c00134e5:	68 57 49 02 c0       	push   0xc0024957
c00134ea:	e8 05 c8 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	31 c9                	xor    ecx,ecx
c00134f4:	83 c4 0c             	add    esp,0xc
c00134f7:	89 c8                	mov    eax,ecx
c00134f9:	5b                   	pop    ebx
c00134fa:	5e                   	pop    esi
c00134fb:	5f                   	pop    edi
c00134fc:	5d                   	pop    ebp
c00134fd:	c3                   	ret    
c00134fe:	89 f3                	mov    ebx,esi
c0013500:	bd 01 00 00 00       	mov    ebp,0x1
c0013505:	31 c9                	xor    ecx,ecx
c0013507:	09 ea                	or     edx,ebp
c0013509:	89 c8                	mov    eax,ecx
c001350b:	89 13                	mov    DWORD PTR [ebx],edx
c001350d:	83 c4 0c             	add    esp,0xc
c0013510:	5b                   	pop    ebx
c0013511:	5e                   	pop    esi
c0013512:	5f                   	pop    edi
c0013513:	5d                   	pop    ebp
c0013514:	c3                   	ret    

c0013515 <Virt::virtualMemorySetup()>:
c0013515:	53                   	push   ebx
c0013516:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001351b:	6a 0f                	push   0xf
c001351d:	53                   	push   ebx
c001351e:	83 c3 01             	add    ebx,0x1
c0013521:	e8 b4 fd ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013526:	58                   	pop    eax
c0013527:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001352d:	5a                   	pop    edx
c001352e:	75 eb                	jne    c001351b <Virt::virtualMemorySetup()+0x6>
c0013530:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013535:	6a 00                	push   0x0
c0013537:	53                   	push   ebx
c0013538:	83 c3 01             	add    ebx,0x1
c001353b:	e8 9a fd ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013540:	59                   	pop    ecx
c0013541:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013547:	58                   	pop    eax
c0013548:	75 eb                	jne    c0013535 <Virt::virtualMemorySetup()+0x20>
c001354a:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001354f:	6a 0f                	push   0xf
c0013551:	53                   	push   ebx
c0013552:	83 c3 01             	add    ebx,0x1
c0013555:	e8 80 fd ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001355a:	58                   	pop    eax
c001355b:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013561:	5a                   	pop    edx
c0013562:	75 eb                	jne    c001354f <Virt::virtualMemorySetup()+0x3a>
c0013564:	5b                   	pop    ebx
c0013565:	c3                   	ret    

c0013566 <Virt::setupPageSwapping(int)>:
c0013566:	53                   	push   ebx
c0013567:	83 ec 0c             	sub    esp,0xc
c001356a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001356e:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013573:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013579:	8b 10                	mov    edx,DWORD PTR [eax]
c001357b:	53                   	push   ebx
c001357c:	c1 e3 0b             	shl    ebx,0xb
c001357f:	68 6e 49 02 c0       	push   0xc002496e
c0013584:	50                   	push   eax
c0013585:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0013588:	89 1d b0 69 02 c0    	mov    DWORD PTR ds:0xc00269b0,ebx
c001358e:	c6 05 b8 69 02 c0 43 	mov    BYTE PTR ds:0xc00269b8,0x43
c0013595:	c1 eb 08             	shr    ebx,0x8
c0013598:	a3 b4 69 02 c0       	mov    ds:0xc00269b4,eax
c001359d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135a0:	c7 05 ac 69 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00269ac,0x8
c00135aa:	e8 e8 c2 ff ff       	call   c000f897 <malloc>
c00135af:	83 c4 0c             	add    esp,0xc
c00135b2:	89 c1                	mov    ecx,eax
c00135b4:	a3 8c c2 02 c0       	mov    ds:0xc002c28c,eax
c00135b9:	31 d2                	xor    edx,edx
c00135bb:	a1 b0 69 02 c0       	mov    eax,ds:0xc00269b0
c00135c0:	f7 35 ac 69 02 c0    	div    DWORD PTR ds:0xc00269ac
c00135c6:	c1 e8 05             	shr    eax,0x5
c00135c9:	50                   	push   eax
c00135ca:	6a 00                	push   0x0
c00135cc:	51                   	push   ecx
c00135cd:	e8 1e cf fe ff       	call   c00004f0 <memset>
c00135d2:	83 c4 18             	add    esp,0x18
c00135d5:	5b                   	pop    ebx
c00135d6:	c3                   	ret    
c00135d7:	90                   	nop

c00135d8 <VAS::setCPUSpecific(unsigned long)>:
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <VAS::VAS(VAS*)>:
c00135da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00135e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00135f0:	90                   	nop
c00135f1:	c3                   	ret    

c00135f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00135f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f6:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00135fb:	89 c2                	mov    edx,eax
c00135fd:	c1 e8 0a             	shr    eax,0xa
c0013600:	c1 ea 16             	shr    edx,0x16
c0013603:	83 f9 01             	cmp    ecx,0x1
c0013606:	19 c9                	sbb    ecx,ecx
c0013608:	c1 e2 0c             	shl    edx,0xc
c001360b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0013611:	25 fc 0f 00 00       	and    eax,0xffc
c0013616:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001361d:	01 d0                	add    eax,edx
c001361f:	c3                   	ret    

c0013620 <VAS::getPageTableEntry(unsigned long)>:
c0013620:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013624:	89 ca                	mov    edx,ecx
c0013626:	c1 e9 0a             	shr    ecx,0xa
c0013629:	c1 ea 16             	shr    edx,0x16
c001362c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013632:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013638:	c1 e0 0c             	shl    eax,0xc
c001363b:	8d 04 08             	lea    eax,[eax+ecx*1]
c001363e:	c3                   	ret    

c001363f <Virt::freeKernelVirtualPages(unsigned long)>:
c001363f:	55                   	push   ebp
c0013640:	57                   	push   edi
c0013641:	bf 01 00 00 00       	mov    edi,0x1
c0013646:	56                   	push   esi
c0013647:	53                   	push   ebx
c0013648:	83 ec 1c             	sub    esp,0x1c
c001364b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001364f:	c1 ee 0c             	shr    esi,0xc
c0013652:	eb 48                	jmp    c001369c <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0013654:	83 ec 08             	sub    esp,0x8
c0013657:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001365c:	55                   	push   ebp
c001365d:	50                   	push   eax
c001365e:	e8 bd ff ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	8b 10                	mov    edx,DWORD PTR [eax]
c0013668:	f6 c6 04             	test   dh,0x4
c001366b:	75 70                	jne    c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001366d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013673:	83 fb 04             	cmp    ebx,0x4
c0013676:	0f 84 8a 00 00 00    	je     c0013706 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001367c:	83 fb 02             	cmp    ebx,0x2
c001367f:	0f 84 9a 00 00 00    	je     c001371f <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0013685:	83 fb 03             	cmp    ebx,0x3
c0013688:	0f 84 be 00 00 00    	je     c001374c <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c001368e:	83 fb 01             	cmp    ebx,0x1
c0013691:	0f 84 a2 00 00 00    	je     c0013739 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013697:	83 c6 01             	add    esi,0x1
c001369a:	31 ff                	xor    edi,edi
c001369c:	56                   	push   esi
c001369d:	89 f5                	mov    ebp,esi
c001369f:	e8 70 fc ff ff       	call   c0013314 <Virt::getPageState(unsigned long)>
c00136a4:	c1 e5 0c             	shl    ebp,0xc
c00136a7:	0f b6 d8             	movzx  ebx,al
c00136aa:	5a                   	pop    edx
c00136ab:	85 db                	test   ebx,ebx
c00136ad:	75 a5                	jne    c0013654 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	68 85 49 02 c0       	push   0xc0024985
c00136b7:	e8 38 c6 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00136bc:	5a                   	pop    edx
c00136bd:	59                   	pop    ecx
c00136be:	55                   	push   ebp
c00136bf:	8b 2d 90 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c290
c00136c5:	55                   	push   ebp
c00136c6:	e8 55 ff ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00136d0:	f6 c6 04             	test   dh,0x4
c00136d3:	75 08                	jne    c00136dd <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00136d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136db:	eb ba                	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00136dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00136e7:	83 ec 0c             	sub    esp,0xc
c00136ea:	52                   	push   edx
c00136eb:	e8 8f c7 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00136f0:	83 c4 10             	add    esp,0x10
c00136f3:	83 fb 04             	cmp    ebx,0x4
c00136f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013700:	0f 85 76 ff ff ff    	jne    c001367c <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013706:	83 e7 01             	and    edi,0x1
c0013709:	75 46                	jne    c0013751 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001370b:	c7 44 24 30 64 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024664
c0013713:	83 c4 1c             	add    esp,0x1c
c0013716:	5b                   	pop    ebx
c0013717:	5e                   	pop    esi
c0013718:	5f                   	pop    edi
c0013719:	5d                   	pop    ebp
c001371a:	e9 d5 c5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001371f:	83 e7 01             	and    edi,0x1
c0013722:	75 15                	jne    c0013739 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	68 a1 49 02 c0       	push   0xc00249a1
c001372c:	e8 c3 c5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013731:	83 c4 10             	add    esp,0x10
c0013734:	e9 5e ff ff ff       	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013739:	83 ec 08             	sub    esp,0x8
c001373c:	6a 00                	push   0x0
c001373e:	56                   	push   esi
c001373f:	e8 96 fb ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013744:	83 c4 10             	add    esp,0x10
c0013747:	e9 4b ff ff ff       	jmp    c0013697 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001374c:	83 e7 01             	and    edi,0x1
c001374f:	75 16                	jne    c0013767 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013751:	83 ec 08             	sub    esp,0x8
c0013754:	6a 00                	push   0x0
c0013756:	56                   	push   esi
c0013757:	e8 7e fb ff ff       	call   c00132da <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	83 c4 1c             	add    esp,0x1c
c0013762:	5b                   	pop    ebx
c0013763:	5e                   	pop    esi
c0013764:	5f                   	pop    edi
c0013765:	5d                   	pop    ebp
c0013766:	c3                   	ret    
c0013767:	c7 44 24 30 bd 49 02 c0 	mov    DWORD PTR [esp+0x30],0xc00249bd
c001376f:	83 c4 1c             	add    esp,0x1c
c0013772:	5b                   	pop    ebx
c0013773:	5e                   	pop    esi
c0013774:	5f                   	pop    edi
c0013775:	5d                   	pop    ebp
c0013776:	e9 79 c5 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001377b:	90                   	nop

c001377c <VAS::freeAllocatedPages(unsigned long)>:
c001377c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013784:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013788:	74 09                	je     c0013793 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001378a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001378e:	e9 ac fe ff ff       	jmp    c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013793:	c7 44 24 04 88 46 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024688
c001379b:	e9 dc 37 ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c00137a0 <VAS::virtualToPhysical(unsigned long)>:
c00137a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a4:	50                   	push   eax
c00137a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137a9:	52                   	push   edx
c00137aa:	e8 71 fe ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00137af:	59                   	pop    ecx
c00137b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00137b2:	5a                   	pop    edx
c00137b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00137b8:	c3                   	ret    
c00137b9:	90                   	nop

c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00137ba:	55                   	push   ebp
c00137bb:	57                   	push   edi
c00137bc:	56                   	push   esi
c00137bd:	53                   	push   ebx
c00137be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137c2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00137c6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00137ce:	85 db                	test   ebx,ebx
c00137d0:	7e 24                	jle    c00137f6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00137d2:	c1 e3 0c             	shl    ebx,0xc
c00137d5:	01 f3                	add    ebx,esi
c00137d7:	56                   	push   esi
c00137d8:	81 c6 00 10 00 00    	add    esi,0x1000
c00137de:	55                   	push   ebp
c00137df:	e8 3c fe ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c00137e4:	5a                   	pop    edx
c00137e5:	59                   	pop    ecx
c00137e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137ec:	21 f9                	and    ecx,edi
c00137ee:	09 d1                	or     ecx,edx
c00137f0:	39 f3                	cmp    ebx,esi
c00137f2:	89 08                	mov    DWORD PTR [eax],ecx
c00137f4:	75 e1                	jne    c00137d7 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00137f6:	5b                   	pop    ebx
c00137f7:	5e                   	pop    esi
c00137f8:	5f                   	pop    edi
c00137f9:	5d                   	pop    ebp
c00137fa:	c3                   	ret    
c00137fb:	90                   	nop

c00137fc <VAS::VAS()>:
c00137fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013800:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001380b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013816:	a3 90 c2 02 c0       	mov    ds:0xc002c290,eax
c001381b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001381f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013827:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001382a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001382e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013835:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c001383a:	b8 00 70 02 c0       	mov    eax,0xc0027000
c001383f:	29 c2                	sub    edx,eax
c0013841:	89 d0                	mov    eax,edx
c0013843:	05 ff 0f 00 00       	add    eax,0xfff
c0013848:	c1 e8 0c             	shr    eax,0xc
c001384b:	89 c2                	mov    edx,eax
c001384d:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013852:	6a 04                	push   0x4
c0013854:	6a ff                	push   0xffffffff
c0013856:	52                   	push   edx
c0013857:	50                   	push   eax
c0013858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001385c:	e8 59 ff ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013861:	83 c4 14             	add    esp,0x14
c0013864:	90                   	nop
c0013865:	c3                   	ret    

c0013866 <VAS::setToWriteCombining(unsigned long, int)>:
c0013866:	a1 64 cb 02 c0       	mov    eax,ds:0xc002cb64
c001386b:	50                   	push   eax
c001386c:	6a ff                	push   0xffffffff
c001386e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013872:	52                   	push   edx
c0013873:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013877:	51                   	push   ecx
c0013878:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001387c:	50                   	push   eax
c001387d:	e8 38 ff ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013882:	83 c4 14             	add    esp,0x14
c0013885:	c3                   	ret    

c0013886 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001388a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001388d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013891:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013894:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013899:	83 f8 01             	cmp    eax,0x1
c001389c:	19 c0                	sbb    eax,eax
c001389e:	83 ca 03             	or     edx,0x3
c00138a1:	83 e0 fc             	and    eax,0xfffffffc
c00138a4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00138ab:	0f 20 d8             	mov    eax,cr3
c00138ae:	0f 22 d8             	mov    cr3,eax
c00138b1:	c3                   	ret    

c00138b2 <VAS::~VAS()>:
c00138b2:	83 ec 2c             	sub    esp,0x2c
c00138b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00138bd:	fa                   	cli    
c00138be:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00138c3:	83 c0 01             	add    eax,0x1
c00138c6:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00138cb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00138d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00138d5:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00138db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00138df:	6a 01                	push   0x1
c00138e1:	50                   	push   eax
c00138e2:	e8 9f ff ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c00138e7:	83 c4 0c             	add    esp,0xc
c00138ea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00138f2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00138fa:	0f 8f d8 00 00 00    	jg     c00139d8 <VAS::~VAS()+0x126>
c0013900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001390b:	c1 e2 02             	shl    edx,0x2
c001390e:	01 d0                	add    eax,edx
c0013910:	8b 00                	mov    eax,DWORD PTR [eax]
c0013912:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	83 e0 01             	and    eax,0x1
c001391d:	0f 84 ab 00 00 00    	je     c00139ce <VAS::~VAS()+0x11c>
c0013923:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001392b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013933:	7f 74                	jg     c00139a9 <VAS::~VAS()+0xf7>
c0013935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013939:	c1 e0 0a             	shl    eax,0xa
c001393c:	89 c2                	mov    edx,eax
c001393e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013942:	01 d0                	add    eax,edx
c0013944:	c1 e0 0c             	shl    eax,0xc
c0013947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001394b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013950:	8b 00                	mov    eax,DWORD PTR [eax]
c0013952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013955:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c001395b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001395f:	6a 01                	push   0x1
c0013961:	50                   	push   eax
c0013962:	e8 8b fc ff ff       	call   c00135f2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013967:	83 c4 0c             	add    esp,0xc
c001396a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001396e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013972:	8b 00                	mov    eax,DWORD PTR [eax]
c0013974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001397c:	25 01 04 00 00       	and    eax,0x401
c0013981:	3d 01 04 00 00       	cmp    eax,0x401
c0013986:	75 1a                	jne    c00139a2 <VAS::~VAS()+0xf0>
c0013988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001398c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013991:	83 ec 0c             	sub    esp,0xc
c0013994:	50                   	push   eax
c0013995:	e8 e5 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c001399a:	83 c4 10             	add    esp,0x10
c001399d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139a2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00139a7:	eb 82                	jmp    c001392b <VAS::~VAS()+0x79>
c00139a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ad:	25 00 04 00 00       	and    eax,0x400
c00139b2:	74 1a                	je     c00139ce <VAS::~VAS()+0x11c>
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139bd:	83 ec 0c             	sub    esp,0xc
c00139c0:	50                   	push   eax
c00139c1:	e8 b9 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00139c6:	83 c4 10             	add    esp,0x10
c00139c9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00139ce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00139d3:	e9 1a ff ff ff       	jmp    c00138f2 <VAS::~VAS()+0x40>
c00139d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139df:	83 ec 0c             	sub    esp,0xc
c00139e2:	50                   	push   eax
c00139e3:	e8 57 fc ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00139ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139f2:	83 ec 0c             	sub    esp,0xc
c00139f5:	50                   	push   eax
c00139f6:	e8 84 c4 ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a03:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0013a0b:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013a10:	85 c0                	test   eax,eax
c0013a12:	75 01                	jne    c0013a15 <VAS::~VAS()+0x163>
c0013a14:	fb                   	sti    
c0013a15:	90                   	nop
c0013a16:	83 c4 2c             	add    esp,0x2c
c0013a19:	c3                   	ret    

c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013a1a:	55                   	push   ebp
c0013a1b:	57                   	push   edi
c0013a1c:	56                   	push   esi
c0013a1d:	53                   	push   ebx
c0013a1e:	83 ec 1c             	sub    esp,0x1c
c0013a21:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013a25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013a29:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013a2f:	77 08                	ja     c0013a39 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013a31:	0f 20 d8             	mov    eax,cr3
c0013a34:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013a37:	75 49                	jne    c0013a82 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013a39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a3d:	09 d8                	or     eax,ebx
c0013a3f:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a44:	75 59                	jne    c0013a9f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013a46:	89 de                	mov    esi,ebx
c0013a48:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a4b:	c1 ee 16             	shr    esi,0x16
c0013a4e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013a55:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013a59:	74 56                	je     c0013ab1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013a5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013a5f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013a63:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013a69:	c1 eb 0a             	shr    ebx,0xa
c0013a6c:	c1 e6 0c             	shl    esi,0xc
c0013a6f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013a75:	09 d0                	or     eax,edx
c0013a77:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013a7a:	83 c4 1c             	add    esp,0x1c
c0013a7d:	5b                   	pop    ebx
c0013a7e:	5e                   	pop    esi
c0013a7f:	5f                   	pop    edi
c0013a80:	5d                   	pop    ebp
c0013a81:	c3                   	ret    
c0013a82:	83 ec 0c             	sub    esp,0xc
c0013a85:	68 ac 46 02 c0       	push   0xc00246ac
c0013a8a:	e8 ed 34 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a96:	09 d8                	or     eax,ebx
c0013a98:	a9 ff 0f 00 00       	test   eax,0xfff
c0013a9d:	74 a7                	je     c0013a46 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013a9f:	83 ec 0c             	sub    esp,0xc
c0013aa2:	68 14 47 02 c0       	push   0xc0024714
c0013aa7:	e8 48 c2 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013aac:	83 c4 10             	add    esp,0x10
c0013aaf:	eb 95                	jmp    c0013a46 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013ab1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ab5:	e8 2e c4 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	89 c5                	mov    ebp,eax
c0013abf:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013ac5:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ac9:	6a 01                	push   0x1
c0013acb:	e8 67 f8 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0013ad0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ad7:	6a 01                	push   0x1
c0013ad9:	50                   	push   eax
c0013ada:	55                   	push   ebp
c0013adb:	81 cd 07 04 00 00    	or     ebp,0x407
c0013ae1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ae5:	51                   	push   ecx
c0013ae6:	e8 19 01 00 00       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013aeb:	83 c4 1c             	add    esp,0x1c
c0013aee:	68 00 10 00 00       	push   0x1000
c0013af3:	6a 00                	push   0x0
c0013af5:	50                   	push   eax
c0013af6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013afa:	e8 f1 c9 fe ff       	call   c00004f0 <memset>
c0013aff:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013b06:	e8 34 fb ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013b0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b0f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013b18:	e9 3e ff ff ff       	jmp    c0013a5b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013b1d:	90                   	nop

c0013b1e <VAS::allocatePages(int, int)>:
c0013b1e:	55                   	push   ebp
c0013b1f:	57                   	push   edi
c0013b20:	56                   	push   esi
c0013b21:	53                   	push   ebx
c0013b22:	83 ec 1c             	sub    esp,0x1c
c0013b25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b29:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013b2d:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013b31:	75 71                	jne    c0013ba4 <VAS::allocatePages(int, int)+0x86>
c0013b33:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b3a:	85 c0                	test   eax,eax
c0013b3c:	74 4d                	je     c0013b8b <VAS::allocatePages(int, int)+0x6d>
c0013b3e:	89 dd                	mov    ebp,ebx
c0013b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b44:	c1 e5 0c             	shl    ebp,0xc
c0013b47:	01 c5                	add    ebp,eax
c0013b49:	85 db                	test   ebx,ebx
c0013b4b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013b4e:	7e 29                	jle    c0013b79 <VAS::allocatePages(int, int)+0x5b>
c0013b50:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013b54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013b58:	81 cf 00 04 00 00    	or     edi,0x400
c0013b5e:	e8 85 c3 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013b63:	57                   	push   edi
c0013b64:	53                   	push   ebx
c0013b65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013b6b:	50                   	push   eax
c0013b6c:	56                   	push   esi
c0013b6d:	e8 a8 fe ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b72:	83 c4 10             	add    esp,0x10
c0013b75:	39 dd                	cmp    ebp,ebx
c0013b77:	75 e5                	jne    c0013b5e <VAS::allocatePages(int, int)+0x40>
c0013b79:	0f 20 d8             	mov    eax,cr3
c0013b7c:	0f 22 d8             	mov    cr3,eax
c0013b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b83:	83 c4 1c             	add    esp,0x1c
c0013b86:	5b                   	pop    ebx
c0013b87:	5e                   	pop    esi
c0013b88:	5f                   	pop    edi
c0013b89:	5d                   	pop    ebp
c0013b8a:	c3                   	ret    
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	68 38 47 02 c0       	push   0xc0024738
c0013b93:	e8 5c c1 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013b98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	eb 9a                	jmp    c0013b3e <VAS::allocatePages(int, int)+0x20>
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	53                   	push   ebx
c0013ba8:	e8 8a f7 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0013bad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bb1:	83 c4 10             	add    esp,0x10
c0013bb4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013bb9:	77 37                	ja     c0013bf2 <VAS::allocatePages(int, int)+0xd4>
c0013bbb:	85 db                	test   ebx,ebx
c0013bbd:	7e ba                	jle    c0013b79 <VAS::allocatePages(int, int)+0x5b>
c0013bbf:	c1 e3 0c             	shl    ebx,0xc
c0013bc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bc6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013bca:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013bcd:	81 cf 00 04 00 00    	or     edi,0x400
c0013bd3:	89 c3                	mov    ebx,eax
c0013bd5:	e8 0e c3 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013bda:	57                   	push   edi
c0013bdb:	53                   	push   ebx
c0013bdc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013be2:	50                   	push   eax
c0013be3:	56                   	push   esi
c0013be4:	e8 31 fe ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	39 dd                	cmp    ebp,ebx
c0013bee:	75 e5                	jne    c0013bd5 <VAS::allocatePages(int, int)+0xb7>
c0013bf0:	eb 87                	jmp    c0013b79 <VAS::allocatePages(int, int)+0x5b>
c0013bf2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013bf6:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013bfb:	09 c2                	or     edx,eax
c0013bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013c01:	eb b8                	jmp    c0013bbb <VAS::allocatePages(int, int)+0x9d>
c0013c03:	90                   	nop

c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013c04:	55                   	push   ebp
c0013c05:	57                   	push   edi
c0013c06:	56                   	push   esi
c0013c07:	53                   	push   ebx
c0013c08:	83 ec 0c             	sub    esp,0xc
c0013c0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013c0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013c13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013c17:	85 db                	test   ebx,ebx
c0013c19:	7e 2f                	jle    c0013c4a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013c1b:	c1 e3 0c             	shl    ebx,0xc
c0013c1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013c22:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013c26:	01 d3                	add    ebx,edx
c0013c28:	55                   	push   ebp
c0013c29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013c2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c31:	29 c2                	sub    edx,eax
c0013c33:	01 f2                	add    edx,esi
c0013c35:	52                   	push   edx
c0013c36:	56                   	push   esi
c0013c37:	81 c6 00 10 00 00    	add    esi,0x1000
c0013c3d:	57                   	push   edi
c0013c3e:	e8 d7 fd ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	39 de                	cmp    esi,ebx
c0013c48:	75 de                	jne    c0013c28 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013c4a:	0f 20 d8             	mov    eax,cr3
c0013c4d:	0f 22 d8             	mov    cr3,eax
c0013c50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c54:	83 c4 0c             	add    esp,0xc
c0013c57:	5b                   	pop    ebx
c0013c58:	5e                   	pop    esi
c0013c59:	5f                   	pop    edi
c0013c5a:	5d                   	pop    ebp
c0013c5b:	c3                   	ret    

c0013c5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013c5c:	55                   	push   ebp
c0013c5d:	57                   	push   edi
c0013c5e:	56                   	push   esi
c0013c5f:	53                   	push   ebx
c0013c60:	83 ec 1c             	sub    esp,0x1c
c0013c63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013c67:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013c6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c6f:	09 f8                	or     eax,edi
c0013c71:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013c75:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c7a:	75 4f                	jne    c0013ccb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013c7c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013c80:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013c83:	c1 eb 16             	shr    ebx,0x16
c0013c86:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013c8d:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013c91:	74 52                	je     c0013ce5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013c93:	0f b6 f2             	movzx  esi,dl
c0013c96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013c9a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013c9e:	c1 e8 0a             	shr    eax,0xa
c0013ca1:	83 fe 01             	cmp    esi,0x1
c0013ca4:	19 d2                	sbb    edx,edx
c0013ca6:	c1 e3 0c             	shl    ebx,0xc
c0013ca9:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013caf:	25 fc 0f 00 00       	and    eax,0xffc
c0013cb4:	01 d8                	add    eax,ebx
c0013cb6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013cba:	09 d9                	or     ecx,ebx
c0013cbc:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013cc3:	83 c4 1c             	add    esp,0x1c
c0013cc6:	5b                   	pop    ebx
c0013cc7:	5e                   	pop    esi
c0013cc8:	5f                   	pop    edi
c0013cc9:	5d                   	pop    ebp
c0013cca:	c3                   	ret    
c0013ccb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013ccf:	83 ec 0c             	sub    esp,0xc
c0013cd2:	68 64 47 02 c0       	push   0xc0024764
c0013cd7:	e8 18 c0 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ce3:	eb 97                	jmp    c0013c7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013ce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ce9:	e8 fa c1 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013cee:	83 ec 0c             	sub    esp,0xc
c0013cf1:	89 c5                	mov    ebp,eax
c0013cf3:	8b 0d 90 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c290
c0013cf9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013cfd:	6a 01                	push   0x1
c0013cff:	e8 33 f6 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0013d04:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d0b:	6a 01                	push   0x1
c0013d0d:	50                   	push   eax
c0013d0e:	55                   	push   ebp
c0013d0f:	81 cd 07 04 00 00    	or     ebp,0x407
c0013d15:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d19:	51                   	push   ecx
c0013d1a:	e8 e5 fe ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d1f:	83 c4 1c             	add    esp,0x1c
c0013d22:	68 00 10 00 00       	push   0x1000
c0013d27:	6a 00                	push   0x0
c0013d29:	50                   	push   eax
c0013d2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d2e:	e8 bd c7 fe ff       	call   c00004f0 <memset>
c0013d33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013d37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d3a:	e8 00 f9 ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0013d3f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013d42:	83 c4 10             	add    esp,0x10
c0013d45:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013d48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d4c:	e9 42 ff ff ff       	jmp    c0013c93 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013d51:	90                   	nop

c0013d52 <VAS::VAS(bool)>:
c0013d52:	53                   	push   ebx
c0013d53:	83 ec 28             	sub    esp,0x28
c0013d56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013d5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d78:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d7c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013d7f:	e8 64 c1 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0013d84:	89 c2                	mov    edx,eax
c0013d86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d8a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d8d:	8b 1d 90 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c290
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	6a 01                	push   0x1
c0013d98:	e8 9a f5 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	89 c2                	mov    edx,eax
c0013da2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013da6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013da9:	83 ec 0c             	sub    esp,0xc
c0013dac:	6a 03                	push   0x3
c0013dae:	6a 01                	push   0x1
c0013db0:	52                   	push   edx
c0013db1:	50                   	push   eax
c0013db2:	53                   	push   ebx
c0013db3:	e8 4c fe ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013db8:	83 c4 20             	add    esp,0x20
c0013dbb:	89 c2                	mov    edx,eax
c0013dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013dc4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013dcc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013dd4:	7f 1d                	jg     c0013df3 <VAS::VAS(bool)+0xa1>
c0013dd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ddd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013de1:	c1 e2 02             	shl    edx,0x2
c0013de4:	01 d0                	add    eax,edx
c0013de6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013dec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013df1:	eb d9                	jmp    c0013dcc <VAS::VAS(bool)+0x7a>
c0013df3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013dfb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013e03:	7f 59                	jg     c0013e5e <VAS::VAS(bool)+0x10c>
c0013e05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e09:	2d 00 02 00 00       	sub    eax,0x200
c0013e0e:	c1 e0 0c             	shl    eax,0xc
c0013e11:	89 c2                	mov    edx,eax
c0013e13:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013e18:	89 d1                	mov    ecx,edx
c0013e1a:	09 c1                	or     ecx,eax
c0013e1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e27:	c1 e2 02             	shl    edx,0x2
c0013e2a:	01 d0                	add    eax,edx
c0013e2c:	83 c9 05             	or     ecx,0x5
c0013e2f:	89 ca                	mov    edx,ecx
c0013e31:	89 10                	mov    DWORD PTR [eax],edx
c0013e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e37:	2d 40 03 00 00       	sub    eax,0x340
c0013e3c:	83 f8 7f             	cmp    eax,0x7f
c0013e3f:	77 16                	ja     c0013e57 <VAS::VAS(bool)+0x105>
c0013e41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e45:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e4c:	c1 e2 02             	shl    edx,0x2
c0013e4f:	01 d0                	add    eax,edx
c0013e51:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013e57:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013e5c:	eb 9d                	jmp    c0013dfb <VAS::VAS(bool)+0xa9>
c0013e5e:	8b 15 68 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb68
c0013e64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	05 20 0c 00 00       	add    eax,0xc20
c0013e70:	81 ca 03 40 00 00    	or     edx,0x4003
c0013e76:	89 10                	mov    DWORD PTR [eax],edx
c0013e78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013e7f:	a1 68 cb 02 c0       	mov    eax,ds:0xc002cb68
c0013e84:	09 c2                	or     edx,eax
c0013e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e8d:	05 fc 0f 00 00       	add    eax,0xffc
c0013e92:	83 ca 03             	or     edx,0x3
c0013e95:	89 10                	mov    DWORD PTR [eax],edx
c0013e97:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013e9c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013ea2:	83 ec 0c             	sub    esp,0xc
c0013ea5:	50                   	push   eax
c0013ea6:	e8 07 5e ff ff       	call   c0009cb2 <Device::getName()>
c0013eab:	83 c4 10             	add    esp,0x10
c0013eae:	83 ec 08             	sub    esp,0x8
c0013eb1:	68 d7 49 02 c0       	push   0xc00249d7
c0013eb6:	50                   	push   eax
c0013eb7:	e8 94 c8 fe ff       	call   c0000750 <strcmp>
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	85 c0                	test   eax,eax
c0013ec1:	0f 94 c0             	sete   al
c0013ec4:	0f b6 c0             	movzx  eax,al
c0013ec7:	85 c0                	test   eax,eax
c0013ec9:	74 68                	je     c0013f33 <VAS::VAS(bool)+0x1e1>
c0013ecb:	fa                   	cli    
c0013ecc:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013ed1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013ed7:	05 68 09 00 00       	add    eax,0x968
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	50                   	push   eax
c0013ee0:	e8 a5 ac ff ff       	call   c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013ee5:	83 c4 10             	add    esp,0x10
c0013ee8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013eed:	89 c3                	mov    ebx,eax
c0013eef:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0013ef4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013efa:	05 68 09 00 00       	add    eax,0x968
c0013eff:	83 ec 0c             	sub    esp,0xc
c0013f02:	50                   	push   eax
c0013f03:	e8 82 ac ff ff       	call   c000eb8a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	83 ec 08             	sub    esp,0x8
c0013f0e:	50                   	push   eax
c0013f0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f13:	e8 08 f7 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013f18:	83 c4 10             	add    esp,0x10
c0013f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f22:	6a 11                	push   0x11
c0013f24:	53                   	push   ebx
c0013f25:	50                   	push   eax
c0013f26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f2a:	e8 eb fa ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	fb                   	sti    
c0013f33:	90                   	nop
c0013f34:	83 c4 28             	add    esp,0x28
c0013f37:	5b                   	pop    ebx
c0013f38:	c3                   	ret    
c0013f39:	90                   	nop

c0013f3a <VAS::evict(unsigned long)>:
c0013f3a:	55                   	push   ebp
c0013f3b:	57                   	push   edi
c0013f3c:	56                   	push   esi
c0013f3d:	53                   	push   ebx
c0013f3e:	83 ec 24             	sub    esp,0x24
c0013f41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013f45:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f4d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0013f52:	50                   	push   eax
c0013f53:	68 e5 49 02 c0       	push   0xc00249e5
c0013f58:	e8 1f 30 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0013f5d:	e8 33 f5 ff ff       	call   c0013495 <Virt::allocateSwapfilePage()>
c0013f62:	83 c4 10             	add    esp,0x10
c0013f65:	89 c7                	mov    edi,eax
c0013f67:	a1 ac 69 02 c0       	mov    eax,ds:0xc00269ac
c0013f6c:	85 c0                	test   eax,eax
c0013f6e:	7e 40                	jle    c0013fb0 <VAS::evict(unsigned long)+0x76>
c0013f70:	89 ee                	mov    esi,ebp
c0013f72:	31 db                	xor    ebx,ebx
c0013f74:	83 ec 0c             	sub    esp,0xc
c0013f77:	57                   	push   edi
c0013f78:	e8 02 f5 ff ff       	call   c001347f <Virt::swapIDToSector(unsigned long)>
c0013f7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f80:	01 d8                	add    eax,ebx
c0013f82:	6a 01                	push   0x1
c0013f84:	31 d2                	xor    edx,edx
c0013f86:	83 c3 01             	add    ebx,0x1
c0013f89:	52                   	push   edx
c0013f8a:	81 c6 00 02 00 00    	add    esi,0x200
c0013f90:	50                   	push   eax
c0013f91:	0f be 05 b8 69 02 c0 	movsx  eax,BYTE PTR ds:0xc00269b8
c0013f98:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013f9f:	50                   	push   eax
c0013fa0:	e8 6f 6b ff ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c0013fa5:	83 c4 20             	add    esp,0x20
c0013fa8:	39 1d ac 69 02 c0    	cmp    DWORD PTR ds:0xc00269ac,ebx
c0013fae:	7f c4                	jg     c0013f74 <VAS::evict(unsigned long)+0x3a>
c0013fb0:	83 ec 08             	sub    esp,0x8
c0013fb3:	c1 e7 0c             	shl    edi,0xc
c0013fb6:	55                   	push   ebp
c0013fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fbb:	50                   	push   eax
c0013fbc:	e8 5f f6 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0013fc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0013fc3:	89 d3                	mov    ebx,edx
c0013fc5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013fcb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013fd1:	09 d7                	or     edi,edx
c0013fd3:	89 38                	mov    DWORD PTR [eax],edi
c0013fd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fd8:	8b 15 88 c2 02 c0    	mov    edx,DWORD PTR ds:0xc002c288
c0013fde:	83 c2 01             	add    edx,0x1
c0013fe1:	89 15 88 c2 02 c0    	mov    DWORD PTR ds:0xc002c288,edx
c0013fe7:	e8 93 be ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c0013fec:	0f 20 d8             	mov    eax,cr3
c0013fef:	0f 22 d8             	mov    cr3,eax
c0013ff2:	8b 0d 88 c2 02 c0    	mov    ecx,DWORD PTR ds:0xc002c288
c0013ff8:	51                   	push   ecx
c0013ff9:	55                   	push   ebp
c0013ffa:	53                   	push   ebx
c0013ffb:	68 88 47 02 c0       	push   0xc0024788
c0014000:	e8 77 2f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014005:	83 c4 18             	add    esp,0x18
c0014008:	a1 84 c2 02 c0       	mov    eax,ds:0xc002c284
c001400d:	50                   	push   eax
c001400e:	8d 50 01             	lea    edx,[eax+0x1]
c0014011:	68 fa 49 02 c0       	push   0xc00249fa
c0014016:	89 15 84 c2 02 c0    	mov    DWORD PTR ds:0xc002c284,edx
c001401c:	e8 5b 2f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014021:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0014026:	c7 44 24 40 0c 4a 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024a0c
c001402e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014032:	83 c4 2c             	add    esp,0x2c
c0014035:	5b                   	pop    ebx
c0014036:	5e                   	pop    esi
c0014037:	5f                   	pop    edi
c0014038:	5d                   	pop    ebp
c0014039:	e9 3e 2f ff ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>

c001403e <VAS::canLockPage(unsigned long)>:
c001403e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014042:	50                   	push   eax
c0014043:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014047:	52                   	push   edx
c0014048:	e8 d3 f5 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c001404d:	59                   	pop    ecx
c001404e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014050:	5a                   	pop    edx
c0014051:	c1 e8 0b             	shr    eax,0xb
c0014054:	83 e0 01             	and    eax,0x1
c0014057:	c3                   	ret    

c0014058 <VAS::unlockPage(unsigned long)>:
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001405f:	50                   	push   eax
c0014060:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014064:	52                   	push   edx
c0014065:	e8 b6 f5 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c001406a:	59                   	pop    ecx
c001406b:	5a                   	pop    edx
c001406c:	8b 10                	mov    edx,DWORD PTR [eax]
c001406e:	f6 c6 08             	test   dh,0x8
c0014071:	75 09                	jne    c001407c <VAS::unlockPage(unsigned long)+0x24>
c0014073:	80 ce 08             	or     dh,0x8
c0014076:	89 10                	mov    DWORD PTR [eax],edx
c0014078:	83 c4 0c             	add    esp,0xc
c001407b:	c3                   	ret    
c001407c:	c7 44 24 10 bc 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247bc
c0014084:	83 c4 0c             	add    esp,0xc
c0014087:	e9 68 bc ff ff       	jmp    c000fcf4 <KePanic(char const*)>

c001408c <VAS::canLockPages(unsigned long, int)>:
c001408c:	55                   	push   ebp
c001408d:	57                   	push   edi
c001408e:	56                   	push   esi
c001408f:	53                   	push   ebx
c0014090:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014094:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0014098:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001409c:	85 ff                	test   edi,edi
c001409e:	7e 23                	jle    c00140c3 <VAS::canLockPages(unsigned long, int)+0x37>
c00140a0:	31 f6                	xor    esi,esi
c00140a2:	eb 0d                	jmp    c00140b1 <VAS::canLockPages(unsigned long, int)+0x25>
c00140a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00140aa:	83 c6 01             	add    esi,0x1
c00140ad:	39 f7                	cmp    edi,esi
c00140af:	74 0d                	je     c00140be <VAS::canLockPages(unsigned long, int)+0x32>
c00140b1:	53                   	push   ebx
c00140b2:	55                   	push   ebp
c00140b3:	e8 86 ff ff ff       	call   c001403e <VAS::canLockPage(unsigned long)>
c00140b8:	5a                   	pop    edx
c00140b9:	84 c0                	test   al,al
c00140bb:	59                   	pop    ecx
c00140bc:	75 e6                	jne    c00140a4 <VAS::canLockPages(unsigned long, int)+0x18>
c00140be:	5b                   	pop    ebx
c00140bf:	5e                   	pop    esi
c00140c0:	5f                   	pop    edi
c00140c1:	5d                   	pop    ebp
c00140c2:	c3                   	ret    
c00140c3:	b0 01                	mov    al,0x1
c00140c5:	eb f7                	jmp    c00140be <VAS::canLockPages(unsigned long, int)+0x32>
c00140c7:	90                   	nop

c00140c8 <VAS::unlockPages(unsigned long, int)>:
c00140c8:	55                   	push   ebp
c00140c9:	57                   	push   edi
c00140ca:	56                   	push   esi
c00140cb:	53                   	push   ebx
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00140d7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140db:	85 ff                	test   edi,edi
c00140dd:	7e 1c                	jle    c00140fb <VAS::unlockPages(unsigned long, int)+0x33>
c00140df:	31 f6                	xor    esi,esi
c00140e1:	83 ec 08             	sub    esp,0x8
c00140e4:	83 c6 01             	add    esi,0x1
c00140e7:	53                   	push   ebx
c00140e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00140ee:	55                   	push   ebp
c00140ef:	e8 64 ff ff ff       	call   c0014058 <VAS::unlockPage(unsigned long)>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	39 f7                	cmp    edi,esi
c00140f9:	75 e6                	jne    c00140e1 <VAS::unlockPages(unsigned long, int)+0x19>
c00140fb:	83 c4 0c             	add    esp,0xc
c00140fe:	5b                   	pop    ebx
c00140ff:	5e                   	pop    esi
c0014100:	5f                   	pop    edi
c0014101:	5d                   	pop    ebp
c0014102:	c3                   	ret    
c0014103:	90                   	nop

c0014104 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014104:	55                   	push   ebp
c0014105:	57                   	push   edi
c0014106:	56                   	push   esi
c0014107:	53                   	push   ebx
c0014108:	81 ec 1c 10 00 00    	sub    esp,0x101c
c001410e:	8b 84 24 34 10 00 00 	mov    eax,DWORD PTR [esp+0x1034]
c0014115:	89 c3                	mov    ebx,eax
c0014117:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001411d:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0014122:	77 11                	ja     c0014135 <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c0014124:	85 db                	test   ebx,ebx
c0014126:	75 1d                	jne    c0014145 <VAS::tryLoadBackOffDisk(unsigned long)+0x41>
c0014128:	31 c0                	xor    eax,eax
c001412a:	81 c4 1c 10 00 00    	add    esp,0x101c
c0014130:	5b                   	pop    ebx
c0014131:	5e                   	pop    esi
c0014132:	5f                   	pop    edi
c0014133:	5d                   	pop    ebp
c0014134:	c3                   	ret    
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	68 21 4a 02 c0       	push   0xc0024a21
c001413d:	e8 b2 bb ff ff       	call   c000fcf4 <KePanic(char const*)>
c0014142:	83 c4 10             	add    esp,0x10
c0014145:	83 ec 08             	sub    esp,0x8
c0014148:	53                   	push   ebx
c0014149:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c0014150:	56                   	push   esi
c0014151:	e8 ca f4 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	89 c2                	mov    edx,eax
c001415b:	85 c0                	test   eax,eax
c001415d:	74 c9                	je     c0014128 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001415f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0014161:	f7 c5 00 02 00 00    	test   ebp,0x200
c0014167:	0f 85 ae 00 00 00    	jne    c001421b <VAS::tryLoadBackOffDisk(unsigned long)+0x117>
c001416d:	89 e8                	mov    eax,ebp
c001416f:	25 01 04 00 00       	and    eax,0x401
c0014174:	3d 00 04 00 00       	cmp    eax,0x400
c0014179:	75 ad                	jne    c0014128 <VAS::tryLoadBackOffDisk(unsigned long)+0x24>
c001417b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001417f:	c1 ed 0c             	shr    ebp,0xc
c0014182:	e8 61 bd ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014187:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001418b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001418d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0014193:	09 c1                	or     ecx,eax
c0014195:	81 c9 01 08 00 00    	or     ecx,0x801
c001419b:	89 0a                	mov    DWORD PTR [edx],ecx
c001419d:	8b 15 ac 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269ac
c00141a3:	85 d2                	test   edx,edx
c00141a5:	7e 40                	jle    c00141e7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00141a7:	89 df                	mov    edi,ebx
c00141a9:	31 f6                	xor    esi,esi
c00141ab:	83 ec 0c             	sub    esp,0xc
c00141ae:	55                   	push   ebp
c00141af:	e8 cb f2 ff ff       	call   c001347f <Virt::swapIDToSector(unsigned long)>
c00141b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141b7:	01 f0                	add    eax,esi
c00141b9:	6a 01                	push   0x1
c00141bb:	31 d2                	xor    edx,edx
c00141bd:	83 c6 01             	add    esi,0x1
c00141c0:	52                   	push   edx
c00141c1:	81 c7 00 02 00 00    	add    edi,0x200
c00141c7:	50                   	push   eax
c00141c8:	0f be 05 b8 69 02 c0 	movsx  eax,BYTE PTR ds:0xc00269b8
c00141cf:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00141d6:	50                   	push   eax
c00141d7:	e8 cc 68 ff ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c00141dc:	83 c4 20             	add    esp,0x20
c00141df:	39 35 ac 69 02 c0    	cmp    DWORD PTR ds:0xc00269ac,esi
c00141e5:	7f c4                	jg     c00141ab <VAS::tryLoadBackOffDisk(unsigned long)+0xa7>
c00141e7:	83 ec 04             	sub    esp,0x4
c00141ea:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c00141ef:	83 e8 01             	sub    eax,0x1
c00141f2:	50                   	push   eax
c00141f3:	a3 88 c2 02 c0       	mov    ds:0xc002c288,eax
c00141f8:	53                   	push   ebx
c00141f9:	68 33 4a 02 c0       	push   0xc0024a33
c00141fe:	e8 79 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014203:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014206:	e8 51 f2 ff ff       	call   c001345c <Virt::freeSwapfilePage(unsigned long)>
c001420b:	0f 20 d8             	mov    eax,cr3
c001420e:	0f 22 d8             	mov    cr3,eax
c0014211:	b0 01                	mov    al,0x1
c0014213:	83 c4 10             	add    esp,0x10
c0014216:	e9 0f ff ff ff       	jmp    c001412a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>
c001421b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	68 ec 47 02 c0       	push   0xc00247ec
c0014227:	e8 50 2d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001422c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014230:	8b 32                	mov    esi,DWORD PTR [edx]
c0014232:	e8 b1 bc ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014237:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001423d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014241:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014243:	83 c9 01             	or     ecx,0x1
c0014246:	89 0a                	mov    DWORD PTR [edx],ecx
c0014248:	0f 20 d9             	mov    ecx,cr3
c001424b:	0f 22 d9             	mov    cr3,ecx
c001424e:	bd 00 10 00 00       	mov    ebp,0x1000
c0014253:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0014257:	89 e9                	mov    ecx,ebp
c0014259:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001425b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001425d:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0014263:	09 c8                	or     eax,ecx
c0014265:	83 c8 02             	or     eax,0x2
c0014268:	89 02                	mov    DWORD PTR [edx],eax
c001426a:	0f 20 d8             	mov    eax,cr3
c001426d:	0f 22 d8             	mov    cr3,eax
c0014270:	8d 74 24 20          	lea    esi,[esp+0x20]
c0014274:	89 df                	mov    edi,ebx
c0014276:	89 e9                	mov    ecx,ebp
c0014278:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001427a:	b0 01                	mov    al,0x1
c001427c:	83 c4 10             	add    esp,0x10
c001427f:	e9 a6 fe ff ff       	jmp    c001412a <VAS::tryLoadBackOffDisk(unsigned long)+0x26>

c0014284 <VAS::lockPage(unsigned long)>:
c0014284:	56                   	push   esi
c0014285:	53                   	push   ebx
c0014286:	83 ec 04             	sub    esp,0x4
c0014289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001428d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014291:	50                   	push   eax
c0014292:	56                   	push   esi
c0014293:	e8 88 f3 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014298:	5a                   	pop    edx
c0014299:	89 c3                	mov    ebx,eax
c001429b:	59                   	pop    ecx
c001429c:	8b 00                	mov    eax,DWORD PTR [eax]
c001429e:	a8 01                	test   al,0x1
c00142a0:	74 10                	je     c00142b2 <VAS::lockPage(unsigned long)+0x2e>
c00142a2:	f6 c4 08             	test   ah,0x8
c00142a5:	74 28                	je     c00142cf <VAS::lockPage(unsigned long)+0x4b>
c00142a7:	80 e4 f7             	and    ah,0xf7
c00142aa:	89 03                	mov    DWORD PTR [ebx],eax
c00142ac:	83 c4 04             	add    esp,0x4
c00142af:	5b                   	pop    ebx
c00142b0:	5e                   	pop    esi
c00142b1:	c3                   	ret    
c00142b2:	83 ec 08             	sub    esp,0x8
c00142b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142ba:	50                   	push   eax
c00142bb:	56                   	push   esi
c00142bc:	e8 43 fe ff ff       	call   c0014104 <VAS::tryLoadBackOffDisk(unsigned long)>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	84 c0                	test   al,al
c00142c6:	74 19                	je     c00142e1 <VAS::lockPage(unsigned long)+0x5d>
c00142c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ca:	f6 c4 08             	test   ah,0x8
c00142cd:	75 d8                	jne    c00142a7 <VAS::lockPage(unsigned long)+0x23>
c00142cf:	c7 44 24 10 bc 47 02 c0 	mov    DWORD PTR [esp+0x10],0xc00247bc
c00142d7:	83 c4 04             	add    esp,0x4
c00142da:	5b                   	pop    ebx
c00142db:	5e                   	pop    esi
c00142dc:	e9 13 ba ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c00142e1:	83 ec 0c             	sub    esp,0xc
c00142e4:	68 0c 48 02 c0       	push   0xc002480c
c00142e9:	e8 06 ba ff ff       	call   c000fcf4 <KePanic(char const*)>
c00142ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	eb ad                	jmp    c00142a2 <VAS::lockPage(unsigned long)+0x1e>
c00142f5:	90                   	nop

c00142f6 <VAS::lockPages(unsigned long, int)>:
c00142f6:	55                   	push   ebp
c00142f7:	57                   	push   edi
c00142f8:	56                   	push   esi
c00142f9:	53                   	push   ebx
c00142fa:	83 ec 0c             	sub    esp,0xc
c00142fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014301:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014305:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014309:	85 ff                	test   edi,edi
c001430b:	7e 1c                	jle    c0014329 <VAS::lockPages(unsigned long, int)+0x33>
c001430d:	31 f6                	xor    esi,esi
c001430f:	83 ec 08             	sub    esp,0x8
c0014312:	83 c6 01             	add    esi,0x1
c0014315:	53                   	push   ebx
c0014316:	81 c3 00 10 00 00    	add    ebx,0x1000
c001431c:	55                   	push   ebp
c001431d:	e8 62 ff ff ff       	call   c0014284 <VAS::lockPage(unsigned long)>
c0014322:	83 c4 10             	add    esp,0x10
c0014325:	39 f7                	cmp    edi,esi
c0014327:	75 e6                	jne    c001430f <VAS::lockPages(unsigned long, int)+0x19>
c0014329:	83 c4 0c             	add    esp,0xc
c001432c:	5b                   	pop    ebx
c001432d:	5e                   	pop    esi
c001432e:	5f                   	pop    edi
c001432f:	5d                   	pop    ebp
c0014330:	c3                   	ret    
c0014331:	90                   	nop

c0014332 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014332:	55                   	push   ebp
c0014333:	57                   	push   edi
c0014334:	56                   	push   esi
c0014335:	53                   	push   ebx
c0014336:	83 ec 28             	sub    esp,0x28
c0014339:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001433d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014341:	50                   	push   eax
c0014342:	e8 f0 ef ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0014347:	83 c4 0c             	add    esp,0xc
c001434a:	89 c5                	mov    ebp,eax
c001434c:	6a 07                	push   0x7
c001434e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014352:	52                   	push   edx
c0014353:	56                   	push   esi
c0014354:	e8 c5 f7 ff ff       	call   c0013b1e <VAS::allocatePages(int, int)>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	89 c7                	mov    edi,eax
c001435e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014362:	85 c9                	test   ecx,ecx
c0014364:	74 2f                	je     c0014395 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014366:	31 db                	xor    ebx,ebx
c0014368:	e8 7b bb ff ff       	call   c000fee8 <Phys::allocatePage()>
c001436d:	83 c3 01             	add    ebx,0x1
c0014370:	6a 03                	push   0x3
c0014372:	55                   	push   ebp
c0014373:	50                   	push   eax
c0014374:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014378:	56                   	push   esi
c0014379:	e8 9c f6 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001437e:	6a 07                	push   0x7
c0014380:	57                   	push   edi
c0014381:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014385:	50                   	push   eax
c0014386:	56                   	push   esi
c0014387:	e8 8e f6 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001438c:	83 c4 20             	add    esp,0x20
c001438f:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014393:	75 d3                	jne    c0014368 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014395:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014399:	89 28                	mov    DWORD PTR [eax],ebp
c001439b:	83 c4 1c             	add    esp,0x1c
c001439e:	89 f8                	mov    eax,edi
c00143a0:	5b                   	pop    ebx
c00143a1:	5e                   	pop    esi
c00143a2:	5f                   	pop    edi
c00143a3:	5d                   	pop    ebp
c00143a4:	c3                   	ret    
c00143a5:	90                   	nop

c00143a6 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00143a6:	53                   	push   ebx
c00143a7:	83 ec 14             	sub    esp,0x14
c00143aa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00143ae:	68 3c 48 02 c0       	push   0xc002483c
c00143b3:	e8 c4 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143b8:	c7 04 24 9c 48 02 c0 	mov    DWORD PTR [esp],0xc002489c
c00143bf:	e8 b8 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143c4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00143c8:	83 c4 18             	add    esp,0x18
c00143cb:	5b                   	pop    ebx
c00143cc:	e9 6e f2 ff ff       	jmp    c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c00143d1:	90                   	nop

c00143d2 <VAS::scanForEviction()>:
c00143d2:	57                   	push   edi
c00143d3:	56                   	push   esi
c00143d4:	31 f6                	xor    esi,esi
c00143d6:	53                   	push   ebx
c00143d7:	83 ec 18             	sub    esp,0x18
c00143da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00143de:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00143e3:	50                   	push   eax
c00143e4:	68 18 49 02 c0       	push   0xc0024918
c00143e9:	e8 8e 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143ee:	c7 04 24 48 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a48
c00143f5:	e8 82 2b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00143fa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00143fd:	83 c4 10             	add    esp,0x10
c0014400:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014406:	75 0e                	jne    c0014416 <VAS::scanForEviction()+0x44>
c0014408:	89 da                	mov    edx,ebx
c001440a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001440d:	c1 ea 16             	shr    edx,0x16
c0014410:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014414:	74 5b                	je     c0014471 <VAS::scanForEviction()+0x9f>
c0014416:	83 ec 08             	sub    esp,0x8
c0014419:	53                   	push   ebx
c001441a:	57                   	push   edi
c001441b:	e8 00 f2 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c0014420:	83 c4 10             	add    esp,0x10
c0014423:	8b 10                	mov    edx,DWORD PTR [eax]
c0014425:	89 d1                	mov    ecx,edx
c0014427:	c1 e9 0c             	shr    ecx,0xc
c001442a:	74 10                	je     c001443c <VAS::scanForEviction()+0x6a>
c001442c:	89 d1                	mov    ecx,edx
c001442e:	81 e1 01 08 00 00    	and    ecx,0x801
c0014434:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001443a:	74 40                	je     c001447c <VAS::scanForEviction()+0xaa>
c001443c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014442:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014448:	76 2d                	jbe    c0014477 <VAS::scanForEviction()+0xa5>
c001444a:	83 c6 01             	add    esi,0x1
c001444d:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014454:	83 fe 03             	cmp    esi,0x3
c0014457:	74 32                	je     c001448b <VAS::scanForEviction()+0xb9>
c0014459:	31 db                	xor    ebx,ebx
c001445b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014461:	75 b3                	jne    c0014416 <VAS::scanForEviction()+0x44>
c0014463:	89 da                	mov    edx,ebx
c0014465:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014468:	c1 ea 16             	shr    edx,0x16
c001446b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001446f:	75 a5                	jne    c0014416 <VAS::scanForEviction()+0x44>
c0014471:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014477:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001447a:	eb 84                	jmp    c0014400 <VAS::scanForEviction()+0x2e>
c001447c:	f6 c2 20             	test   dl,0x20
c001447f:	74 13                	je     c0014494 <VAS::scanForEviction()+0xc2>
c0014481:	83 e2 df             	and    edx,0xffffffdf
c0014484:	89 10                	mov    DWORD PTR [eax],edx
c0014486:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014489:	eb b1                	jmp    c001443c <VAS::scanForEviction()+0x6a>
c001448b:	83 c4 10             	add    esp,0x10
c001448e:	31 c0                	xor    eax,eax
c0014490:	5b                   	pop    ebx
c0014491:	5e                   	pop    esi
c0014492:	5f                   	pop    edi
c0014493:	c3                   	ret    
c0014494:	83 ec 08             	sub    esp,0x8
c0014497:	89 d0                	mov    eax,edx
c0014499:	25 00 f0 ff ff       	and    eax,0xfffff000
c001449e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144a2:	53                   	push   ebx
c00144a3:	68 64 4a 02 c0       	push   0xc0024a64
c00144a8:	e8 cf 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144ad:	58                   	pop    eax
c00144ae:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00144b1:	5a                   	pop    edx
c00144b2:	51                   	push   ecx
c00144b3:	57                   	push   edi
c00144b4:	e8 81 fa ff ff       	call   c0013f3a <VAS::evict(unsigned long)>
c00144b9:	5b                   	pop    ebx
c00144ba:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00144bd:	5e                   	pop    esi
c00144be:	50                   	push   eax
c00144bf:	68 78 4a 02 c0       	push   0xc0024a78
c00144c4:	e8 b3 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144c9:	58                   	pop    eax
c00144ca:	5a                   	pop    edx
c00144cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144cf:	50                   	push   eax
c00144d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144d4:	68 8b 4a 02 c0       	push   0xc0024a8b
c00144d9:	e8 9e 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144de:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00144e1:	81 c1 00 10 00 00    	add    ecx,0x1000
c00144e7:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00144ea:	8b 3d 70 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002ca70
c00144f0:	5b                   	pop    ebx
c00144f1:	5e                   	pop    esi
c00144f2:	57                   	push   edi
c00144f3:	68 38 49 02 c0       	push   0xc0024938
c00144f8:	e8 7f 2a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	5b                   	pop    ebx
c0014508:	5e                   	pop    esi
c0014509:	5f                   	pop    edi
c001450a:	c3                   	ret    

c001450b <mapVASFirstTime>:
c001450b:	55                   	push   ebp
c001450c:	57                   	push   edi
c001450d:	56                   	push   esi
c001450e:	53                   	push   ebx
c001450f:	83 ec 0c             	sub    esp,0xc
c0014512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014517:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001451a:	83 fa 01             	cmp    edx,0x1
c001451d:	0f 84 cb 00 00 00    	je     c00145ee <mapVASFirstTime+0xe3>
c0014523:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014526:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014529:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001452e:	c1 e5 15             	shl    ebp,0x15
c0014531:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014536:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c001453c:	29 eb                	sub    ebx,ebp
c001453e:	29 ef                	sub    edi,ebp
c0014540:	e8 a3 b9 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014545:	83 ec 0c             	sub    esp,0xc
c0014548:	68 03 04 00 00       	push   0x403
c001454d:	6a 01                	push   0x1
c001454f:	53                   	push   ebx
c0014550:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014556:	50                   	push   eax
c0014557:	56                   	push   esi
c0014558:	e8 a7 f6 ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001455d:	83 c4 20             	add    esp,0x20
c0014560:	39 fb                	cmp    ebx,edi
c0014562:	75 dc                	jne    c0014540 <mapVASFirstTime+0x35>
c0014564:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014569:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001456e:	29 eb                	sub    ebx,ebp
c0014570:	29 ef                	sub    edi,ebp
c0014572:	e8 71 b9 ff ff       	call   c000fee8 <Phys::allocatePage()>
c0014577:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001457b:	83 fa 01             	cmp    edx,0x1
c001457e:	19 d2                	sbb    edx,edx
c0014580:	83 ec 0c             	sub    esp,0xc
c0014583:	83 e2 04             	and    edx,0x4
c0014586:	81 c2 03 04 00 00    	add    edx,0x403
c001458c:	52                   	push   edx
c001458d:	6a 01                	push   0x1
c001458f:	53                   	push   ebx
c0014590:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014596:	50                   	push   eax
c0014597:	56                   	push   esi
c0014598:	e8 67 f6 ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001459d:	83 c4 20             	add    esp,0x20
c00145a0:	39 df                	cmp    edi,ebx
c00145a2:	75 ce                	jne    c0014572 <mapVASFirstTime+0x67>
c00145a4:	83 ec 0c             	sub    esp,0xc
c00145a7:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c00145ac:	6a 04                	push   0x4
c00145ae:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c00145b4:	6a ff                	push   0xffffffff
c00145b6:	c1 eb 0c             	shr    ebx,0xc
c00145b9:	53                   	push   ebx
c00145ba:	68 00 70 02 c0       	push   0xc0027000
c00145bf:	56                   	push   esi
c00145c0:	e8 f5 f1 ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00145c5:	83 c4 14             	add    esp,0x14
c00145c8:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c00145cd:	6a 04                	push   0x4
c00145cf:	6a ff                	push   0xffffffff
c00145d1:	53                   	push   ebx
c00145d2:	68 00 70 02 c0       	push   0xc0027000
c00145d7:	50                   	push   eax
c00145d8:	e8 dd f1 ff ff       	call   c00137ba <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00145dd:	0f 20 d8             	mov    eax,cr3
c00145e0:	0f 22 d8             	mov    cr3,eax
c00145e3:	83 c4 20             	add    esp,0x20
c00145e6:	83 c4 0c             	add    esp,0xc
c00145e9:	5b                   	pop    ebx
c00145ea:	5e                   	pop    esi
c00145eb:	5f                   	pop    edi
c00145ec:	5d                   	pop    ebp
c00145ed:	c3                   	ret    
c00145ee:	83 ec 0c             	sub    esp,0xc
c00145f1:	68 98 4a 02 c0       	push   0xc0024a98
c00145f6:	e8 81 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	83 c4 0c             	add    esp,0xc
c0014601:	5b                   	pop    ebx
c0014602:	5e                   	pop    esi
c0014603:	5f                   	pop    edi
c0014604:	5d                   	pop    ebp
c0014605:	c3                   	ret    

c0014606 <SysAlarm(regs*)>:
c0014606:	53                   	push   ebx
c0014607:	83 ec 10             	sub    esp,0x10
c001460a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001460e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014611:	68 b1 4a 02 c0       	push   0xc0024ab1
c0014616:	e8 61 29 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001461b:	83 c4 0c             	add    esp,0xc
c001461e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014621:	31 d2                	xor    edx,edx
c0014623:	52                   	push   edx
c0014624:	50                   	push   eax
c0014625:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001462b:	e8 b4 09 00 00       	call   c0014fe4 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014630:	83 c4 18             	add    esp,0x18
c0014633:	5b                   	pop    ebx
c0014634:	c3                   	ret    

c0014635 <SysEject(regs*)>:
c0014635:	83 ec 0c             	sub    esp,0xc
c0014638:	83 ca ff             	or     edx,0xffffffff
c001463b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014642:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014647:	83 e9 41             	sub    ecx,0x41
c001464a:	83 f9 19             	cmp    ecx,0x19
c001464d:	77 18                	ja     c0014667 <SysEject(regs*)+0x32>
c001464f:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014656:	85 c9                	test   ecx,ecx
c0014658:	74 0d                	je     c0014667 <SysEject(regs*)+0x32>
c001465a:	83 ec 0c             	sub    esp,0xc
c001465d:	51                   	push   ecx
c001465e:	e8 db 63 ff ff       	call   c000aa3e <LogicalDisk::eject()>
c0014663:	83 c4 10             	add    esp,0x10
c0014666:	99                   	cdq    
c0014667:	83 c4 0c             	add    esp,0xc
c001466a:	c3                   	ret    

c001466b <SysExit(regs*)>:
c001466b:	83 ec 18             	sub    esp,0x18
c001466e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014672:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014675:	e8 a6 2f 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c001467a:	83 c8 ff             	or     eax,0xffffffff
c001467d:	83 c4 1c             	add    esp,0x1c
c0014680:	89 c2                	mov    edx,eax
c0014682:	c3                   	ret    

c0014683 <SysGetCwd(regs*)>:
c0014683:	83 ec 10             	sub    esp,0x10
c0014686:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001468a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001468d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014695:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014698:	e8 81 37 ff ff       	call   c0007e1e <Fs::getcwd(Process*, char*, int)>
c001469d:	83 c4 1c             	add    esp,0x1c
c00146a0:	99                   	cdq    
c00146a1:	c3                   	ret    

c00146a2 <SysGetPID(regs*)>:
c00146a2:	83 ec 14             	sub    esp,0x14
c00146a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146ad:	ff 30                	push   DWORD PTR [eax]
c00146af:	68 c6 4a 02 c0       	push   0xc0024ac6
c00146b4:	e8 c3 28 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00146b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146be:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00146c3:	83 c4 1c             	add    esp,0x1c
c00146c6:	99                   	cdq    
c00146c7:	c3                   	ret    

c00146c8 <SysGetRAMData(regs*)>:
c00146c8:	8b 0d 7c c1 02 c0    	mov    ecx,DWORD PTR ds:0xc002c17c
c00146ce:	a1 88 c2 02 c0       	mov    eax,ds:0xc002c288
c00146d3:	03 05 78 c1 02 c0    	add    eax,DWORD PTR ds:0xc002c178
c00146d9:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00146df:	99                   	cdq    
c00146e0:	f7 f9                	idiv   ecx
c00146e2:	c1 e0 18             	shl    eax,0x18
c00146e5:	09 c8                	or     eax,ecx
c00146e7:	99                   	cdq    
c00146e8:	c3                   	ret    

c00146e9 <SysGetVGAPtr(regs*)>:
c00146e9:	55                   	push   ebp
c00146ea:	57                   	push   edi
c00146eb:	56                   	push   esi
c00146ec:	53                   	push   ebx
c00146ed:	83 ec 1c             	sub    esp,0x1c
c00146f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00146f4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00146f7:	83 f8 ff             	cmp    eax,0xffffffff
c00146fa:	74 23                	je     c001471f <SysGetVGAPtr(regs*)+0x36>
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	50                   	push   eax
c0014700:	e8 c7 29 00 00       	call   c00170cc <KeProcessFromPID(int)>
c0014705:	31 d2                	xor    edx,edx
c0014707:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	b8 01 00 00 00       	mov    eax,0x1
c0014713:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014718:	75 11                	jne    c001472b <SysGetVGAPtr(regs*)+0x42>
c001471a:	e9 80 00 00 00       	jmp    c001479f <SysGetVGAPtr(regs*)+0xb6>
c001471f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014724:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001472f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014733:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014739:	74 0c                	je     c0014747 <SysGetVGAPtr(regs*)+0x5e>
c001473b:	83 ec 0c             	sub    esp,0xc
c001473e:	55                   	push   ebp
c001473f:	e8 7b dc ff ff       	call   c00123bf <setActiveTerminal(VgaText*)>
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001474a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001474d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014752:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014754:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014757:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001475a:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c0014760:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014763:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014766:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001476c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014770:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014773:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c001477a:	c1 e8 07             	shr    eax,0x7
c001477d:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c0014783:	50                   	push   eax
c0014784:	50                   	push   eax
c0014785:	68 d5 4a 02 c0       	push   0xc0024ad5
c001478a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001478d:	05 ac 0f 00 00       	add    eax,0xfac
c0014792:	50                   	push   eax
c0014793:	e8 a8 be fe ff       	call   c0000640 <strcpy>
c0014798:	83 c4 10             	add    esp,0x10
c001479b:	31 c0                	xor    eax,eax
c001479d:	31 d2                	xor    edx,edx
c001479f:	83 c4 1c             	add    esp,0x1c
c00147a2:	5b                   	pop    ebx
c00147a3:	5e                   	pop    esi
c00147a4:	5f                   	pop    edi
c00147a5:	5d                   	pop    ebp
c00147a6:	c3                   	ret    
c00147a7:	90                   	nop

c00147a8 <SysKill(regs*)>:
c00147a8:	53                   	push   ebx
c00147a9:	83 ec 08             	sub    esp,0x8
c00147ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147b0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00147b4:	75 16                	jne    c00147cc <SysKill(regs*)+0x24>
c00147b6:	83 ec 0c             	sub    esp,0xc
c00147b9:	68 df 4a 02 c0       	push   0xc0024adf
c00147be:	e8 31 b5 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	e9 89 00 00 00       	jmp    c0014854 <SysKill(regs*)+0xac>
c00147cb:	90                   	nop
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	68 8c ca 02 c0       	push   0xc002ca8c
c00147d4:	e8 df d5 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147d9:	8d 76 00             	lea    esi,[esi+0x0]
c00147dc:	83 c4 10             	add    esp,0x10
c00147df:	85 c0                	test   eax,eax
c00147e1:	74 19                	je     c00147fc <SysKill(regs*)+0x54>
c00147e3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00147e6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00147e9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00147eb:	74 33                	je     c0014820 <SysKill(regs*)+0x78>
c00147ed:	52                   	push   edx
c00147ee:	52                   	push   edx
c00147ef:	50                   	push   eax
c00147f0:	68 8c ca 02 c0       	push   0xc002ca8c
c00147f5:	e8 ca da 00 00       	call   c00222c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00147fa:	eb e0                	jmp    c00147dc <SysKill(regs*)+0x34>
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	68 80 ca 02 c0       	push   0xc002ca80
c0014804:	e8 af d5 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014809:	8d 76 00             	lea    esi,[esi+0x0]
c001480c:	83 c4 10             	add    esp,0x10
c001480f:	85 c0                	test   eax,eax
c0014811:	74 41                	je     c0014854 <SysKill(regs*)+0xac>
c0014813:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014816:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014819:	39 0a                	cmp    DWORD PTR [edx],ecx
c001481b:	75 27                	jne    c0014844 <SysKill(regs*)+0x9c>
c001481d:	8d 76 00             	lea    esi,[esi+0x0]
c0014820:	51                   	push   ecx
c0014821:	51                   	push   ecx
c0014822:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014825:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001482a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001482d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014833:	e8 83 c7 ff ff       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c0014838:	83 c4 10             	add    esp,0x10
c001483b:	31 c0                	xor    eax,eax
c001483d:	31 d2                	xor    edx,edx
c001483f:	eb 1b                	jmp    c001485c <SysKill(regs*)+0xb4>
c0014841:	8d 76 00             	lea    esi,[esi+0x0]
c0014844:	52                   	push   edx
c0014845:	52                   	push   edx
c0014846:	50                   	push   eax
c0014847:	68 80 ca 02 c0       	push   0xc002ca80
c001484c:	e8 73 da 00 00       	call   c00222c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014851:	eb b9                	jmp    c001480c <SysKill(regs*)+0x64>
c0014853:	90                   	nop
c0014854:	83 c8 ff             	or     eax,0xffffffff
c0014857:	89 c2                	mov    edx,eax
c0014859:	8d 76 00             	lea    esi,[esi+0x0]
c001485c:	83 c4 08             	add    esp,0x8
c001485f:	5b                   	pop    ebx
c0014860:	c3                   	ret    

c0014861 <SysLoadDLL(regs*)>:
c0014861:	56                   	push   esi
c0014862:	53                   	push   ebx
c0014863:	31 d2                	xor    edx,edx
c0014865:	51                   	push   ecx
c0014866:	b8 01 00 00 00       	mov    eax,0x1
c001486b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001486f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014873:	0f 84 8c 00 00 00    	je     c0014905 <SysLoadDLL(regs*)+0xa4>
c0014879:	83 ec 0c             	sub    esp,0xc
c001487c:	68 14 01 00 00       	push   0x114
c0014881:	e8 11 b0 ff ff       	call   c000f897 <malloc>
c0014886:	83 c4 0c             	add    esp,0xc
c0014889:	89 c3                	mov    ebx,eax
c001488b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014890:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014893:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014896:	53                   	push   ebx
c0014897:	e8 ee 38 ff ff       	call   c000818a <File::File(char const*, Process*)>
c001489c:	83 c4 10             	add    esp,0x10
c001489f:	31 d2                	xor    edx,edx
c00148a1:	b8 02 00 00 00       	mov    eax,0x2
c00148a6:	85 db                	test   ebx,ebx
c00148a8:	74 5b                	je     c0014905 <SysLoadDLL(regs*)+0xa4>
c00148aa:	83 ec 0c             	sub    esp,0xc
c00148ad:	53                   	push   ebx
c00148ae:	e8 b9 3b ff ff       	call   c000846c <File::exists()>
c00148b3:	83 c4 10             	add    esp,0x10
c00148b6:	84 c0                	test   al,al
c00148b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148ba:	75 11                	jne    c00148cd <SysLoadDLL(regs*)+0x6c>
c00148bc:	83 ec 0c             	sub    esp,0xc
c00148bf:	53                   	push   ebx
c00148c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148c3:	83 c4 10             	add    esp,0x10
c00148c6:	b8 03 00 00 00       	mov    eax,0x3
c00148cb:	eb 36                	jmp    c0014903 <SysLoadDLL(regs*)+0xa2>
c00148cd:	83 ec 0c             	sub    esp,0xc
c00148d0:	53                   	push   ebx
c00148d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148d4:	58                   	pop    eax
c00148d5:	5a                   	pop    edx
c00148d6:	6a 00                	push   0x0
c00148d8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00148db:	e8 9a 19 00 00       	call   c001627a <Thr::loadDLL(char const*, bool)>
c00148e0:	83 c4 10             	add    esp,0x10
c00148e3:	89 c1                	mov    ecx,eax
c00148e5:	31 d2                	xor    edx,edx
c00148e7:	b8 04 00 00 00       	mov    eax,0x4
c00148ec:	85 c9                	test   ecx,ecx
c00148ee:	74 15                	je     c0014905 <SysLoadDLL(regs*)+0xa4>
c00148f0:	53                   	push   ebx
c00148f1:	53                   	push   ebx
c00148f2:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c00148f8:	51                   	push   ecx
c00148f9:	e8 ce 1b 00 00       	call   c00164cc <Thr::executeDLL(unsigned long, void*)>
c00148fe:	83 c4 10             	add    esp,0x10
c0014901:	31 c0                	xor    eax,eax
c0014903:	31 d2                	xor    edx,edx
c0014905:	59                   	pop    ecx
c0014906:	5b                   	pop    ebx
c0014907:	5e                   	pop    esi
c0014908:	c3                   	ret    

c0014909 <SysPause(regs*)>:
c0014909:	83 ec 18             	sub    esp,0x18
c001490c:	6a 08                	push   0x8
c001490e:	e8 cd 25 00 00       	call   c0016ee0 <blockTask(TaskState)>
c0014913:	31 c0                	xor    eax,eax
c0014915:	31 d2                	xor    edx,edx
c0014917:	83 c4 1c             	add    esp,0x1c
c001491a:	c3                   	ret    

c001491b <SysPthreadCreate(regs*)>:
c001491b:	83 ec 18             	sub    esp,0x18
c001491e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014923:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014926:	e8 8d 23 00 00       	call   c0016cb8 <Process::createUserThread()>
c001492b:	31 c0                	xor    eax,eax
c001492d:	31 d2                	xor    edx,edx
c001492f:	83 c4 1c             	add    esp,0x1c
c0014932:	c3                   	ret    

c0014933 <SysPthreadGetTID(regs*)>:
c0014933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014938:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001493b:	99                   	cdq    
c001493c:	c3                   	ret    

c001493d <SysInternalPthreadGetContext(regs*)>:
c001493d:	31 c0                	xor    eax,eax
c001493f:	31 d2                	xor    edx,edx
c0014941:	c3                   	ret    

c0014942 <SysInternalPthreadGetStartLocation(regs*)>:
c0014942:	31 c0                	xor    eax,eax
c0014944:	31 d2                	xor    edx,edx
c0014946:	c3                   	ret    

c0014947 <SysPthreadJoin(regs*)>:
c0014947:	31 c0                	xor    eax,eax
c0014949:	31 d2                	xor    edx,edx
c001494b:	c3                   	ret    

c001494c <SysPthreadExit(regs*)>:
c001494c:	83 ec 18             	sub    esp,0x18
c001494f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014953:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014956:	e8 c5 2c 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c001495b:	83 c8 ff             	or     eax,0xffffffff
c001495e:	83 c4 1c             	add    esp,0x1c
c0014961:	89 c2                	mov    edx,eax
c0014963:	c3                   	ret    

c0014964 <SysRead(regs*)>:
c0014964:	57                   	push   edi
c0014965:	56                   	push   esi
c0014966:	53                   	push   ebx
c0014967:	83 ec 10             	sub    esp,0x10
c001496a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001496e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014971:	83 f8 02             	cmp    eax,0x2
c0014974:	77 10                	ja     c0014986 <SysRead(regs*)+0x22>
c0014976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001497e:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014984:	eb 0e                	jmp    c0014994 <SysRead(regs*)+0x30>
c0014986:	83 ec 0c             	sub    esp,0xc
c0014989:	50                   	push   eax
c001498a:	e8 4a e8 ff ff       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c001498f:	83 c4 10             	add    esp,0x10
c0014992:	89 c1                	mov    ecx,eax
c0014994:	83 c8 ff             	or     eax,0xffffffff
c0014997:	85 c9                	test   ecx,ecx
c0014999:	89 c2                	mov    edx,eax
c001499b:	74 28                	je     c00149c5 <SysRead(regs*)+0x61>
c001499d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00149a5:	31 ff                	xor    edi,edi
c00149a7:	83 ec 0c             	sub    esp,0xc
c00149aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00149ac:	8d 54 24 18          	lea    edx,[esp+0x18]
c00149b0:	52                   	push   edx
c00149b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149b4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00149b7:	57                   	push   edi
c00149b8:	56                   	push   esi
c00149b9:	51                   	push   ecx
c00149ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00149bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00149c1:	83 c4 20             	add    esp,0x20
c00149c4:	99                   	cdq    
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	5b                   	pop    ebx
c00149c9:	5e                   	pop    esi
c00149ca:	5f                   	pop    edi
c00149cb:	c3                   	ret    

c00149cc <SysRegisterSignal(regs*)>:
c00149cc:	83 ec 18             	sub    esp,0x18
c00149cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d3:	6a 00                	push   0x0
c00149d5:	6a 00                	push   0x0
c00149d7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00149da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149e5:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c00149eb:	e8 95 c5 ff ff       	call   c0010f85 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00149f0:	83 c4 2c             	add    esp,0x2c
c00149f3:	99                   	cdq    
c00149f4:	c3                   	ret    

c00149f5 <SysRegistryGetTypeFromPath(regs*)>:
c00149f5:	53                   	push   ebx
c00149f6:	81 ec 40 01 00 00    	sub    esp,0x140
c00149fc:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014a03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a06:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a09:	e8 f6 95 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a0e:	83 c4 10             	add    esp,0x10
c0014a11:	89 c1                	mov    ecx,eax
c0014a13:	85 c0                	test   eax,eax
c0014a15:	74 15                	je     c0014a2c <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014a17:	50                   	push   eax
c0014a18:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014a1c:	50                   	push   eax
c0014a1d:	51                   	push   ecx
c0014a1e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a21:	e8 c2 91 ff ff       	call   c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014a26:	83 c4 10             	add    esp,0x10
c0014a29:	99                   	cdq    
c0014a2a:	eb 05                	jmp    c0014a31 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014a2c:	83 c8 ff             	or     eax,0xffffffff
c0014a2f:	89 c2                	mov    edx,eax
c0014a31:	81 c4 38 01 00 00    	add    esp,0x138
c0014a37:	5b                   	pop    ebx
c0014a38:	c3                   	ret    

c0014a39 <SysRegistryReadExtent(regs*)>:
c0014a39:	83 ec 1c             	sub    esp,0x1c
c0014a3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a40:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014a43:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014a46:	85 c0                	test   eax,eax
c0014a48:	79 1f                	jns    c0014a69 <SysRegistryReadExtent(regs*)+0x30>
c0014a4a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014a4f:	52                   	push   edx
c0014a50:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014a54:	52                   	push   edx
c0014a55:	50                   	push   eax
c0014a56:	51                   	push   ecx
c0014a57:	e8 7e 90 ff ff       	call   c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014a5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014a64:	83 c4 10             	add    esp,0x10
c0014a67:	eb 14                	jmp    c0014a7d <SysRegistryReadExtent(regs*)+0x44>
c0014a69:	83 ec 04             	sub    esp,0x4
c0014a6c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014a6f:	50                   	push   eax
c0014a70:	51                   	push   ecx
c0014a71:	e8 fe 8a ff ff       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0014a76:	83 c4 10             	add    esp,0x10
c0014a79:	31 c0                	xor    eax,eax
c0014a7b:	31 d2                	xor    edx,edx
c0014a7d:	83 c4 1c             	add    esp,0x1c
c0014a80:	c3                   	ret    

c0014a81 <SysRegistryPathToExtentLookup(regs*)>:
c0014a81:	83 ec 14             	sub    esp,0x14
c0014a84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a88:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014a8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014a8e:	e8 71 95 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014a93:	83 c4 1c             	add    esp,0x1c
c0014a96:	99                   	cdq    
c0014a97:	c3                   	ret    

c0014a98 <SysRegistryEnterDirectory(regs*)>:
c0014a98:	83 ec 14             	sub    esp,0x14
c0014a9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a9f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014aa2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014aa5:	e8 41 8b ff ff       	call   c000d5eb <CmEnterDirectory(Reghive_Tag*, int)>
c0014aaa:	83 c4 1c             	add    esp,0x1c
c0014aad:	99                   	cdq    
c0014aae:	c3                   	ret    

c0014aaf <SysRegistryGetNext(regs*)>:
c0014aaf:	83 ec 14             	sub    esp,0x14
c0014ab2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ab6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014ab9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014abc:	e8 69 8b ff ff       	call   c000d62a <CmGetNext(Reghive_Tag*, int)>
c0014ac1:	83 c4 1c             	add    esp,0x1c
c0014ac4:	99                   	cdq    
c0014ac5:	c3                   	ret    

c0014ac6 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014ac6:	57                   	push   edi
c0014ac7:	56                   	push   esi
c0014ac8:	53                   	push   ebx
c0014ac9:	81 ec 34 01 00 00    	sub    esp,0x134
c0014acf:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014ad6:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014ada:	57                   	push   edi
c0014adb:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ade:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ae1:	e8 02 91 ff ff       	call   c000dbe8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014ae6:	89 c3                	mov    ebx,eax
c0014ae8:	58                   	pop    eax
c0014ae9:	5a                   	pop    edx
c0014aea:	57                   	push   edi
c0014aeb:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014aee:	e8 4d bb fe ff       	call   c0000640 <strcpy>
c0014af3:	89 d8                	mov    eax,ebx
c0014af5:	81 c4 40 01 00 00    	add    esp,0x140
c0014afb:	99                   	cdq    
c0014afc:	5b                   	pop    ebx
c0014afd:	5e                   	pop    esi
c0014afe:	5f                   	pop    edi
c0014aff:	c3                   	ret    

c0014b00 <SysRegistryOpen(regs*)>:
c0014b00:	83 ec 18             	sub    esp,0x18
c0014b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b07:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b0a:	e8 f5 88 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014b0f:	83 c4 1c             	add    esp,0x1c
c0014b12:	99                   	cdq    
c0014b13:	c3                   	ret    

c0014b14 <SysRegistryClose(regs*)>:
c0014b14:	83 ec 18             	sub    esp,0x18
c0014b17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b1b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b1e:	e8 ff 89 ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014b23:	31 c0                	xor    eax,eax
c0014b25:	31 d2                	xor    edx,edx
c0014b27:	83 c4 1c             	add    esp,0x1c
c0014b2a:	c3                   	ret    

c0014b2b <SysRegistryEasyReadString(regs*)>:
c0014b2b:	57                   	push   edi
c0014b2c:	56                   	push   esi
c0014b2d:	53                   	push   ebx
c0014b2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b32:	83 ec 0c             	sub    esp,0xc
c0014b35:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014b38:	e8 c7 88 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014b3d:	5a                   	pop    edx
c0014b3e:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014b41:	59                   	pop    ecx
c0014b42:	89 c3                	mov    ebx,eax
c0014b44:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b47:	50                   	push   eax
c0014b48:	e8 b7 94 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b4d:	83 c4 10             	add    esp,0x10
c0014b50:	89 c1                	mov    ecx,eax
c0014b52:	b8 01 00 00 00       	mov    eax,0x1
c0014b57:	85 c9                	test   ecx,ecx
c0014b59:	7e 16                	jle    c0014b71 <SysRegistryEasyReadString(regs*)+0x46>
c0014b5b:	50                   	push   eax
c0014b5c:	57                   	push   edi
c0014b5d:	51                   	push   ecx
c0014b5e:	53                   	push   ebx
c0014b5f:	e8 10 8a ff ff       	call   c000d574 <CmGetString(Reghive_Tag*, int, char*)>
c0014b64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b67:	e8 b6 89 ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014b6c:	83 c4 10             	add    esp,0x10
c0014b6f:	31 c0                	xor    eax,eax
c0014b71:	5b                   	pop    ebx
c0014b72:	31 d2                	xor    edx,edx
c0014b74:	5e                   	pop    esi
c0014b75:	5f                   	pop    edi
c0014b76:	c3                   	ret    

c0014b77 <SysRegistryEasyReadInteger(regs*)>:
c0014b77:	56                   	push   esi
c0014b78:	53                   	push   ebx
c0014b79:	83 ec 10             	sub    esp,0x10
c0014b7c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014b80:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014b83:	e8 7c 88 ff ff       	call   c000d404 <CmOpen(char const*)>
c0014b88:	5a                   	pop    edx
c0014b89:	89 c3                	mov    ebx,eax
c0014b8b:	59                   	pop    ecx
c0014b8c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014b8f:	50                   	push   eax
c0014b90:	e8 6f 94 ff ff       	call   c000e004 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b95:	83 c4 10             	add    esp,0x10
c0014b98:	89 c1                	mov    ecx,eax
c0014b9a:	b8 01 00 00 00       	mov    eax,0x1
c0014b9f:	85 c9                	test   ecx,ecx
c0014ba1:	7e 18                	jle    c0014bbb <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ba3:	50                   	push   eax
c0014ba4:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ba7:	51                   	push   ecx
c0014ba8:	53                   	push   ebx
c0014ba9:	e8 2c 8f ff ff       	call   c000dada <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bb1:	e8 6c 89 ff ff       	call   c000d522 <CmClose(Reghive_Tag*)>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	31 c0                	xor    eax,eax
c0014bbb:	59                   	pop    ecx
c0014bbc:	31 d2                	xor    edx,edx
c0014bbe:	5b                   	pop    ebx
c0014bbf:	5e                   	pop    esi
c0014bc0:	c3                   	ret    

c0014bc1 <SysSbrk(regs*)>:
c0014bc1:	56                   	push   esi
c0014bc2:	53                   	push   ebx
c0014bc3:	50                   	push   eax
c0014bc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014bcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014bd0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014bd3:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c0014bd9:	85 db                	test   ebx,ebx
c0014bdb:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014bde:	74 02                	je     c0014be2 <SysSbrk(regs*)+0x21>
c0014be0:	79 06                	jns    c0014be8 <SysSbrk(regs*)+0x27>
c0014be2:	89 f0                	mov    eax,esi
c0014be4:	31 d2                	xor    edx,edx
c0014be6:	eb 2a                	jmp    c0014c12 <SysSbrk(regs*)+0x51>
c0014be8:	83 c8 ff             	or     eax,0xffffffff
c0014beb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014bf1:	89 c2                	mov    edx,eax
c0014bf3:	77 1d                	ja     c0014c12 <SysSbrk(regs*)+0x51>
c0014bf5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014bfb:	50                   	push   eax
c0014bfc:	c1 ea 0c             	shr    edx,0xc
c0014bff:	68 07 0c 00 00       	push   0xc07
c0014c04:	52                   	push   edx
c0014c05:	51                   	push   ecx
c0014c06:	e8 13 ef ff ff       	call   c0013b1e <VAS::allocatePages(int, int)>
c0014c0b:	89 f0                	mov    eax,esi
c0014c0d:	31 d2                	xor    edx,edx
c0014c0f:	83 c4 10             	add    esp,0x10
c0014c12:	59                   	pop    ecx
c0014c13:	5b                   	pop    ebx
c0014c14:	5e                   	pop    esi
c0014c15:	c3                   	ret    

c0014c16 <SysSetCwd(regs*)>:
c0014c16:	83 ec 14             	sub    esp,0x14
c0014c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c1d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c25:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014c28:	e8 de 38 ff ff       	call   c000850b <Fs::setcwd(Process*, char*)>
c0014c2d:	83 c4 1c             	add    esp,0x1c
c0014c30:	99                   	cdq    
c0014c31:	c3                   	ret    

c0014c32 <SysSetTime(regs*)>:
c0014c32:	55                   	push   ebp
c0014c33:	31 d2                	xor    edx,edx
c0014c35:	57                   	push   edi
c0014c36:	56                   	push   esi
c0014c37:	be 18 00 00 00       	mov    esi,0x18
c0014c3c:	53                   	push   ebx
c0014c3d:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014c42:	83 ec 20             	sub    esp,0x20
c0014c45:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014c49:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014c4c:	f7 f3                	div    ebx
c0014c4e:	89 d7                	mov    edi,edx
c0014c50:	31 d2                	xor    edx,edx
c0014c52:	f7 f3                	div    ebx
c0014c54:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014c5b:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014c60:	31 d2                	xor    edx,edx
c0014c62:	f7 f3                	div    ebx
c0014c64:	31 d2                	xor    edx,edx
c0014c66:	f7 f6                	div    esi
c0014c68:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014c6b:	89 d5                	mov    ebp,edx
c0014c6d:	89 c3                	mov    ebx,eax
c0014c6f:	be 0c 00 00 00       	mov    esi,0xc
c0014c74:	83 e3 1f             	and    ebx,0x1f
c0014c77:	c1 e8 05             	shr    eax,0x5
c0014c7a:	43                   	inc    ebx
c0014c7b:	31 d2                	xor    edx,edx
c0014c7d:	f7 f6                	div    esi
c0014c7f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014c83:	57                   	push   edi
c0014c84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014c88:	55                   	push   ebp
c0014c89:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014c8d:	56                   	push   esi
c0014c8e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c92:	53                   	push   ebx
c0014c93:	68 00 4b 02 c0       	push   0xc0024b00
c0014c98:	e8 df 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014c9d:	83 c4 1c             	add    esp,0x1c
c0014ca0:	57                   	push   edi
c0014ca1:	c1 e7 10             	shl    edi,0x10
c0014ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ca8:	55                   	push   ebp
c0014ca9:	56                   	push   esi
c0014caa:	c1 e6 10             	shl    esi,0x10
c0014cad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014cb1:	53                   	push   ebx
c0014cb2:	68 22 4b 02 c0       	push   0xc0024b22
c0014cb7:	e8 c0 22 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014cbc:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c0014cc1:	31 d2                	xor    edx,edx
c0014cc3:	8b 88 58 01 00 00    	mov    ecx,DWORD PTR [eax+0x158]
c0014cc9:	31 c0                	xor    eax,eax
c0014ccb:	88 d8                	mov    al,bl
c0014ccd:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014cd1:	0f b7 d8             	movzx  ebx,ax
c0014cd4:	09 f3                	or     ebx,esi
c0014cd6:	89 d8                	mov    eax,ebx
c0014cd8:	89 eb                	mov    ebx,ebp
c0014cda:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014cde:	88 da                	mov    dl,bl
c0014ce0:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014ce4:	83 c4 1c             	add    esp,0x1c
c0014ce7:	89 d6                	mov    esi,edx
c0014ce9:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014cef:	09 fe                	or     esi,edi
c0014cf1:	56                   	push   esi
c0014cf2:	50                   	push   eax
c0014cf3:	51                   	push   ecx
c0014cf4:	e8 83 48 ff ff       	call   c000957c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014cf9:	83 c4 2c             	add    esp,0x2c
c0014cfc:	83 f0 01             	xor    eax,0x1
c0014cff:	5b                   	pop    ebx
c0014d00:	0f b6 c0             	movzx  eax,al
c0014d03:	5e                   	pop    esi
c0014d04:	31 d2                	xor    edx,edx
c0014d06:	5f                   	pop    edi
c0014d07:	5d                   	pop    ebp
c0014d08:	c3                   	ret    

c0014d09 <SysSymlink(regs*)>:
c0014d09:	56                   	push   esi
c0014d0a:	83 c8 ff             	or     eax,0xffffffff
c0014d0d:	53                   	push   ebx
c0014d0e:	89 c2                	mov    edx,eax
c0014d10:	81 ec 34 02 00 00    	sub    esp,0x234
c0014d16:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014d1d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014d21:	74 50                	je     c0014d73 <SysSymlink(regs*)+0x6a>
c0014d23:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014d26:	85 c9                	test   ecx,ecx
c0014d28:	74 49                	je     c0014d73 <SysSymlink(regs*)+0x6a>
c0014d2a:	6a 01                	push   0x1
c0014d2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d34:	05 0c 01 00 00       	add    eax,0x10c
c0014d39:	50                   	push   eax
c0014d3a:	51                   	push   ecx
c0014d3b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014d3f:	56                   	push   esi
c0014d40:	e8 2d 31 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014d45:	6a 01                	push   0x1
c0014d47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d4f:	05 0c 01 00 00       	add    eax,0x10c
c0014d54:	50                   	push   eax
c0014d55:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d58:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014d5f:	53                   	push   ebx
c0014d60:	e8 0d 31 ff ff       	call   c0007e72 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014d65:	83 c4 18             	add    esp,0x18
c0014d68:	56                   	push   esi
c0014d69:	53                   	push   ebx
c0014d6a:	e8 31 2d ff ff       	call   c0007aa0 <KeCreateSymlink(char const*, char const*)>
c0014d6f:	83 c4 10             	add    esp,0x10
c0014d72:	99                   	cdq    
c0014d73:	81 c4 34 02 00 00    	add    esp,0x234
c0014d79:	5b                   	pop    ebx
c0014d7a:	5e                   	pop    esi
c0014d7b:	c3                   	ret    

c0014d7c <SysTimezone(regs*)>:
c0014d7c:	83 ec 0c             	sub    esp,0xc
c0014d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d83:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014d87:	75 17                	jne    c0014da0 <SysTimezone(regs*)+0x24>
c0014d89:	83 ec 0c             	sub    esp,0xc
c0014d8c:	68 44 4b 02 c0       	push   0xc0024b44
c0014d91:	e8 e6 21 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0014d96:	83 c8 ff             	or     eax,0xffffffff
c0014d99:	83 c4 10             	add    esp,0x10
c0014d9c:	89 c2                	mov    edx,eax
c0014d9e:	eb 16                	jmp    c0014db6 <SysTimezone(regs*)+0x3a>
c0014da0:	83 ec 0c             	sub    esp,0xc
c0014da3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014da6:	e8 5e 42 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014dab:	31 d2                	xor    edx,edx
c0014dad:	83 f0 01             	xor    eax,0x1
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	0f b6 c0             	movzx  eax,al
c0014db6:	83 c4 0c             	add    esp,0xc
c0014db9:	c3                   	ret    

c0014dba <SysTruncate(regs*)>:
c0014dba:	55                   	push   ebp
c0014dbb:	57                   	push   edi
c0014dbc:	31 ff                	xor    edi,edi
c0014dbe:	56                   	push   esi
c0014dbf:	53                   	push   ebx
c0014dc0:	83 ec 0c             	sub    esp,0xc
c0014dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014dca:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014dcd:	89 ce                	mov    esi,ecx
c0014dcf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014dd3:	0f 84 9a 00 00 00    	je     c0014e73 <SysTruncate(regs*)+0xb9>
c0014dd9:	83 ec 0c             	sub    esp,0xc
c0014ddc:	68 14 01 00 00       	push   0x114
c0014de1:	e8 b1 aa ff ff       	call   c000f897 <malloc>
c0014de6:	83 c4 0c             	add    esp,0xc
c0014de9:	89 c3                	mov    ebx,eax
c0014deb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014df0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014df3:	55                   	push   ebp
c0014df4:	53                   	push   ebx
c0014df5:	e8 90 33 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0014dfa:	83 c4 10             	add    esp,0x10
c0014dfd:	31 d2                	xor    edx,edx
c0014dff:	b8 03 00 00 00       	mov    eax,0x3
c0014e04:	85 db                	test   ebx,ebx
c0014e06:	0f 84 a2 00 00 00    	je     c0014eae <SysTruncate(regs*)+0xf4>
c0014e0c:	51                   	push   ecx
c0014e0d:	51                   	push   ecx
c0014e0e:	6a 02                	push   0x2
c0014e10:	53                   	push   ebx
c0014e11:	e8 92 33 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0014e16:	83 c4 10             	add    esp,0x10
c0014e19:	85 c0                	test   eax,eax
c0014e1b:	74 13                	je     c0014e30 <SysTruncate(regs*)+0x76>
c0014e1d:	83 ec 0c             	sub    esp,0xc
c0014e20:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e22:	53                   	push   ebx
c0014e23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e26:	83 c4 10             	add    esp,0x10
c0014e29:	b8 04 00 00 00       	mov    eax,0x4
c0014e2e:	eb 7c                	jmp    c0014eac <SysTruncate(regs*)+0xf2>
c0014e30:	52                   	push   edx
c0014e31:	57                   	push   edi
c0014e32:	56                   	push   esi
c0014e33:	53                   	push   ebx
c0014e34:	e8 83 34 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014e39:	83 c4 10             	add    esp,0x10
c0014e3c:	85 c0                	test   eax,eax
c0014e3e:	74 1b                	je     c0014e5b <SysTruncate(regs*)+0xa1>
c0014e40:	83 ec 0c             	sub    esp,0xc
c0014e43:	53                   	push   ebx
c0014e44:	e8 bd 33 ff ff       	call   c0008206 <File::close()>
c0014e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e51:	83 c4 10             	add    esp,0x10
c0014e54:	b8 05 00 00 00       	mov    eax,0x5
c0014e59:	eb 51                	jmp    c0014eac <SysTruncate(regs*)+0xf2>
c0014e5b:	83 ec 0c             	sub    esp,0xc
c0014e5e:	53                   	push   ebx
c0014e5f:	e8 a2 33 ff ff       	call   c0008206 <File::close()>
c0014e64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e6c:	83 c4 10             	add    esp,0x10
c0014e6f:	31 c0                	xor    eax,eax
c0014e71:	eb 39                	jmp    c0014eac <SysTruncate(regs*)+0xf2>
c0014e73:	31 d2                	xor    edx,edx
c0014e75:	b8 01 00 00 00       	mov    eax,0x1
c0014e7a:	83 fd 02             	cmp    ebp,0x2
c0014e7d:	7e 2f                	jle    c0014eae <SysTruncate(regs*)+0xf4>
c0014e7f:	83 ec 0c             	sub    esp,0xc
c0014e82:	51                   	push   ecx
c0014e83:	e8 51 e3 ff ff       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	89 c1                	mov    ecx,eax
c0014e8d:	31 d2                	xor    edx,edx
c0014e8f:	b8 02 00 00 00       	mov    eax,0x2
c0014e94:	85 c9                	test   ecx,ecx
c0014e96:	74 16                	je     c0014eae <SysTruncate(regs*)+0xf4>
c0014e98:	50                   	push   eax
c0014e99:	57                   	push   edi
c0014e9a:	56                   	push   esi
c0014e9b:	51                   	push   ecx
c0014e9c:	e8 1b 34 ff ff       	call   c00082bc <File::truncate(unsigned long long)>
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	85 c0                	test   eax,eax
c0014ea6:	0f 95 c0             	setne  al
c0014ea9:	0f b6 c0             	movzx  eax,al
c0014eac:	31 d2                	xor    edx,edx
c0014eae:	83 c4 0c             	add    esp,0xc
c0014eb1:	5b                   	pop    ebx
c0014eb2:	5e                   	pop    esi
c0014eb3:	5f                   	pop    edi
c0014eb4:	5d                   	pop    ebp
c0014eb5:	c3                   	ret    

c0014eb6 <SysWrite(regs*)>:
c0014eb6:	57                   	push   edi
c0014eb7:	56                   	push   esi
c0014eb8:	53                   	push   ebx
c0014eb9:	83 ec 10             	sub    esp,0x10
c0014ebc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014ec0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014ec3:	83 f8 02             	cmp    eax,0x2
c0014ec6:	77 10                	ja     c0014ed8 <SysWrite(regs*)+0x22>
c0014ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ecd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ed0:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014ed6:	eb 0e                	jmp    c0014ee6 <SysWrite(regs*)+0x30>
c0014ed8:	83 ec 0c             	sub    esp,0xc
c0014edb:	50                   	push   eax
c0014edc:	e8 f8 e2 ff ff       	call   c00131d9 <KeGetFileFromDescriptor(int)>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	89 c1                	mov    ecx,eax
c0014ee6:	83 c8 ff             	or     eax,0xffffffff
c0014ee9:	85 c9                	test   ecx,ecx
c0014eeb:	89 c2                	mov    edx,eax
c0014eed:	74 28                	je     c0014f17 <SysWrite(regs*)+0x61>
c0014eef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ef7:	31 ff                	xor    edi,edi
c0014ef9:	83 ec 0c             	sub    esp,0xc
c0014efc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014efe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014f02:	52                   	push   edx
c0014f03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014f06:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014f09:	57                   	push   edi
c0014f0a:	56                   	push   esi
c0014f0b:	51                   	push   ecx
c0014f0c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014f0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f13:	83 c4 20             	add    esp,0x20
c0014f16:	99                   	cdq    
c0014f17:	83 c4 10             	add    esp,0x10
c0014f1a:	5b                   	pop    ebx
c0014f1b:	5e                   	pop    esi
c0014f1c:	5f                   	pop    edi
c0014f1d:	c3                   	ret    

c0014f1e <SysWsbe(regs*)>:
c0014f1e:	55                   	push   ebp
c0014f1f:	57                   	push   edi
c0014f20:	56                   	push   esi
c0014f21:	53                   	push   ebx
c0014f22:	83 ec 3c             	sub    esp,0x3c
c0014f25:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014f29:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014f30:	75 2d                	jne    c0014f5f <SysWsbe(regs*)+0x41>
c0014f32:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014f39:	75 24                	jne    c0014f5f <SysWsbe(regs*)+0x41>
c0014f3b:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014f42:	75 1b                	jne    c0014f5f <SysWsbe(regs*)+0x41>
c0014f44:	6a 01                	push   0x1
c0014f46:	6a 00                	push   0x0
c0014f48:	68 79 9f 00 c0       	push   0xc0009f79
c0014f4d:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c0014f53:	e8 08 1c 00 00       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c0014f58:	83 c4 10             	add    esp,0x10
c0014f5b:	31 c0                	xor    eax,eax
c0014f5d:	eb 52                	jmp    c0014fb1 <SysWsbe(regs*)+0x93>
c0014f5f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014f63:	be 59 4b 02 c0       	mov    esi,0xc0024b59
c0014f68:	b9 0b 00 00 00       	mov    ecx,0xb
c0014f6d:	fc                   	cld    
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014f73:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014f77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f7f:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014f85:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f87:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014f8a:	57                   	push   edi
c0014f8b:	e8 e0 b5 fe ff       	call   c0000570 <strlen>
c0014f90:	5a                   	pop    edx
c0014f91:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014f95:	52                   	push   edx
c0014f96:	31 d2                	xor    edx,edx
c0014f98:	57                   	push   edi
c0014f99:	52                   	push   edx
c0014f9a:	50                   	push   eax
c0014f9b:	56                   	push   esi
c0014f9c:	ff d5                	call   ebp
c0014f9e:	83 c4 14             	add    esp,0x14
c0014fa1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014fa4:	e8 77 26 00 00       	call   c0017620 <KeTerminateCurrentThread(int)>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014fb1:	83 c4 3c             	add    esp,0x3c
c0014fb4:	31 d2                	xor    edx,edx
c0014fb6:	5b                   	pop    ebx
c0014fb7:	5e                   	pop    esi
c0014fb8:	5f                   	pop    edi
c0014fb9:	5d                   	pop    ebp
c0014fba:	c3                   	ret    

c0014fbb <SysYield(regs*)>:
c0014fbb:	83 ec 0c             	sub    esp,0xc
c0014fbe:	fa                   	cli    
c0014fbf:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0014fc5:	e8 56 1e 00 00       	call   c0016e20 <schedule()>
c0014fca:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c0014fd1:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c0014fd8:	75 01                	jne    c0014fdb <SysYield(regs*)+0x20>
c0014fda:	fb                   	sti    
c0014fdb:	31 c0                	xor    eax,eax
c0014fdd:	31 d2                	xor    edx,edx
c0014fdf:	83 c4 0c             	add    esp,0xc
c0014fe2:	c3                   	ret    
c0014fe3:	90                   	nop

c0014fe4 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014fe4:	55                   	push   ebp
c0014fe5:	57                   	push   edi
c0014fe6:	56                   	push   esi
c0014fe7:	53                   	push   ebx
c0014fe8:	83 ec 2c             	sub    esp,0x2c
c0014feb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ff3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014ff7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ffb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014fff:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0015002:	0f b6 4a 67          	movzx  ecx,BYTE PTR [edx+0x67]
c0015006:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c001500a:	c1 e0 08             	shl    eax,0x8
c001500d:	09 c1                	or     ecx,eax
c001500f:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015013:	c1 e0 10             	shl    eax,0x10
c0015016:	09 c1                	or     ecx,eax
c0015018:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001501c:	83 e0 7f             	and    eax,0x7f
c001501f:	c1 e0 18             	shl    eax,0x18
c0015022:	09 c8                	or     eax,ecx
c0015024:	89 c5                	mov    ebp,eax
c0015026:	89 f8                	mov    eax,edi
c0015028:	80 f4 00             	xor    ah,0x0
c001502b:	89 c3                	mov    ebx,eax
c001502d:	89 e8                	mov    eax,ebp
c001502f:	80 f4 00             	xor    ah,0x0
c0015032:	89 c6                	mov    esi,eax
c0015034:	89 f0                	mov    eax,esi
c0015036:	09 d8                	or     eax,ebx
c0015038:	74 42                	je     c001507c <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c001503a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001503e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0015041:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0015045:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0015049:	c1 e0 08             	shl    eax,0x8
c001504c:	09 c6                	or     esi,eax
c001504e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0015052:	c1 e0 10             	shl    eax,0x10
c0015055:	09 c6                	or     esi,eax
c0015057:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c001505b:	83 e0 7f             	and    eax,0x7f
c001505e:	c1 e0 18             	shl    eax,0x18
c0015061:	09 f0                	or     eax,esi
c0015063:	89 c3                	mov    ebx,eax
c0015065:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001506a:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015070:	29 c1                	sub    ecx,eax
c0015072:	19 d3                	sbb    ebx,edx
c0015074:	89 c8                	mov    eax,ecx
c0015076:	89 da                	mov    edx,ebx
c0015078:	eb 0e                	jmp    c0015088 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c001507a:	66 90                	xchg   ax,ax
c001507c:	b8 00 00 00 00       	mov    eax,0x0
c0015081:	ba 00 00 00 00       	mov    edx,0x0
c0015086:	66 90                	xchg   ax,ax
c0015088:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001508c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015094:	80 f4 00             	xor    ah,0x0
c0015097:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001509b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001509f:	80 f4 00             	xor    ah,0x0
c00150a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150a6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00150aa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00150ae:	89 e8                	mov    eax,ebp
c00150b0:	09 f8                	or     eax,edi
c00150b2:	74 30                	je     c00150e4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c00150b4:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c00150ba:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c00150c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150c8:	01 c8                	add    eax,ecx
c00150ca:	11 da                	adc    edx,ebx
c00150cc:	89 c6                	mov    esi,eax
c00150ce:	83 e6 ff             	and    esi,0xffffffff
c00150d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00150d4:	89 d0                	mov    eax,edx
c00150d6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00150db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150df:	eb 13                	jmp    c00150f4 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c00150e1:	8d 76 00             	lea    esi,[esi+0x0]
c00150e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00150eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00150f3:	90                   	nop
c00150f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00150f8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00150fb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00150ff:	89 cf                	mov    edi,ecx
c0015101:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0015104:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015107:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001510b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0015110:	8a 48 67             	mov    cl,BYTE PTR [eax+0x67]
c0015113:	83 e1 00             	and    ecx,0x0
c0015116:	09 ca                	or     edx,ecx
c0015118:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c001511b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001511f:	c1 ea 08             	shr    edx,0x8
c0015122:	0f b6 d2             	movzx  edx,dl
c0015125:	8a 48 68             	mov    cl,BYTE PTR [eax+0x68]
c0015128:	83 e1 00             	and    ecx,0x0
c001512b:	09 ca                	or     edx,ecx
c001512d:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0015130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015134:	c1 ea 10             	shr    edx,0x10
c0015137:	0f b6 d2             	movzx  edx,dl
c001513a:	8a 48 69             	mov    cl,BYTE PTR [eax+0x69]
c001513d:	83 e1 00             	and    ecx,0x0
c0015140:	09 ca                	or     edx,ecx
c0015142:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015145:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015149:	c1 ea 18             	shr    edx,0x18
c001514c:	83 e2 7f             	and    edx,0x7f
c001514f:	89 d3                	mov    ebx,edx
c0015151:	83 e3 7f             	and    ebx,0x7f
c0015154:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015157:	83 e2 80             	and    edx,0xffffff80
c001515a:	88 d1                	mov    cl,dl
c001515c:	88 da                	mov    dl,bl
c001515e:	09 ca                	or     edx,ecx
c0015160:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0015163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015167:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001516b:	83 c4 2c             	add    esp,0x2c
c001516e:	5b                   	pop    ebx
c001516f:	5e                   	pop    esi
c0015170:	5f                   	pop    edi
c0015171:	5d                   	pop    ebp
c0015172:	c3                   	ret    
c0015173:	90                   	nop

c0015174 <KeCheckAlarm(ThreadControlBlock*)>:
c0015174:	55                   	push   ebp
c0015175:	57                   	push   edi
c0015176:	56                   	push   esi
c0015177:	53                   	push   ebx
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001517f:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0015182:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0015186:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c001518a:	c1 e5 08             	shl    ebp,0x8
c001518d:	09 fd                	or     ebp,edi
c001518f:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0015193:	c1 e7 10             	shl    edi,0x10
c0015196:	09 ef                	or     edi,ebp
c0015198:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c001519c:	83 e0 7f             	and    eax,0x7f
c001519f:	c1 e0 18             	shl    eax,0x18
c00151a2:	09 f8                	or     eax,edi
c00151a4:	89 c1                	mov    ecx,eax
c00151a6:	89 d0                	mov    eax,edx
c00151a8:	80 f4 00             	xor    ah,0x0
c00151ab:	89 c3                	mov    ebx,eax
c00151ad:	89 c8                	mov    eax,ecx
c00151af:	80 f4 00             	xor    ah,0x0
c00151b2:	89 c6                	mov    esi,eax
c00151b4:	89 f0                	mov    eax,esi
c00151b6:	09 d8                	or     eax,ebx
c00151b8:	0f 84 9e 00 00 00    	je     c001525c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c00151be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00151c2:	8b 41 63             	mov    eax,DWORD PTR [ecx+0x63]
c00151c5:	0f b6 59 67          	movzx  ebx,BYTE PTR [ecx+0x67]
c00151c9:	0f b6 71 68          	movzx  esi,BYTE PTR [ecx+0x68]
c00151cd:	c1 e6 08             	shl    esi,0x8
c00151d0:	09 de                	or     esi,ebx
c00151d2:	0f b6 59 69          	movzx  ebx,BYTE PTR [ecx+0x69]
c00151d6:	c1 e3 10             	shl    ebx,0x10
c00151d9:	09 f3                	or     ebx,esi
c00151db:	0f b6 49 6a          	movzx  ecx,BYTE PTR [ecx+0x6a]
c00151df:	83 e1 7f             	and    ecx,0x7f
c00151e2:	c1 e1 18             	shl    ecx,0x18
c00151e5:	09 d9                	or     ecx,ebx
c00151e7:	89 ca                	mov    edx,ecx
c00151e9:	89 c1                	mov    ecx,eax
c00151eb:	89 d3                	mov    ebx,edx
c00151ed:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00151f2:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00151f8:	39 c8                	cmp    eax,ecx
c00151fa:	89 d0                	mov    eax,edx
c00151fc:	19 d8                	sbb    eax,ebx
c00151fe:	72 5c                	jb     c001525c <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0015200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015204:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c001520b:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c001520e:	83 e2 00             	and    edx,0x0
c0015211:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0015214:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0015217:	83 e2 00             	and    edx,0x0
c001521a:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c001521d:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0015220:	83 e2 00             	and    edx,0x0
c0015223:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0015226:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0015229:	83 e2 80             	and    edx,0xffffff80
c001522c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c001522f:	83 ec 0c             	sub    esp,0xc
c0015232:	68 85 4b 02 c0       	push   0xc0024b85
c0015237:	e8 40 1d ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015243:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015246:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c001524c:	83 ec 08             	sub    esp,0x8
c001524f:	6a 0e                	push   0xe
c0015251:	50                   	push   eax
c0015252:	e8 64 bd ff ff       	call   c0010fbb <KeRaiseSignal(SigHandlerBlock*, int)>
c0015257:	83 c4 10             	add    esp,0x10
c001525a:	66 90                	xchg   ax,ax
c001525c:	90                   	nop
c001525d:	83 c4 0c             	add    esp,0xc
c0015260:	5b                   	pop    ebx
c0015261:	5e                   	pop    esi
c0015262:	5f                   	pop    edi
c0015263:	5d                   	pop    ebp
c0015264:	c3                   	ret    

c0015265 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015265:	55                   	push   ebp
c0015266:	57                   	push   edi
c0015267:	56                   	push   esi
c0015268:	53                   	push   ebx
c0015269:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001526f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015277:	0f 95 c0             	setne  al
c001527a:	31 d2                	xor    edx,edx
c001527c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015284:	0f 94 c2             	sete   dl
c0015287:	85 c2                	test   edx,eax
c0015289:	74 34                	je     c00152bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001528b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015296:	74 27                	je     c00152bf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015298:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001529f:	05 00 10 00 00       	add    eax,0x1000
c00152a4:	89 c1                	mov    ecx,eax
c00152a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00152ab:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00152b1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00152b8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00152bf:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00152cf:	6a 01                	push   0x1
c00152d1:	e8 61 e0 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	89 c3                	mov    ebx,eax
c00152db:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00152e1:	0f 86 26 01 00 00    	jbe    c001540d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00152e7:	c1 ee 0c             	shr    esi,0xc
c00152ea:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00152f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00152fd:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015304:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015308:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001530f:	29 ef                	sub    edi,ebp
c0015311:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015315:	0f 83 f9 00 00 00    	jae    c0015414 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001531b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015321:	76 05                	jbe    c0015328 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015323:	bf 00 10 00 00       	mov    edi,0x1000
c0015328:	83 ec 0c             	sub    esp,0xc
c001532b:	31 d2                	xor    edx,edx
c001532d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015334:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015336:	8d 44 24 28          	lea    eax,[esp+0x28]
c001533a:	50                   	push   eax
c001533b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001533f:	56                   	push   esi
c0015340:	52                   	push   edx
c0015341:	57                   	push   edi
c0015342:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015349:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001534c:	83 c4 20             	add    esp,0x20
c001534f:	85 c0                	test   eax,eax
c0015351:	75 06                	jne    c0015359 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015353:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015357:	74 13                	je     c001536c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015359:	83 ec 0c             	sub    esp,0xc
c001535c:	53                   	push   ebx
c001535d:	e8 dd e2 ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	31 c0                	xor    eax,eax
c0015367:	e9 80 01 00 00       	jmp    c00154ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001536c:	fa                   	cli    
c001536d:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0015373:	e8 70 ab ff ff       	call   c000fee8 <Phys::allocatePage()>
c0015378:	6a 07                	push   0x7
c001537a:	89 c7                	mov    edi,eax
c001537c:	53                   	push   ebx
c001537d:	50                   	push   eax
c001537e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015383:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015386:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001538c:	e8 89 e6 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015391:	83 c4 0c             	add    esp,0xc
c0015394:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001539b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153a1:	6a 00                	push   0x0
c00153a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ab:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153b1:	e8 d0 e4 ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c00153b6:	58                   	pop    eax
c00153b7:	5a                   	pop    edx
c00153b8:	68 07 0c 00 00       	push   0xc07
c00153bd:	55                   	push   ebp
c00153be:	57                   	push   edi
c00153bf:	89 df                	mov    edi,ebx
c00153c1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00153c8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153ce:	6a 00                	push   0x0
c00153d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153d8:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00153de:	e8 79 e8 ff ff       	call   c0013c5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00153e3:	b9 00 10 00 00       	mov    ecx,0x1000
c00153e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153ea:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00153f1:	83 c4 20             	add    esp,0x20
c00153f4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00153fb:	75 01                	jne    c00153fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00153fd:	fb                   	sti    
c00153fe:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015404:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015408:	e9 f0 fe ff ff       	jmp    c00152fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001540d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015414:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001541b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015421:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015427:	0f 86 b1 00 00 00    	jbe    c00154de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001542d:	fa                   	cli    
c001542e:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c0015434:	c1 ee 0c             	shr    esi,0xc
c0015437:	51                   	push   ecx
c0015438:	31 ff                	xor    edi,edi
c001543a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015441:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015447:	6a 00                	push   0x0
c0015449:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015451:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015457:	e8 2a e4 ff ff       	call   c0013886 <VAS::mapOtherVASIn(bool, VAS*)>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	e8 84 aa ff ff       	call   c000fee8 <Phys::allocatePage()>
c0015464:	47                   	inc    edi
c0015465:	6a 07                	push   0x7
c0015467:	53                   	push   ebx
c0015468:	50                   	push   eax
c0015469:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001546d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015473:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015476:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c001547c:	e8 99 e5 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0015481:	58                   	pop    eax
c0015482:	5a                   	pop    edx
c0015483:	68 07 0c 00 00       	push   0xc07
c0015488:	55                   	push   ebp
c0015489:	81 c5 00 10 00 00    	add    ebp,0x1000
c001548f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015493:	50                   	push   eax
c0015494:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001549b:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154a1:	6a 00                	push   0x0
c00154a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154ab:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00154b1:	e8 a6 e7 ff ff       	call   c0013c5c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00154b6:	83 c4 1c             	add    esp,0x1c
c00154b9:	68 00 10 00 00       	push   0x1000
c00154be:	6a 00                	push   0x0
c00154c0:	53                   	push   ebx
c00154c1:	e8 2a b0 fe ff       	call   c00004f0 <memset>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	39 fe                	cmp    esi,edi
c00154cb:	77 92                	ja     c001545f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00154cd:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00154d4:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00154db:	75 01                	jne    c00154de <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00154dd:	fb                   	sti    
c00154de:	83 ec 0c             	sub    esp,0xc
c00154e1:	53                   	push   ebx
c00154e2:	e8 58 e1 ff ff       	call   c001363f <Virt::freeKernelVirtualPages(unsigned long)>
c00154e7:	83 c4 10             	add    esp,0x10
c00154ea:	b0 01                	mov    al,0x1
c00154ec:	81 c4 2c 10 00 00    	add    esp,0x102c
c00154f2:	5b                   	pop    ebx
c00154f3:	5e                   	pop    esi
c00154f4:	5f                   	pop    edi
c00154f5:	5d                   	pop    ebp
c00154f6:	c3                   	ret    

c00154f7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00154f7:	55                   	push   ebp
c00154f8:	57                   	push   edi
c00154f9:	56                   	push   esi
c00154fa:	53                   	push   ebx
c00154fb:	83 ec 68             	sub    esp,0x68
c00154fe:	68 14 01 00 00       	push   0x114
c0015503:	e8 8f a3 ff ff       	call   c000f897 <malloc>
c0015508:	83 c4 0c             	add    esp,0xc
c001550b:	89 c6                	mov    esi,eax
c001550d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015511:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015515:	50                   	push   eax
c0015516:	e8 6f 2c ff ff       	call   c000818a <File::File(char const*, Process*)>
c001551b:	5b                   	pop    ebx
c001551c:	5f                   	pop    edi
c001551d:	6a 01                	push   0x1
c001551f:	56                   	push   esi
c0015520:	e8 83 2c ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	85 c0                	test   eax,eax
c001552a:	0f 85 c6 01 00 00    	jne    c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015530:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	6a 34                	push   0x34
c001553d:	e8 55 a3 ff ff       	call   c000f897 <malloc>
c0015542:	59                   	pop    ecx
c0015543:	89 c3                	mov    ebx,eax
c0015545:	8d 7c 24 34          	lea    edi,[esp+0x34]
c0015549:	8b 06                	mov    eax,DWORD PTR [esi]
c001554b:	57                   	push   edi
c001554c:	53                   	push   ebx
c001554d:	6a 00                	push   0x0
c001554f:	6a 34                	push   0x34
c0015551:	56                   	push   esi
c0015552:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015555:	83 c4 20             	add    esp,0x20
c0015558:	85 c0                	test   eax,eax
c001555a:	0f 85 96 01 00 00    	jne    c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015560:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015566:	0f 85 8a 01 00 00    	jne    c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001556c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001556f:	85 c0                	test   eax,eax
c0015571:	0f 84 7f 01 00 00    	je     c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015577:	52                   	push   edx
c0015578:	31 d2                	xor    edx,edx
c001557a:	52                   	push   edx
c001557b:	50                   	push   eax
c001557c:	56                   	push   esi
c001557d:	e8 e4 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	85 c0                	test   eax,eax
c0015587:	0f 85 69 01 00 00    	jne    c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c001558d:	83 ec 0c             	sub    esp,0xc
c0015590:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015593:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015597:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001559b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001559f:	0f af c2             	imul   eax,edx
c00155a2:	50                   	push   eax
c00155a3:	e8 ef a2 ff ff       	call   c000f897 <malloc>
c00155a8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00155aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00155b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155b5:	31 ff                	xor    edi,edi
c00155b7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00155bb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00155bf:	0f af c2             	imul   eax,edx
c00155c2:	99                   	cdq    
c00155c3:	52                   	push   edx
c00155c4:	50                   	push   eax
c00155c5:	56                   	push   esi
c00155c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00155c9:	83 c4 20             	add    esp,0x20
c00155cc:	0f b7 c7             	movzx  eax,di
c00155cf:	66 3b 7b 30          	cmp    di,WORD PTR [ebx+0x30]
c00155d3:	73 71                	jae    c0015646 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c00155d5:	6b c0 28             	imul   eax,eax,0x28
c00155d8:	55                   	push   ebp
c00155d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155dd:	0f b7 53 32          	movzx  edx,WORD PTR [ebx+0x32]
c00155e1:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c00155e4:	6b d2 28             	imul   edx,edx,0x28
c00155e7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00155eb:	31 d2                	xor    edx,edx
c00155ed:	52                   	push   edx
c00155ee:	50                   	push   eax
c00155ef:	56                   	push   esi
c00155f0:	e8 71 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00155f5:	83 c4 0c             	add    esp,0xc
c00155f8:	6a 20                	push   0x20
c00155fa:	6a 00                	push   0x0
c00155fc:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015600:	55                   	push   ebp
c0015601:	e8 ea ae fe ff       	call   c00004f0 <memset>
c0015606:	58                   	pop    eax
c0015607:	8b 06                	mov    eax,DWORD PTR [esi]
c0015609:	8d 54 24 38          	lea    edx,[esp+0x38]
c001560d:	52                   	push   edx
c001560e:	55                   	push   ebp
c001560f:	6a 00                	push   0x0
c0015611:	6a 1f                	push   0x1f
c0015613:	56                   	push   esi
c0015614:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015617:	83 c4 18             	add    esp,0x18
c001561a:	55                   	push   ebp
c001561b:	68 96 4b 02 c0       	push   0xc0024b96
c0015620:	e8 2b b1 fe ff       	call   c0000750 <strcmp>
c0015625:	83 c4 10             	add    esp,0x10
c0015628:	85 c0                	test   eax,eax
c001562a:	75 17                	jne    c0015643 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c001562c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015630:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015634:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001563a:	83 c8 80             	or     eax,0xffffff80
c001563d:	88 81 76 02 00 00    	mov    BYTE PTR [ecx+0x276],al
c0015643:	47                   	inc    edi
c0015644:	eb 86                	jmp    c00155cc <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c0015646:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015649:	85 c0                	test   eax,eax
c001564b:	0f 84 a5 00 00 00    	je     c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015651:	31 d2                	xor    edx,edx
c0015653:	57                   	push   edi
c0015654:	52                   	push   edx
c0015655:	50                   	push   eax
c0015656:	56                   	push   esi
c0015657:	e8 0a 2c ff ff       	call   c0008266 <File::seek(unsigned long long)>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	85 c0                	test   eax,eax
c0015661:	0f 85 8f 00 00 00    	jne    c00156f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ff>
c0015667:	83 ec 0c             	sub    esp,0xc
c001566a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001566e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015672:	31 ed                	xor    ebp,ebp
c0015674:	0f af c2             	imul   eax,edx
c0015677:	50                   	push   eax
c0015678:	e8 1a a2 ff ff       	call   c000f897 <malloc>
c001567d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015681:	59                   	pop    ecx
c0015682:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015684:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015688:	50                   	push   eax
c0015689:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001568d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015691:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015695:	0f af c2             	imul   eax,edx
c0015698:	99                   	cdq    
c0015699:	52                   	push   edx
c001569a:	50                   	push   eax
c001569b:	56                   	push   esi
c001569c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001569f:	83 c4 20             	add    esp,0x20
c00156a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00156aa:	0f b7 fd             	movzx  edi,bp
c00156ad:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00156b1:	0f 83 80 00 00 00    	jae    c0015737 <Thr::loadProgramIntoMemory(Process*, char const*)+0x240>
c00156b7:	c1 e7 05             	shl    edi,0x5
c00156ba:	03 7c 24 10          	add    edi,DWORD PTR [esp+0x10]
c00156be:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00156c1:	75 6e                	jne    c0015731 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c00156c3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00156c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00156ca:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00156cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00156d1:	52                   	push   edx
c00156d2:	31 d2                	xor    edx,edx
c00156d4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00156d7:	52                   	push   edx
c00156d8:	50                   	push   eax
c00156d9:	56                   	push   esi
c00156da:	e8 87 2b ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00156df:	83 c4 10             	add    esp,0x10
c00156e2:	85 c0                	test   eax,eax
c00156e4:	74 17                	je     c00156fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x206>
c00156e6:	83 ec 0c             	sub    esp,0xc
c00156e9:	68 a5 4b 02 c0       	push   0xc0024ba5
c00156ee:	e8 89 18 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	31 c0                	xor    eax,eax
c00156f8:	e9 8a 00 00 00       	jmp    c0015787 <Thr::loadProgramIntoMemory(Process*, char const*)+0x290>
c00156fd:	83 ec 0c             	sub    esp,0xc
c0015700:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015703:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015706:	50                   	push   eax
c0015707:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001570b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001570f:	56                   	push   esi
c0015710:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015717:	e8 49 fb ff ff       	call   c0015265 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001571c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015720:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015724:	83 c4 20             	add    esp,0x20
c0015727:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001572b:	73 04                	jae    c0015731 <Thr::loadProgramIntoMemory(Process*, char const*)+0x23a>
c001572d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015731:	45                   	inc    ebp
c0015732:	e9 73 ff ff ff       	jmp    c00156aa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015737:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c001573b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001573f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015743:	89 91 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],edx
c0015749:	83 ec 0c             	sub    esp,0xc
c001574c:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c0015752:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015757:	05 00 10 00 00       	add    eax,0x1000
c001575c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001575f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015763:	e8 3f a1 ff ff       	call   c000f8a7 <free>
c0015768:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001576b:	e8 37 a1 ff ff       	call   c000f8a7 <free>
c0015770:	58                   	pop    eax
c0015771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015775:	e8 2d a1 ff ff       	call   c000f8a7 <free>
c001577a:	89 34 24             	mov    DWORD PTR [esp],esi
c001577d:	e8 84 2a ff ff       	call   c0008206 <File::close()>
c0015782:	83 c4 10             	add    esp,0x10
c0015785:	b0 01                	mov    al,0x1
c0015787:	83 c4 5c             	add    esp,0x5c
c001578a:	5b                   	pop    ebx
c001578b:	5e                   	pop    esi
c001578c:	5f                   	pop    edi
c001578d:	5d                   	pop    ebp
c001578e:	c3                   	ret    

c001578f <Thr::runtimeReferenceHelper()>:
c001578f:	83 ec 18             	sub    esp,0x18
c0015792:	68 ad 4b 02 c0       	push   0xc0024bad
c0015797:	e8 e0 17 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001579c:	fa                   	cli    
c001579d:	83 c4 10             	add    esp,0x10
c00157a0:	eb fe                	jmp    c00157a0 <Thr::runtimeReferenceHelper()+0x11>

c00157a2 <Thr::getAddressOfKernelSymbol(char const*)>:
c00157a2:	57                   	push   edi
c00157a3:	56                   	push   esi
c00157a4:	53                   	push   ebx
c00157a5:	31 db                	xor    ebx,ebx
c00157a7:	39 1d 40 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca40,ebx
c00157ad:	7e 3c                	jle    c00157eb <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00157af:	8b 34 9d c0 c9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3640]
c00157b6:	31 ff                	xor    edi,edi
c00157b8:	39 3c 9d c0 c8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3740],edi
c00157bf:	7e 27                	jle    c00157e8 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00157c1:	50                   	push   eax
c00157c2:	50                   	push   eax
c00157c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157c7:	8b 06                	mov    eax,DWORD PTR [esi]
c00157c9:	03 04 9d 40 c9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd36c0]
c00157d0:	50                   	push   eax
c00157d1:	e8 7a af fe ff       	call   c0000750 <strcmp>
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	85 c0                	test   eax,eax
c00157db:	75 05                	jne    c00157e2 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00157dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00157e0:	eb 0b                	jmp    c00157ed <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00157e2:	83 c6 10             	add    esi,0x10
c00157e5:	47                   	inc    edi
c00157e6:	eb d0                	jmp    c00157b8 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00157e8:	43                   	inc    ebx
c00157e9:	eb bc                	jmp    c00157a7 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00157eb:	31 c0                	xor    eax,eax
c00157ed:	5b                   	pop    ebx
c00157ee:	5e                   	pop    esi
c00157ef:	5f                   	pop    edi
c00157f0:	c3                   	ret    

c00157f1 <Thr::loadKernelSymbolTable(char const*)>:
c00157f1:	55                   	push   ebp
c00157f2:	57                   	push   edi
c00157f3:	56                   	push   esi
c00157f4:	53                   	push   ebx
c00157f5:	83 ec 68             	sub    esp,0x68
c00157f8:	8b 35 98 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca98
c00157fe:	68 14 01 00 00       	push   0x114
c0015803:	e8 8f a0 ff ff       	call   c000f897 <malloc>
c0015808:	83 c4 0c             	add    esp,0xc
c001580b:	89 c3                	mov    ebx,eax
c001580d:	56                   	push   esi
c001580e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015812:	50                   	push   eax
c0015813:	e8 72 29 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015818:	5e                   	pop    esi
c0015819:	5f                   	pop    edi
c001581a:	6a 01                	push   0x1
c001581c:	53                   	push   ebx
c001581d:	e8 86 29 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015822:	83 c4 10             	add    esp,0x10
c0015825:	85 c0                	test   eax,eax
c0015827:	74 0a                	je     c0015833 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015829:	83 ec 0c             	sub    esp,0xc
c001582c:	68 cf 4b 02 c0       	push   0xc0024bcf
c0015831:	eb 34                	jmp    c0015867 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015833:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001583b:	83 ec 0c             	sub    esp,0xc
c001583e:	6a 34                	push   0x34
c0015840:	e8 52 a0 ff ff       	call   c000f897 <malloc>
c0015845:	59                   	pop    ecx
c0015846:	89 c7                	mov    edi,eax
c0015848:	8d 74 24 34          	lea    esi,[esp+0x34]
c001584c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001584e:	56                   	push   esi
c001584f:	57                   	push   edi
c0015850:	6a 00                	push   0x0
c0015852:	6a 34                	push   0x34
c0015854:	53                   	push   ebx
c0015855:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015858:	83 c4 20             	add    esp,0x20
c001585b:	85 c0                	test   eax,eax
c001585d:	74 17                	je     c0015876 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001585f:	83 ec 0c             	sub    esp,0xc
c0015862:	68 e6 4b 02 c0       	push   0xc0024be6
c0015867:	e8 88 a4 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001586c:	83 c4 10             	add    esp,0x10
c001586f:	31 c0                	xor    eax,eax
c0015871:	e9 31 02 00 00       	jmp    c0015aa7 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0015876:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001587c:	75 e1                	jne    c001585f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001587e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015881:	85 c0                	test   eax,eax
c0015883:	74 da                	je     c001585f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015885:	52                   	push   edx
c0015886:	31 d2                	xor    edx,edx
c0015888:	52                   	push   edx
c0015889:	50                   	push   eax
c001588a:	53                   	push   ebx
c001588b:	e8 d6 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015890:	83 c4 10             	add    esp,0x10
c0015893:	85 c0                	test   eax,eax
c0015895:	75 c8                	jne    c001585f <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015897:	83 ec 0c             	sub    esp,0xc
c001589a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001589e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00158a2:	31 ed                	xor    ebp,ebp
c00158a4:	0f af c2             	imul   eax,edx
c00158a7:	50                   	push   eax
c00158a8:	e8 ea 9f ff ff       	call   c000f897 <malloc>
c00158ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00158af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00158b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158ba:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00158be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00158c2:	0f af c2             	imul   eax,edx
c00158c5:	99                   	cdq    
c00158c6:	52                   	push   edx
c00158c7:	50                   	push   eax
c00158c8:	53                   	push   ebx
c00158c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00158cc:	83 c4 20             	add    esp,0x20
c00158cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00158d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00158df:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00158e7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00158ef:	0f b7 f5             	movzx  esi,bp
c00158f2:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00158f6:	0f 83 a7 00 00 00    	jae    c00159a3 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00158fc:	6b f6 28             	imul   esi,esi,0x28
c00158ff:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015903:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015906:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001590a:	50                   	push   eax
c001590b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001590f:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015913:	8b 16                	mov    edx,DWORD PTR [esi]
c0015915:	6b c0 28             	imul   eax,eax,0x28
c0015918:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001591c:	89 d0                	mov    eax,edx
c001591e:	31 d2                	xor    edx,edx
c0015920:	52                   	push   edx
c0015921:	50                   	push   eax
c0015922:	53                   	push   ebx
c0015923:	e8 3e 29 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015928:	83 c4 0c             	add    esp,0xc
c001592b:	6a 20                	push   0x20
c001592d:	6a 00                	push   0x0
c001592f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015933:	52                   	push   edx
c0015934:	e8 b7 ab fe ff       	call   c00004f0 <memset>
c0015939:	58                   	pop    eax
c001593a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001593c:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015940:	51                   	push   ecx
c0015941:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015945:	52                   	push   edx
c0015946:	6a 00                	push   0x0
c0015948:	6a 1f                	push   0x1f
c001594a:	53                   	push   ebx
c001594b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001594e:	83 c4 18             	add    esp,0x18
c0015951:	68 fd 4b 02 c0       	push   0xc0024bfd
c0015956:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001595a:	52                   	push   edx
c001595b:	e8 f0 ad fe ff       	call   c0000750 <strcmp>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	85 c0                	test   eax,eax
c0015965:	75 0f                	jne    c0015976 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015967:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001596a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001596e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015972:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015976:	50                   	push   eax
c0015977:	50                   	push   eax
c0015978:	68 05 4c 02 c0       	push   0xc0024c05
c001597d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015981:	50                   	push   eax
c0015982:	e8 c9 ad fe ff       	call   c0000750 <strcmp>
c0015987:	83 c4 10             	add    esp,0x10
c001598a:	85 c0                	test   eax,eax
c001598c:	75 0f                	jne    c001599d <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001598e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015991:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015995:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015999:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001599d:	45                   	inc    ebp
c001599e:	e9 4c ff ff ff       	jmp    c00158ef <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00159a3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00159a8:	75 10                	jne    c00159ba <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00159aa:	83 ec 0c             	sub    esp,0xc
c00159ad:	68 0d 4c 02 c0       	push   0xc0024c0d
c00159b2:	e8 3d a3 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00159bf:	75 10                	jne    c00159d1 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00159c1:	83 ec 0c             	sub    esp,0xc
c00159c4:	68 0d 4c 02 c0       	push   0xc0024c0d
c00159c9:	e8 26 a3 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00159ce:	83 c4 10             	add    esp,0x10
c00159d1:	31 d2                	xor    edx,edx
c00159d3:	50                   	push   eax
c00159d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159d8:	52                   	push   edx
c00159d9:	50                   	push   eax
c00159da:	53                   	push   ebx
c00159db:	e8 86 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c00159e0:	5a                   	pop    edx
c00159e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00159e5:	e8 ad 9e ff ff       	call   c000f897 <malloc>
c00159ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00159f2:	31 c9                	xor    ecx,ecx
c00159f4:	5e                   	pop    esi
c00159f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159f7:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00159fb:	55                   	push   ebp
c00159fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015a00:	51                   	push   ecx
c0015a01:	52                   	push   edx
c0015a02:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015a06:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015a0a:	53                   	push   ebx
c0015a0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a0e:	83 c4 14             	add    esp,0x14
c0015a11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a15:	e8 7d 9e ff ff       	call   c000f897 <malloc>
c0015a1a:	89 c6                	mov    esi,eax
c0015a1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a1e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015a21:	56                   	push   esi
c0015a22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015a26:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a2a:	51                   	push   ecx
c0015a2b:	52                   	push   edx
c0015a2c:	53                   	push   ebx
c0015a2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015a34:	8b 15 40 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca40
c0015a3a:	83 c4 1c             	add    esp,0x1c
c0015a3d:	c1 e8 04             	shr    eax,0x4
c0015a40:	89 04 95 c0 c8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3740],eax
c0015a47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a4b:	31 d2                	xor    edx,edx
c0015a4d:	52                   	push   edx
c0015a4e:	50                   	push   eax
c0015a4f:	53                   	push   ebx
c0015a50:	e8 11 28 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015a55:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a57:	31 d2                	xor    edx,edx
c0015a59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015a5c:	56                   	push   esi
c0015a5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015a61:	52                   	push   edx
c0015a62:	50                   	push   eax
c0015a63:	53                   	push   ebx
c0015a64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a67:	83 c4 14             	add    esp,0x14
c0015a6a:	53                   	push   ebx
c0015a6b:	e8 96 27 ff ff       	call   c0008206 <File::close()>
c0015a70:	5d                   	pop    ebp
c0015a71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a75:	e8 2d 9e ff ff       	call   c000f8a7 <free>
c0015a7a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015a7d:	e8 25 9e ff ff       	call   c000f8a7 <free>
c0015a82:	a1 40 ca 02 c0       	mov    eax,ds:0xc002ca40
c0015a87:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015a8b:	8d 50 01             	lea    edx,[eax+0x1]
c0015a8e:	89 0c 85 c0 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3640],ecx
c0015a95:	89 34 85 40 c9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd36c0],esi
c0015a9c:	89 15 40 ca 02 c0    	mov    DWORD PTR ds:0xc002ca40,edx
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	b0 01                	mov    al,0x1
c0015aa7:	83 c4 5c             	add    esp,0x5c
c0015aaa:	5b                   	pop    ebx
c0015aab:	5e                   	pop    esi
c0015aac:	5f                   	pop    edi
c0015aad:	5d                   	pop    ebp
c0015aae:	c3                   	ret    

c0015aaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015aaf:	55                   	push   ebp
c0015ab0:	57                   	push   edi
c0015ab1:	56                   	push   esi
c0015ab2:	53                   	push   ebx
c0015ab3:	81 ec 68 03 00 00    	sub    esp,0x368
c0015ab9:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015ac0:	8b 1d 98 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca98
c0015ac6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015aca:	68 14 01 00 00       	push   0x114
c0015acf:	e8 c3 9d ff ff       	call   c000f897 <malloc>
c0015ad4:	83 c4 0c             	add    esp,0xc
c0015ad7:	89 c5                	mov    ebp,eax
c0015ad9:	53                   	push   ebx
c0015ada:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015ae1:	50                   	push   eax
c0015ae2:	e8 a3 26 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0015ae7:	5e                   	pop    esi
c0015ae8:	5f                   	pop    edi
c0015ae9:	6a 01                	push   0x1
c0015aeb:	55                   	push   ebp
c0015aec:	e8 b7 26 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0015af1:	83 c4 10             	add    esp,0x10
c0015af4:	85 c0                	test   eax,eax
c0015af6:	0f 85 b9 06 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015afc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	6a 34                	push   0x34
c0015b09:	e8 89 9d ff ff       	call   c000f897 <malloc>
c0015b0e:	5b                   	pop    ebx
c0015b0f:	89 c7                	mov    edi,eax
c0015b11:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015b15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b18:	53                   	push   ebx
c0015b19:	57                   	push   edi
c0015b1a:	6a 00                	push   0x0
c0015b1c:	6a 34                	push   0x34
c0015b1e:	55                   	push   ebp
c0015b1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b22:	83 c4 20             	add    esp,0x20
c0015b25:	85 c0                	test   eax,eax
c0015b27:	0f 85 88 06 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b2d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015b33:	0f 85 7c 06 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b39:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015b3c:	85 c0                	test   eax,eax
c0015b3e:	0f 84 71 06 00 00    	je     c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b44:	31 d2                	xor    edx,edx
c0015b46:	51                   	push   ecx
c0015b47:	52                   	push   edx
c0015b48:	50                   	push   eax
c0015b49:	55                   	push   ebp
c0015b4a:	e8 17 27 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	85 c0                	test   eax,eax
c0015b54:	0f 85 5b 06 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015b5a:	83 ec 0c             	sub    esp,0xc
c0015b5d:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015b60:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015b68:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b6c:	0f af c2             	imul   eax,edx
c0015b6f:	50                   	push   eax
c0015b70:	e8 22 9d ff ff       	call   c000f897 <malloc>
c0015b75:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015b78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015b83:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015b87:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015b8b:	0f af c2             	imul   eax,edx
c0015b8e:	99                   	cdq    
c0015b8f:	52                   	push   edx
c0015b90:	50                   	push   eax
c0015b91:	55                   	push   ebp
c0015b92:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015b95:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015b98:	83 c4 20             	add    esp,0x20
c0015b9b:	85 c0                	test   eax,eax
c0015b9d:	0f 84 12 06 00 00    	je     c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015ba3:	52                   	push   edx
c0015ba4:	31 d2                	xor    edx,edx
c0015ba6:	52                   	push   edx
c0015ba7:	50                   	push   eax
c0015ba8:	55                   	push   ebp
c0015ba9:	e8 b8 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	85 c0                	test   eax,eax
c0015bb3:	0f 85 fc 05 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015bb9:	83 ec 0c             	sub    esp,0xc
c0015bbc:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015bc0:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015bc4:	31 f6                	xor    esi,esi
c0015bc6:	0f af c2             	imul   eax,edx
c0015bc9:	50                   	push   eax
c0015bca:	e8 c8 9c ff ff       	call   c000f897 <malloc>
c0015bcf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015bd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015bd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bdd:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015be1:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015be5:	0f af c2             	imul   eax,edx
c0015be8:	99                   	cdq    
c0015be9:	52                   	push   edx
c0015bea:	50                   	push   eax
c0015beb:	55                   	push   ebp
c0015bec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bef:	83 c4 20             	add    esp,0x20
c0015bf2:	0f b7 de             	movzx  ebx,si
c0015bf5:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015bf9:	0f 83 85 00 00 00    	jae    c0015c84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c0015bff:	c1 e3 05             	shl    ebx,0x5
c0015c02:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0015c06:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015c09:	75 73                	jne    c0015c7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c0015c0b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c0e:	31 d2                	xor    edx,edx
c0015c10:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c13:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015c16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c1a:	50                   	push   eax
c0015c1b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015c1e:	52                   	push   edx
c0015c1f:	50                   	push   eax
c0015c20:	55                   	push   ebp
c0015c21:	e8 40 26 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015c26:	83 c4 10             	add    esp,0x10
c0015c29:	85 c0                	test   eax,eax
c0015c2b:	0f 85 84 05 00 00    	jne    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0015c31:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015c38:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015c3b:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0015c3f:	31 d2                	xor    edx,edx
c0015c41:	03 04 24             	add    eax,DWORD PTR [esp]
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c4b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015c52:	50                   	push   eax
c0015c53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c5b:	52                   	push   edx
c0015c5c:	50                   	push   eax
c0015c5d:	55                   	push   ebp
c0015c5e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c61:	83 c4 1c             	add    esp,0x1c
c0015c64:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c67:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015c6a:	50                   	push   eax
c0015c6b:	6a 00                	push   0x0
c0015c6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c71:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0015c75:	50                   	push   eax
c0015c76:	e8 75 a8 fe ff       	call   c00004f0 <memset>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	46                   	inc    esi
c0015c7f:	e9 6e ff ff ff       	jmp    c0015bf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015c84:	31 db                	xor    ebx,ebx
c0015c86:	50                   	push   eax
c0015c87:	68 00 01 00 00       	push   0x100
c0015c8c:	6a 00                	push   0x0
c0015c8e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015c92:	50                   	push   eax
c0015c93:	e8 58 a8 fe ff       	call   c00004f0 <memset>
c0015c98:	83 c4 0c             	add    esp,0xc
c0015c9b:	68 00 01 00 00       	push   0x100
c0015ca0:	6a 00                	push   0x0
c0015ca2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015ca9:	50                   	push   eax
c0015caa:	e8 41 a8 fe ff       	call   c00004f0 <memset>
c0015caf:	83 c4 10             	add    esp,0x10
c0015cb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015cb9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cc1:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015cc9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015cd1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015cd9:	0f b7 f3             	movzx  esi,bx
c0015cdc:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015ce0:	0f 83 27 01 00 00    	jae    c0015e0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c0015ce6:	6b f6 28             	imul   esi,esi,0x28
c0015ce9:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0015ced:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015cf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cf4:	50                   	push   eax
c0015cf5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015cf9:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015cfd:	8b 06                	mov    eax,DWORD PTR [esi]
c0015cff:	6b d2 28             	imul   edx,edx,0x28
c0015d02:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015d06:	31 d2                	xor    edx,edx
c0015d08:	52                   	push   edx
c0015d09:	50                   	push   eax
c0015d0a:	55                   	push   ebp
c0015d0b:	e8 56 25 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015d10:	83 c4 0c             	add    esp,0xc
c0015d13:	6a 20                	push   0x20
c0015d15:	6a 00                	push   0x0
c0015d17:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015d1e:	51                   	push   ecx
c0015d1f:	e8 cc a7 fe ff       	call   c00004f0 <memset>
c0015d24:	58                   	pop    eax
c0015d25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015d28:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015d2c:	52                   	push   edx
c0015d2d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015d34:	51                   	push   ecx
c0015d35:	6a 00                	push   0x0
c0015d37:	6a 1f                	push   0x1f
c0015d39:	55                   	push   ebp
c0015d3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d3d:	83 c4 1c             	add    esp,0x1c
c0015d40:	6a 09                	push   0x9
c0015d42:	68 27 4c 02 c0       	push   0xc0024c27
c0015d47:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015d4e:	51                   	push   ecx
c0015d4f:	e8 2c a6 fe ff       	call   c0000380 <memcmp>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	85 c0                	test   eax,eax
c0015d59:	75 1e                	jne    c0015d79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c0015d5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d62:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015d66:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015d69:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015d6c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015d73:	89 d0                	mov    eax,edx
c0015d75:	40                   	inc    eax
c0015d76:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d79:	51                   	push   ecx
c0015d7a:	6a 09                	push   0x9
c0015d7c:	68 31 4c 02 c0       	push   0xc0024c31
c0015d81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d88:	50                   	push   eax
c0015d89:	e8 f2 a5 fe ff       	call   c0000380 <memcmp>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	85 c0                	test   eax,eax
c0015d93:	75 1e                	jne    c0015db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c0015d95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d9c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015da0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0015da3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015da6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015dad:	89 d0                	mov    eax,edx
c0015daf:	40                   	inc    eax
c0015db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0015db3:	52                   	push   edx
c0015db4:	52                   	push   edx
c0015db5:	68 fd 4b 02 c0       	push   0xc0024bfd
c0015dba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015dc1:	50                   	push   eax
c0015dc2:	e8 89 a9 fe ff       	call   c0000750 <strcmp>
c0015dc7:	83 c4 10             	add    esp,0x10
c0015dca:	85 c0                	test   eax,eax
c0015dcc:	75 0f                	jne    c0015ddd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c0015dce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015dd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ddd:	50                   	push   eax
c0015dde:	50                   	push   eax
c0015ddf:	68 05 4c 02 c0       	push   0xc0024c05
c0015de4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015deb:	50                   	push   eax
c0015dec:	e8 5f a9 fe ff       	call   c0000750 <strcmp>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	85 c0                	test   eax,eax
c0015df6:	75 0f                	jne    c0015e07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c0015df8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e07:	43                   	inc    ebx
c0015e08:	e9 cc fe ff ff       	jmp    c0015cd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c0015e0d:	31 d2                	xor    edx,edx
c0015e0f:	50                   	push   eax
c0015e10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e14:	52                   	push   edx
c0015e15:	50                   	push   eax
c0015e16:	55                   	push   ebp
c0015e17:	e8 4a 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e1c:	58                   	pop    eax
c0015e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e21:	e8 71 9a ff ff       	call   c000f897 <malloc>
c0015e26:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015e29:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015e2d:	31 d2                	xor    edx,edx
c0015e2f:	58                   	pop    eax
c0015e30:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015e34:	53                   	push   ebx
c0015e35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015e39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e3d:	52                   	push   edx
c0015e3e:	50                   	push   eax
c0015e3f:	55                   	push   ebp
c0015e40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e43:	83 c4 14             	add    esp,0x14
c0015e46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e4a:	e8 48 9a ff ff       	call   c000f897 <malloc>
c0015e4f:	31 d2                	xor    edx,edx
c0015e51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015e55:	83 c4 0c             	add    esp,0xc
c0015e58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e5c:	52                   	push   edx
c0015e5d:	50                   	push   eax
c0015e5e:	55                   	push   ebp
c0015e5f:	e8 02 24 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015e64:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015e67:	31 d2                	xor    edx,edx
c0015e69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e6c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e70:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e74:	52                   	push   edx
c0015e75:	50                   	push   eax
c0015e76:	55                   	push   ebp
c0015e77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e7a:	83 c4 20             	add    esp,0x20
c0015e7d:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0015e82:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015e8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e92:	39 34 24             	cmp    DWORD PTR [esp],esi
c0015e95:	0f 84 1e 03 00 00    	je     c00161b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c0015e9b:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0015ea2:	31 d2                	xor    edx,edx
c0015ea4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ea8:	c1 e8 03             	shr    eax,0x3
c0015eab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015eaf:	56                   	push   esi
c0015eb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eb4:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015eb8:	52                   	push   edx
c0015eb9:	50                   	push   eax
c0015eba:	55                   	push   ebp
c0015ebb:	e8 a6 23 ff ff       	call   c0008266 <File::seek(unsigned long long)>
c0015ec0:	58                   	pop    eax
c0015ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ec5:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015ecc:	e8 c6 99 ff ff       	call   c000f897 <malloc>
c0015ed1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ed8:	31 d2                	xor    edx,edx
c0015eda:	58                   	pop    eax
c0015edb:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015edf:	50                   	push   eax
c0015ee0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ee4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ee8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015eef:	52                   	push   edx
c0015ef0:	50                   	push   eax
c0015ef1:	55                   	push   ebp
c0015ef2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ef5:	83 c4 20             	add    esp,0x20
c0015ef8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015f00:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015f04:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0015f08:	0f 8d 8f 02 00 00    	jge    c001619d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ee>
c0015f0e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015f12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f16:	31 c9                	xor    ecx,ecx
c0015f18:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c0015f1b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f23:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0015f27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f2b:	c1 e8 08             	shr    eax,0x8
c0015f2e:	89 c3                	mov    ebx,eax
c0015f30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015f34:	c1 e3 04             	shl    ebx,0x4
c0015f37:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
c0015f3b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0015f3e:	85 d2                	test   edx,edx
c0015f40:	0f 85 97 00 00 00    	jne    c0015fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f46:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015f4a:	83 ec 0c             	sub    esp,0xc
c0015f4d:	03 33                	add    esi,DWORD PTR [ebx]
c0015f4f:	56                   	push   esi
c0015f50:	e8 4d f8 ff ff       	call   c00157a2 <Thr::getAddressOfKernelSymbol(char const*)>
c0015f55:	83 c4 10             	add    esp,0x10
c0015f58:	89 c2                	mov    edx,eax
c0015f5a:	b1 01                	mov    cl,0x1
c0015f5c:	85 c0                	test   eax,eax
c0015f5e:	75 7d                	jne    c0015fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f60:	88 4c 24 3c          	mov    BYTE PTR [esp+0x3c],cl
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	56                   	push   esi
c0015f68:	e8 b3 a8 ff ff       	call   c0010820 <KeResolveCompatibilitySymbol(char*)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	89 c2                	mov    edx,eax
c0015f72:	85 c0                	test   eax,eax
c0015f74:	8a 4c 24 3c          	mov    cl,BYTE PTR [esp+0x3c]
c0015f78:	75 63                	jne    c0015fdd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52e>
c0015f7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015f7e:	51                   	push   ecx
c0015f7f:	51                   	push   ecx
c0015f80:	56                   	push   esi
c0015f81:	68 3b 4c 02 c0       	push   0xc0024c3b
c0015f86:	e8 f1 0f ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0015f8b:	5e                   	pop    esi
c0015f8c:	58                   	pop    eax
c0015f8d:	68 55 4c 02 c0       	push   0xc0024c55
c0015f92:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c0015f99:	56                   	push   esi
c0015f9a:	e8 a1 a6 fe ff       	call   c0000640 <strcpy>
c0015f9f:	58                   	pop    eax
c0015fa0:	5a                   	pop    edx
c0015fa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fa5:	03 03                	add    eax,DWORD PTR [ebx]
c0015fa7:	50                   	push   eax
c0015fa8:	56                   	push   esi
c0015fa9:	e8 92 a8 fe ff       	call   c0000840 <strcat>
c0015fae:	59                   	pop    ecx
c0015faf:	5b                   	pop    ebx
c0015fb0:	68 ef 4c 02 c0       	push   0xc0024cef
c0015fb5:	56                   	push   esi
c0015fb6:	e8 85 a8 fe ff       	call   c0000840 <strcat>
c0015fbb:	83 c4 10             	add    esp,0x10
c0015fbe:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0015fc3:	0f 84 8e 01 00 00    	je     c0016157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0015fc9:	83 ec 0c             	sub    esp,0xc
c0015fcc:	56                   	push   esi
c0015fcd:	e8 22 9d ff ff       	call   c000fcf4 <KePanic(char const*)>
c0015fd2:	83 c4 10             	add    esp,0x10
c0015fd5:	8a 4c 24 37          	mov    cl,BYTE PTR [esp+0x37]
c0015fd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015fdd:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015fe2:	83 f8 01             	cmp    eax,0x1
c0015fe5:	0f 85 ab 00 00 00    	jne    c0016096 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e7>
c0015feb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fef:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c0015ff6:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c0015ffa:	01 d8                	add    eax,ebx
c0015ffc:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c0016004:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016008:	0f 94 44 24 3c       	sete   BYTE PTR [esp+0x3c]
c001600d:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0016015:	0f 94 c0             	sete   al
c0016018:	89 c6                	mov    esi,eax
c001601a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001601e:	0b 74 24 3c          	or     esi,DWORD PTR [esp+0x3c]
c0016022:	8b 00                	mov    eax,DWORD PTR [eax]
c0016024:	84 c9                	test   cl,cl
c0016026:	89 f1                	mov    ecx,esi
c0016028:	0f b6 f1             	movzx  esi,cl
c001602b:	74 39                	je     c0016066 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b7>
c001602d:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0016030:	85 f6                	test   esi,esi
c0016032:	75 15                	jne    c0016049 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59a>
c0016034:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016038:	66 83 f8 0c          	cmp    ax,0xc
c001603c:	76 05                	jbe    c0016043 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x594>
c001603e:	b8 0c 00 00 00       	mov    eax,0xc
c0016043:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0016047:	76 42                	jbe    c001608b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016049:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001604e:	0f 84 03 01 00 00    	je     c0016157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	68 6c 4c 02 c0       	push   0xc0024c6c
c001605c:	e8 93 9c ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016061:	83 c4 10             	add    esp,0x10
c0016064:	eb 25                	jmp    c001608b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016066:	01 c3                	add    ebx,eax
c0016068:	85 f6                	test   esi,esi
c001606a:	89 d8                	mov    eax,ebx
c001606c:	75 0d                	jne    c001607b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001606e:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c0016072:	3b 4c 24 24          	cmp    ecx,DWORD PTR [esp+0x24]
c0016076:	77 03                	ja     c001607b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0016078:	8d 04 1a             	lea    eax,[edx+ebx*1]
c001607b:	8d 90 00 00 00 28    	lea    edx,[eax+0x28000000]
c0016081:	81 fa ff ff ff 00    	cmp    edx,0xffffff
c0016087:	76 02                	jbe    c001608b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dc>
c0016089:	89 c3                	mov    ebx,eax
c001608b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001608f:	89 18                	mov    DWORD PTR [eax],ebx
c0016091:	e9 fe 00 00 00       	jmp    c0016194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016096:	83 f8 02             	cmp    eax,0x2
c0016099:	0f 85 8f 00 00 00    	jne    c001612e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001609f:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00160a6:	2b 5c 24 1c          	sub    ebx,DWORD PTR [esp+0x1c]
c00160aa:	03 5c 24 20          	add    ebx,DWORD PTR [esp+0x20]
c00160ae:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00160b6:	74 21                	je     c00160d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00160b8:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c00160c0:	74 17                	je     c00160d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c00160c2:	0f b7 77 30          	movzx  esi,WORD PTR [edi+0x30]
c00160c6:	b8 0a 00 00 00       	mov    eax,0xa
c00160cb:	83 fe 0e             	cmp    esi,0xe
c00160ce:	77 03                	ja     c00160d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c00160d0:	8d 46 fc             	lea    eax,[esi-0x4]
c00160d3:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00160d7:	76 27                	jbe    c0016100 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c00160d9:	88 4c 24 24          	mov    BYTE PTR [esp+0x24],cl
c00160dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00160e1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00160e6:	74 6f                	je     c0016157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00160e8:	83 ec 0c             	sub    esp,0xc
c00160eb:	68 88 4c 02 c0       	push   0xc0024c88
c00160f0:	e8 ff 9b ff ff       	call   c000fcf4 <KePanic(char const*)>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160fc:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
c0016100:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016102:	84 c9                	test   cl,cl
c0016104:	74 13                	je     c0016119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0016106:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001610a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0016111:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0016115:	01 c1                	add    ecx,eax
c0016117:	eb 06                	jmp    c001611f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0016119:	89 c1                	mov    ecx,eax
c001611b:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c001611f:	01 ca                	add    edx,ecx
c0016121:	3d fe ff 0f 00       	cmp    eax,0xffffe
c0016126:	77 02                	ja     c001612a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0016128:	89 c2                	mov    edx,eax
c001612a:	89 13                	mov    DWORD PTR [ebx],edx
c001612c:	eb 66                	jmp    c0016194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c001612e:	52                   	push   edx
c001612f:	52                   	push   edx
c0016130:	50                   	push   eax
c0016131:	68 a4 4c 02 c0       	push   0xc0024ca4
c0016136:	e8 41 0e ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001613b:	83 c4 10             	add    esp,0x10
c001613e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0016143:	74 12                	je     c0016157 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016145:	83 ec 0c             	sub    esp,0xc
c0016148:	68 af 4c 02 c0       	push   0xc0024caf
c001614d:	e8 a2 9b ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016152:	83 c4 10             	add    esp,0x10
c0016155:	eb 3d                	jmp    c0016194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e5>
c0016157:	83 ec 0c             	sub    esp,0xc
c001615a:	55                   	push   ebp
c001615b:	e8 a6 20 ff ff       	call   c0008206 <File::close()>
c0016160:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016163:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016166:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016169:	59                   	pop    ecx
c001616a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001616e:	e8 34 97 ff ff       	call   c000f8a7 <free>
c0016173:	5b                   	pop    ebx
c0016174:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016178:	e8 2a 97 ff ff       	call   c000f8a7 <free>
c001617d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016180:	e8 22 97 ff ff       	call   c000f8a7 <free>
c0016185:	5e                   	pop    esi
c0016186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001618a:	e8 18 97 ff ff       	call   c000f8a7 <free>
c001618f:	83 c4 10             	add    esp,0x10
c0016192:	eb 21                	jmp    c00161b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x706>
c0016194:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016198:	e9 63 fd ff ff       	jmp    c0015f00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c001619d:	83 ec 0c             	sub    esp,0xc
c00161a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00161a4:	e8 fe 96 ff ff       	call   c000f8a7 <free>
c00161a9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00161ad:	83 c4 10             	add    esp,0x10
c00161b0:	e9 d9 fc ff ff       	jmp    c0015e8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00161b5:	31 c0                	xor    eax,eax
c00161b7:	eb 33                	jmp    c00161ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73d>
c00161b9:	83 ec 0c             	sub    esp,0xc
c00161bc:	55                   	push   ebp
c00161bd:	e8 44 20 ff ff       	call   c0008206 <File::close()>
c00161c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00161c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00161c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161cb:	58                   	pop    eax
c00161cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161d0:	e8 d2 96 ff ff       	call   c000f8a7 <free>
c00161d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00161d8:	e8 ca 96 ff ff       	call   c000f8a7 <free>
c00161dd:	5a                   	pop    edx
c00161de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161e2:	e8 c0 96 ff ff       	call   c000f8a7 <free>
c00161e7:	83 c4 10             	add    esp,0x10
c00161ea:	b0 01                	mov    al,0x1
c00161ec:	81 c4 5c 03 00 00    	add    esp,0x35c
c00161f2:	5b                   	pop    ebx
c00161f3:	5e                   	pop    esi
c00161f4:	5f                   	pop    edi
c00161f5:	5d                   	pop    ebp
c00161f6:	c3                   	ret    

c00161f7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00161f7:	56                   	push   esi
c00161f8:	31 d2                	xor    edx,edx
c00161fa:	53                   	push   ebx
c00161fb:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c0016201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016205:	39 d3                	cmp    ebx,edx
c0016207:	7e 1b                	jle    c0016224 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016209:	8b 04 95 c0 c4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3b40]
c0016210:	39 c8                	cmp    eax,ecx
c0016212:	77 0d                	ja     c0016221 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016214:	8b 34 95 c0 c2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3d40]
c001621b:	01 c6                	add    esi,eax
c001621d:	39 ce                	cmp    esi,ecx
c001621f:	77 05                	ja     c0016226 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016221:	42                   	inc    edx
c0016222:	eb e1                	jmp    c0016205 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016224:	31 c0                	xor    eax,eax
c0016226:	5b                   	pop    ebx
c0016227:	5e                   	pop    esi
c0016228:	c3                   	ret    

c0016229 <Thr::getDriverNameFromAddress(unsigned long)>:
c0016229:	53                   	push   ebx
c001622a:	31 c0                	xor    eax,eax
c001622c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016230:	8b 1d a0 c2 02 c0    	mov    ebx,DWORD PTR ds:0xc002c2a0
c0016236:	39 c3                	cmp    ebx,eax
c0016238:	7e 22                	jle    c001625c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001623a:	8b 14 85 c0 c4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3b40]
c0016241:	39 ca                	cmp    edx,ecx
c0016243:	77 14                	ja     c0016259 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016245:	03 14 85 c0 c2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3d40]
c001624c:	39 ca                	cmp    edx,ecx
c001624e:	76 09                	jbe    c0016259 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016250:	8b 04 85 c0 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3940]
c0016257:	eb 05                	jmp    c001625e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016259:	40                   	inc    eax
c001625a:	eb da                	jmp    c0016236 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001625c:	31 c0                	xor    eax,eax
c001625e:	5b                   	pop    ebx
c001625f:	c3                   	ret    

c0016260 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016260:	53                   	push   ebx
c0016261:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016265:	53                   	push   ebx
c0016266:	e8 8c ff ff ff       	call   c00161f7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001626b:	5a                   	pop    edx
c001626c:	31 d2                	xor    edx,edx
c001626e:	85 c0                	test   eax,eax
c0016270:	74 04                	je     c0016276 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016272:	89 da                	mov    edx,ebx
c0016274:	29 c2                	sub    edx,eax
c0016276:	89 d0                	mov    eax,edx
c0016278:	5b                   	pop    ebx
c0016279:	c3                   	ret    

c001627a <Thr::loadDLL(char const*, bool)>:
c001627a:	55                   	push   ebp
c001627b:	57                   	push   edi
c001627c:	56                   	push   esi
c001627d:	53                   	push   ebx
c001627e:	81 ec 34 01 00 00    	sub    esp,0x134
c0016284:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001628b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016292:	56                   	push   esi
c0016293:	68 c7 4c 02 c0       	push   0xc0024cc7
c0016298:	e8 df 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001629d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00162a4:	e8 ee 95 ff ff       	call   c000f897 <malloc>
c00162a9:	83 c4 0c             	add    esp,0xc
c00162ac:	89 c3                	mov    ebx,eax
c00162ae:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c00162b4:	56                   	push   esi
c00162b5:	50                   	push   eax
c00162b6:	e8 cf 1e ff ff       	call   c000818a <File::File(char const*, Process*)>
c00162bb:	83 c4 10             	add    esp,0x10
c00162be:	85 db                	test   ebx,ebx
c00162c0:	75 3c                	jne    c00162fe <Thr::loadDLL(char const*, bool)+0x84>
c00162c2:	89 f8                	mov    eax,edi
c00162c4:	84 c0                	test   al,al
c00162c6:	0f 84 f3 01 00 00    	je     c00164bf <Thr::loadDLL(char const*, bool)+0x245>
c00162cc:	55                   	push   ebp
c00162cd:	55                   	push   ebp
c00162ce:	68 d8 4c 02 c0       	push   0xc0024cd8
c00162d3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00162d7:	55                   	push   ebp
c00162d8:	e8 63 a3 fe ff       	call   c0000640 <strcpy>
c00162dd:	58                   	pop    eax
c00162de:	5a                   	pop    edx
c00162df:	56                   	push   esi
c00162e0:	55                   	push   ebp
c00162e1:	e8 5a a5 fe ff       	call   c0000840 <strcat>
c00162e6:	59                   	pop    ecx
c00162e7:	58                   	pop    eax
c00162e8:	68 ef 4c 02 c0       	push   0xc0024cef
c00162ed:	55                   	push   ebp
c00162ee:	e8 4d a5 fe ff       	call   c0000840 <strcat>
c00162f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162f6:	e8 f9 99 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00162fb:	83 c4 10             	add    esp,0x10
c00162fe:	51                   	push   ecx
c00162ff:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016303:	50                   	push   eax
c0016304:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016308:	50                   	push   eax
c0016309:	53                   	push   ebx
c001630a:	e8 9b 21 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001630f:	83 c4 10             	add    esp,0x10
c0016312:	89 c5                	mov    ebp,eax
c0016314:	85 db                	test   ebx,ebx
c0016316:	74 0c                	je     c0016324 <Thr::loadDLL(char const*, bool)+0xaa>
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001631d:	53                   	push   ebx
c001631e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	83 ec 0c             	sub    esp,0xc
c0016327:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001632c:	50                   	push   eax
c001632d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016335:	55                   	push   ebp
c0016336:	68 f1 4c 02 c0       	push   0xc0024cf1
c001633b:	e8 3c 0c ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016340:	83 c4 20             	add    esp,0x20
c0016343:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016348:	75 0a                	jne    c0016354 <Thr::loadDLL(char const*, bool)+0xda>
c001634a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001634e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016352:	75 3c                	jne    c0016390 <Thr::loadDLL(char const*, bool)+0x116>
c0016354:	89 f8                	mov    eax,edi
c0016356:	84 c0                	test   al,al
c0016358:	0f 84 49 01 00 00    	je     c00164a7 <Thr::loadDLL(char const*, bool)+0x22d>
c001635e:	51                   	push   ecx
c001635f:	51                   	push   ecx
c0016360:	68 12 4d 02 c0       	push   0xc0024d12
c0016365:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016369:	53                   	push   ebx
c001636a:	e8 d1 a2 fe ff       	call   c0000640 <strcpy>
c001636f:	5d                   	pop    ebp
c0016370:	58                   	pop    eax
c0016371:	56                   	push   esi
c0016372:	53                   	push   ebx
c0016373:	e8 c8 a4 fe ff       	call   c0000840 <strcat>
c0016378:	58                   	pop    eax
c0016379:	5a                   	pop    edx
c001637a:	68 ef 4c 02 c0       	push   0xc0024cef
c001637f:	53                   	push   ebx
c0016380:	e8 bb a4 fe ff       	call   c0000840 <strcat>
c0016385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016388:	e8 67 99 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	52                   	push   edx
c0016391:	6a 03                	push   0x3
c0016393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016397:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001639b:	05 ff 0f 00 00       	add    eax,0xfff
c00163a0:	83 d2 00             	adc    edx,0x0
c00163a3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00163a7:	50                   	push   eax
c00163a8:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c00163ae:	e8 6b d7 ff ff       	call   c0013b1e <VAS::allocatePages(int, int)>
c00163b3:	59                   	pop    ecx
c00163b4:	89 c3                	mov    ebx,eax
c00163b6:	5d                   	pop    ebp
c00163b7:	50                   	push   eax
c00163b8:	68 fe 41 02 c0       	push   0xc00241fe
c00163bd:	e8 ba 0b ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00163c2:	89 34 24             	mov    DWORD PTR [esp],esi
c00163c5:	e8 a6 a1 fe ff       	call   c0000570 <strlen>
c00163ca:	8b 2d a0 c2 02 c0    	mov    ebp,DWORD PTR ds:0xc002c2a0
c00163d0:	40                   	inc    eax
c00163d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00163d4:	e8 be 94 ff ff       	call   c000f897 <malloc>
c00163d9:	89 04 ad c0 c6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3940],eax
c00163e0:	58                   	pop    eax
c00163e1:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c00163e6:	5a                   	pop    edx
c00163e7:	56                   	push   esi
c00163e8:	ff 34 85 c0 c6 02 c0 	push   DWORD PTR [eax*4-0x3ffd3940]
c00163ef:	e8 4c a2 fe ff       	call   c0000640 <strcpy>
c00163f4:	a1 a0 c2 02 c0       	mov    eax,ds:0xc002c2a0
c00163f9:	8d 50 01             	lea    edx,[eax+0x1]
c00163fc:	89 1c 85 c0 c4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3b40],ebx
c0016403:	89 15 a0 c2 02 c0    	mov    DWORD PTR ds:0xc002c2a0,edx
c0016409:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001640d:	83 c4 0c             	add    esp,0xc
c0016410:	89 14 85 c0 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3d40],edx
c0016417:	6a 01                	push   0x1
c0016419:	53                   	push   ebx
c001641a:	56                   	push   esi
c001641b:	e8 8f f6 ff ff       	call   c0015aaf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016420:	83 c4 10             	add    esp,0x10
c0016423:	0f b6 c0             	movzx  eax,al
c0016426:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001642a:	85 c0                	test   eax,eax
c001642c:	0f 85 89 00 00 00    	jne    c00164bb <Thr::loadDLL(char const*, bool)+0x241>
c0016432:	89 f8                	mov    eax,edi
c0016434:	84 c0                	test   al,al
c0016436:	74 73                	je     c00164ab <Thr::loadDLL(char const*, bool)+0x231>
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	68 2b 4d 02 c0       	push   0xc0024d2b
c0016440:	e8 af 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0016445:	83 c4 10             	add    esp,0x10
c0016448:	eb 61                	jmp    c00164ab <Thr::loadDLL(char const*, bool)+0x231>
c001644a:	50                   	push   eax
c001644b:	50                   	push   eax
c001644c:	89 e8                	mov    eax,ebp
c001644e:	c1 e0 0c             	shl    eax,0xc
c0016451:	01 d8                	add    eax,ebx
c0016453:	50                   	push   eax
c0016454:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001645a:	e8 c1 d1 ff ff       	call   c0013620 <VAS::getPageTableEntry(unsigned long)>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	8b 00                	mov    eax,DWORD PTR [eax]
c0016464:	a8 60                	test   al,0x60
c0016466:	75 11                	jne    c0016479 <Thr::loadDLL(char const*, bool)+0x1ff>
c0016468:	83 ec 0c             	sub    esp,0xc
c001646b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016470:	50                   	push   eax
c0016471:	e8 09 9a ff ff       	call   c000fe7f <Phys::freePage(unsigned long)>
c0016476:	83 c4 10             	add    esp,0x10
c0016479:	45                   	inc    ebp
c001647a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001647e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016482:	05 ff 0f 00 00       	add    eax,0xfff
c0016487:	bf 00 00 00 00       	mov    edi,0x0
c001648c:	83 d2 00             	adc    edx,0x0
c001648f:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016493:	c1 ea 0c             	shr    edx,0xc
c0016496:	39 c5                	cmp    ebp,eax
c0016498:	89 d1                	mov    ecx,edx
c001649a:	89 f8                	mov    eax,edi
c001649c:	19 c8                	sbb    eax,ecx
c001649e:	72 aa                	jb     c001644a <Thr::loadDLL(char const*, bool)+0x1d0>
c00164a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164a5:	75 18                	jne    c00164bf <Thr::loadDLL(char const*, bool)+0x245>
c00164a7:	31 db                	xor    ebx,ebx
c00164a9:	eb 14                	jmp    c00164bf <Thr::loadDLL(char const*, bool)+0x245>
c00164ab:	83 ec 0c             	sub    esp,0xc
c00164ae:	68 4a 4d 02 c0       	push   0xc0024d4a
c00164b3:	e8 3c 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00164b8:	83 c4 10             	add    esp,0x10
c00164bb:	31 ed                	xor    ebp,ebp
c00164bd:	eb bb                	jmp    c001647a <Thr::loadDLL(char const*, bool)+0x200>
c00164bf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164c5:	89 d8                	mov    eax,ebx
c00164c7:	5b                   	pop    ebx
c00164c8:	5e                   	pop    esi
c00164c9:	5f                   	pop    edi
c00164ca:	5d                   	pop    ebp
c00164cb:	c3                   	ret    

c00164cc <Thr::executeDLL(unsigned long, void*)>:
c00164cc:	56                   	push   esi
c00164cd:	53                   	push   ebx
c00164ce:	52                   	push   edx
c00164cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00164d7:	85 db                	test   ebx,ebx
c00164d9:	75 10                	jne    c00164eb <Thr::executeDLL(unsigned long, void*)+0x1f>
c00164db:	83 ec 0c             	sub    esp,0xc
c00164de:	68 66 4d 02 c0       	push   0xc0024d66
c00164e3:	e8 0c 98 ff ff       	call   c000fcf4 <KePanic(char const*)>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	50                   	push   eax
c00164ec:	50                   	push   eax
c00164ed:	53                   	push   ebx
c00164ee:	68 90 4d 02 c0       	push   0xc0024d90
c00164f3:	e8 84 0a ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00164f8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00164fc:	89 d8                	mov    eax,ebx
c00164fe:	83 c4 14             	add    esp,0x14
c0016501:	5b                   	pop    ebx
c0016502:	5e                   	pop    esi
c0016503:	ff e0                	jmp    eax

c0016505 <KeProcessExec(Process*, char const*)>:
c0016505:	56                   	push   esi
c0016506:	53                   	push   ebx
c0016507:	83 ec 04             	sub    esp,0x4
c001650a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001650e:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0016514:	85 f6                	test   esi,esi
c0016516:	74 16                	je     c001652e <KeProcessExec(Process*, char const*)+0x29>
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	56                   	push   esi
c001651c:	e8 91 d3 ff ff       	call   c00138b2 <VAS::~VAS()>
c0016521:	58                   	pop    eax
c0016522:	5a                   	pop    edx
c0016523:	6a 14                	push   0x14
c0016525:	56                   	push   esi
c0016526:	e8 85 6e ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001652b:	83 c4 10             	add    esp,0x10
c001652e:	83 ec 0c             	sub    esp,0xc
c0016531:	6a 14                	push   0x14
c0016533:	e8 5f 93 ff ff       	call   c000f897 <malloc>
c0016538:	89 c6                	mov    esi,eax
c001653a:	58                   	pop    eax
c001653b:	5a                   	pop    edx
c001653c:	6a 00                	push   0x0
c001653e:	56                   	push   esi
c001653f:	e8 0e d8 ff ff       	call   c0013d52 <VAS::VAS(bool)>
c0016544:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c001654a:	59                   	pop    ecx
c001654b:	5e                   	pop    esi
c001654c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016550:	50                   	push   eax
c0016551:	53                   	push   ebx
c0016552:	e8 a0 ef ff ff       	call   c00154f7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016557:	83 c4 14             	add    esp,0x14
c001655a:	31 c0                	xor    eax,eax
c001655c:	5b                   	pop    ebx
c001655d:	5e                   	pop    esi
c001655e:	c3                   	ret    
c001655f:	90                   	nop

c0016560 <userModeEntryPoint(void*)>:
c0016560:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016568:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001656d:	85 c0                	test   eax,eax
c001656f:	75 03                	jne    c0016574 <userModeEntryPoint(void*)+0x14>
c0016571:	fb                   	sti    
c0016572:	66 90                	xchg   ax,ax
c0016574:	fb                   	sti    
c0016575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001657a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001657d:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0016583:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016587:	e9 b3 9c fe ff       	jmp    c000023f <goToUsermode>

c001658c <changeTSS>:
c001658c:	83 ec 14             	sub    esp,0x14
c001658f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016594:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0016597:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001659c:	c1 e2 15             	shl    edx,0x15
c001659f:	29 d0                	sub    eax,edx
c00165a1:	50                   	push   eax
c00165a2:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c00165a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00165ad:	05 68 11 00 00       	add    eax,0x1168
c00165b2:	50                   	push   eax
c00165b3:	e8 40 c6 ff ff       	call   c0012bf8 <TSS::setESP(unsigned long)>
c00165b8:	83 c4 1c             	add    esp,0x1c
c00165bb:	c3                   	ret    

c00165bc <switchToThread(ThreadControlBlock*)>:
c00165bc:	57                   	push   edi
c00165bd:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c00165c3:	56                   	push   esi
c00165c4:	85 c9                	test   ecx,ecx
c00165c6:	53                   	push   ebx
c00165c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165cb:	0f 85 9b 00 00 00    	jne    c001666c <switchToThread(ThreadControlBlock*)+0xb0>
c00165d1:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00165d5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00165db:	0f 84 87 00 00 00    	je     c0016668 <switchToThread(ThreadControlBlock*)+0xac>
c00165e1:	b8 00 04 00 00       	mov    eax,0x400
c00165e6:	29 d0                	sub    eax,edx
c00165e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00165eb:	d1 f8                	sar    eax,1
c00165ed:	01 d0                	add    eax,edx
c00165ef:	90                   	nop
c00165f0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00165f3:	e8 ad 3e 00 00       	call   c001a4a5 <HalQueryPerformanceCounter()>
c00165f8:	a3 b0 ca 02 c0       	mov    ds:0xc002cab0,eax
c00165fd:	89 15 b4 ca 02 c0    	mov    DWORD PTR ds:0xc002cab4,edx
c0016603:	89 c6                	mov    esi,eax
c0016605:	89 d7                	mov    edi,edx
c0016607:	2b 35 a0 ca 02 c0    	sub    esi,DWORD PTR ds:0xc002caa0
c001660d:	a3 a0 ca 02 c0       	mov    ds:0xc002caa0,eax
c0016612:	1b 3d a4 ca 02 c0    	sbb    edi,DWORD PTR ds:0xc002caa4
c0016618:	89 35 a8 ca 02 c0    	mov    DWORD PTR ds:0xc002caa8,esi
c001661e:	89 3d ac ca 02 c0    	mov    DWORD PTR ds:0xc002caac,edi
c0016624:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001662a:	89 15 a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edx
c0016630:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016633:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016636:	01 c6                	add    esi,eax
c0016638:	11 d7                	adc    edi,edx
c001663a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001663d:	83 ec 0c             	sub    esp,0xc
c0016640:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016643:	53                   	push   ebx
c0016644:	e8 2e 9c fe ff       	call   c0000277 <switchToThreadASM>
c0016649:	0f 20 c0             	mov    eax,cr0
c001664c:	83 c8 08             	or     eax,0x8
c001664f:	0f 22 c0             	mov    cr0,eax
c0016652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016657:	83 c4 10             	add    esp,0x10
c001665a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001665e:	5b                   	pop    ebx
c001665f:	5e                   	pop    esi
c0016660:	5f                   	pop    edi
c0016661:	e9 0e eb ff ff       	jmp    c0015174 <KeCheckAlarm(ThreadControlBlock*)>
c0016666:	66 90                	xchg   ax,ax
c0016668:	31 c0                	xor    eax,eax
c001666a:	eb 84                	jmp    c00165f0 <switchToThread(ThreadControlBlock*)+0x34>
c001666c:	5b                   	pop    ebx
c001666d:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016677:	5e                   	pop    esi
c0016678:	5f                   	pop    edi
c0016679:	c3                   	ret    
c001667a:	66 90                	xchg   ax,ax

c001667c <Process::addArgs(char**)>:
c001667c:	57                   	push   edi
c001667d:	56                   	push   esi
c001667e:	53                   	push   ebx
c001667f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016683:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016687:	c7 86 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x5b6],0x0
c0016691:	85 ff                	test   edi,edi
c0016693:	74 4f                	je     c00166e4 <Process::addArgs(char**)+0x68>
c0016695:	8b 07                	mov    eax,DWORD PTR [edi]
c0016697:	85 c0                	test   eax,eax
c0016699:	74 49                	je     c00166e4 <Process::addArgs(char**)+0x68>
c001669b:	31 db                	xor    ebx,ebx
c001669d:	8d 76 00             	lea    esi,[esi+0x0]
c00166a0:	83 ec 0c             	sub    esp,0xc
c00166a3:	50                   	push   eax
c00166a4:	e8 c7 9e fe ff       	call   c0000570 <strlen>
c00166a9:	83 c0 01             	add    eax,0x1
c00166ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00166af:	e8 e3 91 ff ff       	call   c000f897 <malloc>
c00166b4:	89 84 9e ba 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x5ba],eax
c00166bb:	5a                   	pop    edx
c00166bc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00166bf:	59                   	pop    ecx
c00166c0:	83 c3 01             	add    ebx,0x1
c00166c3:	52                   	push   edx
c00166c4:	50                   	push   eax
c00166c5:	e8 76 9f fe ff       	call   c0000640 <strcpy>
c00166ca:	8b 8e b6 05 00 00    	mov    ecx,DWORD PTR [esi+0x5b6]
c00166d0:	83 c4 10             	add    esp,0x10
c00166d3:	83 c1 01             	add    ecx,0x1
c00166d6:	89 8e b6 05 00 00    	mov    DWORD PTR [esi+0x5b6],ecx
c00166dc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00166df:	85 c0                	test   eax,eax
c00166e1:	75 bd                	jne    c00166a0 <Process::addArgs(char**)+0x24>
c00166e3:	90                   	nop
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	5f                   	pop    edi
c00166e7:	c3                   	ret    

c00166e8 <Process::Process(char const*, Process*, char**)>:
c00166e8:	56                   	push   esi
c00166e9:	53                   	push   ebx
c00166ea:	83 ec 14             	sub    esp,0x14
c00166ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166f1:	05 0c 02 00 00       	add    eax,0x20c
c00166f6:	bb 07 00 00 00       	mov    ebx,0x7
c00166fb:	89 c6                	mov    esi,eax
c00166fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016700:	85 db                	test   ebx,ebx
c0016702:	78 14                	js     c0016718 <Process::Process(char const*, Process*, char**)+0x30>
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	56                   	push   esi
c0016708:	e8 c3 bb 00 00       	call   c00222d0 <ThreadControlBlock::ThreadControlBlock()>
c001670d:	83 c4 10             	add    esp,0x10
c0016710:	83 c6 73             	add    esi,0x73
c0016713:	83 eb 01             	sub    ebx,0x1
c0016716:	eb e8                	jmp    c0016700 <Process::Process(char const*, Process*, char**)+0x18>
c0016718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001671c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016723:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016727:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016735:	e8 a2 7e ff ff       	call   c000e5dc <KeNewProcessEnv(Process*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	89 c2                	mov    edx,eax
c001673f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016743:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016756:	a1 bc 69 02 c0       	mov    eax,ds:0xc00269bc
c001675b:	8d 50 01             	lea    edx,[eax+0x1]
c001675e:	89 15 bc 69 02 c0    	mov    DWORD PTR ds:0xc00269bc,edx
c0016764:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016768:	89 02                	mov    DWORD PTR [edx],eax
c001676a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016779:	e8 19 91 ff ff       	call   c000f897 <malloc>
c001677e:	83 c4 10             	add    esp,0x10
c0016781:	89 c3                	mov    ebx,eax
c0016783:	83 ec 08             	sub    esp,0x8
c0016786:	6a 00                	push   0x0
c0016788:	53                   	push   ebx
c0016789:	e8 c4 d5 ff ff       	call   c0013d52 <VAS::VAS(bool)>
c001678e:	83 c4 10             	add    esp,0x10
c0016791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016795:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c001679b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679f:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00167a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00167b1:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00167b7:	e8 57 a7 ff ff       	call   c0010f13 <KeInitSignals()>
c00167bc:	89 c2                	mov    edx,eax
c00167be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c2:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c00167c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167cc:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167d2:	85 c0                	test   eax,eax
c00167d4:	74 42                	je     c0016818 <Process::Process(char const*, Process*, char**)+0x130>
c00167d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167da:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167e0:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00167e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ea:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c00167f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f4:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c00167fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016804:	05 0c 01 00 00       	add    eax,0x10c
c0016809:	83 ec 08             	sub    esp,0x8
c001680c:	52                   	push   edx
c001680d:	50                   	push   eax
c001680e:	e8 2d 9e fe ff       	call   c0000640 <strcpy>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	eb 7c                	jmp    c0016894 <Process::Process(char const*, Process*, char**)+0x1ac>
c0016818:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016827:	e8 6b 90 ff ff       	call   c000f897 <malloc>
c001682c:	83 c4 10             	add    esp,0x10
c001682f:	89 c3                	mov    ebx,eax
c0016831:	83 ec 08             	sub    esp,0x8
c0016834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016838:	53                   	push   ebx
c0016839:	e8 ba c0 ff ff       	call   c00128f8 <VgaText::VgaText(char const*)>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016845:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c001684b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016855:	83 ec 0c             	sub    esp,0xc
c0016858:	50                   	push   eax
c0016859:	e8 f0 b8 ff ff       	call   c001214e <addToTerminalCycle(VgaText*)>
c001685e:	83 c4 10             	add    esp,0x10
c0016861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016865:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001686b:	83 ec 0c             	sub    esp,0xc
c001686e:	50                   	push   eax
c001686f:	e8 4b bb ff ff       	call   c00123bf <setActiveTerminal(VgaText*)>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687b:	05 0c 01 00 00       	add    eax,0x10c
c0016880:	83 ec 08             	sub    esp,0x8
c0016883:	68 af 4d 02 c0       	push   0xc0024daf
c0016888:	50                   	push   eax
c0016889:	e8 b2 9d fe ff       	call   c0000640 <strcpy>
c001688e:	83 c4 10             	add    esp,0x10
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016898:	83 c0 0c             	add    eax,0xc
c001689b:	83 ec 08             	sub    esp,0x8
c001689e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a2:	50                   	push   eax
c00168a3:	e8 98 9d fe ff       	call   c0000640 <strcpy>
c00168a8:	83 c4 10             	add    esp,0x10
c00168ab:	83 ec 08             	sub    esp,0x8
c00168ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168b6:	e8 c1 fd ff ff       	call   c001667c <Process::addArgs(char**)>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c2:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c00168c8:	83 e2 7f             	and    edx,0x7f
c00168cb:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00168d1:	83 ec 08             	sub    esp,0x8
c00168d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168dc:	e8 16 ec ff ff       	call   c00154f7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00168e8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00168ec:	83 f0 01             	xor    eax,0x1
c00168ef:	88 c2                	mov    dl,al
c00168f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f5:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c00168fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0016901:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016906:	52                   	push   edx
c0016907:	50                   	push   eax
c0016908:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001690c:	68 08 4e 02 c0       	push   0xc0024e08
c0016911:	e8 66 06 ff ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	90                   	nop
c001691a:	83 c4 14             	add    esp,0x14
c001691d:	5b                   	pop    ebx
c001691e:	5e                   	pop    esi
c001691f:	c3                   	ret    

c0016920 <Process::Process(bool, char const*, Process*, char**)>:
c0016920:	56                   	push   esi
c0016921:	53                   	push   ebx
c0016922:	83 ec 24             	sub    esp,0x24
c0016925:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016929:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001692d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016931:	05 0c 02 00 00       	add    eax,0x20c
c0016936:	bb 07 00 00 00       	mov    ebx,0x7
c001693b:	89 c6                	mov    esi,eax
c001693d:	8d 76 00             	lea    esi,[esi+0x0]
c0016940:	85 db                	test   ebx,ebx
c0016942:	78 14                	js     c0016958 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	56                   	push   esi
c0016948:	e8 83 b9 00 00       	call   c00222d0 <ThreadControlBlock::ThreadControlBlock()>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	83 c6 73             	add    esi,0x73
c0016953:	83 eb 01             	sub    ebx,0x1
c0016956:	eb e8                	jmp    c0016940 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016958:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001695c:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0016963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016967:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016975:	e8 62 7c ff ff       	call   c000e5dc <KeNewProcessEnv(Process*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	89 c2                	mov    edx,eax
c001697f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016983:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0016989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698d:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0016996:	a1 bc 69 02 c0       	mov    eax,ds:0xc00269bc
c001699b:	8d 50 01             	lea    edx,[eax+0x1]
c001699e:	89 15 bc 69 02 c0    	mov    DWORD PTR ds:0xc00269bc,edx
c00169a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00169a8:	89 02                	mov    DWORD PTR [edx],eax
c00169aa:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00169b2:	83 ec 0c             	sub    esp,0xc
c00169b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00169b9:	e8 d9 8e ff ff       	call   c000f897 <malloc>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	89 c3                	mov    ebx,eax
c00169c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00169c8:	83 ec 08             	sub    esp,0x8
c00169cb:	50                   	push   eax
c00169cc:	53                   	push   ebx
c00169cd:	e8 80 d3 ff ff       	call   c0013d52 <VAS::VAS(bool)>
c00169d2:	83 c4 10             	add    esp,0x10
c00169d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169d9:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c00169df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169e3:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00169ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169f1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00169f5:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c00169fb:	e8 13 a5 ff ff       	call   c0010f13 <KeInitSignals()>
c0016a00:	89 c2                	mov    edx,eax
c0016a02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a06:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016a0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a10:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a16:	85 c0                	test   eax,eax
c0016a18:	74 42                	je     c0016a5c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a1e:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a24:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a2e:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016a34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a38:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016a3e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a48:	05 0c 01 00 00       	add    eax,0x10c
c0016a4d:	83 ec 08             	sub    esp,0x8
c0016a50:	52                   	push   edx
c0016a51:	50                   	push   eax
c0016a52:	e8 e9 9b fe ff       	call   c0000640 <strcpy>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	eb 7c                	jmp    c0016ad8 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016a5c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a6b:	e8 27 8e ff ff       	call   c000f897 <malloc>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	89 c3                	mov    ebx,eax
c0016a75:	83 ec 08             	sub    esp,0x8
c0016a78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a7c:	53                   	push   ebx
c0016a7d:	e8 76 be ff ff       	call   c00128f8 <VgaText::VgaText(char const*)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a89:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016a8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a93:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016a99:	83 ec 0c             	sub    esp,0xc
c0016a9c:	50                   	push   eax
c0016a9d:	e8 ac b6 ff ff       	call   c001214e <addToTerminalCycle(VgaText*)>
c0016aa2:	83 c4 10             	add    esp,0x10
c0016aa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aa9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	50                   	push   eax
c0016ab3:	e8 07 b9 ff ff       	call   c00123bf <setActiveTerminal(VgaText*)>
c0016ab8:	83 c4 10             	add    esp,0x10
c0016abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016abf:	05 0c 01 00 00       	add    eax,0x10c
c0016ac4:	83 ec 08             	sub    esp,0x8
c0016ac7:	68 af 4d 02 c0       	push   0xc0024daf
c0016acc:	50                   	push   eax
c0016acd:	e8 6e 9b fe ff       	call   c0000640 <strcpy>
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016adc:	83 c0 0c             	add    eax,0xc
c0016adf:	83 ec 08             	sub    esp,0x8
c0016ae2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ae6:	50                   	push   eax
c0016ae7:	e8 54 9b fe ff       	call   c0000640 <strcpy>
c0016aec:	83 c4 10             	add    esp,0x10
c0016aef:	83 ec 08             	sub    esp,0x8
c0016af2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016af6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016afa:	e8 7d fb ff ff       	call   c001667c <Process::addArgs(char**)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	90                   	nop
c0016b03:	83 c4 24             	add    esp,0x24
c0016b06:	5b                   	pop    ebx
c0016b07:	5e                   	pop    esi
c0016b08:	c3                   	ret    
c0016b09:	8d 76 00             	lea    esi,[esi+0x0]

c0016b0c <taskStartupFunction>:
c0016b0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b11:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016b14:	c3                   	ret    
c0016b15:	8d 76 00             	lea    esi,[esi+0x0]

c0016b18 <KeDisablePreemption()>:
c0016b18:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016b1d:	85 c0                	test   eax,eax
c0016b1f:	75 13                	jne    c0016b34 <KeDisablePreemption()+0x1c>
c0016b21:	8a 15 0c c1 02 c0    	mov    dl,BYTE PTR ds:0xc002c10c
c0016b27:	c6 05 0c c1 02 c0 00 	mov    BYTE PTR ds:0xc002c10c,0x0
c0016b2e:	88 15 48 ca 02 c0    	mov    BYTE PTR ds:0xc002ca48,dl
c0016b34:	83 c0 01             	add    eax,0x1
c0016b37:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016b3c:	c3                   	ret    
c0016b3d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b40 <KeRestorePreemption()>:
c0016b40:	a1 4c ca 02 c0       	mov    eax,ds:0xc002ca4c
c0016b45:	83 e8 01             	sub    eax,0x1
c0016b48:	a3 4c ca 02 c0       	mov    ds:0xc002ca4c,eax
c0016b4d:	75 0d                	jne    c0016b5c <KeRestorePreemption()+0x1c>
c0016b4f:	a0 48 ca 02 c0       	mov    al,ds:0xc002ca48
c0016b54:	a2 0c c1 02 c0       	mov    ds:0xc002c10c,al
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	c3                   	ret    
c0016b5d:	90                   	nop
c0016b5e:	66 90                	xchg   ax,ax

c0016b60 <Process::createThread(void (*)(void*), void*, int)>:
c0016b60:	55                   	push   ebp
c0016b61:	31 c9                	xor    ecx,ecx
c0016b63:	57                   	push   edi
c0016b64:	56                   	push   esi
c0016b65:	53                   	push   ebx
c0016b66:	83 ec 0c             	sub    esp,0xc
c0016b69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016b6d:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c0016b74:	89 f2                	mov    edx,esi
c0016b76:	66 90                	xchg   ax,ax
c0016b78:	0f b7 c2             	movzx  eax,dx
c0016b7b:	80 e2 01             	and    dl,0x1
c0016b7e:	74 18                	je     c0016b98 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016b80:	d1 f8                	sar    eax,1
c0016b82:	83 c1 01             	add    ecx,0x1
c0016b85:	89 c2                	mov    edx,eax
c0016b87:	83 f9 10             	cmp    ecx,0x10
c0016b8a:	75 ec                	jne    c0016b78 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016b8c:	83 c4 0c             	add    esp,0xc
c0016b8f:	31 db                	xor    ebx,ebx
c0016b91:	89 d8                	mov    eax,ebx
c0016b93:	5b                   	pop    ebx
c0016b94:	5e                   	pop    esi
c0016b95:	5f                   	pop    edi
c0016b96:	5d                   	pop    ebp
c0016b97:	c3                   	ret    
c0016b98:	b8 01 00 00 00       	mov    eax,0x1
c0016b9d:	d3 e0                	shl    eax,cl
c0016b9f:	09 c6                	or     esi,eax
c0016ba1:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016ba4:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c0016bab:	01 c0                	add    eax,eax
c0016bad:	01 c8                	add    eax,ecx
c0016baf:	01 c0                	add    eax,eax
c0016bb1:	01 c8                	add    eax,ecx
c0016bb3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016bb6:	01 d8                	add    eax,ebx
c0016bb8:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016bbf:	75 0b                	jne    c0016bcc <Process::createThread(void (*)(void*), void*, int)+0x6c>
c0016bc1:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016bcb:	90                   	nop
c0016bcc:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016bd2:	83 ec 0c             	sub    esp,0xc
c0016bd5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016bd8:	8d 04 89             	lea    eax,[ecx+ecx*4]
c0016bdb:	01 c0                	add    eax,eax
c0016bdd:	01 c8                	add    eax,ecx
c0016bdf:	01 c0                	add    eax,eax
c0016be1:	01 c8                	add    eax,ecx
c0016be3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016be6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016be9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016bef:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016bf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bf9:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016bff:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016c05:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0016c0b:	89 ca                	mov    edx,ecx
c0016c0d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016c14:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016c18:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c0016c22:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016c2c:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016c33:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c0016c3a:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016c41:	f7 da                	neg    edx
c0016c43:	c1 e2 15             	shl    edx,0x15
c0016c46:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016c4c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016c52:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016c56:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016c60:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016c66:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016c6c:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016c72:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016c7c:	83 e2 80             	and    edx,0xffffff80
c0016c7f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016c89:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016c8f:	68 00 01 00 00       	push   0x100
c0016c94:	e8 fe 8b ff ff       	call   c000f897 <malloc>
c0016c99:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016c9c:	58                   	pop    eax
c0016c9d:	5a                   	pop    edx
c0016c9e:	53                   	push   ebx
c0016c9f:	68 8c ca 02 c0       	push   0xc002ca8c
c0016ca4:	e8 d3 b1 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ca9:	89 d8                	mov    eax,ebx
c0016cab:	83 c4 10             	add    esp,0x10
c0016cae:	83 c4 0c             	add    esp,0xc
c0016cb1:	5b                   	pop    ebx
c0016cb2:	5e                   	pop    esi
c0016cb3:	5f                   	pop    edi
c0016cb4:	5d                   	pop    ebp
c0016cb5:	c3                   	ret    
c0016cb6:	66 90                	xchg   ax,ax

c0016cb8 <Process::createUserThread()>:
c0016cb8:	83 ec 0c             	sub    esp,0xc
c0016cbb:	68 80 00 00 00       	push   0x80
c0016cc0:	6a 00                	push   0x0
c0016cc2:	68 60 65 01 c0       	push   0xc0016560
c0016cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ccb:	50                   	push   eax
c0016ccc:	e8 8f fe ff ff       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c0016cd1:	83 c4 1c             	add    esp,0x1c
c0016cd4:	c3                   	ret    
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd8 <setupMultitasking(void (*)())>:
c0016cd8:	56                   	push   esi
c0016cd9:	53                   	push   ebx
c0016cda:	83 ec 04             	sub    esp,0x4
c0016cdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ce1:	eb 11                	jmp    c0016cf4 <setupMultitasking(void (*)())+0x1c>
c0016ce3:	90                   	nop
c0016ce4:	83 ec 0c             	sub    esp,0xc
c0016ce7:	68 8c ca 02 c0       	push   0xc002ca8c
c0016cec:	e8 cf b0 00 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016cf1:	83 c4 10             	add    esp,0x10
c0016cf4:	83 ec 0c             	sub    esp,0xc
c0016cf7:	68 8c ca 02 c0       	push   0xc002ca8c
c0016cfc:	e8 9b b0 00 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016d01:	83 c4 10             	add    esp,0x10
c0016d04:	84 c0                	test   al,al
c0016d06:	74 dc                	je     c0016ce4 <setupMultitasking(void (*)())+0xc>
c0016d08:	83 ec 0c             	sub    esp,0xc
c0016d0b:	68 c4 07 00 00       	push   0x7c4
c0016d10:	e8 82 8b ff ff       	call   c000f897 <malloc>
c0016d15:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016d1c:	89 c3                	mov    ebx,eax
c0016d1e:	6a 00                	push   0x0
c0016d20:	68 b3 4d 02 c0       	push   0xc0024db3
c0016d25:	6a 01                	push   0x1
c0016d27:	50                   	push   eax
c0016d28:	e8 f3 fb ff ff       	call   c0016920 <Process::Process(bool, char const*, Process*, char**)>
c0016d2d:	83 c4 14             	add    esp,0x14
c0016d30:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c0016d36:	89 1d 98 ca 02 c0    	mov    DWORD PTR ds:0xc002ca98,ebx
c0016d3c:	50                   	push   eax
c0016d3d:	e8 7d b6 ff ff       	call   c00123bf <setActiveTerminal(VgaText*)>
c0016d42:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016d49:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016d53:	83 c8 01             	or     eax,0x1
c0016d56:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016d5d:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c0016d63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016d66:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016d70:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016d76:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016d7c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016d86:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016d90:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016d9a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016da0:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016daa:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016db0:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016dba:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016dc1:	e8 d1 8a ff ff       	call   c000f897 <malloc>
c0016dc6:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016dd0:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016dd6:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016ddd:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c0016de4:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016deb:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016df2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016df8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016dfe:	5a                   	pop    edx
c0016dff:	59                   	pop    ecx
c0016e00:	68 af 4d 02 c0       	push   0xc0024daf
c0016e05:	50                   	push   eax
c0016e06:	e8 35 98 fe ff       	call   c0000640 <strcpy>
c0016e0b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016e12:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016e16:	83 c4 14             	add    esp,0x14
c0016e19:	5b                   	pop    ebx
c0016e1a:	5e                   	pop    esi
c0016e1b:	e9 49 94 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c0016e20 <schedule()>:
c0016e20:	8b 15 6c ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca6c
c0016e26:	85 d2                	test   edx,edx
c0016e28:	74 0e                	je     c0016e38 <schedule()+0x18>
c0016e2a:	c7 05 68 ca 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x1
c0016e34:	c3                   	ret    
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]
c0016e38:	53                   	push   ebx
c0016e39:	83 ec 14             	sub    esp,0x14
c0016e3c:	68 8c ca 02 c0       	push   0xc002ca8c
c0016e41:	e8 56 af 00 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e46:	83 c4 10             	add    esp,0x10
c0016e49:	84 c0                	test   al,al
c0016e4b:	75 3f                	jne    c0016e8c <schedule()+0x6c>
c0016e4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e52:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016e55:	83 fa 01             	cmp    edx,0x1
c0016e58:	74 3a                	je     c0016e94 <schedule()+0x74>
c0016e5a:	66 90                	xchg   ax,ax
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 8c ca 02 c0       	push   0xc002ca8c
c0016e64:	e8 4f af 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e69:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0016e70:	89 c3                	mov    ebx,eax
c0016e72:	e8 49 af 00 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e77:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016e7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e81:	e8 36 f7 ff ff       	call   c00165bc <switchToThread(ThreadControlBlock*)>
c0016e86:	83 c4 10             	add    esp,0x10
c0016e89:	8d 76 00             	lea    esi,[esi+0x0]
c0016e8c:	83 c4 08             	add    esp,0x8
c0016e8f:	5b                   	pop    ebx
c0016e90:	c3                   	ret    
c0016e91:	8d 76 00             	lea    esi,[esi+0x0]
c0016e94:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e9b:	83 ec 08             	sub    esp,0x8
c0016e9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea3:	50                   	push   eax
c0016ea4:	68 8c ca 02 c0       	push   0xc002ca8c
c0016ea9:	e8 ce af 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016eae:	83 c4 10             	add    esp,0x10
c0016eb1:	eb a9                	jmp    c0016e5c <schedule()+0x3c>
c0016eb3:	90                   	nop

c0016eb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016eb4:	83 ec 0c             	sub    esp,0xc
c0016eb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ebc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016ec0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016ec3:	e8 58 ff ff ff       	call   c0016e20 <schedule()>
c0016ec8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016ed0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ed5:	85 c0                	test   eax,eax
c0016ed7:	75 03                	jne    c0016edc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016ed9:	fb                   	sti    
c0016eda:	66 90                	xchg   ax,ax
c0016edc:	83 c4 0c             	add    esp,0xc
c0016edf:	c3                   	ret    

c0016ee0 <blockTask(TaskState)>:
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	fa                   	cli    
c0016ee4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ee9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016eed:	83 c0 01             	add    eax,0x1
c0016ef0:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0016ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016efd:	e8 1e ff ff ff       	call   c0016e20 <schedule()>
c0016f02:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016f0a:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0016f10:	85 d2                	test   edx,edx
c0016f12:	75 04                	jne    c0016f18 <blockTask(TaskState)+0x38>
c0016f14:	fb                   	sti    
c0016f15:	8d 76 00             	lea    esi,[esi+0x0]
c0016f18:	83 c4 0c             	add    esp,0xc
c0016f1b:	c3                   	ret    

c0016f1c <waitTask(int, int*, int)>:
c0016f1c:	83 ec 18             	sub    esp,0x18
c0016f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016f28:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016f2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f34:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016f37:	6a 07                	push   0x7
c0016f39:	e8 a2 ff ff ff       	call   c0016ee0 <blockTask(TaskState)>
c0016f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f43:	83 c4 10             	add    esp,0x10
c0016f46:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016f49:	85 d2                	test   edx,edx
c0016f4b:	74 0b                	je     c0016f58 <waitTask(int, int*, int)+0x3c>
c0016f4d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0016f50:	89 02                	mov    DWORD PTR [edx],eax
c0016f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f57:	90                   	nop
c0016f58:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016f5b:	83 c4 0c             	add    esp,0xc
c0016f5e:	c3                   	ret    
c0016f5f:	90                   	nop

c0016f60 <milliTenthSleepUntil(unsigned long long)>:
c0016f60:	83 ec 0c             	sub    esp,0xc
c0016f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f6b:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c0016f71:	89 d1                	mov    ecx,edx
c0016f73:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c0016f79:	73 05                	jae    c0016f80 <milliTenthSleepUntil(unsigned long long)+0x20>
c0016f7b:	90                   	nop
c0016f7c:	83 c4 0c             	add    esp,0xc
c0016f7f:	c3                   	ret    
c0016f80:	fa                   	cli    
c0016f81:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0016f87:	83 ec 08             	sub    esp,0x8
c0016f8a:	83 c1 01             	add    ecx,0x1
c0016f8d:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0016f93:	8b 0d 6c ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca6c
c0016f99:	83 c1 01             	add    ecx,0x1
c0016f9c:	89 0d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ecx
c0016fa2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016fa8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0016fab:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0016fae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fb3:	50                   	push   eax
c0016fb4:	68 80 ca 02 c0       	push   0xc002ca80
c0016fb9:	e8 be ae 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016fbe:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016fc5:	e8 16 ff ff ff       	call   c0016ee0 <blockTask(TaskState)>
c0016fca:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0016fcf:	83 c4 10             	add    esp,0x10
c0016fd2:	83 e8 01             	sub    eax,0x1
c0016fd5:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c0016fda:	85 c0                	test   eax,eax
c0016fdc:	75 0a                	jne    c0016fe8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0016fde:	8b 15 68 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca68
c0016fe4:	85 d2                	test   edx,edx
c0016fe6:	75 18                	jne    c0017000 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016fe8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0016ff0:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0016ff5:	85 c0                	test   eax,eax
c0016ff7:	75 83                	jne    c0016f7c <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016ff9:	fb                   	sti    
c0016ffa:	83 c4 0c             	add    esp,0xc
c0016ffd:	c3                   	ret    
c0016ffe:	66 90                	xchg   ax,ax
c0017000:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c001700a:	e8 11 fe ff ff       	call   c0016e20 <schedule()>
c001700f:	eb d7                	jmp    c0016fe8 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017011:	8d 76 00             	lea    esi,[esi+0x0]

c0017014 <milliTenthSleep(unsigned long long)>:
c0017014:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017019:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001701f:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017023:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017027:	e9 34 ff ff ff       	jmp    c0016f60 <milliTenthSleepUntil(unsigned long long)>

c001702c <sleep(unsigned long long)>:
c001702c:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0017034:	b8 10 27 00 00       	mov    eax,0x2710
c0017039:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001703d:	01 ca                	add    edx,ecx
c001703f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017043:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017047:	eb cb                	jmp    c0017014 <milliTenthSleep(unsigned long long)>
c0017049:	8d 76 00             	lea    esi,[esi+0x0]

c001704c <sleep(unsigned int)>:
c001704c:	83 ec 14             	sub    esp,0x14
c001704f:	b8 10 27 00 00       	mov    eax,0x2710
c0017054:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0017058:	52                   	push   edx
c0017059:	50                   	push   eax
c001705a:	e8 b5 ff ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c001705f:	83 c4 1c             	add    esp,0x1c
c0017062:	c3                   	ret    
c0017063:	90                   	nop

c0017064 <milliTenthSleep(unsigned int)>:
c0017064:	83 ec 14             	sub    esp,0x14
c0017067:	31 d2                	xor    edx,edx
c0017069:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001706d:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c0017073:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c0017079:	52                   	push   edx
c001707a:	50                   	push   eax
c001707b:	e8 e0 fe ff ff       	call   c0016f60 <milliTenthSleepUntil(unsigned long long)>
c0017080:	83 c4 1c             	add    esp,0x1c
c0017083:	c3                   	ret    

c0017084 <taskReturned>:
c0017084:	83 ec 18             	sub    esp,0x18
c0017087:	68 3c 4e 02 c0       	push   0xc0024e3c
c001708c:	e8 63 8c ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	83 ec 0c             	sub    esp,0xc
c0017097:	6a 02                	push   0x2
c0017099:	e8 42 fe ff ff       	call   c0016ee0 <blockTask(TaskState)>
c001709e:	fa                   	cli    
c001709f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00170a4:	83 c0 01             	add    eax,0x1
c00170a7:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00170ac:	e8 6f fd ff ff       	call   c0016e20 <schedule()>
c00170b1:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00170b9:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00170bf:	83 c4 10             	add    esp,0x10
c00170c2:	85 d2                	test   edx,edx
c00170c4:	75 ce                	jne    c0017094 <taskReturned+0x10>
c00170c6:	fb                   	sti    
c00170c7:	eb cb                	jmp    c0017094 <taskReturned+0x10>
c00170c9:	8d 76 00             	lea    esi,[esi+0x0]

c00170cc <KeProcessFromPID(int)>:
c00170cc:	57                   	push   edi
c00170cd:	56                   	push   esi
c00170ce:	53                   	push   ebx
c00170cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170d3:	fa                   	cli    
c00170d4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00170d9:	83 ec 0c             	sub    esp,0xc
c00170dc:	83 c0 01             	add    eax,0x1
c00170df:	68 8c ca 02 c0       	push   0xc002ca8c
c00170e4:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00170e9:	e8 ca ac 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170ee:	83 c4 10             	add    esp,0x10
c00170f1:	89 c7                	mov    edi,eax
c00170f3:	eb 17                	jmp    c001710c <KeProcessFromPID(int)+0x40>
c00170f5:	8d 76 00             	lea    esi,[esi+0x0]
c00170f8:	83 ec 0c             	sub    esp,0xc
c00170fb:	68 8c ca 02 c0       	push   0xc002ca8c
c0017100:	e8 b3 ac 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	39 f8                	cmp    eax,edi
c001710a:	74 50                	je     c001715c <KeProcessFromPID(int)+0x90>
c001710c:	83 ec 0c             	sub    esp,0xc
c001710f:	68 8c ca 02 c0       	push   0xc002ca8c
c0017114:	e8 9f ac 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017119:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c0017120:	89 c3                	mov    ebx,eax
c0017122:	e8 99 ac 00 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017127:	59                   	pop    ecx
c0017128:	58                   	pop    eax
c0017129:	53                   	push   ebx
c001712a:	68 8c ca 02 c0       	push   0xc002ca8c
c001712f:	e8 48 ad 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017134:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	39 30                	cmp    DWORD PTR [eax],esi
c001713c:	75 ba                	jne    c00170f8 <KeProcessFromPID(int)+0x2c>
c001713e:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017146:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001714c:	85 d2                	test   edx,edx
c001714e:	74 08                	je     c0017158 <KeProcessFromPID(int)+0x8c>
c0017150:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017153:	5b                   	pop    ebx
c0017154:	5e                   	pop    esi
c0017155:	5f                   	pop    edi
c0017156:	c3                   	ret    
c0017157:	90                   	nop
c0017158:	fb                   	sti    
c0017159:	eb f5                	jmp    c0017150 <KeProcessFromPID(int)+0x84>
c001715b:	90                   	nop
c001715c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017164:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017169:	85 c0                	test   eax,eax
c001716b:	75 07                	jne    c0017174 <KeProcessFromPID(int)+0xa8>
c001716d:	fb                   	sti    
c001716e:	31 c0                	xor    eax,eax
c0017170:	5b                   	pop    ebx
c0017171:	5e                   	pop    esi
c0017172:	5f                   	pop    edi
c0017173:	c3                   	ret    
c0017174:	5b                   	pop    ebx
c0017175:	31 c0                	xor    eax,eax
c0017177:	5e                   	pop    esi
c0017178:	5f                   	pop    edi
c0017179:	c3                   	ret    
c001717a:	66 90                	xchg   ax,ax

c001717c <unblockTask(ThreadControlBlock*)>:
c001717c:	53                   	push   ebx
c001717d:	83 ec 08             	sub    esp,0x8
c0017180:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017184:	fa                   	cli    
c0017185:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001718b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001718e:	83 c2 01             	add    edx,0x1
c0017191:	85 c0                	test   eax,eax
c0017193:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017199:	74 6d                	je     c0017208 <unblockTask(ThreadControlBlock*)+0x8c>
c001719b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001719e:	83 f8 01             	cmp    eax,0x1
c00171a1:	74 39                	je     c00171dc <unblockTask(ThreadControlBlock*)+0x60>
c00171a3:	83 ec 0c             	sub    esp,0xc
c00171a6:	68 8c ca 02 c0       	push   0xc002ca8c
c00171ab:	e8 08 ac 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	85 c0                	test   eax,eax
c00171b5:	75 1d                	jne    c00171d4 <unblockTask(ThreadControlBlock*)+0x58>
c00171b7:	eb 63                	jmp    c001721c <unblockTask(ThreadControlBlock*)+0xa0>
c00171b9:	8d 76 00             	lea    esi,[esi+0x0]
c00171bc:	83 ec 08             	sub    esp,0x8
c00171bf:	50                   	push   eax
c00171c0:	68 8c ca 02 c0       	push   0xc002ca8c
c00171c5:	e8 fa b0 00 00       	call   c00222c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00171ca:	83 c4 10             	add    esp,0x10
c00171cd:	85 c0                	test   eax,eax
c00171cf:	74 4b                	je     c001721c <unblockTask(ThreadControlBlock*)+0xa0>
c00171d1:	8d 76 00             	lea    esi,[esi+0x0]
c00171d4:	39 c3                	cmp    ebx,eax
c00171d6:	75 e4                	jne    c00171bc <unblockTask(ThreadControlBlock*)+0x40>
c00171d8:	eb 12                	jmp    c00171ec <unblockTask(ThreadControlBlock*)+0x70>
c00171da:	66 90                	xchg   ax,ax
c00171dc:	83 ec 0c             	sub    esp,0xc
c00171df:	68 d1 4d 02 c0       	push   0xc0024dd1
c00171e4:	e8 93 fd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00171f4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00171f9:	85 c0                	test   eax,eax
c00171fb:	75 03                	jne    c0017200 <unblockTask(ThreadControlBlock*)+0x84>
c00171fd:	fb                   	sti    
c00171fe:	66 90                	xchg   ax,ax
c0017200:	83 c4 08             	add    esp,0x8
c0017203:	5b                   	pop    ebx
c0017204:	c3                   	ret    
c0017205:	8d 76 00             	lea    esi,[esi+0x0]
c0017208:	83 ec 0c             	sub    esp,0xc
c001720b:	68 ba 4d 02 c0       	push   0xc0024dba
c0017210:	e8 67 fd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017215:	83 c4 10             	add    esp,0x10
c0017218:	eb d2                	jmp    c00171ec <unblockTask(ThreadControlBlock*)+0x70>
c001721a:	66 90                	xchg   ax,ax
c001721c:	83 ec 08             	sub    esp,0x8
c001721f:	53                   	push   ebx
c0017220:	68 8c ca 02 c0       	push   0xc002ca8c
c0017225:	e8 52 ac 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001722a:	83 c4 10             	add    esp,0x10
c001722d:	eb bd                	jmp    c00171ec <unblockTask(ThreadControlBlock*)+0x70>
c001722f:	90                   	nop

c0017230 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017230:	55                   	push   ebp
c0017231:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017236:	57                   	push   edi
c0017237:	56                   	push   esi
c0017238:	53                   	push   ebx
c0017239:	83 ec 1c             	sub    esp,0x1c
c001723c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017240:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017243:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017246:	d3 c0                	rol    eax,cl
c0017248:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c001724f:	21 c8                	and    eax,ecx
c0017251:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0017258:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001725b:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0017263:	0f 85 b7 01 00 00    	jne    c0017420 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0017269:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c001726f:	85 ed                	test   ebp,ebp
c0017271:	7e 29                	jle    c001729c <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0017273:	31 f6                	xor    esi,esi
c0017275:	8d 76 00             	lea    esi,[esi+0x0]
c0017278:	83 ec 0c             	sub    esp,0xc
c001727b:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0017282:	83 c6 01             	add    esi,0x1
c0017285:	57                   	push   edi
c0017286:	e8 1c 86 ff ff       	call   c000f8a7 <free>
c001728b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001728e:	83 c4 10             	add    esp,0x10
c0017291:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0017297:	7f df                	jg     c0017278 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0017299:	8d 76 00             	lea    esi,[esi+0x0]
c001729c:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c00172a6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00172a9:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c00172af:	89 f7                	mov    edi,esi
c00172b1:	85 ed                	test   ebp,ebp
c00172b3:	74 1b                	je     c00172d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00172b5:	83 ec 0c             	sub    esp,0xc
c00172b8:	55                   	push   ebp
c00172b9:	e8 3a 72 ff ff       	call   c000e4f8 <EnvVarContainer::~EnvVarContainer()>
c00172be:	59                   	pop    ecx
c00172bf:	5e                   	pop    esi
c00172c0:	6a 0c                	push   0xc
c00172c2:	55                   	push   ebp
c00172c3:	e8 e8 60 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00172c8:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	89 f7                	mov    edi,esi
c00172d0:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00172d6:	85 c0                	test   eax,eax
c00172d8:	0f 84 b6 00 00 00    	je     c0017394 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00172de:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c00172e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00172e5:	31 c9                	xor    ecx,ecx
c00172e7:	eb 17                	jmp    c0017300 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00172e9:	8d 76 00             	lea    esi,[esi+0x0]
c00172ec:	83 c1 01             	add    ecx,0x1
c00172ef:	83 f9 10             	cmp    ecx,0x10
c00172f2:	0f 84 9c 00 00 00    	je     c0017394 <cleanupTerminatedTask(ThreadControlBlock*)+0x164>
c00172f8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c00172fe:	66 90                	xchg   ax,ax
c0017300:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0017307:	d3 fa                	sar    edx,cl
c0017309:	80 e2 01             	and    dl,0x1
c001730c:	74 de                	je     c00172ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001730e:	8d 14 89             	lea    edx,[ecx+ecx*4]
c0017311:	01 d2                	add    edx,edx
c0017313:	01 ca                	add    edx,ecx
c0017315:	01 d2                	add    edx,edx
c0017317:	01 ca                	add    edx,ecx
c0017319:	8d 14 92             	lea    edx,[edx+edx*4]
c001731c:	01 d0                	add    eax,edx
c001731e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017324:	83 fd 07             	cmp    ebp,0x7
c0017327:	75 c3                	jne    c00172ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017329:	05 40 02 00 00       	add    eax,0x240
c001732e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017331:	83 fd ff             	cmp    ebp,0xffffffff
c0017334:	0f 8c ee 00 00 00    	jl     c0017428 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001733a:	0f 84 ac 01 00 00    	je     c00174ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2bc>
c0017340:	85 ed                	test   ebp,ebp
c0017342:	0f 84 90 01 00 00    	je     c00174d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a8>
c0017348:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001734a:	75 a0                	jne    c00172ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001734c:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0017352:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017356:	01 d0                	add    eax,edx
c0017358:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001735c:	83 ec 0c             	sub    esp,0xc
c001735f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017365:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017368:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001736e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017375:	50                   	push   eax
c0017376:	e8 01 fe ff ff       	call   c001717c <unblockTask(ThreadControlBlock*)>
c001737b:	83 c4 10             	add    esp,0x10
c001737e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017381:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017385:	89 f7                	mov    edi,esi
c0017387:	83 c1 01             	add    ecx,0x1
c001738a:	83 f9 10             	cmp    ecx,0x10
c001738d:	0f 85 65 ff ff ff    	jne    c00172f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0017393:	90                   	nop
c0017394:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c001739a:	85 c0                	test   eax,eax
c001739c:	74 62                	je     c0017400 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c001739e:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c00173a4:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c00173aa:	74 54                	je     c0017400 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d0>
c00173ac:	83 ec 0c             	sub    esp,0xc
c00173af:	68 8c ca 02 c0       	push   0xc002ca8c
c00173b4:	e8 ff a9 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00173b9:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00173c0:	89 c7                	mov    edi,eax
c00173c2:	e8 d5 a9 00 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00173c7:	83 c4 10             	add    esp,0x10
c00173ca:	84 c0                	test   al,al
c00173cc:	0f 84 ce 00 00 00    	je     c00174a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x270>
c00173d2:	66 90                	xchg   ax,ax
c00173d4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173d7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c00173dd:	85 d2                	test   edx,edx
c00173df:	74 0f                	je     c00173f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00173e1:	83 ec 0c             	sub    esp,0xc
c00173e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00173e6:	52                   	push   edx
c00173e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173ea:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c00173fa:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00173fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017400:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0017406:	85 db                	test   ebx,ebx
c0017408:	74 16                	je     c0017420 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c001740a:	83 ec 0c             	sub    esp,0xc
c001740d:	53                   	push   ebx
c001740e:	e8 9f c4 ff ff       	call   c00138b2 <VAS::~VAS()>
c0017413:	58                   	pop    eax
c0017414:	5a                   	pop    edx
c0017415:	6a 14                	push   0x14
c0017417:	53                   	push   ebx
c0017418:	e8 93 5f ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	83 c4 1c             	add    esp,0x1c
c0017423:	5b                   	pop    ebx
c0017424:	5e                   	pop    esi
c0017425:	5f                   	pop    edi
c0017426:	5d                   	pop    ebp
c0017427:	c3                   	ret    
c0017428:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001742c:	83 ec 0c             	sub    esp,0xc
c001742f:	68 70 4e 02 c0       	push   0xc0024e70
c0017434:	e8 bb 88 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017439:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	89 f7                	mov    edi,esi
c0017441:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017445:	e9 a2 fe ff ff       	jmp    c00172ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001744a:	66 90                	xchg   ax,ax
c001744c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0017452:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0017458:	75 1e                	jne    c0017478 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c001745a:	83 ec 0c             	sub    esp,0xc
c001745d:	68 d8 4e 02 c0       	push   0xc0024ed8
c0017462:	e8 15 fb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017467:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001746e:	e8 6d fa ff ff       	call   c0016ee0 <blockTask(TaskState)>
c0017473:	83 c4 10             	add    esp,0x10
c0017476:	66 90                	xchg   ax,ax
c0017478:	83 ec 08             	sub    esp,0x8
c001747b:	56                   	push   esi
c001747c:	68 8c ca 02 c0       	push   0xc002ca8c
c0017481:	e8 f6 a9 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017486:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c001748d:	e8 26 a9 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	39 f8                	cmp    eax,edi
c0017497:	0f 84 37 ff ff ff    	je     c00173d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a4>
c001749d:	8d 76 00             	lea    esi,[esi+0x0]
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	68 8c ca 02 c0       	push   0xc002ca8c
c00174a8:	e8 0b a9 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174ad:	c7 04 24 8c ca 02 c0 	mov    DWORD PTR [esp],0xc002ca8c
c00174b4:	89 c6                	mov    esi,eax
c00174b6:	e8 05 a9 00 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174bb:	83 c4 10             	add    esp,0x10
c00174be:	39 f3                	cmp    ebx,esi
c00174c0:	74 b6                	je     c0017478 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00174c2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c00174c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174c8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c00174ce:	75 a8                	jne    c0017478 <cleanupTerminatedTask(ThreadControlBlock*)+0x248>
c00174d0:	e9 77 ff ff ff       	jmp    c001744c <cleanupTerminatedTask(ThreadControlBlock*)+0x21c>
c00174d5:	8d 76 00             	lea    esi,[esi+0x0]
c00174d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174dc:	83 ec 0c             	sub    esp,0xc
c00174df:	68 a4 4e 02 c0       	push   0xc0024ea4
c00174e4:	e9 4b ff ff ff       	jmp    c0017434 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c00174e9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ec:	8b 36                	mov    esi,DWORD PTR [esi]
c00174ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174f2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00174f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174f8:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c00174fe:	01 d7                	add    edi,edx
c0017500:	89 f8                	mov    eax,edi
c0017502:	e9 51 fe ff ff       	jmp    c0017358 <cleanupTerminatedTask(ThreadControlBlock*)+0x128>
c0017507:	90                   	nop

c0017508 <cleanerTaskFunction(void*)>:
c0017508:	53                   	push   ebx
c0017509:	83 ec 08             	sub    esp,0x8
c001750c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017514:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017519:	85 c0                	test   eax,eax
c001751b:	75 03                	jne    c0017520 <cleanerTaskFunction(void*)+0x18>
c001751d:	fb                   	sti    
c001751e:	66 90                	xchg   ax,ax
c0017520:	fa                   	cli    
c0017521:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017526:	83 c0 01             	add    eax,0x1
c0017529:	80 3d 54 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca54,0x0
c0017530:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017535:	0f 85 c9 00 00 00    	jne    c0017604 <cleanerTaskFunction(void*)+0xfc>
c001753b:	83 ec 0c             	sub    esp,0xc
c001753e:	6a 02                	push   0x2
c0017540:	e8 6f f9 ff ff       	call   c0016eb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017545:	83 c4 10             	add    esp,0x10
c0017548:	c6 05 54 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca54,0x0
c001754f:	fa                   	cli    
c0017550:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0017556:	8b 1d 6c ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca6c
c001755c:	83 c1 01             	add    ecx,0x1
c001755f:	83 c3 01             	add    ebx,0x1
c0017562:	89 0d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ecx
c0017568:	89 1d 6c ca 02 c0    	mov    DWORD PTR ds:0xc002ca6c,ebx
c001756e:	fa                   	cli    
c001756f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017574:	83 c0 01             	add    eax,0x1
c0017577:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001757c:	eb 2a                	jmp    c00175a8 <cleanerTaskFunction(void*)+0xa0>
c001757e:	66 90                	xchg   ax,ax
c0017580:	83 ec 0c             	sub    esp,0xc
c0017583:	68 74 ca 02 c0       	push   0xc002ca74
c0017588:	e8 2b a8 00 00       	call   c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001758d:	c7 04 24 74 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca74
c0017594:	89 c3                	mov    ebx,eax
c0017596:	e8 25 a8 00 00       	call   c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001759b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001759e:	e8 8d fc ff ff       	call   c0017230 <cleanupTerminatedTask(ThreadControlBlock*)>
c00175a3:	83 c4 10             	add    esp,0x10
c00175a6:	66 90                	xchg   ax,ax
c00175a8:	83 ec 0c             	sub    esp,0xc
c00175ab:	68 74 ca 02 c0       	push   0xc002ca74
c00175b0:	e8 e7 a7 00 00       	call   c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	84 c0                	test   al,al
c00175ba:	74 c4                	je     c0017580 <cleanerTaskFunction(void*)+0x78>
c00175bc:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00175c4:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00175ca:	85 d2                	test   edx,edx
c00175cc:	75 02                	jne    c00175d0 <cleanerTaskFunction(void*)+0xc8>
c00175ce:	fb                   	sti    
c00175cf:	90                   	nop
c00175d0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00175d5:	83 e8 01             	sub    eax,0x1
c00175d8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00175dd:	0f 85 29 ff ff ff    	jne    c001750c <cleanerTaskFunction(void*)+0x4>
c00175e3:	a1 68 ca 02 c0       	mov    eax,ds:0xc002ca68
c00175e8:	85 c0                	test   eax,eax
c00175ea:	0f 84 1c ff ff ff    	je     c001750c <cleanerTaskFunction(void*)+0x4>
c00175f0:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c00175fa:	e8 21 f8 ff ff       	call   c0016e20 <schedule()>
c00175ff:	e9 08 ff ff ff       	jmp    c001750c <cleanerTaskFunction(void*)+0x4>
c0017604:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001760c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017611:	85 c0                	test   eax,eax
c0017613:	0f 85 2f ff ff ff    	jne    c0017548 <cleanerTaskFunction(void*)+0x40>
c0017619:	fb                   	sti    
c001761a:	e9 29 ff ff ff       	jmp    c0017548 <cleanerTaskFunction(void*)+0x40>
c001761f:	90                   	nop

c0017620 <KeTerminateCurrentThread(int)>:
c0017620:	83 ec 14             	sub    esp,0x14
c0017623:	fa                   	cli    
c0017624:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017629:	83 c0 01             	add    eax,0x1
c001762c:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017631:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c0017636:	83 c0 01             	add    eax,0x1
c0017639:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c001763e:	fa                   	cli    
c001763f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017644:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017648:	83 c0 01             	add    eax,0x1
c001764b:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017655:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0017658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001765d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017660:	50                   	push   eax
c0017661:	68 74 ca 02 c0       	push   0xc002ca74
c0017666:	e8 11 a8 00 00       	call   c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001766b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017670:	83 c4 10             	add    esp,0x10
c0017673:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001767a:	a1 50 ca 02 c0       	mov    eax,ds:0xc002ca50
c001767f:	85 c0                	test   eax,eax
c0017681:	0f 84 81 00 00 00    	je     c0017708 <KeTerminateCurrentThread(int)+0xe8>
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	c6 05 54 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca54,0x1
c0017691:	50                   	push   eax
c0017692:	e8 e5 fa ff ff       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0017697:	83 c4 10             	add    esp,0x10
c001769a:	66 90                	xchg   ax,ax
c001769c:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176a4:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00176a9:	85 c0                	test   eax,eax
c00176ab:	75 03                	jne    c00176b0 <KeTerminateCurrentThread(int)+0x90>
c00176ad:	fb                   	sti    
c00176ae:	66 90                	xchg   ax,ax
c00176b0:	a1 6c ca 02 c0       	mov    eax,ds:0xc002ca6c
c00176b5:	83 e8 01             	sub    eax,0x1
c00176b8:	a3 6c ca 02 c0       	mov    ds:0xc002ca6c,eax
c00176bd:	75 09                	jne    c00176c8 <KeTerminateCurrentThread(int)+0xa8>
c00176bf:	83 3d 68 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca68,0x0
c00176c6:	75 54                	jne    c001771c <KeTerminateCurrentThread(int)+0xfc>
c00176c8:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176d0:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c00176d6:	85 c9                	test   ecx,ecx
c00176d8:	75 06                	jne    c00176e0 <KeTerminateCurrentThread(int)+0xc0>
c00176da:	66 90                	xchg   ax,ax
c00176dc:	fb                   	sti    
c00176dd:	8d 76 00             	lea    esi,[esi+0x0]
c00176e0:	fa                   	cli    
c00176e1:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00176e6:	83 c0 01             	add    eax,0x1
c00176e9:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c00176ee:	e8 2d f7 ff ff       	call   c0016e20 <schedule()>
c00176f3:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00176fb:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017701:	85 d2                	test   edx,edx
c0017703:	75 db                	jne    c00176e0 <KeTerminateCurrentThread(int)+0xc0>
c0017705:	eb d5                	jmp    c00176dc <KeTerminateCurrentThread(int)+0xbc>
c0017707:	90                   	nop
c0017708:	83 ec 0c             	sub    esp,0xc
c001770b:	68 e8 4d 02 c0       	push   0xc0024de8
c0017710:	e8 67 f8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017715:	83 c4 10             	add    esp,0x10
c0017718:	eb 82                	jmp    c001769c <KeTerminateCurrentThread(int)+0x7c>
c001771a:	66 90                	xchg   ax,ax
c001771c:	c7 05 68 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ca68,0x0
c0017726:	e8 f5 f6 ff ff       	call   c0016e20 <schedule()>
c001772b:	eb 9b                	jmp    c00176c8 <KeTerminateCurrentThread(int)+0xa8>
c001772d:	8d 76 00             	lea    esi,[esi+0x0]

c0017730 <__static_initialization_and_destruction_0(int, int)>:
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017738:	0f 85 8e 00 00 00    	jne    c00177cc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001773e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017746:	0f 85 80 00 00 00    	jne    c00177cc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001774c:	83 ec 0c             	sub    esp,0xc
c001774f:	68 8c ca 02 c0       	push   0xc002ca8c
c0017754:	e8 c3 ab 00 00       	call   c002231c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	83 ec 04             	sub    esp,0x4
c001775f:	68 f0 61 02 c0       	push   0xc00261f0
c0017764:	68 8c ca 02 c0       	push   0xc002ca8c
c0017769:	68 cc 22 02 c0       	push   0xc00222cc
c001776e:	e8 ed 5b ff ff       	call   c000d360 <__cxa_atexit>
c0017773:	83 c4 10             	add    esp,0x10
c0017776:	83 ec 0c             	sub    esp,0xc
c0017779:	68 80 ca 02 c0       	push   0xc002ca80
c001777e:	e8 99 ab 00 00       	call   c002231c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017783:	83 c4 10             	add    esp,0x10
c0017786:	83 ec 04             	sub    esp,0x4
c0017789:	68 f0 61 02 c0       	push   0xc00261f0
c001778e:	68 80 ca 02 c0       	push   0xc002ca80
c0017793:	68 cc 22 02 c0       	push   0xc00222cc
c0017798:	e8 c3 5b ff ff       	call   c000d360 <__cxa_atexit>
c001779d:	83 c4 10             	add    esp,0x10
c00177a0:	83 ec 0c             	sub    esp,0xc
c00177a3:	68 74 ca 02 c0       	push   0xc002ca74
c00177a8:	e8 6f ab 00 00       	call   c002231c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00177ad:	83 c4 10             	add    esp,0x10
c00177b0:	83 ec 04             	sub    esp,0x4
c00177b3:	68 f0 61 02 c0       	push   0xc00261f0
c00177b8:	68 74 ca 02 c0       	push   0xc002ca74
c00177bd:	68 cc 22 02 c0       	push   0xc00222cc
c00177c2:	e8 99 5b ff ff       	call   c000d360 <__cxa_atexit>
c00177c7:	83 c4 10             	add    esp,0x10
c00177ca:	66 90                	xchg   ax,ax
c00177cc:	90                   	nop
c00177cd:	83 c4 0c             	add    esp,0xc
c00177d0:	c3                   	ret    
c00177d1:	8d 76 00             	lea    esi,[esi+0x0]

c00177d4 <_GLOBAL__sub_I_keNextPID>:
c00177d4:	83 ec 0c             	sub    esp,0xc
c00177d7:	83 ec 08             	sub    esp,0x8
c00177da:	68 ff ff 00 00       	push   0xffff
c00177df:	6a 01                	push   0x1
c00177e1:	e8 4a ff ff ff       	call   c0017730 <__static_initialization_and_destruction_0(int, int)>
c00177e6:	83 c4 10             	add    esp,0x10
c00177e9:	83 c4 0c             	add    esp,0xc
c00177ec:	c3                   	ret    

c00177ed <Vm::inbv(unsigned short)>:
c00177ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00177f1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00177f6:	74 02                	je     c00177fa <Vm::inbv(unsigned short)+0xd>
c00177f8:	ec                   	in     al,dx
c00177f9:	c3                   	ret    
c00177fa:	a0 d0 ca 02 c0       	mov    al,ds:0xc002cad0
c00177ff:	c3                   	ret    

c0017800 <Vm::outbv(unsigned short, unsigned char)>:
c0017800:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017808:	66 81 fa fe fe       	cmp    dx,0xfefe
c001780d:	74 02                	je     c0017811 <Vm::outbv(unsigned short, unsigned char)+0x11>
c001780f:	ee                   	out    dx,al
c0017810:	c3                   	ret    
c0017811:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c0017817:	8d 51 01             	lea    edx,[ecx+0x1]
c001781a:	88 81 e0 ca 02 c0    	mov    BYTE PTR [ecx-0x3ffd3520],al
c0017820:	89 15 d0 ca 02 c0    	mov    DWORD PTR ds:0xc002cad0,edx
c0017826:	83 fa 20             	cmp    edx,0x20
c0017829:	75 e5                	jne    c0017810 <Vm::outbv(unsigned short, unsigned char)+0x10>
c001782b:	c7 05 d0 ca 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x1f
c0017835:	c3                   	ret    

c0017836 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017836:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001783b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017840:	c1 e0 04             	shl    eax,0x4
c0017843:	01 d0                	add    eax,edx
c0017845:	c3                   	ret    

c0017846 <Vm::getSegment(unsigned int)>:
c0017846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001784a:	c1 e8 10             	shr    eax,0x10
c001784d:	c3                   	ret    

c001784e <Vm::getOffset(unsigned int)>:
c001784e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017852:	c3                   	ret    

c0017853 <Vm::mainloop2()>:
c0017853:	83 ec 18             	sub    esp,0x18
c0017856:	fa                   	cli    
c0017857:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001785c:	6a 02                	push   0x2
c001785e:	83 c0 01             	add    eax,0x1
c0017861:	c6 05 c9 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac9,0x1
c0017868:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001786d:	e8 42 f6 ff ff       	call   c0016eb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017877:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001787b:	52                   	push   edx
c001787c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0017880:	52                   	push   edx
c0017881:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017885:	52                   	push   edx
c0017886:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001788a:	50                   	push   eax
c001788b:	e8 7f 89 fe ff       	call   c000020f <goToVM86>
c0017890:	83 c4 2c             	add    esp,0x2c
c0017893:	c3                   	ret    

c0017894 <Vm::mainVm8086Loop(void*)>:
c0017894:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001789c:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00178a1:	85 c0                	test   eax,eax
c00178a3:	75 01                	jne    c00178a6 <Vm::mainVm8086Loop(void*)+0x12>
c00178a5:	fb                   	sti    
c00178a6:	eb ab                	jmp    c0017853 <Vm::mainloop2()>

c00178a8 <Vm::mainloop3(unsigned long)>:
c00178a8:	83 ec 18             	sub    esp,0x18
c00178ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178af:	fa                   	cli    
c00178b0:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c00178b6:	6a 02                	push   0x2
c00178b8:	83 c2 01             	add    edx,0x1
c00178bb:	c6 05 c8 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac8,0x1
c00178c2:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c00178c8:	a3 c4 ca 02 c0       	mov    ds:0xc002cac4,eax
c00178cd:	e8 e2 f5 ff ff       	call   c0016eb4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00178d2:	83 c4 1c             	add    esp,0x1c
c00178d5:	e9 79 ff ff ff       	jmp    c0017853 <Vm::mainloop2()>

c00178da <Vm::initialise8086()>:
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	68 80 00 00 00       	push   0x80
c00178e2:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c00178e7:	6a 00                	push   0x0
c00178e9:	68 94 78 01 c0       	push   0xc0017894
c00178ee:	50                   	push   eax
c00178ef:	e8 6c f2 ff ff       	call   c0016b60 <Process::createThread(void (*)(void*), void*, int)>
c00178f4:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00178fb:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c0017900:	68 10 01 00 00       	push   0x110
c0017905:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001790a:	6a 00                	push   0x0
c001790c:	6a 00                	push   0x0
c001790e:	8b 90 b2 05 00 00    	mov    edx,DWORD PTR [eax+0x5b2]
c0017914:	52                   	push   edx
c0017915:	e8 ea c2 ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001791a:	83 c4 2c             	add    esp,0x2c
c001791d:	c3                   	ret    

c001791e <Vm::resetConventionalMemory8086()>:
c001791e:	c3                   	ret    

c001791f <Vm::finish8086()>:
c001791f:	53                   	push   ebx
c0017920:	83 ec 08             	sub    esp,0x8
c0017923:	eb 17                	jmp    c001793c <Vm::finish8086()+0x1d>
c0017925:	e8 f6 f4 ff ff       	call   c0016e20 <schedule()>
c001792a:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017932:	8b 0d 70 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002ca70
c0017938:	85 c9                	test   ecx,ecx
c001793a:	74 51                	je     c001798d <Vm::finish8086()+0x6e>
c001793c:	fa                   	cli    
c001793d:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017943:	83 c3 01             	add    ebx,0x1
c0017946:	80 3d c8 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac8,0x0
c001794d:	89 1d 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,ebx
c0017953:	74 d0                	je     c0017925 <Vm::finish8086()+0x6>
c0017955:	83 ec 0c             	sub    esp,0xc
c0017958:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c001795d:	8b 1d c4 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cac4
c0017963:	50                   	push   eax
c0017964:	c6 05 c8 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac8,0x0
c001796b:	e8 0c f8 ff ff       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0017970:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017978:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	85 d2                	test   edx,edx
c0017983:	75 01                	jne    c0017986 <Vm::finish8086()+0x67>
c0017985:	fb                   	sti    
c0017986:	89 d8                	mov    eax,ebx
c0017988:	83 c4 08             	add    esp,0x8
c001798b:	5b                   	pop    ebx
c001798c:	c3                   	ret    
c001798d:	fb                   	sti    
c001798e:	eb ac                	jmp    c001793c <Vm::finish8086()+0x1d>

c0017990 <Vm::getOutput8086(unsigned char*)>:
c0017990:	57                   	push   edi
c0017991:	8b 0d d0 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002cad0
c0017997:	56                   	push   esi
c0017998:	be e0 ca 02 c0       	mov    esi,0xc002cae0
c001799d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00179a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00179a3:	a1 d0 ca 02 c0       	mov    eax,ds:0xc002cad0
c00179a8:	5e                   	pop    esi
c00179a9:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c00179b3:	5f                   	pop    edi
c00179b4:	c3                   	ret    

c00179b5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00179b5:	55                   	push   ebp
c00179b6:	57                   	push   edi
c00179b7:	56                   	push   esi
c00179b8:	53                   	push   ebx
c00179b9:	83 ec 2c             	sub    esp,0x2c
c00179bc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00179c0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00179c4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00179c8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00179cc:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c00179d3:	75 1f                	jne    c00179f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c00179d5:	e9 bb 00 00 00       	jmp    c0017a95 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xe0>
c00179da:	e8 41 f4 ff ff       	call   c0016e20 <schedule()>
c00179df:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c00179e7:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00179ec:	85 c0                	test   eax,eax
c00179ee:	0f 84 9b 00 00 00    	je     c0017a8f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xda>
c00179f4:	fa                   	cli    
c00179f5:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c00179fa:	83 c0 01             	add    eax,0x1
c00179fd:	80 3d c9 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac9,0x0
c0017a04:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c0017a09:	74 cf                	je     c00179da <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x25>
c0017a0b:	83 ec 04             	sub    esp,0x4
c0017a0e:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a13:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017a1d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017a21:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017a25:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017a29:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017a2d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017a31:	0f b7 f6             	movzx  esi,si
c0017a34:	6a 20                	push   0x20
c0017a36:	0f b7 db             	movzx  ebx,bx
c0017a39:	6a 00                	push   0x0
c0017a3b:	68 e0 ca 02 c0       	push   0xc002cae0
c0017a40:	e8 ab 8a fe ff       	call   c00004f0 <memset>
c0017a45:	5a                   	pop    edx
c0017a46:	59                   	pop    ecx
c0017a47:	56                   	push   esi
c0017a48:	53                   	push   ebx
c0017a49:	e8 e8 fd ff ff       	call   c0017836 <Vm::realToLinear(unsigned short, unsigned short)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	89 c7                	mov    edi,eax
c0017a53:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017a57:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017a5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017a5d:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017a64:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017a6c:	8b 1d 70 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002ca70
c0017a72:	85 db                	test   ebx,ebx
c0017a74:	75 01                	jne    c0017a77 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xc2>
c0017a76:	fb                   	sti    
c0017a77:	83 ec 0c             	sub    esp,0xc
c0017a7a:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017a7f:	50                   	push   eax
c0017a80:	e8 f7 f6 ff ff       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0017a85:	83 c4 3c             	add    esp,0x3c
c0017a88:	b0 01                	mov    al,0x1
c0017a8a:	5b                   	pop    ebx
c0017a8b:	5e                   	pop    esi
c0017a8c:	5f                   	pop    edi
c0017a8d:	5d                   	pop    ebp
c0017a8e:	c3                   	ret    
c0017a8f:	fb                   	sti    
c0017a90:	e9 5f ff ff ff       	jmp    c00179f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	68 14 01 00 00       	push   0x114
c0017a9d:	e8 f5 7d ff ff       	call   c000f897 <malloc>
c0017aa2:	83 c4 0c             	add    esp,0xc
c0017aa5:	89 c2                	mov    edx,eax
c0017aa7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017aac:	50                   	push   eax
c0017aad:	68 00 4f 02 c0       	push   0xc0024f00
c0017ab2:	52                   	push   edx
c0017ab3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ab7:	e8 ce 06 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017abc:	58                   	pop    eax
c0017abd:	5a                   	pop    edx
c0017abe:	6a 12                	push   0x12
c0017ac0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ac4:	52                   	push   edx
c0017ac5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017ac9:	e8 da 06 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017ace:	59                   	pop    ecx
c0017acf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ad3:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017ad7:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ad9:	51                   	push   ecx
c0017ada:	6a 00                	push   0x0
c0017adc:	6a 00                	push   0x0
c0017ade:	68 00 00 11 00       	push   0x110000
c0017ae3:	52                   	push   edx
c0017ae4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ae8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017aeb:	83 c4 14             	add    esp,0x14
c0017aee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017af2:	52                   	push   edx
c0017af3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0017af7:	e8 0a 07 ff ff       	call   c0008206 <File::close()>
c0017afc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b00:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b02:	89 14 24             	mov    DWORD PTR [esp],edx
c0017b05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b08:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017b0f:	83 c4 10             	add    esp,0x10
c0017b12:	e9 dd fe ff ff       	jmp    c00179f4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>

c0017b17 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017b17:	55                   	push   ebp
c0017b18:	57                   	push   edi
c0017b19:	56                   	push   esi
c0017b1a:	53                   	push   ebx
c0017b1b:	83 ec 2c             	sub    esp,0x2c
c0017b1e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017b22:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0017b26:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017b2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b2e:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0017b32:	80 3d c0 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac0,0x0
c0017b39:	0f 84 59 01 00 00    	je     c0017c98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x181>
c0017b3f:	83 ec 08             	sub    esp,0x8
c0017b42:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0017b46:	51                   	push   ecx
c0017b47:	68 64 4f 02 c0       	push   0xc0024f64
c0017b4c:	e8 2b f4 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0017b51:	83 c4 10             	add    esp,0x10
c0017b54:	eb 1a                	jmp    c0017b70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017b56:	e8 c5 f2 ff ff       	call   c0016e20 <schedule()>
c0017b5b:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017b63:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017b68:	85 c0                	test   eax,eax
c0017b6a:	0f 84 22 01 00 00    	je     c0017c92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17b>
c0017b70:	fa                   	cli    
c0017b71:	8b 15 70 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca70
c0017b77:	8a 1d c9 ca 02 c0    	mov    bl,BYTE PTR ds:0xc002cac9
c0017b7d:	83 c2 01             	add    edx,0x1
c0017b80:	84 db                	test   bl,bl
c0017b82:	89 15 70 ca 02 c0    	mov    DWORD PTR ds:0xc002ca70,edx
c0017b88:	74 cc                	je     c0017b56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3f>
c0017b8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b8e:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017b93:	83 ec 04             	sub    esp,0x4
c0017b96:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0017b9a:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c0017b9e:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017ba2:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017ba6:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017baa:	c7 05 d0 ca 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cad0,0x0
c0017bb4:	6a 20                	push   0x20
c0017bb6:	6a 00                	push   0x0
c0017bb8:	68 e0 ca 02 c0       	push   0xc002cae0
c0017bbd:	e8 2e 89 fe ff       	call   c00004f0 <memset>
c0017bc2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017bc9:	e8 c9 7c ff ff       	call   c000f897 <malloc>
c0017bce:	83 c4 0c             	add    esp,0xc
c0017bd1:	89 c7                	mov    edi,eax
c0017bd3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017bd8:	50                   	push   eax
c0017bd9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017bdd:	50                   	push   eax
c0017bde:	57                   	push   edi
c0017bdf:	e8 a6 05 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017be4:	83 c4 10             	add    esp,0x10
c0017be7:	85 ff                	test   edi,edi
c0017be9:	0f 84 66 01 00 00    	je     c0017d55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x23e>
c0017bef:	83 ec 04             	sub    esp,0x4
c0017bf2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017bf6:	50                   	push   eax
c0017bf7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017bfb:	50                   	push   eax
c0017bfc:	57                   	push   edi
c0017bfd:	e8 a8 08 ff ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c0017c02:	8a 4c 24 23          	mov    cl,BYTE PTR [esp+0x23]
c0017c06:	83 c4 10             	add    esp,0x10
c0017c09:	84 c9                	test   cl,cl
c0017c0b:	0f 85 e9 00 00 00    	jne    c0017cfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1e3>
c0017c11:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017c15:	83 ec 08             	sub    esp,0x8
c0017c18:	6a 01                	push   0x1
c0017c1a:	57                   	push   edi
c0017c1b:	e8 88 05 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017c20:	83 c4 10             	add    esp,0x10
c0017c23:	85 c0                	test   eax,eax
c0017c25:	0f 85 fd 00 00 00    	jne    c0017d28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x211>
c0017c2b:	83 ec 08             	sub    esp,0x8
c0017c2e:	0f b7 c5             	movzx  eax,bp
c0017c31:	0f b7 f6             	movzx  esi,si
c0017c34:	56                   	push   esi
c0017c35:	50                   	push   eax
c0017c36:	e8 fb fb ff ff       	call   c0017836 <Vm::realToLinear(unsigned short, unsigned short)>
c0017c3b:	5a                   	pop    edx
c0017c3c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017c3e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017c42:	52                   	push   edx
c0017c43:	50                   	push   eax
c0017c44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017c48:	56                   	push   esi
c0017c49:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017c4d:	55                   	push   ebp
c0017c4e:	57                   	push   edi
c0017c4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c52:	83 c4 14             	add    esp,0x14
c0017c55:	57                   	push   edi
c0017c56:	e8 ab 05 ff ff       	call   c0008206 <File::close()>
c0017c5b:	c6 05 c9 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac9,0x0
c0017c62:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017c6a:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	85 c0                	test   eax,eax
c0017c74:	75 01                	jne    c0017c77 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x160>
c0017c76:	fb                   	sti    
c0017c77:	83 ec 0c             	sub    esp,0xc
c0017c7a:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c0017c7f:	50                   	push   eax
c0017c80:	e8 f7 f4 ff ff       	call   c001717c <unblockTask(ThreadControlBlock*)>
c0017c85:	83 c4 10             	add    esp,0x10
c0017c88:	83 c4 2c             	add    esp,0x2c
c0017c8b:	88 d8                	mov    al,bl
c0017c8d:	5b                   	pop    ebx
c0017c8e:	5e                   	pop    esi
c0017c8f:	5f                   	pop    edi
c0017c90:	5d                   	pop    ebp
c0017c91:	c3                   	ret    
c0017c92:	fb                   	sti    
c0017c93:	e9 d8 fe ff ff       	jmp    c0017b70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x59>
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	68 14 01 00 00       	push   0x114
c0017ca0:	e8 f2 7b ff ff       	call   c000f897 <malloc>
c0017ca5:	83 c4 0c             	add    esp,0xc
c0017ca8:	89 c3                	mov    ebx,eax
c0017caa:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0017caf:	50                   	push   eax
c0017cb0:	68 00 4f 02 c0       	push   0xc0024f00
c0017cb5:	53                   	push   ebx
c0017cb6:	e8 cf 04 ff ff       	call   c000818a <File::File(char const*, Process*)>
c0017cbb:	58                   	pop    eax
c0017cbc:	5a                   	pop    edx
c0017cbd:	6a 12                	push   0x12
c0017cbf:	53                   	push   ebx
c0017cc0:	e8 e3 04 ff ff       	call   c00081a8 <File::open(FileOpenMode)>
c0017cc5:	59                   	pop    ecx
c0017cc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017cc8:	8d 4c 24 24          	lea    ecx,[esp+0x24]
c0017ccc:	51                   	push   ecx
c0017ccd:	6a 00                	push   0x0
c0017ccf:	6a 00                	push   0x0
c0017cd1:	68 00 00 11 00       	push   0x110000
c0017cd6:	53                   	push   ebx
c0017cd7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017cda:	83 c4 14             	add    esp,0x14
c0017cdd:	53                   	push   ebx
c0017cde:	e8 23 05 ff ff       	call   c0008206 <File::close()>
c0017ce3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ce5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ce8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ceb:	c6 05 c0 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac0,0x1
c0017cf2:	83 c4 10             	add    esp,0x10
c0017cf5:	e9 45 fe ff ff       	jmp    c0017b3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x28>
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	68 2f 4f 02 c0       	push   0xc0024f2f
c0017d02:	e8 ed 7f ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017d07:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017d0f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017d14:	83 c4 10             	add    esp,0x10
c0017d17:	85 c0                	test   eax,eax
c0017d19:	75 01                	jne    c0017d1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0017d1b:	fb                   	sti    
c0017d1c:	83 c4 2c             	add    esp,0x2c
c0017d1f:	31 db                	xor    ebx,ebx
c0017d21:	88 d8                	mov    al,bl
c0017d23:	5b                   	pop    ebx
c0017d24:	5e                   	pop    esi
c0017d25:	5f                   	pop    edi
c0017d26:	5d                   	pop    ebp
c0017d27:	c3                   	ret    
c0017d28:	83 ec 0c             	sub    esp,0xc
c0017d2b:	68 48 4f 02 c0       	push   0xc0024f48
c0017d30:	e8 bf 7f ff ff       	call   c000fcf4 <KePanic(char const*)>
c0017d35:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c0017d3d:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0017d42:	83 c4 10             	add    esp,0x10
c0017d45:	85 c0                	test   eax,eax
c0017d47:	75 d3                	jne    c0017d1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x205>
c0017d49:	fb                   	sti    
c0017d4a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017d4e:	88 cb                	mov    bl,cl
c0017d50:	e9 33 ff ff ff       	jmp    c0017c88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x171>
c0017d55:	83 ec 0c             	sub    esp,0xc
c0017d58:	68 1b 4f 02 c0       	push   0xc0024f1b
c0017d5d:	eb a3                	jmp    c0017d02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1eb>

c0017d5f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017d5f:	57                   	push   edi
c0017d60:	56                   	push   esi
c0017d61:	53                   	push   ebx
c0017d62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d6a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d6e:	83 e8 06             	sub    eax,0x6
c0017d71:	0f b7 c0             	movzx  eax,ax
c0017d74:	50                   	push   eax
c0017d75:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017d7a:	50                   	push   eax
c0017d7b:	e8 b6 fa ff ff       	call   c0017836 <Vm::realToLinear(unsigned short, unsigned short)>
c0017d80:	5a                   	pop    edx
c0017d81:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0017d84:	5b                   	pop    ebx
c0017d85:	8d 56 fa             	lea    edx,[esi-0x6]
c0017d88:	8b 59 38             	mov    ebx,DWORD PTR [ecx+0x38]
c0017d8b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017d91:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0017d94:	8d 53 02             	lea    edx,[ebx+0x2]
c0017d97:	66 89 10             	mov    WORD PTR [eax],dx
c0017d9a:	66 8b 51 3c          	mov    dx,WORD PTR [ecx+0x3c]
c0017d9e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017da2:	8b 59 40             	mov    ebx,DWORD PTR [ecx+0x40]
c0017da5:	66 8b 71 40          	mov    si,WORD PTR [ecx+0x40]
c0017da9:	0f b6 d7             	movzx  edx,bh
c0017dac:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0017db0:	c1 e2 08             	shl    edx,0x8
c0017db3:	8b 35 00 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002000
c0017db9:	80 7e 61 00          	cmp    BYTE PTR [esi+0x61],0x0
c0017dbd:	0f b6 f3             	movzx  esi,bl
c0017dc0:	74 2c                	je     c0017dee <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x8f>
c0017dc2:	09 f2                	or     edx,esi
c0017dc4:	80 ce 02             	or     dh,0x2
c0017dc7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dd0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017dd4:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017ddc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017ddf:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017de7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0017dea:	5b                   	pop    ebx
c0017deb:	5e                   	pop    esi
c0017dec:	5f                   	pop    edi
c0017ded:	c3                   	ret    
c0017dee:	09 f2                	or     edx,esi
c0017df0:	80 e6 fd             	and    dh,0xfd
c0017df3:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017df7:	eb d2                	jmp    c0017dcb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6c>

c0017df9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017df9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017dfe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e03:	c1 e0 04             	shl    eax,0x4
c0017e06:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017e09:	c3                   	ret    

c0017e0a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017e0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e14:	c1 e0 04             	shl    eax,0x4
c0017e17:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017e1b:	c3                   	ret    

c0017e1c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e21:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e26:	c1 e0 04             	shl    eax,0x4
c0017e29:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017e2c:	c3                   	ret    

c0017e2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017e2d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e32:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e37:	c1 e0 04             	shl    eax,0x4
c0017e3a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e3e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017e41:	c3                   	ret    

c0017e42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017e42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e4c:	c1 e0 04             	shl    eax,0x4
c0017e4f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e53:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017e57:	c3                   	ret    

c0017e58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017e58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017e5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017e62:	c1 e0 04             	shl    eax,0x4
c0017e65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e69:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017e6c:	c3                   	ret    

c0017e6d <Vm::faultHandler(regs*)>:
c0017e6d:	55                   	push   ebp
c0017e6e:	57                   	push   edi
c0017e6f:	56                   	push   esi
c0017e70:	53                   	push   ebx
c0017e71:	83 ec 1c             	sub    esp,0x1c
c0017e74:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017e78:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017e7b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017e7f:	89 c6                	mov    esi,eax
c0017e81:	52                   	push   edx
c0017e82:	0f b7 c0             	movzx  eax,ax
c0017e85:	50                   	push   eax
c0017e86:	e8 ab f9 ff ff       	call   c0017836 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e8b:	59                   	pop    ecx
c0017e8c:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0017e8f:	5f                   	pop    edi
c0017e90:	0f b7 d5             	movzx  edx,bp
c0017e93:	8b 7b 44             	mov    edi,DWORD PTR [ebx+0x44]
c0017e96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017e9a:	89 c1                	mov    ecx,eax
c0017e9c:	0f b7 c7             	movzx  eax,di
c0017e9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ea3:	50                   	push   eax
c0017ea4:	52                   	push   edx
c0017ea5:	e8 8c f9 ff ff       	call   c0017836 <Vm::realToLinear(unsigned short, unsigned short)>
c0017eaa:	83 c4 08             	add    esp,0x8
c0017ead:	c6 44 24 06 06       	mov    BYTE PTR [esp+0x6],0x6
c0017eb2:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0017eb7:	c6 44 24 05 00       	mov    BYTE PTR [esp+0x5],0x0
c0017ebc:	8a 11                	mov    dl,BYTE PTR [ecx]
c0017ebe:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017ec2:	83 ea 26             	sub    edx,0x26
c0017ec5:	0f b6 d2             	movzx  edx,dl
c0017ec8:	81 fa d5 00 00 00    	cmp    edx,0xd5
c0017ece:	0f 87 04 04 00 00    	ja     c00182d8 <Vm::faultHandler(regs*)+0x46b>
c0017ed4:	ff 24 95 e8 4f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb018]
c0017edb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ee0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017ee4:	b0 01                	mov    al,0x1
c0017ee6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0017ee9:	83 c5 01             	add    ebp,0x1
c0017eec:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0017eef:	83 c4 1c             	add    esp,0x1c
c0017ef2:	5b                   	pop    ebx
c0017ef3:	5e                   	pop    esi
c0017ef4:	5f                   	pop    edi
c0017ef5:	5d                   	pop    ebp
c0017ef6:	c3                   	ret    
c0017ef7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017efa:	c6 44 24 06 02       	mov    BYTE PTR [esp+0x6],0x2
c0017eff:	83 c2 01             	add    edx,0x1
c0017f02:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f05:	83 c1 01             	add    ecx,0x1
c0017f08:	eb b2                	jmp    c0017ebc <Vm::faultHandler(regs*)+0x4f>
c0017f0a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f0d:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c0017f12:	83 c2 01             	add    edx,0x1
c0017f15:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f18:	eb eb                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f1a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f1d:	c6 44 24 06 05       	mov    BYTE PTR [esp+0x6],0x5
c0017f22:	83 c2 01             	add    edx,0x1
c0017f25:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f28:	eb db                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f2a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f2d:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0017f32:	83 c2 01             	add    edx,0x1
c0017f35:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f38:	eb cb                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f3a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f3d:	c6 44 24 06 03       	mov    BYTE PTR [esp+0x6],0x3
c0017f42:	83 c2 01             	add    edx,0x1
c0017f45:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f48:	eb bb                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f4a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f4d:	c6 44 24 06 04       	mov    BYTE PTR [esp+0x6],0x4
c0017f52:	83 c2 01             	add    edx,0x1
c0017f55:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f58:	eb ab                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f5a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f5d:	c6 44 24 05 01       	mov    BYTE PTR [esp+0x5],0x1
c0017f62:	83 c2 01             	add    edx,0x1
c0017f65:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f68:	eb 9b                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0017f6d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0017f72:	83 c2 01             	add    edx,0x1
c0017f75:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017f78:	eb 8b                	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c0017f7a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017f7d:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0017f82:	74 0d                	je     c0017f91 <Vm::faultHandler(regs*)+0x124>
c0017f84:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017f8b:	0f 87 8a 06 00 00    	ja     c001861b <Vm::faultHandler(regs*)+0x7ae>
c0017f91:	83 ec 0c             	sub    esp,0xc
c0017f94:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017f98:	0f b7 f6             	movzx  esi,si
c0017f9b:	50                   	push   eax
c0017f9c:	e8 4c f8 ff ff       	call   c00177ed <Vm::inbv(unsigned short)>
c0017fa1:	83 c4 0c             	add    esp,0xc
c0017fa4:	0f b6 c0             	movzx  eax,al
c0017fa7:	50                   	push   eax
c0017fa8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017fac:	50                   	push   eax
c0017fad:	56                   	push   esi
c0017fae:	e8 7a fe ff ff       	call   c0017e2d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017fbd:	0f 84 d6 05 00 00    	je     c0018599 <Vm::faultHandler(regs*)+0x72c>
c0017fc3:	83 e8 01             	sub    eax,0x1
c0017fc6:	0f b7 c0             	movzx  eax,ax
c0017fc9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017fcc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0017fcf:	83 c0 01             	add    eax,0x1
c0017fd2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017fd5:	83 c4 1c             	add    esp,0x1c
c0017fd8:	b0 01                	mov    al,0x1
c0017fda:	5b                   	pop    ebx
c0017fdb:	5e                   	pop    esi
c0017fdc:	5f                   	pop    edi
c0017fdd:	5d                   	pop    ebp
c0017fde:	c3                   	ret    
c0017fdf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017fe2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fe5:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c0017fea:	0f 85 98 04 00 00    	jne    c0018488 <Vm::faultHandler(regs*)+0x61b>
c0017ff0:	0f b7 c8             	movzx  ecx,ax
c0017ff3:	0f b7 f6             	movzx  esi,si
c0017ff6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017ff9:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0017ffe:	0f 84 35 05 00 00    	je     c0018539 <Vm::faultHandler(regs*)+0x6cc>
c0018004:	ed                   	in     eax,dx
c0018005:	83 ec 04             	sub    esp,0x4
c0018008:	50                   	push   eax
c0018009:	51                   	push   ecx
c001800a:	56                   	push   esi
c001800b:	e8 48 fe ff ff       	call   c0017e58 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018016:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001801a:	0f 84 9d 05 00 00    	je     c00185bd <Vm::faultHandler(regs*)+0x750>
c0018020:	83 e8 04             	sub    eax,0x4
c0018023:	25 ff ff 00 00       	and    eax,0xffff
c0018028:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001802b:	eb 9f                	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c001802d:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018032:	83 f8 06             	cmp    eax,0x6
c0018035:	0f 87 60 03 00 00    	ja     c001839b <Vm::faultHandler(regs*)+0x52e>
c001803b:	ff 24 85 40 53 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdacc0]
c0018042:	0f b6 44 24 06       	movzx  eax,BYTE PTR [esp+0x6]
c0018047:	83 f8 06             	cmp    eax,0x6
c001804a:	0f 87 f6 02 00 00    	ja     c0018346 <Vm::faultHandler(regs*)+0x4d9>
c0018050:	ff 24 85 5c 53 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdaca4]
c0018057:	83 ec 08             	sub    esp,0x8
c001805a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001805e:	50                   	push   eax
c001805f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018063:	50                   	push   eax
c0018064:	e8 97 f7 ff ff       	call   c0017800 <Vm::outbv(unsigned short, unsigned char)>
c0018069:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001806c:	83 c4 10             	add    esp,0x10
c001806f:	83 c0 02             	add    eax,0x2
c0018072:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018075:	b0 01                	mov    al,0x1
c0018077:	e9 73 fe ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001807c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018080:	3d ee 00 00 00       	cmp    eax,0xee
c0018085:	0f 84 5a 04 00 00    	je     c00184e5 <Vm::faultHandler(regs*)+0x678>
c001808b:	83 ec 0c             	sub    esp,0xc
c001808e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018092:	52                   	push   edx
c0018093:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0018097:	56                   	push   esi
c0018098:	51                   	push   ecx
c0018099:	50                   	push   eax
c001809a:	53                   	push   ebx
c001809b:	e8 bf fc ff ff       	call   c0017d5f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00180a0:	83 c4 20             	add    esp,0x20
c00180a3:	b0 01                	mov    al,0x1
c00180a5:	e9 45 fe ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c00180aa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00180ae:	89 d1                	mov    ecx,edx
c00180b0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00180b3:	c1 e1 08             	shl    ecx,0x8
c00180b6:	09 ca                	or     edx,ecx
c00180b8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00180bb:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00180bf:	89 d1                	mov    ecx,edx
c00180c1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00180c5:	c1 e1 08             	shl    ecx,0x8
c00180c8:	09 ca                	or     edx,ecx
c00180ca:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00180cd:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00180d1:	89 d1                	mov    ecx,edx
c00180d3:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00180d7:	c1 e1 08             	shl    ecx,0x8
c00180da:	09 ca                	or     edx,ecx
c00180dc:	81 ca 00 02 02 00    	or     edx,0x20200
c00180e2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00180e5:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00180e9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00180ef:	d1 e8                	shr    eax,1
c00180f1:	83 e0 01             	and    eax,0x1
c00180f4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00180f7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00180fa:	83 c0 06             	add    eax,0x6
c00180fd:	25 ff ff 00 00       	and    eax,0xffff
c0018102:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018105:	b0 01                	mov    al,0x1
c0018107:	e9 e3 fd ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001810c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001810f:	83 ec 0c             	sub    esp,0xc
c0018112:	b0 00                	mov    al,0x0
c0018114:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018117:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001811b:	50                   	push   eax
c001811c:	e8 cc f6 ff ff       	call   c00177ed <Vm::inbv(unsigned short)>
c0018121:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018124:	0f b6 c0             	movzx  eax,al
c0018127:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001812a:	09 c2                	or     edx,eax
c001812c:	83 c1 02             	add    ecx,0x2
c001812f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0018132:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	b0 01                	mov    al,0x1
c001813a:	e9 b0 fd ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001813f:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018144:	0f 85 7a 03 00 00    	jne    c00184c4 <Vm::faultHandler(regs*)+0x657>
c001814a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001814d:	81 e6 00 00 ff ff    	and    esi,0xffff0000
c0018153:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018156:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001815a:	66 ed                	in     ax,dx
c001815c:	0f b7 c0             	movzx  eax,ax
c001815f:	09 f0                	or     eax,esi
c0018161:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018164:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0018167:	83 c0 02             	add    eax,0x2
c001816a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001816d:	83 c4 1c             	add    esp,0x1c
c0018170:	b0 01                	mov    al,0x1
c0018172:	5b                   	pop    ebx
c0018173:	5e                   	pop    esi
c0018174:	5f                   	pop    edi
c0018175:	5d                   	pop    ebp
c0018176:	c3                   	ret    
c0018177:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001817a:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001817f:	0f 84 d7 02 00 00    	je     c001845c <Vm::faultHandler(regs*)+0x5ef>
c0018185:	83 ef 04             	sub    edi,0x4
c0018188:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001818e:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018194:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018197:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001819a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00181a0:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00181a4:	0f 84 22 fe ff ff    	je     c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00181aa:	80 ce 02             	or     dh,0x2
c00181ad:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00181b0:	e9 17 fe ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00181b5:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00181ba:	0f 84 6b 02 00 00    	je     c001842b <Vm::faultHandler(regs*)+0x5be>
c00181c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00181c2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00181c8:	81 ca 00 02 02 00    	or     edx,0x20200
c00181ce:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00181d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181d9:	c1 e8 09             	shr    eax,0x9
c00181dc:	83 e0 01             	and    eax,0x1
c00181df:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00181e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00181e5:	83 c0 04             	add    eax,0x4
c00181e8:	25 ff ff 00 00       	and    eax,0xffff
c00181ed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00181f0:	e9 d7 fd ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00181f5:	83 ec 08             	sub    esp,0x8
c00181f8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00181fc:	50                   	push   eax
c00181fd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018201:	50                   	push   eax
c0018202:	e8 f9 f5 ff ff       	call   c0017800 <Vm::outbv(unsigned short, unsigned char)>
c0018207:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001820a:	83 c4 10             	add    esp,0x10
c001820d:	83 c2 01             	add    edx,0x1
c0018210:	b0 01                	mov    al,0x1
c0018212:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018215:	e9 d5 fc ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001821a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001821d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018220:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018225:	0f 84 ac 02 00 00    	je     c00184d7 <Vm::faultHandler(regs*)+0x66a>
c001822b:	ef                   	out    dx,eax
c001822c:	e9 9b fd ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c0018231:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0018234:	83 c2 01             	add    edx,0x1
c0018237:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001823a:	e9 c6 fc ff ff       	jmp    c0017f05 <Vm::faultHandler(regs*)+0x98>
c001823f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018244:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018248:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001824b:	83 c0 01             	add    eax,0x1
c001824e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018251:	b0 01                	mov    al,0x1
c0018253:	e9 97 fc ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c0018258:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001825b:	83 ec 0c             	sub    esp,0xc
c001825e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018262:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0018268:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001826b:	50                   	push   eax
c001826c:	e8 7c f5 ff ff       	call   c00177ed <Vm::inbv(unsigned short)>
c0018271:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0018274:	0f b6 c0             	movzx  eax,al
c0018277:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001827a:	09 c7                	or     edi,eax
c001827c:	83 c5 01             	add    ebp,0x1
c001827f:	89 7b 2c             	mov    DWORD PTR [ebx+0x2c],edi
c0018282:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0018285:	83 c4 10             	add    esp,0x10
c0018288:	b0 01                	mov    al,0x1
c001828a:	e9 60 fc ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001828f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018292:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c0018297:	0f 85 34 02 00 00    	jne    c00184d1 <Vm::faultHandler(regs*)+0x664>
c001829d:	66 ed                	in     ax,dx
c001829f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00182a2:	0f b7 c0             	movzx  eax,ax
c00182a5:	81 e2 00 00 ff ff    	and    edx,0xffff0000
c00182ab:	09 d0                	or     eax,edx
c00182ad:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00182b0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00182b3:	83 c1 01             	add    ecx,0x1
c00182b6:	b0 01                	mov    al,0x1
c00182b8:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00182bb:	e9 2f fc ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c00182c0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00182c3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00182c7:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c00182cc:	0f 84 0c 02 00 00    	je     c00184de <Vm::faultHandler(regs*)+0x671>
c00182d2:	ef                   	out    dx,eax
c00182d3:	e9 8c fe ff ff       	jmp    c0018164 <Vm::faultHandler(regs*)+0x2f7>
c00182d8:	0f b6 74 24 04       	movzx  esi,BYTE PTR [esp+0x4]
c00182dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182e1:	50                   	push   eax
c00182e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00182e6:	50                   	push   eax
c00182e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00182eb:	50                   	push   eax
c00182ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00182f0:	50                   	push   eax
c00182f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00182f5:	50                   	push   eax
c00182f6:	56                   	push   esi
c00182f7:	56                   	push   esi
c00182f8:	68 b8 4f 02 c0       	push   0xc0024fb8
c00182fd:	e8 7a ec fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018302:	83 c4 20             	add    esp,0x20
c0018305:	eb 05                	jmp    c001830c <Vm::faultHandler(regs*)+0x49f>
c0018307:	83 f8 5a             	cmp    eax,0x5a
c001830a:	74 27                	je     c0018333 <Vm::faultHandler(regs*)+0x4c6>
c001830c:	83 ec 0c             	sub    esp,0xc
c001830f:	6a 60                	push   0x60
c0018311:	e8 d7 f4 ff ff       	call   c00177ed <Vm::inbv(unsigned short)>
c0018316:	83 c4 10             	add    esp,0x10
c0018319:	0f b6 c0             	movzx  eax,al
c001831c:	83 f8 1c             	cmp    eax,0x1c
c001831f:	75 e6                	jne    c0018307 <Vm::faultHandler(regs*)+0x49a>
c0018321:	eb 10                	jmp    c0018333 <Vm::faultHandler(regs*)+0x4c6>
c0018323:	83 ec 0c             	sub    esp,0xc
c0018326:	6a 60                	push   0x60
c0018328:	e8 c0 f4 ff ff       	call   c00177ed <Vm::inbv(unsigned short)>
c001832d:	83 c4 10             	add    esp,0x10
c0018330:	0f b6 c0             	movzx  eax,al
c0018333:	83 f8 1c             	cmp    eax,0x1c
c0018336:	74 eb                	je     c0018323 <Vm::faultHandler(regs*)+0x4b6>
c0018338:	83 f8 5a             	cmp    eax,0x5a
c001833b:	74 e6                	je     c0018323 <Vm::faultHandler(regs*)+0x4b6>
c001833d:	31 c0                	xor    eax,eax
c001833f:	e9 ab fb ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c0018344:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018346:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0018349:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c001834e:	0f 85 9a 00 00 00    	jne    c00183ee <Vm::faultHandler(regs*)+0x581>
c0018354:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0018357:	0f b7 c5             	movzx  eax,bp
c001835a:	81 e1 00 04 00 00    	and    ecx,0x400
c0018360:	0f b7 d6             	movzx  edx,si
c0018363:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0018366:	f6 44 24 05 01       	test   BYTE PTR [esp+0x5],0x1
c001836b:	0f 84 f8 01 00 00    	je     c0018569 <Vm::faultHandler(regs*)+0x6fc>
c0018371:	83 ec 08             	sub    esp,0x8
c0018374:	50                   	push   eax
c0018375:	52                   	push   edx
c0018376:	e8 a1 fa ff ff       	call   c0017e1c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001837b:	83 c4 10             	add    esp,0x10
c001837e:	89 fa                	mov    edx,edi
c0018380:	ef                   	out    dx,eax
c0018381:	85 c9                	test   ecx,ecx
c0018383:	0f 84 44 02 00 00    	je     c00185cd <Vm::faultHandler(regs*)+0x760>
c0018389:	8d 45 fc             	lea    eax,[ebp-0x4]
c001838c:	25 ff ff 00 00       	and    eax,0xffff
c0018391:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018394:	e9 33 fc ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c0018399:	8b 33                	mov    esi,DWORD PTR [ebx]
c001839b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001839e:	f6 44 24 07 01       	test   BYTE PTR [esp+0x7],0x1
c00183a3:	74 0b                	je     c00183b0 <Vm::faultHandler(regs*)+0x543>
c00183a5:	3d ff ff 00 00       	cmp    eax,0xffff
c00183aa:	0f 87 3a 02 00 00    	ja     c00185ea <Vm::faultHandler(regs*)+0x77d>
c00183b0:	83 ec 08             	sub    esp,0x8
c00183b3:	0f b7 c0             	movzx  eax,ax
c00183b6:	50                   	push   eax
c00183b7:	0f b7 c6             	movzx  eax,si
c00183ba:	50                   	push   eax
c00183bb:	e8 39 fa ff ff       	call   c0017df9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00183c0:	5e                   	pop    esi
c00183c1:	0f b6 c0             	movzx  eax,al
c00183c4:	5f                   	pop    edi
c00183c5:	50                   	push   eax
c00183c6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00183ca:	50                   	push   eax
c00183cb:	e8 30 f4 ff ff       	call   c0017800 <Vm::outbv(unsigned short, unsigned char)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00183d6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183da:	0f 84 ae 01 00 00    	je     c001858e <Vm::faultHandler(regs*)+0x721>
c00183e0:	83 e8 01             	sub    eax,0x1
c00183e3:	0f b7 c0             	movzx  eax,ax
c00183e6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00183e9:	e9 de fb ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00183ee:	81 fd ff ff 00 00    	cmp    ebp,0xffff
c00183f4:	0f 86 5a ff ff ff    	jbe    c0018354 <Vm::faultHandler(regs*)+0x4e7>
c00183fa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00183fe:	50                   	push   eax
c00183ff:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018403:	50                   	push   eax
c0018404:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018408:	50                   	push   eax
c0018409:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001840d:	50                   	push   eax
c001840e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018412:	50                   	push   eax
c0018413:	6a 6f                	push   0x6f
c0018415:	6a 6f                	push   0x6f
c0018417:	68 88 4f 02 c0       	push   0xc0024f88
c001841c:	e8 5b eb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018421:	83 c4 20             	add    esp,0x20
c0018424:	31 c0                	xor    eax,eax
c0018426:	e9 c4 fa ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001842b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001842e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018434:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018437:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001843a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018440:	c1 e8 09             	shr    eax,0x9
c0018443:	83 e0 01             	and    eax,0x1
c0018446:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018449:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001844c:	83 c0 02             	add    eax,0x2
c001844f:	25 ff ff 00 00       	and    eax,0xffff
c0018454:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018457:	e9 70 fb ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c001845c:	83 ef 02             	sub    edi,0x2
c001845f:	81 e7 ff ff 00 00    	and    edi,0xffff
c0018465:	89 7b 44             	mov    DWORD PTR [ebx+0x44],edi
c0018468:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001846c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018472:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018476:	0f 84 28 01 00 00    	je     c00185a4 <Vm::faultHandler(regs*)+0x737>
c001847c:	80 ce 02             	or     dh,0x2
c001847f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018483:	e9 44 fb ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c0018488:	3d ff ff 00 00       	cmp    eax,0xffff
c001848d:	0f 86 5d fb ff ff    	jbe    c0017ff0 <Vm::faultHandler(regs*)+0x183>
c0018493:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018497:	50                   	push   eax
c0018498:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001849c:	50                   	push   eax
c001849d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00184a1:	50                   	push   eax
c00184a2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00184a6:	50                   	push   eax
c00184a7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00184ab:	50                   	push   eax
c00184ac:	6a 6d                	push   0x6d
c00184ae:	6a 6d                	push   0x6d
c00184b0:	68 88 4f 02 c0       	push   0xc0024f88
c00184b5:	e8 c2 ea fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00184ba:	83 c4 20             	add    esp,0x20
c00184bd:	31 c0                	xor    eax,eax
c00184bf:	e9 2b fa ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c00184c4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00184c8:	ed                   	in     eax,dx
c00184c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00184cc:	e9 93 fc ff ff       	jmp    c0018164 <Vm::faultHandler(regs*)+0x2f7>
c00184d1:	ed                   	in     eax,dx
c00184d2:	e9 d6 fd ff ff       	jmp    c00182ad <Vm::faultHandler(regs*)+0x440>
c00184d7:	66 ef                	out    dx,ax
c00184d9:	e9 ee fa ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00184de:	66 ef                	out    dx,ax
c00184e0:	e9 7f fc ff ff       	jmp    c0018164 <Vm::faultHandler(regs*)+0x2f7>
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c00184eb:	57                   	push   edi
c00184ec:	e8 b7 f3 ff ff       	call   c00178a8 <Vm::mainloop3(unsigned long)>
c00184f1:	83 c4 10             	add    esp,0x10
c00184f4:	b0 01                	mov    al,0x1
c00184f6:	e9 f4 f9 ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c00184fb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00184fe:	e9 43 fe ff ff       	jmp    c0018346 <Vm::faultHandler(regs*)+0x4d9>
c0018503:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018506:	e9 3b fe ff ff       	jmp    c0018346 <Vm::faultHandler(regs*)+0x4d9>
c001850b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001850e:	e9 33 fe ff ff       	jmp    c0018346 <Vm::faultHandler(regs*)+0x4d9>
c0018513:	89 ee                	mov    esi,ebp
c0018515:	e9 2c fe ff ff       	jmp    c0018346 <Vm::faultHandler(regs*)+0x4d9>
c001851a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001851d:	e9 79 fe ff ff       	jmp    c001839b <Vm::faultHandler(regs*)+0x52e>
c0018522:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018525:	e9 71 fe ff ff       	jmp    c001839b <Vm::faultHandler(regs*)+0x52e>
c001852a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001852d:	e9 69 fe ff ff       	jmp    c001839b <Vm::faultHandler(regs*)+0x52e>
c0018532:	89 ee                	mov    esi,ebp
c0018534:	e9 62 fe ff ff       	jmp    c001839b <Vm::faultHandler(regs*)+0x52e>
c0018539:	66 ed                	in     ax,dx
c001853b:	83 ec 04             	sub    esp,0x4
c001853e:	0f b7 c0             	movzx  eax,ax
c0018541:	50                   	push   eax
c0018542:	51                   	push   ecx
c0018543:	56                   	push   esi
c0018544:	e8 f9 f8 ff ff       	call   c0017e42 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001854f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018553:	0f 84 84 00 00 00    	je     c00185dd <Vm::faultHandler(regs*)+0x770>
c0018559:	83 e8 02             	sub    eax,0x2
c001855c:	25 ff ff 00 00       	and    eax,0xffff
c0018561:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018564:	e9 63 fa ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c0018569:	83 ec 08             	sub    esp,0x8
c001856c:	50                   	push   eax
c001856d:	52                   	push   edx
c001856e:	e8 97 f8 ff ff       	call   c0017e0a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018573:	83 c4 10             	add    esp,0x10
c0018576:	89 fa                	mov    edx,edi
c0018578:	66 ef                	out    dx,ax
c001857a:	85 c9                	test   ecx,ecx
c001857c:	74 32                	je     c00185b0 <Vm::faultHandler(regs*)+0x743>
c001857e:	8d 45 fe             	lea    eax,[ebp-0x2]
c0018581:	25 ff ff 00 00       	and    eax,0xffff
c0018586:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018589:	e9 3e fa ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c001858e:	83 c0 01             	add    eax,0x1
c0018591:	0f b7 c0             	movzx  eax,ax
c0018594:	e9 4d fe ff ff       	jmp    c00183e6 <Vm::faultHandler(regs*)+0x579>
c0018599:	83 c0 01             	add    eax,0x1
c001859c:	0f b7 c0             	movzx  eax,ax
c001859f:	e9 25 fa ff ff       	jmp    c0017fc9 <Vm::faultHandler(regs*)+0x15c>
c00185a4:	80 e6 fd             	and    dh,0xfd
c00185a7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00185ab:	e9 1c fa ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00185b0:	8d 45 02             	lea    eax,[ebp+0x2]
c00185b3:	25 ff ff 00 00       	and    eax,0xffff
c00185b8:	e9 29 fe ff ff       	jmp    c00183e6 <Vm::faultHandler(regs*)+0x579>
c00185bd:	83 c0 04             	add    eax,0x4
c00185c0:	25 ff ff 00 00       	and    eax,0xffff
c00185c5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00185c8:	e9 ff f9 ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00185cd:	8d 45 04             	lea    eax,[ebp+0x4]
c00185d0:	25 ff ff 00 00       	and    eax,0xffff
c00185d5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00185d8:	e9 ef f9 ff ff       	jmp    c0017fcc <Vm::faultHandler(regs*)+0x15f>
c00185dd:	83 c0 02             	add    eax,0x2
c00185e0:	25 ff ff 00 00       	and    eax,0xffff
c00185e5:	e9 df f9 ff ff       	jmp    c0017fc9 <Vm::faultHandler(regs*)+0x15c>
c00185ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00185ee:	50                   	push   eax
c00185ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00185f3:	50                   	push   eax
c00185f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00185f8:	50                   	push   eax
c00185f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00185fd:	50                   	push   eax
c00185fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018602:	50                   	push   eax
c0018603:	6a 6e                	push   0x6e
c0018605:	6a 6e                	push   0x6e
c0018607:	68 88 4f 02 c0       	push   0xc0024f88
c001860c:	e8 6b e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018611:	83 c4 20             	add    esp,0x20
c0018614:	31 c0                	xor    eax,eax
c0018616:	e9 d4 f8 ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>
c001861b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001861f:	50                   	push   eax
c0018620:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018624:	50                   	push   eax
c0018625:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018629:	50                   	push   eax
c001862a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001862e:	50                   	push   eax
c001862f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018633:	50                   	push   eax
c0018634:	6a 6c                	push   0x6c
c0018636:	6a 6c                	push   0x6c
c0018638:	68 88 4f 02 c0       	push   0xc0024f88
c001863d:	e8 3a e9 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018642:	83 c4 20             	add    esp,0x20
c0018645:	31 c0                	xor    eax,eax
c0018647:	e9 a3 f8 ff ff       	jmp    c0017eef <Vm::faultHandler(regs*)+0x82>

c001864c <IOAPIC::close(int, int, void*)>:
c001864c:	b8 00 00 00 00       	mov    eax,0x0
c0018651:	c3                   	ret    

c0018652 <apicGetBase()>:
c0018652:	55                   	push   ebp
c0018653:	89 e5                	mov    ebp,esp
c0018655:	83 ec 18             	sub    esp,0x18
c0018658:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001865d:	83 e0 08             	and    eax,0x8
c0018660:	0f b6 c0             	movzx  eax,al
c0018663:	85 c0                	test   eax,eax
c0018665:	75 07                	jne    c001866e <apicGetBase()+0x1c>
c0018667:	b8 00 00 00 00       	mov    eax,0x0
c001866c:	eb 1b                	jmp    c0018689 <apicGetBase()+0x37>
c001866e:	83 ec 0c             	sub    esp,0xc
c0018671:	6a 1b                	push   0x1b
c0018673:	e8 61 15 00 00       	call   c0019bd9 <x86rdmsr(unsigned int)>
c0018678:	83 c4 10             	add    esp,0x10
c001867b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001867e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0018681:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018684:	25 00 00 ff ff       	and    eax,0xffff0000
c0018689:	c9                   	leave  
c001868a:	c3                   	ret    
c001868b:	90                   	nop

c001868c <IOAPIC::IOAPIC()>:
c001868c:	83 ec 0c             	sub    esp,0xc
c001868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018693:	83 ec 08             	sub    esp,0x8
c0018696:	68 78 53 02 c0       	push   0xc0025378
c001869b:	50                   	push   eax
c001869c:	e8 15 15 ff ff       	call   c0009bb6 <Device::Device(char const*)>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	ba 98 53 02 c0       	mov    edx,0xc0025398
c00186a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186ad:	89 10                	mov    DWORD PTR [eax],edx
c00186af:	90                   	nop
c00186b0:	83 c4 0c             	add    esp,0xc
c00186b3:	c3                   	ret    

c00186b4 <apicOpen()>:
c00186b4:	55                   	push   ebp
c00186b5:	89 e5                	mov    ebp,esp
c00186b7:	53                   	push   ebx
c00186b8:	83 ec 34             	sub    esp,0x34
c00186bb:	83 ec 0c             	sub    esp,0xc
c00186be:	68 80 53 02 c0       	push   0xc0025380
c00186c3:	e8 b4 e8 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00186c8:	83 c4 10             	add    esp,0x10
c00186cb:	a0 40 cb 02 c0       	mov    al,ds:0xc002cb40
c00186d0:	83 f0 01             	xor    eax,0x1
c00186d3:	0f b6 c0             	movzx  eax,al
c00186d6:	85 c0                	test   eax,eax
c00186d8:	0f 84 a3 00 00 00    	je     c0018781 <apicOpen()+0xcd>
c00186de:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00186e2:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c00186e7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00186eb:	0f b6 c0             	movzx  eax,al
c00186ee:	39 c2                	cmp    edx,eax
c00186f0:	0f 83 84 00 00 00    	jae    c001877a <apicOpen()+0xc6>
c00186f6:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018703:	e8 8f 71 ff ff       	call   c000f897 <malloc>
c0018708:	83 c4 10             	add    esp,0x10
c001870b:	89 c3                	mov    ebx,eax
c001870d:	83 ec 0c             	sub    esp,0xc
c0018710:	53                   	push   ebx
c0018711:	e8 76 ff ff ff       	call   c001868c <IOAPIC::IOAPIC()>
c0018716:	83 c4 10             	add    esp,0x10
c0018719:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001871c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018720:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018723:	89 14 85 20 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34e0],edx
c001872a:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001872f:	83 c0 01             	add    eax,0x1
c0018732:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c0018737:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001873c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018742:	83 ec 08             	sub    esp,0x8
c0018745:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018748:	50                   	push   eax
c0018749:	e8 06 13 ff ff       	call   c0009a54 <Device::addChild(Device*)>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018754:	8b 00                	mov    eax,DWORD PTR [eax]
c0018756:	83 c0 08             	add    eax,0x8
c0018759:	8b 00                	mov    eax,DWORD PTR [eax]
c001875b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001875f:	6a 00                	push   0x0
c0018761:	6a 00                	push   0x0
c0018763:	52                   	push   edx
c0018764:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0018767:	ff d0                	call   eax
c0018769:	83 c4 10             	add    esp,0x10
c001876c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001876f:	83 c0 01             	add    eax,0x1
c0018772:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0018775:	e9 68 ff ff ff       	jmp    c00186e2 <apicOpen()+0x2e>
c001877a:	c6 05 40 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb40,0x1
c0018781:	e8 cc fe ff ff       	call   c0018652 <apicGetBase()>
c0018786:	05 f0 00 00 00       	add    eax,0xf0
c001878b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001878e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0018791:	8b 00                	mov    eax,DWORD PTR [eax]
c0018793:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0018796:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001879d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00187a4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00187a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00187aa:	89 10                	mov    DWORD PTR [eax],edx
c00187ac:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00187b3:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c00187b8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00187bb:	7d 7c                	jge    c0018839 <apicOpen()+0x185>
c00187bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187c0:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187c7:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c00187ca:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187cd:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187d4:	c1 e8 08             	shr    eax,0x8
c00187d7:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00187db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00187de:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c00187e5:	c1 e8 18             	shr    eax,0x18
c00187e8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00187eb:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00187ef:	3d ff 00 00 00       	cmp    eax,0xff
c00187f4:	75 3a                	jne    c0018830 <apicOpen()+0x17c>
c00187f6:	e8 57 fe ff ff       	call   c0018652 <apicGetBase()>
c00187fb:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00187ff:	83 fa 01             	cmp    edx,0x1
c0018802:	75 07                	jne    c001880b <apicOpen()+0x157>
c0018804:	ba 60 03 00 00       	mov    edx,0x360
c0018809:	eb 05                	jmp    c0018810 <apicOpen()+0x15c>
c001880b:	ba 50 03 00 00       	mov    edx,0x350
c0018810:	01 d0                	add    eax,edx
c0018812:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018815:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018818:	8b 00                	mov    eax,DWORD PTR [eax]
c001881a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001881d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018824:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018828:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001882b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001882e:	89 10                	mov    DWORD PTR [eax],edx
c0018830:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018834:	e9 7a ff ff ff       	jmp    c00187b3 <apicOpen()+0xff>
c0018839:	90                   	nop
c001883a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001883d:	c9                   	leave  
c001883e:	c3                   	ret    
c001883f:	90                   	nop

c0018840 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018840:	55                   	push   ebp
c0018841:	89 e5                	mov    ebp,esp
c0018843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018846:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001884c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001884f:	72 1d                	jb     c001886e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018854:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001885a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001885d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018863:	01 d0                	add    eax,edx
c0018865:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018868:	73 04                	jae    c001886e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001886a:	b0 01                	mov    al,0x1
c001886c:	eb 02                	jmp    c0018870 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001886e:	b0 00                	mov    al,0x0
c0018870:	5d                   	pop    ebp
c0018871:	c3                   	ret    

c0018872 <IOAPIC::read(int)>:
c0018872:	55                   	push   ebp
c0018873:	89 e5                	mov    ebp,esp
c0018875:	83 ec 10             	sub    esp,0x10
c0018878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001887b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018881:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018884:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018887:	0f b6 d0             	movzx  edx,al
c001888a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001888d:	89 10                	mov    DWORD PTR [eax],edx
c001888f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018892:	83 c0 10             	add    eax,0x10
c0018895:	8b 00                	mov    eax,DWORD PTR [eax]
c0018897:	c9                   	leave  
c0018898:	c3                   	ret    
c0018899:	90                   	nop

c001889a <IOAPIC::open(int, int, void*)>:
c001889a:	55                   	push   ebp
c001889b:	89 e5                	mov    ebp,esp
c001889d:	57                   	push   edi
c001889e:	56                   	push   esi
c001889f:	53                   	push   ebx
c00188a0:	83 ec 04             	sub    esp,0x4
c00188a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00188a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00188af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00188b8:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c00188bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00188c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00188d1:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c00188d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188db:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00188e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00188ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00188ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00188f3:	0f b6 f0             	movzx  esi,al
c00188f6:	89 d0                	mov    eax,edx
c00188f8:	ba 00 00 00 00       	mov    edx,0x0
c00188fd:	89 c7                	mov    edi,eax
c00188ff:	83 e7 ff             	and    edi,0xffffffff
c0018902:	89 f9                	mov    ecx,edi
c0018904:	0f b6 da             	movzx  ebx,dl
c0018907:	89 c8                	mov    eax,ecx
c0018909:	89 da                	mov    edx,ebx
c001890b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001890e:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018911:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018915:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018919:	83 e0 00             	and    eax,0x0
c001891c:	09 d0                	or     eax,edx
c001891e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018925:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001892b:	8d 50 01             	lea    edx,[eax+0x1]
c001892e:	88 d1                	mov    cl,dl
c0018930:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018933:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018939:	0f b6 d0             	movzx  edx,al
c001893c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001893f:	83 c2 08             	add    edx,0x8
c0018942:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018946:	0f b6 c9             	movzx  ecx,cl
c0018949:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001894f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018953:	6a 01                	push   0x1
c0018955:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018958:	e8 15 ff ff ff       	call   c0018872 <IOAPIC::read(int)>
c001895d:	83 c4 08             	add    esp,0x8
c0018960:	c1 f8 10             	sar    eax,0x10
c0018963:	0f b6 c0             	movzx  eax,al
c0018966:	8d 50 01             	lea    edx,[eax+0x1]
c0018969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001896c:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018972:	b8 00 00 00 00       	mov    eax,0x0
c0018977:	8d 65 f4             	lea    esp,[ebp-0xc]
c001897a:	5b                   	pop    ebx
c001897b:	5e                   	pop    esi
c001897c:	5f                   	pop    edi
c001897d:	5d                   	pop    ebp
c001897e:	c3                   	ret    
c001897f:	90                   	nop

c0018980 <IOAPIC::write(int, int)>:
c0018980:	55                   	push   ebp
c0018981:	89 e5                	mov    ebp,esp
c0018983:	83 ec 10             	sub    esp,0x10
c0018986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018989:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001898f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018992:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018995:	0f b6 d0             	movzx  edx,al
c0018998:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001899b:	89 10                	mov    DWORD PTR [eax],edx
c001899d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00189a0:	8d 50 10             	lea    edx,[eax+0x10]
c00189a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00189a6:	89 02                	mov    DWORD PTR [edx],eax
c00189a8:	90                   	nop
c00189a9:	c9                   	leave  
c00189aa:	c3                   	ret    
c00189ab:	90                   	nop

c00189ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00189ac:	55                   	push   ebp
c00189ad:	89 e5                	mov    ebp,esp
c00189af:	53                   	push   ebx
c00189b0:	83 ec 2c             	sub    esp,0x2c
c00189b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00189b6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00189b9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00189bc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00189bf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00189c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00189c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00189c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00189cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00189ce:	88 d8                	mov    al,bl
c00189d0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00189d3:	88 c8                	mov    al,cl
c00189d5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00189d8:	88 d0                	mov    al,dl
c00189da:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00189dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00189e1:	83 c0 08             	add    eax,0x8
c00189e4:	01 c0                	add    eax,eax
c00189e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00189e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00189ed:	83 c0 08             	add    eax,0x8
c00189f0:	01 c0                	add    eax,eax
c00189f2:	83 c0 01             	add    eax,0x1
c00189f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00189f8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00189fb:	50                   	push   eax
c00189fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00189ff:	e8 6e fe ff ff       	call   c0018872 <IOAPIC::read(int)>
c0018a04:	83 c4 08             	add    esp,0x8
c0018a07:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018a0a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018a11:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018a14:	c1 e0 18             	shl    eax,0x18
c0018a17:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018a1a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018a1d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018a20:	52                   	push   edx
c0018a21:	50                   	push   eax
c0018a22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a25:	e8 56 ff ff ff       	call   c0018980 <IOAPIC::write(int, int)>
c0018a2a:	83 c4 0c             	add    esp,0xc
c0018a2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a30:	50                   	push   eax
c0018a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a34:	e8 39 fe ff ff       	call   c0018872 <IOAPIC::read(int)>
c0018a39:	83 c4 08             	add    esp,0x8
c0018a3c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018a3f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018a46:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018a4d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018a54:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018a58:	85 c0                	test   eax,eax
c0018a5a:	74 09                	je     c0018a65 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018a5c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018a63:	eb 07                	jmp    c0018a6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018a65:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018a6c:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018a70:	85 c0                	test   eax,eax
c0018a72:	74 09                	je     c0018a7d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018a74:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018a7b:	eb 07                	jmp    c0018a84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018a7d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018a84:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018a8b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018a8f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018a92:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018a95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a98:	52                   	push   edx
c0018a99:	50                   	push   eax
c0018a9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018a9d:	e8 de fe ff ff       	call   c0018980 <IOAPIC::write(int, int)>
c0018aa2:	83 c4 0c             	add    esp,0xc
c0018aa5:	90                   	nop
c0018aa6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018aa9:	c9                   	leave  
c0018aaa:	c3                   	ret    
c0018aab:	90                   	nop

c0018aac <noCopro(unsigned long)>:
c0018aac:	c3                   	ret    

c0018aad <HalRestart()>:
c0018aad:	e4 64                	in     al,0x64
c0018aaf:	a8 02                	test   al,0x2
c0018ab1:	75 fa                	jne    c0018aad <HalRestart()>
c0018ab3:	b0 fe                	mov    al,0xfe
c0018ab5:	e6 64                	out    0x64,al
c0018ab7:	c3                   	ret    

c0018ab8 <HalShutdown()>:
c0018ab8:	c3                   	ret    

c0018ab9 <HalSleep()>:
c0018ab9:	c3                   	ret    

c0018aba <CPU::close(int, int, void*)>:
c0018aba:	31 c0                	xor    eax,eax
c0018abc:	c3                   	ret    

c0018abd <x86ReadCMOS(unsigned char)>:
c0018abd:	83 ec 14             	sub    esp,0x14
c0018ac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ac4:	88 04 24             	mov    BYTE PTR [esp],al
c0018ac7:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0018acc:	0f b6 c0             	movzx  eax,al
c0018acf:	85 c0                	test   eax,eax
c0018ad1:	74 04                	je     c0018ad7 <x86ReadCMOS(unsigned char)+0x1a>
c0018ad3:	b2 00                	mov    dl,0x0
c0018ad5:	eb 02                	jmp    c0018ad9 <x86ReadCMOS(unsigned char)+0x1c>
c0018ad7:	b2 80                	mov    dl,0x80
c0018ad9:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018adc:	09 d0                	or     eax,edx
c0018ade:	0f b6 c0             	movzx  eax,al
c0018ae1:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018ae8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018aec:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018af0:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018af5:	ee                   	out    dx,al
c0018af6:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018afd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018b02:	89 c2                	mov    edx,eax
c0018b04:	ec                   	in     al,dx
c0018b05:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018b09:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018b0d:	83 c4 14             	add    esp,0x14
c0018b10:	c3                   	ret    

c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018b11:	83 ec 18             	sub    esp,0x18
c0018b14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b1c:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0018b20:	88 04 24             	mov    BYTE PTR [esp],al
c0018b23:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0018b28:	0f b6 c0             	movzx  eax,al
c0018b2b:	85 c0                	test   eax,eax
c0018b2d:	74 04                	je     c0018b33 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0018b2f:	b2 00                	mov    dl,0x0
c0018b31:	eb 02                	jmp    c0018b35 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018b33:	b2 80                	mov    dl,0x80
c0018b35:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018b39:	09 d0                	or     eax,edx
c0018b3b:	0f b6 c0             	movzx  eax,al
c0018b3e:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018b45:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018b49:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018b4d:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018b52:	ee                   	out    dx,al
c0018b53:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018b57:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018b5e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018b62:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018b66:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018b6b:	ee                   	out    dx,al
c0018b6c:	90                   	nop
c0018b6d:	83 c4 18             	add    esp,0x18
c0018b70:	c3                   	ret    

c0018b71 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018b71:	60                   	pusha  
c0018b72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b7e:	9c                   	pushf  
c0018b7f:	fa                   	cli    
c0018b80:	0f 09                	wbinvd 
c0018b82:	0f 30                	wrmsr  
c0018b84:	9d                   	popf   
c0018b85:	89 c2                	mov    edx,eax
c0018b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b8b:	89 10                	mov    DWORD PTR [eax],edx
c0018b8d:	61                   	popa   
c0018b8e:	90                   	nop
c0018b8f:	c3                   	ret    

c0018b90 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018b90:	60                   	pusha  
c0018b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b95:	89 c1                	mov    ecx,eax
c0018b97:	9c                   	pushf  
c0018b98:	fa                   	cli    
c0018b99:	0f 09                	wbinvd 
c0018b9b:	31 c0                	xor    eax,eax
c0018b9d:	31 d2                	xor    edx,edx
c0018b9f:	0f 32                	rdmsr  
c0018ba1:	9d                   	popf   
c0018ba2:	89 c2                	mov    edx,eax
c0018ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ba8:	89 10                	mov    DWORD PTR [eax],edx
c0018baa:	61                   	popa   
c0018bab:	90                   	nop
c0018bac:	c3                   	ret    

c0018bad <AMD_K6_writeback(int, int, int)>:
c0018bad:	83 ec 20             	sub    esp,0x20
c0018bb0:	a1 70 c1 02 c0       	mov    eax,ds:0xc002c170
c0018bb5:	c1 e8 14             	shr    eax,0x14
c0018bb8:	c1 e8 02             	shr    eax,0x2
c0018bbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018bbf:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018bc4:	0f 85 9e 00 00 00    	jne    c0018c68 <AMD_K6_writeback(int, int, int)+0xbb>
c0018bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018bd2:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018bd7:	75 19                	jne    c0018bf2 <AMD_K6_writeback(int, int, int)+0x45>
c0018bd9:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018bde:	7f 0a                	jg     c0018bea <AMD_K6_writeback(int, int, int)+0x3d>
c0018be0:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018be8:	eb 08                	jmp    c0018bf2 <AMD_K6_writeback(int, int, int)+0x45>
c0018bea:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018bf2:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018bf7:	7c 6e                	jl     c0018c67 <AMD_K6_writeback(int, int, int)+0xba>
c0018bf9:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018bfe:	7e 09                	jle    c0018c09 <AMD_K6_writeback(int, int, int)+0x5c>
c0018c00:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018c05:	74 36                	je     c0018c3d <AMD_K6_writeback(int, int, int)+0x90>
c0018c07:	eb 5e                	jmp    c0018c67 <AMD_K6_writeback(int, int, int)+0xba>
c0018c09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c0d:	50                   	push   eax
c0018c0e:	68 82 00 00 c0       	push   0xc0000082
c0018c13:	e8 78 ff ff ff       	call   c0018b90 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018c18:	83 c4 08             	add    esp,0x8
c0018c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c1f:	01 c0                	add    eax,eax
c0018c21:	83 e0 7f             	and    eax,0x7f
c0018c24:	89 c2                	mov    edx,eax
c0018c26:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c2a:	50                   	push   eax
c0018c2b:	6a 00                	push   0x0
c0018c2d:	52                   	push   edx
c0018c2e:	68 82 00 00 c0       	push   0xc0000082
c0018c33:	e8 39 ff ff ff       	call   c0018b71 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018c38:	83 c4 10             	add    esp,0x10
c0018c3b:	eb 2b                	jmp    c0018c68 <AMD_K6_writeback(int, int, int)+0xbb>
c0018c3d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c41:	50                   	push   eax
c0018c42:	68 82 00 00 c0       	push   0xc0000082
c0018c47:	e8 44 ff ff ff       	call   c0018b90 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018c4c:	83 c4 08             	add    esp,0x8
c0018c4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018c53:	50                   	push   eax
c0018c54:	6a 00                	push   0x0
c0018c56:	6a 00                	push   0x0
c0018c58:	68 82 00 00 c0       	push   0xc0000082
c0018c5d:	e8 0f ff ff ff       	call   c0018b71 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018c62:	83 c4 10             	add    esp,0x10
c0018c65:	eb 01                	jmp    c0018c68 <AMD_K6_writeback(int, int, int)+0xbb>
c0018c67:	90                   	nop
c0018c68:	90                   	nop
c0018c69:	83 c4 20             	add    esp,0x20
c0018c6c:	c3                   	ret    

c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018c6d:	56                   	push   esi
c0018c6e:	53                   	push   ebx
c0018c6f:	a1 60 6c 02 c0       	mov    eax,ds:0xc0026c60
c0018c74:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018c78:	75 32                	jne    c0018cac <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018c7a:	8b 15 60 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb60
c0018c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c84:	89 10                	mov    DWORD PTR [eax],edx
c0018c86:	8b 15 5c cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb5c
c0018c8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c90:	89 10                	mov    DWORD PTR [eax],edx
c0018c92:	8b 15 58 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb58
c0018c98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c9c:	89 10                	mov    DWORD PTR [eax],edx
c0018c9e:	8b 15 54 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb54
c0018ca4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ca8:	89 10                	mov    DWORD PTR [eax],edx
c0018caa:	eb 5c                	jmp    c0018d08 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cb0:	ba 00 00 00 00       	mov    edx,0x0
c0018cb5:	89 d1                	mov    ecx,edx
c0018cb7:	0f a2                	cpuid  
c0018cb9:	89 c6                	mov    esi,eax
c0018cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbf:	89 30                	mov    DWORD PTR [eax],esi
c0018cc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018cc5:	89 18                	mov    DWORD PTR [eax],ebx
c0018cc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ccb:	89 08                	mov    DWORD PTR [eax],ecx
c0018ccd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cd1:	89 10                	mov    DWORD PTR [eax],edx
c0018cd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cd7:	a3 60 6c 02 c0       	mov    ds:0xc0026c60,eax
c0018cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ce0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ce2:	a3 60 cb 02 c0       	mov    ds:0xc002cb60,eax
c0018ce7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ceb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ced:	a3 5c cb 02 c0       	mov    ds:0xc002cb5c,eax
c0018cf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cf8:	a3 58 cb 02 c0       	mov    ds:0xc002cb58,eax
c0018cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d03:	a3 54 cb 02 c0       	mov    ds:0xc002cb54,eax
c0018d08:	5b                   	pop    ebx
c0018d09:	5e                   	pop    esi
c0018d0a:	c3                   	ret    

c0018d0b <cpuidCheckEDX(unsigned int)>:
c0018d0b:	83 ec 10             	sub    esp,0x10
c0018d0e:	89 e0                	mov    eax,esp
c0018d10:	50                   	push   eax
c0018d11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d15:	50                   	push   eax
c0018d16:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d1a:	50                   	push   eax
c0018d1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d1f:	50                   	push   eax
c0018d20:	6a 01                	push   0x1
c0018d22:	e8 46 ff ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d27:	83 c4 14             	add    esp,0x14
c0018d2a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018d2d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d31:	0f 95 c0             	setne  al
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	c3                   	ret    

c0018d38 <cpuidCheckECX(unsigned int)>:
c0018d38:	83 ec 10             	sub    esp,0x10
c0018d3b:	89 e0                	mov    eax,esp
c0018d3d:	50                   	push   eax
c0018d3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d42:	50                   	push   eax
c0018d43:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d47:	50                   	push   eax
c0018d48:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d4c:	50                   	push   eax
c0018d4d:	6a 01                	push   0x1
c0018d4f:	e8 19 ff ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d54:	83 c4 14             	add    esp,0x14
c0018d57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d5b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d5f:	0f 95 c0             	setne  al
c0018d62:	83 c4 10             	add    esp,0x10
c0018d65:	c3                   	ret    

c0018d66 <cpuidCheckExtendedEBX(unsigned int)>:
c0018d66:	83 ec 10             	sub    esp,0x10
c0018d69:	89 e0                	mov    eax,esp
c0018d6b:	50                   	push   eax
c0018d6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d70:	50                   	push   eax
c0018d71:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018d75:	50                   	push   eax
c0018d76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018d7a:	50                   	push   eax
c0018d7b:	6a 07                	push   0x7
c0018d7d:	e8 eb fe ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d82:	83 c4 14             	add    esp,0x14
c0018d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d89:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018d8d:	0f 95 c0             	setne  al
c0018d90:	83 c4 10             	add    esp,0x10
c0018d93:	c3                   	ret    

c0018d94 <cpuidCheckExtendedECX(unsigned int)>:
c0018d94:	83 ec 10             	sub    esp,0x10
c0018d97:	89 e0                	mov    eax,esp
c0018d99:	50                   	push   eax
c0018d9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d9e:	50                   	push   eax
c0018d9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018da3:	50                   	push   eax
c0018da4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018da8:	50                   	push   eax
c0018da9:	6a 07                	push   0x7
c0018dab:	e8 bd fe ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018db0:	83 c4 14             	add    esp,0x14
c0018db3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018db7:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018dbb:	0f 95 c0             	setne  al
c0018dbe:	83 c4 10             	add    esp,0x10
c0018dc1:	c3                   	ret    

c0018dc2 <HalDetectFeatures()>:
c0018dc2:	57                   	push   edi
c0018dc3:	56                   	push   esi
c0018dc4:	53                   	push   ebx
c0018dc5:	81 ec 90 00 00 00    	sub    esp,0x90
c0018dcb:	83 ec 04             	sub    esp,0x4
c0018dce:	6a 08                	push   0x8
c0018dd0:	6a 00                	push   0x0
c0018dd2:	68 8c cb 02 c0       	push   0xc002cb8c
c0018dd7:	e8 14 77 fe ff       	call   c00004f0 <memset>
c0018ddc:	83 c4 10             	add    esp,0x10
c0018ddf:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018de4:	83 c8 04             	or     eax,0x4
c0018de7:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	68 bc 53 02 c0       	push   0xc00253bc
c0018df4:	e8 83 e1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	e8 f8 73 fe ff       	call   c00001f9 <detectCPUID>
c0018e01:	85 c0                	test   eax,eax
c0018e03:	0f 95 c0             	setne  al
c0018e06:	83 e0 01             	and    eax,0x1
c0018e09:	83 e0 01             	and    eax,0x1
c0018e0c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018e0f:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e14:	83 e0 fd             	and    eax,0xfffffffd
c0018e17:	88 c2                	mov    dl,al
c0018e19:	88 c8                	mov    al,cl
c0018e1b:	09 d0                	or     eax,edx
c0018e1d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e22:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e27:	83 e0 02             	and    eax,0x2
c0018e2a:	0f b6 c0             	movzx  eax,al
c0018e2d:	85 c0                	test   eax,eax
c0018e2f:	0f 84 84 02 00 00    	je     c00190b9 <HalDetectFeatures()+0x2f7>
c0018e35:	83 ec 0c             	sub    esp,0xc
c0018e38:	6a 20                	push   0x20
c0018e3a:	e8 cc fe ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0018e3f:	83 c4 10             	add    esp,0x10
c0018e42:	83 e0 01             	and    eax,0x1
c0018e45:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018e4c:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018e51:	83 e0 f7             	and    eax,0xfffffff7
c0018e54:	88 c2                	mov    dl,al
c0018e56:	88 c8                	mov    al,cl
c0018e58:	09 d0                	or     eax,edx
c0018e5a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018e5f:	83 ec 0c             	sub    esp,0xc
c0018e62:	68 00 00 00 04       	push   0x4000000
c0018e67:	e8 9f fe ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0018e6c:	83 c4 10             	add    esp,0x10
c0018e6f:	89 c1                	mov    ecx,eax
c0018e71:	83 e1 01             	and    ecx,0x1
c0018e74:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018e79:	83 e0 fe             	and    eax,0xfffffffe
c0018e7c:	88 c2                	mov    dl,al
c0018e7e:	88 c8                	mov    al,cl
c0018e80:	09 d0                	or     eax,edx
c0018e82:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018e87:	83 ec 0c             	sub    esp,0xc
c0018e8a:	68 80 00 00 00       	push   0x80
c0018e8f:	e8 77 fe ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0018e94:	83 c4 10             	add    esp,0x10
c0018e97:	89 c1                	mov    ecx,eax
c0018e99:	c1 e1 07             	shl    ecx,0x7
c0018e9c:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018ea1:	83 e0 7f             	and    eax,0x7f
c0018ea4:	88 c2                	mov    dl,al
c0018ea6:	88 c8                	mov    al,cl
c0018ea8:	09 d0                	or     eax,edx
c0018eaa:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018eaf:	83 ec 0c             	sub    esp,0xc
c0018eb2:	68 00 00 80 00       	push   0x800000
c0018eb7:	e8 4f fe ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	83 e0 01             	and    eax,0x1
c0018ec2:	89 c1                	mov    ecx,eax
c0018ec4:	c1 e1 05             	shl    ecx,0x5
c0018ec7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018ecc:	83 e0 df             	and    eax,0xffffffdf
c0018ecf:	88 c2                	mov    dl,al
c0018ed1:	88 c8                	mov    al,cl
c0018ed3:	09 d0                	or     eax,edx
c0018ed5:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018eda:	83 ec 0c             	sub    esp,0xc
c0018edd:	6a 01                	push   0x1
c0018edf:	e8 d4 43 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	0f b6 c0             	movzx  eax,al
c0018eea:	85 c0                	test   eax,eax
c0018eec:	75 17                	jne    c0018f05 <HalDetectFeatures()+0x143>
c0018eee:	83 ec 0c             	sub    esp,0xc
c0018ef1:	68 00 04 00 00       	push   0x400
c0018ef6:	e8 bd 43 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0018efb:	83 c4 10             	add    esp,0x10
c0018efe:	0f b6 c0             	movzx  eax,al
c0018f01:	85 c0                	test   eax,eax
c0018f03:	74 04                	je     c0018f09 <HalDetectFeatures()+0x147>
c0018f05:	b0 01                	mov    al,0x1
c0018f07:	eb 02                	jmp    c0018f0b <HalDetectFeatures()+0x149>
c0018f09:	b0 00                	mov    al,0x0
c0018f0b:	0f b6 c0             	movzx  eax,al
c0018f0e:	85 c0                	test   eax,eax
c0018f10:	74 0f                	je     c0018f21 <HalDetectFeatures()+0x15f>
c0018f12:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f17:	83 e0 fe             	and    eax,0xfffffffe
c0018f1a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f1f:	eb 28                	jmp    c0018f49 <HalDetectFeatures()+0x187>
c0018f21:	83 ec 0c             	sub    esp,0xc
c0018f24:	68 00 02 00 00       	push   0x200
c0018f29:	e8 dd fd ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0018f2e:	83 c4 10             	add    esp,0x10
c0018f31:	89 c1                	mov    ecx,eax
c0018f33:	83 e1 01             	and    ecx,0x1
c0018f36:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f3b:	83 e0 fe             	and    eax,0xfffffffe
c0018f3e:	88 c2                	mov    dl,al
c0018f40:	88 c8                	mov    al,cl
c0018f42:	09 d0                	or     eax,edx
c0018f44:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f49:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f4e:	83 e0 01             	and    eax,0x1
c0018f51:	0f b6 c0             	movzx  eax,al
c0018f54:	85 c0                	test   eax,eax
c0018f56:	74 1c                	je     c0018f74 <HalDetectFeatures()+0x1b2>
c0018f58:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f5d:	83 e0 08             	and    eax,0x8
c0018f60:	0f b6 c0             	movzx  eax,al
c0018f63:	85 c0                	test   eax,eax
c0018f65:	75 0d                	jne    c0018f74 <HalDetectFeatures()+0x1b2>
c0018f67:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0018f6c:	83 e0 fe             	and    eax,0xfffffffe
c0018f6f:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0018f74:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018f7c:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018f84:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018f8c:	85 c0                	test   eax,eax
c0018f8e:	0f 84 ab 00 00 00    	je     c001903f <HalDetectFeatures()+0x27d>
c0018f94:	83 ec 0c             	sub    esp,0xc
c0018f97:	6a 01                	push   0x1
c0018f99:	e8 9a fd ff ff       	call   c0018d38 <cpuidCheckECX(unsigned int)>
c0018f9e:	83 c4 10             	add    esp,0x10
c0018fa1:	83 e0 01             	and    eax,0x1
c0018fa4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018fa7:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018fac:	83 e0 fd             	and    eax,0xfffffffd
c0018faf:	88 c2                	mov    dl,al
c0018fb1:	88 c8                	mov    al,cl
c0018fb3:	09 d0                	or     eax,edx
c0018fb5:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018fba:	83 ec 0c             	sub    esp,0xc
c0018fbd:	68 00 02 00 00       	push   0x200
c0018fc2:	e8 71 fd ff ff       	call   c0018d38 <cpuidCheckECX(unsigned int)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	83 e0 01             	and    eax,0x1
c0018fcd:	89 c1                	mov    ecx,eax
c0018fcf:	c1 e1 04             	shl    ecx,0x4
c0018fd2:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0018fd7:	83 e0 ef             	and    eax,0xffffffef
c0018fda:	88 c2                	mov    dl,al
c0018fdc:	88 c8                	mov    al,cl
c0018fde:	09 d0                	or     eax,edx
c0018fe0:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0018fe5:	83 ec 0c             	sub    esp,0xc
c0018fe8:	68 00 00 08 00       	push   0x80000
c0018fed:	e8 46 fd ff ff       	call   c0018d38 <cpuidCheckECX(unsigned int)>
c0018ff2:	83 c4 10             	add    esp,0x10
c0018ff5:	83 e0 01             	and    eax,0x1
c0018ff8:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018fff:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019004:	83 e0 fb             	and    eax,0xfffffffb
c0019007:	88 c2                	mov    dl,al
c0019009:	88 c8                	mov    al,cl
c001900b:	09 d0                	or     eax,edx
c001900d:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0019012:	83 ec 0c             	sub    esp,0xc
c0019015:	68 00 00 10 00       	push   0x100000
c001901a:	e8 19 fd ff ff       	call   c0018d38 <cpuidCheckECX(unsigned int)>
c001901f:	83 c4 10             	add    esp,0x10
c0019022:	83 e0 01             	and    eax,0x1
c0019025:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001902c:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019031:	83 e0 f7             	and    eax,0xfffffff7
c0019034:	88 c2                	mov    dl,al
c0019036:	88 c8                	mov    al,cl
c0019038:	09 d0                	or     eax,edx
c001903a:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c001903f:	83 ec 0c             	sub    esp,0xc
c0019042:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019046:	50                   	push   eax
c0019047:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001904b:	50                   	push   eax
c001904c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0019050:	50                   	push   eax
c0019051:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019055:	50                   	push   eax
c0019056:	68 00 00 00 80       	push   0x80000000
c001905b:	e8 0d fc ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019060:	83 c4 20             	add    esp,0x20
c0019063:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019067:	3d 00 00 00 80       	cmp    eax,0x80000000
c001906c:	76 4b                	jbe    c00190b9 <HalDetectFeatures()+0x2f7>
c001906e:	83 ec 0c             	sub    esp,0xc
c0019071:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019075:	50                   	push   eax
c0019076:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001907a:	50                   	push   eax
c001907b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001907f:	50                   	push   eax
c0019080:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0019084:	50                   	push   eax
c0019085:	68 01 00 00 80       	push   0x80000001
c001908a:	e8 de fb ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001908f:	83 c4 20             	add    esp,0x20
c0019092:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019097:	83 e0 bf             	and    eax,0xffffffbf
c001909a:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001909f:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00190a4:	83 e0 fd             	and    eax,0xfffffffd
c00190a7:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190ac:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00190b1:	83 e0 fe             	and    eax,0xfffffffe
c00190b4:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00190b9:	83 ec 0c             	sub    esp,0xc
c00190bc:	68 00 04 00 00       	push   0x400
c00190c1:	e8 f2 41 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	0f b6 c0             	movzx  eax,al
c00190cc:	85 c0                	test   eax,eax
c00190ce:	74 0d                	je     c00190dd <HalDetectFeatures()+0x31b>
c00190d0:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00190d5:	83 e0 fb             	and    eax,0xfffffffb
c00190d8:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c00190dd:	c6 05 88 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb88,0x1
c00190e4:	83 ec 04             	sub    esp,0x4
c00190e7:	6a 0d                	push   0xd
c00190e9:	6a 00                	push   0x0
c00190eb:	68 70 cb 02 c0       	push   0xc002cb70
c00190f0:	e8 fb 73 fe ff       	call   c00004f0 <memset>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c00190fd:	83 e0 02             	and    eax,0x2
c0019100:	0f b6 c0             	movzx  eax,al
c0019103:	85 c0                	test   eax,eax
c0019105:	0f 84 16 08 00 00    	je     c0019921 <HalDetectFeatures()+0xb5f>
c001910b:	83 ec 0c             	sub    esp,0xc
c001910e:	6a 10                	push   0x10
c0019110:	e8 f6 fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	83 e0 01             	and    eax,0x1
c001911b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019122:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019127:	83 e0 f7             	and    eax,0xfffffff7
c001912a:	88 c2                	mov    dl,al
c001912c:	88 c8                	mov    al,cl
c001912e:	09 d0                	or     eax,edx
c0019130:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019135:	83 ec 0c             	sub    esp,0xc
c0019138:	6a 40                	push   0x40
c001913a:	e8 cc fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	83 e0 01             	and    eax,0x1
c0019145:	89 c1                	mov    ecx,eax
c0019147:	c1 e1 04             	shl    ecx,0x4
c001914a:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001914f:	83 e0 ef             	and    eax,0xffffffef
c0019152:	88 c2                	mov    dl,al
c0019154:	88 c8                	mov    al,cl
c0019156:	09 d0                	or     eax,edx
c0019158:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c001915d:	83 ec 0c             	sub    esp,0xc
c0019160:	6a 08                	push   0x8
c0019162:	e8 a4 fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0019167:	83 c4 10             	add    esp,0x10
c001916a:	83 e0 01             	and    eax,0x1
c001916d:	89 c1                	mov    ecx,eax
c001916f:	c1 e1 05             	shl    ecx,0x5
c0019172:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019177:	83 e0 df             	and    eax,0xffffffdf
c001917a:	88 c2                	mov    dl,al
c001917c:	88 c8                	mov    al,cl
c001917e:	09 d0                	or     eax,edx
c0019180:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019185:	83 ec 0c             	sub    esp,0xc
c0019188:	68 00 20 00 00       	push   0x2000
c001918d:	e8 79 fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c0019192:	83 c4 10             	add    esp,0x10
c0019195:	83 e0 01             	and    eax,0x1
c0019198:	89 c1                	mov    ecx,eax
c001919a:	c1 e1 06             	shl    ecx,0x6
c001919d:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00191a2:	83 e0 bf             	and    eax,0xffffffbf
c00191a5:	88 c2                	mov    dl,al
c00191a7:	88 c8                	mov    al,cl
c00191a9:	09 d0                	or     eax,edx
c00191ab:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00191b0:	83 ec 0c             	sub    esp,0xc
c00191b3:	68 00 00 01 00       	push   0x10000
c00191b8:	e8 4e fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c00191bd:	83 c4 10             	add    esp,0x10
c00191c0:	89 c1                	mov    ecx,eax
c00191c2:	c1 e1 07             	shl    ecx,0x7
c00191c5:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c00191ca:	83 e0 7f             	and    eax,0x7f
c00191cd:	88 c2                	mov    dl,al
c00191cf:	88 c8                	mov    al,cl
c00191d1:	09 d0                	or     eax,edx
c00191d3:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c00191d8:	83 ec 0c             	sub    esp,0xc
c00191db:	6a 01                	push   0x1
c00191dd:	e8 29 fb ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c00191e2:	83 c4 10             	add    esp,0x10
c00191e5:	83 e0 01             	and    eax,0x1
c00191e8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00191ef:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00191f4:	83 e0 f7             	and    eax,0xfffffff7
c00191f7:	88 c2                	mov    dl,al
c00191f9:	88 c8                	mov    al,cl
c00191fb:	09 d0                	or     eax,edx
c00191fd:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019202:	83 ec 0c             	sub    esp,0xc
c0019205:	68 00 08 00 00       	push   0x800
c001920a:	e8 fc fa ff ff       	call   c0018d0b <cpuidCheckEDX(unsigned int)>
c001920f:	83 c4 10             	add    esp,0x10
c0019212:	89 c1                	mov    ecx,eax
c0019214:	83 e1 01             	and    ecx,0x1
c0019217:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001921c:	83 e0 fe             	and    eax,0xfffffffe
c001921f:	88 c2                	mov    dl,al
c0019221:	88 c8                	mov    al,cl
c0019223:	09 d0                	or     eax,edx
c0019225:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001922a:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c001922f:	83 e0 40             	and    eax,0x40
c0019232:	0f b6 c0             	movzx  eax,al
c0019235:	85 c0                	test   eax,eax
c0019237:	74 0a                	je     c0019243 <HalDetectFeatures()+0x481>
c0019239:	c7 05 68 cb 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002cb68,0x100
c0019243:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019248:	83 e0 80             	and    eax,0xffffff80
c001924b:	0f b6 c0             	movzx  eax,al
c001924e:	85 c0                	test   eax,eax
c0019250:	74 0a                	je     c001925c <HalDetectFeatures()+0x49a>
c0019252:	c7 05 64 cb 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002cb64,0x80
c001925c:	83 ec 0c             	sub    esp,0xc
c001925f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019263:	50                   	push   eax
c0019264:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019268:	50                   	push   eax
c0019269:	8d 44 24 24          	lea    eax,[esp+0x24]
c001926d:	50                   	push   eax
c001926e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019272:	50                   	push   eax
c0019273:	6a 00                	push   0x0
c0019275:	e8 f3 f9 ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001927a:	83 c4 20             	add    esp,0x20
c001927d:	c7 44 24 48 70 cb 02 c0 	mov    DWORD PTR [esp+0x48],0xc002cb70
c0019285:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019289:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001928d:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0019295:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019299:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001929d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00192a1:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00192a5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00192a9:	89 c6                	mov    esi,eax
c00192ab:	89 d7                	mov    edi,edx
c00192ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192af:	89 c8                	mov    eax,ecx
c00192b1:	89 fa                	mov    edx,edi
c00192b3:	89 f3                	mov    ebx,esi
c00192b5:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00192b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00192bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00192c1:	b8 74 cb 02 c0       	mov    eax,0xc002cb74
c00192c6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00192ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192ce:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00192d2:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00192da:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00192de:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00192e2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00192e6:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00192ea:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00192ee:	89 c6                	mov    esi,eax
c00192f0:	89 d7                	mov    edi,edx
c00192f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192f4:	89 c8                	mov    eax,ecx
c00192f6:	89 fa                	mov    edx,edi
c00192f8:	89 f3                	mov    ebx,esi
c00192fa:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00192fe:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0019302:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019306:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c001930b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0019312:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019316:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001931a:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0019322:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019329:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c001932d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019331:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019338:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c001933c:	89 c6                	mov    esi,eax
c001933e:	89 d7                	mov    edi,edx
c0019340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019342:	89 c8                	mov    eax,ecx
c0019344:	89 fa                	mov    edx,edi
c0019346:	89 f3                	mov    ebx,esi
c0019348:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c001934c:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0019350:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0019354:	83 ec 08             	sub    esp,0x8
c0019357:	68 d1 53 02 c0       	push   0xc00253d1
c001935c:	68 70 cb 02 c0       	push   0xc002cb70
c0019361:	e8 ea 73 fe ff       	call   c0000750 <strcmp>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	85 c0                	test   eax,eax
c001936b:	74 19                	je     c0019386 <HalDetectFeatures()+0x5c4>
c001936d:	83 ec 08             	sub    esp,0x8
c0019370:	68 de 53 02 c0       	push   0xc00253de
c0019375:	68 70 cb 02 c0       	push   0xc002cb70
c001937a:	e8 d1 73 fe ff       	call   c0000750 <strcmp>
c001937f:	83 c4 10             	add    esp,0x10
c0019382:	85 c0                	test   eax,eax
c0019384:	75 04                	jne    c001938a <HalDetectFeatures()+0x5c8>
c0019386:	b0 01                	mov    al,0x1
c0019388:	eb 02                	jmp    c001938c <HalDetectFeatures()+0x5ca>
c001938a:	b0 00                	mov    al,0x0
c001938c:	0f b6 c0             	movzx  eax,al
c001938f:	85 c0                	test   eax,eax
c0019391:	74 0f                	je     c00193a2 <HalDetectFeatures()+0x5e0>
c0019393:	c7 05 84 cb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x2
c001939d:	e9 0d 03 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00193a2:	83 ec 08             	sub    esp,0x8
c00193a5:	68 eb 53 02 c0       	push   0xc00253eb
c00193aa:	68 70 cb 02 c0       	push   0xc002cb70
c00193af:	e8 9c 73 fe ff       	call   c0000750 <strcmp>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	85 c0                	test   eax,eax
c00193b9:	74 19                	je     c00193d4 <HalDetectFeatures()+0x612>
c00193bb:	83 ec 08             	sub    esp,0x8
c00193be:	68 f8 53 02 c0       	push   0xc00253f8
c00193c3:	68 70 cb 02 c0       	push   0xc002cb70
c00193c8:	e8 83 73 fe ff       	call   c0000750 <strcmp>
c00193cd:	83 c4 10             	add    esp,0x10
c00193d0:	85 c0                	test   eax,eax
c00193d2:	75 04                	jne    c00193d8 <HalDetectFeatures()+0x616>
c00193d4:	b0 01                	mov    al,0x1
c00193d6:	eb 02                	jmp    c00193da <HalDetectFeatures()+0x618>
c00193d8:	b0 00                	mov    al,0x0
c00193da:	0f b6 c0             	movzx  eax,al
c00193dd:	85 c0                	test   eax,eax
c00193df:	74 0f                	je     c00193f0 <HalDetectFeatures()+0x62e>
c00193e1:	c7 05 84 cb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x4
c00193eb:	e9 bf 02 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00193f0:	83 ec 08             	sub    esp,0x8
c00193f3:	68 05 54 02 c0       	push   0xc0025405
c00193f8:	68 70 cb 02 c0       	push   0xc002cb70
c00193fd:	e8 4e 73 fe ff       	call   c0000750 <strcmp>
c0019402:	83 c4 10             	add    esp,0x10
c0019405:	85 c0                	test   eax,eax
c0019407:	74 19                	je     c0019422 <HalDetectFeatures()+0x660>
c0019409:	83 ec 08             	sub    esp,0x8
c001940c:	68 12 54 02 c0       	push   0xc0025412
c0019411:	68 70 cb 02 c0       	push   0xc002cb70
c0019416:	e8 35 73 fe ff       	call   c0000750 <strcmp>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	85 c0                	test   eax,eax
c0019420:	75 04                	jne    c0019426 <HalDetectFeatures()+0x664>
c0019422:	b0 01                	mov    al,0x1
c0019424:	eb 02                	jmp    c0019428 <HalDetectFeatures()+0x666>
c0019426:	b0 00                	mov    al,0x0
c0019428:	0f b6 c0             	movzx  eax,al
c001942b:	85 c0                	test   eax,eax
c001942d:	74 0f                	je     c001943e <HalDetectFeatures()+0x67c>
c001942f:	c7 05 84 cb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x5
c0019439:	e9 71 02 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001943e:	83 ec 08             	sub    esp,0x8
c0019441:	68 1f 54 02 c0       	push   0xc002541f
c0019446:	68 70 cb 02 c0       	push   0xc002cb70
c001944b:	e8 00 73 fe ff       	call   c0000750 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	0f 94 c0             	sete   al
c0019458:	0f b6 c0             	movzx  eax,al
c001945b:	85 c0                	test   eax,eax
c001945d:	74 0f                	je     c001946e <HalDetectFeatures()+0x6ac>
c001945f:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019469:	e9 41 02 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001946e:	83 ec 08             	sub    esp,0x8
c0019471:	68 2c 54 02 c0       	push   0xc002542c
c0019476:	68 70 cb 02 c0       	push   0xc002cb70
c001947b:	e8 d0 72 fe ff       	call   c0000750 <strcmp>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	85 c0                	test   eax,eax
c0019485:	0f 94 c0             	sete   al
c0019488:	0f b6 c0             	movzx  eax,al
c001948b:	85 c0                	test   eax,eax
c001948d:	74 0f                	je     c001949e <HalDetectFeatures()+0x6dc>
c001948f:	c7 05 84 cb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x3
c0019499:	e9 11 02 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001949e:	83 ec 08             	sub    esp,0x8
c00194a1:	68 eb 53 02 c0       	push   0xc00253eb
c00194a6:	68 70 cb 02 c0       	push   0xc002cb70
c00194ab:	e8 a0 72 fe ff       	call   c0000750 <strcmp>
c00194b0:	83 c4 10             	add    esp,0x10
c00194b3:	85 c0                	test   eax,eax
c00194b5:	0f 94 c0             	sete   al
c00194b8:	0f b6 c0             	movzx  eax,al
c00194bb:	85 c0                	test   eax,eax
c00194bd:	74 0f                	je     c00194ce <HalDetectFeatures()+0x70c>
c00194bf:	c7 05 84 cb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x6
c00194c9:	e9 e1 01 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00194ce:	83 ec 08             	sub    esp,0x8
c00194d1:	68 39 54 02 c0       	push   0xc0025439
c00194d6:	68 70 cb 02 c0       	push   0xc002cb70
c00194db:	e8 70 72 fe ff       	call   c0000750 <strcmp>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	85 c0                	test   eax,eax
c00194e5:	0f 94 c0             	sete   al
c00194e8:	0f b6 c0             	movzx  eax,al
c00194eb:	85 c0                	test   eax,eax
c00194ed:	74 0f                	je     c00194fe <HalDetectFeatures()+0x73c>
c00194ef:	c7 05 84 cb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x7
c00194f9:	e9 b1 01 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00194fe:	83 ec 08             	sub    esp,0x8
c0019501:	68 46 54 02 c0       	push   0xc0025446
c0019506:	68 70 cb 02 c0       	push   0xc002cb70
c001950b:	e8 40 72 fe ff       	call   c0000750 <strcmp>
c0019510:	83 c4 10             	add    esp,0x10
c0019513:	85 c0                	test   eax,eax
c0019515:	0f 94 c0             	sete   al
c0019518:	0f b6 c0             	movzx  eax,al
c001951b:	85 c0                	test   eax,eax
c001951d:	74 0f                	je     c001952e <HalDetectFeatures()+0x76c>
c001951f:	c7 05 84 cb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x8
c0019529:	e9 81 01 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001952e:	83 ec 08             	sub    esp,0x8
c0019531:	68 53 54 02 c0       	push   0xc0025453
c0019536:	68 70 cb 02 c0       	push   0xc002cb70
c001953b:	e8 10 72 fe ff       	call   c0000750 <strcmp>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	85 c0                	test   eax,eax
c0019545:	0f 94 c0             	sete   al
c0019548:	0f b6 c0             	movzx  eax,al
c001954b:	85 c0                	test   eax,eax
c001954d:	74 0f                	je     c001955e <HalDetectFeatures()+0x79c>
c001954f:	c7 05 84 cb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x9
c0019559:	e9 51 01 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001955e:	83 ec 08             	sub    esp,0x8
c0019561:	68 60 54 02 c0       	push   0xc0025460
c0019566:	68 70 cb 02 c0       	push   0xc002cb70
c001956b:	e8 e0 71 fe ff       	call   c0000750 <strcmp>
c0019570:	83 c4 10             	add    esp,0x10
c0019573:	85 c0                	test   eax,eax
c0019575:	0f 94 c0             	sete   al
c0019578:	0f b6 c0             	movzx  eax,al
c001957b:	85 c0                	test   eax,eax
c001957d:	74 0f                	je     c001958e <HalDetectFeatures()+0x7cc>
c001957f:	c7 05 84 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xa
c0019589:	e9 21 01 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001958e:	83 ec 08             	sub    esp,0x8
c0019591:	68 6d 54 02 c0       	push   0xc002546d
c0019596:	68 70 cb 02 c0       	push   0xc002cb70
c001959b:	e8 b0 71 fe ff       	call   c0000750 <strcmp>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	85 c0                	test   eax,eax
c00195a5:	0f 94 c0             	sete   al
c00195a8:	0f b6 c0             	movzx  eax,al
c00195ab:	85 c0                	test   eax,eax
c00195ad:	74 0f                	je     c00195be <HalDetectFeatures()+0x7fc>
c00195af:	c7 05 84 cb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xb
c00195b9:	e9 f1 00 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00195be:	83 ec 08             	sub    esp,0x8
c00195c1:	68 7a 54 02 c0       	push   0xc002547a
c00195c6:	68 70 cb 02 c0       	push   0xc002cb70
c00195cb:	e8 80 71 fe ff       	call   c0000750 <strcmp>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	85 c0                	test   eax,eax
c00195d5:	0f 94 c0             	sete   al
c00195d8:	0f b6 c0             	movzx  eax,al
c00195db:	85 c0                	test   eax,eax
c00195dd:	74 0f                	je     c00195ee <HalDetectFeatures()+0x82c>
c00195df:	c7 05 84 cb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xc
c00195e9:	e9 c1 00 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00195ee:	83 ec 08             	sub    esp,0x8
c00195f1:	68 87 54 02 c0       	push   0xc0025487
c00195f6:	68 70 cb 02 c0       	push   0xc002cb70
c00195fb:	e8 50 71 fe ff       	call   c0000750 <strcmp>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	85 c0                	test   eax,eax
c0019605:	0f 94 c0             	sete   al
c0019608:	0f b6 c0             	movzx  eax,al
c001960b:	85 c0                	test   eax,eax
c001960d:	74 0f                	je     c001961e <HalDetectFeatures()+0x85c>
c001960f:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019619:	e9 91 00 00 00       	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001961e:	83 ec 08             	sub    esp,0x8
c0019621:	68 94 54 02 c0       	push   0xc0025494
c0019626:	68 70 cb 02 c0       	push   0xc002cb70
c001962b:	e8 20 71 fe ff       	call   c0000750 <strcmp>
c0019630:	83 c4 10             	add    esp,0x10
c0019633:	85 c0                	test   eax,eax
c0019635:	0f 94 c0             	sete   al
c0019638:	0f b6 c0             	movzx  eax,al
c001963b:	85 c0                	test   eax,eax
c001963d:	74 0c                	je     c001964b <HalDetectFeatures()+0x889>
c001963f:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019649:	eb 64                	jmp    c00196af <HalDetectFeatures()+0x8ed>
c001964b:	83 ec 08             	sub    esp,0x8
c001964e:	68 a1 54 02 c0       	push   0xc00254a1
c0019653:	68 70 cb 02 c0       	push   0xc002cb70
c0019658:	e8 f3 70 fe ff       	call   c0000750 <strcmp>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	85 c0                	test   eax,eax
c0019662:	0f 94 c0             	sete   al
c0019665:	0f b6 c0             	movzx  eax,al
c0019668:	85 c0                	test   eax,eax
c001966a:	74 0c                	je     c0019678 <HalDetectFeatures()+0x8b6>
c001966c:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c0019676:	eb 37                	jmp    c00196af <HalDetectFeatures()+0x8ed>
c0019678:	83 ec 08             	sub    esp,0x8
c001967b:	68 ae 54 02 c0       	push   0xc00254ae
c0019680:	68 70 cb 02 c0       	push   0xc002cb70
c0019685:	e8 c6 70 fe ff       	call   c0000750 <strcmp>
c001968a:	83 c4 10             	add    esp,0x10
c001968d:	85 c0                	test   eax,eax
c001968f:	0f 94 c0             	sete   al
c0019692:	0f b6 c0             	movzx  eax,al
c0019695:	85 c0                	test   eax,eax
c0019697:	74 0c                	je     c00196a5 <HalDetectFeatures()+0x8e3>
c0019699:	c7 05 84 cb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0xd
c00196a3:	eb 0a                	jmp    c00196af <HalDetectFeatures()+0x8ed>
c00196a5:	c7 05 84 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x0
c00196af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196b3:	83 f8 06             	cmp    eax,0x6
c00196b6:	0f 86 cc 00 00 00    	jbe    c0019788 <HalDetectFeatures()+0x9c6>
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	68 80 00 00 00       	push   0x80
c00196c4:	e8 9d f6 ff ff       	call   c0018d66 <cpuidCheckExtendedEBX(unsigned int)>
c00196c9:	83 c4 10             	add    esp,0x10
c00196cc:	89 c1                	mov    ecx,eax
c00196ce:	83 e1 01             	and    ecx,0x1
c00196d1:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00196d6:	83 e0 fe             	and    eax,0xfffffffe
c00196d9:	88 c2                	mov    dl,al
c00196db:	88 c8                	mov    al,cl
c00196dd:	09 d0                	or     eax,edx
c00196df:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00196e4:	83 ec 0c             	sub    esp,0xc
c00196e7:	68 00 00 10 00       	push   0x100000
c00196ec:	e8 75 f6 ff ff       	call   c0018d66 <cpuidCheckExtendedEBX(unsigned int)>
c00196f1:	83 c4 10             	add    esp,0x10
c00196f4:	83 e0 01             	and    eax,0x1
c00196f7:	89 c1                	mov    ecx,eax
c00196f9:	c1 e1 06             	shl    ecx,0x6
c00196fc:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019701:	83 e0 bf             	and    eax,0xffffffbf
c0019704:	88 c2                	mov    dl,al
c0019706:	88 c8                	mov    al,cl
c0019708:	09 d0                	or     eax,edx
c001970a:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001970f:	83 ec 0c             	sub    esp,0xc
c0019712:	68 00 00 04 00       	push   0x40000
c0019717:	e8 4a f6 ff ff       	call   c0018d66 <cpuidCheckExtendedEBX(unsigned int)>
c001971c:	83 c4 10             	add    esp,0x10
c001971f:	83 e0 01             	and    eax,0x1
c0019722:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019725:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001972a:	83 e0 fd             	and    eax,0xfffffffd
c001972d:	88 c2                	mov    dl,al
c001972f:	88 c8                	mov    al,cl
c0019731:	09 d0                	or     eax,edx
c0019733:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	6a 04                	push   0x4
c001973d:	e8 52 f6 ff ff       	call   c0018d94 <cpuidCheckExtendedECX(unsigned int)>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	83 e0 01             	and    eax,0x1
c0019748:	89 c1                	mov    ecx,eax
c001974a:	c1 e1 05             	shl    ecx,0x5
c001974d:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019752:	83 e0 df             	and    eax,0xffffffdf
c0019755:	88 c2                	mov    dl,al
c0019757:	88 c8                	mov    al,cl
c0019759:	09 d0                	or     eax,edx
c001975b:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	6a 20                	push   0x20
c0019765:	e8 2a f6 ff ff       	call   c0018d94 <cpuidCheckExtendedECX(unsigned int)>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	83 e0 01             	and    eax,0x1
c0019770:	89 c1                	mov    ecx,eax
c0019772:	c1 e1 04             	shl    ecx,0x4
c0019775:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001977a:	83 e0 ef             	and    eax,0xffffffef
c001977d:	88 c2                	mov    dl,al
c001977f:	88 c8                	mov    al,cl
c0019781:	09 d0                	or     eax,edx
c0019783:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019788:	83 ec 0c             	sub    esp,0xc
c001978b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001978f:	50                   	push   eax
c0019790:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019794:	50                   	push   eax
c0019795:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019799:	50                   	push   eax
c001979a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001979e:	50                   	push   eax
c001979f:	6a 01                	push   0x1
c00197a1:	e8 c7 f4 ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197a6:	83 c4 20             	add    esp,0x20
c00197a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197ad:	83 e0 0f             	and    eax,0xf
c00197b0:	a2 80 cb 02 c0       	mov    ds:0xc002cb80,al
c00197b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197b9:	c1 e8 04             	shr    eax,0x4
c00197bc:	83 e0 0f             	and    eax,0xf
c00197bf:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c00197c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197c8:	c1 e8 08             	shr    eax,0x8
c00197cb:	83 e0 0f             	and    eax,0xf
c00197ce:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c00197d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197d7:	c1 e8 0c             	shr    eax,0xc
c00197da:	83 e0 03             	and    eax,0x3
c00197dd:	a2 7f cb 02 c0       	mov    ds:0xc002cb7f,al
c00197e2:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c00197e7:	0f b6 c0             	movzx  eax,al
c00197ea:	83 f8 06             	cmp    eax,0x6
c00197ed:	74 0d                	je     c00197fc <HalDetectFeatures()+0xa3a>
c00197ef:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c00197f4:	0f b6 c0             	movzx  eax,al
c00197f7:	83 f8 0f             	cmp    eax,0xf
c00197fa:	75 18                	jne    c0019814 <HalDetectFeatures()+0xa52>
c00197fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019800:	c1 e8 10             	shr    eax,0x10
c0019803:	c1 e0 04             	shl    eax,0x4
c0019806:	88 c2                	mov    dl,al
c0019808:	a0 7e cb 02 c0       	mov    al,ds:0xc002cb7e
c001980d:	09 d0                	or     eax,edx
c001980f:	a2 7e cb 02 c0       	mov    ds:0xc002cb7e,al
c0019814:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c0019819:	0f b6 c0             	movzx  eax,al
c001981c:	83 f8 0f             	cmp    eax,0xf
c001981f:	75 15                	jne    c0019836 <HalDetectFeatures()+0xa74>
c0019821:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019825:	c1 e8 14             	shr    eax,0x14
c0019828:	88 c2                	mov    dl,al
c001982a:	a0 7d cb 02 c0       	mov    al,ds:0xc002cb7d
c001982f:	01 d0                	add    eax,edx
c0019831:	a2 7d cb 02 c0       	mov    ds:0xc002cb7d,al
c0019836:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c001983e:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019846:	85 c0                	test   eax,eax
c0019848:	74 2d                	je     c0019877 <HalDetectFeatures()+0xab5>
c001984a:	83 ec 0c             	sub    esp,0xc
c001984d:	68 00 00 00 40       	push   0x40000000
c0019852:	e8 e1 f4 ff ff       	call   c0018d38 <cpuidCheckECX(unsigned int)>
c0019857:	83 c4 10             	add    esp,0x10
c001985a:	83 e0 01             	and    eax,0x1
c001985d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019864:	a0 8e cb 02 c0       	mov    al,ds:0xc002cb8e
c0019869:	83 e0 fb             	and    eax,0xfffffffb
c001986c:	88 c2                	mov    dl,al
c001986e:	88 c8                	mov    al,cl
c0019870:	09 d0                	or     eax,edx
c0019872:	a2 8e cb 02 c0       	mov    ds:0xc002cb8e,al
c0019877:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001987c:	83 c8 04             	or     eax,0x4
c001987f:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019884:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019889:	83 c8 08             	or     eax,0x8
c001988c:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019891:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019896:	83 c8 10             	or     eax,0x10
c0019899:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001989e:	83 ec 0c             	sub    esp,0xc
c00198a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198a5:	50                   	push   eax
c00198a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198aa:	50                   	push   eax
c00198ab:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198af:	50                   	push   eax
c00198b0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198b4:	50                   	push   eax
c00198b5:	68 00 00 00 80       	push   0x80000000
c00198ba:	e8 ae f3 ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198bf:	83 c4 20             	add    esp,0x20
c00198c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00198c6:	3d 00 00 00 80       	cmp    eax,0x80000000
c00198cb:	0f 86 96 01 00 00    	jbe    c0019a67 <HalDetectFeatures()+0xca5>
c00198d1:	83 ec 0c             	sub    esp,0xc
c00198d4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198d8:	50                   	push   eax
c00198d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00198dd:	50                   	push   eax
c00198de:	8d 44 24 24          	lea    eax,[esp+0x24]
c00198e2:	50                   	push   eax
c00198e3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00198e7:	50                   	push   eax
c00198e8:	68 01 00 00 80       	push   0x80000001
c00198ed:	e8 7b f3 ff ff       	call   c0018c6d <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198f2:	83 c4 20             	add    esp,0x20
c00198f5:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00198fa:	83 e0 7f             	and    eax,0x7f
c00198fd:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019902:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019907:	83 e0 fb             	and    eax,0xfffffffb
c001990a:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001990f:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019914:	83 e0 fd             	and    eax,0xfffffffd
c0019917:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c001991c:	e9 46 01 00 00       	jmp    c0019a67 <HalDetectFeatures()+0xca5>
c0019921:	83 ec 08             	sub    esp,0x8
c0019924:	68 1f 54 02 c0       	push   0xc002541f
c0019929:	68 70 cb 02 c0       	push   0xc002cb70
c001992e:	e8 0d 6d fe ff       	call   c0000640 <strcpy>
c0019933:	83 c4 10             	add    esp,0x10
c0019936:	c7 05 84 cb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cb84,0x1
c0019940:	e8 7e 68 fe ff       	call   c00001c3 <is486>
c0019945:	85 c0                	test   eax,eax
c0019947:	0f 95 c0             	setne  al
c001994a:	0f b6 c0             	movzx  eax,al
c001994d:	85 c0                	test   eax,eax
c001994f:	0f 84 8d 00 00 00    	je     c00199e2 <HalDetectFeatures()+0xc20>
c0019955:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c001995a:	83 c8 04             	or     eax,0x4
c001995d:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019962:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019967:	83 c8 08             	or     eax,0x8
c001996a:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001996f:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019974:	83 c8 10             	or     eax,0x10
c0019977:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c001997c:	0f 20 c0             	mov    eax,cr0
c001997f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019983:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019987:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001998e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019995:	83 e0 04             	and    eax,0x4
c0019998:	74 1e                	je     c00199b8 <HalDetectFeatures()+0xbf6>
c001999a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00199a1:	83 e0 10             	and    eax,0x10
c00199a4:	75 12                	jne    c00199b8 <HalDetectFeatures()+0xbf6>
c00199a6:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00199ab:	83 e0 f7             	and    eax,0xfffffff7
c00199ae:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00199b3:	e9 af 00 00 00       	jmp    c0019a67 <HalDetectFeatures()+0xca5>
c00199b8:	e8 e1 67 fe ff       	call   c000019e <hasLegacyFPU>
c00199bd:	83 e0 01             	and    eax,0x1
c00199c0:	83 e0 01             	and    eax,0x1
c00199c3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00199ca:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c00199cf:	83 e0 f7             	and    eax,0xfffffff7
c00199d2:	88 c2                	mov    dl,al
c00199d4:	88 c8                	mov    al,cl
c00199d6:	09 d0                	or     eax,edx
c00199d8:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c00199dd:	e9 85 00 00 00       	jmp    c0019a67 <HalDetectFeatures()+0xca5>
c00199e2:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00199e7:	83 e0 fb             	and    eax,0xfffffffb
c00199ea:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00199ef:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c00199f4:	83 e0 f7             	and    eax,0xfffffff7
c00199f7:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c00199fc:	a0 8f cb 02 c0       	mov    al,ds:0xc002cb8f
c0019a01:	83 e0 ef             	and    eax,0xffffffef
c0019a04:	a2 8f cb 02 c0       	mov    ds:0xc002cb8f,al
c0019a09:	0f 20 c0             	mov    eax,cr0
c0019a0c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019a10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a14:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019a1b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019a22:	83 e0 04             	and    eax,0x4
c0019a25:	74 1b                	je     c0019a42 <HalDetectFeatures()+0xc80>
c0019a27:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019a2e:	83 e0 10             	and    eax,0x10
c0019a31:	75 0f                	jne    c0019a42 <HalDetectFeatures()+0xc80>
c0019a33:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a38:	83 e0 f7             	and    eax,0xfffffff7
c0019a3b:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a40:	eb 25                	jmp    c0019a67 <HalDetectFeatures()+0xca5>
c0019a42:	e8 57 67 fe ff       	call   c000019e <hasLegacyFPU>
c0019a47:	83 e0 01             	and    eax,0x1
c0019a4a:	83 e0 01             	and    eax,0x1
c0019a4d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a54:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a59:	83 e0 f7             	and    eax,0xfffffff7
c0019a5c:	88 c2                	mov    dl,al
c0019a5e:	88 c8                	mov    al,cl
c0019a60:	09 d0                	or     eax,edx
c0019a62:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a67:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a6c:	83 e0 08             	and    eax,0x8
c0019a6f:	0f b6 c0             	movzx  eax,al
c0019a72:	85 c0                	test   eax,eax
c0019a74:	75 25                	jne    c0019a9b <HalDetectFeatures()+0xcd9>
c0019a76:	e8 23 67 fe ff       	call   c000019e <hasLegacyFPU>
c0019a7b:	83 e0 01             	and    eax,0x1
c0019a7e:	83 e0 01             	and    eax,0x1
c0019a81:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019a88:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019a8d:	83 e0 f7             	and    eax,0xfffffff7
c0019a90:	88 c2                	mov    dl,al
c0019a92:	88 c8                	mov    al,cl
c0019a94:	09 d0                	or     eax,edx
c0019a96:	a2 90 cb 02 c0       	mov    ds:0xc002cb90,al
c0019a9b:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c0019aa0:	83 e0 08             	and    eax,0x8
c0019aa3:	0f b6 c0             	movzx  eax,al
c0019aa6:	85 c0                	test   eax,eax
c0019aa8:	74 0d                	je     c0019ab7 <HalDetectFeatures()+0xcf5>
c0019aaa:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019aaf:	83 c8 10             	or     eax,0x10
c0019ab2:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019ab7:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019abc:	83 e0 10             	and    eax,0x10
c0019abf:	0f b6 c0             	movzx  eax,al
c0019ac2:	85 c0                	test   eax,eax
c0019ac4:	75 23                	jne    c0019ae9 <HalDetectFeatures()+0xd27>
c0019ac6:	e8 fb 7b 00 00       	call   c00216c6 <x87Detect>
c0019acb:	83 e0 01             	and    eax,0x1
c0019ace:	83 e0 01             	and    eax,0x1
c0019ad1:	89 c1                	mov    ecx,eax
c0019ad3:	c1 e1 04             	shl    ecx,0x4
c0019ad6:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019adb:	83 e0 ef             	and    eax,0xffffffef
c0019ade:	88 c2                	mov    dl,al
c0019ae0:	88 c8                	mov    al,cl
c0019ae2:	09 d0                	or     eax,edx
c0019ae4:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019ae9:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019aee:	83 e0 01             	and    eax,0x1
c0019af1:	0f b6 c0             	movzx  eax,al
c0019af4:	85 c0                	test   eax,eax
c0019af6:	75 2d                	jne    c0019b25 <HalDetectFeatures()+0xd63>
c0019af8:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019afd:	83 e0 02             	and    eax,0x2
c0019b00:	0f b6 c0             	movzx  eax,al
c0019b03:	85 c0                	test   eax,eax
c0019b05:	75 1e                	jne    c0019b25 <HalDetectFeatures()+0xd63>
c0019b07:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b0c:	83 e0 04             	and    eax,0x4
c0019b0f:	0f b6 c0             	movzx  eax,al
c0019b12:	85 c0                	test   eax,eax
c0019b14:	75 0f                	jne    c0019b25 <HalDetectFeatures()+0xd63>
c0019b16:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b1b:	83 e0 08             	and    eax,0x8
c0019b1e:	0f b6 c0             	movzx  eax,al
c0019b21:	85 c0                	test   eax,eax
c0019b23:	74 0d                	je     c0019b32 <HalDetectFeatures()+0xd70>
c0019b25:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b2a:	83 c8 80             	or     eax,0xffffff80
c0019b2d:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019b32:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b37:	83 e0 10             	and    eax,0x10
c0019b3a:	0f b6 c0             	movzx  eax,al
c0019b3d:	85 c0                	test   eax,eax
c0019b3f:	74 2f                	je     c0019b70 <HalDetectFeatures()+0xdae>
c0019b41:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b46:	83 e0 80             	and    eax,0xffffff80
c0019b49:	0f b6 c0             	movzx  eax,al
c0019b4c:	85 c0                	test   eax,eax
c0019b4e:	75 20                	jne    c0019b70 <HalDetectFeatures()+0xdae>
c0019b50:	e8 2b 7b 00 00       	call   c0021680 <sseDetect>
c0019b55:	83 e0 01             	and    eax,0x1
c0019b58:	89 c1                	mov    ecx,eax
c0019b5a:	c1 e1 07             	shl    ecx,0x7
c0019b5d:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b62:	83 e0 7f             	and    eax,0x7f
c0019b65:	88 c2                	mov    dl,al
c0019b67:	88 c8                	mov    al,cl
c0019b69:	09 d0                	or     eax,edx
c0019b6b:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019b70:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019b75:	83 e0 80             	and    eax,0xffffff80
c0019b78:	0f b6 c0             	movzx  eax,al
c0019b7b:	85 c0                	test   eax,eax
c0019b7d:	74 1c                	je     c0019b9b <HalDetectFeatures()+0xdd9>
c0019b7f:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b84:	83 e0 20             	and    eax,0x20
c0019b87:	0f b6 c0             	movzx  eax,al
c0019b8a:	85 c0                	test   eax,eax
c0019b8c:	75 0d                	jne    c0019b9b <HalDetectFeatures()+0xdd9>
c0019b8e:	a0 8d cb 02 c0       	mov    al,ds:0xc002cb8d
c0019b93:	83 e0 df             	and    eax,0xffffffdf
c0019b96:	a2 8d cb 02 c0       	mov    ds:0xc002cb8d,al
c0019b9b:	c6 05 88 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb88,0x0
c0019ba2:	90                   	nop
c0019ba3:	81 c4 90 00 00 00    	add    esp,0x90
c0019ba9:	5b                   	pop    ebx
c0019baa:	5e                   	pop    esi
c0019bab:	5f                   	pop    edi
c0019bac:	c3                   	ret    

c0019bad <HalEnableNMI()>:
c0019bad:	c6 05 6c cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb6c,0x1
c0019bb4:	6a 10                	push   0x10
c0019bb6:	e8 02 ef ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c0019bbb:	83 c4 04             	add    esp,0x4
c0019bbe:	90                   	nop
c0019bbf:	c3                   	ret    

c0019bc0 <HalDisableNMI()>:
c0019bc0:	c6 05 6c cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb6c,0x0
c0019bc7:	6a 10                	push   0x10
c0019bc9:	e8 ef ee ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c0019bce:	83 c4 04             	add    esp,0x4
c0019bd1:	90                   	nop
c0019bd2:	c3                   	ret    

c0019bd3 <HalGetNMIState()>:
c0019bd3:	a0 6c cb 02 c0       	mov    al,ds:0xc002cb6c
c0019bd8:	c3                   	ret    

c0019bd9 <x86rdmsr(unsigned int)>:
c0019bd9:	83 ec 1c             	sub    esp,0x1c
c0019bdc:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019be1:	83 e0 08             	and    eax,0x8
c0019be4:	0f b6 c0             	movzx  eax,al
c0019be7:	85 c0                	test   eax,eax
c0019be9:	75 10                	jne    c0019bfb <x86rdmsr(unsigned int)+0x22>
c0019beb:	83 ec 0c             	sub    esp,0xc
c0019bee:	68 ba 54 02 c0       	push   0xc00254ba
c0019bf3:	e8 fc 60 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0019bf8:	83 c4 10             	add    esp,0x10
c0019bfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bff:	89 c1                	mov    ecx,eax
c0019c01:	0f 32                	rdmsr  
c0019c03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c13:	83 c4 1c             	add    esp,0x1c
c0019c16:	c3                   	ret    

c0019c17 <x86wrmsr(unsigned int, unsigned long long)>:
c0019c17:	83 ec 1c             	sub    esp,0x1c
c0019c1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019c1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019c22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c2a:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019c2f:	83 e0 08             	and    eax,0x8
c0019c32:	0f b6 c0             	movzx  eax,al
c0019c35:	85 c0                	test   eax,eax
c0019c37:	75 10                	jne    c0019c49 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019c39:	83 ec 0c             	sub    esp,0xc
c0019c3c:	68 c0 54 02 c0       	push   0xc00254c0
c0019c41:	e8 ae 60 ff ff       	call   c000fcf4 <KePanic(char const*)>
c0019c46:	83 c4 10             	add    esp,0x10
c0019c49:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c55:	0f 30                	wrmsr  
c0019c57:	90                   	nop
c0019c58:	83 c4 1c             	add    esp,0x1c
c0019c5b:	c3                   	ret    

c0019c5c <HalHandleGeneralProtectionFault(void*, void*)>:
c0019c5c:	83 ec 0c             	sub    esp,0xc
c0019c5f:	83 ec 0c             	sub    esp,0xc
c0019c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c66:	e8 02 e2 ff ff       	call   c0017e6d <Vm::faultHandler(regs*)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	83 c4 0c             	add    esp,0xc
c0019c71:	c3                   	ret    

c0019c72 <HalFindRSDP()>:
c0019c72:	83 ec 1c             	sub    esp,0x1c
c0019c75:	a1 7c c1 02 c0       	mov    eax,ds:0xc002c17c
c0019c7a:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019c7f:	7e 17                	jle    c0019c98 <HalFindRSDP()+0x26>
c0019c81:	83 ec 0c             	sub    esp,0xc
c0019c84:	68 00 04 00 00       	push   0x400
c0019c89:	e8 2a 36 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019c8e:	83 c4 10             	add    esp,0x10
c0019c91:	0f b6 c0             	movzx  eax,al
c0019c94:	85 c0                	test   eax,eax
c0019c96:	74 04                	je     c0019c9c <HalFindRSDP()+0x2a>
c0019c98:	b0 01                	mov    al,0x1
c0019c9a:	eb 02                	jmp    c0019c9e <HalFindRSDP()+0x2c>
c0019c9c:	b0 00                	mov    al,0x0
c0019c9e:	0f b6 c0             	movzx  eax,al
c0019ca1:	85 c0                	test   eax,eax
c0019ca3:	74 1d                	je     c0019cc2 <HalFindRSDP()+0x50>
c0019ca5:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019caa:	83 e0 fb             	and    eax,0xfffffffb
c0019cad:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019cb2:	83 ec 0c             	sub    esp,0xc
c0019cb5:	68 c6 54 02 c0       	push   0xc00254c6
c0019cba:	e8 bd d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019cbf:	83 c4 10             	add    esp,0x10
c0019cc2:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019cc7:	83 e0 04             	and    eax,0x4
c0019cca:	0f b6 c0             	movzx  eax,al
c0019ccd:	85 c0                	test   eax,eax
c0019ccf:	75 17                	jne    c0019ce8 <HalFindRSDP()+0x76>
c0019cd1:	83 ec 0c             	sub    esp,0xc
c0019cd4:	68 d5 54 02 c0       	push   0xc00254d5
c0019cd9:	e8 9e d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019cde:	83 c4 10             	add    esp,0x10
c0019ce1:	b8 00 00 00 00       	mov    eax,0x0
c0019ce6:	eb 63                	jmp    c0019d4b <HalFindRSDP()+0xd9>
c0019ce8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019cf0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019cf8:	77 2f                	ja     c0019d29 <HalFindRSDP()+0xb7>
c0019cfa:	83 ec 04             	sub    esp,0x4
c0019cfd:	6a 08                	push   0x8
c0019cff:	68 df 54 02 c0       	push   0xc00254df
c0019d04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d08:	e8 73 66 fe ff       	call   c0000380 <memcmp>
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	85 c0                	test   eax,eax
c0019d12:	0f 94 c0             	sete   al
c0019d15:	0f b6 c0             	movzx  eax,al
c0019d18:	85 c0                	test   eax,eax
c0019d1a:	74 06                	je     c0019d22 <HalFindRSDP()+0xb0>
c0019d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d20:	eb 29                	jmp    c0019d4b <HalFindRSDP()+0xd9>
c0019d22:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019d27:	eb c7                	jmp    c0019cf0 <HalFindRSDP()+0x7e>
c0019d29:	83 ec 0c             	sub    esp,0xc
c0019d2c:	68 e8 54 02 c0       	push   0xc00254e8
c0019d31:	e8 46 d2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019d36:	83 c4 10             	add    esp,0x10
c0019d39:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c0019d3e:	83 e0 fb             	and    eax,0xfffffffb
c0019d41:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c0019d46:	b8 00 00 00 00       	mov    eax,0x0
c0019d4b:	83 c4 1c             	add    esp,0x1c
c0019d4e:	c3                   	ret    

c0019d4f <HalHandlePageFault(void*, void*)>:
c0019d4f:	83 ec 1c             	sub    esp,0x1c
c0019d52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d59:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d5c:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019d62:	0f 20 d2             	mov    edx,cr2
c0019d65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d6d:	83 ec 08             	sub    esp,0x8
c0019d70:	52                   	push   edx
c0019d71:	50                   	push   eax
c0019d72:	e8 8d a3 ff ff       	call   c0014104 <VAS::tryLoadBackOffDisk(unsigned long)>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	83 c4 1c             	add    esp,0x1c
c0019d7d:	c3                   	ret    

c0019d7e <HalHandleOpcodeFault(void*, void*)>:
c0019d7e:	83 ec 1c             	sub    esp,0x1c
c0019d81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d89:	a0 88 cb 02 c0       	mov    al,ds:0xc002cb88
c0019d8e:	0f b6 c0             	movzx  eax,al
c0019d91:	85 c0                	test   eax,eax
c0019d93:	74 25                	je     c0019dba <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019d95:	83 ec 0c             	sub    esp,0xc
c0019d98:	68 e0 56 02 c0       	push   0xc00256e0
c0019d9d:	e8 da d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019da2:	83 c4 10             	add    esp,0x10
c0019da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019da9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019dac:	8d 50 19             	lea    edx,[eax+0x19]
c0019daf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019db3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019db6:	b0 01                	mov    al,0x1
c0019db8:	eb 02                	jmp    c0019dbc <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019dba:	b0 00                	mov    al,0x0
c0019dbc:	83 c4 1c             	add    esp,0x1c
c0019dbf:	c3                   	ret    

c0019dc0 <HalDisplayDebugInfo(void*)>:
c0019dc0:	83 ec 2c             	sub    esp,0x2c
c0019dc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019dc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dcb:	0f 20 c0             	mov    eax,cr0
c0019dce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019dd2:	0f 20 d0             	mov    eax,cr2
c0019dd5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dd9:	0f 20 d8             	mov    eax,cr3
c0019ddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019de0:	0f 20 e0             	mov    eax,cr4
c0019de3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019deb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019dee:	83 ec 08             	sub    esp,0x8
c0019df1:	50                   	push   eax
c0019df2:	68 02 55 02 c0       	push   0xc0025502
c0019df7:	e8 80 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e03:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019e06:	83 ec 08             	sub    esp,0x8
c0019e09:	50                   	push   eax
c0019e0a:	68 f3 54 02 c0       	push   0xc00254f3
c0019e0f:	e8 68 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e1b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019e1e:	83 ec 08             	sub    esp,0x8
c0019e21:	50                   	push   eax
c0019e22:	68 fe 54 02 c0       	push   0xc00254fe
c0019e27:	e8 50 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e2c:	83 c4 10             	add    esp,0x10
c0019e2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e33:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019e36:	83 ec 08             	sub    esp,0x8
c0019e39:	50                   	push   eax
c0019e3a:	68 0d 55 02 c0       	push   0xc002550d
c0019e3f:	e8 38 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e44:	83 c4 10             	add    esp,0x10
c0019e47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e4b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019e4e:	83 ec 08             	sub    esp,0x8
c0019e51:	50                   	push   eax
c0019e52:	68 18 55 02 c0       	push   0xc0025518
c0019e57:	e8 20 d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e5c:	83 c4 10             	add    esp,0x10
c0019e5f:	83 ec 08             	sub    esp,0x8
c0019e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e66:	68 23 55 02 c0       	push   0xc0025523
c0019e6b:	e8 0c d1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e70:	83 c4 10             	add    esp,0x10
c0019e73:	83 ec 08             	sub    esp,0x8
c0019e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e7a:	68 2e 55 02 c0       	push   0xc002552e
c0019e7f:	e8 f8 d0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e8e:	c1 e0 05             	shl    eax,0x5
c0019e91:	8d 90 c0 69 02 c0    	lea    edx,[eax-0x3ffd9640]
c0019e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e9b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019e9e:	83 ec 04             	sub    esp,0x4
c0019ea1:	52                   	push   edx
c0019ea2:	50                   	push   eax
c0019ea3:	68 39 55 02 c0       	push   0xc0025539
c0019ea8:	e8 cf d0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0019ead:	83 c4 10             	add    esp,0x10
c0019eb0:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019eb5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ebb:	83 ec 0c             	sub    esp,0xc
c0019ebe:	50                   	push   eax
c0019ebf:	e8 fb 84 ff ff       	call   c00123bf <setActiveTerminal(VgaText*)>
c0019ec4:	83 c4 10             	add    esp,0x10
c0019ec7:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ecc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019ed2:	83 ec 08             	sub    esp,0x8
c0019ed5:	68 48 55 02 c0       	push   0xc0025548
c0019eda:	50                   	push   eax
c0019edb:	e8 2c 88 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019ee0:	83 c4 10             	add    esp,0x10
c0019ee3:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ee8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019eee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ef2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019ef5:	83 ec 08             	sub    esp,0x8
c0019ef8:	52                   	push   edx
c0019ef9:	50                   	push   eax
c0019efa:	e8 c7 87 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c0019eff:	83 c4 10             	add    esp,0x10
c0019f02:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f07:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f0d:	83 ec 08             	sub    esp,0x8
c0019f10:	68 56 55 02 c0       	push   0xc0025556
c0019f15:	50                   	push   eax
c0019f16:	e8 f1 87 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f23:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f29:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019f2e:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f30:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019f33:	83 c2 0c             	add    edx,0xc
c0019f36:	83 ec 08             	sub    esp,0x8
c0019f39:	52                   	push   edx
c0019f3a:	50                   	push   eax
c0019f3b:	e8 cc 87 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019f40:	83 c4 10             	add    esp,0x10
c0019f43:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f48:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f4e:	83 ec 08             	sub    esp,0x8
c0019f51:	68 5f 55 02 c0       	push   0xc002555f
c0019f56:	50                   	push   eax
c0019f57:	e8 b0 87 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f64:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f6e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019f71:	83 ec 08             	sub    esp,0x8
c0019f74:	52                   	push   edx
c0019f75:	50                   	push   eax
c0019f76:	e8 4b 87 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f83:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019f89:	83 ec 08             	sub    esp,0x8
c0019f8c:	68 67 55 02 c0       	push   0xc0025567
c0019f91:	50                   	push   eax
c0019f92:	e8 75 87 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019f9f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fa9:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019fac:	83 ec 08             	sub    esp,0x8
c0019faf:	52                   	push   edx
c0019fb0:	50                   	push   eax
c0019fb1:	e8 10 87 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c0019fb6:	83 c4 10             	add    esp,0x10
c0019fb9:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fbe:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fc4:	83 ec 08             	sub    esp,0x8
c0019fc7:	68 6f 55 02 c0       	push   0xc002556f
c0019fcc:	50                   	push   eax
c0019fcd:	e8 3a 87 ff ff       	call   c001270c <VgaText::puts(char const*)>
c0019fd2:	83 c4 10             	add    esp,0x10
c0019fd5:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019fda:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019fe4:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019fe7:	83 ec 08             	sub    esp,0x8
c0019fea:	52                   	push   edx
c0019feb:	50                   	push   eax
c0019fec:	e8 d5 86 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c0019ff9:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0019fff:	83 ec 08             	sub    esp,0x8
c001a002:	68 77 55 02 c0       	push   0xc0025577
c001a007:	50                   	push   eax
c001a008:	e8 ff 86 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a015:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a01b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a01f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a022:	83 ec 08             	sub    esp,0x8
c001a025:	52                   	push   edx
c001a026:	50                   	push   eax
c001a027:	e8 9a 86 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a02c:	83 c4 10             	add    esp,0x10
c001a02f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a034:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a03a:	83 ec 08             	sub    esp,0x8
c001a03d:	68 7f 55 02 c0       	push   0xc002557f
c001a042:	50                   	push   eax
c001a043:	e8 c4 86 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a050:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a05a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a05d:	83 ec 08             	sub    esp,0x8
c001a060:	52                   	push   edx
c001a061:	50                   	push   eax
c001a062:	e8 5f 86 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a067:	83 c4 10             	add    esp,0x10
c001a06a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a06f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a075:	83 ec 08             	sub    esp,0x8
c001a078:	68 87 55 02 c0       	push   0xc0025587
c001a07d:	50                   	push   eax
c001a07e:	e8 89 86 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a083:	83 c4 10             	add    esp,0x10
c001a086:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a08b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a091:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a095:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a098:	83 ec 08             	sub    esp,0x8
c001a09b:	52                   	push   edx
c001a09c:	50                   	push   eax
c001a09d:	e8 24 86 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0aa:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0b0:	83 ec 08             	sub    esp,0x8
c001a0b3:	68 8f 55 02 c0       	push   0xc002558f
c001a0b8:	50                   	push   eax
c001a0b9:	e8 4e 86 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a0be:	83 c4 10             	add    esp,0x10
c001a0c1:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0c6:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0cc:	83 ec 08             	sub    esp,0x8
c001a0cf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0d3:	50                   	push   eax
c001a0d4:	e8 ed 85 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0e1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a0e7:	83 ec 08             	sub    esp,0x8
c001a0ea:	68 98 55 02 c0       	push   0xc0025598
c001a0ef:	50                   	push   eax
c001a0f0:	e8 17 86 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a0fd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a103:	83 ec 08             	sub    esp,0x8
c001a106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a10a:	50                   	push   eax
c001a10b:	e8 b6 85 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a110:	83 c4 10             	add    esp,0x10
c001a113:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a118:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a11e:	83 ec 08             	sub    esp,0x8
c001a121:	68 a0 55 02 c0       	push   0xc00255a0
c001a126:	50                   	push   eax
c001a127:	e8 e0 85 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a12c:	83 c4 10             	add    esp,0x10
c001a12f:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001a134:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a13a:	83 ec 08             	sub    esp,0x8
c001a13d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a141:	50                   	push   eax
c001a142:	e8 7f 85 ff ff       	call   c00126c6 <VgaText::putx(unsigned int)>
c001a147:	83 c4 10             	add    esp,0x10
c001a14a:	fa                   	cli    
c001a14b:	f4                   	hlt    
c001a14c:	eb fe                	jmp    c001a14c <HalDisplayDebugInfo(void*)+0x38c>

c001a14e <HalReceivedNMI()>:
c001a14e:	83 ec 1c             	sub    esp,0x1c
c001a151:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a15c:	89 c2                	mov    edx,eax
c001a15e:	ec                   	in     al,dx
c001a15f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a163:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a167:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a16b:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a172:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a176:	89 c2                	mov    edx,eax
c001a178:	ec                   	in     al,dx
c001a179:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a17d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a181:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a185:	83 ec 0c             	sub    esp,0xc
c001a188:	68 a8 55 02 c0       	push   0xc00255a8
c001a18d:	e8 ea cd fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a192:	83 c4 10             	add    esp,0x10
c001a195:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a19a:	83 e0 10             	and    eax,0x10
c001a19d:	74 10                	je     c001a1af <HalReceivedNMI()+0x61>
c001a19f:	83 ec 0c             	sub    esp,0xc
c001a1a2:	68 b9 55 02 c0       	push   0xc00255b9
c001a1a7:	e8 48 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a1ac:	83 c4 10             	add    esp,0x10
c001a1af:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a1b4:	83 e0 40             	and    eax,0x40
c001a1b7:	74 10                	je     c001a1c9 <HalReceivedNMI()+0x7b>
c001a1b9:	83 ec 0c             	sub    esp,0xc
c001a1bc:	68 c6 55 02 c0       	push   0xc00255c6
c001a1c1:	e8 2e 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a1c6:	83 c4 10             	add    esp,0x10
c001a1c9:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a1cd:	0f be c0             	movsx  eax,al
c001a1d0:	85 c0                	test   eax,eax
c001a1d2:	79 10                	jns    c001a1e4 <HalReceivedNMI()+0x96>
c001a1d4:	83 ec 0c             	sub    esp,0xc
c001a1d7:	68 d0 55 02 c0       	push   0xc00255d0
c001a1dc:	e8 13 5b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	90                   	nop
c001a1e5:	83 c4 1c             	add    esp,0x1c
c001a1e8:	c3                   	ret    

c001a1e9 <HalSystemIdle()>:
c001a1e9:	56                   	push   esi
c001a1ea:	53                   	push   ebx
c001a1eb:	83 ec 14             	sub    esp,0x14
c001a1ee:	a0 90 cb 02 c0       	mov    al,ds:0xc002cb90
c001a1f3:	83 e0 10             	and    eax,0x10
c001a1f6:	0f b6 c0             	movzx  eax,al
c001a1f9:	85 c0                	test   eax,eax
c001a1fb:	74 43                	je     c001a240 <HalSystemIdle()+0x57>
c001a1fd:	83 ec 0c             	sub    esp,0xc
c001a200:	68 e1 00 00 00       	push   0xe1
c001a205:	e8 cf f9 ff ff       	call   c0019bd9 <x86rdmsr(unsigned int)>
c001a20a:	83 c4 10             	add    esp,0x10
c001a20d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a211:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a219:	83 e0 02             	and    eax,0x2
c001a21c:	89 c3                	mov    ebx,eax
c001a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a222:	83 e0 00             	and    eax,0x0
c001a225:	89 c6                	mov    esi,eax
c001a227:	83 ec 04             	sub    esp,0x4
c001a22a:	56                   	push   esi
c001a22b:	53                   	push   ebx
c001a22c:	68 e1 00 00 00       	push   0xe1
c001a231:	e8 e1 f9 ff ff       	call   c0019c17 <x86wrmsr(unsigned int, unsigned long long)>
c001a236:	83 c4 10             	add    esp,0x10
c001a239:	e8 56 5f fe ff       	call   c0000194 <doTPAUSE>
c001a23e:	eb 01                	jmp    c001a241 <HalSystemIdle()+0x58>
c001a240:	f4                   	hlt    
c001a241:	90                   	nop
c001a242:	83 c4 14             	add    esp,0x14
c001a245:	5b                   	pop    ebx
c001a246:	5e                   	pop    esi
c001a247:	c3                   	ret    

c001a248 <i386SaveCoprocessor(void*)>:
c001a248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a24c:	83 c0 3f             	add    eax,0x3f
c001a24f:	83 e0 c0             	and    eax,0xffffffc0
c001a252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a256:	ff 25 50 cb 02 c0    	jmp    DWORD PTR ds:0xc002cb50

c001a25c <i386LoadCoprocessor(void*)>:
c001a25c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a260:	83 c0 3f             	add    eax,0x3f
c001a263:	83 e0 c0             	and    eax,0xffffffc0
c001a266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a26a:	ff 25 4c cb 02 c0    	jmp    DWORD PTR ds:0xc002cb4c

c001a270 <x87EmulHandler(regs*, void*)>:
c001a270:	53                   	push   ebx
c001a271:	83 ec 08             	sub    esp,0x8
c001a274:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a279:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a27d:	74 10                	je     c001a28f <x87EmulHandler(regs*, void*)+0x1f>
c001a27f:	83 ec 0c             	sub    esp,0xc
c001a282:	68 dd 55 02 c0       	push   0xc00255dd
c001a287:	e8 68 5a ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a28c:	83 c4 10             	add    esp,0x10
c001a28f:	0f 20 c0             	mov    eax,cr0
c001a292:	a8 08                	test   al,0x8
c001a294:	74 59                	je     c001a2ef <x87EmulHandler(regs*, void*)+0x7f>
c001a296:	0f 06                	clts   
c001a298:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a29d:	85 c0                	test   eax,eax
c001a29f:	74 0e                	je     c001a2af <x87EmulHandler(regs*, void*)+0x3f>
c001a2a1:	83 ec 0c             	sub    esp,0xc
c001a2a4:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a2a7:	e8 9c ff ff ff       	call   c001a248 <i386SaveCoprocessor(void*)>
c001a2ac:	83 c4 10             	add    esp,0x10
c001a2af:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a2b5:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a2b9:	75 12                	jne    c001a2cd <x87EmulHandler(regs*, void*)+0x5d>
c001a2bb:	83 ec 0c             	sub    esp,0xc
c001a2be:	68 40 02 00 00       	push   0x240
c001a2c3:	e8 cf 55 ff ff       	call   c000f897 <malloc>
c001a2c8:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a2cb:	eb 10                	jmp    c001a2dd <x87EmulHandler(regs*, void*)+0x6d>
c001a2cd:	83 ec 0c             	sub    esp,0xc
c001a2d0:	a1 48 cb 02 c0       	mov    eax,ds:0xc002cb48
c001a2d5:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a2d8:	e8 7f ff ff ff       	call   c001a25c <i386LoadCoprocessor(void*)>
c001a2dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2e2:	83 c4 10             	add    esp,0x10
c001a2e5:	a3 48 cb 02 c0       	mov    ds:0xc002cb48,eax
c001a2ea:	83 c4 08             	add    esp,0x8
c001a2ed:	5b                   	pop    ebx
c001a2ee:	c3                   	ret    
c001a2ef:	83 ec 0c             	sub    esp,0xc
c001a2f2:	68 f1 55 02 c0       	push   0xc00255f1
c001a2f7:	e8 80 cc fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a2fc:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a304:	83 c4 18             	add    esp,0x18
c001a307:	5b                   	pop    ebx
c001a308:	e9 13 d3 ff ff       	jmp    c0017620 <KeTerminateCurrentThread(int)>

c001a30d <HalInitialiseCoprocessor()>:
c001a30d:	83 ec 10             	sub    esp,0x10
c001a310:	c7 05 48 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb48,0x0
c001a31a:	6a 00                	push   0x0
c001a31c:	68 70 a2 01 c0       	push   0xc001a270
c001a321:	6a 07                	push   0x7
c001a323:	e8 df 07 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a328:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a32d:	83 c4 10             	add    esp,0x10
c001a330:	a8 80                	test   al,0x80
c001a332:	74 1c                	je     c001a350 <HalInitialiseCoprocessor()+0x43>
c001a334:	c7 05 50 cb 02 c0 98 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0021698
c001a33e:	c7 05 4c cb 02 c0 a0 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc00216a0
c001a348:	83 c4 0c             	add    esp,0xc
c001a34b:	e9 58 73 00 00       	jmp    c00216a8 <sseInit>
c001a350:	a8 10                	test   al,0x10
c001a352:	74 1c                	je     c001a370 <HalInitialiseCoprocessor()+0x63>
c001a354:	c7 05 50 cb 02 c0 e7 16 02 c0 	mov    DWORD PTR ds:0xc002cb50,0xc00216e7
c001a35e:	c7 05 4c cb 02 c0 ee 16 02 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc00216ee
c001a368:	83 c4 0c             	add    esp,0xc
c001a36b:	e9 85 73 00 00       	jmp    c00216f5 <x87Init>
c001a370:	c7 05 50 cb 02 c0 ac 8a 01 c0 	mov    DWORD PTR ds:0xc002cb50,0xc0018aac
c001a37a:	c7 05 4c cb 02 c0 ac 8a 01 c0 	mov    DWORD PTR ds:0xc002cb4c,0xc0018aac
c001a384:	0f 20 c0             	mov    eax,cr0
c001a387:	83 c8 04             	or     eax,0x4
c001a38a:	0f 22 c0             	mov    cr0,eax
c001a38d:	83 c4 0c             	add    esp,0xc
c001a390:	c3                   	ret    

c001a391 <HalPanic(char const*)>:
c001a391:	53                   	push   ebx
c001a392:	83 ec 10             	sub    esp,0x10
c001a395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a399:	fa                   	cli    
c001a39a:	53                   	push   ebx
c001a39b:	68 07 56 02 c0       	push   0xc0025607
c001a3a0:	e8 d7 cb fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a3a5:	a1 44 cb 02 c0       	mov    eax,ds:0xc002cb44
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	85 c0                	test   eax,eax
c001a3af:	74 09                	je     c001a3ba <HalPanic(char const*)+0x29>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	53                   	push   ebx
c001a3b5:	ff d0                	call   eax
c001a3b7:	83 c4 10             	add    esp,0x10
c001a3ba:	a1 f4 c1 02 c0       	mov    eax,ds:0xc002c1f4
c001a3bf:	85 c0                	test   eax,eax
c001a3c1:	0f 84 dc 00 00 00    	je     c001a4a3 <HalPanic(char const*)+0x112>
c001a3c7:	52                   	push   edx
c001a3c8:	6a 01                	push   0x1
c001a3ca:	6a 0f                	push   0xf
c001a3cc:	50                   	push   eax
c001a3cd:	e8 2c 7e ff ff       	call   c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a3d2:	59                   	pop    ecx
c001a3d3:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3d9:	e8 2c 80 ff ff       	call   c001240a <VgaText::clearScreen()>
c001a3de:	58                   	pop    eax
c001a3df:	5a                   	pop    edx
c001a3e0:	68 8c 45 02 c0       	push   0xc002458c
c001a3e5:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3eb:	e8 46 7e ff ff       	call   c0012236 <VgaText::setTitle(char*)>
c001a3f0:	83 c4 0c             	add    esp,0xc
c001a3f3:	6a 01                	push   0x1
c001a3f5:	6a 0f                	push   0xf
c001a3f7:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a3fd:	e8 fc 7d ff ff       	call   c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a402:	59                   	pop    ecx
c001a403:	58                   	pop    eax
c001a404:	68 20 56 02 c0       	push   0xc0025620
c001a409:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a40f:	e8 f8 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a414:	83 c4 0c             	add    esp,0xc
c001a417:	6a 0f                	push   0xf
c001a419:	6a 01                	push   0x1
c001a41b:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a421:	e8 d8 7d ff ff       	call   c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a426:	58                   	pop    eax
c001a427:	5a                   	pop    edx
c001a428:	68 29 56 02 c0       	push   0xc0025629
c001a42d:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a433:	e8 d4 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a438:	83 c4 0c             	add    esp,0xc
c001a43b:	6a 01                	push   0x1
c001a43d:	6a 0f                	push   0xf
c001a43f:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a445:	e8 b4 7d ff ff       	call   c00121fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a44a:	59                   	pop    ecx
c001a44b:	58                   	pop    eax
c001a44c:	68 6d 56 02 c0       	push   0xc002566d
c001a451:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a457:	e8 b0 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a45c:	58                   	pop    eax
c001a45d:	5a                   	pop    edx
c001a45e:	68 36 56 02 c0       	push   0xc0025636
c001a463:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a469:	e8 9e 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a46e:	59                   	pop    ecx
c001a46f:	58                   	pop    eax
c001a470:	68 70 56 02 c0       	push   0xc0025670
c001a475:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a47b:	e8 8c 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a480:	58                   	pop    eax
c001a481:	5a                   	pop    edx
c001a482:	53                   	push   ebx
c001a483:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a489:	e8 7e 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a48e:	59                   	pop    ecx
c001a48f:	5b                   	pop    ebx
c001a490:	68 6d 56 02 c0       	push   0xc002566d
c001a495:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c001a49b:	e8 6c 82 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001a4a0:	83 c4 10             	add    esp,0x10
c001a4a3:	eb fe                	jmp    c001a4a3 <HalPanic(char const*)+0x112>

c001a4a5 <HalQueryPerformanceCounter()>:
c001a4a5:	31 c0                	xor    eax,eax
c001a4a7:	31 d2                	xor    edx,edx
c001a4a9:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a4b0:	75 02                	jne    c001a4b4 <HalQueryPerformanceCounter()+0xf>
c001a4b2:	0f 31                	rdtsc  
c001a4b4:	c3                   	ret    

c001a4b5 <HalInitialise()>:
c001a4b5:	53                   	push   ebx
c001a4b6:	83 ec 08             	sub    esp,0x8
c001a4b9:	e8 04 e9 ff ff       	call   c0018dc2 <HalDetectFeatures()>
c001a4be:	83 ec 0c             	sub    esp,0xc
c001a4c1:	68 ad 8a 01 c0       	push   0xc0018aad
c001a4c6:	e8 17 62 ff ff       	call   c00106e2 <KeRegisterRestartHandler(void (*)())>
c001a4cb:	c7 04 24 b8 8a 01 c0 	mov    DWORD PTR [esp],0xc0018ab8
c001a4d2:	e8 01 62 ff ff       	call   c00106d8 <KeRegisterShutdownHandler(void (*)())>
c001a4d7:	c7 04 24 b9 8a 01 c0 	mov    DWORD PTR [esp],0xc0018ab9
c001a4de:	e8 09 62 ff ff       	call   c00106ec <KeRegisterSleepHandler(void (*)())>
c001a4e3:	e8 d8 1e ff ff       	call   c000c3c0 <scanMADT()>
c001a4e8:	83 c4 10             	add    esp,0x10
c001a4eb:	80 3d 40 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be40,0x0
c001a4f2:	75 0d                	jne    c001a501 <HalInitialise()+0x4c>
c001a4f4:	a0 8c cb 02 c0       	mov    al,ds:0xc002cb8c
c001a4f9:	83 e0 fe             	and    eax,0xfffffffe
c001a4fc:	a2 8c cb 02 c0       	mov    ds:0xc002cb8c,al
c001a501:	e8 de 08 00 00       	call   c001ade4 <picOpen()>
c001a506:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a50d:	74 0a                	je     c001a519 <HalInitialise()+0x64>
c001a50f:	e8 20 08 00 00       	call   c001ad34 <picDisable()>
c001a514:	e8 9b e1 ff ff       	call   c00186b4 <apicOpen()>
c001a519:	bb 0f 00 00 00       	mov    ebx,0xf
c001a51e:	50                   	push   eax
c001a51f:	6a 00                	push   0x0
c001a521:	68 d4 e8 00 c0       	push   0xc000e8d4
c001a526:	6a 02                	push   0x2
c001a528:	e8 da 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a52d:	83 c4 0c             	add    esp,0xc
c001a530:	6a 00                	push   0x0
c001a532:	68 4c e8 00 c0       	push   0xc000e84c
c001a537:	6a 06                	push   0x6
c001a539:	e8 c9 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a53e:	83 c4 0c             	add    esp,0xc
c001a541:	6a 00                	push   0x0
c001a543:	68 e4 e8 00 c0       	push   0xc000e8e4
c001a548:	6a 08                	push   0x8
c001a54a:	e8 b8 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a54f:	83 c4 0c             	add    esp,0xc
c001a552:	6a 00                	push   0x0
c001a554:	68 a4 e7 00 c0       	push   0xc000e7a4
c001a559:	6a 0d                	push   0xd
c001a55b:	e8 a7 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a560:	83 c4 0c             	add    esp,0xc
c001a563:	6a 00                	push   0x0
c001a565:	68 f8 e7 00 c0       	push   0xc000e7f8
c001a56a:	6a 0e                	push   0xe
c001a56c:	e8 96 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a571:	83 c4 0c             	add    esp,0xc
c001a574:	6a 00                	push   0x0
c001a576:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a57b:	6a 00                	push   0x0
c001a57d:	e8 85 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a582:	83 c4 0c             	add    esp,0xc
c001a585:	6a 00                	push   0x0
c001a587:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a58c:	6a 01                	push   0x1
c001a58e:	e8 74 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a593:	83 c4 0c             	add    esp,0xc
c001a596:	6a 00                	push   0x0
c001a598:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a59d:	6a 03                	push   0x3
c001a59f:	e8 63 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5a4:	83 c4 0c             	add    esp,0xc
c001a5a7:	6a 00                	push   0x0
c001a5a9:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5ae:	6a 04                	push   0x4
c001a5b0:	e8 52 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5b5:	83 c4 0c             	add    esp,0xc
c001a5b8:	6a 00                	push   0x0
c001a5ba:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5bf:	6a 05                	push   0x5
c001a5c1:	e8 41 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5c6:	83 c4 0c             	add    esp,0xc
c001a5c9:	6a 00                	push   0x0
c001a5cb:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5d0:	6a 00                	push   0x0
c001a5d2:	e8 30 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5d7:	83 c4 0c             	add    esp,0xc
c001a5da:	6a 00                	push   0x0
c001a5dc:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5e1:	6a 01                	push   0x1
c001a5e3:	e8 1f 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5e8:	83 c4 0c             	add    esp,0xc
c001a5eb:	6a 00                	push   0x0
c001a5ed:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a5f2:	6a 09                	push   0x9
c001a5f4:	e8 0e 05 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a5f9:	83 c4 0c             	add    esp,0xc
c001a5fc:	6a 00                	push   0x0
c001a5fe:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a603:	6a 0a                	push   0xa
c001a605:	e8 fd 04 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a60a:	83 c4 0c             	add    esp,0xc
c001a60d:	6a 00                	push   0x0
c001a60f:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a614:	6a 0b                	push   0xb
c001a616:	e8 ec 04 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a61b:	83 c4 10             	add    esp,0x10
c001a61e:	50                   	push   eax
c001a61f:	6a 00                	push   0x0
c001a621:	68 a0 e8 00 c0       	push   0xc000e8a0
c001a626:	53                   	push   ebx
c001a627:	43                   	inc    ebx
c001a628:	e8 da 04 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a62d:	83 c4 10             	add    esp,0x10
c001a630:	83 fb 1e             	cmp    ebx,0x1e
c001a633:	75 e9                	jne    c001a61e <HalInitialise()+0x169>
c001a635:	50                   	push   eax
c001a636:	6a 00                	push   0x0
c001a638:	68 98 20 01 c0       	push   0xc0012098
c001a63d:	6a 60                	push   0x60
c001a63f:	e8 c3 04 00 00       	call   c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a644:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a649:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a653:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a65a:	e8 38 52 ff ff       	call   c000f897 <malloc>
c001a65f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a662:	89 c3                	mov    ebx,eax
c001a664:	e8 e9 0e 00 00       	call   c001b552 <RTC::RTC()>
c001a669:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a673:	5a                   	pop    edx
c001a674:	59                   	pop    ecx
c001a675:	53                   	push   ebx
c001a676:	ff 35 08 c1 02 c0    	push   DWORD PTR ds:0xc002c108
c001a67c:	e8 d3 f3 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001a681:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a683:	6a 00                	push   0x0
c001a685:	6a 00                	push   0x0
c001a687:	6a 00                	push   0x0
c001a689:	53                   	push   ebx
c001a68a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a68d:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001a692:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a698:	83 c4 28             	add    esp,0x28
c001a69b:	5b                   	pop    ebx
c001a69c:	c3                   	ret    

c001a69d <HalMakeBeep(int)>:
c001a69d:	53                   	push   ebx
c001a69e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a6a2:	85 db                	test   ebx,ebx
c001a6a4:	75 07                	jne    c001a6ad <HalMakeBeep(int)+0x10>
c001a6a6:	e4 61                	in     al,0x61
c001a6a8:	83 e0 fc             	and    eax,0xfffffffc
c001a6ab:	eb 26                	jmp    c001a6d3 <HalMakeBeep(int)+0x36>
c001a6ad:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a6b2:	99                   	cdq    
c001a6b3:	f7 fb                	idiv   ebx
c001a6b5:	89 c1                	mov    ecx,eax
c001a6b7:	b0 b6                	mov    al,0xb6
c001a6b9:	e6 43                	out    0x43,al
c001a6bb:	88 c8                	mov    al,cl
c001a6bd:	e6 42                	out    0x42,al
c001a6bf:	89 c8                	mov    eax,ecx
c001a6c1:	c1 e8 08             	shr    eax,0x8
c001a6c4:	e6 42                	out    0x42,al
c001a6c6:	e4 61                	in     al,0x61
c001a6c8:	89 c2                	mov    edx,eax
c001a6ca:	83 ca 03             	or     edx,0x3
c001a6cd:	38 d0                	cmp    al,dl
c001a6cf:	74 04                	je     c001a6d5 <HalMakeBeep(int)+0x38>
c001a6d1:	88 d0                	mov    al,dl
c001a6d3:	e6 61                	out    0x61,al
c001a6d5:	5b                   	pop    ebx
c001a6d6:	c3                   	ret    

c001a6d7 <HalGetRand()>:
c001a6d7:	31 c0                	xor    eax,eax
c001a6d9:	c3                   	ret    

c001a6da <HalEndOfInterrupt(int)>:
c001a6da:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a6e1:	74 1d                	je     c001a700 <HalEndOfInterrupt(int)+0x26>
c001a6e3:	83 ec 18             	sub    esp,0x18
c001a6e6:	6a 1b                	push   0x1b
c001a6e8:	e8 ec f4 ff ff       	call   c0019bd9 <x86rdmsr(unsigned int)>
c001a6ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a6f2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a6fc:	83 c4 1c             	add    esp,0x1c
c001a6ff:	c3                   	ret    
c001a700:	e9 63 08 00 00       	jmp    c001af68 <picEOI(int)>
c001a705:	90                   	nop

c001a706 <CPU::CPU()>:
c001a706:	83 ec 0c             	sub    esp,0xc
c001a709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a70d:	83 ec 08             	sub    esp,0x8
c001a710:	68 0e 54 02 c0       	push   0xc002540e
c001a715:	50                   	push   eax
c001a716:	e8 9b f4 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	ba 0c 57 02 c0       	mov    edx,0xc002570c
c001a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a727:	89 10                	mov    DWORD PTR [eax],edx
c001a729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a72d:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a73b:	05 64 01 00 00       	add    eax,0x164
c001a740:	83 ec 0c             	sub    esp,0xc
c001a743:	50                   	push   eax
c001a744:	e8 ed 41 ff ff       	call   c000e936 <GDT::GDT()>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a750:	05 68 09 00 00       	add    eax,0x968
c001a755:	83 ec 0c             	sub    esp,0xc
c001a758:	50                   	push   eax
c001a759:	e8 2a 44 ff ff       	call   c000eb88 <IDT::IDT()>
c001a75e:	83 c4 10             	add    esp,0x10
c001a761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a765:	05 68 11 00 00       	add    eax,0x1168
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	50                   	push   eax
c001a76e:	e8 75 84 ff ff       	call   c0012be8 <TSS::TSS()>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a77a:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a784:	90                   	nop
c001a785:	83 c4 0c             	add    esp,0xc
c001a788:	c3                   	ret    
c001a789:	90                   	nop

c001a78a <CPU::setupSMEP()>:
c001a78a:	0f 20 e0             	mov    eax,cr4
c001a78d:	0d 00 00 10 00       	or     eax,0x100000
c001a792:	0f 22 e0             	mov    cr4,eax
c001a795:	c3                   	ret    

c001a796 <CPU::setupUMIP()>:
c001a796:	0f 20 e0             	mov    eax,cr4
c001a799:	80 cc 08             	or     ah,0x8
c001a79c:	0f 22 e0             	mov    cr4,eax
c001a79f:	c3                   	ret    

c001a7a0 <CPU::setupTSC()>:
c001a7a0:	0f 20 e0             	mov    eax,cr4
c001a7a3:	83 c8 04             	or     eax,0x4
c001a7a6:	0f 22 e0             	mov    cr4,eax
c001a7a9:	c3                   	ret    

c001a7aa <CPU::setupLargePages()>:
c001a7aa:	0f 20 e0             	mov    eax,cr4
c001a7ad:	83 c8 10             	or     eax,0x10
c001a7b0:	0f 22 e0             	mov    cr4,eax
c001a7b3:	c3                   	ret    

c001a7b4 <CPU::setupPAT()>:
c001a7b4:	f6 05 8c cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8c,0x8
c001a7bb:	74 28                	je     c001a7e5 <CPU::setupPAT()+0x31>
c001a7bd:	53                   	push   ebx
c001a7be:	83 ec 14             	sub    esp,0x14
c001a7c1:	68 77 02 00 00       	push   0x277
c001a7c6:	e8 0e f4 ff ff       	call   c0019bd9 <x86rdmsr(unsigned int)>
c001a7cb:	83 c4 0c             	add    esp,0xc
c001a7ce:	83 e2 f8             	and    edx,0xfffffff8
c001a7d1:	83 ca 01             	or     edx,0x1
c001a7d4:	52                   	push   edx
c001a7d5:	50                   	push   eax
c001a7d6:	68 77 02 00 00       	push   0x277
c001a7db:	e8 37 f4 ff ff       	call   c0019c17 <x86wrmsr(unsigned int, unsigned long long)>
c001a7e0:	83 c4 18             	add    esp,0x18
c001a7e3:	5b                   	pop    ebx
c001a7e4:	c3                   	ret    
c001a7e5:	c3                   	ret    

c001a7e6 <CPU::setupMTRR()>:
c001a7e6:	c3                   	ret    
c001a7e7:	90                   	nop

c001a7e8 <CPU::setupGlobalPages()>:
c001a7e8:	0f 20 e0             	mov    eax,cr4
c001a7eb:	0c 80                	or     al,0x80
c001a7ed:	0f 22 e0             	mov    cr4,eax
c001a7f0:	c3                   	ret    
c001a7f1:	90                   	nop

c001a7f2 <CPU::allowUsermodeDataAccess()>:
c001a7f2:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a7f9:	74 03                	je     c001a7fe <CPU::allowUsermodeDataAccess()+0xc>
c001a7fb:	0f 01 cb             	stac   
c001a7fe:	c3                   	ret    
c001a7ff:	90                   	nop

c001a800 <CPU::prohibitUsermodeDataAccess()>:
c001a800:	f6 05 8f cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8f,0x40
c001a807:	74 03                	je     c001a80c <CPU::prohibitUsermodeDataAccess()+0xc>
c001a809:	0f 01 ca             	clac   
c001a80c:	c3                   	ret    
c001a80d:	90                   	nop

c001a80e <CPU::setupSMAP()>:
c001a80e:	0f 20 e0             	mov    eax,cr4
c001a811:	0d 00 00 20 00       	or     eax,0x200000
c001a816:	0f 22 e0             	mov    cr4,eax
c001a819:	eb e5                	jmp    c001a800 <CPU::prohibitUsermodeDataAccess()>
c001a81b:	90                   	nop

c001a81c <CPU::setupFeatures()>:
c001a81c:	53                   	push   ebx
c001a81d:	83 ec 08             	sub    esp,0x8
c001a820:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a824:	f6 05 8f cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8f,0x20
c001a82b:	74 18                	je     c001a845 <CPU::setupFeatures()+0x29>
c001a82d:	83 ec 0c             	sub    esp,0xc
c001a830:	68 7b 56 02 c0       	push   0xc002567b
c001a835:	e8 42 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a83a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a83d:	e8 54 ff ff ff       	call   c001a796 <CPU::setupUMIP()>
c001a842:	83 c4 10             	add    esp,0x10
c001a845:	f6 05 8e cb 02 c0 08 	test   BYTE PTR ds:0xc002cb8e,0x8
c001a84c:	74 18                	je     c001a866 <CPU::setupFeatures()+0x4a>
c001a84e:	83 ec 0c             	sub    esp,0xc
c001a851:	68 85 56 02 c0       	push   0xc0025685
c001a856:	e8 21 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a85b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a85e:	e8 3d ff ff ff       	call   c001a7a0 <CPU::setupTSC()>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	f6 05 8e cb 02 c0 20 	test   BYTE PTR ds:0xc002cb8e,0x20
c001a86d:	74 18                	je     c001a887 <CPU::setupFeatures()+0x6b>
c001a86f:	83 ec 0c             	sub    esp,0xc
c001a872:	68 8e 56 02 c0       	push   0xc002568e
c001a877:	e8 00 c7 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a87c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a87f:	e8 26 ff ff ff       	call   c001a7aa <CPU::setupLargePages()>
c001a884:	83 c4 10             	add    esp,0x10
c001a887:	f6 05 8e cb 02 c0 40 	test   BYTE PTR ds:0xc002cb8e,0x40
c001a88e:	74 18                	je     c001a8a8 <CPU::setupFeatures()+0x8c>
c001a890:	83 ec 0c             	sub    esp,0xc
c001a893:	68 97 56 02 c0       	push   0xc0025697
c001a898:	e8 df c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a89d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8a0:	e8 43 ff ff ff       	call   c001a7e8 <CPU::setupGlobalPages()>
c001a8a5:	83 c4 10             	add    esp,0x10
c001a8a8:	f6 05 8e cb 02 c0 80 	test   BYTE PTR ds:0xc002cb8e,0x80
c001a8af:	74 18                	je     c001a8c9 <CPU::setupFeatures()+0xad>
c001a8b1:	83 ec 0c             	sub    esp,0xc
c001a8b4:	68 a9 56 02 c0       	push   0xc00256a9
c001a8b9:	e8 be c6 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001a8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8c1:	e8 ee fe ff ff       	call   c001a7b4 <CPU::setupPAT()>
c001a8c6:	83 c4 10             	add    esp,0x10
c001a8c9:	f6 05 90 cb 02 c0 04 	test   BYTE PTR ds:0xc002cb90,0x4
c001a8d0:	74 11                	je     c001a8e3 <CPU::setupFeatures()+0xc7>
c001a8d2:	c7 44 24 10 b2 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc00256b2
c001a8da:	83 c4 08             	add    esp,0x8
c001a8dd:	5b                   	pop    ebx
c001a8de:	e9 99 c6 fe ff       	jmp    c0006f7c <Dbg::kprintf(char const*, ...)>
c001a8e3:	83 c4 08             	add    esp,0x8
c001a8e6:	5b                   	pop    ebx
c001a8e7:	c3                   	ret    

c001a8e8 <CPU::open(int, int, void*)>:
c001a8e8:	55                   	push   ebp
c001a8e9:	57                   	push   edi
c001a8ea:	56                   	push   esi
c001a8eb:	53                   	push   ebx
c001a8ec:	83 ec 18             	sub    esp,0x18
c001a8ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8f3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a8f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a8fb:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a901:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a907:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a90d:	50                   	push   eax
c001a90e:	e8 85 40 ff ff       	call   c000e998 <GDT::setup()>
c001a913:	83 c4 0c             	add    esp,0xc
c001a916:	6a 00                	push   0x0
c001a918:	68 ef be ad de       	push   0xdeadbeef
c001a91d:	55                   	push   ebp
c001a91e:	e8 09 83 ff ff       	call   c0012c2c <TSS::setup(unsigned long, unsigned long)>
c001a923:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a926:	e8 e1 82 ff ff       	call   c0012c0c <TSS::flush()>
c001a92b:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a931:	89 04 24             	mov    DWORD PTR [esp],eax
c001a934:	e8 c5 42 ff ff       	call   c000ebfe <IDT::setup()>
c001a939:	b8 00 04 00 00       	mov    eax,0x400
c001a93e:	0f 23 f8             	mov    dr7,eax
c001a941:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a94b:	e8 98 55 ff ff       	call   c000fee8 <Phys::allocatePage()>
c001a950:	83 c4 10             	add    esp,0x10
c001a953:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a959:	85 f6                	test   esi,esi
c001a95b:	89 38                	mov    DWORD PTR [eax],edi
c001a95d:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a963:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a966:	74 10                	je     c001a978 <CPU::open(int, int, void*)+0x90>
c001a968:	50                   	push   eax
c001a969:	50                   	push   eax
c001a96a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a970:	56                   	push   esi
c001a971:	e8 62 8c ff ff       	call   c00135d8 <VAS::setCPUSpecific(unsigned long)>
c001a976:	eb 0d                	jmp    c001a985 <CPU::open(int, int, void*)+0x9d>
c001a978:	83 ec 0c             	sub    esp,0xc
c001a97b:	68 bc 56 02 c0       	push   0xc00256bc
c001a980:	e8 6f 53 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001a985:	83 c4 10             	add    esp,0x10
c001a988:	83 ec 0c             	sub    esp,0xc
c001a98b:	68 ca 56 02 c0       	push   0xc00256ca
c001a990:	e8 70 29 ff ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001a995:	e8 1b fb ff ff       	call   c001a4b5 <HalInitialise()>
c001a99a:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001a9a1:	e8 12 29 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a9a6:	0f b6 c0             	movzx  eax,al
c001a9a9:	83 f8 01             	cmp    eax,0x1
c001a9ac:	19 c0                	sbb    eax,eax
c001a9ae:	83 e0 46             	and    eax,0x46
c001a9b1:	83 c0 1e             	add    eax,0x1e
c001a9b4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9b7:	e8 31 07 ff ff       	call   c000b0ed <setupTimer(int)>
c001a9bc:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a9c2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001a9c9:	e8 ea 28 ff ff       	call   c000d2b8 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001a9ce:	83 c4 10             	add    esp,0x10
c001a9d1:	84 c0                	test   al,al
c001a9d3:	74 0c                	je     c001a9e1 <CPU::open(int, int, void*)+0xf9>
c001a9d5:	83 ec 0c             	sub    esp,0xc
c001a9d8:	53                   	push   ebx
c001a9d9:	e8 3e fe ff ff       	call   c001a81c <CPU::setupFeatures()>
c001a9de:	83 c4 10             	add    esp,0x10
c001a9e1:	83 c4 0c             	add    esp,0xc
c001a9e4:	31 c0                	xor    eax,eax
c001a9e6:	5b                   	pop    ebx
c001a9e7:	5e                   	pop    esi
c001a9e8:	5f                   	pop    edi
c001a9e9:	5d                   	pop    ebp
c001a9ea:	c3                   	ret    

c001a9eb <convertLegacyIRQNumber(int)>:
c001a9eb:	83 ec 0c             	sub    esp,0xc
c001a9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f2:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001a9f9:	74 0c                	je     c001aa07 <convertLegacyIRQNumber(int)+0x1c>
c001a9fb:	83 f8 0f             	cmp    eax,0xf
c001a9fe:	7f 0b                	jg     c001aa0b <convertLegacyIRQNumber(int)+0x20>
c001aa00:	0f b6 80 28 62 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9dd8]
c001aa07:	83 c4 0c             	add    esp,0xc
c001aa0a:	c3                   	ret    
c001aa0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aa0f:	83 ec 0c             	sub    esp,0xc
c001aa12:	68 30 57 02 c0       	push   0xc0025730
c001aa17:	e8 d8 52 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001aa1c:	83 c4 10             	add    esp,0x10
c001aa1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa23:	83 c4 0c             	add    esp,0xc
c001aa26:	c3                   	ret    

c001aa27 <KeSetupInterrupts()>:
c001aa27:	31 c0                	xor    eax,eax
c001aa29:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001aa33:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001aa3d:	c7 80 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd245c],0x0
c001aa47:	c7 80 a4 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd345c],0x0
c001aa51:	c7 80 a8 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2458],0x0
c001aa5b:	c7 80 a8 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3458],0x0
c001aa65:	c7 80 ac db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2454],0x0
c001aa6f:	c7 80 ac cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3454],0x0
c001aa79:	83 c0 10             	add    eax,0x10
c001aa7c:	3d 00 10 00 00       	cmp    eax,0x1000
c001aa81:	75 a6                	jne    c001aa29 <KeSetupInterrupts()+0x2>
c001aa83:	c3                   	ret    

c001aa84 <int_handler>:
c001aa84:	55                   	push   ebp
c001aa85:	57                   	push   edi
c001aa86:	56                   	push   esi
c001aa87:	53                   	push   ebx
c001aa88:	83 ec 0c             	sub    esp,0xc
c001aa8b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa8f:	eb 02                	jmp    c001aa93 <int_handler+0xf>
c001aa91:	fa                   	cli    
c001aa92:	f4                   	hlt    
c001aa93:	e8 56 52 ff ff       	call   c000fcee <KeIsKernelInPanic()>
c001aa98:	84 c0                	test   al,al
c001aa9a:	75 f5                	jne    c001aa91 <int_handler+0xd>
c001aa9c:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001aa9f:	8d 46 e0             	lea    eax,[esi-0x20]
c001aaa2:	83 f8 17             	cmp    eax,0x17
c001aaa5:	76 40                	jbe    c001aae7 <int_handler+0x63>
c001aaa7:	c1 e6 04             	shl    esi,0x4
c001aaaa:	31 db                	xor    ebx,ebx
c001aaac:	8d ae a0 db 02 c0    	lea    ebp,[esi-0x3ffd2460]
c001aab2:	81 c6 a0 cb 02 c0    	add    esi,0xc002cba0
c001aab8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001aabc:	85 c0                	test   eax,eax
c001aabe:	74 13                	je     c001aad3 <int_handler+0x4f>
c001aac0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001aac3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001aac7:	74 2c                	je     c001aaf5 <int_handler+0x71>
c001aac9:	83 ec 08             	sub    esp,0x8
c001aacc:	52                   	push   edx
c001aacd:	57                   	push   edi
c001aace:	ff d0                	call   eax
c001aad0:	83 c4 10             	add    esp,0x10
c001aad3:	83 c3 01             	add    ebx,0x1
c001aad6:	83 fb 04             	cmp    ebx,0x4
c001aad9:	75 dd                	jne    c001aab8 <int_handler+0x34>
c001aadb:	83 c4 0c             	add    esp,0xc
c001aade:	31 c0                	xor    eax,eax
c001aae0:	5b                   	pop    ebx
c001aae1:	31 d2                	xor    edx,edx
c001aae3:	5e                   	pop    esi
c001aae4:	5f                   	pop    edi
c001aae5:	5d                   	pop    ebp
c001aae6:	c3                   	ret    
c001aae7:	83 ec 0c             	sub    esp,0xc
c001aaea:	50                   	push   eax
c001aaeb:	e8 ea fb ff ff       	call   c001a6da <HalEndOfInterrupt(int)>
c001aaf0:	83 c4 10             	add    esp,0x10
c001aaf3:	eb b2                	jmp    c001aaa7 <int_handler+0x23>
c001aaf5:	83 ec 08             	sub    esp,0x8
c001aaf8:	52                   	push   edx
c001aaf9:	57                   	push   edi
c001aafa:	ff d0                	call   eax
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	83 c4 0c             	add    esp,0xc
c001ab02:	5b                   	pop    ebx
c001ab03:	5e                   	pop    esi
c001ab04:	5f                   	pop    edi
c001ab05:	5d                   	pop    ebp
c001ab06:	c3                   	ret    

c001ab07 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ab07:	56                   	push   esi
c001ab08:	31 c0                	xor    eax,eax
c001ab0a:	53                   	push   ebx
c001ab0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ab0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab13:	89 ca                	mov    edx,ecx
c001ab15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab19:	c1 e2 04             	shl    edx,0x4
c001ab1c:	83 bc 82 a0 db 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2460],0x0
c001ab24:	74 17                	je     c001ab3d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ab26:	83 c0 01             	add    eax,0x1
c001ab29:	83 f8 04             	cmp    eax,0x4
c001ab2c:	75 ee                	jne    c001ab1c <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ab2e:	c7 44 24 0c 91 57 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025791
c001ab36:	5b                   	pop    ebx
c001ab37:	5e                   	pop    esi
c001ab38:	e9 b7 51 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001ab3d:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ab40:	89 1c 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],ebx
c001ab47:	89 34 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],esi
c001ab4e:	5b                   	pop    ebx
c001ab4f:	5e                   	pop    esi
c001ab50:	c3                   	ret    

c001ab51 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ab51:	57                   	push   edi
c001ab52:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001ab59:	56                   	push   esi
c001ab5a:	53                   	push   ebx
c001ab5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab63:	74 54                	je     c001abb9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001ab65:	89 c7                	mov    edi,eax
c001ab67:	84 c0                	test   al,al
c001ab69:	74 1d                	je     c001ab88 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ab6b:	83 fe 0f             	cmp    esi,0xf
c001ab6e:	0f 8f d5 00 00 00    	jg     c001ac49 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001ab74:	0f b6 b6 28 62 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9dd8]
c001ab7b:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001ab83:	d1 ef                	shr    edi,1
c001ab85:	83 e7 01             	and    edi,0x1
c001ab88:	83 ec 08             	sub    esp,0x8
c001ab8b:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001ab90:	31 db                	xor    ebx,ebx
c001ab92:	50                   	push   eax
c001ab93:	68 9e 57 02 c0       	push   0xc002579e
c001ab98:	e8 df c3 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c001aba5:	85 c0                	test   eax,eax
c001aba7:	7f 55                	jg     c001abfe <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001aba9:	83 ec 0c             	sub    esp,0xc
c001abac:	68 b5 57 02 c0       	push   0xc00257b5
c001abb1:	e8 3e 51 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	8d 7e 20             	lea    edi,[esi+0x20]
c001abbc:	89 f8                	mov    eax,edi
c001abbe:	31 d2                	xor    edx,edx
c001abc0:	c1 e0 04             	shl    eax,0x4
c001abc3:	8b 8c 90 a0 db 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2460]
c001abca:	85 c9                	test   ecx,ecx
c001abcc:	0f 84 8e 00 00 00    	je     c001ac60 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001abd2:	83 c2 01             	add    edx,0x1
c001abd5:	83 fa 04             	cmp    edx,0x4
c001abd8:	75 e9                	jne    c001abc3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001abda:	83 ec 0c             	sub    esp,0xc
c001abdd:	68 6c 57 02 c0       	push   0xc002576c
c001abe2:	e8 0d 51 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001abe7:	83 c4 10             	add    esp,0x10
c001abea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001abef:	5b                   	pop    ebx
c001abf0:	5e                   	pop    esi
c001abf1:	5f                   	pop    edi
c001abf2:	c3                   	ret    
c001abf3:	83 c3 01             	add    ebx,0x1
c001abf6:	39 1d 00 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb00,ebx
c001abfc:	7e ab                	jle    c001aba9 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001abfe:	83 ec 08             	sub    esp,0x8
c001ac01:	8b 04 9d 20 cb 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd34e0]
c001ac08:	56                   	push   esi
c001ac09:	50                   	push   eax
c001ac0a:	e8 31 dc ff ff       	call   c0018840 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	84 c0                	test   al,al
c001ac14:	74 dd                	je     c001abf3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001ac16:	83 ec 04             	sub    esp,0x4
c001ac19:	89 f8                	mov    eax,edi
c001ac1b:	8b 1c 9d 20 cb 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd34e0]
c001ac22:	0f b6 f8             	movzx  edi,al
c001ac25:	57                   	push   edi
c001ac26:	8d 7e 20             	lea    edi,[esi+0x20]
c001ac29:	6a 00                	push   0x0
c001ac2b:	89 f8                	mov    eax,edi
c001ac2d:	0f b6 c0             	movzx  eax,al
c001ac30:	50                   	push   eax
c001ac31:	89 f0                	mov    eax,esi
c001ac33:	6a 00                	push   0x0
c001ac35:	0f b6 c0             	movzx  eax,al
c001ac38:	6a 00                	push   0x0
c001ac3a:	50                   	push   eax
c001ac3b:	53                   	push   ebx
c001ac3c:	e8 6b dd ff ff       	call   c00189ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ac41:	83 c4 20             	add    esp,0x20
c001ac44:	e9 73 ff ff ff       	jmp    c001abbc <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001ac49:	83 ec 0c             	sub    esp,0xc
c001ac4c:	31 ff                	xor    edi,edi
c001ac4e:	68 30 57 02 c0       	push   0xc0025730
c001ac53:	e8 9c 50 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	e9 28 ff ff ff       	jmp    c001ab88 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001ac60:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac67:	89 14 85 a0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2460],edx
c001ac6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac72:	5b                   	pop    ebx
c001ac73:	89 14 85 a0 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3460],edx
c001ac7a:	89 f0                	mov    eax,esi
c001ac7c:	5e                   	pop    esi
c001ac7d:	5f                   	pop    edi
c001ac7e:	c3                   	ret    

c001ac7f <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001ac7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac83:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ac87:	c1 e0 04             	shl    eax,0x4
c001ac8a:	8d 50 10             	lea    edx,[eax+0x10]
c001ac8d:	39 88 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ecx
c001ac93:	74 08                	je     c001ac9d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ac95:	83 c0 04             	add    eax,0x4
c001ac98:	39 d0                	cmp    eax,edx
c001ac9a:	75 f1                	jne    c001ac8d <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ac9c:	c3                   	ret    
c001ac9d:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001aca7:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001acb1:	eb e2                	jmp    c001ac95 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001acb3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001acb3:	53                   	push   ebx
c001acb4:	83 ec 08             	sub    esp,0x8
c001acb7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001acbb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001acc0:	74 09                	je     c001accb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001acc2:	f6 05 8c cb 02 c0 01 	test   BYTE PTR ds:0xc002cb8c,0x1
c001acc9:	75 37                	jne    c001ad02 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001accb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accf:	83 c0 20             	add    eax,0x20
c001acd2:	c1 e0 04             	shl    eax,0x4
c001acd5:	8d 50 10             	lea    edx,[eax+0x10]
c001acd8:	39 98 a0 db 02 c0    	cmp    DWORD PTR [eax-0x3ffd2460],ebx
c001acde:	74 0c                	je     c001acec <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001ace0:	83 c0 04             	add    eax,0x4
c001ace3:	39 d0                	cmp    eax,edx
c001ace5:	75 f1                	jne    c001acd8 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001ace7:	83 c4 08             	add    esp,0x8
c001acea:	5b                   	pop    ebx
c001aceb:	c3                   	ret    
c001acec:	c7 80 a0 db 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2460],0x0
c001acf6:	c7 80 a0 cb 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3460],0x0
c001ad00:	eb de                	jmp    c001ace0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001ad02:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001ad07:	7f 11                	jg     c001ad1a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001ad09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0d:	0f b6 80 28 62 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9dd8]
c001ad14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad18:	eb b1                	jmp    c001accb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001ad1a:	83 ec 0c             	sub    esp,0xc
c001ad1d:	68 c2 57 02 c0       	push   0xc00257c2
c001ad22:	e8 cd 4f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	eb 9f                	jmp    c001accb <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>

c001ad2c <picIoWait()>:
c001ad2c:	eb 00                	jmp    c001ad2e <picIoWait()+0x2>
c001ad2e:	eb 00                	jmp    c001ad30 <picIoWait()+0x4>
c001ad30:	90                   	nop
c001ad31:	c3                   	ret    
c001ad32:	66 90                	xchg   ax,ax

c001ad34 <picDisable()>:
c001ad34:	83 ec 10             	sub    esp,0x10
c001ad37:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ad3e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ad43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ad4c:	ee                   	out    dx,al
c001ad4d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ad54:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ad59:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ad5d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001ad62:	ee                   	out    dx,al
c001ad63:	90                   	nop
c001ad64:	83 c4 10             	add    esp,0x10
c001ad67:	c3                   	ret    

c001ad68 <picGetIRQReg(int)>:
c001ad68:	83 ec 10             	sub    esp,0x10
c001ad6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad6f:	0f b6 c0             	movzx  eax,al
c001ad72:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ad79:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ad7d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ad81:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ad86:	ee                   	out    dx,al
c001ad87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad8b:	0f b6 c0             	movzx  eax,al
c001ad8e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ad95:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ad99:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ad9d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ada2:	ee                   	out    dx,al
c001ada3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001adaa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001adaf:	89 c2                	mov    edx,eax
c001adb1:	ec                   	in     al,dx
c001adb2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001adb6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adba:	0f b6 c0             	movzx  eax,al
c001adbd:	c1 e0 08             	shl    eax,0x8
c001adc0:	89 c1                	mov    ecx,eax
c001adc2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001adc9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001adce:	89 c2                	mov    edx,eax
c001add0:	ec                   	in     al,dx
c001add1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001add5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001add9:	0f b6 c0             	movzx  eax,al
c001addc:	09 c8                	or     eax,ecx
c001adde:	83 c4 10             	add    esp,0x10
c001ade1:	c3                   	ret    
c001ade2:	66 90                	xchg   ax,ax

c001ade4 <picOpen()>:
c001ade4:	83 ec 50             	sub    esp,0x50
c001ade7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001adee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001adf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001adf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adfb:	ee                   	out    dx,al
c001adfc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ae03:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ae08:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ae0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae10:	ee                   	out    dx,al
c001ae11:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ae19:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ae21:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ae28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae2c:	89 c2                	mov    edx,eax
c001ae2e:	ec                   	in     al,dx
c001ae2f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ae33:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ae37:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ae3b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ae42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae46:	89 c2                	mov    edx,eax
c001ae48:	ec                   	in     al,dx
c001ae49:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ae4d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ae51:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001ae55:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001ae5c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001ae61:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ae65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae69:	ee                   	out    dx,al
c001ae6a:	e8 bd fe ff ff       	call   c001ad2c <picIoWait()>
c001ae6f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001ae76:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001ae7b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ae7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae83:	ee                   	out    dx,al
c001ae84:	e8 a3 fe ff ff       	call   c001ad2c <picIoWait()>
c001ae89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ae8d:	0f b6 c0             	movzx  eax,al
c001ae90:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ae97:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ae9b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001ae9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aea3:	ee                   	out    dx,al
c001aea4:	e8 83 fe ff ff       	call   c001ad2c <picIoWait()>
c001aea9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aead:	0f b6 c0             	movzx  eax,al
c001aeb0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001aeb7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001aebb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aebf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aec3:	ee                   	out    dx,al
c001aec4:	e8 63 fe ff ff       	call   c001ad2c <picIoWait()>
c001aec9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001aed0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001aed5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001aed9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aedd:	ee                   	out    dx,al
c001aede:	e8 49 fe ff ff       	call   c001ad2c <picIoWait()>
c001aee3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001aeea:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001aeef:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001aef3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aef7:	ee                   	out    dx,al
c001aef8:	e8 2f fe ff ff       	call   c001ad2c <picIoWait()>
c001aefd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001af04:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001af09:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001af0d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af11:	ee                   	out    dx,al
c001af12:	e8 15 fe ff ff       	call   c001ad2c <picIoWait()>
c001af17:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001af1e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001af23:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001af27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001af2b:	ee                   	out    dx,al
c001af2c:	e8 fb fd ff ff       	call   c001ad2c <picIoWait()>
c001af31:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001af36:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001af3d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001af41:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001af45:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001af49:	ee                   	out    dx,al
c001af4a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001af4f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001af56:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001af5a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001af5e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001af62:	ee                   	out    dx,al
c001af63:	90                   	nop
c001af64:	83 c4 50             	add    esp,0x50
c001af67:	c3                   	ret    

c001af68 <picEOI(int)>:
c001af68:	83 ec 10             	sub    esp,0x10
c001af6b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001af70:	75 1e                	jne    c001af90 <picEOI(int)+0x28>
c001af72:	6a 0b                	push   0xb
c001af74:	e8 ef fd ff ff       	call   c001ad68 <picGetIRQReg(int)>
c001af79:	83 c4 04             	add    esp,0x4
c001af7c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001af81:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001af86:	25 80 00 00 00       	and    eax,0x80
c001af8b:	74 73                	je     c001b000 <picEOI(int)+0x98>
c001af8d:	8d 76 00             	lea    esi,[esi+0x0]
c001af90:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001af95:	75 31                	jne    c001afc8 <picEOI(int)+0x60>
c001af97:	6a 0b                	push   0xb
c001af99:	e8 ca fd ff ff       	call   c001ad68 <picGetIRQReg(int)>
c001af9e:	83 c4 04             	add    esp,0x4
c001afa1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001afa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afaa:	98                   	cwde   
c001afab:	85 c0                	test   eax,eax
c001afad:	78 19                	js     c001afc8 <picEOI(int)+0x60>
c001afaf:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001afb6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001afbb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afbf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001afc4:	ee                   	out    dx,al
c001afc5:	eb 3d                	jmp    c001b004 <picEOI(int)+0x9c>
c001afc7:	90                   	nop
c001afc8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001afcd:	7e 19                	jle    c001afe8 <picEOI(int)+0x80>
c001afcf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001afd6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001afdb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001afdf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001afe4:	ee                   	out    dx,al
c001afe5:	8d 76 00             	lea    esi,[esi+0x0]
c001afe8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001afef:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001aff4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aff8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001affd:	ee                   	out    dx,al
c001affe:	eb 04                	jmp    c001b004 <picEOI(int)+0x9c>
c001b000:	90                   	nop
c001b001:	8d 76 00             	lea    esi,[esi+0x0]
c001b004:	83 c4 10             	add    esp,0x10
c001b007:	c3                   	ret    

c001b008 <RTC::open(int, int, void*)>:
c001b008:	31 c0                	xor    eax,eax
c001b00a:	c3                   	ret    
c001b00b:	90                   	nop

c001b00c <RTC::close(int, int, void*)>:
c001b00c:	31 c0                	xor    eax,eax
c001b00e:	c3                   	ret    
c001b00f:	90                   	nop

c001b010 <RTC::timeInSecondsUTC()>:
c001b010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b014:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b01a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b020:	c3                   	ret    
c001b021:	90                   	nop

c001b022 <RTC::timeInDatetimeUTC()>:
c001b022:	53                   	push   ebx
c001b023:	83 ec 14             	sub    esp,0x14
c001b026:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b02a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b030:	50                   	push   eax
c001b031:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b034:	83 c4 0c             	add    esp,0xc
c001b037:	52                   	push   edx
c001b038:	50                   	push   eax
c001b039:	53                   	push   ebx
c001b03a:	e8 0b e6 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b03f:	89 d8                	mov    eax,ebx
c001b041:	83 c4 14             	add    esp,0x14
c001b044:	5b                   	pop    ebx
c001b045:	c2 04 00             	ret    0x4

c001b048 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b048:	56                   	push   esi
c001b049:	53                   	push   ebx
c001b04a:	83 ec 14             	sub    esp,0x14
c001b04d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b051:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b053:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b056:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b05a:	52                   	push   edx
c001b05b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b05f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b063:	50                   	push   eax
c001b064:	e8 e1 e5 fe ff       	call   c000964a <KeSecondsToDatetime(unsigned long long)>
c001b069:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b06d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b071:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b075:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b079:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b07d:	89 f0                	mov    eax,esi
c001b07f:	83 c4 20             	add    esp,0x20
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	ff e0                	jmp    eax

c001b086 <RTC::~RTC()>:
c001b086:	83 ec 0c             	sub    esp,0xc
c001b089:	ba ec 57 02 c0       	mov    edx,0xc00257ec
c001b08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b092:	89 10                	mov    DWORD PTR [eax],edx
c001b094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b098:	83 ec 0c             	sub    esp,0xc
c001b09b:	50                   	push   eax
c001b09c:	e8 4b e0 fe ff       	call   c00090ec <Clock::~Clock()>
c001b0a1:	83 c4 10             	add    esp,0x10
c001b0a4:	90                   	nop
c001b0a5:	83 c4 0c             	add    esp,0xc
c001b0a8:	c3                   	ret    
c001b0a9:	90                   	nop

c001b0aa <RTC::~RTC()>:
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	83 ec 0c             	sub    esp,0xc
c001b0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0b4:	e8 cd ff ff ff       	call   c001b086 <RTC::~RTC()>
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	83 ec 08             	sub    esp,0x8
c001b0bf:	68 60 01 00 00       	push   0x160
c001b0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c8:	e8 e3 22 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001b0cd:	83 c4 10             	add    esp,0x10
c001b0d0:	83 c4 0c             	add    esp,0xc
c001b0d3:	c3                   	ret    

c001b0d4 <RTC::get_update_in_progress_flag()>:
c001b0d4:	83 ec 18             	sub    esp,0x18
c001b0d7:	6a 0a                	push   0xa
c001b0d9:	e8 df d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b0de:	83 c4 1c             	add    esp,0x1c
c001b0e1:	0f b6 c0             	movzx  eax,al
c001b0e4:	c1 e8 07             	shr    eax,0x7
c001b0e7:	c3                   	ret    

c001b0e8 <RTC::completeRTCRefresh()>:
c001b0e8:	55                   	push   ebp
c001b0e9:	57                   	push   edi
c001b0ea:	56                   	push   esi
c001b0eb:	53                   	push   ebx
c001b0ec:	83 ec 3c             	sub    esp,0x3c
c001b0ef:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b0f5:	83 ec 0c             	sub    esp,0xc
c001b0f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b0fc:	e8 d3 ff ff ff       	call   c001b0d4 <RTC::get_update_in_progress_flag()>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	84 c0                	test   al,al
c001b106:	74 0e                	je     c001b116 <RTC::completeRTCRefresh()+0x2e>
c001b108:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b10e:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b114:	73 df                	jae    c001b0f5 <RTC::completeRTCRefresh()+0xd>
c001b116:	83 ec 0c             	sub    esp,0xc
c001b119:	6a 00                	push   0x0
c001b11b:	e8 9d d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b120:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b127:	89 c5                	mov    ebp,eax
c001b129:	e8 8f d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b12e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b135:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b139:	e8 7f d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b13e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b145:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b149:	e8 6f d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b14e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b155:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b159:	e8 5f d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b15e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b165:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b169:	e8 4f d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b16e:	0f b6 c0             	movzx  eax,al
c001b171:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b175:	83 c4 10             	add    esp,0x10
c001b178:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b185:	e8 4a ff ff ff       	call   c001b0d4 <RTC::get_update_in_progress_flag()>
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	84 c0                	test   al,al
c001b18f:	74 0e                	je     c001b19f <RTC::completeRTCRefresh()+0xb7>
c001b191:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b197:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001b19d:	73 df                	jae    c001b17e <RTC::completeRTCRefresh()+0x96>
c001b19f:	83 ec 0c             	sub    esp,0xc
c001b1a2:	6a 00                	push   0x0
c001b1a4:	e8 14 d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1a9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b1b0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1b4:	e8 04 d9 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1b9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b1c0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1c4:	e8 f4 d8 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1c9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b1d0:	88 c3                	mov    bl,al
c001b1d2:	e8 e6 d8 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1d7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b1de:	89 c6                	mov    esi,eax
c001b1e0:	e8 d8 d8 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1e5:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b1ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1f0:	e8 c8 d8 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b1f5:	89 e9                	mov    ecx,ebp
c001b1f7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1fb:	0f b6 f8             	movzx  edi,al
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	0f b6 eb             	movzx  ebp,bl
c001b204:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b208:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b20d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b212:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b216:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b21a:	0f 94 c0             	sete   al
c001b21d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001b221:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001b225:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b22a:	0f 94 c2             	sete   dl
c001b22d:	21 d0                	and    eax,edx
c001b22f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b233:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b237:	0f 94 c2             	sete   dl
c001b23a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b23e:	21 c2                	and    edx,eax
c001b240:	89 f0                	mov    eax,esi
c001b242:	0f b6 c0             	movzx  eax,al
c001b245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b249:	89 f0                	mov    eax,esi
c001b24b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b24f:	0f 94 c0             	sete   al
c001b252:	21 d0                	and    eax,edx
c001b254:	31 d2                	xor    edx,edx
c001b256:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b25a:	0f 94 c2             	sete   dl
c001b25d:	85 c2                	test   edx,eax
c001b25f:	75 27                	jne    c001b288 <RTC::completeRTCRefresh()+0x1a0>
c001b261:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b265:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001b269:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b26d:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b271:	89 f0                	mov    eax,esi
c001b273:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001b277:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b27b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b27f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b283:	e9 f0 fe ff ff       	jmp    c001b178 <RTC::completeRTCRefresh()+0x90>
c001b288:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001b28c:	75 d3                	jne    c001b261 <RTC::completeRTCRefresh()+0x179>
c001b28e:	83 ec 0c             	sub    esp,0xc
c001b291:	6a 0b                	push   0xb
c001b293:	e8 25 d8 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b298:	83 c4 10             	add    esp,0x10
c001b29b:	a8 04                	test   al,0x4
c001b29d:	75 7a                	jne    c001b319 <RTC::completeRTCRefresh()+0x231>
c001b29f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b2a7:	83 e1 0f             	and    ecx,0xf
c001b2aa:	c1 ea 04             	shr    edx,0x4
c001b2ad:	83 e6 0f             	and    esi,0xf
c001b2b0:	6b d2 0a             	imul   edx,edx,0xa
c001b2b3:	c1 ef 04             	shr    edi,0x4
c001b2b6:	01 d1                	add    ecx,edx
c001b2b8:	6b ff 0a             	imul   edi,edi,0xa
c001b2bb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b2bf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b2c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2c7:	c1 ea 04             	shr    edx,0x4
c001b2ca:	83 e1 0f             	and    ecx,0xf
c001b2cd:	6b d2 0a             	imul   edx,edx,0xa
c001b2d0:	01 d1                	add    ecx,edx
c001b2d2:	89 ea                	mov    edx,ebp
c001b2d4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b2d8:	c1 ea 04             	shr    edx,0x4
c001b2db:	89 d9                	mov    ecx,ebx
c001b2dd:	83 e2 07             	and    edx,0x7
c001b2e0:	83 e1 0f             	and    ecx,0xf
c001b2e3:	6b d2 0a             	imul   edx,edx,0xa
c001b2e6:	83 e3 80             	and    ebx,0xffffff80
c001b2e9:	01 d1                	add    ecx,edx
c001b2eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2ef:	09 cb                	or     ebx,ecx
c001b2f1:	c1 ea 04             	shr    edx,0x4
c001b2f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2f8:	6b d2 0a             	imul   edx,edx,0xa
c001b2fb:	83 e1 0f             	and    ecx,0xf
c001b2fe:	01 d6                	add    esi,edx
c001b300:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b304:	c1 ea 04             	shr    edx,0x4
c001b307:	6b d2 0a             	imul   edx,edx,0xa
c001b30a:	01 d1                	add    ecx,edx
c001b30c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b310:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b314:	83 e2 0f             	and    edx,0xf
c001b317:	01 d7                	add    edi,edx
c001b319:	a8 02                	test   al,0x2
c001b31b:	75 15                	jne    c001b332 <RTC::completeRTCRefresh()+0x24a>
c001b31d:	f6 c3 80             	test   bl,0x80
c001b320:	74 10                	je     c001b332 <RTC::completeRTCRefresh()+0x24a>
c001b322:	83 e3 7f             	and    ebx,0x7f
c001b325:	b9 18 00 00 00       	mov    ecx,0x18
c001b32a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b32d:	99                   	cdq    
c001b32e:	f7 f9                	idiv   ecx
c001b330:	88 d3                	mov    bl,dl
c001b332:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001b338:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001b33e:	77 06                	ja     c001b346 <RTC::completeRTCRefresh()+0x25e>
c001b340:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b346:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b34b:	31 c9                	xor    ecx,ecx
c001b34d:	c1 e0 10             	shl    eax,0x10
c001b350:	89 cf                	mov    edi,ecx
c001b352:	c1 e5 10             	shl    ebp,0x10
c001b355:	31 d2                	xor    edx,edx
c001b357:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b35d:	09 c7                	or     edi,eax
c001b35f:	89 f0                	mov    eax,esi
c001b361:	89 f9                	mov    ecx,edi
c001b363:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b367:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b36b:	88 c2                	mov    dl,al
c001b36d:	88 d9                	mov    cl,bl
c001b36f:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001b373:	0f b7 c2             	movzx  eax,dx
c001b376:	09 e8                	or     eax,ebp
c001b378:	89 c2                	mov    edx,eax
c001b37a:	50                   	push   eax
c001b37b:	50                   	push   eax
c001b37c:	51                   	push   ecx
c001b37d:	52                   	push   edx
c001b37e:	e8 b9 de fe ff       	call   c000923c <KeDatetimeToSeconds(datetime_t)>
c001b383:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b387:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b38d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b393:	83 c4 4c             	add    esp,0x4c
c001b396:	5b                   	pop    ebx
c001b397:	5e                   	pop    esi
c001b398:	5f                   	pop    edi
c001b399:	5d                   	pop    ebp
c001b39a:	c3                   	ret    
c001b39b:	90                   	nop

c001b39c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b39c:	55                   	push   ebp
c001b39d:	57                   	push   edi
c001b39e:	56                   	push   esi
c001b39f:	53                   	push   ebx
c001b3a0:	83 ec 34             	sub    esp,0x34
c001b3a3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b3a7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b3ab:	6a 00                	push   0x0
c001b3ad:	89 fb                	mov    ebx,edi
c001b3af:	6a 00                	push   0x0
c001b3b1:	e8 5b d7 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3b6:	5d                   	pop    ebp
c001b3b7:	58                   	pop    eax
c001b3b8:	6a 00                	push   0x0
c001b3ba:	6a 02                	push   0x2
c001b3bc:	e8 50 d7 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b3c1:	31 d2                	xor    edx,edx
c001b3c3:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b3ca:	89 f9                	mov    ecx,edi
c001b3cc:	89 f8                	mov    eax,edi
c001b3ce:	c1 e9 10             	shr    ecx,0x10
c001b3d1:	0f b6 c4             	movzx  eax,ah
c001b3d4:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b3d8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b3dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3e0:	b9 64 00 00 00       	mov    ecx,0x64
c001b3e5:	89 f0                	mov    eax,esi
c001b3e7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b3eb:	89 f0                	mov    eax,esi
c001b3ed:	0f b6 c4             	movzx  eax,ah
c001b3f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b3f4:	89 f0                	mov    eax,esi
c001b3f6:	c1 e8 10             	shr    eax,0x10
c001b3f9:	f7 f1                	div    ecx
c001b3fb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b3ff:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b403:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b407:	e8 b1 d6 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	89 c5                	mov    ebp,eax
c001b411:	a8 04                	test   al,0x4
c001b413:	75 6e                	jne    c001b483 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b415:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b419:	31 d2                	xor    edx,edx
c001b41b:	0f b6 c1             	movzx  eax,cl
c001b41e:	b9 0a 00 00 00       	mov    ecx,0xa
c001b423:	f7 f1                	div    ecx
c001b425:	c1 e0 04             	shl    eax,0x4
c001b428:	09 d0                	or     eax,edx
c001b42a:	31 d2                	xor    edx,edx
c001b42c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b430:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b435:	f7 f1                	div    ecx
c001b437:	c1 e0 04             	shl    eax,0x4
c001b43a:	09 d0                	or     eax,edx
c001b43c:	31 d2                	xor    edx,edx
c001b43e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b442:	0f b6 c3             	movzx  eax,bl
c001b445:	f7 f1                	div    ecx
c001b447:	c1 e0 04             	shl    eax,0x4
c001b44a:	09 d0                	or     eax,edx
c001b44c:	31 d2                	xor    edx,edx
c001b44e:	89 c3                	mov    ebx,eax
c001b450:	89 f0                	mov    eax,esi
c001b452:	0f b6 c0             	movzx  eax,al
c001b455:	f7 f1                	div    ecx
c001b457:	c1 e0 04             	shl    eax,0x4
c001b45a:	09 d0                	or     eax,edx
c001b45c:	31 d2                	xor    edx,edx
c001b45e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b462:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b467:	f7 f1                	div    ecx
c001b469:	c1 e0 04             	shl    eax,0x4
c001b46c:	09 d0                	or     eax,edx
c001b46e:	31 d2                	xor    edx,edx
c001b470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b474:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b478:	f7 f1                	div    ecx
c001b47a:	c1 e0 04             	shl    eax,0x4
c001b47d:	09 d0                	or     eax,edx
c001b47f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b483:	83 e5 02             	and    ebp,0x2
c001b486:	75 1e                	jne    c001b4a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b488:	0f b6 c3             	movzx  eax,bl
c001b48b:	83 f8 0b             	cmp    eax,0xb
c001b48e:	76 10                	jbe    c001b4a0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b490:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b493:	88 d3                	mov    bl,dl
c001b495:	84 d2                	test   dl,dl
c001b497:	75 02                	jne    c001b49b <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b499:	b3 0c                	mov    bl,0xc
c001b49b:	83 cb 80             	or     ebx,0xffffff80
c001b49e:	eb 06                	jmp    c001b4a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b4a0:	85 c0                	test   eax,eax
c001b4a2:	75 02                	jne    c001b4a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b4a4:	b3 0c                	mov    bl,0xc
c001b4a6:	0f b6 db             	movzx  ebx,bl
c001b4a9:	50                   	push   eax
c001b4aa:	50                   	push   eax
c001b4ab:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b4b0:	52                   	push   edx
c001b4b1:	6a 00                	push   0x0
c001b4b3:	e8 59 d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4b8:	5a                   	pop    edx
c001b4b9:	59                   	pop    ecx
c001b4ba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4bf:	50                   	push   eax
c001b4c0:	6a 02                	push   0x2
c001b4c2:	e8 4a d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4c7:	5e                   	pop    esi
c001b4c8:	5f                   	pop    edi
c001b4c9:	53                   	push   ebx
c001b4ca:	6a 04                	push   0x4
c001b4cc:	e8 40 d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4d1:	5d                   	pop    ebp
c001b4d2:	58                   	pop    eax
c001b4d3:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b4d8:	52                   	push   edx
c001b4d9:	6a 07                	push   0x7
c001b4db:	e8 31 d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4e0:	58                   	pop    eax
c001b4e1:	5a                   	pop    edx
c001b4e2:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b4e7:	50                   	push   eax
c001b4e8:	6a 08                	push   0x8
c001b4ea:	e8 22 d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4ef:	59                   	pop    ecx
c001b4f0:	5b                   	pop    ebx
c001b4f1:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b4f6:	55                   	push   ebp
c001b4f7:	6a 09                	push   0x9
c001b4f9:	e8 13 d6 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b4fe:	5e                   	pop    esi
c001b4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b503:	e8 e0 fb ff ff       	call   c001b0e8 <RTC::completeRTCRefresh()>
c001b508:	83 c4 3c             	add    esp,0x3c
c001b50b:	b0 01                	mov    al,0x1
c001b50d:	5b                   	pop    ebx
c001b50e:	5e                   	pop    esi
c001b50f:	5f                   	pop    edi
c001b510:	5d                   	pop    ebp
c001b511:	c3                   	ret    

c001b512 <rtcIRQHandler(regs*, void*)>:
c001b512:	53                   	push   ebx
c001b513:	83 ec 14             	sub    esp,0x14
c001b516:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b51a:	6a 0c                	push   0xc
c001b51c:	e8 9c d5 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b521:	83 c4 10             	add    esp,0x10
c001b524:	a8 80                	test   al,0x80
c001b526:	74 24                	je     c001b54c <rtcIRQHandler(regs*, void*)+0x3a>
c001b528:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b52f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b536:	66 ff 05 a0 eb 02 c0 	inc    WORD PTR ds:0xc002eba0
c001b53d:	75 0d                	jne    c001b54c <rtcIRQHandler(regs*, void*)+0x3a>
c001b53f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b543:	83 c4 08             	add    esp,0x8
c001b546:	5b                   	pop    ebx
c001b547:	e9 9c fb ff ff       	jmp    c001b0e8 <RTC::completeRTCRefresh()>
c001b54c:	83 c4 08             	add    esp,0x8
c001b54f:	5b                   	pop    ebx
c001b550:	c3                   	ret    
c001b551:	90                   	nop

c001b552 <RTC::RTC()>:
c001b552:	83 ec 1c             	sub    esp,0x1c
c001b555:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b559:	83 ec 08             	sub    esp,0x8
c001b55c:	68 cf 57 02 c0       	push   0xc00257cf
c001b561:	50                   	push   eax
c001b562:	e8 4f db fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b567:	83 c4 10             	add    esp,0x10
c001b56a:	ba ec 57 02 c0       	mov    edx,0xc00257ec
c001b56f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b573:	89 10                	mov    DWORD PTR [eax],edx
c001b575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b580:	6a 01                	push   0x1
c001b582:	68 12 b5 01 c0       	push   0xc001b512
c001b587:	6a 08                	push   0x8
c001b589:	50                   	push   eax
c001b58a:	e8 71 e4 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b58f:	83 c4 20             	add    esp,0x20
c001b592:	89 c2                	mov    edx,eax
c001b594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b598:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b59e:	fa                   	cli    
c001b59f:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b5a4:	83 c0 01             	add    eax,0x1
c001b5a7:	a3 70 ca 02 c0       	mov    ds:0xc002ca70,eax
c001b5ac:	83 ec 0c             	sub    esp,0xc
c001b5af:	6a 0b                	push   0xb
c001b5b1:	e8 07 d5 ff ff       	call   c0018abd <x86ReadCMOS(unsigned char)>
c001b5b6:	83 c4 10             	add    esp,0x10
c001b5b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b5bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b5c1:	83 c8 10             	or     eax,0x10
c001b5c4:	0f b6 c0             	movzx  eax,al
c001b5c7:	83 ec 08             	sub    esp,0x8
c001b5ca:	50                   	push   eax
c001b5cb:	6a 0b                	push   0xb
c001b5cd:	e8 3f d5 ff ff       	call   c0018b11 <x86WriteCMOS(unsigned char, unsigned char)>
c001b5d2:	83 c4 10             	add    esp,0x10
c001b5d5:	83 ec 0c             	sub    esp,0xc
c001b5d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5dc:	e8 07 fb ff ff       	call   c001b0e8 <RTC::completeRTCRefresh()>
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	f0 83 2d 70 ca 02 c0 01 	lock sub DWORD PTR ds:0xc002ca70,0x1
c001b5ec:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c001b5f1:	85 c0                	test   eax,eax
c001b5f3:	75 01                	jne    c001b5f6 <RTC::RTC()+0xa4>
c001b5f5:	fb                   	sti    
c001b5f6:	90                   	nop
c001b5f7:	83 c4 1c             	add    esp,0x1c
c001b5fa:	c3                   	ret    
c001b5fb:	90                   	nop

c001b5fc <HalConsoleScroll(int, int)>:
c001b5fc:	83 ec 10             	sub    esp,0x10
c001b5ff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b607:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b60f:	90                   	nop
c001b610:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b615:	0f 8f e1 00 00 00    	jg     c001b6fc <HalConsoleScroll(int, int)+0x100>
c001b61b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b623:	90                   	nop
c001b624:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b62c:	0f 8f be 00 00 00    	jg     c001b6f0 <HalConsoleScroll(int, int)+0xf4>
c001b632:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b636:	89 d0                	mov    eax,edx
c001b638:	c1 e0 02             	shl    eax,0x2
c001b63b:	01 d0                	add    eax,edx
c001b63d:	c1 e0 05             	shl    eax,0x5
c001b640:	89 c2                	mov    edx,eax
c001b642:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b646:	01 d0                	add    eax,edx
c001b648:	89 c2                	mov    edx,eax
c001b64a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b64e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b651:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b655:	89 d0                	mov    eax,edx
c001b657:	c1 e0 02             	shl    eax,0x2
c001b65a:	01 d0                	add    eax,edx
c001b65c:	c1 e0 05             	shl    eax,0x5
c001b65f:	89 c2                	mov    edx,eax
c001b661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b665:	01 d0                	add    eax,edx
c001b667:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b66d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b671:	01 c2                	add    edx,eax
c001b673:	8a 01                	mov    al,BYTE PTR [ecx]
c001b675:	88 02                	mov    BYTE PTR [edx],al
c001b677:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b67c:	75 66                	jne    c001b6e4 <HalConsoleScroll(int, int)+0xe8>
c001b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b682:	83 e0 01             	and    eax,0x1
c001b685:	74 39                	je     c001b6c0 <HalConsoleScroll(int, int)+0xc4>
c001b687:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b68b:	83 e0 0f             	and    eax,0xf
c001b68e:	88 c2                	mov    dl,al
c001b690:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b694:	c1 e0 04             	shl    eax,0x4
c001b697:	09 d0                	or     eax,edx
c001b699:	88 c1                	mov    cl,al
c001b69b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b69f:	89 d0                	mov    eax,edx
c001b6a1:	c1 e0 02             	shl    eax,0x2
c001b6a4:	01 d0                	add    eax,edx
c001b6a6:	c1 e0 05             	shl    eax,0x5
c001b6a9:	89 c2                	mov    edx,eax
c001b6ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6af:	01 d0                	add    eax,edx
c001b6b1:	89 c2                	mov    edx,eax
c001b6b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6b7:	01 d0                	add    eax,edx
c001b6b9:	88 ca                	mov    dl,cl
c001b6bb:	88 10                	mov    BYTE PTR [eax],dl
c001b6bd:	eb 25                	jmp    c001b6e4 <HalConsoleScroll(int, int)+0xe8>
c001b6bf:	90                   	nop
c001b6c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6c4:	89 d0                	mov    eax,edx
c001b6c6:	c1 e0 02             	shl    eax,0x2
c001b6c9:	01 d0                	add    eax,edx
c001b6cb:	c1 e0 05             	shl    eax,0x5
c001b6ce:	89 c2                	mov    edx,eax
c001b6d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6d4:	01 d0                	add    eax,edx
c001b6d6:	89 c2                	mov    edx,eax
c001b6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6dc:	01 d0                	add    eax,edx
c001b6de:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6e4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b6e9:	e9 36 ff ff ff       	jmp    c001b624 <HalConsoleScroll(int, int)+0x28>
c001b6ee:	66 90                	xchg   ax,ax
c001b6f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b6f5:	e9 16 ff ff ff       	jmp    c001b610 <HalConsoleScroll(int, int)+0x14>
c001b6fa:	66 90                	xchg   ax,ax
c001b6fc:	90                   	nop
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	c3                   	ret    
c001b701:	8d 76 00             	lea    esi,[esi+0x0]

c001b704 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b704:	83 ec 14             	sub    esp,0x14
c001b707:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b70b:	88 04 24             	mov    BYTE PTR [esp],al
c001b70e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b711:	0f b6 c0             	movzx  eax,al
c001b714:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b718:	89 d1                	mov    ecx,edx
c001b71a:	83 e1 0f             	and    ecx,0xf
c001b71d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b721:	c1 e2 04             	shl    edx,0x4
c001b724:	0f b6 d2             	movzx  edx,dl
c001b727:	09 ca                	or     edx,ecx
c001b729:	c1 e2 08             	shl    edx,0x8
c001b72c:	09 d0                	or     eax,edx
c001b72e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b733:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b73b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b73f:	89 d0                	mov    eax,edx
c001b741:	c1 e0 02             	shl    eax,0x2
c001b744:	01 d0                	add    eax,edx
c001b746:	c1 e0 04             	shl    eax,0x4
c001b749:	89 c2                	mov    edx,eax
c001b74b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b74f:	01 d0                	add    eax,edx
c001b751:	01 c0                	add    eax,eax
c001b753:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b757:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b75b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b760:	66 89 02             	mov    WORD PTR [edx],ax
c001b763:	90                   	nop
c001b764:	83 c4 14             	add    esp,0x14
c001b767:	c3                   	ret    

c001b768 <HalConsoleCursorUpdate(int, int)>:
c001b768:	83 ec 20             	sub    esp,0x20
c001b76b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b76f:	89 c2                	mov    edx,eax
c001b771:	c1 e2 02             	shl    edx,0x2
c001b774:	01 d0                	add    eax,edx
c001b776:	c1 e0 04             	shl    eax,0x4
c001b779:	89 c2                	mov    edx,eax
c001b77b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b77f:	01 d0                	add    eax,edx
c001b781:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b786:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b78d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b792:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b796:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b79a:	ee                   	out    dx,al
c001b79b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b7a0:	0f b6 c0             	movzx  eax,al
c001b7a3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b7aa:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b7ae:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b7b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7b6:	ee                   	out    dx,al
c001b7b7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b7be:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b7c3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b7c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7cb:	ee                   	out    dx,al
c001b7cc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b7d1:	c1 e8 08             	shr    eax,0x8
c001b7d4:	0f b6 c0             	movzx  eax,al
c001b7d7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b7de:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b7e2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b7e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7ea:	ee                   	out    dx,al
c001b7eb:	90                   	nop
c001b7ec:	83 c4 20             	add    esp,0x20
c001b7ef:	c3                   	ret    

c001b7f0 <FAT::getName()>:
c001b7f0:	b8 20 58 02 c0       	mov    eax,0xc0025820
c001b7f5:	c3                   	ret    
c001b7f6:	66 90                	xchg   ax,ax

c001b7f8 <FAT::tell(void*, unsigned long long*)>:
c001b7f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b7fd:	75 09                	jne    c001b808 <FAT::tell(void*, unsigned long long*)+0x10>
c001b7ff:	b8 04 00 00 00       	mov    eax,0x4
c001b804:	c3                   	ret    
c001b805:	8d 76 00             	lea    esi,[esi+0x0]
c001b808:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b80d:	75 09                	jne    c001b818 <FAT::tell(void*, unsigned long long*)+0x20>
c001b80f:	b8 04 00 00 00       	mov    eax,0x4
c001b814:	c3                   	ret    
c001b815:	8d 76 00             	lea    esi,[esi+0x0]
c001b818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b81c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b81f:	ba 00 00 00 00       	mov    edx,0x0
c001b824:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b828:	89 01                	mov    DWORD PTR [ecx],eax
c001b82a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b82d:	b8 00 00 00 00       	mov    eax,0x0
c001b832:	c3                   	ret    
c001b833:	90                   	nop

c001b834 <FAT::stat(void*, unsigned long long*)>:
c001b834:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b839:	75 09                	jne    c001b844 <FAT::stat(void*, unsigned long long*)+0x10>
c001b83b:	b8 04 00 00 00       	mov    eax,0x4
c001b840:	c3                   	ret    
c001b841:	8d 76 00             	lea    esi,[esi+0x0]
c001b844:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b849:	75 09                	jne    c001b854 <FAT::stat(void*, unsigned long long*)+0x20>
c001b84b:	b8 04 00 00 00       	mov    eax,0x4
c001b850:	c3                   	ret    
c001b851:	8d 76 00             	lea    esi,[esi+0x0]
c001b854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b858:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b85b:	ba 00 00 00 00       	mov    edx,0x0
c001b860:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b864:	89 01                	mov    DWORD PTR [ecx],eax
c001b866:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b869:	b8 00 00 00 00       	mov    eax,0x0
c001b86e:	c3                   	ret    
c001b86f:	90                   	nop

c001b870 <FAT::~FAT()>:
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	ba 6c 58 02 c0       	mov    edx,0xc002586c
c001b878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87c:	89 10                	mov    DWORD PTR [eax],edx
c001b87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	50                   	push   eax
c001b886:	e8 61 c5 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	90                   	nop
c001b88f:	83 c4 0c             	add    esp,0xc
c001b892:	c3                   	ret    
c001b893:	90                   	nop

c001b894 <FAT::~FAT()>:
c001b894:	83 ec 0c             	sub    esp,0xc
c001b897:	83 ec 0c             	sub    esp,0xc
c001b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b89e:	e8 cd ff ff ff       	call   c001b870 <FAT::~FAT()>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	83 ec 08             	sub    esp,0x8
c001b8a9:	6a 08                	push   0x8
c001b8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8af:	e8 fc 1a ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	83 c4 0c             	add    esp,0xc
c001b8ba:	c3                   	ret    
c001b8bb:	90                   	nop

c001b8bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b8bc:	83 ec 1c             	sub    esp,0x1c
c001b8bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b8c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b8cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8cf:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b8d6:	83 f8 ff             	cmp    eax,0xffffffff
c001b8d9:	75 35                	jne    c001b910 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b8db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b8df:	88 c2                	mov    dl,al
c001b8e1:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b8e6:	01 d0                	add    eax,edx
c001b8e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b8ec:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b8f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b8f6:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b8fd:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b902:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b906:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b90d:	eb 19                	jmp    c001b928 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b90f:	90                   	nop
c001b910:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b914:	88 c2                	mov    dl,al
c001b916:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b91a:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b921:	01 d0                	add    eax,edx
c001b923:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b927:	90                   	nop
c001b928:	83 ec 04             	sub    esp,0x4
c001b92b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b92f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b933:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b937:	50                   	push   eax
c001b938:	e8 7b 98 fe ff       	call   c00051b8 <f_getlabel>
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b944:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b949:	75 09                	jne    c001b954 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b94b:	b8 00 00 00 00       	mov    eax,0x0
c001b950:	eb 0a                	jmp    c001b95c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b952:	66 90                	xchg   ax,ax
c001b954:	b8 01 00 00 00       	mov    eax,0x1
c001b959:	8d 76 00             	lea    esi,[esi+0x0]
c001b95c:	83 c4 1c             	add    esp,0x1c
c001b95f:	c3                   	ret    

c001b960 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b960:	57                   	push   edi
c001b961:	83 ec 58             	sub    esp,0x58
c001b964:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b96c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b970:	b8 00 00 00 00       	mov    eax,0x0
c001b975:	b9 0f 00 00 00       	mov    ecx,0xf
c001b97a:	fc                   	cld    
c001b97b:	89 d7                	mov    edi,edx
c001b97d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b97f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b983:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b98a:	83 f8 ff             	cmp    eax,0xffffffff
c001b98d:	75 35                	jne    c001b9c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b98f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b993:	88 c2                	mov    dl,al
c001b995:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b99a:	01 d0                	add    eax,edx
c001b99c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b9a0:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001b9a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b9aa:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001b9b1:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001b9b6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b9ba:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001b9c1:	eb 19                	jmp    c001b9dc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b9c3:	90                   	nop
c001b9c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b9c8:	88 c2                	mov    dl,al
c001b9ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b9ce:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001b9d5:	01 d0                	add    eax,edx
c001b9d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b9db:	90                   	nop
c001b9dc:	83 ec 08             	sub    esp,0x8
c001b9df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b9e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9e7:	50                   	push   eax
c001b9e8:	e8 53 4e fe ff       	call   c0000840 <strcat>
c001b9ed:	83 c4 10             	add    esp,0x10
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b9f7:	50                   	push   eax
c001b9f8:	e8 0c 99 fe ff       	call   c0005309 <f_setlabel>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ba04:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ba09:	75 09                	jne    c001ba14 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ba0b:	b8 00 00 00 00       	mov    eax,0x0
c001ba10:	eb 0a                	jmp    c001ba1c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ba12:	66 90                	xchg   ax,ax
c001ba14:	b8 01 00 00 00       	mov    eax,0x1
c001ba19:	8d 76 00             	lea    esi,[esi+0x0]
c001ba1c:	83 c4 58             	add    esp,0x58
c001ba1f:	5f                   	pop    edi
c001ba20:	c3                   	ret    
c001ba21:	90                   	nop
c001ba22:	66 90                	xchg   ax,ax

c001ba24 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ba24:	83 ec 2c             	sub    esp,0x2c
c001ba27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ba2f:	83 ec 08             	sub    esp,0x8
c001ba32:	68 44 58 02 c0       	push   0xc0025844
c001ba37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba3b:	e8 10 4d fe ff       	call   c0000750 <strcmp>
c001ba40:	83 c4 10             	add    esp,0x10
c001ba43:	85 c0                	test   eax,eax
c001ba45:	0f 94 c0             	sete   al
c001ba48:	0f b6 c0             	movzx  eax,al
c001ba4b:	85 c0                	test   eax,eax
c001ba4d:	74 0d                	je     c001ba5c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ba4f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ba57:	e9 c0 00 00 00       	jmp    c001bb1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba5c:	83 ec 08             	sub    esp,0x8
c001ba5f:	68 36 58 02 c0       	push   0xc0025836
c001ba64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba68:	e8 e3 4c fe ff       	call   c0000750 <strcmp>
c001ba6d:	83 c4 10             	add    esp,0x10
c001ba70:	85 c0                	test   eax,eax
c001ba72:	0f 94 c0             	sete   al
c001ba75:	0f b6 c0             	movzx  eax,al
c001ba78:	85 c0                	test   eax,eax
c001ba7a:	74 10                	je     c001ba8c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001ba7c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ba84:	e9 93 00 00 00       	jmp    c001bb1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001ba89:	8d 76 00             	lea    esi,[esi+0x0]
c001ba8c:	83 ec 08             	sub    esp,0x8
c001ba8f:	68 3c 58 02 c0       	push   0xc002583c
c001ba94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba98:	e8 b3 4c fe ff       	call   c0000750 <strcmp>
c001ba9d:	83 c4 10             	add    esp,0x10
c001baa0:	85 c0                	test   eax,eax
c001baa2:	0f 94 c0             	sete   al
c001baa5:	0f b6 c0             	movzx  eax,al
c001baa8:	85 c0                	test   eax,eax
c001baaa:	74 0c                	je     c001bab8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001baac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bab4:	eb 66                	jmp    c001bb1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bab6:	66 90                	xchg   ax,ax
c001bab8:	83 ec 08             	sub    esp,0x8
c001babb:	68 fc 27 02 c0       	push   0xc00227fc
c001bac0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bac4:	e8 87 4c fe ff       	call   c0000750 <strcmp>
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	85 c0                	test   eax,eax
c001bace:	0f 94 c0             	sete   al
c001bad1:	0f b6 c0             	movzx  eax,al
c001bad4:	85 c0                	test   eax,eax
c001bad6:	74 0c                	je     c001bae4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bad8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bae0:	eb 3a                	jmp    c001bb1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bae2:	66 90                	xchg   ax,ax
c001bae4:	83 ec 08             	sub    esp,0x8
c001bae7:	68 42 58 02 c0       	push   0xc0025842
c001baec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001baf0:	e8 5b 4c fe ff       	call   c0000750 <strcmp>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	85 c0                	test   eax,eax
c001bafa:	0f 94 c0             	sete   al
c001bafd:	0f b6 c0             	movzx  eax,al
c001bb00:	85 c0                	test   eax,eax
c001bb02:	74 0c                	je     c001bb10 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bb04:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bb0c:	eb 0e                	jmp    c001bb1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bb0e:	66 90                	xchg   ax,ax
c001bb10:	b8 08 00 00 00       	mov    eax,0x8
c001bb15:	e9 ea 00 00 00       	jmp    c001bc04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bb1a:	66 90                	xchg   ax,ax
c001bb1c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bb23:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bb28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb2c:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bb33:	83 f8 ff             	cmp    eax,0xffffffff
c001bb36:	75 34                	jne    c001bb6c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bb38:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bb3c:	88 c2                	mov    dl,al
c001bb3e:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb43:	01 d0                	add    eax,edx
c001bb45:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bb49:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bb4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb53:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bb5a:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bb5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bb63:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bb6a:	eb 18                	jmp    c001bb84 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bb6c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bb70:	88 c2                	mov    dl,al
c001bb72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb76:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bb7d:	01 d0                	add    eax,edx
c001bb7f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bb83:	90                   	nop
c001bb84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb88:	88 04 24             	mov    BYTE PTR [esp],al
c001bb8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bb8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bb9b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001bba0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bba8:	83 ec 0c             	sub    esp,0xc
c001bbab:	68 00 20 00 00       	push   0x2000
c001bbb0:	e8 e2 3c ff ff       	call   c000f897 <malloc>
c001bbb5:	83 c4 10             	add    esp,0x10
c001bbb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbbc:	68 00 20 00 00       	push   0x2000
c001bbc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bbc5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbc9:	50                   	push   eax
c001bbca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001bbce:	50                   	push   eax
c001bbcf:	e8 32 9a fe ff       	call   c0005606 <f_mkfs>
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bbdb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bbe0:	75 0a                	jne    c001bbec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001bbe2:	b8 00 00 00 00       	mov    eax,0x0
c001bbe7:	eb 1b                	jmp    c001bc04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001bbf1:	75 09                	jne    c001bbfc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001bbf3:	b8 09 00 00 00       	mov    eax,0x9
c001bbf8:	eb 0a                	jmp    c001bc04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bbfa:	66 90                	xchg   ax,ax
c001bbfc:	b8 01 00 00 00       	mov    eax,0x1
c001bc01:	8d 76 00             	lea    esi,[esi+0x0]
c001bc04:	83 c4 2c             	add    esp,0x2c
c001bc07:	c3                   	ret    

c001bc08 <FAT::tryMount(LogicalDisk*, int)>:
c001bc08:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001bc0e:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bc13:	83 f8 14             	cmp    eax,0x14
c001bc16:	75 18                	jne    c001bc30 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bc18:	83 ec 0c             	sub    esp,0xc
c001bc1b:	68 48 58 02 c0       	push   0xc0025848
c001bc20:	e8 cf 40 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	b0 00                	mov    al,0x0
c001bc2a:	e9 ed 01 00 00       	jmp    c001be1c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc2f:	90                   	nop
c001bc30:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bc37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bc3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc43:	3d 00 02 00 00       	cmp    eax,0x200
c001bc48:	74 0a                	je     c001bc54 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bc4a:	b0 00                	mov    al,0x0
c001bc4c:	e9 cb 01 00 00       	jmp    c001be1c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc51:	8d 76 00             	lea    esi,[esi+0x0]
c001bc54:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bc5c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bc63:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001bc6a:	83 f8 ff             	cmp    eax,0xffffffff
c001bc6d:	74 09                	je     c001bc78 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001bc6f:	b0 01                	mov    al,0x1
c001bc71:	e9 a6 01 00 00       	jmp    c001be1c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bc76:	66 90                	xchg   ax,ax
c001bc78:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bc82:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bc8a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bc91:	88 c2                	mov    dl,al
c001bc93:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bc98:	01 d0                	add    eax,edx
c001bc9a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bca1:	8b 15 c0 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebc0
c001bca7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bcae:	89 14 85 e0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1420],edx
c001bcb5:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001bcba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bcc1:	89 14 85 60 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13a0],edx
c001bcc8:	83 ec 0c             	sub    esp,0xc
c001bccb:	68 34 02 00 00       	push   0x234
c001bcd0:	e8 c2 3b ff ff       	call   c000f897 <malloc>
c001bcd5:	83 c4 10             	add    esp,0x10
c001bcd8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bcdf:	83 ec 04             	sub    esp,0x4
c001bce2:	6a 00                	push   0x0
c001bce4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bceb:	50                   	push   eax
c001bcec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bcf3:	e8 e9 80 fe ff       	call   c0003de1 <f_mount>
c001bcf8:	83 c4 10             	add    esp,0x10
c001bcfb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bd02:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bd0a:	74 1c                	je     c001bd28 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bd16:	e8 9c 3b ff ff       	call   c000f8b7 <rfree>
c001bd1b:	83 c4 10             	add    esp,0x10
c001bd1e:	b0 00                	mov    al,0x0
c001bd20:	e9 f7 00 00 00       	jmp    c001be1c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bd25:	8d 76 00             	lea    esi,[esi+0x0]
c001bd28:	83 ec 04             	sub    esp,0x4
c001bd2b:	68 00 01 00 00       	push   0x100
c001bd30:	6a 00                	push   0x0
c001bd32:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd39:	50                   	push   eax
c001bd3a:	e8 b1 47 fe ff       	call   c00004f0 <memset>
c001bd3f:	83 c4 10             	add    esp,0x10
c001bd42:	83 ec 08             	sub    esp,0x8
c001bd45:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bd4c:	50                   	push   eax
c001bd4d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd54:	50                   	push   eax
c001bd55:	e8 e6 4a fe ff       	call   c0000840 <strcat>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	83 ec 08             	sub    esp,0x8
c001bd60:	68 56 58 02 c0       	push   0xc0025856
c001bd65:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bd6c:	50                   	push   eax
c001bd6d:	e8 ce 4a fe ff       	call   c0000840 <strcat>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	83 ec 04             	sub    esp,0x4
c001bd78:	6a 01                	push   0x1
c001bd7a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001bd81:	50                   	push   eax
c001bd82:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd86:	50                   	push   eax
c001bd87:	e8 b7 80 fe ff       	call   c0003e43 <f_open>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bd96:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001bd9d:	85 c0                	test   eax,eax
c001bd9f:	74 0b                	je     c001bdac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bda1:	78 31                	js     c001bdd4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bda3:	83 e8 04             	sub    eax,0x4
c001bda6:	83 f8 01             	cmp    eax,0x1
c001bda9:	77 29                	ja     c001bdd4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bdab:	90                   	nop
c001bdac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001bdb4:	83 ec 0c             	sub    esp,0xc
c001bdb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdbb:	50                   	push   eax
c001bdbc:	e8 51 88 fe ff       	call   c0004612 <f_close>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	90                   	nop
c001bdc5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001bdcd:	85 c0                	test   eax,eax
c001bdcf:	74 43                	je     c001be14 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001bdd1:	eb 31                	jmp    c001be04 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bdd3:	90                   	nop
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bdde:	e8 d4 3a ff ff       	call   c000f8b7 <rfree>
c001bde3:	83 c4 10             	add    esp,0x10
c001bde6:	83 ec 04             	sub    esp,0x4
c001bde9:	6a 00                	push   0x0
c001bdeb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bdf2:	50                   	push   eax
c001bdf3:	6a 00                	push   0x0
c001bdf5:	e8 e7 7f fe ff       	call   c0003de1 <f_mount>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	b0 00                	mov    al,0x0
c001bdff:	eb 1b                	jmp    c001be1c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001be01:	8d 76 00             	lea    esi,[esi+0x0]
c001be04:	a1 c0 eb 02 c0       	mov    eax,ds:0xc002ebc0
c001be09:	83 c0 01             	add    eax,0x1
c001be0c:	a3 c0 eb 02 c0       	mov    ds:0xc002ebc0,eax
c001be11:	8d 76 00             	lea    esi,[esi+0x0]
c001be14:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001be1b:	90                   	nop
c001be1c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001be22:	c3                   	ret    
c001be23:	90                   	nop

c001be24 <FAT::allocateSwapfile(char const*, int)>:
c001be24:	55                   	push   ebp
c001be25:	57                   	push   edi
c001be26:	56                   	push   esi
c001be27:	53                   	push   ebx
c001be28:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001be2e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001be39:	83 ec 0c             	sub    esp,0xc
c001be3c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001be43:	e8 4f 3a ff ff       	call   c000f897 <malloc>
c001be48:	83 c4 10             	add    esp,0x10
c001be4b:	89 c7                	mov    edi,eax
c001be4d:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001be52:	83 ec 04             	sub    esp,0x4
c001be55:	50                   	push   eax
c001be56:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001be5d:	57                   	push   edi
c001be5e:	e8 27 c3 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001be6d:	83 ec 04             	sub    esp,0x4
c001be70:	8d 44 24 13          	lea    eax,[esp+0x13]
c001be74:	50                   	push   eax
c001be75:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be79:	50                   	push   eax
c001be7a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001be81:	e8 24 c6 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001be90:	c1 e0 14             	shl    eax,0x14
c001be93:	89 c7                	mov    edi,eax
c001be95:	89 c5                	mov    ebp,eax
c001be97:	c1 fd 1f             	sar    ebp,0x1f
c001be9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bea2:	89 f9                	mov    ecx,edi
c001bea4:	31 c1                	xor    ecx,eax
c001bea6:	89 cb                	mov    ebx,ecx
c001bea8:	89 e9                	mov    ecx,ebp
c001beaa:	31 d1                	xor    ecx,edx
c001beac:	89 ce                	mov    esi,ecx
c001beae:	89 f0                	mov    eax,esi
c001beb0:	09 d8                	or     eax,ebx
c001beb2:	0f 84 9c 00 00 00    	je     c001bf54 <FAT::allocateSwapfile(char const*, int)+0x130>
c001beb8:	83 ec 0c             	sub    esp,0xc
c001bebb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bec2:	e8 af c4 fe ff       	call   c0008376 <File::unlink()>
c001bec7:	83 c4 10             	add    esp,0x10
c001beca:	83 ec 08             	sub    esp,0x8
c001becd:	6a 12                	push   0x12
c001becf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bed6:	e8 cd c2 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bee5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001beeb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bef2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bef9:	c1 e0 14             	shl    eax,0x14
c001befc:	83 ec 04             	sub    esp,0x4
c001beff:	6a 01                	push   0x1
c001bf01:	50                   	push   eax
c001bf02:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bf09:	e8 8b 95 fe ff       	call   c0005499 <f_expand>
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf18:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf1a:	83 c0 10             	add    eax,0x10
c001bf1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf1f:	83 ec 0c             	sub    esp,0xc
c001bf22:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bf26:	52                   	push   edx
c001bf27:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bf2b:	52                   	push   edx
c001bf2c:	6a 00                	push   0x0
c001bf2e:	68 00 04 00 00       	push   0x400
c001bf33:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bf3a:	ff d0                	call   eax
c001bf3c:	83 c4 20             	add    esp,0x20
c001bf3f:	83 ec 0c             	sub    esp,0xc
c001bf42:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf49:	e8 b8 c2 fe ff       	call   c0008206 <File::close()>
c001bf4e:	83 c4 10             	add    esp,0x10
c001bf51:	8d 76 00             	lea    esi,[esi+0x0]
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	6a 01                	push   0x1
c001bf59:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bf60:	e8 43 c2 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001bf65:	83 c4 10             	add    esp,0x10
c001bf68:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf71:	83 c0 0c             	add    eax,0xc
c001bf74:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf76:	83 ec 0c             	sub    esp,0xc
c001bf79:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bf7d:	52                   	push   edx
c001bf7e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bf82:	52                   	push   edx
c001bf83:	6a 00                	push   0x0
c001bf85:	6a 04                	push   0x4
c001bf87:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bf8e:	ff d0                	call   eax
c001bf90:	83 c4 20             	add    esp,0x20
c001bf93:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bf9a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bfa0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bfa7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bfae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bfb1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bfb8:	83 ec 0c             	sub    esp,0xc
c001bfbb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bfc2:	e8 3f c2 fe ff       	call   c0008206 <File::close()>
c001bfc7:	83 c4 10             	add    esp,0x10
c001bfca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bfd1:	ba 00 00 00 00       	mov    edx,0x0
c001bfd6:	81 c4 3c 04 00 00    	add    esp,0x43c
c001bfdc:	5b                   	pop    ebx
c001bfdd:	5e                   	pop    esi
c001bfde:	5f                   	pop    edi
c001bfdf:	5d                   	pop    ebp
c001bfe0:	c3                   	ret    
c001bfe1:	90                   	nop
c001bfe2:	66 90                	xchg   ax,ax

c001bfe4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001bfe4:	57                   	push   edi
c001bfe5:	56                   	push   esi
c001bfe6:	53                   	push   ebx
c001bfe7:	81 ec 50 02 00 00    	sub    esp,0x250
c001bfed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001bff5:	74 0d                	je     c001c004 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001bff7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001bfff:	75 0f                	jne    c001c010 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	b8 04 00 00 00       	mov    eax,0x4
c001c009:	e9 3a 01 00 00       	jmp    c001c148 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c00e:	66 90                	xchg   ax,ax
c001c010:	83 ec 08             	sub    esp,0x8
c001c013:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c01a:	50                   	push   eax
c001c01b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c022:	e8 b8 88 fe ff       	call   c00048df <f_readdir>
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c031:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c038:	83 ec 0c             	sub    esp,0xc
c001c03b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c042:	83 c0 16             	add    eax,0x16
c001c045:	50                   	push   eax
c001c046:	e8 25 45 fe ff       	call   c0000570 <strlen>
c001c04b:	83 c4 10             	add    esp,0x10
c001c04e:	ba 00 00 00 00       	mov    edx,0x0
c001c053:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c057:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c05b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c062:	0f b6 c0             	movzx  eax,al
c001c065:	83 e0 10             	and    eax,0x10
c001c068:	74 0a                	je     c001c074 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c06a:	b8 02 00 00 00       	mov    eax,0x2
c001c06f:	eb 0b                	jmp    c001c07c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c071:	8d 76 00             	lea    esi,[esi+0x0]
c001c074:	b8 01 00 00 00       	mov    eax,0x1
c001c079:	8d 76 00             	lea    esi,[esi+0x0]
c001c07c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c080:	83 ec 08             	sub    esp,0x8
c001c083:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c08a:	83 c0 16             	add    eax,0x16
c001c08d:	50                   	push   eax
c001c08e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c092:	83 c0 10             	add    eax,0x10
c001c095:	50                   	push   eax
c001c096:	e8 a5 45 fe ff       	call   c0000640 <strcpy>
c001c09b:	83 c4 10             	add    esp,0x10
c001c09e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c0a5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c0ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c0b0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c0b7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c0be:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c0c5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c0cc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c0d3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c0da:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c0e1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c0e8:	89 c6                	mov    esi,eax
c001c0ea:	89 d7                	mov    edi,edx
c001c0ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0ee:	89 c8                	mov    eax,ecx
c001c0f0:	89 fa                	mov    edx,edi
c001c0f2:	89 f3                	mov    ebx,esi
c001c0f4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c0fb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c102:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c109:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c110:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c116:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c11d:	0f be c0             	movsx  eax,al
c001c120:	85 c0                	test   eax,eax
c001c122:	75 08                	jne    c001c12c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c124:	b8 07 00 00 00       	mov    eax,0x7
c001c129:	eb 1d                	jmp    c001c148 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c12b:	90                   	nop
c001c12c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c133:	85 c0                	test   eax,eax
c001c135:	75 09                	jne    c001c140 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c137:	b8 00 00 00 00       	mov    eax,0x0
c001c13c:	eb 0a                	jmp    c001c148 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c13e:	66 90                	xchg   ax,ax
c001c140:	b8 01 00 00 00       	mov    eax,0x1
c001c145:	8d 76 00             	lea    esi,[esi+0x0]
c001c148:	81 c4 50 02 00 00    	add    esp,0x250
c001c14e:	5b                   	pop    ebx
c001c14f:	5e                   	pop    esi
c001c150:	5f                   	pop    edi
c001c151:	c3                   	ret    
c001c152:	66 90                	xchg   ax,ax

c001c154 <FAT::read(void*, unsigned long, void*, int*)>:
c001c154:	83 ec 1c             	sub    esp,0x1c
c001c157:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c15c:	74 0a                	je     c001c168 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c15e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c163:	75 0b                	jne    c001c170 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c165:	8d 76 00             	lea    esi,[esi+0x0]
c001c168:	b8 04 00 00 00       	mov    eax,0x4
c001c16d:	eb 41                	jmp    c001c1b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c16f:	90                   	nop
c001c170:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c174:	50                   	push   eax
c001c175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c179:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c17d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c181:	e8 80 7f fe ff       	call   c0004106 <f_read>
c001c186:	83 c4 10             	add    esp,0x10
c001c189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c18d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c191:	89 c2                	mov    edx,eax
c001c193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c197:	89 10                	mov    DWORD PTR [eax],edx
c001c199:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c19d:	85 c0                	test   eax,eax
c001c19f:	75 07                	jne    c001c1a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c1a1:	b8 00 00 00 00       	mov    eax,0x0
c001c1a6:	eb 08                	jmp    c001c1b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c1a8:	b8 01 00 00 00       	mov    eax,0x1
c001c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b0:	83 c4 1c             	add    esp,0x1c
c001c1b3:	c3                   	ret    

c001c1b4 <FAT::write(void*, unsigned long, void*, int*)>:
c001c1b4:	83 ec 1c             	sub    esp,0x1c
c001c1b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c1bc:	74 0a                	je     c001c1c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c1be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c1c3:	75 0b                	jne    c001c1d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c1c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1c8:	b8 04 00 00 00       	mov    eax,0x4
c001c1cd:	eb 41                	jmp    c001c210 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c1cf:	90                   	nop
c001c1d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c1d4:	50                   	push   eax
c001c1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c1d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c1dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c1e1:	e8 1f 81 fe ff       	call   c0004305 <f_write>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1f1:	89 c2                	mov    edx,eax
c001c1f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c1f7:	89 10                	mov    DWORD PTR [eax],edx
c001c1f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1fd:	85 c0                	test   eax,eax
c001c1ff:	75 07                	jne    c001c208 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c201:	b8 00 00 00 00       	mov    eax,0x0
c001c206:	eb 08                	jmp    c001c210 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c208:	b8 01 00 00 00       	mov    eax,0x1
c001c20d:	8d 76 00             	lea    esi,[esi+0x0]
c001c210:	83 c4 1c             	add    esp,0x1c
c001c213:	c3                   	ret    

c001c214 <FAT::close(void*)>:
c001c214:	83 ec 1c             	sub    esp,0x1c
c001c217:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c21c:	75 0a                	jne    c001c228 <FAT::close(void*)+0x14>
c001c21e:	b8 04 00 00 00       	mov    eax,0x4
c001c223:	eb 3f                	jmp    c001c264 <FAT::close(void*)+0x50>
c001c225:	8d 76 00             	lea    esi,[esi+0x0]
c001c228:	83 ec 0c             	sub    esp,0xc
c001c22b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c22f:	e8 de 83 fe ff       	call   c0004612 <f_close>
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c23b:	83 ec 0c             	sub    esp,0xc
c001c23e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c242:	e8 60 36 ff ff       	call   c000f8a7 <free>
c001c247:	83 c4 10             	add    esp,0x10
c001c24a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c24e:	85 c0                	test   eax,eax
c001c250:	75 0a                	jne    c001c25c <FAT::close(void*)+0x48>
c001c252:	b8 00 00 00 00       	mov    eax,0x0
c001c257:	eb 0b                	jmp    c001c264 <FAT::close(void*)+0x50>
c001c259:	8d 76 00             	lea    esi,[esi+0x0]
c001c25c:	b8 01 00 00 00       	mov    eax,0x1
c001c261:	8d 76 00             	lea    esi,[esi+0x0]
c001c264:	83 c4 1c             	add    esp,0x1c
c001c267:	c3                   	ret    

c001c268 <FAT::closeDir(void*)>:
c001c268:	83 ec 1c             	sub    esp,0x1c
c001c26b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c270:	75 0a                	jne    c001c27c <FAT::closeDir(void*)+0x14>
c001c272:	b8 04 00 00 00       	mov    eax,0x4
c001c277:	eb 3f                	jmp    c001c2b8 <FAT::closeDir(void*)+0x50>
c001c279:	8d 76 00             	lea    esi,[esi+0x0]
c001c27c:	83 ec 0c             	sub    esp,0xc
c001c27f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c283:	e8 35 86 fe ff       	call   c00048bd <f_closedir>
c001c288:	83 c4 10             	add    esp,0x10
c001c28b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c28f:	83 ec 0c             	sub    esp,0xc
c001c292:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c296:	e8 0c 36 ff ff       	call   c000f8a7 <free>
c001c29b:	83 c4 10             	add    esp,0x10
c001c29e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2a2:	85 c0                	test   eax,eax
c001c2a4:	75 0a                	jne    c001c2b0 <FAT::closeDir(void*)+0x48>
c001c2a6:	b8 00 00 00 00       	mov    eax,0x0
c001c2ab:	eb 0b                	jmp    c001c2b8 <FAT::closeDir(void*)+0x50>
c001c2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c2b0:	b8 01 00 00 00       	mov    eax,0x1
c001c2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2b8:	83 c4 1c             	add    esp,0x1c
c001c2bb:	c3                   	ret    

c001c2bc <FAT::truncate(void*, unsigned long long)>:
c001c2bc:	83 ec 2c             	sub    esp,0x2c
c001c2bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c2d4:	75 0a                	jne    c001c2e0 <FAT::truncate(void*, unsigned long long)+0x24>
c001c2d6:	b8 04 00 00 00       	mov    eax,0x4
c001c2db:	eb 47                	jmp    c001c324 <FAT::truncate(void*, unsigned long long)+0x68>
c001c2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c2e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c2e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c2f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2f7:	83 ec 08             	sub    esp,0x8
c001c2fa:	50                   	push   eax
c001c2fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c2ff:	e8 3d 83 fe ff       	call   c0004641 <f_lseek>
c001c304:	83 c4 10             	add    esp,0x10
c001c307:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c30b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c30f:	85 c0                	test   eax,eax
c001c311:	75 09                	jne    c001c31c <FAT::truncate(void*, unsigned long long)+0x60>
c001c313:	b8 00 00 00 00       	mov    eax,0x0
c001c318:	eb 0a                	jmp    c001c324 <FAT::truncate(void*, unsigned long long)+0x68>
c001c31a:	66 90                	xchg   ax,ax
c001c31c:	b8 01 00 00 00       	mov    eax,0x1
c001c321:	8d 76 00             	lea    esi,[esi+0x0]
c001c324:	83 c4 2c             	add    esp,0x2c
c001c327:	c3                   	ret    

c001c328 <FAT::seek(void*, unsigned long long)>:
c001c328:	83 ec 2c             	sub    esp,0x2c
c001c32b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c33b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c340:	75 0a                	jne    c001c34c <FAT::seek(void*, unsigned long long)+0x24>
c001c342:	b8 04 00 00 00       	mov    eax,0x4
c001c347:	eb 33                	jmp    c001c37c <FAT::seek(void*, unsigned long long)+0x54>
c001c349:	8d 76 00             	lea    esi,[esi+0x0]
c001c34c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c350:	83 ec 08             	sub    esp,0x8
c001c353:	50                   	push   eax
c001c354:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c358:	e8 e4 82 fe ff       	call   c0004641 <f_lseek>
c001c35d:	83 c4 10             	add    esp,0x10
c001c360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c364:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c368:	85 c0                	test   eax,eax
c001c36a:	75 08                	jne    c001c374 <FAT::seek(void*, unsigned long long)+0x4c>
c001c36c:	b8 00 00 00 00       	mov    eax,0x0
c001c371:	eb 09                	jmp    c001c37c <FAT::seek(void*, unsigned long long)+0x54>
c001c373:	90                   	nop
c001c374:	b8 01 00 00 00       	mov    eax,0x1
c001c379:	8d 76 00             	lea    esi,[esi+0x0]
c001c37c:	83 c4 2c             	add    esp,0x2c
c001c37f:	c3                   	ret    

c001c380 <fatWrapperReadDisk>:
c001c380:	53                   	push   ebx
c001c381:	83 ec 18             	sub    esp,0x18
c001c384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c388:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c38c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c391:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c398:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c39c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3a0:	ba 00 00 00 00       	mov    edx,0x0
c001c3a5:	83 ec 0c             	sub    esp,0xc
c001c3a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c3ac:	53                   	push   ebx
c001c3ad:	52                   	push   edx
c001c3ae:	50                   	push   eax
c001c3af:	51                   	push   ecx
c001c3b0:	e8 f3 e6 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c3b5:	83 c4 20             	add    esp,0x20
c001c3b8:	83 c4 18             	add    esp,0x18
c001c3bb:	5b                   	pop    ebx
c001c3bc:	c3                   	ret    
c001c3bd:	8d 76 00             	lea    esi,[esi+0x0]

c001c3c0 <fatWrapperWriteDisk>:
c001c3c0:	53                   	push   ebx
c001c3c1:	83 ec 18             	sub    esp,0x18
c001c3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c3cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c3d1:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c3d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c3dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3e0:	ba 00 00 00 00       	mov    edx,0x0
c001c3e5:	83 ec 0c             	sub    esp,0xc
c001c3e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c3ec:	53                   	push   ebx
c001c3ed:	52                   	push   edx
c001c3ee:	50                   	push   eax
c001c3ef:	51                   	push   ecx
c001c3f0:	e8 1f e7 fe ff       	call   c000ab14 <LogicalDisk::write(unsigned long long, int, void*)>
c001c3f5:	83 c4 20             	add    esp,0x20
c001c3f8:	83 c4 18             	add    esp,0x18
c001c3fb:	5b                   	pop    ebx
c001c3fc:	c3                   	ret    
c001c3fd:	8d 76 00             	lea    esi,[esi+0x0]

c001c400 <fatWrapperIoctl>:
c001c400:	53                   	push   ebx
c001c401:	83 ec 28             	sub    esp,0x28
c001c404:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c408:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c40c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c410:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c414:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c419:	83 f8 02             	cmp    eax,0x2
c001c41c:	75 32                	jne    c001c450 <fatWrapperIoctl+0x50>
c001c41e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c426:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c42b:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c432:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c438:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c43e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c442:	66 89 02             	mov    WORD PTR [edx],ax
c001c445:	b8 00 00 00 00       	mov    eax,0x0
c001c44a:	e9 c5 00 00 00       	jmp    c001c514 <fatWrapperIoctl+0x114>
c001c44f:	90                   	nop
c001c450:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c455:	83 f8 01             	cmp    eax,0x1
c001c458:	75 6a                	jne    c001c4c4 <fatWrapperIoctl+0xc4>
c001c45a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c45e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c462:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c467:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001c46e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c474:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c47a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c480:	89 c8                	mov    eax,ecx
c001c482:	89 da                	mov    edx,ebx
c001c484:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c488:	c1 e0 0a             	shl    eax,0xa
c001c48b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c490:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001c497:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c49d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c4a3:	89 cb                	mov    ebx,ecx
c001c4a5:	c1 fb 1f             	sar    ebx,0x1f
c001c4a8:	53                   	push   ebx
c001c4a9:	51                   	push   ecx
c001c4aa:	52                   	push   edx
c001c4ab:	50                   	push   eax
c001c4ac:	e8 53 55 00 00       	call   c0021a04 <__udivdi3>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	89 c2                	mov    edx,eax
c001c4b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4ba:	89 10                	mov    DWORD PTR [eax],edx
c001c4bc:	b8 00 00 00 00       	mov    eax,0x0
c001c4c1:	eb 51                	jmp    c001c514 <fatWrapperIoctl+0x114>
c001c4c3:	90                   	nop
c001c4c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4c9:	85 c0                	test   eax,eax
c001c4cb:	75 07                	jne    c001c4d4 <fatWrapperIoctl+0xd4>
c001c4cd:	b8 00 00 00 00       	mov    eax,0x0
c001c4d2:	eb 40                	jmp    c001c514 <fatWrapperIoctl+0x114>
c001c4d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4d9:	83 f8 03             	cmp    eax,0x3
c001c4dc:	75 1a                	jne    c001c4f8 <fatWrapperIoctl+0xf8>
c001c4de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c4e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c4ea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c4f0:	b8 00 00 00 00       	mov    eax,0x0
c001c4f5:	eb 1d                	jmp    c001c514 <fatWrapperIoctl+0x114>
c001c4f7:	90                   	nop
c001c4f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4fd:	83 f8 04             	cmp    eax,0x4
c001c500:	75 0a                	jne    c001c50c <fatWrapperIoctl+0x10c>
c001c502:	b8 00 00 00 00       	mov    eax,0x0
c001c507:	eb 0b                	jmp    c001c514 <fatWrapperIoctl+0x114>
c001c509:	8d 76 00             	lea    esi,[esi+0x0]
c001c50c:	b8 04 00 00 00       	mov    eax,0x4
c001c511:	8d 76 00             	lea    esi,[esi+0x0]
c001c514:	83 c4 28             	add    esp,0x28
c001c517:	5b                   	pop    ebx
c001c518:	c3                   	ret    
c001c519:	90                   	nop
c001c51a:	66 90                	xchg   ax,ax

c001c51c <FAT::FAT()>:
c001c51c:	83 ec 1c             	sub    esp,0x1c
c001c51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c523:	83 ec 0c             	sub    esp,0xc
c001c526:	50                   	push   eax
c001c527:	e8 9c b8 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	ba 6c 58 02 c0       	mov    edx,0xc002586c
c001c534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c538:	89 10                	mov    DWORD PTR [eax],edx
c001c53a:	c7 05 c0 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ebc0,0x0
c001c544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c54c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c551:	7f 19                	jg     c001c56c <FAT::FAT()+0x50>
c001c553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c557:	c7 04 85 e0 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1420],0xffffffff
c001c562:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c567:	eb e3                	jmp    c001c54c <FAT::FAT()+0x30>
c001c569:	8d 76 00             	lea    esi,[esi+0x0]
c001c56c:	90                   	nop
c001c56d:	83 c4 1c             	add    esp,0x1c
c001c570:	c3                   	ret    
c001c571:	90                   	nop
c001c572:	66 90                	xchg   ax,ax

c001c574 <FAT::fixFilepath(char*)>:
c001c574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c578:	8a 00                	mov    al,BYTE PTR [eax]
c001c57a:	0f be c0             	movsx  eax,al
c001c57d:	83 f8 40             	cmp    eax,0x40
c001c580:	7e 2e                	jle    c001c5b0 <FAT::fixFilepath(char*)+0x3c>
c001c582:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c586:	8a 00                	mov    al,BYTE PTR [eax]
c001c588:	83 e8 41             	sub    eax,0x41
c001c58b:	88 c2                	mov    dl,al
c001c58d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c591:	88 10                	mov    BYTE PTR [eax],dl
c001c593:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c597:	8a 00                	mov    al,BYTE PTR [eax]
c001c599:	0f be c0             	movsx  eax,al
c001c59c:	8b 04 85 e0 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1420]
c001c5a3:	83 c0 30             	add    eax,0x30
c001c5a6:	88 c2                	mov    dl,al
c001c5a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5ac:	88 10                	mov    BYTE PTR [eax],dl
c001c5ae:	66 90                	xchg   ax,ax
c001c5b0:	90                   	nop
c001c5b1:	c3                   	ret    
c001c5b2:	66 90                	xchg   ax,ax

c001c5b4 <FAT::open(char const*, void**, FileOpenMode)>:
c001c5b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c5ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c5c2:	74 0c                	je     c001c5d0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c5c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c5cc:	75 0e                	jne    c001c5dc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c5ce:	66 90                	xchg   ax,ax
c001c5d0:	b8 04 00 00 00       	mov    eax,0x4
c001c5d5:	e9 46 01 00 00       	jmp    c001c720 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c5da:	66 90                	xchg   ax,ax
c001c5dc:	83 ec 08             	sub    esp,0x8
c001c5df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c5e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c5ea:	50                   	push   eax
c001c5eb:	e8 50 40 fe ff       	call   c0000640 <strcpy>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	83 ec 08             	sub    esp,0x8
c001c5f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c5fa:	50                   	push   eax
c001c5fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c602:	e8 6d ff ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c612:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c619:	83 e0 01             	and    eax,0x1
c001c61c:	74 12                	je     c001c630 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c61e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c625:	83 c8 01             	or     eax,0x1
c001c628:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c62f:	90                   	nop
c001c630:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c637:	83 e0 04             	and    eax,0x4
c001c63a:	74 24                	je     c001c660 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c63c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c643:	83 c8 30             	or     eax,0x30
c001c646:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c64d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c654:	83 c8 02             	or     eax,0x2
c001c657:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c65e:	66 90                	xchg   ax,ax
c001c660:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c667:	83 e0 02             	and    eax,0x2
c001c66a:	74 14                	je     c001c680 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c66c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c673:	83 c8 02             	or     eax,0x2
c001c676:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c67d:	8d 76 00             	lea    esi,[esi+0x0]
c001c680:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c687:	83 e0 08             	and    eax,0x8
c001c68a:	74 14                	je     c001c6a0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c68c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c693:	83 c8 04             	or     eax,0x4
c001c696:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c69d:	8d 76 00             	lea    esi,[esi+0x0]
c001c6a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c6a7:	83 e0 10             	and    eax,0x10
c001c6aa:	74 14                	je     c001c6c0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c6ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c6b3:	83 c8 08             	or     eax,0x8
c001c6b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6c0:	83 ec 0c             	sub    esp,0xc
c001c6c3:	68 28 02 00 00       	push   0x228
c001c6c8:	e8 ca 31 ff ff       	call   c000f897 <malloc>
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	89 c2                	mov    edx,eax
c001c6d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6d9:	89 10                	mov    DWORD PTR [eax],edx
c001c6db:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c6e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c6ea:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6ec:	83 ec 04             	sub    esp,0x4
c001c6ef:	52                   	push   edx
c001c6f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c6f4:	52                   	push   edx
c001c6f5:	50                   	push   eax
c001c6f6:	e8 48 77 fe ff       	call   c0003e43 <f_open>
c001c6fb:	83 c4 10             	add    esp,0x10
c001c6fe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c705:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c70d:	74 09                	je     c001c718 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c70f:	b8 01 00 00 00       	mov    eax,0x1
c001c714:	eb 0a                	jmp    c001c720 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c716:	66 90                	xchg   ax,ax
c001c718:	b8 00 00 00 00       	mov    eax,0x0
c001c71d:	8d 76 00             	lea    esi,[esi+0x0]
c001c720:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c726:	c3                   	ret    
c001c727:	90                   	nop

c001c728 <FAT::openDir(char const*, void**)>:
c001c728:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c72e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c736:	74 0c                	je     c001c744 <FAT::openDir(char const*, void**)+0x1c>
c001c738:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c740:	75 0e                	jne    c001c750 <FAT::openDir(char const*, void**)+0x28>
c001c742:	66 90                	xchg   ax,ax
c001c744:	b8 04 00 00 00       	mov    eax,0x4
c001c749:	e9 82 00 00 00       	jmp    c001c7d0 <FAT::openDir(char const*, void**)+0xa8>
c001c74e:	66 90                	xchg   ax,ax
c001c750:	83 ec 08             	sub    esp,0x8
c001c753:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c75a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c75e:	50                   	push   eax
c001c75f:	e8 dc 3e fe ff       	call   c0000640 <strcpy>
c001c764:	83 c4 10             	add    esp,0x10
c001c767:	83 ec 08             	sub    esp,0x8
c001c76a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c76e:	50                   	push   eax
c001c76f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c776:	e8 f9 fd ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001c77b:	83 c4 10             	add    esp,0x10
c001c77e:	83 ec 0c             	sub    esp,0xc
c001c781:	6a 30                	push   0x30
c001c783:	e8 0f 31 ff ff       	call   c000f897 <malloc>
c001c788:	83 c4 10             	add    esp,0x10
c001c78b:	89 c2                	mov    edx,eax
c001c78d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c794:	89 10                	mov    DWORD PTR [eax],edx
c001c796:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c79d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c79f:	83 ec 08             	sub    esp,0x8
c001c7a2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c7a6:	52                   	push   edx
c001c7a7:	50                   	push   eax
c001c7a8:	e8 45 80 fe ff       	call   c00047f2 <f_opendir>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c7b7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c7bf:	74 07                	je     c001c7c8 <FAT::openDir(char const*, void**)+0xa0>
c001c7c1:	b8 01 00 00 00       	mov    eax,0x1
c001c7c6:	eb 08                	jmp    c001c7d0 <FAT::openDir(char const*, void**)+0xa8>
c001c7c8:	b8 00 00 00 00       	mov    eax,0x0
c001c7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c7d6:	c3                   	ret    
c001c7d7:	90                   	nop

c001c7d8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c7d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c7de:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c7e6:	75 0c                	jne    c001c7f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c7e8:	b8 04 00 00 00       	mov    eax,0x4
c001c7ed:	e9 d6 00 00 00       	jmp    c001c8c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c7f2:	66 90                	xchg   ax,ax
c001c7f4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c7fc:	75 0a                	jne    c001c808 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c7fe:	b8 04 00 00 00       	mov    eax,0x4
c001c803:	e9 c0 00 00 00       	jmp    c001c8c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c808:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c810:	75 0a                	jne    c001c81c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c812:	b8 04 00 00 00       	mov    eax,0x4
c001c817:	e9 ac 00 00 00       	jmp    c001c8c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c81c:	83 ec 08             	sub    esp,0x8
c001c81f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c826:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c82d:	50                   	push   eax
c001c82e:	e8 0d 3e fe ff       	call   c0000640 <strcpy>
c001c833:	83 c4 10             	add    esp,0x10
c001c836:	83 ec 08             	sub    esp,0x8
c001c839:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c840:	50                   	push   eax
c001c841:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c848:	e8 27 fd ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001c84d:	83 c4 10             	add    esp,0x10
c001c850:	83 ec 08             	sub    esp,0x8
c001c853:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c857:	50                   	push   eax
c001c858:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c85f:	50                   	push   eax
c001c860:	e8 0c 81 fe ff       	call   c0004971 <f_stat>
c001c865:	83 c4 10             	add    esp,0x10
c001c868:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c86f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c876:	85 c0                	test   eax,eax
c001c878:	74 0a                	je     c001c884 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c87a:	83 f8 04             	cmp    eax,0x4
c001c87d:	74 39                	je     c001c8b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c87f:	eb 3f                	jmp    c001c8c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c881:	8d 76 00             	lea    esi,[esi+0x0]
c001c884:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c888:	0f b6 c0             	movzx  eax,al
c001c88b:	83 e0 10             	and    eax,0x10
c001c88e:	0f 95 c2             	setne  dl
c001c891:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c898:	88 10                	mov    BYTE PTR [eax],dl
c001c89a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c89e:	ba 00 00 00 00       	mov    edx,0x0
c001c8a3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c8aa:	89 01                	mov    DWORD PTR [ecx],eax
c001c8ac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c8af:	b8 00 00 00 00       	mov    eax,0x0
c001c8b4:	eb 12                	jmp    c001c8c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c8b6:	66 90                	xchg   ax,ax
c001c8b8:	b8 02 00 00 00       	mov    eax,0x2
c001c8bd:	eb 09                	jmp    c001c8c8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c8bf:	90                   	nop
c001c8c0:	b8 01 00 00 00       	mov    eax,0x1
c001c8c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8c8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c8ce:	c3                   	ret    
c001c8cf:	90                   	nop

c001c8d0 <FAT::unlink(char const*)>:
c001c8d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c8de:	75 08                	jne    c001c8e8 <FAT::unlink(char const*)+0x18>
c001c8e0:	b8 04 00 00 00       	mov    eax,0x4
c001c8e5:	eb 61                	jmp    c001c948 <FAT::unlink(char const*)+0x78>
c001c8e7:	90                   	nop
c001c8e8:	83 ec 08             	sub    esp,0x8
c001c8eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c8f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c8f6:	50                   	push   eax
c001c8f7:	e8 44 3d fe ff       	call   c0000640 <strcpy>
c001c8fc:	83 c4 10             	add    esp,0x10
c001c8ff:	83 ec 08             	sub    esp,0x8
c001c902:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c906:	50                   	push   eax
c001c907:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c90e:	e8 61 fc ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001c913:	83 c4 10             	add    esp,0x10
c001c916:	83 ec 0c             	sub    esp,0xc
c001c919:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c91d:	50                   	push   eax
c001c91e:	e8 c0 82 fe ff       	call   c0004be3 <f_unlink>
c001c923:	83 c4 10             	add    esp,0x10
c001c926:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c92d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c934:	85 c0                	test   eax,eax
c001c936:	75 08                	jne    c001c940 <FAT::unlink(char const*)+0x70>
c001c938:	b8 00 00 00 00       	mov    eax,0x0
c001c93d:	eb 09                	jmp    c001c948 <FAT::unlink(char const*)+0x78>
c001c93f:	90                   	nop
c001c940:	b8 01 00 00 00       	mov    eax,0x1
c001c945:	8d 76 00             	lea    esi,[esi+0x0]
c001c948:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c94e:	c3                   	ret    
c001c94f:	90                   	nop

c001c950 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c950:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c956:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c95d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c964:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c968:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c96c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c974:	75 0a                	jne    c001c980 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c976:	b8 04 00 00 00       	mov    eax,0x4
c001c97b:	e9 7c 01 00 00       	jmp    c001cafc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c980:	83 ec 08             	sub    esp,0x8
c001c983:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c98a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c98e:	50                   	push   eax
c001c98f:	e8 ac 3c fe ff       	call   c0000640 <strcpy>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	83 ec 08             	sub    esp,0x8
c001c99a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c99e:	50                   	push   eax
c001c99f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c9a6:	e8 c9 fb ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001c9ab:	83 c4 10             	add    esp,0x10
c001c9ae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c9b6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c9be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9c3:	83 e0 01             	and    eax,0x1
c001c9c6:	74 14                	je     c001c9dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c9c8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9cf:	83 c8 01             	or     eax,0x1
c001c9d2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9e1:	83 e0 02             	and    eax,0x2
c001c9e4:	74 12                	je     c001c9f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c9e6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c9ed:	83 c8 20             	or     eax,0x20
c001c9f0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c9f7:	90                   	nop
c001c9f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c9fd:	83 e0 04             	and    eax,0x4
c001ca00:	74 12                	je     c001ca14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001ca02:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca09:	83 c8 04             	or     eax,0x4
c001ca0c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca13:	90                   	nop
c001ca14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ca19:	83 e0 08             	and    eax,0x8
c001ca1c:	74 12                	je     c001ca30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001ca1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ca25:	83 c8 02             	or     eax,0x2
c001ca28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ca2f:	90                   	nop
c001ca30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca35:	83 e0 01             	and    eax,0x1
c001ca38:	74 12                	je     c001ca4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001ca3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca41:	83 c8 01             	or     eax,0x1
c001ca44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca4b:	90                   	nop
c001ca4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca51:	83 e0 02             	and    eax,0x2
c001ca54:	74 12                	je     c001ca68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001ca56:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca5d:	83 c8 20             	or     eax,0x20
c001ca60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca67:	90                   	nop
c001ca68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca6d:	83 e0 04             	and    eax,0x4
c001ca70:	74 12                	je     c001ca84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001ca72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca79:	83 c8 04             	or     eax,0x4
c001ca7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca83:	90                   	nop
c001ca84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ca89:	83 e0 08             	and    eax,0x8
c001ca8c:	74 12                	je     c001caa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001ca8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ca95:	83 c8 02             	or     eax,0x2
c001ca98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ca9f:	90                   	nop
c001caa0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001caa7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001caae:	09 d0                	or     eax,edx
c001cab0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cab7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cabf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cac7:	83 ec 04             	sub    esp,0x4
c001caca:	52                   	push   edx
c001cacb:	50                   	push   eax
c001cacc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cad0:	50                   	push   eax
c001cad1:	e8 82 85 fe ff       	call   c0005058 <f_chmod>
c001cad6:	83 c4 10             	add    esp,0x10
c001cad9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cae0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cae7:	85 c0                	test   eax,eax
c001cae9:	75 09                	jne    c001caf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001caeb:	b8 00 00 00 00       	mov    eax,0x0
c001caf0:	eb 0a                	jmp    c001cafc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001caf2:	66 90                	xchg   ax,ax
c001caf4:	b8 01 00 00 00       	mov    eax,0x1
c001caf9:	8d 76 00             	lea    esi,[esi+0x0]
c001cafc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cb02:	c3                   	ret    
c001cb03:	90                   	nop

c001cb04 <FAT::rename(char const*, char const*)>:
c001cb04:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cb0a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cb12:	74 0c                	je     c001cb20 <FAT::rename(char const*, char const*)+0x1c>
c001cb14:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cb1c:	75 0e                	jne    c001cb2c <FAT::rename(char const*, char const*)+0x28>
c001cb1e:	66 90                	xchg   ax,ax
c001cb20:	b8 04 00 00 00       	mov    eax,0x4
c001cb25:	e9 9e 00 00 00       	jmp    c001cbc8 <FAT::rename(char const*, char const*)+0xc4>
c001cb2a:	66 90                	xchg   ax,ax
c001cb2c:	83 ec 08             	sub    esp,0x8
c001cb2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cb3d:	50                   	push   eax
c001cb3e:	e8 fd 3a fe ff       	call   c0000640 <strcpy>
c001cb43:	83 c4 10             	add    esp,0x10
c001cb46:	83 ec 08             	sub    esp,0x8
c001cb49:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cb50:	50                   	push   eax
c001cb51:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb58:	e8 17 fa ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001cb5d:	83 c4 10             	add    esp,0x10
c001cb60:	83 ec 08             	sub    esp,0x8
c001cb63:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cb6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb6e:	50                   	push   eax
c001cb6f:	e8 cc 3a fe ff       	call   c0000640 <strcpy>
c001cb74:	83 c4 10             	add    esp,0x10
c001cb77:	83 ec 08             	sub    esp,0x8
c001cb7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb7e:	50                   	push   eax
c001cb7f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cb86:	e8 e9 f9 ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	83 ec 08             	sub    esp,0x8
c001cb91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb95:	50                   	push   eax
c001cb96:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cb9d:	50                   	push   eax
c001cb9e:	e8 fd 82 fe ff       	call   c0004ea0 <f_rename>
c001cba3:	83 c4 10             	add    esp,0x10
c001cba6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001cbad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001cbb4:	85 c0                	test   eax,eax
c001cbb6:	75 08                	jne    c001cbc0 <FAT::rename(char const*, char const*)+0xbc>
c001cbb8:	b8 00 00 00 00       	mov    eax,0x0
c001cbbd:	eb 09                	jmp    c001cbc8 <FAT::rename(char const*, char const*)+0xc4>
c001cbbf:	90                   	nop
c001cbc0:	b8 01 00 00 00       	mov    eax,0x1
c001cbc5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbc8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cbce:	c3                   	ret    
c001cbcf:	90                   	nop

c001cbd0 <FAT::mkdir(char const*)>:
c001cbd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cbd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cbde:	75 08                	jne    c001cbe8 <FAT::mkdir(char const*)+0x18>
c001cbe0:	b8 04 00 00 00       	mov    eax,0x4
c001cbe5:	eb 61                	jmp    c001cc48 <FAT::mkdir(char const*)+0x78>
c001cbe7:	90                   	nop
c001cbe8:	83 ec 08             	sub    esp,0x8
c001cbeb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cbf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbf6:	50                   	push   eax
c001cbf7:	e8 44 3a fe ff       	call   c0000640 <strcpy>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	83 ec 08             	sub    esp,0x8
c001cc02:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cc06:	50                   	push   eax
c001cc07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cc0e:	e8 61 f9 ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001cc13:	83 c4 10             	add    esp,0x10
c001cc16:	83 ec 0c             	sub    esp,0xc
c001cc19:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc1d:	50                   	push   eax
c001cc1e:	e8 e2 80 fe ff       	call   c0004d05 <f_mkdir>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cc2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cc34:	85 c0                	test   eax,eax
c001cc36:	75 08                	jne    c001cc40 <FAT::mkdir(char const*)+0x70>
c001cc38:	b8 00 00 00 00       	mov    eax,0x0
c001cc3d:	eb 09                	jmp    c001cc48 <FAT::mkdir(char const*)+0x78>
c001cc3f:	90                   	nop
c001cc40:	b8 01 00 00 00       	mov    eax,0x1
c001cc45:	8d 76 00             	lea    esi,[esi+0x0]
c001cc48:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cc4e:	c3                   	ret    
c001cc4f:	90                   	nop

c001cc50 <FAT::exists(char const*)>:
c001cc50:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001cc56:	83 ec 08             	sub    esp,0x8
c001cc59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc60:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cc64:	50                   	push   eax
c001cc65:	e8 d6 39 fe ff       	call   c0000640 <strcpy>
c001cc6a:	83 c4 10             	add    esp,0x10
c001cc6d:	83 ec 08             	sub    esp,0x8
c001cc70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cc74:	50                   	push   eax
c001cc75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cc7c:	e8 f3 f8 ff ff       	call   c001c574 <FAT::fixFilepath(char*)>
c001cc81:	83 c4 10             	add    esp,0x10
c001cc84:	83 ec 08             	sub    esp,0x8
c001cc87:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cc8e:	50                   	push   eax
c001cc8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cc93:	50                   	push   eax
c001cc94:	e8 d8 7c fe ff       	call   c0004971 <f_stat>
c001cc99:	83 c4 10             	add    esp,0x10
c001cc9c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cca3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ccaa:	85 c0                	test   eax,eax
c001ccac:	75 06                	jne    c001ccb4 <FAT::exists(char const*)+0x64>
c001ccae:	b0 01                	mov    al,0x1
c001ccb0:	eb 06                	jmp    c001ccb8 <FAT::exists(char const*)+0x68>
c001ccb2:	66 90                	xchg   ax,ax
c001ccb4:	b0 00                	mov    al,0x0
c001ccb6:	66 90                	xchg   ax,ax
c001ccb8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ccbe:	c3                   	ret    
c001ccbf:	90                   	nop

c001ccc0 <isoReadDiscSectorHelper>:
c001ccc0:	83 ec 2c             	sub    esp,0x2c
c001ccc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ccc7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cccb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ccd0:	83 e8 41             	sub    eax,0x41
c001ccd3:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001ccda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccde:	ba 00 00 00 00       	mov    edx,0x0
c001cce3:	83 ec 0c             	sub    esp,0xc
c001cce6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ccee:	52                   	push   edx
c001ccef:	50                   	push   eax
c001ccf0:	51                   	push   ecx
c001ccf1:	e8 b2 dd fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001ccf6:	83 c4 20             	add    esp,0x20
c001ccf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccfd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cd02:	74 0c                	je     c001cd10 <isoReadDiscSectorHelper+0x50>
c001cd04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd08:	c1 e0 0b             	shl    eax,0xb
c001cd0b:	eb 0b                	jmp    c001cd18 <isoReadDiscSectorHelper+0x58>
c001cd0d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd10:	b8 00 00 00 00       	mov    eax,0x0
c001cd15:	8d 76 00             	lea    esi,[esi+0x0]
c001cd18:	83 c4 2c             	add    esp,0x2c
c001cd1b:	c3                   	ret    

c001cd1c <iso_kprintf>:
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	83 ec 08             	sub    esp,0x8
c001cd22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd26:	68 44 55 02 c0       	push   0xc0025544
c001cd2b:	e8 4c a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cd30:	83 c4 10             	add    esp,0x10
c001cd33:	90                   	nop
c001cd34:	83 c4 0c             	add    esp,0xc
c001cd37:	c3                   	ret    

c001cd38 <iso_kprintfd>:
c001cd38:	83 ec 0c             	sub    esp,0xc
c001cd3b:	83 ec 08             	sub    esp,0x8
c001cd3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd42:	68 85 4a 02 c0       	push   0xc0024a85
c001cd47:	e8 30 a2 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cd4c:	83 c4 10             	add    esp,0x10
c001cd4f:	90                   	nop
c001cd50:	83 c4 0c             	add    esp,0xc
c001cd53:	c3                   	ret    

c001cd54 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cd54:	b8 08 00 00 00       	mov    eax,0x8
c001cd59:	c3                   	ret    

c001cd5a <ISO9660::truncate(void*, unsigned long long)>:
c001cd5a:	b8 01 00 00 00       	mov    eax,0x1
c001cd5f:	c3                   	ret    

c001cd60 <ISO9660::getName()>:
c001cd60:	b8 d0 58 02 c0       	mov    eax,0xc00258d0
c001cd65:	c3                   	ret    

c001cd66 <ISO9660::closeDir(void*)>:
c001cd66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd6a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd6c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001cd6f:	90                   	nop

c001cd70 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001cd70:	b8 01 00 00 00       	mov    eax,0x1
c001cd75:	c3                   	ret    

c001cd76 <ISO9660::unlink(char const*)>:
c001cd76:	b8 01 00 00 00       	mov    eax,0x1
c001cd7b:	c3                   	ret    

c001cd7c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001cd7c:	b8 03 00 00 00       	mov    eax,0x3
c001cd81:	c3                   	ret    

c001cd82 <ISO9660::rename(char const*, char const*)>:
c001cd82:	b8 01 00 00 00       	mov    eax,0x1
c001cd87:	c3                   	ret    

c001cd88 <ISO9660::mkdir(char const*)>:
c001cd88:	b8 01 00 00 00       	mov    eax,0x1
c001cd8d:	c3                   	ret    

c001cd8e <ISO9660::~ISO9660()>:
c001cd8e:	83 ec 0c             	sub    esp,0xc
c001cd91:	ba 10 5a 02 c0       	mov    edx,0xc0025a10
c001cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9a:	89 10                	mov    DWORD PTR [eax],edx
c001cd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda0:	83 ec 0c             	sub    esp,0xc
c001cda3:	50                   	push   eax
c001cda4:	e8 43 b0 fe ff       	call   c0007dec <Filesystem::~Filesystem()>
c001cda9:	83 c4 10             	add    esp,0x10
c001cdac:	90                   	nop
c001cdad:	83 c4 0c             	add    esp,0xc
c001cdb0:	c3                   	ret    
c001cdb1:	90                   	nop

c001cdb2 <ISO9660::~ISO9660()>:
c001cdb2:	83 ec 0c             	sub    esp,0xc
c001cdb5:	83 ec 0c             	sub    esp,0xc
c001cdb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdbc:	e8 cd ff ff ff       	call   c001cd8e <ISO9660::~ISO9660()>
c001cdc1:	83 c4 10             	add    esp,0x10
c001cdc4:	83 ec 08             	sub    esp,0x8
c001cdc7:	6a 08                	push   0x8
c001cdc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdcd:	e8 de 05 ff ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001cdd2:	83 c4 10             	add    esp,0x10
c001cdd5:	83 c4 0c             	add    esp,0xc
c001cdd8:	c3                   	ret    
c001cdd9:	90                   	nop

c001cdda <ISO9660::exists(char const*)>:
c001cdda:	83 ec 18             	sub    esp,0x18
c001cddd:	68 eb 58 02 c0       	push   0xc00258eb
c001cde2:	e8 0d 2f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001cde7:	31 c0                	xor    eax,eax
c001cde9:	83 c4 1c             	add    esp,0x1c
c001cdec:	c3                   	ret    
c001cded:	90                   	nop

c001cdee <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cdee:	56                   	push   esi
c001cdef:	53                   	push   ebx
c001cdf0:	53                   	push   ebx
c001cdf1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cdf5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cdf9:	85 db                	test   ebx,ebx
c001cdfb:	0f 84 ca 00 00 00    	je     c001cecb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ce01:	85 f6                	test   esi,esi
c001ce03:	0f 84 c2 00 00 00    	je     c001cecb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ce09:	b8 03 00 00 00       	mov    eax,0x3
c001ce0e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ce13:	0f 85 b7 00 00 00    	jne    c001ced0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ce19:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ce1b:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001ce22:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001ce28:	74 1b                	je     c001ce45 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ce2a:	85 c0                	test   eax,eax
c001ce2c:	74 10                	je     c001ce3e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ce2e:	83 ec 0c             	sub    esp,0xc
c001ce31:	68 09 59 02 c0       	push   0xc0025909
c001ce36:	e8 b9 2e ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ce3b:	83 c4 10             	add    esp,0x10
c001ce3e:	8a 03                	mov    al,BYTE PTR [ebx]
c001ce40:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001ce45:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ce48:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ce4f:	85 c0                	test   eax,eax
c001ce51:	74 09                	je     c001ce5c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ce53:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ce5a:	74 48                	je     c001cea4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ce5c:	83 ec 0c             	sub    esp,0xc
c001ce5f:	68 19 59 02 c0       	push   0xc0025919
c001ce64:	e8 13 a1 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ce69:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ce6c:	83 c4 10             	add    esp,0x10
c001ce6f:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001ce76:	85 c0                	test   eax,eax
c001ce78:	74 17                	je     c001ce91 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ce7a:	83 ec 0c             	sub    esp,0xc
c001ce7d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ce84:	68 39 59 02 c0       	push   0xc0025939
c001ce89:	e8 ee a0 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ce8e:	83 c4 10             	add    esp,0x10
c001ce91:	83 ec 0c             	sub    esp,0xc
c001ce94:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001ce9b:	50                   	push   eax
c001ce9c:	e8 8d 9d fe ff       	call   c0006c2e <init_percd>
c001cea1:	83 c4 10             	add    esp,0x10
c001cea4:	83 c3 03             	add    ebx,0x3
c001cea7:	51                   	push   ecx
c001cea8:	51                   	push   ecx
c001cea9:	6a 00                	push   0x0
c001ceab:	53                   	push   ebx
c001ceac:	e8 44 98 fe ff       	call   c00066f5 <iso_open>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	89 c2                	mov    edx,eax
c001ceb6:	b8 01 00 00 00       	mov    eax,0x1
c001cebb:	83 fa ff             	cmp    edx,0xffffffff
c001cebe:	74 10                	je     c001ced0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cec0:	83 c2 32             	add    edx,0x32
c001cec3:	31 c0                	xor    eax,eax
c001cec5:	01 d2                	add    edx,edx
c001cec7:	89 16                	mov    DWORD PTR [esi],edx
c001cec9:	eb 05                	jmp    c001ced0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001cecb:	b8 04 00 00 00       	mov    eax,0x4
c001ced0:	5a                   	pop    edx
c001ced1:	5b                   	pop    ebx
c001ced2:	5e                   	pop    esi
c001ced3:	c3                   	ret    

c001ced4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ced4:	53                   	push   ebx
c001ced5:	83 ec 08             	sub    esp,0x8
c001ced8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cedc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cee0:	85 c0                	test   eax,eax
c001cee2:	74 2d                	je     c001cf11 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cee4:	85 db                	test   ebx,ebx
c001cee6:	74 29                	je     c001cf11 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001cee8:	b9 02 00 00 00       	mov    ecx,0x2
c001ceed:	52                   	push   edx
c001ceee:	99                   	cdq    
c001ceef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cef3:	f7 f9                	idiv   ecx
c001cef5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cef9:	83 e8 32             	sub    eax,0x32
c001cefc:	50                   	push   eax
c001cefd:	e8 9b 98 fe ff       	call   c000679d <iso_read>
c001cf02:	83 c4 10             	add    esp,0x10
c001cf05:	89 03                	mov    DWORD PTR [ebx],eax
c001cf07:	09 d0                	or     eax,edx
c001cf09:	0f 94 c0             	sete   al
c001cf0c:	0f b6 c0             	movzx  eax,al
c001cf0f:	eb 05                	jmp    c001cf16 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001cf11:	b8 04 00 00 00       	mov    eax,0x4
c001cf16:	83 c4 08             	add    esp,0x8
c001cf19:	5b                   	pop    ebx
c001cf1a:	c3                   	ret    
c001cf1b:	90                   	nop

c001cf1c <ISO9660::seek(void*, unsigned long long)>:
c001cf1c:	57                   	push   edi
c001cf1d:	56                   	push   esi
c001cf1e:	b8 04 00 00 00       	mov    eax,0x4
c001cf23:	51                   	push   ecx
c001cf24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf2c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cf30:	85 d2                	test   edx,edx
c001cf32:	74 26                	je     c001cf5a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001cf34:	6a 00                	push   0x0
c001cf36:	b9 02 00 00 00       	mov    ecx,0x2
c001cf3b:	57                   	push   edi
c001cf3c:	89 d0                	mov    eax,edx
c001cf3e:	56                   	push   esi
c001cf3f:	99                   	cdq    
c001cf40:	f7 f9                	idiv   ecx
c001cf42:	83 e8 32             	sub    eax,0x32
c001cf45:	50                   	push   eax
c001cf46:	e8 68 99 fe ff       	call   c00068b3 <iso_seek>
c001cf4b:	83 c4 10             	add    esp,0x10
c001cf4e:	31 f0                	xor    eax,esi
c001cf50:	31 fa                	xor    edx,edi
c001cf52:	09 d0                	or     eax,edx
c001cf54:	0f 95 c0             	setne  al
c001cf57:	0f b6 c0             	movzx  eax,al
c001cf5a:	5a                   	pop    edx
c001cf5b:	5e                   	pop    esi
c001cf5c:	5f                   	pop    edi
c001cf5d:	c3                   	ret    

c001cf5e <ISO9660::tell(void*, unsigned long long*)>:
c001cf5e:	53                   	push   ebx
c001cf5f:	83 ec 08             	sub    esp,0x8
c001cf62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cf6a:	85 c0                	test   eax,eax
c001cf6c:	74 24                	je     c001cf92 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cf6e:	85 db                	test   ebx,ebx
c001cf70:	74 20                	je     c001cf92 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001cf72:	83 ec 0c             	sub    esp,0xc
c001cf75:	b9 02 00 00 00       	mov    ecx,0x2
c001cf7a:	99                   	cdq    
c001cf7b:	f7 f9                	idiv   ecx
c001cf7d:	83 e8 32             	sub    eax,0x32
c001cf80:	50                   	push   eax
c001cf81:	e8 b1 99 fe ff       	call   c0006937 <iso_tell>
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	89 03                	mov    DWORD PTR [ebx],eax
c001cf8b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001cf8e:	31 c0                	xor    eax,eax
c001cf90:	eb 05                	jmp    c001cf97 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001cf92:	b8 04 00 00 00       	mov    eax,0x4
c001cf97:	83 c4 08             	add    esp,0x8
c001cf9a:	5b                   	pop    ebx
c001cf9b:	c3                   	ret    

c001cf9c <ISO9660::stat(void*, unsigned long long*)>:
c001cf9c:	53                   	push   ebx
c001cf9d:	83 ec 14             	sub    esp,0x14
c001cfa0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cfa4:	68 5d 59 02 c0       	push   0xc002595d
c001cfa9:	e8 ce 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001cfae:	83 c4 10             	add    esp,0x10
c001cfb1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001cfb6:	74 2c                	je     c001cfe4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cfb8:	85 db                	test   ebx,ebx
c001cfba:	74 28                	je     c001cfe4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	b9 02 00 00 00       	mov    ecx,0x2
c001cfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc8:	99                   	cdq    
c001cfc9:	f7 f9                	idiv   ecx
c001cfcb:	83 e8 32             	sub    eax,0x32
c001cfce:	50                   	push   eax
c001cfcf:	e8 94 99 fe ff       	call   c0006968 <iso_total>
c001cfd4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cfdb:	89 03                	mov    DWORD PTR [ebx],eax
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	31 c0                	xor    eax,eax
c001cfe2:	eb 05                	jmp    c001cfe9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001cfe4:	b8 04 00 00 00       	mov    eax,0x4
c001cfe9:	83 c4 08             	add    esp,0x8
c001cfec:	5b                   	pop    ebx
c001cfed:	c3                   	ret    

c001cfee <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cfee:	55                   	push   ebp
c001cfef:	57                   	push   edi
c001cff0:	56                   	push   esi
c001cff1:	53                   	push   ebx
c001cff2:	83 ec 18             	sub    esp,0x18
c001cff5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cff9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d001:	68 65 59 02 c0       	push   0xc0025965
c001d006:	e8 71 9f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d00b:	83 c4 10             	add    esp,0x10
c001d00e:	85 ff                	test   edi,edi
c001d010:	0f 94 c0             	sete   al
c001d013:	85 f6                	test   esi,esi
c001d015:	0f 94 c2             	sete   dl
c001d018:	09 d0                	or     eax,edx
c001d01a:	a8 01                	test   al,0x1
c001d01c:	0f 85 dd 00 00 00    	jne    c001d0ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d022:	85 db                	test   ebx,ebx
c001d024:	0f 84 d5 00 00 00    	je     c001d0ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d02a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d02d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d033:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d03a:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d041:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d043:	38 0d c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,cl
c001d049:	74 1b                	je     c001d066 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d04b:	85 c0                	test   eax,eax
c001d04d:	74 10                	je     c001d05f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d04f:	83 ec 0c             	sub    esp,0xc
c001d052:	68 09 59 02 c0       	push   0xc0025909
c001d057:	e8 98 2c ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d05c:	83 c4 10             	add    esp,0x10
c001d05f:	8a 03                	mov    al,BYTE PTR [ebx]
c001d061:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d066:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d069:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d070:	85 c0                	test   eax,eax
c001d072:	74 09                	je     c001d07d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d074:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d07b:	74 51                	je     c001d0ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d07d:	83 ec 0c             	sub    esp,0xc
c001d080:	68 6d 59 02 c0       	push   0xc002596d
c001d085:	e8 f2 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d08a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d08d:	83 c4 10             	add    esp,0x10
c001d090:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001d098:	74 21                	je     c001d0bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d09a:	83 ec 0c             	sub    esp,0xc
c001d09d:	68 8d 59 02 c0       	push   0xc002598d
c001d0a2:	e8 d5 9e fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d0a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d0aa:	83 c4 10             	add    esp,0x10
c001d0ad:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d0b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d0c5:	50                   	push   eax
c001d0c6:	e8 63 9b fe ff       	call   c0006c2e <init_percd>
c001d0cb:	83 c4 10             	add    esp,0x10
c001d0ce:	83 c3 03             	add    ebx,0x3
c001d0d1:	52                   	push   edx
c001d0d2:	52                   	push   edx
c001d0d3:	6a 00                	push   0x0
c001d0d5:	53                   	push   ebx
c001d0d6:	e8 1a 96 fe ff       	call   c00066f5 <iso_open>
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	89 c5                	mov    ebp,eax
c001d0e0:	83 f8 ff             	cmp    eax,0xffffffff
c001d0e3:	75 21                	jne    c001d106 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d0e5:	50                   	push   eax
c001d0e6:	50                   	push   eax
c001d0e7:	6a 01                	push   0x1
c001d0e9:	53                   	push   ebx
c001d0ea:	e8 06 96 fe ff       	call   c00066f5 <iso_open>
c001d0ef:	83 c4 10             	add    esp,0x10
c001d0f2:	ba 02 00 00 00       	mov    edx,0x2
c001d0f7:	40                   	inc    eax
c001d0f8:	74 2b                	je     c001d125 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d0fa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d0fd:	eb 24                	jmp    c001d123 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d0ff:	ba 04 00 00 00       	mov    edx,0x4
c001d104:	eb 1f                	jmp    c001d125 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d106:	83 ec 0c             	sub    esp,0xc
c001d109:	50                   	push   eax
c001d10a:	e8 59 98 fe ff       	call   c0006968 <iso_total>
c001d10f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d116:	89 07                	mov    DWORD PTR [edi],eax
c001d118:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d11b:	e8 5f 96 fe ff       	call   c000677f <iso_close>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	31 d2                	xor    edx,edx
c001d125:	83 c4 0c             	add    esp,0xc
c001d128:	89 d0                	mov    eax,edx
c001d12a:	5b                   	pop    ebx
c001d12b:	5e                   	pop    esi
c001d12c:	5f                   	pop    edi
c001d12d:	5d                   	pop    ebp
c001d12e:	c3                   	ret    
c001d12f:	90                   	nop

c001d130 <ISO9660::close(void*)>:
c001d130:	83 ec 0c             	sub    esp,0xc
c001d133:	b8 04 00 00 00       	mov    eax,0x4
c001d138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d13c:	85 d2                	test   edx,edx
c001d13e:	74 1b                	je     c001d15b <ISO9660::close(void*)+0x2b>
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	b9 02 00 00 00       	mov    ecx,0x2
c001d148:	89 d0                	mov    eax,edx
c001d14a:	99                   	cdq    
c001d14b:	f7 f9                	idiv   ecx
c001d14d:	83 e8 32             	sub    eax,0x32
c001d150:	50                   	push   eax
c001d151:	e8 29 96 fe ff       	call   c000677f <iso_close>
c001d156:	83 c4 10             	add    esp,0x10
c001d159:	31 c0                	xor    eax,eax
c001d15b:	83 c4 0c             	add    esp,0xc
c001d15e:	c3                   	ret    
c001d15f:	90                   	nop

c001d160 <ISO9660::openDir(char const*, void**)>:
c001d160:	56                   	push   esi
c001d161:	53                   	push   ebx
c001d162:	50                   	push   eax
c001d163:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d167:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d16b:	85 db                	test   ebx,ebx
c001d16d:	0f 84 bd 00 00 00    	je     c001d230 <ISO9660::openDir(char const*, void**)+0xd0>
c001d173:	85 f6                	test   esi,esi
c001d175:	0f 84 b5 00 00 00    	je     c001d230 <ISO9660::openDir(char const*, void**)+0xd0>
c001d17b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d17d:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d184:	38 15 c0 ec 02 c0    	cmp    BYTE PTR ds:0xc002ecc0,dl
c001d18a:	74 1b                	je     c001d1a7 <ISO9660::openDir(char const*, void**)+0x47>
c001d18c:	85 c0                	test   eax,eax
c001d18e:	74 10                	je     c001d1a0 <ISO9660::openDir(char const*, void**)+0x40>
c001d190:	83 ec 0c             	sub    esp,0xc
c001d193:	68 09 59 02 c0       	push   0xc0025909
c001d198:	e8 57 2b ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d19d:	83 c4 10             	add    esp,0x10
c001d1a0:	8a 03                	mov    al,BYTE PTR [ebx]
c001d1a2:	a2 c0 ec 02 c0       	mov    ds:0xc002ecc0,al
c001d1a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d1aa:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001d1b1:	85 c0                	test   eax,eax
c001d1b3:	74 10                	je     c001d1c5 <ISO9660::openDir(char const*, void**)+0x65>
c001d1b5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d1bc:	74 1a                	je     c001d1d8 <ISO9660::openDir(char const*, void**)+0x78>
c001d1be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d1c5:	83 ec 0c             	sub    esp,0xc
c001d1c8:	0f be 05 c0 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ecc0
c001d1cf:	50                   	push   eax
c001d1d0:	e8 59 9a fe ff       	call   c0006c2e <init_percd>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	83 c3 03             	add    ebx,0x3
c001d1db:	50                   	push   eax
c001d1dc:	50                   	push   eax
c001d1dd:	6a 01                	push   0x1
c001d1df:	53                   	push   ebx
c001d1e0:	e8 10 95 fe ff       	call   c00066f5 <iso_open>
c001d1e5:	83 c4 10             	add    esp,0x10
c001d1e8:	89 c3                	mov    ebx,eax
c001d1ea:	83 f8 ff             	cmp    eax,0xffffffff
c001d1ed:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d1f2:	75 1c                	jne    c001d210 <ISO9660::openDir(char const*, void**)+0xb0>
c001d1f4:	53                   	push   ebx
c001d1f5:	53                   	push   ebx
c001d1f6:	68 b1 59 02 c0       	push   0xc00259b1
c001d1fb:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d201:	e8 06 55 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001d206:	83 c4 10             	add    esp,0x10
c001d209:	b8 01 00 00 00       	mov    eax,0x1
c001d20e:	eb 25                	jmp    c001d235 <ISO9660::openDir(char const*, void**)+0xd5>
c001d210:	01 db                	add    ebx,ebx
c001d212:	51                   	push   ecx
c001d213:	83 c3 65             	add    ebx,0x65
c001d216:	51                   	push   ecx
c001d217:	68 c4 59 02 c0       	push   0xc00259c4
c001d21c:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d222:	e8 e5 54 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001d227:	89 1e                	mov    DWORD PTR [esi],ebx
c001d229:	83 c4 10             	add    esp,0x10
c001d22c:	31 c0                	xor    eax,eax
c001d22e:	eb 05                	jmp    c001d235 <ISO9660::openDir(char const*, void**)+0xd5>
c001d230:	b8 04 00 00 00       	mov    eax,0x4
c001d235:	5a                   	pop    edx
c001d236:	5b                   	pop    ebx
c001d237:	5e                   	pop    esi
c001d238:	c3                   	ret    
c001d239:	90                   	nop

c001d23a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d23a:	55                   	push   ebp
c001d23b:	57                   	push   edi
c001d23c:	56                   	push   esi
c001d23d:	53                   	push   ebx
c001d23e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d244:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d24b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d252:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001d25a:	0f 84 e7 00 00 00    	je     c001d347 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d260:	85 db                	test   ebx,ebx
c001d262:	0f 84 df 00 00 00    	je     c001d347 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001d268:	83 ec 0c             	sub    esp,0xc
c001d26b:	68 d7 59 02 c0       	push   0xc00259d7
c001d270:	e8 07 9d fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001d275:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d27c:	b9 02 00 00 00       	mov    ecx,0x2
c001d281:	99                   	cdq    
c001d282:	f7 f9                	idiv   ecx
c001d284:	83 e8 32             	sub    eax,0x32
c001d287:	89 04 24             	mov    DWORD PTR [esp],eax
c001d28a:	e8 2b 97 fe ff       	call   c00069ba <iso_readdir>
c001d28f:	83 c4 10             	add    esp,0x10
c001d292:	89 c6                	mov    esi,eax
c001d294:	85 c0                	test   eax,eax
c001d296:	75 37                	jne    c001d2cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001d298:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d29d:	56                   	push   esi
c001d29e:	56                   	push   esi
c001d29f:	68 e2 59 02 c0       	push   0xc00259e2
c001d2a4:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d2aa:	e8 5d 54 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001d2af:	83 c4 0c             	add    esp,0xc
c001d2b2:	68 10 01 00 00       	push   0x110
c001d2b7:	6a 00                	push   0x0
c001d2b9:	57                   	push   edi
c001d2ba:	e8 31 32 fe ff       	call   c00004f0 <memset>
c001d2bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d2c5:	83 c4 10             	add    esp,0x10
c001d2c8:	b8 01 00 00 00       	mov    eax,0x1
c001d2cd:	eb 7d                	jmp    c001d34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d2cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d2d5:	8d 68 08             	lea    ebp,[eax+0x8]
c001d2d8:	83 ec 0c             	sub    esp,0xc
c001d2db:	55                   	push   ebp
c001d2dc:	e8 8f 32 fe ff       	call   c0000570 <strlen>
c001d2e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d2e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d2ed:	83 c4 10             	add    esp,0x10
c001d2f0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001d2f4:	75 0a                	jne    c001d300 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001d2f6:	b8 02 00 00 00       	mov    eax,0x2
c001d2fb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001d2fe:	74 05                	je     c001d305 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001d300:	b8 01 00 00 00       	mov    eax,0x1
c001d305:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d309:	50                   	push   eax
c001d30a:	50                   	push   eax
c001d30b:	55                   	push   ebp
c001d30c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d310:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d314:	50                   	push   eax
c001d315:	e8 26 33 fe ff       	call   c0000640 <strcpy>
c001d31a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d321:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d323:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001d329:	5a                   	pop    edx
c001d32a:	a1 98 ca 02 c0       	mov    eax,ds:0xc002ca98
c001d32f:	59                   	pop    ecx
c001d330:	68 f5 59 02 c0       	push   0xc00259f5
c001d335:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d33b:	e8 cc 53 ff ff       	call   c001270c <VgaText::puts(char const*)>
c001d340:	83 c4 10             	add    esp,0x10
c001d343:	31 c0                	xor    eax,eax
c001d345:	eb 05                	jmp    c001d34c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001d347:	b8 04 00 00 00       	mov    eax,0x4
c001d34c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d352:	5b                   	pop    ebx
c001d353:	5e                   	pop    esi
c001d354:	5f                   	pop    edi
c001d355:	5d                   	pop    ebp
c001d356:	c3                   	ret    

c001d357 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d357:	57                   	push   edi
c001d358:	56                   	push   esi
c001d359:	53                   	push   ebx
c001d35a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d35e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d362:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d366:	39 35 c4 ec 02 c0    	cmp    DWORD PTR ds:0xc002ecc4,esi
c001d36c:	0f be cb             	movsx  ecx,bl
c001d36f:	75 0b                	jne    c001d37c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d371:	0f be 05 64 6c 02 c0 	movsx  eax,BYTE PTR ds:0xc0026c64
c001d378:	39 c8                	cmp    eax,ecx
c001d37a:	74 47                	je     c001d3c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d37c:	83 ec 0c             	sub    esp,0xc
c001d37f:	31 d2                	xor    edx,edx
c001d381:	68 e0 ec 02 c0       	push   0xc002ece0
c001d386:	6a 01                	push   0x1
c001d388:	52                   	push   edx
c001d389:	56                   	push   esi
c001d38a:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001d391:	e8 12 d7 fe ff       	call   c000aaa8 <LogicalDisk::read(unsigned long long, int, void*)>
c001d396:	83 c4 20             	add    esp,0x20
c001d399:	85 c0                	test   eax,eax
c001d39b:	75 0e                	jne    c001d3ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d39d:	89 35 c4 ec 02 c0    	mov    DWORD PTR ds:0xc002ecc4,esi
c001d3a3:	88 1d 64 6c 02 c0    	mov    BYTE PTR ds:0xc0026c64,bl
c001d3a9:	eb 18                	jmp    c001d3c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d3ab:	50                   	push   eax
c001d3ac:	68 00 08 00 00       	push   0x800
c001d3b1:	6a 00                	push   0x0
c001d3b3:	57                   	push   edi
c001d3b4:	e8 37 31 fe ff       	call   c00004f0 <memset>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	b8 01 00 00 00       	mov    eax,0x1
c001d3c1:	eb 0e                	jmp    c001d3d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d3c3:	be e0 ec 02 c0       	mov    esi,0xc002ece0
c001d3c8:	b9 00 08 00 00       	mov    ecx,0x800
c001d3cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d3cf:	31 c0                	xor    eax,eax
c001d3d1:	5b                   	pop    ebx
c001d3d2:	5e                   	pop    esi
c001d3d3:	5f                   	pop    edi
c001d3d4:	c3                   	ret    
c001d3d5:	90                   	nop

c001d3d6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d3d6:	53                   	push   ebx
c001d3d7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d3dd:	c7 05 c4 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ecc4,0xdeadbeef
c001d3e7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d3ee:	8d 58 41             	lea    ebx,[eax+0x41]
c001d3f1:	0f be db             	movsx  ebx,bl
c001d3f4:	53                   	push   ebx
c001d3f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d3f9:	50                   	push   eax
c001d3fa:	6a 10                	push   0x10
c001d3fc:	e8 56 ff ff ff       	call   c001d357 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d401:	83 c4 10             	add    esp,0x10
c001d404:	31 d2                	xor    edx,edx
c001d406:	85 c0                	test   eax,eax
c001d408:	75 33                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d40a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d40f:	75 2c                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d411:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d416:	75 25                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d418:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d41d:	75 1e                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d41f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d424:	75 17                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d426:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d42b:	75 10                	jne    c001d43d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	53                   	push   ebx
c001d431:	e8 f8 97 fe ff       	call   c0006c2e <init_percd>
c001d436:	83 c4 10             	add    esp,0x10
c001d439:	40                   	inc    eax
c001d43a:	0f 95 c2             	setne  dl
c001d43d:	88 d0                	mov    al,dl
c001d43f:	81 c4 08 08 00 00    	add    esp,0x808
c001d445:	5b                   	pop    ebx
c001d446:	c3                   	ret    
c001d447:	90                   	nop

c001d448 <ISO9660::ISO9660()>:
c001d448:	83 ec 0c             	sub    esp,0xc
c001d44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d44f:	83 ec 0c             	sub    esp,0xc
c001d452:	50                   	push   eax
c001d453:	e8 70 a9 fe ff       	call   c0007dc8 <Filesystem::Filesystem()>
c001d458:	83 c4 10             	add    esp,0x10
c001d45b:	ba 10 5a 02 c0       	mov    edx,0xc0025a10
c001d460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d464:	89 10                	mov    DWORD PTR [eax],edx
c001d466:	e8 d5 98 fe ff       	call   c0006d40 <fs_iso9660_init>
c001d46b:	90                   	nop
c001d46c:	83 c4 0c             	add    esp,0xc
c001d46f:	c3                   	ret    

c001d470 <SoundCard::beginPlayback()>:
c001d470:	c7 44 24 04 74 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a74
c001d478:	e9 77 28 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001d47d:	90                   	nop

c001d47e <SoundCard::stopPlayback()>:
c001d47e:	c7 44 24 04 74 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025a74
c001d486:	e9 69 28 ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001d48b:	90                   	nop

c001d48c <SoundCard::SoundCard(char const*)>:
c001d48c:	83 ec 1c             	sub    esp,0x1c
c001d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d493:	83 ec 08             	sub    esp,0x8
c001d496:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d49a:	50                   	push   eax
c001d49b:	e8 16 c7 fe ff       	call   c0009bb6 <Device::Device(char const*)>
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	ba c0 5a 02 c0       	mov    edx,0xc0025ac0
c001d4a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ac:	89 10                	mov    DWORD PTR [eax],edx
c001d4ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d4c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4cb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4d9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d4e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d4f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d4f9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d4fe:	7f 1a                	jg     c001d51a <SoundCard::SoundCard(char const*)+0x8e>
c001d500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d504:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d508:	83 c2 54             	add    edx,0x54
c001d50b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d513:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d518:	eb df                	jmp    c001d4f9 <SoundCard::SoundCard(char const*)+0x6d>
c001d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d525:	90                   	nop
c001d526:	83 c4 1c             	add    esp,0x1c
c001d529:	c3                   	ret    

c001d52a <SoundCard::~SoundCard()>:
c001d52a:	83 ec 0c             	sub    esp,0xc
c001d52d:	ba c0 5a 02 c0       	mov    edx,0xc0025ac0
c001d532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d536:	89 10                	mov    DWORD PTR [eax],edx
c001d538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53c:	83 ec 0c             	sub    esp,0xc
c001d53f:	50                   	push   eax
c001d540:	e8 11 c4 fe ff       	call   c0009956 <Device::~Device()>
c001d545:	83 c4 10             	add    esp,0x10
c001d548:	90                   	nop
c001d549:	83 c4 0c             	add    esp,0xc
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop

c001d54e <SoundCard::~SoundCard()>:
c001d54e:	83 ec 0c             	sub    esp,0xc
c001d551:	83 ec 0c             	sub    esp,0xc
c001d554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d558:	e8 cd ff ff ff       	call   c001d52a <SoundCard::~SoundCard()>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	83 ec 08             	sub    esp,0x8
c001d563:	68 e8 01 00 00       	push   0x1e8
c001d568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d56c:	e8 3f fe fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c001d571:	83 c4 10             	add    esp,0x10
c001d574:	83 c4 0c             	add    esp,0xc
c001d577:	c3                   	ret    

c001d578 <SoundCard::configureRates(int, int, int)>:
c001d578:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d57c:	31 c0                	xor    eax,eax
c001d57e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d585:	75 20                	jne    c001d5a7 <SoundCard::configureRates(int, int, int)+0x2f>
c001d587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d58b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d595:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d59b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d59f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d5a5:	b0 01                	mov    al,0x1
c001d5a7:	c3                   	ret    

c001d5a8 <SoundCard::getSamples16(int, short*)>:
c001d5a8:	55                   	push   ebp
c001d5a9:	57                   	push   edi
c001d5aa:	31 ff                	xor    edi,edi
c001d5ac:	56                   	push   esi
c001d5ad:	53                   	push   ebx
c001d5ae:	31 db                	xor    ebx,ebx
c001d5b0:	83 ec 10             	sub    esp,0x10
c001d5b3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d5b7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d5bb:	8d 04 36             	lea    eax,[esi+esi*1]
c001d5be:	50                   	push   eax
c001d5bf:	6a 00                	push   0x0
c001d5c1:	55                   	push   ebp
c001d5c2:	e8 29 2f fe ff       	call   c00004f0 <memset>
c001d5c7:	83 c4 10             	add    esp,0x10
c001d5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ce:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d5d5:	85 c0                	test   eax,eax
c001d5d7:	74 1b                	je     c001d5f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5d9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d5dd:	75 15                	jne    c001d5f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d5e3:	55                   	push   ebp
c001d5e4:	56                   	push   esi
c001d5e5:	50                   	push   eax
c001d5e6:	e8 8d 03 00 00       	call   c001d978 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d5eb:	83 c4 10             	add    esp,0x10
c001d5ee:	39 c7                	cmp    edi,eax
c001d5f0:	7d 02                	jge    c001d5f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001d5f2:	89 c7                	mov    edi,eax
c001d5f4:	43                   	inc    ebx
c001d5f5:	83 fb 20             	cmp    ebx,0x20
c001d5f8:	75 d0                	jne    c001d5ca <SoundCard::getSamples16(int, short*)+0x22>
c001d5fa:	83 c4 0c             	add    esp,0xc
c001d5fd:	89 f8                	mov    eax,edi
c001d5ff:	5b                   	pop    ebx
c001d600:	5e                   	pop    esi
c001d601:	5f                   	pop    edi
c001d602:	5d                   	pop    ebp
c001d603:	c3                   	ret    

c001d604 <SoundCard::getSamples32(int, int*)>:
c001d604:	55                   	push   ebp
c001d605:	57                   	push   edi
c001d606:	31 ff                	xor    edi,edi
c001d608:	56                   	push   esi
c001d609:	31 f6                	xor    esi,esi
c001d60b:	53                   	push   ebx
c001d60c:	83 ec 10             	sub    esp,0x10
c001d60f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d613:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d617:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d61b:	c1 e0 02             	shl    eax,0x2
c001d61e:	50                   	push   eax
c001d61f:	6a 00                	push   0x0
c001d621:	55                   	push   ebp
c001d622:	e8 c9 2e fe ff       	call   c00004f0 <memset>
c001d627:	83 c4 10             	add    esp,0x10
c001d62a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d631:	85 c0                	test   eax,eax
c001d633:	74 1b                	je     c001d650 <SoundCard::getSamples32(int, int*)+0x4c>
c001d635:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d639:	75 15                	jne    c001d650 <SoundCard::getSamples32(int, int*)+0x4c>
c001d63b:	53                   	push   ebx
c001d63c:	55                   	push   ebp
c001d63d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d641:	50                   	push   eax
c001d642:	e8 fd 03 00 00       	call   c001da44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d647:	83 c4 10             	add    esp,0x10
c001d64a:	39 c6                	cmp    esi,eax
c001d64c:	7d 02                	jge    c001d650 <SoundCard::getSamples32(int, int*)+0x4c>
c001d64e:	89 c6                	mov    esi,eax
c001d650:	47                   	inc    edi
c001d651:	83 ff 20             	cmp    edi,0x20
c001d654:	75 d4                	jne    c001d62a <SoundCard::getSamples32(int, int*)+0x26>
c001d656:	85 f6                	test   esi,esi
c001d658:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d65f:	75 0f                	jne    c001d670 <SoundCard::getSamples32(int, int*)+0x6c>
c001d661:	85 c0                	test   eax,eax
c001d663:	74 1b                	je     c001d680 <SoundCard::getSamples32(int, int*)+0x7c>
c001d665:	83 ec 0c             	sub    esp,0xc
c001d668:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d66a:	53                   	push   ebx
c001d66b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d66e:	eb 0d                	jmp    c001d67d <SoundCard::getSamples32(int, int*)+0x79>
c001d670:	85 c0                	test   eax,eax
c001d672:	75 0c                	jne    c001d680 <SoundCard::getSamples32(int, int*)+0x7c>
c001d674:	83 ec 0c             	sub    esp,0xc
c001d677:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d679:	53                   	push   ebx
c001d67a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d67d:	83 c4 10             	add    esp,0x10
c001d680:	83 c4 0c             	add    esp,0xc
c001d683:	89 f0                	mov    eax,esi
c001d685:	5b                   	pop    ebx
c001d686:	5e                   	pop    esi
c001d687:	5f                   	pop    edi
c001d688:	5d                   	pop    ebp
c001d689:	c3                   	ret    

c001d68a <SoundCard::addChannel(SoundPort*)>:
c001d68a:	83 ec 0c             	sub    esp,0xc
c001d68d:	31 c0                	xor    eax,eax
c001d68f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d693:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d69b:	74 1b                	je     c001d6b8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d69d:	40                   	inc    eax
c001d69e:	83 f8 20             	cmp    eax,0x20
c001d6a1:	75 f0                	jne    c001d693 <SoundCard::addChannel(SoundPort*)+0x9>
c001d6a3:	83 ec 0c             	sub    esp,0xc
c001d6a6:	68 99 5a 02 c0       	push   0xc0025a99
c001d6ab:	e8 44 26 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d6b0:	83 c4 10             	add    esp,0x10
c001d6b3:	83 c8 ff             	or     eax,0xffffffff
c001d6b6:	eb 0b                	jmp    c001d6c3 <SoundCard::addChannel(SoundPort*)+0x39>
c001d6b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d6bc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d6c3:	83 c4 0c             	add    esp,0xc
c001d6c6:	c3                   	ret    
c001d6c7:	90                   	nop

c001d6c8 <SoundCard::removeChannel(int)>:
c001d6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6d0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d6db:	c3                   	ret    

c001d6dc <SoundPort::SoundPort(int, int, int, int)>:
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6fa:	89 10                	mov    DWORD PTR [eax],edx
c001d6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d700:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d704:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d70b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d70f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d712:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d717:	75 13                	jne    c001d72c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d71f:	05 a0 0f 00 00       	add    eax,0xfa0
c001d724:	01 c0                	add    eax,eax
c001d726:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d72a:	66 90                	xchg   ax,ax
c001d72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d730:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d734:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d73b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d746:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d749:	c1 e0 02             	shl    eax,0x2
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	50                   	push   eax
c001d750:	e8 42 21 ff ff       	call   c000f897 <malloc>
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	89 c2                	mov    edx,eax
c001d75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d75e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d761:	90                   	nop
c001d762:	83 c4 0c             	add    esp,0xc
c001d765:	c3                   	ret    
c001d766:	66 90                	xchg   ax,ax

c001d768 <SoundPort::~SoundPort()>:
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d76f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d772:	85 c0                	test   eax,eax
c001d774:	74 1e                	je     c001d794 <SoundPort::~SoundPort()+0x2c>
c001d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d77a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d77d:	83 ec 0c             	sub    esp,0xc
c001d780:	50                   	push   eax
c001d781:	e8 21 21 ff ff       	call   c000f8a7 <free>
c001d786:	83 c4 10             	add    esp,0x10
c001d789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d794:	90                   	nop
c001d795:	83 c4 0c             	add    esp,0xc
c001d798:	c3                   	ret    
c001d799:	90                   	nop
c001d79a:	66 90                	xchg   ax,ax

c001d79c <SoundPort::unpause()>:
c001d79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7a0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d7a4:	c3                   	ret    
c001d7a5:	90                   	nop
c001d7a6:	66 90                	xchg   ax,ax

c001d7a8 <SoundPort::pause()>:
c001d7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7ac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d7b0:	c3                   	ret    
c001d7b1:	90                   	nop
c001d7b2:	66 90                	xchg   ax,ax

c001d7b4 <SoundPort::getBufferUsed()>:
c001d7b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d7bb:	c3                   	ret    

c001d7bc <SoundPort::getBufferSize()>:
c001d7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d7c3:	c3                   	ret    

c001d7c4 <SoundPort::buffer8(signed char*, int)>:
c001d7c4:	55                   	push   ebp
c001d7c5:	57                   	push   edi
c001d7c6:	56                   	push   esi
c001d7c7:	53                   	push   ebx
c001d7c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7cc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d7d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d7d3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d7d6:	74 70                	je     c001d848 <SoundPort::buffer8(signed char*, int)+0x84>
c001d7d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7dc:	85 c9                	test   ecx,ecx
c001d7de:	7e 68                	jle    c001d848 <SoundPort::buffer8(signed char*, int)+0x84>
c001d7e0:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d7e4:	8d 48 01             	lea    ecx,[eax+0x1]
c001d7e7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d7ea:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d7ed:	89 f1                	mov    ecx,esi
c001d7ef:	c1 e1 18             	shl    ecx,0x18
c001d7f2:	29 f1                	sub    ecx,esi
c001d7f4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d7f7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d7fa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d7fd:	74 51                	je     c001d850 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d7ff:	31 ff                	xor    edi,edi
c001d801:	eb 25                	jmp    c001d828 <SoundPort::buffer8(signed char*, int)+0x64>
c001d803:	90                   	nop
c001d804:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d809:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d80c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d80f:	89 f3                	mov    ebx,esi
c001d811:	c1 e3 18             	shl    ebx,0x18
c001d814:	29 f3                	sub    ebx,esi
c001d816:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d819:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d81c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d81f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d822:	74 1c                	je     c001d840 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d824:	89 c7                	mov    edi,eax
c001d826:	66 90                	xchg   ax,ax
c001d828:	8d 47 01             	lea    eax,[edi+0x1]
c001d82b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d82f:	75 d3                	jne    c001d804 <SoundPort::buffer8(signed char*, int)+0x40>
c001d831:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d835:	8d 76 00             	lea    esi,[esi+0x0]
c001d838:	5b                   	pop    ebx
c001d839:	5e                   	pop    esi
c001d83a:	5f                   	pop    edi
c001d83b:	5d                   	pop    ebp
c001d83c:	c3                   	ret    
c001d83d:	8d 76 00             	lea    esi,[esi+0x0]
c001d840:	5b                   	pop    ebx
c001d841:	8d 47 02             	lea    eax,[edi+0x2]
c001d844:	5e                   	pop    esi
c001d845:	5f                   	pop    edi
c001d846:	5d                   	pop    ebp
c001d847:	c3                   	ret    
c001d848:	5b                   	pop    ebx
c001d849:	31 c0                	xor    eax,eax
c001d84b:	5e                   	pop    esi
c001d84c:	5f                   	pop    edi
c001d84d:	5d                   	pop    ebp
c001d84e:	c3                   	ret    
c001d84f:	90                   	nop
c001d850:	b8 01 00 00 00       	mov    eax,0x1
c001d855:	eb e1                	jmp    c001d838 <SoundPort::buffer8(signed char*, int)+0x74>
c001d857:	90                   	nop

c001d858 <SoundPort::buffer16(short*, int)>:
c001d858:	55                   	push   ebp
c001d859:	57                   	push   edi
c001d85a:	56                   	push   esi
c001d85b:	53                   	push   ebx
c001d85c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d860:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d864:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d867:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d86a:	74 70                	je     c001d8dc <SoundPort::buffer16(short*, int)+0x84>
c001d86c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d870:	85 c9                	test   ecx,ecx
c001d872:	7e 68                	jle    c001d8dc <SoundPort::buffer16(short*, int)+0x84>
c001d874:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d878:	8d 48 01             	lea    ecx,[eax+0x1]
c001d87b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d87e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d881:	89 f1                	mov    ecx,esi
c001d883:	c1 e1 10             	shl    ecx,0x10
c001d886:	29 f1                	sub    ecx,esi
c001d888:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d88b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d88e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d891:	74 51                	je     c001d8e4 <SoundPort::buffer16(short*, int)+0x8c>
c001d893:	31 ff                	xor    edi,edi
c001d895:	eb 25                	jmp    c001d8bc <SoundPort::buffer16(short*, int)+0x64>
c001d897:	90                   	nop
c001d898:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d89d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d8a0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d8a3:	89 f3                	mov    ebx,esi
c001d8a5:	c1 e3 10             	shl    ebx,0x10
c001d8a8:	29 f3                	sub    ebx,esi
c001d8aa:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d8ad:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d8b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d8b6:	74 1c                	je     c001d8d4 <SoundPort::buffer16(short*, int)+0x7c>
c001d8b8:	89 c7                	mov    edi,eax
c001d8ba:	66 90                	xchg   ax,ax
c001d8bc:	8d 47 01             	lea    eax,[edi+0x1]
c001d8bf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d8c3:	75 d3                	jne    c001d898 <SoundPort::buffer16(short*, int)+0x40>
c001d8c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d8cc:	5b                   	pop    ebx
c001d8cd:	5e                   	pop    esi
c001d8ce:	5f                   	pop    edi
c001d8cf:	5d                   	pop    ebp
c001d8d0:	c3                   	ret    
c001d8d1:	8d 76 00             	lea    esi,[esi+0x0]
c001d8d4:	5b                   	pop    ebx
c001d8d5:	8d 47 02             	lea    eax,[edi+0x2]
c001d8d8:	5e                   	pop    esi
c001d8d9:	5f                   	pop    edi
c001d8da:	5d                   	pop    ebp
c001d8db:	c3                   	ret    
c001d8dc:	5b                   	pop    ebx
c001d8dd:	31 c0                	xor    eax,eax
c001d8df:	5e                   	pop    esi
c001d8e0:	5f                   	pop    edi
c001d8e1:	5d                   	pop    ebp
c001d8e2:	c3                   	ret    
c001d8e3:	90                   	nop
c001d8e4:	b8 01 00 00 00       	mov    eax,0x1
c001d8e9:	eb e1                	jmp    c001d8cc <SoundPort::buffer16(short*, int)+0x74>
c001d8eb:	90                   	nop

c001d8ec <SoundPort::buffer32(int*, int)>:
c001d8ec:	55                   	push   ebp
c001d8ed:	57                   	push   edi
c001d8ee:	56                   	push   esi
c001d8ef:	53                   	push   ebx
c001d8f0:	83 ec 04             	sub    esp,0x4
c001d8f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8fb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d8fe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d902:	89 04 24             	mov    DWORD PTR [esp],eax
c001d905:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d908:	74 5a                	je     c001d964 <SoundPort::buffer32(int*, int)+0x78>
c001d90a:	85 c0                	test   eax,eax
c001d90c:	7e 56                	jle    c001d964 <SoundPort::buffer32(int*, int)+0x78>
c001d90e:	8d 71 01             	lea    esi,[ecx+0x1]
c001d911:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d914:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d917:	8b 37                	mov    esi,DWORD PTR [edi]
c001d919:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d91c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d91f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d922:	74 4c                	je     c001d970 <SoundPort::buffer32(int*, int)+0x84>
c001d924:	31 f6                	xor    esi,esi
c001d926:	eb 1c                	jmp    c001d944 <SoundPort::buffer32(int*, int)+0x58>
c001d928:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d92b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d92e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d931:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d934:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d938:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d93b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d93e:	74 18                	je     c001d958 <SoundPort::buffer32(int*, int)+0x6c>
c001d940:	89 de                	mov    esi,ebx
c001d942:	66 90                	xchg   ax,ax
c001d944:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d947:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d94a:	75 dc                	jne    c001d928 <SoundPort::buffer32(int*, int)+0x3c>
c001d94c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d94f:	90                   	nop
c001d950:	83 c4 04             	add    esp,0x4
c001d953:	5b                   	pop    ebx
c001d954:	5e                   	pop    esi
c001d955:	5f                   	pop    edi
c001d956:	5d                   	pop    ebp
c001d957:	c3                   	ret    
c001d958:	83 c4 04             	add    esp,0x4
c001d95b:	8d 46 02             	lea    eax,[esi+0x2]
c001d95e:	5b                   	pop    ebx
c001d95f:	5e                   	pop    esi
c001d960:	5f                   	pop    edi
c001d961:	5d                   	pop    ebp
c001d962:	c3                   	ret    
c001d963:	90                   	nop
c001d964:	83 c4 04             	add    esp,0x4
c001d967:	31 c0                	xor    eax,eax
c001d969:	5b                   	pop    ebx
c001d96a:	5e                   	pop    esi
c001d96b:	5f                   	pop    edi
c001d96c:	5d                   	pop    ebp
c001d96d:	c3                   	ret    
c001d96e:	66 90                	xchg   ax,ax
c001d970:	b8 01 00 00 00       	mov    eax,0x1
c001d975:	eb d9                	jmp    c001d950 <SoundPort::buffer32(int*, int)+0x64>
c001d977:	90                   	nop

c001d978 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d978:	57                   	push   edi
c001d979:	56                   	push   esi
c001d97a:	53                   	push   ebx
c001d97b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d97f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d983:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d989:	39 03                	cmp    DWORD PTR [ebx],eax
c001d98b:	74 13                	je     c001d9a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d98d:	83 ec 0c             	sub    esp,0xc
c001d990:	68 ec 5a 02 c0       	push   0xc0025aec
c001d995:	e8 5a 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	8d 76 00             	lea    esi,[esi+0x0]
c001d9a0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d9a6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d9a9:	74 11                	je     c001d9bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d9ab:	83 ec 0c             	sub    esp,0xc
c001d9ae:	68 2b 5b 02 c0       	push   0xc0025b2b
c001d9b3:	e8 3c 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d9b8:	83 c4 10             	add    esp,0x10
c001d9bb:	90                   	nop
c001d9bc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d9c2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d9c5:	74 11                	je     c001d9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d9c7:	83 ec 0c             	sub    esp,0xc
c001d9ca:	68 2b 5b 02 c0       	push   0xc0025b2b
c001d9cf:	e8 20 23 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001d9d4:	83 c4 10             	add    esp,0x10
c001d9d7:	90                   	nop
c001d9d8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d9db:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d9df:	7e 07                	jle    c001d9e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d9e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d9e5:	8d 76 00             	lea    esi,[esi+0x0]
c001d9e8:	85 f6                	test   esi,esi
c001d9ea:	7e 2c                	jle    c001da18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d9ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d9f0:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d9f3:	31 c9                	xor    ecx,ecx
c001d9f5:	01 d7                	add    edi,edx
c001d9f7:	90                   	nop
c001d9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d9fb:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d9fe:	85 c0                	test   eax,eax
c001da00:	79 06                	jns    c001da08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001da02:	05 ff 7f 00 00       	add    eax,0x7fff
c001da07:	90                   	nop
c001da08:	c1 f8 0f             	sar    eax,0xf
c001da0b:	83 c1 04             	add    ecx,0x4
c001da0e:	66 01 02             	add    WORD PTR [edx],ax
c001da11:	83 c2 02             	add    edx,0x2
c001da14:	39 d7                	cmp    edi,edx
c001da16:	75 e0                	jne    c001d9f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001da18:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001da1b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da1e:	83 ec 04             	sub    esp,0x4
c001da21:	29 f0                	sub    eax,esi
c001da23:	c1 e0 02             	shl    eax,0x2
c001da26:	50                   	push   eax
c001da27:	8d 04 b2             	lea    eax,[edx+esi*4]
c001da2a:	50                   	push   eax
c001da2b:	52                   	push   edx
c001da2c:	e8 9f 29 fe ff       	call   c00003d0 <memmove>
c001da31:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	29 f0                	sub    eax,esi
c001da39:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001da3c:	89 f0                	mov    eax,esi
c001da3e:	5b                   	pop    ebx
c001da3f:	5e                   	pop    esi
c001da40:	5f                   	pop    edi
c001da41:	c3                   	ret    
c001da42:	66 90                	xchg   ax,ax

c001da44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001da44:	57                   	push   edi
c001da45:	56                   	push   esi
c001da46:	53                   	push   ebx
c001da47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da4b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001da4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001da53:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001da59:	39 06                	cmp    DWORD PTR [esi],eax
c001da5b:	74 13                	je     c001da70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001da5d:	83 ec 0c             	sub    esp,0xc
c001da60:	68 0c 5b 02 c0       	push   0xc0025b0c
c001da65:	e8 8a 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001da6a:	83 c4 10             	add    esp,0x10
c001da6d:	8d 76 00             	lea    esi,[esi+0x0]
c001da70:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001da76:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001da79:	74 11                	je     c001da8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001da7b:	83 ec 0c             	sub    esp,0xc
c001da7e:	68 47 5b 02 c0       	push   0xc0025b47
c001da83:	e8 6c 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	90                   	nop
c001da8c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001da92:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001da95:	74 11                	je     c001daa8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001da97:	83 ec 0c             	sub    esp,0xc
c001da9a:	68 47 5b 02 c0       	push   0xc0025b47
c001da9f:	e8 50 22 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	90                   	nop
c001daa8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001daab:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001daaf:	7e 07                	jle    c001dab8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001dab1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dab5:	8d 76 00             	lea    esi,[esi+0x0]
c001dab8:	85 ff                	test   edi,edi
c001daba:	7e 1c                	jle    c001dad8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001dabc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dac3:	31 c0                	xor    eax,eax
c001dac5:	8d 76 00             	lea    esi,[esi+0x0]
c001dac8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dacb:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dace:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dad1:	83 c0 04             	add    eax,0x4
c001dad4:	39 c1                	cmp    ecx,eax
c001dad6:	75 f0                	jne    c001dac8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dad8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dadb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dade:	83 ec 04             	sub    esp,0x4
c001dae1:	29 f8                	sub    eax,edi
c001dae3:	c1 e0 02             	shl    eax,0x2
c001dae6:	50                   	push   eax
c001dae7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001daea:	50                   	push   eax
c001daeb:	52                   	push   edx
c001daec:	e8 df 28 fe ff       	call   c00003d0 <memmove>
c001daf1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001daf4:	83 c4 10             	add    esp,0x10
c001daf7:	29 f8                	sub    eax,edi
c001daf9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001dafc:	89 f8                	mov    eax,edi
c001dafe:	5b                   	pop    ebx
c001daff:	5e                   	pop    esi
c001db00:	5f                   	pop    edi
c001db01:	c3                   	ret    

c001db02 <PCI::open(int, int, void*)>:
c001db02:	83 ec 18             	sub    esp,0x18
c001db05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db0d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db13:	8b 10                	mov    edx,DWORD PTR [eax]
c001db15:	50                   	push   eax
c001db16:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001db19:	31 c0                	xor    eax,eax
c001db1b:	83 c4 1c             	add    esp,0x1c
c001db1e:	c3                   	ret    
c001db1f:	90                   	nop

c001db20 <PCI::close(int, int, void*)>:
c001db20:	31 c0                	xor    eax,eax
c001db22:	c3                   	ret    
c001db23:	90                   	nop

c001db24 <PCI::PCI()>:
c001db24:	83 ec 0c             	sub    esp,0xc
c001db27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2b:	83 ec 08             	sub    esp,0x8
c001db2e:	68 63 5b 02 c0       	push   0xc0025b63
c001db33:	50                   	push   eax
c001db34:	e8 2b ae fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c001db41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db45:	89 10                	mov    DWORD PTR [eax],edx
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001db55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db59:	a3 e0 f4 02 c0       	mov    ds:0xc002f4e0,eax
c001db5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db68:	0f b6 d0             	movzx  edx,al
c001db6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001db76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db80:	0f b6 d0             	movzx  edx,al
c001db83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db87:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001db96:	8d 50 01             	lea    edx,[eax+0x1]
c001db99:	88 d1                	mov    cl,dl
c001db9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db9f:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dba5:	0f b6 d0             	movzx  edx,al
c001dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbac:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dbb0:	83 c9 c0             	or     ecx,0xffffffc0
c001dbb3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbb7:	90                   	nop
c001dbb8:	83 c4 0c             	add    esp,0xc
c001dbbb:	c3                   	ret    

c001dbbc <PCI::readBAR8(unsigned int, int)>:
c001dbbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbc4:	f6 c2 01             	test   dl,0x1
c001dbc7:	74 07                	je     c001dbd0 <PCI::readBAR8(unsigned int, int)+0x14>
c001dbc9:	83 e2 fc             	and    edx,0xfffffffc
c001dbcc:	01 c2                	add    edx,eax
c001dbce:	ec                   	in     al,dx
c001dbcf:	c3                   	ret    
c001dbd0:	83 e2 f0             	and    edx,0xfffffff0
c001dbd3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dbd6:	c3                   	ret    
c001dbd7:	90                   	nop

c001dbd8 <PCI::readBAR16(unsigned int, int)>:
c001dbd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbe0:	f6 c2 01             	test   dl,0x1
c001dbe3:	74 08                	je     c001dbed <PCI::readBAR16(unsigned int, int)+0x15>
c001dbe5:	83 e2 fc             	and    edx,0xfffffffc
c001dbe8:	01 c2                	add    edx,eax
c001dbea:	66 ed                	in     ax,dx
c001dbec:	c3                   	ret    
c001dbed:	83 e2 f0             	and    edx,0xfffffff0
c001dbf0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dbf4:	c3                   	ret    
c001dbf5:	90                   	nop

c001dbf6 <PCI::readBAR32(unsigned int, int)>:
c001dbf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbfe:	f6 c2 01             	test   dl,0x1
c001dc01:	74 07                	je     c001dc0a <PCI::readBAR32(unsigned int, int)+0x14>
c001dc03:	83 e2 fc             	and    edx,0xfffffffc
c001dc06:	01 c2                	add    edx,eax
c001dc08:	ed                   	in     eax,dx
c001dc09:	c3                   	ret    
c001dc0a:	83 e2 f0             	and    edx,0xfffffff0
c001dc0d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dc10:	c3                   	ret    
c001dc11:	90                   	nop

c001dc12 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dc12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc1e:	f6 c2 01             	test   dl,0x1
c001dc21:	74 07                	je     c001dc2a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dc23:	83 e2 fc             	and    edx,0xfffffffc
c001dc26:	01 ca                	add    edx,ecx
c001dc28:	ee                   	out    dx,al
c001dc29:	c3                   	ret    
c001dc2a:	83 e2 f0             	and    edx,0xfffffff0
c001dc2d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dc30:	c3                   	ret    
c001dc31:	90                   	nop

c001dc32 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dc32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc3e:	f6 c2 01             	test   dl,0x1
c001dc41:	74 08                	je     c001dc4b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dc43:	83 e2 fc             	and    edx,0xfffffffc
c001dc46:	01 ca                	add    edx,ecx
c001dc48:	66 ef                	out    dx,ax
c001dc4a:	c3                   	ret    
c001dc4b:	83 e2 f0             	and    edx,0xfffffff0
c001dc4e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dc52:	c3                   	ret    
c001dc53:	90                   	nop

c001dc54 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dc54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dc58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc60:	f6 c2 01             	test   dl,0x1
c001dc63:	74 07                	je     c001dc6c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dc65:	83 e2 fc             	and    edx,0xfffffffc
c001dc68:	01 ca                	add    edx,ecx
c001dc6a:	ef                   	out    dx,eax
c001dc6b:	c3                   	ret    
c001dc6c:	83 e2 f0             	and    edx,0xfffffff0
c001dc6f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dc72:	c3                   	ret    
c001dc73:	90                   	nop

c001dc74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dc74:	55                   	push   ebp
c001dc75:	57                   	push   edi
c001dc76:	56                   	push   esi
c001dc77:	53                   	push   ebx
c001dc78:	83 ec 0c             	sub    esp,0xc
c001dc7b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001dc80:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dc84:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dc88:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc8c:	83 fe 07             	cmp    esi,0x7
c001dc8f:	76 10                	jbe    c001dca1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001dc91:	83 ec 0c             	sub    esp,0xc
c001dc94:	68 6b 5b 02 c0       	push   0xc0025b6b
c001dc99:	e8 56 20 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	0f b6 db             	movzx  ebx,bl
c001dca4:	83 fb 0f             	cmp    ebx,0xf
c001dca7:	76 10                	jbe    c001dcb9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001dca9:	83 ec 0c             	sub    esp,0xc
c001dcac:	68 9b 5b 02 c0       	push   0xc0025b9b
c001dcb1:	e8 3e 20 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	8d 04 36             	lea    eax,[esi+esi*1]
c001dcbc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dcc1:	83 c8 f0             	or     eax,0xfffffff0
c001dcc4:	ee                   	out    dx,al
c001dcc5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dcca:	89 e8                	mov    eax,ebp
c001dccc:	ee                   	out    dx,al
c001dccd:	83 c4 0c             	add    esp,0xc
c001dcd0:	89 d8                	mov    eax,ebx
c001dcd2:	89 f9                	mov    ecx,edi
c001dcd4:	c1 e0 08             	shl    eax,0x8
c001dcd7:	0f b6 d9             	movzx  ebx,cl
c001dcda:	83 e3 fc             	and    ebx,0xfffffffc
c001dcdd:	09 d8                	or     eax,ebx
c001dcdf:	5b                   	pop    ebx
c001dce0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001dce5:	5e                   	pop    esi
c001dce6:	5f                   	pop    edi
c001dce7:	5d                   	pop    ebp
c001dce8:	c3                   	ret    
c001dce9:	90                   	nop

c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dcea:	57                   	push   edi
c001dceb:	56                   	push   esi
c001dcec:	53                   	push   ebx
c001dced:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcf5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dcfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dd07:	83 ff 01             	cmp    edi,0x1
c001dd0a:	75 3f                	jne    c001dd4b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001dd0c:	89 de                	mov    esi,ebx
c001dd0e:	0f b6 c0             	movzx  eax,al
c001dd11:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dd17:	c1 e0 10             	shl    eax,0x10
c001dd1a:	0f b6 c9             	movzx  ecx,cl
c001dd1d:	09 f0                	or     eax,esi
c001dd1f:	c1 e1 08             	shl    ecx,0x8
c001dd22:	0f b6 d2             	movzx  edx,dl
c001dd25:	09 c8                	or     eax,ecx
c001dd27:	c1 e2 0b             	shl    edx,0xb
c001dd2a:	09 d0                	or     eax,edx
c001dd2c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dd31:	0d 00 00 00 80       	or     eax,0x80000000
c001dd36:	ef                   	out    dx,eax
c001dd37:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dd3c:	ed                   	in     eax,dx
c001dd3d:	83 e3 02             	and    ebx,0x2
c001dd40:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dd47:	d3 e8                	shr    eax,cl
c001dd49:	eb 44                	jmp    c001dd8f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dd4b:	83 ff 02             	cmp    edi,0x2
c001dd4e:	75 2d                	jne    c001dd7d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dd50:	83 ec 0c             	sub    esp,0xc
c001dd53:	0f b6 c9             	movzx  ecx,cl
c001dd56:	0f b6 d2             	movzx  edx,dl
c001dd59:	0f b6 fb             	movzx  edi,bl
c001dd5c:	0f b6 c0             	movzx  eax,al
c001dd5f:	57                   	push   edi
c001dd60:	51                   	push   ecx
c001dd61:	52                   	push   edx
c001dd62:	50                   	push   eax
c001dd63:	56                   	push   esi
c001dd64:	e8 0b ff ff ff       	call   c001dc74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dd69:	89 c2                	mov    edx,eax
c001dd6b:	ed                   	in     eax,dx
c001dd6c:	83 e3 02             	and    ebx,0x2
c001dd6f:	83 c4 20             	add    esp,0x20
c001dd72:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dd79:	d3 e8                	shr    eax,cl
c001dd7b:	eb 12                	jmp    c001dd8f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dd7d:	83 ec 0c             	sub    esp,0xc
c001dd80:	68 cb 5b 02 c0       	push   0xc0025bcb
c001dd85:	e8 6a 1f ff ff       	call   c000fcf4 <KePanic(char const*)>
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	31 c0                	xor    eax,eax
c001dd8f:	5b                   	pop    ebx
c001dd90:	5e                   	pop    esi
c001dd91:	5f                   	pop    edi
c001dd92:	c3                   	ret    
c001dd93:	90                   	nop

c001dd94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001dd94:	83 ec 18             	sub    esp,0x18
c001dd97:	6a 00                	push   0x0
c001dd99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dd9e:	50                   	push   eax
c001dd9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dda4:	50                   	push   eax
c001dda5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddaa:	50                   	push   eax
c001ddab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddaf:	e8 36 ff ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddb4:	83 c4 2c             	add    esp,0x2c
c001ddb7:	c3                   	ret    

c001ddb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ddb8:	83 ec 18             	sub    esp,0x18
c001ddbb:	6a 0e                	push   0xe
c001ddbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddc2:	50                   	push   eax
c001ddc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddc8:	50                   	push   eax
c001ddc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ddce:	50                   	push   eax
c001ddcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ddd3:	e8 12 ff ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ddd8:	83 c4 2c             	add    esp,0x2c
c001dddb:	0f b6 c0             	movzx  eax,al
c001ddde:	c3                   	ret    
c001dddf:	90                   	nop

c001dde0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001dde0:	55                   	push   ebp
c001dde1:	57                   	push   edi
c001dde2:	56                   	push   esi
c001dde3:	53                   	push   ebx
c001dde4:	83 ec 18             	sub    esp,0x18
c001dde7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ddec:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ddf1:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ddf6:	6a 0a                	push   0xa
c001ddf8:	56                   	push   esi
c001ddf9:	55                   	push   ebp
c001ddfa:	57                   	push   edi
c001ddfb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddff:	e8 e6 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de04:	83 c4 14             	add    esp,0x14
c001de07:	89 c3                	mov    ebx,eax
c001de09:	6a 0a                	push   0xa
c001de0b:	0f b6 db             	movzx  ebx,bl
c001de0e:	56                   	push   esi
c001de0f:	55                   	push   ebp
c001de10:	57                   	push   edi
c001de11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de15:	e8 d0 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de1a:	83 c4 2c             	add    esp,0x2c
c001de1d:	25 00 ff 00 00       	and    eax,0xff00
c001de22:	09 d8                	or     eax,ebx
c001de24:	5b                   	pop    ebx
c001de25:	5e                   	pop    esi
c001de26:	5f                   	pop    edi
c001de27:	5d                   	pop    ebp
c001de28:	c3                   	ret    
c001de29:	90                   	nop

c001de2a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001de2a:	83 ec 18             	sub    esp,0x18
c001de2d:	6a 08                	push   0x8
c001de2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de34:	50                   	push   eax
c001de35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de3a:	50                   	push   eax
c001de3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de40:	50                   	push   eax
c001de41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de45:	e8 a0 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de4a:	83 c4 2c             	add    esp,0x2c
c001de4d:	0f b6 c4             	movzx  eax,ah
c001de50:	c3                   	ret    
c001de51:	90                   	nop

c001de52 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001de52:	83 ec 18             	sub    esp,0x18
c001de55:	6a 08                	push   0x8
c001de57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de5c:	50                   	push   eax
c001de5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de62:	50                   	push   eax
c001de63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de68:	50                   	push   eax
c001de69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de6d:	e8 78 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de72:	83 c4 2c             	add    esp,0x2c
c001de75:	c3                   	ret    

c001de76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001de76:	83 ec 18             	sub    esp,0x18
c001de79:	6a 3c                	push   0x3c
c001de7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de80:	50                   	push   eax
c001de81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de86:	50                   	push   eax
c001de87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001de8c:	50                   	push   eax
c001de8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001de91:	e8 54 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de96:	83 c4 2c             	add    esp,0x2c
c001de99:	c3                   	ret    

c001de9a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001de9a:	83 ec 18             	sub    esp,0x18
c001de9d:	6a 18                	push   0x18
c001de9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dea4:	50                   	push   eax
c001dea5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deaa:	50                   	push   eax
c001deab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deb0:	50                   	push   eax
c001deb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001deb5:	e8 30 fe ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deba:	83 c4 2c             	add    esp,0x2c
c001debd:	0f b6 c4             	movzx  eax,ah
c001dec0:	c3                   	ret    
c001dec1:	90                   	nop

c001dec2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dec2:	55                   	push   ebp
c001dec3:	57                   	push   edi
c001dec4:	56                   	push   esi
c001dec5:	53                   	push   ebx
c001dec6:	83 ec 28             	sub    esp,0x28
c001dec9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001decd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ded2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ded7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dedc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dee3:	8d 43 12             	lea    eax,[ebx+0x12]
c001dee6:	83 c3 10             	add    ebx,0x10
c001dee9:	0f b6 c0             	movzx  eax,al
c001deec:	0f b6 db             	movzx  ebx,bl
c001deef:	50                   	push   eax
c001def0:	51                   	push   ecx
c001def1:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001def5:	57                   	push   edi
c001def6:	55                   	push   ebp
c001def7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001defb:	e8 ea fd ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df00:	83 c4 14             	add    esp,0x14
c001df03:	89 c6                	mov    esi,eax
c001df05:	53                   	push   ebx
c001df06:	c1 e6 10             	shl    esi,0x10
c001df09:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df0d:	51                   	push   ecx
c001df0e:	57                   	push   edi
c001df0f:	55                   	push   ebp
c001df10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001df14:	e8 d1 fd ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df19:	83 c4 3c             	add    esp,0x3c
c001df1c:	0f b7 c0             	movzx  eax,ax
c001df1f:	5b                   	pop    ebx
c001df20:	09 f0                	or     eax,esi
c001df22:	5e                   	pop    esi
c001df23:	5f                   	pop    edi
c001df24:	5d                   	pop    ebp
c001df25:	c3                   	ret    

c001df26 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001df26:	55                   	push   ebp
c001df27:	57                   	push   edi
c001df28:	56                   	push   esi
c001df29:	53                   	push   ebx
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001df31:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001df35:	89 f5                	mov    ebp,esi
c001df37:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001df3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001df41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001df49:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df4d:	83 f9 01             	cmp    ecx,0x1
c001df50:	75 5d                	jne    c001dfaf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001df52:	0f b6 c8             	movzx  ecx,al
c001df55:	0f b6 d2             	movzx  edx,dl
c001df58:	c1 e1 10             	shl    ecx,0x10
c001df5b:	c1 e2 0b             	shl    edx,0xb
c001df5e:	89 f0                	mov    eax,esi
c001df60:	25 fc 00 00 00       	and    eax,0xfc
c001df65:	09 c1                	or     ecx,eax
c001df67:	89 e8                	mov    eax,ebp
c001df69:	0f b6 c0             	movzx  eax,al
c001df6c:	c1 e0 08             	shl    eax,0x8
c001df6f:	09 c1                	or     ecx,eax
c001df71:	09 d1                	or     ecx,edx
c001df73:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df78:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001df7e:	89 c8                	mov    eax,ecx
c001df80:	ef                   	out    dx,eax
c001df81:	ba fc 0c 00 00       	mov    edx,0xcfc
c001df86:	ed                   	in     eax,dx
c001df87:	0f b7 db             	movzx  ebx,bx
c001df8a:	83 e6 02             	and    esi,0x2
c001df8d:	74 0a                	je     c001df99 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001df8f:	0f b7 d0             	movzx  edx,ax
c001df92:	c1 e3 10             	shl    ebx,0x10
c001df95:	09 d3                	or     ebx,edx
c001df97:	eb 05                	jmp    c001df9e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001df99:	66 31 c0             	xor    ax,ax
c001df9c:	09 c3                	or     ebx,eax
c001df9e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dfa3:	89 c8                	mov    eax,ecx
c001dfa5:	ef                   	out    dx,eax
c001dfa6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dfab:	89 d8                	mov    eax,ebx
c001dfad:	eb 41                	jmp    c001dff0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dfaf:	83 f9 02             	cmp    ecx,0x2
c001dfb2:	75 45                	jne    c001dff9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001dfb4:	83 ec 0c             	sub    esp,0xc
c001dfb7:	0f b6 d2             	movzx  edx,dl
c001dfba:	89 f1                	mov    ecx,esi
c001dfbc:	0f b6 c0             	movzx  eax,al
c001dfbf:	0f b6 f1             	movzx  esi,cl
c001dfc2:	89 e9                	mov    ecx,ebp
c001dfc4:	56                   	push   esi
c001dfc5:	0f b6 c9             	movzx  ecx,cl
c001dfc8:	51                   	push   ecx
c001dfc9:	52                   	push   edx
c001dfca:	50                   	push   eax
c001dfcb:	57                   	push   edi
c001dfcc:	e8 a3 fc ff ff       	call   c001dc74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfd1:	89 c2                	mov    edx,eax
c001dfd3:	ed                   	in     eax,dx
c001dfd4:	83 c4 20             	add    esp,0x20
c001dfd7:	0f b7 db             	movzx  ebx,bx
c001dfda:	f6 c2 02             	test   dl,0x2
c001dfdd:	74 0c                	je     c001dfeb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001dfdf:	0f b7 c8             	movzx  ecx,ax
c001dfe2:	89 d8                	mov    eax,ebx
c001dfe4:	c1 e0 10             	shl    eax,0x10
c001dfe7:	09 c8                	or     eax,ecx
c001dfe9:	eb 05                	jmp    c001dff0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001dfeb:	66 31 c0             	xor    ax,ax
c001dfee:	09 d8                	or     eax,ebx
c001dff0:	ef                   	out    dx,eax
c001dff1:	83 c4 0c             	add    esp,0xc
c001dff4:	5b                   	pop    ebx
c001dff5:	5e                   	pop    esi
c001dff6:	5f                   	pop    edi
c001dff7:	5d                   	pop    ebp
c001dff8:	c3                   	ret    
c001dff9:	c7 44 24 20 cb 5b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025bcb
c001e001:	83 c4 0c             	add    esp,0xc
c001e004:	5b                   	pop    ebx
c001e005:	5e                   	pop    esi
c001e006:	5f                   	pop    edi
c001e007:	5d                   	pop    ebp
c001e008:	e9 e7 1c ff ff       	jmp    c000fcf4 <KePanic(char const*)>
c001e00d:	90                   	nop

c001e00e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e00e:	55                   	push   ebp
c001e00f:	57                   	push   edi
c001e010:	56                   	push   esi
c001e011:	53                   	push   ebx
c001e012:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e018:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001e01f:	80 3d ec f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f4ec,0x0
c001e026:	0f 85 bd 00 00 00    	jne    c001e0e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	68 14 01 00 00       	push   0x114
c001e034:	e8 5e 18 ff ff       	call   c000f897 <malloc>
c001e039:	83 c4 0c             	add    esp,0xc
c001e03c:	89 c3                	mov    ebx,eax
c001e03e:	ff 35 98 ca 02 c0    	push   DWORD PTR ds:0xc002ca98
c001e044:	68 d1 5b 02 c0       	push   0xc0025bd1
c001e049:	50                   	push   eax
c001e04a:	e8 3b a1 fe ff       	call   c000818a <File::File(char const*, Process*)>
c001e04f:	83 c4 10             	add    esp,0x10
c001e052:	85 db                	test   ebx,ebx
c001e054:	0f 84 67 02 00 00    	je     c001e2c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e05a:	56                   	push   esi
c001e05b:	56                   	push   esi
c001e05c:	6a 01                	push   0x1
c001e05e:	53                   	push   ebx
c001e05f:	e8 44 a1 fe ff       	call   c00081a8 <File::open(FileOpenMode)>
c001e064:	83 c4 10             	add    esp,0x10
c001e067:	85 c0                	test   eax,eax
c001e069:	0f 85 52 02 00 00    	jne    c001e2c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e06f:	52                   	push   edx
c001e070:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e074:	50                   	push   eax
c001e075:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e079:	50                   	push   eax
c001e07a:	53                   	push   ebx
c001e07b:	e8 2a a4 fe ff       	call   c00084aa <File::stat(unsigned long long*, bool*)>
c001e080:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e084:	40                   	inc    eax
c001e085:	89 04 24             	mov    DWORD PTR [esp],eax
c001e088:	e8 0a 18 ff ff       	call   c000f897 <malloc>
c001e08d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e091:	a3 e8 f4 02 c0       	mov    ds:0xc002f4e8,eax
c001e096:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e09a:	59                   	pop    ecx
c001e09b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e09d:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e0a1:	51                   	push   ecx
c001e0a2:	50                   	push   eax
c001e0a3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e0a7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e0ab:	53                   	push   ebx
c001e0ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e0af:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e0b3:	83 c4 20             	add    esp,0x20
c001e0b6:	89 c8                	mov    eax,ecx
c001e0b8:	99                   	cdq    
c001e0b9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e0bd:	0f 85 fe 01 00 00    	jne    c001e2c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e0c3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e0c7:	0f 85 f4 01 00 00    	jne    c001e2c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e0cd:	83 ec 0c             	sub    esp,0xc
c001e0d0:	53                   	push   ebx
c001e0d1:	e8 30 a1 fe ff       	call   c0008206 <File::close()>
c001e0d6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e0da:	c6 05 ec f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4ec,0x1
c001e0e1:	a3 e4 f4 02 c0       	mov    ds:0xc002f4e4,eax
c001e0e6:	83 c4 10             	add    esp,0x10
c001e0e9:	a1 e4 f4 02 c0       	mov    eax,ds:0xc002f4e4
c001e0ee:	8b 1d e8 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f4e8
c001e0f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e0f8:	31 f6                	xor    esi,esi
c001e0fa:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e102:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e109:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e10e:	31 c9                	xor    ecx,ecx
c001e110:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e118:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e11d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e129:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e131:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e135:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e139:	0f 8e 82 01 00 00    	jle    c001e2c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001e13f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001e142:	d4 40                	aam    0x40
c001e144:	d5 39                	aad    0x39
c001e146:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e14a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001e14e:	d4 40                	aam    0x40
c001e150:	d5 39                	aad    0x39
c001e152:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e156:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001e15a:	d4 40                	aam    0x40
c001e15c:	d5 39                	aad    0x39
c001e15e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e162:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001e166:	d4 40                	aam    0x40
c001e168:	d5 39                	aad    0x39
c001e16a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e16e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001e172:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e176:	3c 56                	cmp    al,0x56
c001e178:	74 43                	je     c001e1bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001e17a:	d4 40                	aam    0x40
c001e17c:	d5 39                	aad    0x39
c001e17e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e181:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001e185:	0f b6 c9             	movzx  ecx,cl
c001e188:	c1 e1 04             	shl    ecx,0x4
c001e18b:	d4 40                	aam    0x40
c001e18d:	d5 39                	aad    0x39
c001e18f:	83 e8 30             	sub    eax,0x30
c001e192:	0f b6 c0             	movzx  eax,al
c001e195:	09 c1                	or     ecx,eax
c001e197:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001e19b:	c1 e1 04             	shl    ecx,0x4
c001e19e:	d4 40                	aam    0x40
c001e1a0:	d5 39                	aad    0x39
c001e1a2:	83 e8 30             	sub    eax,0x30
c001e1a5:	0f b6 c0             	movzx  eax,al
c001e1a8:	09 c1                	or     ecx,eax
c001e1aa:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001e1ae:	c1 e1 04             	shl    ecx,0x4
c001e1b1:	d4 40                	aam    0x40
c001e1b3:	d5 39                	aad    0x39
c001e1b5:	83 e8 30             	sub    eax,0x30
c001e1b8:	0f b6 c0             	movzx  eax,al
c001e1bb:	09 c1                	or     ecx,eax
c001e1bd:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001e1c1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001e1c5:	3c 58                	cmp    al,0x58
c001e1c7:	74 47                	je     c001e210 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001e1c9:	d4 40                	aam    0x40
c001e1cb:	d5 39                	aad    0x39
c001e1cd:	8d 50 d0             	lea    edx,[eax-0x30]
c001e1d0:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001e1d4:	0f b6 d2             	movzx  edx,dl
c001e1d7:	c1 e2 04             	shl    edx,0x4
c001e1da:	d4 40                	aam    0x40
c001e1dc:	d5 39                	aad    0x39
c001e1de:	83 e8 30             	sub    eax,0x30
c001e1e1:	0f b6 c0             	movzx  eax,al
c001e1e4:	09 c2                	or     edx,eax
c001e1e6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001e1ea:	c1 e2 04             	shl    edx,0x4
c001e1ed:	d4 40                	aam    0x40
c001e1ef:	d5 39                	aad    0x39
c001e1f1:	83 e8 30             	sub    eax,0x30
c001e1f4:	0f b6 c0             	movzx  eax,al
c001e1f7:	09 c2                	or     edx,eax
c001e1f9:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001e1fd:	c1 e2 04             	shl    edx,0x4
c001e200:	d4 40                	aam    0x40
c001e202:	d5 39                	aad    0x39
c001e204:	83 e8 30             	sub    eax,0x30
c001e207:	0f b6 c0             	movzx  eax,al
c001e20a:	09 c2                	or     edx,eax
c001e20c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e210:	83 c6 10             	add    esi,0x10
c001e213:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e217:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001e21b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001e21f:	83 fa 0a             	cmp    edx,0xa
c001e222:	74 0b                	je     c001e22f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001e224:	47                   	inc    edi
c001e225:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001e229:	75 19                	jne    c001e244 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001e22b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001e22f:	31 c0                	xor    eax,eax
c001e231:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001e236:	0f 94 c0             	sete   al
c001e239:	01 c6                	add    esi,eax
c001e23b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e240:	75 0b                	jne    c001e24d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001e242:	eb 14                	jmp    c001e258 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001e244:	46                   	inc    esi
c001e245:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001e248:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e24b:	eb ca                	jmp    c001e217 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001e24d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001e252:	0f 85 dd fe ff ff    	jne    c001e135 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e258:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001e25d:	74 10                	je     c001e26f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001e25f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e264:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e269:	0f 85 c6 fe ff ff    	jne    c001e135 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e26f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e273:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e277:	83 e8 30             	sub    eax,0x30
c001e27a:	83 ef 30             	sub    edi,0x30
c001e27d:	c1 e0 04             	shl    eax,0x4
c001e280:	09 f8                	or     eax,edi
c001e282:	0f b6 c0             	movzx  eax,al
c001e285:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e289:	0f 85 a6 fe ff ff    	jne    c001e135 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e293:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001e297:	83 e8 30             	sub    eax,0x30
c001e29a:	83 ef 30             	sub    edi,0x30
c001e29d:	c1 e0 04             	shl    eax,0x4
c001e2a0:	09 f8                	or     eax,edi
c001e2a2:	0f b6 c0             	movzx  eax,al
c001e2a5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e2a9:	0f 85 86 fe ff ff    	jne    c001e135 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001e2af:	50                   	push   eax
c001e2b0:	50                   	push   eax
c001e2b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e2b5:	50                   	push   eax
c001e2b6:	55                   	push   ebp
c001e2b7:	e8 84 23 fe ff       	call   c0000640 <strcpy>
c001e2bc:	83 c4 10             	add    esp,0x10
c001e2bf:	eb 06                	jmp    c001e2c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001e2c1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001e2c5:	31 ed                	xor    ebp,ebp
c001e2c7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e2cd:	89 e8                	mov    eax,ebp
c001e2cf:	5b                   	pop    ebx
c001e2d0:	5e                   	pop    esi
c001e2d1:	5f                   	pop    edi
c001e2d2:	5d                   	pop    ebp
c001e2d3:	c3                   	ret    

c001e2d4 <PCI::checkBus(unsigned char)>:
c001e2d4:	56                   	push   esi
c001e2d5:	53                   	push   ebx
c001e2d6:	31 db                	xor    ebx,ebx
c001e2d8:	51                   	push   ecx
c001e2d9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e2de:	52                   	push   edx
c001e2df:	53                   	push   ebx
c001e2e0:	43                   	inc    ebx
c001e2e1:	56                   	push   esi
c001e2e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2e6:	e8 6f 03 00 00       	call   c001e65a <PCI::checkDevice(unsigned char, unsigned char)>
c001e2eb:	83 c4 10             	add    esp,0x10
c001e2ee:	83 fb 20             	cmp    ebx,0x20
c001e2f1:	75 eb                	jne    c001e2de <PCI::checkBus(unsigned char)+0xa>
c001e2f3:	58                   	pop    eax
c001e2f4:	5b                   	pop    ebx
c001e2f5:	5e                   	pop    esi
c001e2f6:	c3                   	ret    
c001e2f7:	90                   	nop

c001e2f8 <PCI::foundDevice(PCIDeviceInfo)>:
c001e2f8:	55                   	push   ebp
c001e2f9:	57                   	push   edi
c001e2fa:	56                   	push   esi
c001e2fb:	53                   	push   ebx
c001e2fc:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e302:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e30a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001e311:	3d ff ff 00 00       	cmp    eax,0xffff
c001e316:	0f 84 b7 01 00 00    	je     c001e4d3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e31c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001e324:	66 81 fb 06 04       	cmp    bx,0x406
c001e329:	75 32                	jne    c001e35d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e32b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e333:	50                   	push   eax
c001e334:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e33c:	50                   	push   eax
c001e33d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e345:	50                   	push   eax
c001e346:	55                   	push   ebp
c001e347:	e8 4e fb ff ff       	call   c001de9a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e34c:	59                   	pop    ecx
c001e34d:	0f b6 c0             	movzx  eax,al
c001e350:	5b                   	pop    ebx
c001e351:	50                   	push   eax
c001e352:	55                   	push   ebp
c001e353:	e8 7c ff ff ff       	call   c001e2d4 <PCI::checkBus(unsigned char)>
c001e358:	e9 16 01 00 00       	jmp    c001e473 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001e35d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e364:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001e36a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001e36e:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001e375:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001e37d:	85 c0                	test   eax,eax
c001e37f:	74 36                	je     c001e3b7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001e381:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e384:	85 d2                	test   edx,edx
c001e386:	74 2b                	je     c001e3b3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e388:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001e38e:	31 f9                	xor    ecx,edi
c001e390:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001e396:	75 1b                	jne    c001e3b3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e39c:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001e3a2:	75 0f                	jne    c001e3b3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001e3a4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e3ab:	39 f2                	cmp    edx,esi
c001e3ad:	0f 84 20 01 00 00    	je     c001e4d3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e3b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3b5:	eb c6                	jmp    c001e37d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e3b7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e3bb:	be 04 5c 02 c0       	mov    esi,0xc0025c04
c001e3c0:	b9 07 00 00 00       	mov    ecx,0x7
c001e3c5:	fc                   	cld    
c001e3c6:	31 d2                	xor    edx,edx
c001e3c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e3ca:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e3d1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e3d5:	b9 12 00 00 00       	mov    ecx,0x12
c001e3da:	83 ec 0c             	sub    esp,0xc
c001e3dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3df:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e3e7:	b9 0a 00 00 00       	mov    ecx,0xa
c001e3ec:	f7 f1                	div    ecx
c001e3ee:	83 c0 30             	add    eax,0x30
c001e3f1:	83 c2 30             	add    edx,0x30
c001e3f4:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e3f8:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e3fc:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e404:	31 d2                	xor    edx,edx
c001e406:	f7 f1                	div    ecx
c001e408:	83 c0 30             	add    eax,0x30
c001e40b:	83 c2 30             	add    edx,0x30
c001e40e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e412:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e416:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e41a:	50                   	push   eax
c001e41b:	e8 e5 ee fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001e420:	83 c4 10             	add    esp,0x10
c001e423:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001e429:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e430:	75 46                	jne    c001e478 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001e432:	83 ec 0c             	sub    esp,0xc
c001e435:	68 64 01 00 00       	push   0x164
c001e43a:	e8 58 14 ff ff       	call   c000f897 <malloc>
c001e43f:	89 c3                	mov    ebx,eax
c001e441:	89 04 24             	mov    DWORD PTR [esp],eax
c001e444:	e8 3b 11 00 00       	call   c001f584 <SATABus::SATABus()>
c001e449:	58                   	pop    eax
c001e44a:	5a                   	pop    edx
c001e44b:	53                   	push   ebx
c001e44c:	55                   	push   ebp
c001e44d:	e8 02 b6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e452:	83 ec 1c             	sub    esp,0x1c
c001e455:	b9 09 00 00 00       	mov    ecx,0x9
c001e45a:	89 e7                	mov    edi,esp
c001e45c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e45e:	53                   	push   ebx
c001e45f:	e8 36 b5 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e464:	83 c4 30             	add    esp,0x30
c001e467:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e469:	6a 00                	push   0x0
c001e46b:	6a 00                	push   0x0
c001e46d:	6a 00                	push   0x0
c001e46f:	53                   	push   ebx
c001e470:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e473:	83 c4 10             	add    esp,0x10
c001e476:	eb 5b                	jmp    c001e4d3 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001e478:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001e47e:	75 19                	jne    c001e499 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	68 70 02 00 00       	push   0x270
c001e488:	e8 0a 14 ff ff       	call   c000f897 <malloc>
c001e48d:	89 c3                	mov    ebx,eax
c001e48f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e492:	e8 93 02 00 00       	call   c001e72a <IDE::IDE()>
c001e497:	eb b0                	jmp    c001e449 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001e499:	83 ec 0c             	sub    esp,0xc
c001e49c:	68 58 01 00 00       	push   0x158
c001e4a1:	e8 f1 13 ff ff       	call   c000f897 <malloc>
c001e4a6:	89 c3                	mov    ebx,eax
c001e4a8:	58                   	pop    eax
c001e4a9:	5a                   	pop    edx
c001e4aa:	68 ea 5b 02 c0       	push   0xc0025bea
c001e4af:	53                   	push   ebx
c001e4b0:	e8 53 b8 fe ff       	call   c0009d08 <DriverlessDevice::DriverlessDevice(char const*)>
c001e4b5:	59                   	pop    ecx
c001e4b6:	5f                   	pop    edi
c001e4b7:	53                   	push   ebx
c001e4b8:	55                   	push   ebp
c001e4b9:	e8 96 b5 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001e4be:	83 ec 1c             	sub    esp,0x1c
c001e4c1:	b9 09 00 00 00       	mov    ecx,0x9
c001e4c6:	89 e7                	mov    edi,esp
c001e4c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4ca:	53                   	push   ebx
c001e4cb:	e8 ca b4 fe ff       	call   c000999a <Device::preOpenPCI(PCIDeviceInfo)>
c001e4d0:	83 c4 30             	add    esp,0x30
c001e4d3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e4d9:	5b                   	pop    ebx
c001e4da:	5e                   	pop    esi
c001e4db:	5f                   	pop    edi
c001e4dc:	5d                   	pop    ebp
c001e4dd:	c3                   	ret    

c001e4de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e4de:	55                   	push   ebp
c001e4df:	57                   	push   edi
c001e4e0:	56                   	push   esi
c001e4e1:	53                   	push   ebx
c001e4e2:	83 ec 68             	sub    esp,0x68
c001e4e5:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e4e9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e4f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4f4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e4fb:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e500:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e504:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e50b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e514:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e519:	6a 0c                	push   0xc
c001e51b:	57                   	push   edi
c001e51c:	53                   	push   ebx
c001e51d:	56                   	push   esi
c001e51e:	55                   	push   ebp
c001e51f:	e8 c6 f7 ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e524:	83 c4 20             	add    esp,0x20
c001e527:	57                   	push   edi
c001e528:	53                   	push   ebx
c001e529:	56                   	push   esi
c001e52a:	55                   	push   ebp
c001e52b:	e8 b0 f8 ff ff       	call   c001dde0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e530:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e535:	57                   	push   edi
c001e536:	53                   	push   ebx
c001e537:	56                   	push   esi
c001e538:	55                   	push   ebp
c001e539:	e8 38 f9 ff ff       	call   c001de76 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e53e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e542:	83 c4 14             	add    esp,0x14
c001e545:	6a 3c                	push   0x3c
c001e547:	57                   	push   edi
c001e548:	53                   	push   ebx
c001e549:	56                   	push   esi
c001e54a:	55                   	push   ebp
c001e54b:	e8 9a f7 ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e550:	0f b6 c4             	movzx  eax,ah
c001e553:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e557:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e55b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e55f:	a1 08 c1 02 c0       	mov    eax,ds:0xc002c108
c001e564:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e56a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e570:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e574:	83 c4 20             	add    esp,0x20
c001e577:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e57c:	74 30                	je     c001e5ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e57e:	31 c0                	xor    eax,eax
c001e580:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e584:	7e 28                	jle    c001e5ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e586:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e58e:	39 cb                	cmp    ebx,ecx
c001e590:	75 19                	jne    c001e5ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e592:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e59a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e59e:	75 0b                	jne    c001e5ab <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e5a0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e5a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e5ab:	40                   	inc    eax
c001e5ac:	eb d2                	jmp    c001e580 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e5ae:	31 d2                	xor    edx,edx
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	57                   	push   edi
c001e5b4:	53                   	push   ebx
c001e5b5:	56                   	push   esi
c001e5b6:	52                   	push   edx
c001e5b7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e5bb:	55                   	push   ebp
c001e5bc:	e8 01 f9 ff ff       	call   c001dec2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5c1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5c5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e5c9:	42                   	inc    edx
c001e5ca:	83 c4 20             	add    esp,0x20
c001e5cd:	83 fa 06             	cmp    edx,0x6
c001e5d0:	75 de                	jne    c001e5b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e5d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5da:	c1 e2 08             	shl    edx,0x8
c001e5dd:	83 ec 0c             	sub    esp,0xc
c001e5e0:	0f b6 c4             	movzx  eax,ah
c001e5e3:	09 d0                	or     eax,edx
c001e5e5:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e5ea:	6a 02                	push   0x2
c001e5ec:	57                   	push   edi
c001e5ed:	53                   	push   ebx
c001e5ee:	56                   	push   esi
c001e5ef:	55                   	push   ebp
c001e5f0:	e8 f5 f6 ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e5f5:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e5fa:	83 c4 20             	add    esp,0x20
c001e5fd:	57                   	push   edi
c001e5fe:	53                   	push   ebx
c001e5ff:	56                   	push   esi
c001e600:	55                   	push   ebp
c001e601:	e8 24 f8 ff ff       	call   c001de2a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e606:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e60a:	57                   	push   edi
c001e60b:	53                   	push   ebx
c001e60c:	56                   	push   esi
c001e60d:	55                   	push   ebp
c001e60e:	e8 81 f7 ff ff       	call   c001dd94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e613:	b9 09 00 00 00       	mov    ecx,0x9
c001e618:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e61d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e621:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e625:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e629:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e62d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e631:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e635:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e639:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e63d:	83 ec 0c             	sub    esp,0xc
c001e640:	fc                   	cld    
c001e641:	89 e7                	mov    edi,esp
c001e643:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e647:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e649:	55                   	push   ebp
c001e64a:	e8 a9 fc ff ff       	call   c001e2f8 <PCI::foundDevice(PCIDeviceInfo)>
c001e64f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e655:	5b                   	pop    ebx
c001e656:	5e                   	pop    esi
c001e657:	5f                   	pop    edi
c001e658:	5d                   	pop    ebp
c001e659:	c3                   	ret    

c001e65a <PCI::checkDevice(unsigned char, unsigned char)>:
c001e65a:	55                   	push   ebp
c001e65b:	57                   	push   edi
c001e65c:	56                   	push   esi
c001e65d:	53                   	push   ebx
c001e65e:	83 ec 0c             	sub    esp,0xc
c001e661:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e665:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e66a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e66f:	6a 00                	push   0x0
c001e671:	56                   	push   esi
c001e672:	57                   	push   edi
c001e673:	55                   	push   ebp
c001e674:	e8 1b f7 ff ff       	call   c001dd94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e679:	6a 00                	push   0x0
c001e67b:	56                   	push   esi
c001e67c:	57                   	push   edi
c001e67d:	55                   	push   ebp
c001e67e:	e8 5b fe ff ff       	call   c001e4de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e683:	83 c4 20             	add    esp,0x20
c001e686:	6a 00                	push   0x0
c001e688:	56                   	push   esi
c001e689:	57                   	push   edi
c001e68a:	55                   	push   ebp
c001e68b:	e8 28 f7 ff ff       	call   c001ddb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e690:	83 c4 10             	add    esp,0x10
c001e693:	a8 80                	test   al,0x80
c001e695:	74 2d                	je     c001e6c4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e697:	bb 01 00 00 00       	mov    ebx,0x1
c001e69c:	53                   	push   ebx
c001e69d:	56                   	push   esi
c001e69e:	57                   	push   edi
c001e69f:	55                   	push   ebp
c001e6a0:	e8 ef f6 ff ff       	call   c001dd94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	0f b7 c0             	movzx  eax,ax
c001e6ab:	3d ff ff 00 00       	cmp    eax,0xffff
c001e6b0:	74 0c                	je     c001e6be <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e6b2:	53                   	push   ebx
c001e6b3:	56                   	push   esi
c001e6b4:	57                   	push   edi
c001e6b5:	55                   	push   ebp
c001e6b6:	e8 23 fe ff ff       	call   c001e4de <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	43                   	inc    ebx
c001e6bf:	83 fb 08             	cmp    ebx,0x8
c001e6c2:	75 d8                	jne    c001e69c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e6c4:	83 c4 0c             	add    esp,0xc
c001e6c7:	5b                   	pop    ebx
c001e6c8:	5e                   	pop    esi
c001e6c9:	5f                   	pop    edi
c001e6ca:	5d                   	pop    ebp
c001e6cb:	c3                   	ret    

c001e6cc <PCI::detect()>:
c001e6cc:	56                   	push   esi
c001e6cd:	53                   	push   ebx
c001e6ce:	53                   	push   ebx
c001e6cf:	31 db                	xor    ebx,ebx
c001e6d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6d5:	6a 00                	push   0x0
c001e6d7:	6a 00                	push   0x0
c001e6d9:	6a 00                	push   0x0
c001e6db:	56                   	push   esi
c001e6dc:	e8 d7 f6 ff ff       	call   c001ddb8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e6e1:	83 c4 10             	add    esp,0x10
c001e6e4:	a8 80                	test   al,0x80
c001e6e6:	75 21                	jne    c001e709 <PCI::detect()+0x3d>
c001e6e8:	51                   	push   ecx
c001e6e9:	51                   	push   ecx
c001e6ea:	6a 00                	push   0x0
c001e6ec:	56                   	push   esi
c001e6ed:	e8 e2 fb ff ff       	call   c001e2d4 <PCI::checkBus(unsigned char)>
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	eb 2a                	jmp    c001e721 <PCI::detect()+0x55>
c001e6f7:	52                   	push   edx
c001e6f8:	52                   	push   edx
c001e6f9:	53                   	push   ebx
c001e6fa:	43                   	inc    ebx
c001e6fb:	56                   	push   esi
c001e6fc:	e8 d3 fb ff ff       	call   c001e2d4 <PCI::checkBus(unsigned char)>
c001e701:	83 c4 10             	add    esp,0x10
c001e704:	83 fb 08             	cmp    ebx,0x8
c001e707:	74 18                	je     c001e721 <PCI::detect()+0x55>
c001e709:	53                   	push   ebx
c001e70a:	6a 00                	push   0x0
c001e70c:	6a 00                	push   0x0
c001e70e:	56                   	push   esi
c001e70f:	e8 80 f6 ff ff       	call   c001dd94 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e714:	83 c4 10             	add    esp,0x10
c001e717:	0f b7 c0             	movzx  eax,ax
c001e71a:	3d ff ff 00 00       	cmp    eax,0xffff
c001e71f:	74 d6                	je     c001e6f7 <PCI::detect()+0x2b>
c001e721:	58                   	pop    eax
c001e722:	5b                   	pop    ebx
c001e723:	5e                   	pop    esi
c001e724:	c3                   	ret    
c001e725:	90                   	nop

c001e726 <IDE::close(int, int, void*)>:
c001e726:	83 c8 ff             	or     eax,0xffffffff
c001e729:	c3                   	ret    

c001e72a <IDE::IDE()>:
c001e72a:	83 ec 0c             	sub    esp,0xc
c001e72d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e731:	83 ec 08             	sub    esp,0x8
c001e734:	68 94 5c 02 c0       	push   0xc0025c94
c001e739:	50                   	push   eax
c001e73a:	e8 6d b6 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001e73f:	83 c4 10             	add    esp,0x10
c001e742:	ba c0 5d 02 c0       	mov    edx,0xc0025dc0
c001e747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e74b:	89 10                	mov    DWORD PTR [eax],edx
c001e74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e751:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e758:	90                   	nop
c001e759:	83 c4 0c             	add    esp,0xc
c001e75c:	c3                   	ret    
c001e75d:	90                   	nop

c001e75e <IDE::prepareInterrupt(unsigned char)>:
c001e75e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e763:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e767:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e76f:	c3                   	ret    

c001e770 <selectDrive(unsigned char, unsigned char)>:
c001e770:	c3                   	ret    
c001e771:	90                   	nop

c001e772 <IDE::getBase(unsigned char)>:
c001e772:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e77b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e783:	c3                   	ret    

c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e784:	55                   	push   ebp
c001e785:	57                   	push   edi
c001e786:	56                   	push   esi
c001e787:	53                   	push   ebx
c001e788:	83 ec 1c             	sub    esp,0x1c
c001e78b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e78f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e793:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e796:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e79a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e79e:	80 f9 03             	cmp    cl,0x3
c001e7a1:	77 4f                	ja     c001e7f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e7a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7a7:	0f b6 fa             	movzx  edi,dl
c001e7aa:	0f b6 db             	movzx  ebx,bl
c001e7ad:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e7b0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e7b5:	80 ca 80             	or     dl,0x80
c001e7b8:	52                   	push   edx
c001e7b9:	6a 0c                	push   0xc
c001e7bb:	57                   	push   edi
c001e7bc:	56                   	push   esi
c001e7bd:	e8 c2 ff ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7c2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e7c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7cb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e7cf:	ee                   	out    dx,al
c001e7d0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e7d5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e7d9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e7dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e7e1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e7e9:	83 c4 2c             	add    esp,0x2c
c001e7ec:	5b                   	pop    ebx
c001e7ed:	5e                   	pop    esi
c001e7ee:	5f                   	pop    edi
c001e7ef:	5d                   	pop    ebp
c001e7f0:	eb 92                	jmp    c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f2:	0f b6 cb             	movzx  ecx,bl
c001e7f5:	83 f9 07             	cmp    ecx,0x7
c001e7f8:	77 12                	ja     c001e80c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e7fa:	0f b6 d2             	movzx  edx,dl
c001e7fd:	0f b6 db             	movzx  ebx,bl
c001e800:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e808:	01 da                	add    edx,ebx
c001e80a:	eb 2f                	jmp    c001e83b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e80c:	83 f9 0d             	cmp    ecx,0xd
c001e80f:	77 13                	ja     c001e824 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e811:	0f b6 d2             	movzx  edx,dl
c001e814:	0f b6 db             	movzx  ebx,bl
c001e817:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e81e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e822:	eb 17                	jmp    c001e83b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e824:	83 f9 15             	cmp    ecx,0x15
c001e827:	77 13                	ja     c001e83c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e829:	0f b6 d2             	movzx  edx,dl
c001e82c:	0f b6 db             	movzx  ebx,bl
c001e82f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e837:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e83b:	ee                   	out    dx,al
c001e83c:	83 c4 1c             	add    esp,0x1c
c001e83f:	5b                   	pop    ebx
c001e840:	5e                   	pop    esi
c001e841:	5f                   	pop    edi
c001e842:	5d                   	pop    ebp
c001e843:	c3                   	ret    

c001e844 <IDE::read(unsigned char, unsigned char)>:
c001e844:	55                   	push   ebp
c001e845:	57                   	push   edi
c001e846:	56                   	push   esi
c001e847:	53                   	push   ebx
c001e848:	83 ec 1c             	sub    esp,0x1c
c001e84b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e84f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e853:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e856:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e85a:	3c 03                	cmp    al,0x3
c001e85c:	77 40                	ja     c001e89e <IDE::read(unsigned char, unsigned char)+0x5a>
c001e85e:	0f b6 f9             	movzx  edi,cl
c001e861:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e864:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e869:	0c 80                	or     al,0x80
c001e86b:	50                   	push   eax
c001e86c:	6a 0c                	push   0xc
c001e86e:	57                   	push   edi
c001e86f:	56                   	push   esi
c001e870:	e8 0f ff ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e875:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e87a:	0f b6 d3             	movzx  edx,bl
c001e87d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e881:	ec                   	in     al,dx
c001e882:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e886:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e88b:	52                   	push   edx
c001e88c:	6a 0c                	push   0xc
c001e88e:	57                   	push   edi
c001e88f:	56                   	push   esi
c001e890:	e8 ef fe ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e895:	83 c4 20             	add    esp,0x20
c001e898:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e89c:	eb 4c                	jmp    c001e8ea <IDE::read(unsigned char, unsigned char)+0xa6>
c001e89e:	0f b6 d3             	movzx  edx,bl
c001e8a1:	83 fa 07             	cmp    edx,0x7
c001e8a4:	77 12                	ja     c001e8b8 <IDE::read(unsigned char, unsigned char)+0x74>
c001e8a6:	0f b6 c9             	movzx  ecx,cl
c001e8a9:	0f b6 d3             	movzx  edx,bl
c001e8ac:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e8b4:	01 c2                	add    edx,eax
c001e8b6:	eb 31                	jmp    c001e8e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e8b8:	83 fa 0d             	cmp    edx,0xd
c001e8bb:	77 13                	ja     c001e8d0 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e8bd:	0f b6 c9             	movzx  ecx,cl
c001e8c0:	0f b6 d3             	movzx  edx,bl
c001e8c3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e8ca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e8ce:	eb 19                	jmp    c001e8e9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e8d0:	31 c0                	xor    eax,eax
c001e8d2:	83 fa 15             	cmp    edx,0x15
c001e8d5:	77 13                	ja     c001e8ea <IDE::read(unsigned char, unsigned char)+0xa6>
c001e8d7:	0f b6 c9             	movzx  ecx,cl
c001e8da:	0f b6 d3             	movzx  edx,bl
c001e8dd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e8e5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e8e9:	ec                   	in     al,dx
c001e8ea:	83 c4 1c             	add    esp,0x1c
c001e8ed:	5b                   	pop    ebx
c001e8ee:	5e                   	pop    esi
c001e8ef:	5f                   	pop    edi
c001e8f0:	5d                   	pop    ebp
c001e8f1:	c3                   	ret    

c001e8f2 <IDE::waitInterrupt(unsigned char)>:
c001e8f2:	55                   	push   ebp
c001e8f3:	57                   	push   edi
c001e8f4:	56                   	push   esi
c001e8f5:	53                   	push   ebx
c001e8f6:	31 db                	xor    ebx,ebx
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e8ff:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e904:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e90c:	89 e8                	mov    eax,ebp
c001e90e:	84 c0                	test   al,al
c001e910:	75 31                	jne    c001e943 <IDE::waitInterrupt(unsigned char)+0x51>
c001e912:	52                   	push   edx
c001e913:	6a 0c                	push   0xc
c001e915:	56                   	push   esi
c001e916:	57                   	push   edi
c001e917:	e8 28 ff ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001e91c:	83 c4 10             	add    esp,0x10
c001e91f:	a8 01                	test   al,0x1
c001e921:	75 28                	jne    c001e94b <IDE::waitInterrupt(unsigned char)+0x59>
c001e923:	f6 c3 04             	test   bl,0x4
c001e926:	75 13                	jne    c001e93b <IDE::waitInterrupt(unsigned char)+0x49>
c001e928:	83 fb 32             	cmp    ebx,0x32
c001e92b:	7e 0e                	jle    c001e93b <IDE::waitInterrupt(unsigned char)+0x49>
c001e92d:	50                   	push   eax
c001e92e:	50                   	push   eax
c001e92f:	6a 00                	push   0x0
c001e931:	6a 64                	push   0x64
c001e933:	e8 dc 86 ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c001e938:	83 c4 10             	add    esp,0x10
c001e93b:	83 fb 3c             	cmp    ebx,0x3c
c001e93e:	74 0b                	je     c001e94b <IDE::waitInterrupt(unsigned char)+0x59>
c001e940:	43                   	inc    ebx
c001e941:	eb c1                	jmp    c001e904 <IDE::waitInterrupt(unsigned char)+0x12>
c001e943:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e94b:	83 c4 0c             	add    esp,0xc
c001e94e:	89 e8                	mov    eax,ebp
c001e950:	5b                   	pop    ebx
c001e951:	5e                   	pop    esi
c001e952:	5f                   	pop    edi
c001e953:	5d                   	pop    ebp
c001e954:	c3                   	ret    

c001e955 <ideChannel0IRQHandler(regs*, void*)>:
c001e955:	83 ec 10             	sub    esp,0x10
c001e958:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e95c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e963:	6a 07                	push   0x7
c001e965:	6a 00                	push   0x0
c001e967:	50                   	push   eax
c001e968:	e8 d7 fe ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001e96d:	83 c4 1c             	add    esp,0x1c
c001e970:	c3                   	ret    

c001e971 <ideChannel1IRQHandler(regs*, void*)>:
c001e971:	83 ec 10             	sub    esp,0x10
c001e974:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e978:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e97f:	6a 07                	push   0x7
c001e981:	6a 01                	push   0x1
c001e983:	50                   	push   eax
c001e984:	e8 bb fe ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001e989:	83 c4 1c             	add    esp,0x1c
c001e98c:	c3                   	ret    
c001e98d:	90                   	nop

c001e98e <IDE::enableIRQs(unsigned char, bool)>:
c001e98e:	57                   	push   edi
c001e98f:	b8 02 00 00 00       	mov    eax,0x2
c001e994:	56                   	push   esi
c001e995:	53                   	push   ebx
c001e996:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e99a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e99e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e9a3:	74 02                	je     c001e9a7 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e9a5:	31 c0                	xor    eax,eax
c001e9a7:	0f b6 db             	movzx  ebx,bl
c001e9aa:	bf 04 00 00 00       	mov    edi,0x4
c001e9af:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e9b6:	50                   	push   eax
c001e9b7:	6a 0c                	push   0xc
c001e9b9:	53                   	push   ebx
c001e9ba:	56                   	push   esi
c001e9bb:	e8 c4 fd ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9c0:	83 c4 10             	add    esp,0x10
c001e9c3:	50                   	push   eax
c001e9c4:	6a 0c                	push   0xc
c001e9c6:	53                   	push   ebx
c001e9c7:	56                   	push   esi
c001e9c8:	e8 77 fe ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001e9cd:	83 c4 10             	add    esp,0x10
c001e9d0:	4f                   	dec    edi
c001e9d1:	75 f0                	jne    c001e9c3 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e9d3:	5b                   	pop    ebx
c001e9d4:	5e                   	pop    esi
c001e9d5:	5f                   	pop    edi
c001e9d6:	c3                   	ret    
c001e9d7:	90                   	nop

c001e9d8 <IDE::open(int, int, void*)>:
c001e9d8:	57                   	push   edi
c001e9d9:	56                   	push   esi
c001e9da:	53                   	push   ebx
c001e9db:	83 ec 10             	sub    esp,0x10
c001e9de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e9e2:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e9eb:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e9f4:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e9fb:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ea02:	0f 85 84 02 00 00    	jne    c001ec8c <IDE::open(int, int, void*)+0x2b4>
c001ea08:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ea0e:	a8 70                	test   al,0x70
c001ea10:	75 44                	jne    c001ea56 <IDE::open(int, int, void*)+0x7e>
c001ea12:	ba 20 84 00 00       	mov    edx,0x8420
c001ea17:	0f a3 c2             	bt     edx,eax
c001ea1a:	73 3a                	jae    c001ea56 <IDE::open(int, int, void*)+0x7e>
c001ea1c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	83 e0 fc             	and    eax,0xfffffffc
c001ea28:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ea2f:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ea35:	83 e0 fc             	and    eax,0xfffffffc
c001ea38:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea3f:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ea45:	83 e0 fc             	and    eax,0xfffffffc
c001ea48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea4f:	68 ed 32 02 c0       	push   0xc00232ed
c001ea54:	eb 60                	jmp    c001eab6 <IDE::open(int, int, void*)+0xde>
c001ea56:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ea60:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ea6a:	be 64 00 00 00       	mov    esi,0x64
c001ea6f:	57                   	push   edi
c001ea70:	57                   	push   edi
c001ea71:	68 ac 5c 02 c0       	push   0xc0025cac
c001ea76:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ea7a:	57                   	push   edi
c001ea7b:	e8 c0 1b fe ff       	call   c0000640 <strcpy>
c001ea80:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ea87:	31 d2                	xor    edx,edx
c001ea89:	89 c8                	mov    eax,ecx
c001ea8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ea8e:	f7 f6                	div    esi
c001ea90:	be 0a 00 00 00       	mov    esi,0xa
c001ea95:	83 c0 30             	add    eax,0x30
c001ea98:	31 d2                	xor    edx,edx
c001ea9a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ea9e:	89 c8                	mov    eax,ecx
c001eaa0:	f7 f6                	div    esi
c001eaa2:	89 d1                	mov    ecx,edx
c001eaa4:	31 d2                	xor    edx,edx
c001eaa6:	83 c1 30             	add    ecx,0x30
c001eaa9:	f7 f6                	div    esi
c001eaab:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001eaaf:	83 c2 30             	add    edx,0x30
c001eab2:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001eab6:	e8 4a e8 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eabb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001eac0:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eac7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eace:	c1 e1 10             	shl    ecx,0x10
c001ead1:	c1 e0 0b             	shl    eax,0xb
c001ead4:	83 c4 10             	add    esp,0x10
c001ead7:	09 c1                	or     ecx,eax
c001ead9:	89 fa                	mov    edx,edi
c001eadb:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eae2:	c1 e0 08             	shl    eax,0x8
c001eae5:	09 c1                	or     ecx,eax
c001eae7:	89 c8                	mov    eax,ecx
c001eae9:	0d 08 00 00 80       	or     eax,0x80000008
c001eaee:	ef                   	out    dx,eax
c001eaef:	be fc 0c 00 00       	mov    esi,0xcfc
c001eaf4:	89 f2                	mov    edx,esi
c001eaf6:	ed                   	in     eax,dx
c001eaf7:	c1 e8 10             	shr    eax,0x10
c001eafa:	3d ff ff 00 00       	cmp    eax,0xffff
c001eaff:	0f 84 e5 00 00 00    	je     c001ebea <IDE::open(int, int, void*)+0x212>
c001eb05:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eb0b:	89 fa                	mov    edx,edi
c001eb0d:	89 c8                	mov    eax,ecx
c001eb0f:	ef                   	out    dx,eax
c001eb10:	b0 fe                	mov    al,0xfe
c001eb12:	89 f2                	mov    edx,esi
c001eb14:	ee                   	out    dx,al
c001eb15:	89 c8                	mov    eax,ecx
c001eb17:	89 fa                	mov    edx,edi
c001eb19:	ef                   	out    dx,eax
c001eb1a:	89 f2                	mov    edx,esi
c001eb1c:	ed                   	in     eax,dx
c001eb1d:	3c fe                	cmp    al,0xfe
c001eb1f:	0f 85 85 00 00 00    	jne    c001ebaa <IDE::open(int, int, void*)+0x1d2>
c001eb25:	83 ec 0c             	sub    esp,0xc
c001eb28:	68 23 33 02 c0       	push   0xc0023323
c001eb2d:	e8 d3 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eb32:	c7 04 24 b2 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cb2
c001eb39:	e8 3e 84 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001eb3e:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001eb48:	c7 04 24 08 36 02 c0 	mov    DWORD PTR [esp],0xc0023608
c001eb4f:	e8 b1 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eb54:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001eb5b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eb62:	c1 e1 10             	shl    ecx,0x10
c001eb65:	c1 e0 08             	shl    eax,0x8
c001eb68:	89 fa                	mov    edx,edi
c001eb6a:	09 c1                	or     ecx,eax
c001eb6c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eb73:	c1 e0 0b             	shl    eax,0xb
c001eb76:	09 c1                	or     ecx,eax
c001eb78:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001eb7e:	89 c8                	mov    eax,ecx
c001eb80:	ef                   	out    dx,eax
c001eb81:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eb87:	89 f2                	mov    edx,esi
c001eb89:	ee                   	out    dx,al
c001eb8a:	89 c8                	mov    eax,ecx
c001eb8c:	89 fa                	mov    edx,edi
c001eb8e:	ef                   	out    dx,eax
c001eb8f:	89 f2                	mov    edx,esi
c001eb91:	ed                   	in     eax,dx
c001eb92:	0f b6 c0             	movzx  eax,al
c001eb95:	83 c4 10             	add    esp,0x10
c001eb98:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001eb9e:	74 5a                	je     c001ebfa <IDE::open(int, int, void*)+0x222>
c001eba0:	83 ec 0c             	sub    esp,0xc
c001eba3:	68 c7 5c 02 c0       	push   0xc0025cc7
c001eba8:	eb 48                	jmp    c001ebf2 <IDE::open(int, int, void*)+0x21a>
c001ebaa:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ebb3:	75 2b                	jne    c001ebe0 <IDE::open(int, int, void*)+0x208>
c001ebb5:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ebbc:	3d 80 00 00 00       	cmp    eax,0x80
c001ebc1:	74 07                	je     c001ebca <IDE::open(int, int, void*)+0x1f2>
c001ebc3:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ebc8:	75 16                	jne    c001ebe0 <IDE::open(int, int, void*)+0x208>
c001ebca:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ebd1:	83 ec 0c             	sub    esp,0xc
c001ebd4:	68 de 2d 02 c0       	push   0xc0022dde
c001ebd9:	e8 27 e7 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ebde:	eb 17                	jmp    c001ebf7 <IDE::open(int, int, void*)+0x21f>
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	68 cf 5c 02 c0       	push   0xc0025ccf
c001ebe8:	eb 08                	jmp    c001ebf2 <IDE::open(int, int, void*)+0x21a>
c001ebea:	83 ec 0c             	sub    esp,0xc
c001ebed:	68 00 5d 02 c0       	push   0xc0025d00
c001ebf2:	e8 fd 10 ff ff       	call   c000fcf4 <KePanic(char const*)>
c001ebf7:	83 c4 10             	add    esp,0x10
c001ebfa:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ec01:	0f 84 bf 00 00 00    	je     c001ecc6 <IDE::open(int, int, void*)+0x2ee>
c001ec07:	83 ec 0c             	sub    esp,0xc
c001ec0a:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ec10:	83 e0 fc             	and    eax,0xfffffffc
c001ec13:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ec1a:	83 c0 08             	add    eax,0x8
c001ec1d:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ec24:	68 2a 5d 02 c0       	push   0xc0025d2a
c001ec29:	e8 4e 83 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ec2e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec35:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ec3c:	50                   	push   eax
c001ec3d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ec44:	50                   	push   eax
c001ec45:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ec4c:	50                   	push   eax
c001ec4d:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ec53:	e8 92 f0 ff ff       	call   c001dcea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec58:	83 c4 18             	add    esp,0x18
c001ec5b:	83 c8 07             	or     eax,0x7
c001ec5e:	0f b7 c0             	movzx  eax,ax
c001ec61:	50                   	push   eax
c001ec62:	6a 04                	push   0x4
c001ec64:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ec6b:	50                   	push   eax
c001ec6c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ec73:	50                   	push   eax
c001ec74:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ec7b:	50                   	push   eax
c001ec7c:	ff 35 e0 f4 02 c0    	push   DWORD PTR ds:0xc002f4e0
c001ec82:	e8 9f f2 ff ff       	call   c001df26 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ec87:	83 c4 20             	add    esp,0x20
c001ec8a:	eb 3a                	jmp    c001ecc6 <IDE::open(int, int, void*)+0x2ee>
c001ec8c:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ec92:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ec99:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eca0:	05 06 02 00 00       	add    eax,0x206
c001eca5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ecac:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ecb3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ecba:	05 06 02 00 00       	add    eax,0x206
c001ecbf:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ecc6:	83 ec 0c             	sub    esp,0xc
c001ecc9:	68 c0 3b 02 c0       	push   0xc0023bc0
c001ecce:	e8 32 e6 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ecd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	89 c2                	mov    edx,eax
c001ecde:	83 e2 0f             	and    edx,0xf
c001ece1:	83 fa 08             	cmp    edx,0x8
c001ece4:	75 0a                	jne    c001ecf0 <IDE::open(int, int, void*)+0x318>
c001ece6:	83 e8 02             	sub    eax,0x2
c001ece9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ecf0:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ecf6:	89 c2                	mov    edx,eax
c001ecf8:	83 e2 0f             	and    edx,0xf
c001ecfb:	83 fa 08             	cmp    edx,0x8
c001ecfe:	75 0a                	jne    c001ed0a <IDE::open(int, int, void*)+0x332>
c001ed00:	83 e8 02             	sub    eax,0x2
c001ed03:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ed0a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ed11:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ed18:	89 d0                	mov    eax,edx
c001ed1a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed1d:	8d 7a 01             	lea    edi,[edx+0x1]
c001ed20:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed24:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ed28:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ed2c:	83 e1 3f             	and    ecx,0x3f
c001ed2f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ed33:	89 f9                	mov    ecx,edi
c001ed35:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ed3c:	0f b6 c9             	movzx  ecx,cl
c001ed3f:	8d 78 02             	lea    edi,[eax+0x2]
c001ed42:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ed45:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ed49:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ed4d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ed51:	83 e2 3f             	and    edx,0x3f
c001ed54:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ed58:	89 f9                	mov    ecx,edi
c001ed5a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ed60:	0f b6 d1             	movzx  edx,cl
c001ed63:	8d 78 03             	lea    edi,[eax+0x3]
c001ed66:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ed69:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ed6d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ed71:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ed75:	83 e1 3f             	and    ecx,0x3f
c001ed78:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ed7c:	89 fa                	mov    edx,edi
c001ed7e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ed84:	0f b6 ca             	movzx  ecx,dl
c001ed87:	8d 78 04             	lea    edi,[eax+0x4]
c001ed8a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ed8d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ed91:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ed95:	89 fa                	mov    edx,edi
c001ed97:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ed9d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001eda1:	83 e2 3f             	and    edx,0x3f
c001eda4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001eda8:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001edaf:	66 85 f6             	test   si,si
c001edb2:	74 24                	je     c001edd8 <IDE::open(int, int, void*)+0x400>
c001edb4:	89 f9                	mov    ecx,edi
c001edb6:	83 c0 05             	add    eax,0x5
c001edb9:	0f b6 d1             	movzx  edx,cl
c001edbc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001edbf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001edc3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001edc7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001edcd:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001edd1:	83 e0 3f             	and    eax,0x3f
c001edd4:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001edd8:	83 ec 0c             	sub    esp,0xc
c001eddb:	68 42 5d 02 c0       	push   0xc0025d42
c001ede0:	e8 20 e5 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ede5:	58                   	pop    eax
c001ede6:	5a                   	pop    edx
c001ede7:	6a 00                	push   0x0
c001ede9:	53                   	push   ebx
c001edea:	e8 6f f9 ff ff       	call   c001e75e <IDE::prepareInterrupt(unsigned char)>
c001edef:	59                   	pop    ecx
c001edf0:	5e                   	pop    esi
c001edf1:	6a 01                	push   0x1
c001edf3:	53                   	push   ebx
c001edf4:	e8 65 f9 ff ff       	call   c001e75e <IDE::prepareInterrupt(unsigned char)>
c001edf9:	c7 04 24 c4 55 02 c0 	mov    DWORD PTR [esp],0xc00255c4
c001ee00:	e8 00 e5 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ee05:	83 c4 0c             	add    esp,0xc
c001ee08:	6a 00                	push   0x0
c001ee0a:	6a 00                	push   0x0
c001ee0c:	53                   	push   ebx
c001ee0d:	e8 7c fb ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c001ee12:	83 c4 0c             	add    esp,0xc
c001ee15:	6a 00                	push   0x0
c001ee17:	6a 01                	push   0x1
c001ee19:	53                   	push   ebx
c001ee1a:	e8 6f fb ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c001ee1f:	c7 04 24 44 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d44
c001ee26:	e8 da e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ee35:	74 3c                	je     c001ee73 <IDE::open(int, int, void*)+0x49b>
c001ee37:	83 ec 0c             	sub    esp,0xc
c001ee3a:	53                   	push   ebx
c001ee3b:	6a 01                	push   0x1
c001ee3d:	68 55 e9 01 c0       	push   0xc001e955
c001ee42:	6a 0e                	push   0xe
c001ee44:	53                   	push   ebx
c001ee45:	e8 b6 ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee4a:	83 c4 14             	add    esp,0x14
c001ee4d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ee53:	53                   	push   ebx
c001ee54:	6a 01                	push   0x1
c001ee56:	68 71 e9 01 c0       	push   0xc001e971
c001ee5b:	6a 0f                	push   0xf
c001ee5d:	53                   	push   ebx
c001ee5e:	e8 9d ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee63:	83 c4 14             	add    esp,0x14
c001ee66:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ee6c:	68 0e 38 02 c0       	push   0xc002380e
c001ee71:	eb 40                	jmp    c001eeb3 <IDE::open(int, int, void*)+0x4db>
c001ee73:	83 ec 0c             	sub    esp,0xc
c001ee76:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ee80:	53                   	push   ebx
c001ee81:	6a 00                	push   0x0
c001ee83:	68 55 e9 01 c0       	push   0xc001e955
c001ee88:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ee8e:	53                   	push   ebx
c001ee8f:	e8 6c ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ee94:	83 c4 14             	add    esp,0x14
c001ee97:	53                   	push   ebx
c001ee98:	6a 00                	push   0x0
c001ee9a:	68 71 e9 01 c0       	push   0xc001e971
c001ee9f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eea5:	53                   	push   ebx
c001eea6:	e8 55 ab fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eeab:	83 c4 14             	add    esp,0x14
c001eeae:	68 62 45 02 c0       	push   0xc0024562
c001eeb3:	e8 4d e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eeb8:	83 c4 10             	add    esp,0x10
c001eebb:	83 ec 0c             	sub    esp,0xc
c001eebe:	68 46 5d 02 c0       	push   0xc0025d46
c001eec3:	e8 3d e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eeca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eecd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eed0:	c7 04 24 d5 49 02 c0 	mov    DWORD PTR [esp],0xc00249d5
c001eed7:	e8 29 e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001eedc:	83 c4 0c             	add    esp,0xc
c001eedf:	6a 07                	push   0x7
c001eee1:	6a 00                	push   0x0
c001eee3:	53                   	push   ebx
c001eee4:	e8 5b f9 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001eee9:	83 c4 0c             	add    esp,0xc
c001eeec:	6a 07                	push   0x7
c001eeee:	6a 01                	push   0x1
c001eef0:	53                   	push   ebx
c001eef1:	e8 4e f9 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001eef6:	c7 04 24 6c 42 02 c0 	mov    DWORD PTR [esp],0xc002426c
c001eefd:	e8 03 e4 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ef02:	83 c4 0c             	add    esp,0xc
c001ef05:	6a 01                	push   0x1
c001ef07:	6a 00                	push   0x0
c001ef09:	53                   	push   ebx
c001ef0a:	e8 7f fa ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c001ef0f:	83 c4 0c             	add    esp,0xc
c001ef12:	6a 01                	push   0x1
c001ef14:	6a 01                	push   0x1
c001ef16:	53                   	push   ebx
c001ef17:	e8 72 fa ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c001ef1c:	c7 04 24 49 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d49
c001ef23:	e8 dd e3 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001ef28:	83 c4 20             	add    esp,0x20
c001ef2b:	31 c0                	xor    eax,eax
c001ef2d:	5b                   	pop    ebx
c001ef2e:	5e                   	pop    esi
c001ef2f:	5f                   	pop    edi
c001ef30:	c3                   	ret    
c001ef31:	90                   	nop

c001ef32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ef32:	55                   	push   ebp
c001ef33:	57                   	push   edi
c001ef34:	56                   	push   esi
c001ef35:	53                   	push   ebx
c001ef36:	83 ec 1c             	sub    esp,0x1c
c001ef39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ef3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ef41:	8d 42 f8             	lea    eax,[edx-0x8]
c001ef44:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef48:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ef4c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ef50:	3c 03                	cmp    al,0x3
c001ef52:	77 5a                	ja     c001efae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001ef54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ef58:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ef5c:	0f b6 db             	movzx  ebx,bl
c001ef5f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ef62:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ef67:	0c 80                	or     al,0x80
c001ef69:	50                   	push   eax
c001ef6a:	6a 0c                	push   0xc
c001ef6c:	53                   	push   ebx
c001ef6d:	56                   	push   esi
c001ef6e:	e8 11 f8 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef73:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ef78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ef80:	0f b6 d2             	movzx  edx,dl
c001ef83:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ef87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ef89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ef8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ef92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ef96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ef9a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001efa2:	83 c4 2c             	add    esp,0x2c
c001efa5:	5b                   	pop    ebx
c001efa6:	5e                   	pop    esi
c001efa7:	5f                   	pop    edi
c001efa8:	5d                   	pop    ebp
c001efa9:	e9 d6 f7 ff ff       	jmp    c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efae:	0f b6 c2             	movzx  eax,dl
c001efb1:	83 f8 07             	cmp    eax,0x7
c001efb4:	77 12                	ja     c001efc8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001efb6:	0f b6 c2             	movzx  eax,dl
c001efb9:	0f b6 db             	movzx  ebx,bl
c001efbc:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001efc4:	01 c2                	add    edx,eax
c001efc6:	eb 2f                	jmp    c001eff7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001efc8:	83 f8 0d             	cmp    eax,0xd
c001efcb:	77 13                	ja     c001efe0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001efcd:	0f b6 db             	movzx  ebx,bl
c001efd0:	0f b6 d2             	movzx  edx,dl
c001efd3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001efda:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001efde:	eb 17                	jmp    c001eff7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001efe0:	83 f8 15             	cmp    eax,0x15
c001efe3:	77 14                	ja     c001eff9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001efe5:	0f b6 db             	movzx  ebx,bl
c001efe8:	0f b6 d2             	movzx  edx,dl
c001efeb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001eff3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eff7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eff9:	83 c4 1c             	add    esp,0x1c
c001effc:	5b                   	pop    ebx
c001effd:	5e                   	pop    esi
c001effe:	5f                   	pop    edi
c001efff:	5d                   	pop    ebp
c001f000:	c3                   	ret    
c001f001:	90                   	nop

c001f002 <IDE::detect()>:
c001f002:	55                   	push   ebp
c001f003:	57                   	push   edi
c001f004:	56                   	push   esi
c001f005:	53                   	push   ebx
c001f006:	81 ec 28 02 00 00    	sub    esp,0x228
c001f00c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f013:	68 4b 5d 02 c0       	push   0xc0025d4b
c001f018:	e8 e8 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f01d:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f023:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f02f:	0f 85 2f 04 00 00    	jne    c001f464 <IDE::detect()+0x462>
c001f035:	83 ec 0c             	sub    esp,0xc
c001f038:	31 f6                	xor    esi,esi
c001f03a:	68 4e 5d 02 c0       	push   0xc0025d4e
c001f03f:	31 ff                	xor    edi,edi
c001f041:	e8 bf e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f046:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 ec 0c             	sub    esp,0xc
c001f053:	68 51 5d 02 c0       	push   0xc0025d51
c001f058:	e8 a8 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f05d:	83 c4 10             	add    esp,0x10
c001f060:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f067:	83 ec 0c             	sub    esp,0xc
c001f06a:	31 ed                	xor    ebp,ebp
c001f06c:	68 54 5d 02 c0       	push   0xc0025d54
c001f071:	e8 8f e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f076:	89 f8                	mov    eax,edi
c001f078:	c1 e0 06             	shl    eax,0x6
c001f07b:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f083:	c7 04 24 57 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d57
c001f08a:	e8 76 e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f08f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f093:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09b:	c1 e0 04             	shl    eax,0x4
c001f09e:	83 c8 a0             	or     eax,0xffffffa0
c001f0a1:	0f b6 c0             	movzx  eax,al
c001f0a4:	50                   	push   eax
c001f0a5:	6a 06                	push   0x6
c001f0a7:	56                   	push   esi
c001f0a8:	53                   	push   ebx
c001f0a9:	e8 d6 f6 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0ae:	83 c4 1c             	add    esp,0x1c
c001f0b1:	6a 0c                	push   0xc
c001f0b3:	56                   	push   esi
c001f0b4:	53                   	push   ebx
c001f0b5:	e8 8a f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f0ba:	83 c4 0c             	add    esp,0xc
c001f0bd:	6a 0c                	push   0xc
c001f0bf:	56                   	push   esi
c001f0c0:	53                   	push   ebx
c001f0c1:	e8 7e f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f0c6:	83 c4 0c             	add    esp,0xc
c001f0c9:	6a 0c                	push   0xc
c001f0cb:	56                   	push   esi
c001f0cc:	53                   	push   ebx
c001f0cd:	e8 72 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f0d2:	83 c4 0c             	add    esp,0xc
c001f0d5:	6a 0c                	push   0xc
c001f0d7:	56                   	push   esi
c001f0d8:	53                   	push   ebx
c001f0d9:	e8 66 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f0de:	c7 04 24 5a 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d5a
c001f0e5:	e8 1b e2 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f0ea:	68 ec 00 00 00       	push   0xec
c001f0ef:	6a 07                	push   0x7
c001f0f1:	56                   	push   esi
c001f0f2:	53                   	push   ebx
c001f0f3:	e8 8c f6 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0f8:	83 c4 1c             	add    esp,0x1c
c001f0fb:	6a 0c                	push   0xc
c001f0fd:	56                   	push   esi
c001f0fe:	53                   	push   ebx
c001f0ff:	e8 40 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f104:	83 c4 0c             	add    esp,0xc
c001f107:	6a 0c                	push   0xc
c001f109:	56                   	push   esi
c001f10a:	53                   	push   ebx
c001f10b:	e8 34 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f110:	83 c4 0c             	add    esp,0xc
c001f113:	6a 0c                	push   0xc
c001f115:	56                   	push   esi
c001f116:	53                   	push   ebx
c001f117:	e8 28 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f11c:	83 c4 0c             	add    esp,0xc
c001f11f:	6a 0c                	push   0xc
c001f121:	56                   	push   esi
c001f122:	53                   	push   ebx
c001f123:	e8 1c f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f128:	c7 04 24 5d 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d5d
c001f12f:	e8 d1 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f134:	83 c4 0c             	add    esp,0xc
c001f137:	6a 0c                	push   0xc
c001f139:	56                   	push   esi
c001f13a:	53                   	push   ebx
c001f13b:	e8 04 f7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f140:	83 c4 10             	add    esp,0x10
c001f143:	84 c0                	test   al,al
c001f145:	75 1f                	jne    c001f166 <IDE::detect()+0x164>
c001f147:	83 ec 0c             	sub    esp,0xc
c001f14a:	68 60 5d 02 c0       	push   0xc0025d60
c001f14f:	e8 b1 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f154:	e9 e9 02 00 00       	jmp    c001f442 <IDE::detect()+0x440>
c001f159:	a8 80                	test   al,0x80
c001f15b:	74 21                	je     c001f17e <IDE::detect()+0x17c>
c001f15d:	45                   	inc    ebp
c001f15e:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f164:	7f 1e                	jg     c001f184 <IDE::detect()+0x182>
c001f166:	50                   	push   eax
c001f167:	6a 0c                	push   0xc
c001f169:	56                   	push   esi
c001f16a:	53                   	push   ebx
c001f16b:	e8 d4 f6 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f170:	83 c4 10             	add    esp,0x10
c001f173:	a8 01                	test   al,0x1
c001f175:	74 e2                	je     c001f159 <IDE::detect()+0x157>
c001f177:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f17c:	eb 23                	jmp    c001f1a1 <IDE::detect()+0x19f>
c001f17e:	a8 08                	test   al,0x8
c001f180:	74 db                	je     c001f15d <IDE::detect()+0x15b>
c001f182:	eb 18                	jmp    c001f19c <IDE::detect()+0x19a>
c001f184:	50                   	push   eax
c001f185:	50                   	push   eax
c001f186:	6a 00                	push   0x0
c001f188:	6a 32                	push   0x32
c001f18a:	e8 85 7e ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f198:	75 cc                	jne    c001f166 <IDE::detect()+0x164>
c001f19a:	eb db                	jmp    c001f177 <IDE::detect()+0x175>
c001f19c:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f1a1:	83 ec 0c             	sub    esp,0xc
c001f1a4:	68 63 5d 02 c0       	push   0xc0025d63
c001f1a9:	e8 57 e1 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f1ae:	83 c4 10             	add    esp,0x10
c001f1b1:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f1b6:	74 5f                	je     c001f217 <IDE::detect()+0x215>
c001f1b8:	51                   	push   ecx
c001f1b9:	6a 04                	push   0x4
c001f1bb:	56                   	push   esi
c001f1bc:	53                   	push   ebx
c001f1bd:	e8 82 f6 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f1c2:	83 c4 0c             	add    esp,0xc
c001f1c5:	89 c5                	mov    ebp,eax
c001f1c7:	6a 05                	push   0x5
c001f1c9:	56                   	push   esi
c001f1ca:	53                   	push   ebx
c001f1cb:	e8 74 f6 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f1d0:	83 c4 10             	add    esp,0x10
c001f1d3:	89 e9                	mov    ecx,ebp
c001f1d5:	0f b6 c0             	movzx  eax,al
c001f1d8:	0f b6 e9             	movzx  ebp,cl
c001f1db:	83 fd 14             	cmp    ebp,0x14
c001f1de:	75 07                	jne    c001f1e7 <IDE::detect()+0x1e5>
c001f1e0:	3d eb 00 00 00       	cmp    eax,0xeb
c001f1e5:	eb 0e                	jmp    c001f1f5 <IDE::detect()+0x1f3>
c001f1e7:	3d 96 00 00 00       	cmp    eax,0x96
c001f1ec:	0f 85 53 02 00 00    	jne    c001f445 <IDE::detect()+0x443>
c001f1f2:	83 fd 69             	cmp    ebp,0x69
c001f1f5:	0f 85 4a 02 00 00    	jne    c001f445 <IDE::detect()+0x443>
c001f1fb:	68 a1 00 00 00       	push   0xa1
c001f200:	6a 07                	push   0x7
c001f202:	56                   	push   esi
c001f203:	53                   	push   ebx
c001f204:	e8 7b f5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f209:	58                   	pop    eax
c001f20a:	5a                   	pop    edx
c001f20b:	6a 00                	push   0x0
c001f20d:	6a 0a                	push   0xa
c001f20f:	e8 00 7e ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c001f214:	83 c4 10             	add    esp,0x10
c001f217:	83 ec 0c             	sub    esp,0xc
c001f21a:	89 fd                	mov    ebp,edi
c001f21c:	68 66 5d 02 c0       	push   0xc0025d66
c001f221:	c1 e5 06             	shl    ebp,0x6
c001f224:	e8 dc e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f229:	01 dd                	add    ebp,ebx
c001f22b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f22f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f236:	52                   	push   edx
c001f237:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f23b:	6a 00                	push   0x0
c001f23d:	56                   	push   esi
c001f23e:	53                   	push   ebx
c001f23f:	e8 ee fc ff ff       	call   c001ef32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f244:	83 c4 14             	add    esp,0x14
c001f247:	68 6a 5d 02 c0       	push   0xc0025d6a
c001f24c:	e8 b4 e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f251:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f256:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f25d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f264:	89 f0                	mov    eax,esi
c001f266:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f26c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f270:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f27a:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f281:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f289:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f290:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f298:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f29e:	c7 04 24 6e 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d6e
c001f2a5:	e8 5b e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f2aa:	83 c4 10             	add    esp,0x10
c001f2ad:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f2b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f2b8:	74 09                	je     c001f2c3 <IDE::detect()+0x2c1>
c001f2ba:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f2c1:	eb 07                	jmp    c001f2ca <IDE::detect()+0x2c8>
c001f2c3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f2ca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f2ce:	89 f8                	mov    eax,edi
c001f2d0:	83 ec 0c             	sub    esp,0xc
c001f2d3:	c1 e0 06             	shl    eax,0x6
c001f2d6:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f2d9:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f2df:	68 72 5d 02 c0       	push   0xc0025d72
c001f2e4:	e8 1c e0 fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f2e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f2ed:	89 e8                	mov    eax,ebp
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f2f5:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f2f8:	83 c0 02             	add    eax,0x2
c001f2fb:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f301:	83 c2 02             	add    edx,0x2
c001f304:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f307:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f30d:	39 d5                	cmp    ebp,edx
c001f30f:	75 e4                	jne    c001f2f5 <IDE::detect()+0x2f3>
c001f311:	89 f8                	mov    eax,edi
c001f313:	c1 e0 06             	shl    eax,0x6
c001f316:	01 d8                	add    eax,ebx
c001f318:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f31f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f326:	c1 ea 09             	shr    edx,0x9
c001f329:	83 e2 01             	and    edx,0x1
c001f32c:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f333:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f339:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f33d:	74 0c                	je     c001f34b <IDE::detect()+0x349>
c001f33f:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f348:	0f 95 c2             	setne  dl
c001f34b:	83 ec 0c             	sub    esp,0xc
c001f34e:	89 fd                	mov    ebp,edi
c001f350:	c1 e5 06             	shl    ebp,0x6
c001f353:	01 dd                	add    ebp,ebx
c001f355:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f35b:	68 76 5d 02 c0       	push   0xc0025d76
c001f360:	e8 a0 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f36d:	75 66                	jne    c001f3d5 <IDE::detect()+0x3d3>
c001f36f:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f376:	0f 84 b8 00 00 00    	je     c001f434 <IDE::detect()+0x432>
c001f37c:	83 ec 0c             	sub    esp,0xc
c001f37f:	68 7a 5d 02 c0       	push   0xc0025d7a
c001f384:	e8 7c df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f389:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f390:	e8 02 05 ff ff       	call   c000f897 <malloc>
c001f395:	89 04 24             	mov    DWORD PTR [esp],eax
c001f398:	89 c5                	mov    ebp,eax
c001f39a:	e8 43 05 00 00       	call   c001f8e2 <ATA::ATA()>
c001f39f:	c7 04 24 7e 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d7e
c001f3a6:	e8 5a df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3ab:	59                   	pop    ecx
c001f3ac:	58                   	pop    eax
c001f3ad:	55                   	push   ebp
c001f3ae:	53                   	push   ebx
c001f3af:	e8 a0 a6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f3b4:	c7 04 24 83 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d83
c001f3bb:	e8 45 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3c0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f3c3:	53                   	push   ebx
c001f3c4:	57                   	push   edi
c001f3c5:	6a 00                	push   0x0
c001f3c7:	55                   	push   ebp
c001f3c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3cb:	83 c4 14             	add    esp,0x14
c001f3ce:	68 88 5d 02 c0       	push   0xc0025d88
c001f3d3:	eb 57                	jmp    c001f42c <IDE::detect()+0x42a>
c001f3d5:	83 ec 0c             	sub    esp,0xc
c001f3d8:	68 8d 5d 02 c0       	push   0xc0025d8d
c001f3dd:	e8 23 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f3e2:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f3e9:	e8 a9 04 ff ff       	call   c000f897 <malloc>
c001f3ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3f1:	89 c5                	mov    ebp,eax
c001f3f3:	e8 98 0c 00 00       	call   c0020090 <ATAPI::ATAPI()>
c001f3f8:	c7 04 24 93 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d93
c001f3ff:	e8 01 df fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f404:	58                   	pop    eax
c001f405:	5a                   	pop    edx
c001f406:	55                   	push   ebp
c001f407:	53                   	push   ebx
c001f408:	e8 47 a6 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f40d:	c7 04 24 9a 5d 02 c0 	mov    DWORD PTR [esp],0xc0025d9a
c001f414:	e8 ec de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f419:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f41c:	53                   	push   ebx
c001f41d:	57                   	push   edi
c001f41e:	6a 00                	push   0x0
c001f420:	55                   	push   ebp
c001f421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f424:	83 c4 14             	add    esp,0x14
c001f427:	68 a1 5d 02 c0       	push   0xc0025da1
c001f42c:	e8 d4 de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	83 ec 0c             	sub    esp,0xc
c001f437:	47                   	inc    edi
c001f438:	68 a8 5d 02 c0       	push   0xc0025da8
c001f43d:	e8 c3 de fe ff       	call   c000d305 <KeSetBootMessage(char const*)>
c001f442:	83 c4 10             	add    esp,0x10
c001f445:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f449:	74 0c                	je     c001f457 <IDE::detect()+0x455>
c001f44b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f452:	e9 10 fc ff ff       	jmp    c001f067 <IDE::detect()+0x65>
c001f457:	4e                   	dec    esi
c001f458:	74 0a                	je     c001f464 <IDE::detect()+0x462>
c001f45a:	be 01 00 00 00       	mov    esi,0x1
c001f45f:	e9 ec fb ff ff       	jmp    c001f050 <IDE::detect()+0x4e>
c001f464:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f46a:	5b                   	pop    ebx
c001f46b:	5e                   	pop    esi
c001f46c:	5f                   	pop    edi
c001f46d:	5d                   	pop    ebp
c001f46e:	c3                   	ret    
c001f46f:	90                   	nop

c001f470 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f470:	55                   	push   ebp
c001f471:	57                   	push   edi
c001f472:	56                   	push   esi
c001f473:	53                   	push   ebx
c001f474:	83 ec 1c             	sub    esp,0x1c
c001f477:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f47b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f47f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f483:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f487:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f48b:	88 c3                	mov    bl,al
c001f48d:	25 ff 00 00 00       	and    eax,0xff
c001f492:	0f 84 88 00 00 00    	je     c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f498:	83 ec 0c             	sub    esp,0xc
c001f49b:	89 c7                	mov    edi,eax
c001f49d:	68 ac 5d 02 c0       	push   0xc0025dac
c001f4a2:	e8 d5 7a fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001f4a7:	83 c4 10             	add    esp,0x10
c001f4aa:	83 ff 01             	cmp    edi,0x1
c001f4ad:	74 6b                	je     c001f51a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f4af:	83 ff 02             	cmp    edi,0x2
c001f4b2:	75 58                	jne    c001f50c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f4b4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f4b9:	01 ff                	add    edi,edi
c001f4bb:	50                   	push   eax
c001f4bc:	09 fe                	or     esi,edi
c001f4be:	6a 01                	push   0x1
c001f4c0:	89 f0                	mov    eax,esi
c001f4c2:	0f b6 f0             	movzx  esi,al
c001f4c5:	c1 e6 06             	shl    esi,0x6
c001f4c8:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f4d0:	50                   	push   eax
c001f4d1:	55                   	push   ebp
c001f4d2:	e8 6d f3 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f4d7:	83 c4 10             	add    esp,0x10
c001f4da:	a8 01                	test   al,0x1
c001f4dc:	74 02                	je     c001f4e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f4de:	b3 07                	mov    bl,0x7
c001f4e0:	a8 02                	test   al,0x2
c001f4e2:	74 02                	je     c001f4e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f4e4:	b3 03                	mov    bl,0x3
c001f4e6:	a8 04                	test   al,0x4
c001f4e8:	74 02                	je     c001f4ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f4ea:	b3 14                	mov    bl,0x14
c001f4ec:	a8 08                	test   al,0x8
c001f4ee:	74 02                	je     c001f4f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f4f0:	b3 03                	mov    bl,0x3
c001f4f2:	a8 10                	test   al,0x10
c001f4f4:	74 02                	je     c001f4f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f4f6:	b3 15                	mov    bl,0x15
c001f4f8:	a8 20                	test   al,0x20
c001f4fa:	74 02                	je     c001f4fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f4fc:	b3 03                	mov    bl,0x3
c001f4fe:	a8 40                	test   al,0x40
c001f500:	74 02                	je     c001f504 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f502:	b3 16                	mov    bl,0x16
c001f504:	a8 80                	test   al,0x80
c001f506:	74 18                	je     c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f508:	b3 0d                	mov    bl,0xd
c001f50a:	eb 14                	jmp    c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f50c:	83 ff 03             	cmp    edi,0x3
c001f50f:	74 0d                	je     c001f51e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f511:	83 ff 04             	cmp    edi,0x4
c001f514:	75 0a                	jne    c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f516:	b3 08                	mov    bl,0x8
c001f518:	eb 06                	jmp    c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f51a:	b3 13                	mov    bl,0x13
c001f51c:	eb 02                	jmp    c001f520 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f51e:	b3 17                	mov    bl,0x17
c001f520:	83 c4 1c             	add    esp,0x1c
c001f523:	88 d8                	mov    al,bl
c001f525:	5b                   	pop    ebx
c001f526:	5e                   	pop    esi
c001f527:	5f                   	pop    edi
c001f528:	5d                   	pop    ebp
c001f529:	c3                   	ret    

c001f52a <IDE::polling(unsigned char, unsigned int)>:
c001f52a:	57                   	push   edi
c001f52b:	56                   	push   esi
c001f52c:	53                   	push   ebx
c001f52d:	bb 04 00 00 00       	mov    ebx,0x4
c001f532:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f536:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f53b:	52                   	push   edx
c001f53c:	6a 0c                	push   0xc
c001f53e:	56                   	push   esi
c001f53f:	57                   	push   edi
c001f540:	e8 ff f2 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	4b                   	dec    ebx
c001f549:	75 f0                	jne    c001f53b <IDE::polling(unsigned char, unsigned int)+0x11>
c001f54b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f550:	50                   	push   eax
c001f551:	6a 0c                	push   0xc
c001f553:	56                   	push   esi
c001f554:	57                   	push   edi
c001f555:	e8 ea f2 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f55a:	83 c4 10             	add    esp,0x10
c001f55d:	a8 01                	test   al,0x1
c001f55f:	75 17                	jne    c001f578 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f561:	a8 20                	test   al,0x20
c001f563:	75 0f                	jne    c001f574 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f565:	4b                   	dec    ebx
c001f566:	74 10                	je     c001f578 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f568:	a8 80                	test   al,0x80
c001f56a:	75 e4                	jne    c001f550 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f56c:	a8 08                	test   al,0x8
c001f56e:	74 e0                	je     c001f550 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f570:	31 c0                	xor    eax,eax
c001f572:	eb 06                	jmp    c001f57a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f574:	b0 01                	mov    al,0x1
c001f576:	eb 02                	jmp    c001f57a <IDE::polling(unsigned char, unsigned int)+0x50>
c001f578:	b0 02                	mov    al,0x2
c001f57a:	5b                   	pop    ebx
c001f57b:	5e                   	pop    esi
c001f57c:	5f                   	pop    edi
c001f57d:	c3                   	ret    

c001f57e <SATABus::close(int, int, void*)>:
c001f57e:	31 c0                	xor    eax,eax
c001f580:	c3                   	ret    
c001f581:	90                   	nop

c001f582 <SATABus::detect()>:
c001f582:	c3                   	ret    
c001f583:	90                   	nop

c001f584 <SATABus::SATABus()>:
c001f584:	83 ec 0c             	sub    esp,0xc
c001f587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58b:	83 ec 08             	sub    esp,0x8
c001f58e:	68 e4 5d 02 c0       	push   0xc0025de4
c001f593:	50                   	push   eax
c001f594:	e8 13 a8 fe ff       	call   c0009dac <HardDiskController::HardDiskController(char const*)>
c001f599:	83 c4 10             	add    esp,0x10
c001f59c:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c001f5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a5:	89 10                	mov    DWORD PTR [eax],edx
c001f5a7:	83 ec 0c             	sub    esp,0xc
c001f5aa:	6a 50                	push   0x50
c001f5ac:	e8 15 0a ff ff       	call   c000ffc6 <Phys::allocateContiguousPages(int)>
c001f5b1:	83 c4 10             	add    esp,0x10
c001f5b4:	89 c2                	mov    edx,eax
c001f5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f5c0:	83 ec 0c             	sub    esp,0xc
c001f5c3:	6a 50                	push   0x50
c001f5c5:	e8 6d 3d ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	89 c2                	mov    edx,eax
c001f5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f5d9:	a1 90 c2 02 c0       	mov    eax,ds:0xc002c290
c001f5de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5e2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f5e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f5ec:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f5f2:	83 ec 0c             	sub    esp,0xc
c001f5f5:	6a 03                	push   0x3
c001f5f7:	6a 50                	push   0x50
c001f5f9:	51                   	push   ecx
c001f5fa:	52                   	push   edx
c001f5fb:	50                   	push   eax
c001f5fc:	e8 03 46 ff ff       	call   c0013c04 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f601:	83 c4 20             	add    esp,0x20
c001f604:	90                   	nop
c001f605:	83 c4 0c             	add    esp,0xc
c001f608:	c3                   	ret    
c001f609:	90                   	nop

c001f60a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f60a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f60e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f611:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f614:	09 c2                	or     edx,eax
c001f616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f61a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f620:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f622:	31 c0                	xor    eax,eax
c001f624:	c1 e9 08             	shr    ecx,0x8
c001f627:	83 e1 0f             	and    ecx,0xf
c001f62a:	39 c8                	cmp    eax,ecx
c001f62c:	74 0a                	je     c001f638 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f62e:	f6 c2 01             	test   dl,0x1
c001f631:	74 08                	je     c001f63b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f633:	d1 ea                	shr    edx,1
c001f635:	40                   	inc    eax
c001f636:	eb f2                	jmp    c001f62a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f638:	83 c8 ff             	or     eax,0xffffffff
c001f63b:	c3                   	ret    

c001f63c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f63c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f640:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f643:	89 c2                	mov    edx,eax
c001f645:	c1 ea 08             	shr    edx,0x8
c001f648:	83 e2 0f             	and    edx,0xf
c001f64b:	4a                   	dec    edx
c001f64c:	75 32                	jne    c001f680 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f64e:	83 e0 0f             	and    eax,0xf
c001f651:	83 f8 03             	cmp    eax,0x3
c001f654:	75 2a                	jne    c001f680 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f656:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f659:	b8 02 00 00 00       	mov    eax,0x2
c001f65e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f664:	74 1c                	je     c001f682 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f666:	b8 04 00 00 00       	mov    eax,0x4
c001f66b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f671:	74 0f                	je     c001f682 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f673:	31 c0                	xor    eax,eax
c001f675:	83 fa 03             	cmp    edx,0x3
c001f678:	0f 94 c0             	sete   al
c001f67b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f67f:	c3                   	ret    
c001f680:	31 c0                	xor    eax,eax
c001f682:	c3                   	ret    
c001f683:	90                   	nop

c001f684 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f684:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f688:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f68b:	0f ba e2 0f          	bt     edx,0xf
c001f68f:	72 f7                	jb     c001f688 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f691:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f694:	83 ca 10             	or     edx,0x10
c001f697:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f69a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f69d:	83 ca 01             	or     edx,0x1
c001f6a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6a3:	c3                   	ret    

c001f6a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f6a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6a8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6ab:	83 e2 fe             	and    edx,0xfffffffe
c001f6ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6b1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6b4:	83 e2 ef             	and    edx,0xffffffef
c001f6b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f6ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6bd:	0f ba e2 0e          	bt     edx,0xe
c001f6c1:	72 f7                	jb     c001f6ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f6c3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6c6:	0f ba e2 0f          	bt     edx,0xf
c001f6ca:	72 ee                	jb     c001f6ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f6cc:	c3                   	ret    
c001f6cd:	90                   	nop

c001f6ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f6ce:	55                   	push   ebp
c001f6cf:	57                   	push   edi
c001f6d0:	56                   	push   esi
c001f6d1:	53                   	push   ebx
c001f6d2:	83 ec 1c             	sub    esp,0x1c
c001f6d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f6d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f6dd:	53                   	push   ebx
c001f6de:	56                   	push   esi
c001f6df:	e8 c0 ff ff ff       	call   c001f6a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f6e4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f6e8:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	c1 e5 0a             	shl    ebp,0xa
c001f6f4:	01 e8                	add    eax,ebp
c001f6f6:	89 03                	mov    DWORD PTR [ebx],eax
c001f6f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6fa:	68 00 04 00 00       	push   0x400
c001f6ff:	6a 00                	push   0x0
c001f701:	50                   	push   eax
c001f702:	e8 e9 0d fe ff       	call   c00004f0 <memset>
c001f707:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f70d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f711:	01 e8                	add    eax,ebp
c001f713:	83 c4 1c             	add    esp,0x1c
c001f716:	89 03                	mov    DWORD PTR [ebx],eax
c001f718:	c1 e2 08             	shl    edx,0x8
c001f71b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f722:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f728:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f72e:	01 f8                	add    eax,edi
c001f730:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f733:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f736:	68 00 01 00 00       	push   0x100
c001f73b:	6a 00                	push   0x0
c001f73d:	50                   	push   eax
c001f73e:	e8 ad 0d fe ff       	call   c00004f0 <memset>
c001f743:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f749:	01 fa                	add    edx,edi
c001f74b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f74f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f752:	c1 e7 0d             	shl    edi,0xd
c001f755:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f75c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f762:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f768:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f76c:	31 ff                	xor    edi,edi
c001f76e:	83 c4 10             	add    esp,0x10
c001f771:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f77b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f781:	83 c5 20             	add    ebp,0x20
c001f784:	01 f8                	add    eax,edi
c001f786:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f789:	52                   	push   edx
c001f78a:	68 00 01 00 00       	push   0x100
c001f78f:	6a 00                	push   0x0
c001f791:	50                   	push   eax
c001f792:	e8 59 0d fe ff       	call   c00004f0 <memset>
c001f797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f79b:	83 c4 10             	add    esp,0x10
c001f79e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f7a4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f7ab:	01 f8                	add    eax,edi
c001f7ad:	81 c7 00 01 00 00    	add    edi,0x100
c001f7b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f7b6:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f7bc:	75 b3                	jne    c001f771 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f7be:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f7c5:	50                   	push   eax
c001f7c6:	50                   	push   eax
c001f7c7:	53                   	push   ebx
c001f7c8:	56                   	push   esi
c001f7c9:	e8 b6 fe ff ff       	call   c001f684 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f7ce:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f7d5:	83 c4 2c             	add    esp,0x2c
c001f7d8:	5b                   	pop    ebx
c001f7d9:	5e                   	pop    esi
c001f7da:	5f                   	pop    edi
c001f7db:	5d                   	pop    ebp
c001f7dc:	c3                   	ret    
c001f7dd:	90                   	nop

c001f7de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f7de:	55                   	push   ebp
c001f7df:	57                   	push   edi
c001f7e0:	56                   	push   esi
c001f7e1:	53                   	push   ebx
c001f7e2:	31 db                	xor    ebx,ebx
c001f7e4:	83 ec 0c             	sub    esp,0xc
c001f7e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f7eb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7ef:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f7f2:	f7 c7 01 00 00 00    	test   edi,0x1
c001f7f8:	74 7a                	je     c001f874 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f7fa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f7fe:	89 d8                	mov    eax,ebx
c001f800:	c1 e0 07             	shl    eax,0x7
c001f803:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f80a:	55                   	push   ebp
c001f80b:	56                   	push   esi
c001f80c:	e8 2b fe ff ff       	call   c001f63c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f811:	5a                   	pop    edx
c001f812:	83 f8 01             	cmp    eax,0x1
c001f815:	59                   	pop    ecx
c001f816:	75 21                	jne    c001f839 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f818:	50                   	push   eax
c001f819:	53                   	push   ebx
c001f81a:	55                   	push   ebp
c001f81b:	56                   	push   esi
c001f81c:	e8 ad fe ff ff       	call   c001f6ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f821:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f828:	e8 6a 00 ff ff       	call   c000f897 <malloc>
c001f82d:	89 c5                	mov    ebp,eax
c001f82f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f832:	e8 25 0f 00 00       	call   c002075c <SATA::SATA()>
c001f837:	eb 24                	jmp    c001f85d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f839:	83 f8 04             	cmp    eax,0x4
c001f83c:	75 36                	jne    c001f874 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f83e:	51                   	push   ecx
c001f83f:	53                   	push   ebx
c001f840:	55                   	push   ebp
c001f841:	56                   	push   esi
c001f842:	e8 87 fe ff ff       	call   c001f6ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f847:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f84e:	e8 44 00 ff ff       	call   c000f897 <malloc>
c001f853:	89 c5                	mov    ebp,eax
c001f855:	89 04 24             	mov    DWORD PTR [esp],eax
c001f858:	e8 97 12 00 00       	call   c0020af4 <SATAPI::SATAPI()>
c001f85d:	58                   	pop    eax
c001f85e:	5a                   	pop    edx
c001f85f:	55                   	push   ebp
c001f860:	56                   	push   esi
c001f861:	e8 ee a1 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c001f866:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f869:	56                   	push   esi
c001f86a:	6a 00                	push   0x0
c001f86c:	53                   	push   ebx
c001f86d:	55                   	push   ebp
c001f86e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f871:	83 c4 20             	add    esp,0x20
c001f874:	d1 ef                	shr    edi,1
c001f876:	43                   	inc    ebx
c001f877:	83 fb 20             	cmp    ebx,0x20
c001f87a:	0f 85 72 ff ff ff    	jne    c001f7f2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f880:	83 c4 0c             	add    esp,0xc
c001f883:	5b                   	pop    ebx
c001f884:	5e                   	pop    esi
c001f885:	5f                   	pop    edi
c001f886:	5d                   	pop    ebp
c001f887:	c3                   	ret    

c001f888 <SATABus::open(int, int, void*)>:
c001f888:	53                   	push   ebx
c001f889:	83 ec 08             	sub    esp,0x8
c001f88c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f890:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f896:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f89c:	e8 77 72 ff ff       	call   c0016b18 <KeDisablePreemption()>
c001f8a1:	52                   	push   edx
c001f8a2:	52                   	push   edx
c001f8a3:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f8a9:	53                   	push   ebx
c001f8aa:	e8 2f ff ff ff       	call   c001f7de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f8af:	e8 8c 72 ff ff       	call   c0016b40 <KeRestorePreemption()>
c001f8b4:	31 c0                	xor    eax,eax
c001f8b6:	83 c4 18             	add    esp,0x18
c001f8b9:	5b                   	pop    ebx
c001f8ba:	c3                   	ret    
c001f8bb:	90                   	nop

c001f8bc <ATA::close(int, int, void*)>:
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f8c9:	85 c0                	test   eax,eax
c001f8cb:	74 0c                	je     c001f8d9 <ATA::close(int, int, void*)+0x1d>
c001f8cd:	83 ec 0c             	sub    esp,0xc
c001f8d0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f8d2:	50                   	push   eax
c001f8d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f8d6:	83 c4 10             	add    esp,0x10
c001f8d9:	31 c0                	xor    eax,eax
c001f8db:	83 c4 0c             	add    esp,0xc
c001f8de:	c3                   	ret    
c001f8df:	90                   	nop

c001f8e0 <ATA::powerSaving(PowerSavingLevel)>:
c001f8e0:	c3                   	ret    
c001f8e1:	90                   	nop

c001f8e2 <ATA::ATA()>:
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e9:	83 ec 04             	sub    esp,0x4
c001f8ec:	68 00 02 00 00       	push   0x200
c001f8f1:	68 91 5f 02 c0       	push   0xc0025f91
c001f8f6:	50                   	push   eax
c001f8f7:	e8 3a a5 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f8fc:	83 c4 10             	add    esp,0x10
c001f8ff:	ba f8 5e 02 c0       	mov    edx,0xc0025ef8
c001f904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f908:	89 10                	mov    DWORD PTR [eax],edx
c001f90a:	90                   	nop
c001f90b:	83 c4 0c             	add    esp,0xc
c001f90e:	c3                   	ret    
c001f90f:	90                   	nop

c001f910 <ATA::flush(bool)>:
c001f910:	53                   	push   ebx
c001f911:	83 ec 08             	sub    esp,0x8
c001f914:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f918:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f91d:	83 f8 01             	cmp    eax,0x1
c001f920:	19 c0                	sbb    eax,eax
c001f922:	83 e0 fd             	and    eax,0xfffffffd
c001f925:	05 ea 00 00 00       	add    eax,0xea
c001f92a:	50                   	push   eax
c001f92b:	6a 07                	push   0x7
c001f92d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f934:	50                   	push   eax
c001f935:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f93b:	e8 44 ee ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f940:	83 c4 0c             	add    esp,0xc
c001f943:	6a 00                	push   0x0
c001f945:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f94c:	50                   	push   eax
c001f94d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f953:	e8 d2 fb ff ff       	call   c001f52a <IDE::polling(unsigned char, unsigned int)>
c001f958:	83 c4 18             	add    esp,0x18
c001f95b:	5b                   	pop    ebx
c001f95c:	c3                   	ret    
c001f95d:	90                   	nop

c001f95e <ATA::readyForCommand()>:
c001f95e:	56                   	push   esi
c001f95f:	53                   	push   ebx
c001f960:	31 db                	xor    ebx,ebx
c001f962:	50                   	push   eax
c001f963:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f967:	50                   	push   eax
c001f968:	6a 0c                	push   0xc
c001f96a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f971:	50                   	push   eax
c001f972:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f978:	e8 c7 ee ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c001f97d:	83 c4 10             	add    esp,0x10
c001f980:	a8 88                	test   al,0x88
c001f982:	74 20                	je     c001f9a4 <ATA::readyForCommand()+0x46>
c001f984:	43                   	inc    ebx
c001f985:	83 fb 63             	cmp    ebx,0x63
c001f988:	7e dd                	jle    c001f967 <ATA::readyForCommand()+0x9>
c001f98a:	51                   	push   ecx
c001f98b:	51                   	push   ecx
c001f98c:	6a 00                	push   0x0
c001f98e:	6a 0a                	push   0xa
c001f990:	e8 7f 76 ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f99e:	75 c7                	jne    c001f967 <ATA::readyForCommand()+0x9>
c001f9a0:	31 c0                	xor    eax,eax
c001f9a2:	eb 02                	jmp    c001f9a6 <ATA::readyForCommand()+0x48>
c001f9a4:	b0 01                	mov    al,0x1
c001f9a6:	5a                   	pop    edx
c001f9a7:	5b                   	pop    ebx
c001f9a8:	5e                   	pop    esi
c001f9a9:	c3                   	ret    

c001f9aa <ATA::access(unsigned long long, int, void*, bool)>:
c001f9aa:	55                   	push   ebp
c001f9ab:	57                   	push   edi
c001f9ac:	56                   	push   esi
c001f9ad:	53                   	push   ebx
c001f9ae:	83 ec 2c             	sub    esp,0x2c
c001f9b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f9b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f9b9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f9bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f9c1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f9c5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f9c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f9cd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f9d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9d7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f9dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9e1:	c1 e0 06             	shl    eax,0x6
c001f9e4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f9ec:	74 5d                	je     c001fa4b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f9ee:	89 fa                	mov    edx,edi
c001f9f0:	89 f0                	mov    eax,esi
c001f9f2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f9f6:	c1 ea 1c             	shr    edx,0x1c
c001f9f9:	89 d1                	mov    ecx,edx
c001f9fb:	09 c1                	or     ecx,eax
c001f9fd:	74 25                	je     c001fa24 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f9ff:	31 ed                	xor    ebp,ebp
c001fa01:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fa08:	89 fa                	mov    edx,edi
c001fa0a:	89 f0                	mov    eax,esi
c001fa0c:	0f ad d0             	shrd   eax,edx,cl
c001fa0f:	d3 ea                	shr    edx,cl
c001fa11:	f6 c1 20             	test   cl,0x20
c001fa14:	74 02                	je     c001fa18 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fa16:	89 d0                	mov    eax,edx
c001fa18:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fa1c:	45                   	inc    ebp
c001fa1d:	83 fd 06             	cmp    ebp,0x6
c001fa20:	75 df                	jne    c001fa01 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fa22:	eb 76                	jmp    c001fa9a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001fa24:	89 f0                	mov    eax,esi
c001fa26:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fa2b:	89 fa                	mov    edx,edi
c001fa2d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fa34:	0f ac d0 10          	shrd   eax,edx,0x10
c001fa38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fa3d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fa41:	c1 ee 18             	shr    esi,0x18
c001fa44:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fa49:	eb 56                	jmp    c001faa1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fa4b:	6a 00                	push   0x0
c001fa4d:	6a 3f                	push   0x3f
c001fa4f:	57                   	push   edi
c001fa50:	56                   	push   esi
c001fa51:	e8 ae 20 00 00       	call   c0021b04 <__umoddi3>
c001fa56:	83 c4 10             	add    esp,0x10
c001fa59:	40                   	inc    eax
c001fa5a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fa5e:	6a 00                	push   0x0
c001fa60:	68 f0 03 00 00       	push   0x3f0
c001fa65:	57                   	push   edi
c001fa66:	56                   	push   esi
c001fa67:	e8 98 1f 00 00       	call   c0021a04 <__udivdi3>
c001fa6c:	83 c4 10             	add    esp,0x10
c001fa6f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fa74:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fa7b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fa80:	6a 00                	push   0x0
c001fa82:	6a 3f                	push   0x3f
c001fa84:	57                   	push   edi
c001fa85:	56                   	push   esi
c001fa86:	e8 79 1f 00 00       	call   c0021a04 <__udivdi3>
c001fa8b:	83 c4 10             	add    esp,0x10
c001fa8e:	83 e0 0f             	and    eax,0xf
c001fa91:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fa96:	89 c6                	mov    esi,eax
c001fa98:	eb 07                	jmp    c001faa1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001fa9a:	31 f6                	xor    esi,esi
c001fa9c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001faa1:	55                   	push   ebp
c001faa2:	6a 00                	push   0x0
c001faa4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001faab:	50                   	push   eax
c001faac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fab0:	e8 d9 ee ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c001fab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fab8:	e8 a1 fe ff ff       	call   c001f95e <ATA::readyForCommand()>
c001fabd:	83 c4 10             	add    esp,0x10
c001fac0:	84 c0                	test   al,al
c001fac2:	75 0a                	jne    c001face <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001fac4:	be 01 00 00 00       	mov    esi,0x1
c001fac9:	e9 c2 02 00 00       	jmp    c001fd90 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001face:	fa                   	cli    
c001facf:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fad5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fadb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001fae0:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fae6:	75 0a                	jne    c001faf2 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001fae8:	c1 e0 04             	shl    eax,0x4
c001faeb:	09 c6                	or     esi,eax
c001faed:	83 ce a0             	or     esi,0xffffffa0
c001faf0:	eb 08                	jmp    c001fafa <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001faf2:	c1 e0 04             	shl    eax,0x4
c001faf5:	09 c6                	or     esi,eax
c001faf7:	83 ce e0             	or     esi,0xffffffe0
c001fafa:	89 f0                	mov    eax,esi
c001fafc:	0f b6 d2             	movzx  edx,dl
c001faff:	0f b6 f0             	movzx  esi,al
c001fb02:	56                   	push   esi
c001fb03:	6a 06                	push   0x6
c001fb05:	52                   	push   edx
c001fb06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb0c:	e8 73 ec ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb11:	83 c4 10             	add    esp,0x10
c001fb14:	6a 00                	push   0x0
c001fb16:	6a 01                	push   0x1
c001fb18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb1f:	50                   	push   eax
c001fb20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb26:	e8 59 ec ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb2b:	83 c4 10             	add    esp,0x10
c001fb2e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fb33:	83 f8 02             	cmp    eax,0x2
c001fb36:	75 6e                	jne    c001fba6 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001fb38:	6a 00                	push   0x0
c001fb3a:	6a 08                	push   0x8
c001fb3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb43:	50                   	push   eax
c001fb44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb4a:	e8 35 ec ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb4f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fb54:	50                   	push   eax
c001fb55:	6a 09                	push   0x9
c001fb57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb5e:	50                   	push   eax
c001fb5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb65:	e8 1a ec ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb6a:	83 c4 20             	add    esp,0x20
c001fb6d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fb72:	50                   	push   eax
c001fb73:	6a 0a                	push   0xa
c001fb75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb7c:	50                   	push   eax
c001fb7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb83:	e8 fc eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb88:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fb8d:	50                   	push   eax
c001fb8e:	6a 0b                	push   0xb
c001fb90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb97:	50                   	push   eax
c001fb98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb9e:	e8 e1 eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fba3:	83 c4 20             	add    esp,0x20
c001fba6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fbab:	50                   	push   eax
c001fbac:	6a 02                	push   0x2
c001fbae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbb5:	50                   	push   eax
c001fbb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbbc:	e8 c3 eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbc1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fbc6:	50                   	push   eax
c001fbc7:	6a 03                	push   0x3
c001fbc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbd0:	50                   	push   eax
c001fbd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbd7:	e8 a8 eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbdc:	83 c4 20             	add    esp,0x20
c001fbdf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fbe4:	50                   	push   eax
c001fbe5:	6a 04                	push   0x4
c001fbe7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbee:	50                   	push   eax
c001fbef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbf5:	e8 8a eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbfa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fbff:	50                   	push   eax
c001fc00:	6a 05                	push   0x5
c001fc02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc09:	50                   	push   eax
c001fc0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc10:	e8 6f eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc15:	83 c4 20             	add    esp,0x20
c001fc18:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fc1d:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001fc22:	74 13                	je     c001fc37 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001fc24:	83 f8 02             	cmp    eax,0x2
c001fc27:	74 20                	je     c001fc49 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001fc29:	48                   	dec    eax
c001fc2a:	0f 85 94 fe ff ff    	jne    c001fac4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fc30:	b8 30 00 00 00       	mov    eax,0x30
c001fc35:	eb 1e                	jmp    c001fc55 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc37:	83 f8 02             	cmp    eax,0x2
c001fc3a:	74 14                	je     c001fc50 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001fc3c:	48                   	dec    eax
c001fc3d:	b8 20 00 00 00       	mov    eax,0x20
c001fc42:	74 11                	je     c001fc55 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc44:	e9 7b fe ff ff       	jmp    c001fac4 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001fc49:	b8 34 00 00 00       	mov    eax,0x34
c001fc4e:	eb 05                	jmp    c001fc55 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001fc50:	b8 24 00 00 00       	mov    eax,0x24
c001fc55:	50                   	push   eax
c001fc56:	6a 07                	push   0x7
c001fc58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc5f:	50                   	push   eax
c001fc60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc66:	e8 19 eb ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc6b:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fc72:	83 c4 10             	add    esp,0x10
c001fc75:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fc7c:	75 01                	jne    c001fc7f <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001fc7e:	fb                   	sti    
c001fc7f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fc83:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001fc88:	85 f6                	test   esi,esi
c001fc8a:	0f 84 dd 00 00 00    	je     c001fd6d <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fc90:	57                   	push   edi
c001fc91:	6a 01                	push   0x1
c001fc93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc9a:	50                   	push   eax
c001fc9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fca1:	e8 84 f8 ff ff       	call   c001f52a <IDE::polling(unsigned char, unsigned int)>
c001fca6:	83 c4 10             	add    esp,0x10
c001fca9:	0f b6 c0             	movzx  eax,al
c001fcac:	85 c0                	test   eax,eax
c001fcae:	74 23                	je     c001fcd3 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001fcb0:	50                   	push   eax
c001fcb1:	89 c6                	mov    esi,eax
c001fcb3:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001fcba:	50                   	push   eax
c001fcbb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcc2:	50                   	push   eax
c001fcc3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcc9:	e8 a2 f7 ff ff       	call   c001f470 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fcce:	e9 ba 00 00 00       	jmp    c001fd8d <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001fcd3:	85 ed                	test   ebp,ebp
c001fcd5:	74 49                	je     c001fd20 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001fcd7:	fa                   	cli    
c001fcd8:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fcde:	31 c9                	xor    ecx,ecx
c001fce0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fce4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fce8:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001fcec:	51                   	push   ecx
c001fced:	51                   	push   ecx
c001fcee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcf5:	50                   	push   eax
c001fcf6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fcfc:	e8 71 ea ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c001fd01:	89 c2                	mov    edx,eax
c001fd03:	89 f8                	mov    eax,edi
c001fd05:	66 ef                	out    dx,ax
c001fd07:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd0b:	83 c4 10             	add    esp,0x10
c001fd0e:	41                   	inc    ecx
c001fd0f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001fd15:	75 c9                	jne    c001fce0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001fd17:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fd1e:	eb 35                	jmp    c001fd55 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001fd20:	fa                   	cli    
c001fd21:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c001fd27:	52                   	push   edx
c001fd28:	52                   	push   edx
c001fd29:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd30:	50                   	push   eax
c001fd31:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd37:	e8 36 ea ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c001fd3c:	b9 00 01 00 00       	mov    ecx,0x100
c001fd41:	89 c2                	mov    edx,eax
c001fd43:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001fd47:	fc                   	cld    
c001fd48:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001fd4b:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c001fd52:	83 c4 10             	add    esp,0x10
c001fd55:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c001fd5c:	75 01                	jne    c001fd5f <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001fd5e:	fb                   	sti    
c001fd5f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001fd67:	4e                   	dec    esi
c001fd68:	e9 1b ff ff ff       	jmp    c001fc88 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001fd6d:	31 f6                	xor    esi,esi
c001fd6f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fd74:	74 1a                	je     c001fd90 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001fd76:	50                   	push   eax
c001fd77:	50                   	push   eax
c001fd78:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001fd7d:	83 f8 02             	cmp    eax,0x2
c001fd80:	0f 94 c0             	sete   al
c001fd83:	0f b6 c0             	movzx  eax,al
c001fd86:	50                   	push   eax
c001fd87:	53                   	push   ebx
c001fd88:	e8 83 fb ff ff       	call   c001f910 <ATA::flush(bool)>
c001fd8d:	83 c4 10             	add    esp,0x10
c001fd90:	83 c4 2c             	add    esp,0x2c
c001fd93:	89 f0                	mov    eax,esi
c001fd95:	5b                   	pop    ebx
c001fd96:	5e                   	pop    esi
c001fd97:	5f                   	pop    edi
c001fd98:	5d                   	pop    ebp
c001fd99:	c3                   	ret    

c001fd9a <ATA::read(unsigned long long, int, void*)>:
c001fd9a:	57                   	push   edi
c001fd9b:	b8 04 00 00 00       	mov    eax,0x4
c001fda0:	56                   	push   esi
c001fda1:	53                   	push   ebx
c001fda2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fda6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fdaa:	8d 7a ff             	lea    edi,[edx-0x1]
c001fdad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fdb1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fdb5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fdbb:	77 25                	ja     c001fde2 <ATA::read(unsigned long long, int, void*)+0x48>
c001fdbd:	b8 06 00 00 00       	mov    eax,0x6
c001fdc2:	85 f6                	test   esi,esi
c001fdc4:	74 1c                	je     c001fde2 <ATA::read(unsigned long long, int, void*)+0x48>
c001fdc6:	50                   	push   eax
c001fdc7:	50                   	push   eax
c001fdc8:	6a 00                	push   0x0
c001fdca:	56                   	push   esi
c001fdcb:	52                   	push   edx
c001fdcc:	53                   	push   ebx
c001fdcd:	51                   	push   ecx
c001fdce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fdd2:	e8 d3 fb ff ff       	call   c001f9aa <ATA::access(unsigned long long, int, void*, bool)>
c001fdd7:	83 c4 20             	add    esp,0x20
c001fdda:	85 c0                	test   eax,eax
c001fddc:	0f 95 c0             	setne  al
c001fddf:	0f b6 c0             	movzx  eax,al
c001fde2:	5b                   	pop    ebx
c001fde3:	5e                   	pop    esi
c001fde4:	5f                   	pop    edi
c001fde5:	c3                   	ret    

c001fde6 <ATA::write(unsigned long long, int, void*)>:
c001fde6:	57                   	push   edi
c001fde7:	b8 04 00 00 00       	mov    eax,0x4
c001fdec:	56                   	push   esi
c001fded:	53                   	push   ebx
c001fdee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fdf2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fdf6:	8d 7a ff             	lea    edi,[edx-0x1]
c001fdf9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fdfd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fe01:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fe07:	77 25                	ja     c001fe2e <ATA::write(unsigned long long, int, void*)+0x48>
c001fe09:	b8 06 00 00 00       	mov    eax,0x6
c001fe0e:	85 f6                	test   esi,esi
c001fe10:	74 1c                	je     c001fe2e <ATA::write(unsigned long long, int, void*)+0x48>
c001fe12:	50                   	push   eax
c001fe13:	50                   	push   eax
c001fe14:	6a 01                	push   0x1
c001fe16:	56                   	push   esi
c001fe17:	52                   	push   edx
c001fe18:	53                   	push   ebx
c001fe19:	51                   	push   ecx
c001fe1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fe1e:	e8 87 fb ff ff       	call   c001f9aa <ATA::access(unsigned long long, int, void*, bool)>
c001fe23:	83 c4 20             	add    esp,0x20
c001fe26:	85 c0                	test   eax,eax
c001fe28:	0f 95 c0             	setne  al
c001fe2b:	0f b6 c0             	movzx  eax,al
c001fe2e:	5b                   	pop    ebx
c001fe2f:	5e                   	pop    esi
c001fe30:	5f                   	pop    edi
c001fe31:	c3                   	ret    

c001fe32 <ATA::detectCHS()>:
c001fe32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe36:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001fe3c:	c1 e0 06             	shl    eax,0x6
c001fe3f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fe45:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fe4f:	c7 44 24 04 34 5e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025e34
c001fe57:	e9 98 fe fe ff       	jmp    c000fcf4 <KePanic(char const*)>

c001fe5c <ATA::open(int, int, void*)>:
c001fe5c:	53                   	push   ebx
c001fe5d:	83 ec 08             	sub    esp,0x8
c001fe60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fe6c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fe72:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fe78:	c1 e0 06             	shl    eax,0x6
c001fe7b:	01 d0                	add    eax,edx
c001fe7d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fe84:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fe8a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fe91:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fe9b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fea1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fea8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001feaf:	75 0c                	jne    c001febd <ATA::open(int, int, void*)+0x61>
c001feb1:	83 ec 0c             	sub    esp,0xc
c001feb4:	53                   	push   ebx
c001feb5:	e8 78 ff ff ff       	call   c001fe32 <ATA::detectCHS()>
c001feba:	83 c4 10             	add    esp,0x10
c001febd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fec3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fec9:	c1 e0 06             	shl    eax,0x6
c001fecc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fed3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fedd:	d1 e8                	shr    eax,1
c001fedf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fee5:	6a 04                	push   0x4
c001fee7:	6a 0c                	push   0xc
c001fee9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fef0:	50                   	push   eax
c001fef1:	52                   	push   edx
c001fef2:	e8 8d e8 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fef7:	90                   	nop
c001fef8:	90                   	nop
c001fef9:	6a 00                	push   0x0
c001fefb:	6a 0c                	push   0xc
c001fefd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff04:	50                   	push   eax
c001ff05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff0b:	e8 74 e8 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff10:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ff16:	83 c4 20             	add    esp,0x20
c001ff19:	c1 e0 06             	shl    eax,0x6
c001ff1c:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ff22:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ff29:	0f 84 00 01 00 00    	je     c002002f <ATA::open(int, int, void*)+0x1d3>
c001ff2f:	83 ec 0c             	sub    esp,0xc
c001ff32:	6a 08                	push   0x8
c001ff34:	e8 8d 00 ff ff       	call   c000ffc6 <Phys::allocateContiguousPages(int)>
c001ff39:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ff3f:	c7 04 24 46 5e 02 c0 	mov    DWORD PTR [esp],0xc0025e46
c001ff46:	e8 31 70 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ff4b:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ff52:	e8 e0 33 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c001ff57:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ff5d:	6a 03                	push   0x3
c001ff5f:	50                   	push   eax
c001ff60:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ff66:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001ff6c:	e8 a9 3a ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ff71:	83 c4 20             	add    esp,0x20
c001ff74:	e8 6f ff fe ff       	call   c000fee8 <Phys::allocatePage()>
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001ff82:	6a 01                	push   0x1
c001ff84:	e8 ae 33 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c001ff89:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001ff8f:	6a 03                	push   0x3
c001ff91:	50                   	push   eax
c001ff92:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001ff98:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c001ff9e:	e8 77 3a ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c001ffa3:	83 c4 14             	add    esp,0x14
c001ffa6:	68 7f 5e 02 c0       	push   0xc0025e7f
c001ffab:	e8 cc 6f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c001ffb0:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001ffb7:	50                   	push   eax
c001ffb8:	6a 12                	push   0x12
c001ffba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffc1:	50                   	push   eax
c001ffc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffc8:	e8 b7 e7 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffcd:	83 c4 20             	add    esp,0x20
c001ffd0:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ffd6:	0f b6 c4             	movzx  eax,ah
c001ffd9:	50                   	push   eax
c001ffda:	6a 13                	push   0x13
c001ffdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe3:	50                   	push   eax
c001ffe4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffea:	e8 95 e7 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffef:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fff6:	50                   	push   eax
c001fff7:	6a 14                	push   0x14
c001fff9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020000:	50                   	push   eax
c0020001:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020007:	e8 78 e7 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002000c:	83 c4 20             	add    esp,0x20
c002000f:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c0020016:	50                   	push   eax
c0020017:	6a 15                	push   0x15
c0020019:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020020:	50                   	push   eax
c0020021:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020027:	e8 58 e7 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002c:	83 c4 10             	add    esp,0x10
c002002f:	83 ec 0c             	sub    esp,0xc
c0020032:	53                   	push   ebx
c0020033:	e8 66 9e fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020038:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002003b:	e8 fe ac fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020040:	31 c0                	xor    eax,eax
c0020042:	83 c4 18             	add    esp,0x18
c0020045:	5b                   	pop    ebx
c0020046:	c3                   	ret    

c0020047 <combineCharAndColour(char, unsigned char)>:
c0020047:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002004c:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020052:	c1 e0 08             	shl    eax,0x8
c0020055:	09 d0                	or     eax,edx
c0020057:	c3                   	ret    

c0020058 <combineColours(unsigned char, unsigned char)>:
c0020058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002005d:	c1 e0 04             	shl    eax,0x4
c0020060:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020064:	c3                   	ret    
c0020065:	90                   	nop

c0020066 <ATAPI::write(unsigned long long, int, void*)>:
c0020066:	b8 03 00 00 00       	mov    eax,0x3
c002006b:	c3                   	ret    

c002006c <ATAPI::close(int, int, void*)>:
c002006c:	83 ec 0c             	sub    esp,0xc
c002006f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020073:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020079:	85 c0                	test   eax,eax
c002007b:	74 0c                	je     c0020089 <ATAPI::close(int, int, void*)+0x1d>
c002007d:	83 ec 0c             	sub    esp,0xc
c0020080:	8b 10                	mov    edx,DWORD PTR [eax]
c0020082:	50                   	push   eax
c0020083:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020086:	83 c4 10             	add    esp,0x10
c0020089:	31 c0                	xor    eax,eax
c002008b:	83 c4 0c             	add    esp,0xc
c002008e:	c3                   	ret    
c002008f:	90                   	nop

c0020090 <ATAPI::ATAPI()>:
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020097:	83 ec 04             	sub    esp,0x4
c002009a:	68 00 08 00 00       	push   0x800
c002009f:	68 31 60 02 c0       	push   0xc0026031
c00200a4:	50                   	push   eax
c00200a5:	e8 8c 9d fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00200aa:	83 c4 10             	add    esp,0x10
c00200ad:	ba 40 5f 02 c0       	mov    edx,0xc0025f40
c00200b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b6:	89 10                	mov    DWORD PTR [eax],edx
c00200b8:	90                   	nop
c00200b9:	83 c4 0c             	add    esp,0xc
c00200bc:	c3                   	ret    
c00200bd:	90                   	nop

c00200be <ATAPI::readyForCommand()>:
c00200be:	56                   	push   esi
c00200bf:	53                   	push   ebx
c00200c0:	31 db                	xor    ebx,ebx
c00200c2:	50                   	push   eax
c00200c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00200c7:	50                   	push   eax
c00200c8:	6a 0c                	push   0xc
c00200ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00200d1:	50                   	push   eax
c00200d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00200d8:	e8 67 e7 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c00200dd:	83 c4 10             	add    esp,0x10
c00200e0:	a8 88                	test   al,0x88
c00200e2:	74 26                	je     c002010a <ATAPI::readyForCommand()+0x4c>
c00200e4:	43                   	inc    ebx
c00200e5:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c00200eb:	7e da                	jle    c00200c7 <ATAPI::readyForCommand()+0x9>
c00200ed:	51                   	push   ecx
c00200ee:	51                   	push   ecx
c00200ef:	6a 00                	push   0x0
c00200f1:	68 5e 01 00 00       	push   0x15e
c00200f6:	e8 19 6f ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c00200fb:	83 c4 10             	add    esp,0x10
c00200fe:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0020104:	75 c1                	jne    c00200c7 <ATAPI::readyForCommand()+0x9>
c0020106:	31 c0                	xor    eax,eax
c0020108:	eb 02                	jmp    c002010c <ATAPI::readyForCommand()+0x4e>
c002010a:	b0 01                	mov    al,0x1
c002010c:	5a                   	pop    edx
c002010d:	5b                   	pop    ebx
c002010e:	5e                   	pop    esi
c002010f:	c3                   	ret    

c0020110 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0020110:	55                   	push   ebp
c0020111:	57                   	push   edi
c0020112:	56                   	push   esi
c0020113:	53                   	push   ebx
c0020114:	83 ec 20             	sub    esp,0x20
c0020117:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002011b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002011f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020123:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020127:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002012b:	6a 01                	push   0x1
c002012d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020134:	50                   	push   eax
c0020135:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002013b:	e8 4e e8 ff ff       	call   c001e98e <IDE::enableIRQs(unsigned char, bool)>
c0020140:	5e                   	pop    esi
c0020141:	58                   	pop    eax
c0020142:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020149:	50                   	push   eax
c002014a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020150:	e8 09 e6 ff ff       	call   c001e75e <IDE::prepareInterrupt(unsigned char)>
c0020155:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020158:	e8 61 ff ff ff       	call   c00200be <ATAPI::readyForCommand()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	84 c0                	test   al,al
c0020162:	75 0a                	jne    c002016e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020164:	bb 01 00 00 00       	mov    ebx,0x1
c0020169:	e9 60 02 00 00       	jmp    c00203ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002016e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020174:	c1 e0 04             	shl    eax,0x4
c0020177:	0f b6 c0             	movzx  eax,al
c002017a:	50                   	push   eax
c002017b:	6a 06                	push   0x6
c002017d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020184:	50                   	push   eax
c0020185:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002018b:	e8 f4 e5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020190:	6a 00                	push   0x0
c0020192:	6a 01                	push   0x1
c0020194:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002019b:	50                   	push   eax
c002019c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201a2:	e8 dd e5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201a7:	83 c4 20             	add    esp,0x20
c00201aa:	0f b6 c3             	movzx  eax,bl
c00201ad:	0f b6 df             	movzx  ebx,bh
c00201b0:	50                   	push   eax
c00201b1:	6a 04                	push   0x4
c00201b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201ba:	50                   	push   eax
c00201bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201c1:	e8 be e5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201c6:	53                   	push   ebx
c00201c7:	6a 05                	push   0x5
c00201c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201d0:	50                   	push   eax
c00201d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201d7:	e8 a8 e5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201dc:	83 c4 20             	add    esp,0x20
c00201df:	68 a0 00 00 00       	push   0xa0
c00201e4:	6a 07                	push   0x7
c00201e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00201ed:	50                   	push   eax
c00201ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00201f4:	e8 8b e5 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201f9:	83 c4 0c             	add    esp,0xc
c00201fc:	6a 01                	push   0x1
c00201fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020205:	50                   	push   eax
c0020206:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002020c:	e8 19 f3 ff ff       	call   c001f52a <IDE::polling(unsigned char, unsigned int)>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	0f b6 d8             	movzx  ebx,al
c0020217:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002021d:	85 db                	test   ebx,ebx
c002021f:	74 20                	je     c0020241 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0020221:	53                   	push   ebx
c0020222:	0f b6 c0             	movzx  eax,al
c0020225:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002022c:	52                   	push   edx
c002022d:	50                   	push   eax
c002022e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020234:	e8 37 f2 ff ff       	call   c001f470 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020239:	83 c4 10             	add    esp,0x10
c002023c:	e9 8d 01 00 00       	jmp    c00203ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c0020241:	0f b6 c0             	movzx  eax,al
c0020244:	53                   	push   ebx
c0020245:	53                   	push   ebx
c0020246:	50                   	push   eax
c0020247:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002024d:	e8 20 e5 ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c0020252:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020256:	b9 06 00 00 00       	mov    ecx,0x6
c002025b:	89 c2                	mov    edx,eax
c002025d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0020260:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020264:	83 c4 10             	add    esp,0x10
c0020267:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002026c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020270:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020276:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002027d:	85 db                	test   ebx,ebx
c002027f:	0f 84 ec 00 00 00    	je     c0020371 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c0020285:	51                   	push   ecx
c0020286:	51                   	push   ecx
c0020287:	52                   	push   edx
c0020288:	50                   	push   eax
c0020289:	e8 64 e6 ff ff       	call   c001e8f2 <IDE::waitInterrupt(unsigned char)>
c002028e:	83 c4 10             	add    esp,0x10
c0020291:	84 c0                	test   al,al
c0020293:	0f 84 cb fe ff ff    	je     c0020164 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020299:	56                   	push   esi
c002029a:	56                   	push   esi
c002029b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202a2:	50                   	push   eax
c00202a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202a9:	e8 b0 e4 ff ff       	call   c001e75e <IDE::prepareInterrupt(unsigned char)>
c00202ae:	83 c4 0c             	add    esp,0xc
c00202b1:	6a 04                	push   0x4
c00202b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202ba:	50                   	push   eax
c00202bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202c1:	e8 7e e5 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c00202c6:	83 c4 0c             	add    esp,0xc
c00202c9:	89 c6                	mov    esi,eax
c00202cb:	6a 05                	push   0x5
c00202cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202d4:	50                   	push   eax
c00202d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202db:	e8 64 e5 ff ff       	call   c001e844 <IDE::read(unsigned char, unsigned char)>
c00202e0:	89 f1                	mov    ecx,esi
c00202e2:	0f b6 c0             	movzx  eax,al
c00202e5:	0f b6 f1             	movzx  esi,cl
c00202e8:	c1 e0 08             	shl    eax,0x8
c00202eb:	09 c6                	or     esi,eax
c00202ed:	d1 fe                	sar    esi,1
c00202ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00202fb:	74 41                	je     c002033e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c00202fd:	31 c9                	xor    ecx,ecx
c00202ff:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020305:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002030c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020310:	75 0a                	jne    c002031c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c0020312:	01 c9                	add    ecx,ecx
c0020314:	01 cd                	add    ebp,ecx
c0020316:	4b                   	dec    ebx
c0020317:	e9 54 ff ff ff       	jmp    c0020270 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002031c:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020321:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020325:	51                   	push   ecx
c0020326:	51                   	push   ecx
c0020327:	52                   	push   edx
c0020328:	50                   	push   eax
c0020329:	e8 44 e4 ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c002032e:	89 c2                	mov    edx,eax
c0020330:	89 f0                	mov    eax,esi
c0020332:	66 ef                	out    dx,ax
c0020334:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020338:	83 c4 10             	add    esp,0x10
c002033b:	41                   	inc    ecx
c002033c:	eb c1                	jmp    c00202ff <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002033e:	31 f6                	xor    esi,esi
c0020340:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020346:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002034d:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020351:	75 06                	jne    c0020359 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c0020353:	01 f6                	add    esi,esi
c0020355:	01 f5                	add    ebp,esi
c0020357:	eb bd                	jmp    c0020316 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c0020359:	51                   	push   ecx
c002035a:	51                   	push   ecx
c002035b:	52                   	push   edx
c002035c:	50                   	push   eax
c002035d:	e8 10 e4 ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c0020362:	89 c2                	mov    edx,eax
c0020364:	66 ed                	in     ax,dx
c0020366:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002036b:	83 c4 10             	add    esp,0x10
c002036e:	46                   	inc    esi
c002036f:	eb cf                	jmp    c0020340 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c0020371:	51                   	push   ecx
c0020372:	51                   	push   ecx
c0020373:	52                   	push   edx
c0020374:	50                   	push   eax
c0020375:	e8 78 e5 ff ff       	call   c001e8f2 <IDE::waitInterrupt(unsigned char)>
c002037a:	83 c4 10             	add    esp,0x10
c002037d:	84 c0                	test   al,al
c002037f:	0f 84 df fd ff ff    	je     c0020164 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020385:	bb a0 86 01 00       	mov    ebx,0x186a0
c002038a:	52                   	push   edx
c002038b:	52                   	push   edx
c002038c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020393:	50                   	push   eax
c0020394:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002039a:	e8 bf e3 ff ff       	call   c001e75e <IDE::prepareInterrupt(unsigned char)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	50                   	push   eax
c00203a3:	50                   	push   eax
c00203a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203ab:	50                   	push   eax
c00203ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203b2:	e8 bb e3 ff ff       	call   c001e772 <IDE::getBase(unsigned char)>
c00203b7:	8d 50 07             	lea    edx,[eax+0x7]
c00203ba:	ec                   	in     al,dx
c00203bb:	83 c4 10             	add    esp,0x10
c00203be:	a8 88                	test   al,0x88
c00203c0:	74 0a                	je     c00203cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c00203c2:	4b                   	dec    ebx
c00203c3:	75 dd                	jne    c00203a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c00203c5:	bb 02 00 00 00       	mov    ebx,0x2
c00203ca:	eb 02                	jmp    c00203ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c00203cc:	31 db                	xor    ebx,ebx
c00203ce:	83 c4 1c             	add    esp,0x1c
c00203d1:	89 d8                	mov    eax,ebx
c00203d3:	5b                   	pop    ebx
c00203d4:	5e                   	pop    esi
c00203d5:	5f                   	pop    edi
c00203d6:	5d                   	pop    ebp
c00203d7:	c3                   	ret    

c00203d8 <ATAPI::diskRemoved()>:
c00203d8:	53                   	push   ebx
c00203d9:	83 ec 14             	sub    esp,0x14
c00203dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00203e0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00203e7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c00203ed:	e8 3c a6 fe ff       	call   c000aa2e <LogicalDisk::unmount()>
c00203f2:	58                   	pop    eax
c00203f3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00203f9:	e8 0e b0 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c00203fe:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020404:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020408:	83 c4 18             	add    esp,0x18
c002040b:	5b                   	pop    ebx
c002040c:	e9 eb af fe ff       	jmp    c000b3fc <VCache::invalidateReadBuffer()>
c0020411:	90                   	nop

c0020412 <ATAPI::eject()>:
c0020412:	57                   	push   edi
c0020413:	b9 03 00 00 00       	mov    ecx,0x3
c0020418:	53                   	push   ebx
c0020419:	83 ec 14             	sub    esp,0x14
c002041c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020420:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020424:	fc                   	cld    
c0020425:	31 c0                	xor    eax,eax
c0020427:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020429:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002042e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020433:	50                   	push   eax
c0020434:	50                   	push   eax
c0020435:	6a 00                	push   0x0
c0020437:	6a 00                	push   0x0
c0020439:	6a 00                	push   0x0
c002043b:	6a 02                	push   0x2
c002043d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020441:	50                   	push   eax
c0020442:	53                   	push   ebx
c0020443:	e8 c8 fc ff ff       	call   c0020110 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020448:	83 c4 14             	add    esp,0x14
c002044b:	53                   	push   ebx
c002044c:	e8 87 ff ff ff       	call   c00203d8 <ATAPI::diskRemoved()>
c0020451:	83 c4 24             	add    esp,0x24
c0020454:	31 c0                	xor    eax,eax
c0020456:	5b                   	pop    ebx
c0020457:	5f                   	pop    edi
c0020458:	c3                   	ret    
c0020459:	90                   	nop

c002045a <ATAPI::diskInserted()>:
c002045a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002045e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020465:	c3                   	ret    

c0020466 <ATAPI::detectMedia()>:
c0020466:	56                   	push   esi
c0020467:	53                   	push   ebx
c0020468:	83 ec 28             	sub    esp,0x28
c002046b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002046f:	6a 0c                	push   0xc
c0020471:	6a 00                	push   0x0
c0020473:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020477:	56                   	push   esi
c0020478:	e8 73 00 fe ff       	call   c00004f0 <memset>
c002047d:	58                   	pop    eax
c002047e:	5a                   	pop    edx
c002047f:	6a 00                	push   0x0
c0020481:	6a 00                	push   0x0
c0020483:	6a 00                	push   0x0
c0020485:	6a 00                	push   0x0
c0020487:	56                   	push   esi
c0020488:	53                   	push   ebx
c0020489:	e8 82 fc ff ff       	call   c0020110 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002048e:	83 c4 1c             	add    esp,0x1c
c0020491:	6a 0c                	push   0xc
c0020493:	6a 00                	push   0x0
c0020495:	56                   	push   esi
c0020496:	e8 55 00 fe ff       	call   c00004f0 <memset>
c002049b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00204a0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00204a5:	59                   	pop    ecx
c00204a6:	58                   	pop    eax
c00204a7:	6a 01                	push   0x1
c00204a9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00204ad:	50                   	push   eax
c00204ae:	6a 00                	push   0x0
c00204b0:	6a 12                	push   0x12
c00204b2:	56                   	push   esi
c00204b3:	53                   	push   ebx
c00204b4:	e8 57 fc ff ff       	call   c0020110 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204b9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00204bd:	83 c4 20             	add    esp,0x20
c00204c0:	83 e0 7f             	and    eax,0x7f
c00204c3:	83 f8 70             	cmp    eax,0x70
c00204c6:	74 15                	je     c00204dd <ATAPI::detectMedia()+0x77>
c00204c8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204cf:	75 0c                	jne    c00204dd <ATAPI::detectMedia()+0x77>
c00204d1:	83 ec 0c             	sub    esp,0xc
c00204d4:	53                   	push   ebx
c00204d5:	e8 80 ff ff ff       	call   c002045a <ATAPI::diskInserted()>
c00204da:	83 c4 10             	add    esp,0x10
c00204dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00204e1:	83 e0 0f             	and    eax,0xf
c00204e4:	83 f8 02             	cmp    eax,0x2
c00204e7:	75 1b                	jne    c0020504 <ATAPI::detectMedia()+0x9e>
c00204e9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00204ee:	75 2d                	jne    c002051d <ATAPI::detectMedia()+0xb7>
c00204f0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00204f7:	74 24                	je     c002051d <ATAPI::detectMedia()+0xb7>
c00204f9:	83 ec 0c             	sub    esp,0xc
c00204fc:	53                   	push   ebx
c00204fd:	e8 d6 fe ff ff       	call   c00203d8 <ATAPI::diskRemoved()>
c0020502:	eb 16                	jmp    c002051a <ATAPI::detectMedia()+0xb4>
c0020504:	85 c0                	test   eax,eax
c0020506:	75 15                	jne    c002051d <ATAPI::detectMedia()+0xb7>
c0020508:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002050f:	75 0c                	jne    c002051d <ATAPI::detectMedia()+0xb7>
c0020511:	83 ec 0c             	sub    esp,0xc
c0020514:	53                   	push   ebx
c0020515:	e8 40 ff ff ff       	call   c002045a <ATAPI::diskInserted()>
c002051a:	83 c4 10             	add    esp,0x10
c002051d:	83 c4 24             	add    esp,0x24
c0020520:	5b                   	pop    ebx
c0020521:	5e                   	pop    esi
c0020522:	c3                   	ret    
c0020523:	90                   	nop

c0020524 <ATAPI::open(int, int, void*)>:
c0020524:	56                   	push   esi
c0020525:	53                   	push   ebx
c0020526:	50                   	push   eax
c0020527:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002052b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002052f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020533:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020539:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002053f:	c1 e0 06             	shl    eax,0x6
c0020542:	01 d0                	add    eax,edx
c0020544:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002054b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020551:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020558:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020562:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020568:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002056f:	6a 04                	push   0x4
c0020571:	6a 0c                	push   0xc
c0020573:	51                   	push   ecx
c0020574:	52                   	push   edx
c0020575:	e8 0a e2 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002057a:	90                   	nop
c002057b:	90                   	nop
c002057c:	6a 00                	push   0x0
c002057e:	6a 0c                	push   0xc
c0020580:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020587:	50                   	push   eax
c0020588:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002058e:	e8 f1 e1 ff ff       	call   c001e784 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020593:	83 c4 14             	add    esp,0x14
c0020596:	68 78 01 00 00       	push   0x178
c002059b:	e8 f7 f2 fe ff       	call   c000f897 <malloc>
c00205a0:	83 c4 0c             	add    esp,0xc
c00205a3:	89 c6                	mov    esi,eax
c00205a5:	6a 00                	push   0x0
c00205a7:	68 ff ff ff 7f       	push   0x7fffffff
c00205ac:	6a 00                	push   0x0
c00205ae:	6a 00                	push   0x0
c00205b0:	53                   	push   ebx
c00205b1:	68 e3 60 02 c0       	push   0xc00260e3
c00205b6:	50                   	push   eax
c00205b7:	e8 b0 a2 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00205bc:	83 c4 14             	add    esp,0x14
c00205bf:	56                   	push   esi
c00205c0:	e8 67 a3 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c00205c5:	5a                   	pop    edx
c00205c6:	0f be c0             	movsx  eax,al
c00205c9:	59                   	pop    ecx
c00205ca:	50                   	push   eax
c00205cb:	68 28 5f 02 c0       	push   0xc0025f28
c00205d0:	e8 a7 69 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00205d5:	58                   	pop    eax
c00205d6:	5a                   	pop    edx
c00205d7:	56                   	push   esi
c00205d8:	53                   	push   ebx
c00205d9:	e8 76 94 fe ff       	call   c0009a54 <Device::addChild(Device*)>
c00205de:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c00205e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205e7:	e8 b2 98 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c00205ec:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00205f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00205f6:	e8 6b fe ff ff       	call   c0020466 <ATAPI::detectMedia()>
c00205fb:	83 c4 14             	add    esp,0x14
c00205fe:	31 c0                	xor    eax,eax
c0020600:	5b                   	pop    ebx
c0020601:	5e                   	pop    esi
c0020602:	c3                   	ret    
c0020603:	90                   	nop

c0020604 <ATAPI::read(unsigned long long, int, void*)>:
c0020604:	55                   	push   ebp
c0020605:	57                   	push   edi
c0020606:	56                   	push   esi
c0020607:	53                   	push   ebx
c0020608:	83 ec 1c             	sub    esp,0x1c
c002060b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002060f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020613:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020617:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002061e:	74 3c                	je     c002065c <ATAPI::read(unsigned long long, int, void*)+0x58>
c0020620:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020624:	b9 03 00 00 00       	mov    ecx,0x3
c0020629:	fc                   	cld    
c002062a:	31 c0                	xor    eax,eax
c002062c:	0f ce                	bswap  esi
c002062e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020630:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020635:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c0020639:	89 e8                	mov    eax,ebp
c002063b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002063f:	50                   	push   eax
c0020640:	50                   	push   eax
c0020641:	55                   	push   ebp
c0020642:	c1 e5 0b             	shl    ebp,0xb
c0020645:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020649:	6a 00                	push   0x0
c002064b:	55                   	push   ebp
c002064c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020650:	50                   	push   eax
c0020651:	53                   	push   ebx
c0020652:	e8 b9 fa ff ff       	call   c0020110 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020657:	83 c4 20             	add    esp,0x20
c002065a:	eb 1a                	jmp    c0020676 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	53                   	push   ebx
c0020660:	e8 01 fe ff ff       	call   c0020466 <ATAPI::detectMedia()>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002066f:	75 af                	jne    c0020620 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020671:	b8 02 00 00 00       	mov    eax,0x2
c0020676:	83 c4 1c             	add    esp,0x1c
c0020679:	5b                   	pop    ebx
c002067a:	5e                   	pop    esi
c002067b:	5f                   	pop    edi
c002067c:	5d                   	pop    ebp
c002067d:	c3                   	ret    

c002067e <SATA::close(int, int, void*)>:
c002067e:	83 ec 0c             	sub    esp,0xc
c0020681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020685:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002068b:	85 c0                	test   eax,eax
c002068d:	74 0c                	je     c002069b <SATA::close(int, int, void*)+0x1d>
c002068f:	83 ec 0c             	sub    esp,0xc
c0020692:	8b 10                	mov    edx,DWORD PTR [eax]
c0020694:	50                   	push   eax
c0020695:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020698:	83 c4 10             	add    esp,0x10
c002069b:	31 c0                	xor    eax,eax
c002069d:	83 c4 0c             	add    esp,0xc
c00206a0:	c3                   	ret    
c00206a1:	90                   	nop

c00206a2 <SATA::powerSaving(PowerSavingLevel)>:
c00206a2:	c3                   	ret    
c00206a3:	90                   	nop

c00206a4 <SATA::open(int, int, void*)>:
c00206a4:	56                   	push   esi
c00206a5:	53                   	push   ebx
c00206a6:	83 ec 10             	sub    esp,0x10
c00206a9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00206ad:	68 70 5f 02 c0       	push   0xc0025f70
c00206b2:	e8 c5 68 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00206b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00206c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00206cb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00206d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00206d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00206e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00206e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00206f0:	e8 f3 f7 fe ff       	call   c000fee8 <Phys::allocatePage()>
c00206f5:	89 c6                	mov    esi,eax
c00206f7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00206fd:	81 c6 00 10 00 00    	add    esi,0x1000
c0020703:	e8 e0 f7 fe ff       	call   c000fee8 <Phys::allocatePage()>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	39 c6                	cmp    esi,eax
c002070d:	74 10                	je     c002071f <SATA::open(int, int, void*)+0x7b>
c002070f:	83 ec 0c             	sub    esp,0xc
c0020712:	68 7c 5f 02 c0       	push   0xc0025f7c
c0020717:	e8 d8 f5 fe ff       	call   c000fcf4 <KePanic(char const*)>
c002071c:	83 c4 10             	add    esp,0x10
c002071f:	83 ec 0c             	sub    esp,0xc
c0020722:	6a 02                	push   0x2
c0020724:	e8 0e 2c ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0020729:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002072f:	6a 03                	push   0x3
c0020731:	50                   	push   eax
c0020732:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020738:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c002073e:	e8 d7 32 ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020743:	83 c4 14             	add    esp,0x14
c0020746:	53                   	push   ebx
c0020747:	e8 52 97 fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c002074c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002074f:	e8 ea a5 fe ff       	call   c000ad3e <createPartitionsForDisk(PhysicalDisk*)>
c0020754:	83 c4 14             	add    esp,0x14
c0020757:	31 c0                	xor    eax,eax
c0020759:	5b                   	pop    ebx
c002075a:	5e                   	pop    esi
c002075b:	c3                   	ret    

c002075c <SATA::SATA()>:
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020763:	83 ec 04             	sub    esp,0x4
c0020766:	68 00 02 00 00       	push   0x200
c002076b:	68 90 5f 02 c0       	push   0xc0025f90
c0020770:	50                   	push   eax
c0020771:	e8 c0 96 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020776:	83 c4 10             	add    esp,0x10
c0020779:	ba 00 60 02 c0       	mov    edx,0xc0026000
c002077e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020782:	89 10                	mov    DWORD PTR [eax],edx
c0020784:	90                   	nop
c0020785:	83 c4 0c             	add    esp,0xc
c0020788:	c3                   	ret    
c0020789:	90                   	nop

c002078a <SATA::access(unsigned long long, int, void*, bool)>:
c002078a:	55                   	push   ebp
c002078b:	57                   	push   edi
c002078c:	56                   	push   esi
c002078d:	53                   	push   ebx
c002078e:	83 ec 2c             	sub    esp,0x2c
c0020791:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020795:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020799:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002079d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00207a1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00207a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207a9:	fa                   	cli    
c00207aa:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00207b0:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00207b5:	7e 10                	jle    c00207c7 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c00207b7:	83 ec 0c             	sub    esp,0xc
c00207ba:	68 a0 5f 02 c0       	push   0xc0025fa0
c00207bf:	e8 30 f5 fe ff       	call   c000fcf4 <KePanic(char const*)>
c00207c4:	83 c4 10             	add    esp,0x10
c00207c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00207cd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00207d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00207d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00207dd:	89 d0                	mov    eax,edx
c00207df:	c1 e0 07             	shl    eax,0x7
c00207e2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207e6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00207f0:	51                   	push   ecx
c00207f1:	8d 42 02             	lea    eax,[edx+0x2]
c00207f4:	51                   	push   ecx
c00207f5:	c1 e0 07             	shl    eax,0x7
c00207f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00207fc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020800:	50                   	push   eax
c0020801:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020807:	e8 fe ed ff ff       	call   c001f60a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002080c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020810:	83 c4 10             	add    esp,0x10
c0020813:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020818:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002081c:	0f 84 a4 01 00 00    	je     c00209c6 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0020822:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020826:	c1 e0 09             	shl    eax,0x9
c0020829:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002082e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020832:	74 0e                	je     c0020842 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c0020834:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002083a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002083e:	89 c1                	mov    ecx,eax
c0020840:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020842:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020848:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002084c:	8d 42 02             	lea    eax,[edx+0x2]
c002084f:	c1 e0 07             	shl    eax,0x7
c0020852:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020856:	8b 00                	mov    eax,DWORD PTR [eax]
c0020858:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002085e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020868:	c1 e1 05             	shl    ecx,0x5
c002086b:	01 c8                	add    eax,ecx
c002086d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020871:	83 e1 01             	and    ecx,0x1
c0020874:	89 ce                	mov    esi,ecx
c0020876:	8a 08                	mov    cl,BYTE PTR [eax]
c0020878:	c1 e6 06             	shl    esi,0x6
c002087b:	83 e1 bf             	and    ecx,0xffffffbf
c002087e:	09 f1                	or     ecx,esi
c0020880:	88 08                	mov    BYTE PTR [eax],cl
c0020882:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020884:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002088a:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020890:	89 08                	mov    DWORD PTR [eax],ecx
c0020892:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020898:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002089e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00208a4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00208a7:	50                   	push   eax
c00208a8:	68 90 00 00 00       	push   0x90
c00208ad:	6a 00                	push   0x0
c00208af:	56                   	push   esi
c00208b0:	e8 3b fc fd ff       	call   c00004f0 <memset>
c00208b5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00208bb:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00208c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00208c5:	83 c4 10             	add    esp,0x10
c00208c8:	48                   	dec    eax
c00208c9:	25 ff ff 3f 00       	and    eax,0x3fffff
c00208ce:	89 c1                	mov    ecx,eax
c00208d0:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00208d6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00208db:	09 c8                	or     eax,ecx
c00208dd:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00208e3:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c00208e9:	83 c8 80             	or     eax,0xffffff80
c00208ec:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c00208f2:	66 8b 06             	mov    ax,WORD PTR [esi]
c00208f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208f9:	25 00 7f 00 00       	and    eax,0x7f00
c00208fe:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020903:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020908:	66 89 06             	mov    WORD PTR [esi],ax
c002090b:	b0 35                	mov    al,0x35
c002090d:	75 02                	jne    c0020911 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002090f:	b0 25                	mov    al,0x25
c0020911:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020914:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0020918:	89 e8                	mov    eax,ebp
c002091a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002091e:	c1 e8 10             	shr    eax,0x10
c0020921:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020924:	89 e8                	mov    eax,ebp
c0020926:	c1 e8 18             	shr    eax,0x18
c0020929:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002092c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020930:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020933:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020937:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002093a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002093e:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020942:	89 d6                	mov    esi,edx
c0020944:	31 c0                	xor    eax,eax
c0020946:	c1 e6 07             	shl    esi,0x7
c0020949:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002094d:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020953:	80 e1 88             	and    cl,0x88
c0020956:	74 0a                	je     c0020962 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020958:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002095d:	74 0a                	je     c0020969 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002095f:	40                   	inc    eax
c0020960:	eb eb                	jmp    c002094d <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020962:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020967:	75 0a                	jne    c0020973 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020969:	83 ec 0c             	sub    esp,0xc
c002096c:	68 d9 5f 02 c0       	push   0xc0025fd9
c0020971:	eb 36                	jmp    c00209a9 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c0020973:	b8 01 00 00 00       	mov    eax,0x1
c0020978:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002097c:	c1 e2 07             	shl    edx,0x7
c002097f:	d3 e0                	shl    eax,cl
c0020981:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0020985:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002098b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020991:	85 c8                	test   eax,ecx
c0020993:	74 25                	je     c00209ba <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0020995:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002099b:	0f ba e1 1e          	bt     ecx,0x1e
c002099f:	73 ea                	jae    c002098b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c00209a1:	83 ec 0c             	sub    esp,0xc
c00209a4:	68 e7 5f 02 c0       	push   0xc0025fe7
c00209a9:	e8 ce 65 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c00209ae:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209b5:	83 c4 10             	add    esp,0x10
c00209b8:	eb 13                	jmp    c00209cd <SATA::access(unsigned long long, int, void*, bool)+0x243>
c00209ba:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00209c0:	0f ba e0 1e          	bt     eax,0x1e
c00209c4:	73 18                	jae    c00209de <SATA::access(unsigned long long, int, void*, bool)+0x254>
c00209c6:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209cd:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00209d4:	75 01                	jne    c00209d7 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c00209d6:	fb                   	sti    
c00209d7:	b8 01 00 00 00       	mov    eax,0x1
c00209dc:	eb 2c                	jmp    c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00209de:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209e3:	75 10                	jne    c00209f5 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c00209e5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00209eb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00209ef:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00209f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209f5:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00209fc:	a1 70 ca 02 c0       	mov    eax,ds:0xc002ca70
c0020a01:	85 c0                	test   eax,eax
c0020a03:	75 03                	jne    c0020a08 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020a05:	fb                   	sti    
c0020a06:	eb 02                	jmp    c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020a08:	31 c0                	xor    eax,eax
c0020a0a:	83 c4 2c             	add    esp,0x2c
c0020a0d:	5b                   	pop    ebx
c0020a0e:	5e                   	pop    esi
c0020a0f:	5f                   	pop    edi
c0020a10:	5d                   	pop    ebp
c0020a11:	c3                   	ret    

c0020a12 <SATA::read(unsigned long long, int, void*)>:
c0020a12:	57                   	push   edi
c0020a13:	b8 04 00 00 00       	mov    eax,0x4
c0020a18:	56                   	push   esi
c0020a19:	53                   	push   ebx
c0020a1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020a1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020a22:	8d 7a ff             	lea    edi,[edx-0x1]
c0020a25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020a29:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020a2d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020a33:	77 25                	ja     c0020a5a <SATA::read(unsigned long long, int, void*)+0x48>
c0020a35:	b8 06 00 00 00       	mov    eax,0x6
c0020a3a:	85 f6                	test   esi,esi
c0020a3c:	74 1c                	je     c0020a5a <SATA::read(unsigned long long, int, void*)+0x48>
c0020a3e:	50                   	push   eax
c0020a3f:	50                   	push   eax
c0020a40:	6a 00                	push   0x0
c0020a42:	56                   	push   esi
c0020a43:	52                   	push   edx
c0020a44:	53                   	push   ebx
c0020a45:	51                   	push   ecx
c0020a46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020a4a:	e8 3b fd ff ff       	call   c002078a <SATA::access(unsigned long long, int, void*, bool)>
c0020a4f:	83 c4 20             	add    esp,0x20
c0020a52:	85 c0                	test   eax,eax
c0020a54:	0f 95 c0             	setne  al
c0020a57:	0f b6 c0             	movzx  eax,al
c0020a5a:	5b                   	pop    ebx
c0020a5b:	5e                   	pop    esi
c0020a5c:	5f                   	pop    edi
c0020a5d:	c3                   	ret    

c0020a5e <SATA::write(unsigned long long, int, void*)>:
c0020a5e:	55                   	push   ebp
c0020a5f:	b8 04 00 00 00       	mov    eax,0x4
c0020a64:	57                   	push   edi
c0020a65:	56                   	push   esi
c0020a66:	53                   	push   ebx
c0020a67:	83 ec 0c             	sub    esp,0xc
c0020a6a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a6e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020a72:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020a75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020a79:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a7d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020a83:	77 3d                	ja     c0020ac2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020a85:	b8 06 00 00 00       	mov    eax,0x6
c0020a8a:	85 ed                	test   ebp,ebp
c0020a8c:	74 34                	je     c0020ac2 <SATA::write(unsigned long long, int, void*)+0x64>
c0020a8e:	c1 e3 09             	shl    ebx,0x9
c0020a91:	01 eb                	add    ebx,ebp
c0020a93:	89 d6                	mov    esi,edx
c0020a95:	89 cf                	mov    edi,ecx
c0020a97:	83 c6 01             	add    esi,0x1
c0020a9a:	83 d7 00             	adc    edi,0x0
c0020a9d:	50                   	push   eax
c0020a9e:	50                   	push   eax
c0020a9f:	6a 01                	push   0x1
c0020aa1:	55                   	push   ebp
c0020aa2:	81 c5 00 02 00 00    	add    ebp,0x200
c0020aa8:	6a 01                	push   0x1
c0020aaa:	51                   	push   ecx
c0020aab:	52                   	push   edx
c0020aac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ab0:	e8 d5 fc ff ff       	call   c002078a <SATA::access(unsigned long long, int, void*, bool)>
c0020ab5:	83 c4 20             	add    esp,0x20
c0020ab8:	89 f2                	mov    edx,esi
c0020aba:	89 f9                	mov    ecx,edi
c0020abc:	39 dd                	cmp    ebp,ebx
c0020abe:	75 d3                	jne    c0020a93 <SATA::write(unsigned long long, int, void*)+0x35>
c0020ac0:	31 c0                	xor    eax,eax
c0020ac2:	83 c4 0c             	add    esp,0xc
c0020ac5:	5b                   	pop    ebx
c0020ac6:	5e                   	pop    esi
c0020ac7:	5f                   	pop    edi
c0020ac8:	5d                   	pop    ebp
c0020ac9:	c3                   	ret    

c0020aca <SATAPI::write(unsigned long long, int, void*)>:
c0020aca:	b8 03 00 00 00       	mov    eax,0x3
c0020acf:	c3                   	ret    

c0020ad0 <SATAPI::close(int, int, void*)>:
c0020ad0:	83 ec 0c             	sub    esp,0xc
c0020ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020add:	85 c0                	test   eax,eax
c0020adf:	74 0c                	je     c0020aed <SATAPI::close(int, int, void*)+0x1d>
c0020ae1:	83 ec 0c             	sub    esp,0xc
c0020ae4:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ae6:	50                   	push   eax
c0020ae7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020aea:	83 c4 10             	add    esp,0x10
c0020aed:	31 c0                	xor    eax,eax
c0020aef:	83 c4 0c             	add    esp,0xc
c0020af2:	c3                   	ret    
c0020af3:	90                   	nop

c0020af4 <SATAPI::SATAPI()>:
c0020af4:	83 ec 0c             	sub    esp,0xc
c0020af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afb:	83 ec 04             	sub    esp,0x4
c0020afe:	68 00 08 00 00       	push   0x800
c0020b03:	68 30 60 02 c0       	push   0xc0026030
c0020b08:	50                   	push   eax
c0020b09:	e8 28 93 fe ff       	call   c0009e36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b0e:	83 c4 10             	add    esp,0x10
c0020b11:	ba 24 61 02 c0       	mov    edx,0xc0026124
c0020b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b1a:	89 10                	mov    DWORD PTR [eax],edx
c0020b1c:	90                   	nop
c0020b1d:	83 c4 0c             	add    esp,0xc
c0020b20:	c3                   	ret    
c0020b21:	90                   	nop

c0020b22 <SATAPI::diskRemoved()>:
c0020b22:	c3                   	ret    
c0020b23:	90                   	nop

c0020b24 <SATAPI::diskInserted()>:
c0020b24:	83 ec 18             	sub    esp,0x18
c0020b27:	68 3c 60 02 c0       	push   0xc002603c
c0020b2c:	e8 4b 64 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b35:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020b3c:	83 c4 1c             	add    esp,0x1c
c0020b3f:	c3                   	ret    

c0020b40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020b40:	55                   	push   ebp
c0020b41:	57                   	push   edi
c0020b42:	56                   	push   esi
c0020b43:	53                   	push   ebx
c0020b44:	83 ec 34             	sub    esp,0x34
c0020b47:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020b4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020b4f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020b53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020b5b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020b61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b6b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020b71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b75:	83 c0 02             	add    eax,0x2
c0020b78:	c1 e0 07             	shl    eax,0x7
c0020b7b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b87:	c1 e0 07             	shl    eax,0x7
c0020b8a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b92:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020b9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020ba0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020ba6:	e8 5f ea ff ff       	call   c001f60a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020baf:	83 c4 10             	add    esp,0x10
c0020bb2:	b8 01 00 00 00       	mov    eax,0x1
c0020bb7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020bbc:	0f 84 57 02 00 00    	je     c0020e19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020bc2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020bce:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020bd4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020bda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bde:	c1 e1 05             	shl    ecx,0x5
c0020be1:	01 c8                	add    eax,ecx
c0020be3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020be5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020beb:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020bf1:	89 08                	mov    DWORD PTR [eax],ecx
c0020bf3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020bf9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020bff:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020c05:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020c08:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020c0b:	50                   	push   eax
c0020c0c:	68 90 00 00 00       	push   0x90
c0020c11:	6a 00                	push   0x0
c0020c13:	53                   	push   ebx
c0020c14:	e8 d7 f8 fd ff       	call   c00004f0 <memset>
c0020c19:	b9 0c 00 00 00       	mov    ecx,0xc
c0020c1e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020c22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c24:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020c2a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020c2e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020c34:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020c38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020c3c:	48                   	dec    eax
c0020c3d:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c42:	89 c1                	mov    ecx,eax
c0020c44:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020c4a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c4f:	09 c8                	or     eax,ecx
c0020c51:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020c57:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020c5d:	83 c8 80             	or     eax,0xffffff80
c0020c60:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020c66:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020c69:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c6d:	25 00 7f 00 00       	and    eax,0x7f00
c0020c72:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020c76:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020c7b:	66 89 03             	mov    WORD PTR [ebx],ax
c0020c7e:	89 d0                	mov    eax,edx
c0020c80:	c1 ea 18             	shr    edx,0x18
c0020c83:	c1 e8 10             	shr    eax,0x10
c0020c86:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020c89:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020c8c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020c90:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020c93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c97:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020c9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020c9e:	83 c4 10             	add    esp,0x10
c0020ca1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020ca5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ca9:	31 c0                	xor    eax,eax
c0020cab:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020cb1:	80 e1 88             	and    cl,0x88
c0020cb4:	74 0a                	je     c0020cc0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020cb6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cbb:	74 0a                	je     c0020cc7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020cbd:	40                   	inc    eax
c0020cbe:	eb eb                	jmp    c0020cab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020cc0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cc5:	75 43                	jne    c0020d0a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020cc7:	83 ec 0c             	sub    esp,0xc
c0020cca:	68 54 60 02 c0       	push   0xc0026054
c0020ccf:	e8 a8 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020cd4:	58                   	pop    eax
c0020cd5:	5a                   	pop    edx
c0020cd6:	68 69 60 02 c0       	push   0xc0026069
c0020cdb:	ff 35 f4 c1 02 c0    	push   DWORD PTR ds:0xc002c1f4
c0020ce1:	e8 26 1a ff ff       	call   c001270c <VgaText::puts(char const*)>
c0020ce6:	59                   	pop    ecx
c0020ce7:	5b                   	pop    ebx
c0020ce8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020cec:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020cf2:	e8 ad e9 ff ff       	call   c001f6a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020cf7:	5e                   	pop    esi
c0020cf8:	5f                   	pop    edi
c0020cf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020cfd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d03:	e8 7c e9 ff ff       	call   c001f684 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020d08:	eb 48                	jmp    c0020d52 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020d0a:	be 01 00 00 00       	mov    esi,0x1
c0020d0f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020d13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d17:	d3 e6                	shl    esi,cl
c0020d19:	c1 e7 07             	shl    edi,0x7
c0020d1c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020d22:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c0020d27:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020d2b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020d31:	85 c6                	test   esi,eax
c0020d33:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020d39:	0f 84 a7 00 00 00    	je     c0020de6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c0020d3f:	0f ba e0 1e          	bt     eax,0x1e
c0020d43:	73 1a                	jae    c0020d5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c0020d45:	83 ec 0c             	sub    esp,0xc
c0020d48:	68 7b 60 02 c0       	push   0xc002607b
c0020d4d:	e8 2a 62 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020d52:	83 c4 10             	add    esp,0x10
c0020d55:	b8 01 00 00 00       	mov    eax,0x1
c0020d5a:	e9 ba 00 00 00       	jmp    c0020e19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c0020d5f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c0020d65:	83 f8 0d             	cmp    eax,0xd
c0020d68:	77 0b                	ja     c0020d75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020d6a:	50                   	push   eax
c0020d6b:	50                   	push   eax
c0020d6c:	6a 00                	push   0x0
c0020d6e:	68 c8 00 00 00       	push   0xc8
c0020d73:	eb 2a                	jmp    c0020d9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020d75:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020d7b:	83 f8 0d             	cmp    eax,0xd
c0020d7e:	77 0b                	ja     c0020d8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0020d80:	51                   	push   ecx
c0020d81:	51                   	push   ecx
c0020d82:	6a 00                	push   0x0
c0020d84:	68 58 02 00 00       	push   0x258
c0020d89:	eb 14                	jmp    c0020d9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020d8b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020d91:	83 f8 06             	cmp    eax,0x6
c0020d94:	77 11                	ja     c0020da7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0020d96:	52                   	push   edx
c0020d97:	52                   	push   edx
c0020d98:	6a 00                	push   0x0
c0020d9a:	68 dc 05 00 00       	push   0x5dc
c0020d9f:	e8 70 62 ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0020da4:	83 c4 10             	add    esp,0x10
c0020da7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020dab:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020dae:	75 06                	jne    c0020db6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0020db0:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0020db4:	74 16                	je     c0020dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020db6:	83 fb 06             	cmp    ebx,0x6
c0020db9:	77 11                	ja     c0020dcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020dbb:	50                   	push   eax
c0020dbc:	50                   	push   eax
c0020dbd:	6a 00                	push   0x0
c0020dbf:	68 c4 09 00 00       	push   0x9c4
c0020dc4:	e8 4b 62 ff ff       	call   c0017014 <milliTenthSleep(unsigned long long)>
c0020dc9:	83 c4 10             	add    esp,0x10
c0020dcc:	43                   	inc    ebx
c0020dcd:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0020dd3:	0f 85 52 ff ff ff    	jne    c0020d2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020dd9:	83 ec 0c             	sub    esp,0xc
c0020ddc:	68 8e 60 02 c0       	push   0xc002608e
c0020de1:	e9 67 ff ff ff       	jmp    c0020d4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020de6:	0f ba e0 1e          	bt     eax,0x1e
c0020dea:	73 0d                	jae    c0020df9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020dec:	83 ec 0c             	sub    esp,0xc
c0020def:	68 a2 60 02 c0       	push   0xc00260a2
c0020df4:	e9 54 ff ff ff       	jmp    c0020d4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020df9:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020dfe:	74 17                	je     c0020e17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020e00:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020e05:	74 10                	je     c0020e17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020e07:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020e0d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020e11:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020e15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e17:	31 c0                	xor    eax,eax
c0020e19:	83 c4 2c             	add    esp,0x2c
c0020e1c:	5b                   	pop    ebx
c0020e1d:	5e                   	pop    esi
c0020e1e:	5f                   	pop    edi
c0020e1f:	5d                   	pop    ebp
c0020e20:	c3                   	ret    
c0020e21:	90                   	nop

c0020e22 <SATAPI::eject()>:
c0020e22:	57                   	push   edi
c0020e23:	b9 03 00 00 00       	mov    ecx,0x3
c0020e28:	83 ec 18             	sub    esp,0x18
c0020e2b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020e2f:	fc                   	cld    
c0020e30:	31 c0                	xor    eax,eax
c0020e32:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e34:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e39:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020e3e:	50                   	push   eax
c0020e3f:	6a 00                	push   0x0
c0020e41:	6a 00                	push   0x0
c0020e43:	6a 00                	push   0x0
c0020e45:	6a 00                	push   0x0
c0020e47:	6a 02                	push   0x2
c0020e49:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e4d:	50                   	push   eax
c0020e4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020e52:	e8 e9 fc ff ff       	call   c0020b40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e57:	31 c0                	xor    eax,eax
c0020e59:	83 c4 38             	add    esp,0x38
c0020e5c:	5f                   	pop    edi
c0020e5d:	c3                   	ret    

c0020e5e <SATAPI::detectMedia()>:
c0020e5e:	53                   	push   ebx
c0020e5f:	83 ec 14             	sub    esp,0x14
c0020e62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020e66:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020e6c:	e8 9b a5 fe ff       	call   c000b40c <VCache::writeWriteBuffer()>
c0020e71:	59                   	pop    ecx
c0020e72:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020e78:	e8 7f a5 fe ff       	call   c000b3fc <VCache::invalidateReadBuffer()>
c0020e7d:	c7 04 24 b7 60 02 c0 	mov    DWORD PTR [esp],0xc00260b7
c0020e84:	e8 f3 60 fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020e89:	83 c4 10             	add    esp,0x10
c0020e8c:	31 c0                	xor    eax,eax
c0020e8e:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c0020e95:	85 d2                	test   edx,edx
c0020e97:	74 0f                	je     c0020ea8 <SATAPI::detectMedia()+0x4a>
c0020e99:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020e9f:	75 07                	jne    c0020ea8 <SATAPI::detectMedia()+0x4a>
c0020ea1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020ea8:	40                   	inc    eax
c0020ea9:	83 f8 1a             	cmp    eax,0x1a
c0020eac:	75 e0                	jne    c0020e8e <SATAPI::detectMedia()+0x30>
c0020eae:	83 c4 08             	add    esp,0x8
c0020eb1:	5b                   	pop    ebx
c0020eb2:	c3                   	ret    
c0020eb3:	90                   	nop

c0020eb4 <SATAPI::open(int, int, void*)>:
c0020eb4:	56                   	push   esi
c0020eb5:	53                   	push   ebx
c0020eb6:	51                   	push   ecx
c0020eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ebf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020ec9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020ecf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020ed9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020edd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020ee7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020eed:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020ef4:	e8 ef ef fe ff       	call   c000fee8 <Phys::allocatePage()>
c0020ef9:	89 c6                	mov    esi,eax
c0020efb:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020f01:	81 c6 00 10 00 00    	add    esi,0x1000
c0020f07:	e8 dc ef fe ff       	call   c000fee8 <Phys::allocatePage()>
c0020f0c:	39 c6                	cmp    esi,eax
c0020f0e:	74 10                	je     c0020f20 <SATAPI::open(int, int, void*)+0x6c>
c0020f10:	83 ec 0c             	sub    esp,0xc
c0020f13:	68 cc 60 02 c0       	push   0xc00260cc
c0020f18:	e8 d7 ed fe ff       	call   c000fcf4 <KePanic(char const*)>
c0020f1d:	83 c4 10             	add    esp,0x10
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	6a 02                	push   0x2
c0020f25:	e8 0d 24 ff ff       	call   c0013337 <Virt::allocateKernelVirtualPages(int)>
c0020f2a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020f30:	6a 03                	push   0x3
c0020f32:	50                   	push   eax
c0020f33:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020f39:	ff 35 90 c2 02 c0    	push   DWORD PTR ds:0xc002c290
c0020f3f:	e8 d6 2a ff ff       	call   c0013a1a <VAS::mapPage(unsigned long, unsigned long, int)>
c0020f44:	83 c4 14             	add    esp,0x14
c0020f47:	68 78 01 00 00       	push   0x178
c0020f4c:	e8 46 e9 fe ff       	call   c000f897 <malloc>
c0020f51:	83 c4 0c             	add    esp,0xc
c0020f54:	89 c6                	mov    esi,eax
c0020f56:	6a 00                	push   0x0
c0020f58:	68 ff ff ff 7f       	push   0x7fffffff
c0020f5d:	6a 00                	push   0x0
c0020f5f:	6a 00                	push   0x0
c0020f61:	53                   	push   ebx
c0020f62:	68 e2 60 02 c0       	push   0xc00260e2
c0020f67:	50                   	push   eax
c0020f68:	e8 ff 98 fe ff       	call   c000a86c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020f6d:	83 c4 14             	add    esp,0x14
c0020f70:	56                   	push   esi
c0020f71:	e8 b6 99 fe ff       	call   c000a92c <LogicalDisk::assignDriveLetter()>
c0020f76:	5a                   	pop    edx
c0020f77:	0f be c0             	movsx  eax,al
c0020f7a:	59                   	pop    ecx
c0020f7b:	50                   	push   eax
c0020f7c:	68 28 5f 02 c0       	push   0xc0025f28
c0020f81:	e8 f6 5f fe ff       	call   c0006f7c <Dbg::kprintf(char const*, ...)>
c0020f86:	58                   	pop    eax
c0020f87:	5a                   	pop    edx
c0020f88:	56                   	push   esi
c0020f89:	53                   	push   ebx
c0020f8a:	e8 c5 8a fe ff       	call   c0009a54 <Device::addChild(Device*)>
c0020f8f:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020f95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020f98:	e8 01 8f fe ff       	call   c0009e9e <PhysicalDisk::startCache()>
c0020f9d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020fa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020fa7:	e8 b2 fe ff ff       	call   c0020e5e <SATAPI::detectMedia()>
c0020fac:	83 c4 14             	add    esp,0x14
c0020faf:	31 c0                	xor    eax,eax
c0020fb1:	5b                   	pop    ebx
c0020fb2:	5e                   	pop    esi
c0020fb3:	c3                   	ret    

c0020fb4 <SATAPI::read(unsigned long long, int, void*)>:
c0020fb4:	57                   	push   edi
c0020fb5:	56                   	push   esi
c0020fb6:	53                   	push   ebx
c0020fb7:	83 ec 30             	sub    esp,0x30
c0020fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020fbe:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0020fc2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020fc6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020fca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020fce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020fd2:	83 fe 04             	cmp    esi,0x4
c0020fd5:	7e 10                	jle    c0020fe7 <SATAPI::read(unsigned long long, int, void*)+0x33>
c0020fd7:	83 ec 0c             	sub    esp,0xc
c0020fda:	68 f0 60 02 c0       	push   0xc00260f0
c0020fdf:	e8 10 ed fe ff       	call   c000fcf4 <KePanic(char const*)>
c0020fe4:	83 c4 10             	add    esp,0x10
c0020fe7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020fed:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020ff3:	51                   	push   ecx
c0020ff4:	50                   	push   eax
c0020ff5:	83 c0 02             	add    eax,0x2
c0020ff8:	c1 e0 07             	shl    eax,0x7
c0020ffb:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0021001:	50                   	push   eax
c0021002:	52                   	push   edx
c0021003:	e8 c6 e6 ff ff       	call   c001f6ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0021008:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002100c:	b9 03 00 00 00       	mov    ecx,0x3
c0021011:	fc                   	cld    
c0021012:	31 c0                	xor    eax,eax
c0021014:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021016:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002101b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0021020:	83 c4 0c             	add    esp,0xc
c0021023:	6a 00                	push   0x0
c0021025:	6a 00                	push   0x0
c0021027:	6a 00                	push   0x0
c0021029:	6a 00                	push   0x0
c002102b:	6a 02                	push   0x2
c002102d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021031:	50                   	push   eax
c0021032:	53                   	push   ebx
c0021033:	e8 08 fb ff ff       	call   c0020b40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021038:	83 c4 20             	add    esp,0x20
c002103b:	85 c0                	test   eax,eax
c002103d:	75 44                	jne    c0021083 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002103f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021043:	b9 03 00 00 00       	mov    ecx,0x3
c0021048:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002104a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002104e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0021053:	0f c8                	bswap  eax
c0021055:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021059:	89 f0                	mov    eax,esi
c002105b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002105f:	50                   	push   eax
c0021060:	56                   	push   esi
c0021061:	c1 e6 0b             	shl    esi,0xb
c0021064:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0021068:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002106c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021070:	56                   	push   esi
c0021071:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021075:	50                   	push   eax
c0021076:	53                   	push   ebx
c0021077:	e8 c4 fa ff ff       	call   c0020b40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002107c:	83 c4 20             	add    esp,0x20
c002107f:	85 c0                	test   eax,eax
c0021081:	74 14                	je     c0021097 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0021083:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021087:	83 ec 0c             	sub    esp,0xc
c002108a:	53                   	push   ebx
c002108b:	e8 ce fd ff ff       	call   c0020e5e <SATAPI::detectMedia()>
c0021090:	83 c4 10             	add    esp,0x10
c0021093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021097:	83 c4 30             	add    esp,0x30
c002109a:	5b                   	pop    ebx
c002109b:	5e                   	pop    esi
c002109c:	5f                   	pop    edi
c002109d:	c3                   	ret    
c002109e:	66 90                	xchg   ax,ax

c00210a0 <APICTimer::close(int, int, void*)>:
c00210a0:	b8 00 00 00 00       	mov    eax,0x0
c00210a5:	c3                   	ret    
c00210a6:	66 90                	xchg   ax,ax

c00210a8 <apicTimerHandler(regs*, void*)>:
c00210a8:	83 ec 0c             	sub    esp,0xc
c00210ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00210b1:	b8 10 27 00 00       	mov    eax,0x2710
c00210b6:	ba 00 00 00 00       	mov    edx,0x0
c00210bb:	f7 f1                	div    ecx
c00210bd:	83 ec 0c             	sub    esp,0xc
c00210c0:	50                   	push   eax
c00210c1:	e8 62 a0 fe ff       	call   c000b128 <timerHandler(unsigned int)>
c00210c6:	83 c4 10             	add    esp,0x10
c00210c9:	90                   	nop
c00210ca:	83 c4 0c             	add    esp,0xc
c00210cd:	c3                   	ret    
c00210ce:	66 90                	xchg   ax,ax

c00210d0 <APICTimer::open(int, int, void*)>:
c00210d0:	83 ec 0c             	sub    esp,0xc
c00210d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00210d9:	83 c0 24             	add    eax,0x24
c00210dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00210de:	83 ec 08             	sub    esp,0x8
c00210e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210e9:	ff d0                	call   eax
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00210f6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00210fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021100:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021104:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002110a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002110e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021114:	83 ec 0c             	sub    esp,0xc
c0021117:	51                   	push   ecx
c0021118:	6a 01                	push   0x1
c002111a:	68 a8 10 02 c0       	push   0xc00210a8
c002111f:	52                   	push   edx
c0021120:	50                   	push   eax
c0021121:	e8 da 88 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021126:	83 c4 20             	add    esp,0x20
c0021129:	89 c2                	mov    edx,eax
c002112b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002112f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021135:	b8 00 00 00 00       	mov    eax,0x0
c002113a:	83 c4 0c             	add    esp,0xc
c002113d:	c3                   	ret    
c002113e:	66 90                	xchg   ax,ax

c0021140 <APICTimer::write(int)>:
c0021140:	83 ec 0c             	sub    esp,0xc
c0021143:	83 ec 0c             	sub    esp,0xc
c0021146:	68 54 61 02 c0       	push   0xc0026154
c002114b:	e8 a4 eb fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021150:	83 c4 10             	add    esp,0x10
c0021153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002115b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021161:	90                   	nop
c0021162:	83 c4 0c             	add    esp,0xc
c0021165:	c3                   	ret    
c0021166:	66 90                	xchg   ax,ax

c0021168 <APICTimer::APICTimer()>:
c0021168:	83 ec 0c             	sub    esp,0xc
c002116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116f:	83 ec 08             	sub    esp,0x8
c0021172:	68 64 61 02 c0       	push   0xc0026164
c0021177:	50                   	push   eax
c0021178:	e8 df 9e fe ff       	call   c000b05c <Timer::Timer(char const*)>
c002117d:	83 c4 10             	add    esp,0x10
c0021180:	ba 78 61 02 c0       	mov    edx,0xc0026178
c0021185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021189:	89 10                	mov    DWORD PTR [eax],edx
c002118b:	90                   	nop
c002118c:	83 c4 0c             	add    esp,0xc
c002118f:	c3                   	ret    

c0021190 <PIT::write(int)>:
c0021190:	83 ec 10             	sub    esp,0x10
c0021193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021197:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002119b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00211a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211a5:	a3 f8 f4 02 c0       	mov    ds:0xc002f4f8,eax
c00211aa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00211af:	89 c2                	mov    edx,eax
c00211b1:	c1 fa 1f             	sar    edx,0x1f
c00211b4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00211b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211bc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00211c3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00211c8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00211cc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00211d1:	ee                   	out    dx,al
c00211d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211d6:	0f b6 c0             	movzx  eax,al
c00211d9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00211e0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00211e4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00211e8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00211ed:	ee                   	out    dx,al
c00211ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211f2:	c1 f8 08             	sar    eax,0x8
c00211f5:	0f b6 c0             	movzx  eax,al
c00211f8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00211ff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0021203:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021207:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002120c:	ee                   	out    dx,al
c002120d:	90                   	nop
c002120e:	83 c4 10             	add    esp,0x10
c0021211:	c3                   	ret    
c0021212:	66 90                	xchg   ax,ax

c0021214 <pitHandler(regs*, void*)>:
c0021214:	83 ec 0c             	sub    esp,0xc
c0021217:	8b 0d f8 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4f8
c002121d:	b8 10 27 00 00       	mov    eax,0x2710
c0021222:	89 c2                	mov    edx,eax
c0021224:	c1 fa 1f             	sar    edx,0x1f
c0021227:	f7 f9                	idiv   ecx
c0021229:	83 ec 0c             	sub    esp,0xc
c002122c:	50                   	push   eax
c002122d:	e8 f6 9e fe ff       	call   c000b128 <timerHandler(unsigned int)>
c0021232:	83 c4 10             	add    esp,0x10
c0021235:	90                   	nop
c0021236:	83 c4 0c             	add    esp,0xc
c0021239:	c3                   	ret    
c002123a:	66 90                	xchg   ax,ax

c002123c <PIT::open(int, int, void*)>:
c002123c:	83 ec 0c             	sub    esp,0xc
c002123f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021243:	8b 00                	mov    eax,DWORD PTR [eax]
c0021245:	83 c0 24             	add    eax,0x24
c0021248:	8b 00                	mov    eax,DWORD PTR [eax]
c002124a:	83 ec 08             	sub    esp,0x8
c002124d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021255:	ff d0                	call   eax
c0021257:	83 c4 10             	add    esp,0x10
c002125a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002125e:	83 ec 0c             	sub    esp,0xc
c0021261:	6a 00                	push   0x0
c0021263:	6a 01                	push   0x1
c0021265:	68 14 12 02 c0       	push   0xc0021214
c002126a:	6a 00                	push   0x0
c002126c:	50                   	push   eax
c002126d:	e8 8e 87 fe ff       	call   c0009a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021272:	83 c4 20             	add    esp,0x20
c0021275:	89 c2                	mov    edx,eax
c0021277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002127b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021281:	b8 00 00 00 00       	mov    eax,0x0
c0021286:	83 c4 0c             	add    esp,0xc
c0021289:	c3                   	ret    
c002128a:	66 90                	xchg   ax,ax

c002128c <PIT::close(int, int, void*)>:
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021293:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002129d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a1:	6a 01                	push   0x1
c00212a3:	68 14 12 02 c0       	push   0xc0021214
c00212a8:	6a 00                	push   0x0
c00212aa:	50                   	push   eax
c00212ab:	e8 86 87 fe ff       	call   c0009a36 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	b8 00 00 00 00       	mov    eax,0x0
c00212b8:	83 c4 0c             	add    esp,0xc
c00212bb:	c3                   	ret    

c00212bc <PIT::PIT()>:
c00212bc:	83 ec 0c             	sub    esp,0xc
c00212bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c3:	83 ec 08             	sub    esp,0x8
c00212c6:	68 a0 61 02 c0       	push   0xc00261a0
c00212cb:	50                   	push   eax
c00212cc:	e8 8b 9d fe ff       	call   c000b05c <Timer::Timer(char const*)>
c00212d1:	83 c4 10             	add    esp,0x10
c00212d4:	ba c8 61 02 c0       	mov    edx,0xc00261c8
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	89 10                	mov    DWORD PTR [eax],edx
c00212df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00212e9:	0f b6 d0             	movzx  edx,al
c00212ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00212f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021301:	0f b6 d0             	movzx  edx,al
c0021304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021308:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002130d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021311:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021317:	8d 50 01             	lea    edx,[eax+0x1]
c002131a:	88 d1                	mov    cl,dl
c002131c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021320:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021326:	0f b6 d0             	movzx  edx,al
c0021329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021331:	83 e1 3f             	and    ecx,0x3f
c0021334:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021338:	90                   	nop
c0021339:	83 c4 0c             	add    esp,0xc
c002133c:	c3                   	ret    
c002133d:	66 90                	xchg   ax,ax
c002133f:	90                   	nop

c0021340 <avxDetect>:
c0021340:	b8 01 00 00 00       	mov    eax,0x1
c0021345:	0f a2                	cpuid  
c0021347:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002134d:	74 15                	je     c0021364 <avxDetect.noAVX>
c002134f:	b8 01 00 00 00       	mov    eax,0x1
c0021354:	0f a2                	cpuid  
c0021356:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002135c:	74 06                	je     c0021364 <avxDetect.noAVX>
c002135e:	b8 01 00 00 00       	mov    eax,0x1
c0021363:	c3                   	ret    

c0021364 <avxDetect.noAVX>:
c0021364:	b8 00 00 00 00       	mov    eax,0x0
c0021369:	c3                   	ret    

c002136a <avxSave>:
c002136a:	53                   	push   ebx
c002136b:	52                   	push   edx
c002136c:	31 c0                	xor    eax,eax
c002136e:	48                   	dec    eax
c002136f:	89 c2                	mov    edx,eax
c0021371:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021375:	0f ae 23             	xsave  [ebx]
c0021378:	5a                   	pop    edx
c0021379:	5b                   	pop    ebx
c002137a:	c3                   	ret    

c002137b <avxLoad>:
c002137b:	53                   	push   ebx
c002137c:	52                   	push   edx
c002137d:	31 c0                	xor    eax,eax
c002137f:	48                   	dec    eax
c0021380:	89 c2                	mov    edx,eax
c0021382:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021386:	0f ae 2b             	xrstor [ebx]
c0021389:	5a                   	pop    edx
c002138a:	5b                   	pop    ebx
c002138b:	c3                   	ret    

c002138c <avxInit>:
c002138c:	e8 17 03 00 00       	call   c00216a8 <sseInit>
c0021391:	50                   	push   eax
c0021392:	51                   	push   ecx
c0021393:	0f 20 e0             	mov    eax,cr4
c0021396:	0d 00 00 04 00       	or     eax,0x40000
c002139b:	0f 22 e0             	mov    cr4,eax
c002139e:	31 c9                	xor    ecx,ecx
c00213a0:	0f 01 d0             	xgetbv 
c00213a3:	0d 07 00 00 00       	or     eax,0x7
c00213a8:	0f 01 d1             	xsetbv 
c00213ab:	59                   	pop    ecx
c00213ac:	58                   	pop    eax
c00213ad:	c3                   	ret    

c00213ae <avxClose>:
c00213ae:	c3                   	ret    
c00213af:	90                   	nop

c00213b0 <isr0>:
c00213b0:	fa                   	cli    
c00213b1:	68 00 00 00 00       	push   0x0
c00213b6:	68 00 00 00 00       	push   0x0
c00213bb:	e9 56 01 00 00       	jmp    c0021516 <int_common_stub>

c00213c0 <isr1>:
c00213c0:	fa                   	cli    
c00213c1:	6a 00                	push   0x0
c00213c3:	6a 01                	push   0x1
c00213c5:	e9 4c 01 00 00       	jmp    c0021516 <int_common_stub>

c00213ca <isr2>:
c00213ca:	fa                   	cli    
c00213cb:	6a 00                	push   0x0
c00213cd:	6a 02                	push   0x2
c00213cf:	e9 42 01 00 00       	jmp    c0021516 <int_common_stub>

c00213d4 <isr3>:
c00213d4:	fa                   	cli    
c00213d5:	6a 00                	push   0x0
c00213d7:	6a 03                	push   0x3
c00213d9:	e9 38 01 00 00       	jmp    c0021516 <int_common_stub>

c00213de <isr4>:
c00213de:	fa                   	cli    
c00213df:	6a 00                	push   0x0
c00213e1:	6a 04                	push   0x4
c00213e3:	e9 2e 01 00 00       	jmp    c0021516 <int_common_stub>

c00213e8 <isr5>:
c00213e8:	fa                   	cli    
c00213e9:	6a 00                	push   0x0
c00213eb:	6a 05                	push   0x5
c00213ed:	e9 24 01 00 00       	jmp    c0021516 <int_common_stub>

c00213f2 <isr6>:
c00213f2:	fa                   	cli    
c00213f3:	6a 00                	push   0x0
c00213f5:	6a 06                	push   0x6
c00213f7:	e9 1a 01 00 00       	jmp    c0021516 <int_common_stub>

c00213fc <isr7>:
c00213fc:	fa                   	cli    
c00213fd:	6a 00                	push   0x0
c00213ff:	6a 07                	push   0x7
c0021401:	e9 10 01 00 00       	jmp    c0021516 <int_common_stub>

c0021406 <isr8>:
c0021406:	fa                   	cli    
c0021407:	6a 08                	push   0x8
c0021409:	e9 08 01 00 00       	jmp    c0021516 <int_common_stub>

c002140e <isr9>:
c002140e:	fa                   	cli    
c002140f:	6a 00                	push   0x0
c0021411:	6a 09                	push   0x9
c0021413:	e9 fe 00 00 00       	jmp    c0021516 <int_common_stub>

c0021418 <isr10>:
c0021418:	fa                   	cli    
c0021419:	6a 0a                	push   0xa
c002141b:	e9 f6 00 00 00       	jmp    c0021516 <int_common_stub>

c0021420 <isr11>:
c0021420:	fa                   	cli    
c0021421:	6a 0b                	push   0xb
c0021423:	e9 ee 00 00 00       	jmp    c0021516 <int_common_stub>

c0021428 <isr12>:
c0021428:	fa                   	cli    
c0021429:	6a 0c                	push   0xc
c002142b:	e9 e6 00 00 00       	jmp    c0021516 <int_common_stub>

c0021430 <isr13>:
c0021430:	fa                   	cli    
c0021431:	6a 0d                	push   0xd
c0021433:	53                   	push   ebx
c0021434:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021438:	81 fb d5 15 02 c0    	cmp    ebx,0xc00215d5
c002143e:	5b                   	pop    ebx
c002143f:	0f 84 92 01 00 00    	je     c00215d7 <finishSignal2>
c0021445:	e9 cc 00 00 00       	jmp    c0021516 <int_common_stub>

c002144a <isr14>:
c002144a:	fa                   	cli    
c002144b:	6a 0e                	push   0xe
c002144d:	e9 c4 00 00 00       	jmp    c0021516 <int_common_stub>

c0021452 <isr15>:
c0021452:	fa                   	cli    
c0021453:	6a 00                	push   0x0
c0021455:	6a 0f                	push   0xf
c0021457:	e9 ba 00 00 00       	jmp    c0021516 <int_common_stub>

c002145c <isr16>:
c002145c:	fa                   	cli    
c002145d:	6a 00                	push   0x0
c002145f:	6a 10                	push   0x10
c0021461:	e9 b0 00 00 00       	jmp    c0021516 <int_common_stub>

c0021466 <isr17>:
c0021466:	fa                   	cli    
c0021467:	6a 00                	push   0x0
c0021469:	6a 11                	push   0x11
c002146b:	e9 a6 00 00 00       	jmp    c0021516 <int_common_stub>

c0021470 <isr18>:
c0021470:	fa                   	cli    
c0021471:	6a 00                	push   0x0
c0021473:	6a 12                	push   0x12
c0021475:	e9 9c 00 00 00       	jmp    c0021516 <int_common_stub>

c002147a <irq3>:
c002147a:	fa                   	cli    
c002147b:	6a 00                	push   0x0
c002147d:	6a 23                	push   0x23
c002147f:	e9 92 00 00 00       	jmp    c0021516 <int_common_stub>

c0021484 <irq4>:
c0021484:	fa                   	cli    
c0021485:	6a 00                	push   0x0
c0021487:	6a 24                	push   0x24
c0021489:	e9 88 00 00 00       	jmp    c0021516 <int_common_stub>

c002148e <irq5>:
c002148e:	fa                   	cli    
c002148f:	6a 00                	push   0x0
c0021491:	6a 25                	push   0x25
c0021493:	e9 7e 00 00 00       	jmp    c0021516 <int_common_stub>

c0021498 <irq6>:
c0021498:	fa                   	cli    
c0021499:	6a 00                	push   0x0
c002149b:	6a 26                	push   0x26
c002149d:	e9 74 00 00 00       	jmp    c0021516 <int_common_stub>

c00214a2 <irq7>:
c00214a2:	fa                   	cli    
c00214a3:	6a 00                	push   0x0
c00214a5:	6a 27                	push   0x27
c00214a7:	e9 6a 00 00 00       	jmp    c0021516 <int_common_stub>

c00214ac <irq8>:
c00214ac:	fa                   	cli    
c00214ad:	6a 00                	push   0x0
c00214af:	6a 28                	push   0x28
c00214b1:	e9 60 00 00 00       	jmp    c0021516 <int_common_stub>

c00214b6 <irq9>:
c00214b6:	fa                   	cli    
c00214b7:	6a 00                	push   0x0
c00214b9:	6a 29                	push   0x29
c00214bb:	e9 56 00 00 00       	jmp    c0021516 <int_common_stub>

c00214c0 <irq10>:
c00214c0:	fa                   	cli    
c00214c1:	6a 00                	push   0x0
c00214c3:	6a 2a                	push   0x2a
c00214c5:	e9 4c 00 00 00       	jmp    c0021516 <int_common_stub>

c00214ca <irq11>:
c00214ca:	fa                   	cli    
c00214cb:	6a 00                	push   0x0
c00214cd:	6a 2b                	push   0x2b
c00214cf:	e9 42 00 00 00       	jmp    c0021516 <int_common_stub>

c00214d4 <irq12>:
c00214d4:	fa                   	cli    
c00214d5:	6a 00                	push   0x0
c00214d7:	6a 2c                	push   0x2c
c00214d9:	e9 38 00 00 00       	jmp    c0021516 <int_common_stub>

c00214de <irq13>:
c00214de:	fa                   	cli    
c00214df:	6a 00                	push   0x0
c00214e1:	6a 2d                	push   0x2d
c00214e3:	e9 2e 00 00 00       	jmp    c0021516 <int_common_stub>

c00214e8 <irq14>:
c00214e8:	fa                   	cli    
c00214e9:	6a 00                	push   0x0
c00214eb:	6a 2e                	push   0x2e
c00214ed:	e9 24 00 00 00       	jmp    c0021516 <int_common_stub>

c00214f2 <irq15>:
c00214f2:	fa                   	cli    
c00214f3:	6a 00                	push   0x0
c00214f5:	6a 2f                	push   0x2f
c00214f7:	e9 1a 00 00 00       	jmp    c0021516 <int_common_stub>

c00214fc <irq1>:
c00214fc:	fa                   	cli    
c00214fd:	6a 00                	push   0x0
c00214ff:	6a 21                	push   0x21
c0021501:	eb 13                	jmp    c0021516 <int_common_stub>

c0021503 <irq2>:
c0021503:	fa                   	cli    
c0021504:	6a 00                	push   0x0
c0021506:	6a 22                	push   0x22
c0021508:	eb 0c                	jmp    c0021516 <int_common_stub>

c002150a <isr96>:
c002150a:	6a 00                	push   0x0
c002150c:	6a 60                	push   0x60
c002150e:	fb                   	sti    
c002150f:	eb 05                	jmp    c0021516 <int_common_stub>

c0021511 <irq0>:
c0021511:	fa                   	cli    
c0021512:	6a 00                	push   0x0
c0021514:	6a 20                	push   0x20

c0021516 <int_common_stub>:
c0021516:	60                   	pusha  
c0021517:	1e                   	push   ds
c0021518:	06                   	push   es
c0021519:	0f a0                	push   fs
c002151b:	0f a8                	push   gs
c002151d:	66 b8 10 00          	mov    ax,0x10
c0021521:	66 8e d8             	mov    ds,ax
c0021524:	66 8e c0             	mov    es,ax
c0021527:	66 8e e0             	mov    fs,ax
c002152a:	66 8e e8             	mov    gs,ax
c002152d:	54                   	push   esp
c002152e:	fc                   	cld    
c002152f:	e8 50 95 ff ff       	call   c001aa84 <int_handler>
c0021534:	81 c4 04 00 00 00    	add    esp,0x4
c002153a:	0f a9                	pop    gs
c002153c:	0f a1                	pop    fs
c002153e:	07                   	pop    es
c002153f:	1f                   	pop    ds
c0021540:	e8 26 fc fe ff       	call   c001116b <KiCheckSignalZ>
c0021545:	85 c0                	test   eax,eax
c0021547:	75 08                	jne    c0021551 <doSignals>
c0021549:	61                   	popa   
c002154a:	81 c4 08 00 00 00    	add    esp,0x8
c0021550:	cf                   	iret   

c0021551 <doSignals>:
c0021551:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021556:	61                   	popa   
c0021557:	53                   	push   ebx
c0021558:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002155e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021561:	5b                   	pop    ebx
c0021562:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021567:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002156a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002156d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021570:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021573:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021576:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021579:	81 c4 08 00 00 00    	add    esp,0x8
c002157f:	5e                   	pop    esi
c0021580:	5b                   	pop    ebx
c0021581:	59                   	pop    ecx
c0021582:	5a                   	pop    edx
c0021583:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021586:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021589:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002158c:	52                   	push   edx
c002158d:	51                   	push   ecx
c002158e:	53                   	push   ebx
c002158f:	56                   	push   esi
c0021590:	81 ec 08 00 00 00    	sub    esp,0x8
c0021596:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021599:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002159c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002159f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00215a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00215a5:	60                   	pusha  
c00215a6:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c00215ac:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00215af:	89 e3                	mov    ebx,esp
c00215b1:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00215b4:	52                   	push   edx
c00215b5:	68 d5 15 02 c0       	push   0xc00215d5
c00215ba:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00215bd:	89 dc                	mov    esp,ebx
c00215bf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00215c2:	68 23 00 00 00       	push   0x23
c00215c7:	51                   	push   ecx
c00215c8:	68 02 02 00 00       	push   0x202
c00215cd:	68 1b 00 00 00       	push   0x1b
c00215d2:	ff 36                	push   DWORD PTR [esi]
c00215d4:	cf                   	iret   

c00215d5 <finishSignal>:
c00215d5:	cd 0f                	int    0xf

c00215d7 <finishSignal2>:
c00215d7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00215dd:	e8 15 fc fe ff       	call   c00111f7 <KiFinishSignalZ>
c00215e2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00215e8:	68 23 00 00 00       	push   0x23
c00215ed:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00215f0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00215f3:	68 1b 00 00 00       	push   0x1b
c00215f8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00215fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215fe:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0021601:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0021604:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021607:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002160a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002160d:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021610:	cf                   	iret   
c0021611:	90                   	nop
c0021612:	90                   	nop
c0021613:	90                   	nop

c0021614 <irq16>:
c0021614:	fa                   	cli    
c0021615:	6a 00                	push   0x0
c0021617:	6a 30                	push   0x30
c0021619:	e9 f8 fe ff ff       	jmp    c0021516 <int_common_stub>

c002161e <irq17>:
c002161e:	fa                   	cli    
c002161f:	6a 00                	push   0x0
c0021621:	6a 31                	push   0x31
c0021623:	e9 ee fe ff ff       	jmp    c0021516 <int_common_stub>

c0021628 <irq18>:
c0021628:	fa                   	cli    
c0021629:	6a 00                	push   0x0
c002162b:	6a 32                	push   0x32
c002162d:	e9 e4 fe ff ff       	jmp    c0021516 <int_common_stub>

c0021632 <irq19>:
c0021632:	fa                   	cli    
c0021633:	6a 00                	push   0x0
c0021635:	6a 33                	push   0x33
c0021637:	e9 da fe ff ff       	jmp    c0021516 <int_common_stub>

c002163c <irq20>:
c002163c:	fa                   	cli    
c002163d:	6a 00                	push   0x0
c002163f:	6a 34                	push   0x34
c0021641:	e9 d0 fe ff ff       	jmp    c0021516 <int_common_stub>

c0021646 <irq21>:
c0021646:	fa                   	cli    
c0021647:	6a 00                	push   0x0
c0021649:	6a 35                	push   0x35
c002164b:	e9 c6 fe ff ff       	jmp    c0021516 <int_common_stub>

c0021650 <irq22>:
c0021650:	fa                   	cli    
c0021651:	6a 00                	push   0x0
c0021653:	6a 36                	push   0x36
c0021655:	e9 bc fe ff ff       	jmp    c0021516 <int_common_stub>

c002165a <irq23>:
c002165a:	fa                   	cli    
c002165b:	6a 00                	push   0x0
c002165d:	6a 37                	push   0x37
c002165f:	e9 b2 fe ff ff       	jmp    c0021516 <int_common_stub>
c0021664:	66 90                	xchg   ax,ax
c0021666:	66 90                	xchg   ax,ax
c0021668:	66 90                	xchg   ax,ax
c002166a:	66 90                	xchg   ax,ax
c002166c:	66 90                	xchg   ax,ax
c002166e:	66 90                	xchg   ax,ax

c0021670 <i386GetRDRAND>:
c0021670:	b9 64 00 00 00       	mov    ecx,0x64

c0021675 <retry>:
c0021675:	0f c7 f0             	rdrand eax
c0021678:	72 05                	jb     c002167f <retry.done>
c002167a:	e2 f9                	loop   c0021675 <retry>

c002167c <retry.fail>:
c002167c:	31 c0                	xor    eax,eax
c002167e:	c3                   	ret    

c002167f <retry.done>:
c002167f:	c3                   	ret    

c0021680 <sseDetect>:
c0021680:	b8 01 00 00 00       	mov    eax,0x1
c0021685:	0f a2                	cpuid  
c0021687:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002168d:	74 06                	je     c0021695 <sseDetect.noSSE>
c002168f:	b8 01 00 00 00       	mov    eax,0x1
c0021694:	c3                   	ret    

c0021695 <sseDetect.noSSE>:
c0021695:	31 c0                	xor    eax,eax
c0021697:	c3                   	ret    

c0021698 <sseSave>:
c0021698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002169c:	0f ae 00             	fxsave [eax]
c002169f:	c3                   	ret    

c00216a0 <sseLoad>:
c00216a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a4:	0f ae 08             	fxrstor [eax]
c00216a7:	c3                   	ret    

c00216a8 <sseInit>:
c00216a8:	e8 48 00 00 00       	call   c00216f5 <x87Init>
c00216ad:	0f 20 e0             	mov    eax,cr4
c00216b0:	66 0d 00 06          	or     ax,0x600
c00216b4:	0f 22 e0             	mov    cr4,eax
c00216b7:	c3                   	ret    

c00216b8 <sseClose>:
c00216b8:	c3                   	ret    
c00216b9:	66 90                	xchg   ax,ax
c00216bb:	66 90                	xchg   ax,ax
c00216bd:	66 90                	xchg   ax,ax
c00216bf:	90                   	nop

c00216c0 <value_37F>:
c00216c0:	7f 03                	jg     c00216c5 <value_37A+0x1>

c00216c2 <value_37E>:
c00216c2:	7e 03                	jle    c00216c7 <x87Detect+0x1>

c00216c4 <value_37A>:
c00216c4:	7a 03                	jp     c00216c9 <x87Detect+0x3>

c00216c6 <x87Detect>:
c00216c6:	53                   	push   ebx
c00216c7:	51                   	push   ecx
c00216c8:	52                   	push   edx
c00216c9:	b8 01 00 00 00       	mov    eax,0x1
c00216ce:	0f a2                	cpuid  
c00216d0:	f7 c2 01 00 00 00    	test   edx,0x1
c00216d6:	74 06                	je     c00216de <x87Detect.nox87>
c00216d8:	b8 01 00 00 00       	mov    eax,0x1
c00216dd:	c3                   	ret    

c00216de <x87Detect.nox87>:
c00216de:	b8 00 00 00 00       	mov    eax,0x0
c00216e3:	5a                   	pop    edx
c00216e4:	59                   	pop    ecx
c00216e5:	5b                   	pop    ebx
c00216e6:	c3                   	ret    

c00216e7 <x87Save>:
c00216e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216eb:	dd 30                	fnsave [eax]
c00216ed:	c3                   	ret    

c00216ee <x87Load>:
c00216ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216f2:	dd 20                	frstor [eax]
c00216f4:	c3                   	ret    

c00216f5 <x87Init>:
c00216f5:	0f 20 c0             	mov    eax,cr0
c00216f8:	66 25 fb ff          	and    ax,0xfffb
c00216fc:	66 0d 22 00          	or     ax,0x22
c0021700:	0f 22 c0             	mov    cr0,eax
c0021703:	db e3                	fninit 
c0021705:	0f 06                	clts   
c0021707:	d9 2d c4 16 02 c0    	fldcw  WORD PTR ds:0xc00216c4
c002170d:	c3                   	ret    

c002170e <x87Close>:
c002170e:	c3                   	ret    
c002170f:	90                   	nop

c0021710 <__do_global_ctors_aux>:
c0021710:	a1 c4 26 02 c0       	mov    eax,ds:0xc00226c4
c0021715:	83 f8 ff             	cmp    eax,0xffffffff
c0021718:	74 1a                	je     c0021734 <__do_global_ctors_aux+0x24>
c002171a:	55                   	push   ebp
c002171b:	89 e5                	mov    ebp,esp
c002171d:	53                   	push   ebx
c002171e:	52                   	push   edx
c002171f:	bb c4 26 02 c0       	mov    ebx,0xc00226c4
c0021724:	ff d0                	call   eax
c0021726:	83 eb 04             	sub    ebx,0x4
c0021729:	8b 03                	mov    eax,DWORD PTR [ebx]
c002172b:	83 f8 ff             	cmp    eax,0xffffffff
c002172e:	75 f4                	jne    c0021724 <__do_global_ctors_aux+0x14>
c0021730:	58                   	pop    eax
c0021731:	5b                   	pop    ebx
c0021732:	5d                   	pop    ebp
c0021733:	c3                   	ret    
c0021734:	c3                   	ret    
c0021735:	66 90                	xchg   ax,ax
c0021737:	90                   	nop

c0021738 <__divdi3>:
c0021738:	55                   	push   ebp
c0021739:	57                   	push   edi
c002173a:	56                   	push   esi
c002173b:	53                   	push   ebx
c002173c:	83 ec 1c             	sub    esp,0x1c
c002173f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021743:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021747:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002174a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002174e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021752:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021756:	85 db                	test   ebx,ebx
c0021758:	0f 88 8e 00 00 00    	js     c00217ec <__divdi3+0xb4>
c002175e:	89 dd                	mov    ebp,ebx
c0021760:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021768:	89 d3                	mov    ebx,edx
c002176a:	85 d2                	test   edx,edx
c002176c:	79 0d                	jns    c002177b <__divdi3+0x43>
c002176e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021772:	f7 d8                	neg    eax
c0021774:	83 d2 00             	adc    edx,0x0
c0021777:	f7 da                	neg    edx
c0021779:	89 d3                	mov    ebx,edx
c002177b:	89 c7                	mov    edi,eax
c002177d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021780:	85 db                	test   ebx,ebx
c0021782:	75 48                	jne    c00217cc <__divdi3+0x94>
c0021784:	39 ef                	cmp    edi,ebp
c0021786:	76 24                	jbe    c00217ac <__divdi3+0x74>
c0021788:	89 ea                	mov    edx,ebp
c002178a:	f7 f7                	div    edi
c002178c:	89 c1                	mov    ecx,eax
c002178e:	31 f6                	xor    esi,esi
c0021790:	89 c8                	mov    eax,ecx
c0021792:	89 f2                	mov    edx,esi
c0021794:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021798:	85 c9                	test   ecx,ecx
c002179a:	74 07                	je     c00217a3 <__divdi3+0x6b>
c002179c:	f7 d8                	neg    eax
c002179e:	83 d2 00             	adc    edx,0x0
c00217a1:	f7 da                	neg    edx
c00217a3:	83 c4 1c             	add    esp,0x1c
c00217a6:	5b                   	pop    ebx
c00217a7:	5e                   	pop    esi
c00217a8:	5f                   	pop    edi
c00217a9:	5d                   	pop    ebp
c00217aa:	c3                   	ret    
c00217ab:	90                   	nop
c00217ac:	85 ff                	test   edi,edi
c00217ae:	75 0b                	jne    c00217bb <__divdi3+0x83>
c00217b0:	b8 01 00 00 00       	mov    eax,0x1
c00217b5:	31 d2                	xor    edx,edx
c00217b7:	f7 f3                	div    ebx
c00217b9:	89 c7                	mov    edi,eax
c00217bb:	31 d2                	xor    edx,edx
c00217bd:	89 e8                	mov    eax,ebp
c00217bf:	f7 f7                	div    edi
c00217c1:	89 c6                	mov    esi,eax
c00217c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217c6:	f7 f7                	div    edi
c00217c8:	89 c1                	mov    ecx,eax
c00217ca:	eb c4                	jmp    c0021790 <__divdi3+0x58>
c00217cc:	39 eb                	cmp    ebx,ebp
c00217ce:	77 3c                	ja     c002180c <__divdi3+0xd4>
c00217d0:	0f bd f3             	bsr    esi,ebx
c00217d3:	83 f6 1f             	xor    esi,0x1f
c00217d6:	75 40                	jne    c0021818 <__divdi3+0xe0>
c00217d8:	39 eb                	cmp    ebx,ebp
c00217da:	72 09                	jb     c00217e5 <__divdi3+0xad>
c00217dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00217df:	0f 87 97 00 00 00    	ja     c002187c <__divdi3+0x144>
c00217e5:	b9 01 00 00 00       	mov    ecx,0x1
c00217ea:	eb a4                	jmp    c0021790 <__divdi3+0x58>
c00217ec:	f7 d9                	neg    ecx
c00217ee:	83 d3 00             	adc    ebx,0x0
c00217f1:	f7 db                	neg    ebx
c00217f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00217f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00217fa:	89 dd                	mov    ebp,ebx
c00217fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021804:	e9 5f ff ff ff       	jmp    c0021768 <__divdi3+0x30>
c0021809:	8d 76 00             	lea    esi,[esi+0x0]
c002180c:	31 f6                	xor    esi,esi
c002180e:	31 c9                	xor    ecx,ecx
c0021810:	e9 7b ff ff ff       	jmp    c0021790 <__divdi3+0x58>
c0021815:	8d 76 00             	lea    esi,[esi+0x0]
c0021818:	b8 20 00 00 00       	mov    eax,0x20
c002181d:	29 f0                	sub    eax,esi
c002181f:	89 f1                	mov    ecx,esi
c0021821:	d3 e3                	shl    ebx,cl
c0021823:	89 fa                	mov    edx,edi
c0021825:	88 c1                	mov    cl,al
c0021827:	d3 ea                	shr    edx,cl
c0021829:	09 da                	or     edx,ebx
c002182b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002182f:	89 f1                	mov    ecx,esi
c0021831:	d3 e7                	shl    edi,cl
c0021833:	89 eb                	mov    ebx,ebp
c0021835:	88 c1                	mov    cl,al
c0021837:	d3 eb                	shr    ebx,cl
c0021839:	89 f1                	mov    ecx,esi
c002183b:	d3 e5                	shl    ebp,cl
c002183d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021840:	88 c1                	mov    cl,al
c0021842:	d3 ea                	shr    edx,cl
c0021844:	09 d5                	or     ebp,edx
c0021846:	89 e8                	mov    eax,ebp
c0021848:	89 da                	mov    edx,ebx
c002184a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002184e:	89 d3                	mov    ebx,edx
c0021850:	89 c5                	mov    ebp,eax
c0021852:	f7 e7                	mul    edi
c0021854:	39 d3                	cmp    ebx,edx
c0021856:	72 18                	jb     c0021870 <__divdi3+0x138>
c0021858:	74 0a                	je     c0021864 <__divdi3+0x12c>
c002185a:	89 e9                	mov    ecx,ebp
c002185c:	31 f6                	xor    esi,esi
c002185e:	e9 2d ff ff ff       	jmp    c0021790 <__divdi3+0x58>
c0021863:	90                   	nop
c0021864:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021867:	89 f1                	mov    ecx,esi
c0021869:	d3 e7                	shl    edi,cl
c002186b:	39 c7                	cmp    edi,eax
c002186d:	73 eb                	jae    c002185a <__divdi3+0x122>
c002186f:	90                   	nop
c0021870:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021873:	31 f6                	xor    esi,esi
c0021875:	e9 16 ff ff ff       	jmp    c0021790 <__divdi3+0x58>
c002187a:	66 90                	xchg   ax,ax
c002187c:	31 c9                	xor    ecx,ecx
c002187e:	e9 0d ff ff ff       	jmp    c0021790 <__divdi3+0x58>
c0021883:	90                   	nop

c0021884 <__moddi3>:
c0021884:	55                   	push   ebp
c0021885:	57                   	push   edi
c0021886:	56                   	push   esi
c0021887:	53                   	push   ebx
c0021888:	83 ec 2c             	sub    esp,0x2c
c002188b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002188f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021893:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021897:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002189b:	85 db                	test   ebx,ebx
c002189d:	0f 88 85 00 00 00    	js     c0021928 <__moddi3+0xa4>
c00218a3:	89 de                	mov    esi,ebx
c00218a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218ad:	89 d7                	mov    edi,edx
c00218af:	85 d2                	test   edx,edx
c00218b1:	79 09                	jns    c00218bc <__moddi3+0x38>
c00218b3:	f7 d8                	neg    eax
c00218b5:	83 d2 00             	adc    edx,0x0
c00218b8:	f7 da                	neg    edx
c00218ba:	89 d7                	mov    edi,edx
c00218bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218c0:	89 cd                	mov    ebp,ecx
c00218c2:	85 ff                	test   edi,edi
c00218c4:	75 52                	jne    c0021918 <__moddi3+0x94>
c00218c6:	89 c3                	mov    ebx,eax
c00218c8:	39 f0                	cmp    eax,esi
c00218ca:	76 24                	jbe    c00218f0 <__moddi3+0x6c>
c00218cc:	89 c8                	mov    eax,ecx
c00218ce:	89 f2                	mov    edx,esi
c00218d0:	f7 f3                	div    ebx
c00218d2:	89 d6                	mov    esi,edx
c00218d4:	89 f0                	mov    eax,esi
c00218d6:	31 d2                	xor    edx,edx
c00218d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218dc:	85 c9                	test   ecx,ecx
c00218de:	74 07                	je     c00218e7 <__moddi3+0x63>
c00218e0:	f7 d8                	neg    eax
c00218e2:	83 d2 00             	adc    edx,0x0
c00218e5:	f7 da                	neg    edx
c00218e7:	83 c4 2c             	add    esp,0x2c
c00218ea:	5b                   	pop    ebx
c00218eb:	5e                   	pop    esi
c00218ec:	5f                   	pop    edi
c00218ed:	5d                   	pop    ebp
c00218ee:	c3                   	ret    
c00218ef:	90                   	nop
c00218f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00218f4:	85 db                	test   ebx,ebx
c00218f6:	75 0d                	jne    c0021905 <__moddi3+0x81>
c00218f8:	b8 01 00 00 00       	mov    eax,0x1
c00218fd:	31 d2                	xor    edx,edx
c00218ff:	f7 f7                	div    edi
c0021901:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021905:	89 f0                	mov    eax,esi
c0021907:	31 d2                	xor    edx,edx
c0021909:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002190d:	f7 f7                	div    edi
c002190f:	89 e8                	mov    eax,ebp
c0021911:	f7 f7                	div    edi
c0021913:	89 d6                	mov    esi,edx
c0021915:	eb bd                	jmp    c00218d4 <__moddi3+0x50>
c0021917:	90                   	nop
c0021918:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002191c:	39 f7                	cmp    edi,esi
c002191e:	76 20                	jbe    c0021940 <__moddi3+0xbc>
c0021920:	89 c8                	mov    eax,ecx
c0021922:	89 f2                	mov    edx,esi
c0021924:	eb b2                	jmp    c00218d8 <__moddi3+0x54>
c0021926:	66 90                	xchg   ax,ax
c0021928:	f7 d9                	neg    ecx
c002192a:	83 d3 00             	adc    ebx,0x0
c002192d:	f7 db                	neg    ebx
c002192f:	89 de                	mov    esi,ebx
c0021931:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021939:	e9 6f ff ff ff       	jmp    c00218ad <__moddi3+0x29>
c002193e:	66 90                	xchg   ax,ax
c0021940:	0f bd c7             	bsr    eax,edi
c0021943:	83 f0 1f             	xor    eax,0x1f
c0021946:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002194a:	75 24                	jne    c0021970 <__moddi3+0xec>
c002194c:	39 f7                	cmp    edi,esi
c002194e:	72 06                	jb     c0021956 <__moddi3+0xd2>
c0021950:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021954:	77 0c                	ja     c0021962 <__moddi3+0xde>
c0021956:	89 e9                	mov    ecx,ebp
c0021958:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002195c:	19 fe                	sbb    esi,edi
c002195e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021962:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021966:	89 f2                	mov    edx,esi
c0021968:	e9 6b ff ff ff       	jmp    c00218d8 <__moddi3+0x54>
c002196d:	8d 76 00             	lea    esi,[esi+0x0]
c0021970:	b8 20 00 00 00       	mov    eax,0x20
c0021975:	89 c2                	mov    edx,eax
c0021977:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002197b:	29 da                	sub    edx,ebx
c002197d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021981:	88 d9                	mov    cl,bl
c0021983:	d3 e7                	shl    edi,cl
c0021985:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021989:	88 d1                	mov    cl,dl
c002198b:	d3 e8                	shr    eax,cl
c002198d:	09 c7                	or     edi,eax
c002198f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021993:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021997:	89 d8                	mov    eax,ebx
c0021999:	88 d9                	mov    cl,bl
c002199b:	d3 e7                	shl    edi,cl
c002199d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00219a1:	89 f3                	mov    ebx,esi
c00219a3:	88 d1                	mov    cl,dl
c00219a5:	d3 eb                	shr    ebx,cl
c00219a7:	89 c7                	mov    edi,eax
c00219a9:	88 c1                	mov    cl,al
c00219ab:	d3 e6                	shl    esi,cl
c00219ad:	89 e8                	mov    eax,ebp
c00219af:	88 d1                	mov    cl,dl
c00219b1:	d3 e8                	shr    eax,cl
c00219b3:	09 f0                	or     eax,esi
c00219b5:	89 f9                	mov    ecx,edi
c00219b7:	d3 e5                	shl    ebp,cl
c00219b9:	89 da                	mov    edx,ebx
c00219bb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00219bf:	89 d3                	mov    ebx,edx
c00219c1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00219c5:	89 c6                	mov    esi,eax
c00219c7:	89 d1                	mov    ecx,edx
c00219c9:	39 d3                	cmp    ebx,edx
c00219cb:	72 27                	jb     c00219f4 <__moddi3+0x170>
c00219cd:	74 21                	je     c00219f0 <__moddi3+0x16c>
c00219cf:	29 f5                	sub    ebp,esi
c00219d1:	19 cb                	sbb    ebx,ecx
c00219d3:	89 de                	mov    esi,ebx
c00219d5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00219d9:	d3 e6                	shl    esi,cl
c00219db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00219df:	89 f9                	mov    ecx,edi
c00219e1:	d3 ed                	shr    ebp,cl
c00219e3:	09 ee                	or     esi,ebp
c00219e5:	89 f0                	mov    eax,esi
c00219e7:	d3 eb                	shr    ebx,cl
c00219e9:	89 da                	mov    edx,ebx
c00219eb:	e9 e8 fe ff ff       	jmp    c00218d8 <__moddi3+0x54>
c00219f0:	39 c5                	cmp    ebp,eax
c00219f2:	73 db                	jae    c00219cf <__moddi3+0x14b>
c00219f4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00219f8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00219fc:	89 d1                	mov    ecx,edx
c00219fe:	89 c6                	mov    esi,eax
c0021a00:	eb cd                	jmp    c00219cf <__moddi3+0x14b>
c0021a02:	66 90                	xchg   ax,ax

c0021a04 <__udivdi3>:
c0021a04:	55                   	push   ebp
c0021a05:	57                   	push   edi
c0021a06:	56                   	push   esi
c0021a07:	53                   	push   ebx
c0021a08:	83 ec 1c             	sub    esp,0x1c
c0021a0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021a0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021a13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021a17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a1b:	85 d2                	test   edx,edx
c0021a1d:	75 41                	jne    c0021a60 <__udivdi3+0x5c>
c0021a1f:	39 f7                	cmp    edi,esi
c0021a21:	76 15                	jbe    c0021a38 <__udivdi3+0x34>
c0021a23:	89 e8                	mov    eax,ebp
c0021a25:	89 f2                	mov    edx,esi
c0021a27:	f7 f7                	div    edi
c0021a29:	31 db                	xor    ebx,ebx
c0021a2b:	89 da                	mov    edx,ebx
c0021a2d:	83 c4 1c             	add    esp,0x1c
c0021a30:	5b                   	pop    ebx
c0021a31:	5e                   	pop    esi
c0021a32:	5f                   	pop    edi
c0021a33:	5d                   	pop    ebp
c0021a34:	c3                   	ret    
c0021a35:	8d 76 00             	lea    esi,[esi+0x0]
c0021a38:	89 f9                	mov    ecx,edi
c0021a3a:	85 ff                	test   edi,edi
c0021a3c:	75 0b                	jne    c0021a49 <__udivdi3+0x45>
c0021a3e:	b8 01 00 00 00       	mov    eax,0x1
c0021a43:	31 d2                	xor    edx,edx
c0021a45:	f7 f7                	div    edi
c0021a47:	89 c1                	mov    ecx,eax
c0021a49:	31 d2                	xor    edx,edx
c0021a4b:	89 f0                	mov    eax,esi
c0021a4d:	f7 f1                	div    ecx
c0021a4f:	89 c3                	mov    ebx,eax
c0021a51:	89 e8                	mov    eax,ebp
c0021a53:	f7 f1                	div    ecx
c0021a55:	89 da                	mov    edx,ebx
c0021a57:	83 c4 1c             	add    esp,0x1c
c0021a5a:	5b                   	pop    ebx
c0021a5b:	5e                   	pop    esi
c0021a5c:	5f                   	pop    edi
c0021a5d:	5d                   	pop    ebp
c0021a5e:	c3                   	ret    
c0021a5f:	90                   	nop
c0021a60:	39 f2                	cmp    edx,esi
c0021a62:	77 1c                	ja     c0021a80 <__udivdi3+0x7c>
c0021a64:	0f bd da             	bsr    ebx,edx
c0021a67:	83 f3 1f             	xor    ebx,0x1f
c0021a6a:	75 24                	jne    c0021a90 <__udivdi3+0x8c>
c0021a6c:	39 f2                	cmp    edx,esi
c0021a6e:	72 08                	jb     c0021a78 <__udivdi3+0x74>
c0021a70:	39 ef                	cmp    edi,ebp
c0021a72:	0f 87 84 00 00 00    	ja     c0021afc <__udivdi3+0xf8>
c0021a78:	b8 01 00 00 00       	mov    eax,0x1
c0021a7d:	eb ac                	jmp    c0021a2b <__udivdi3+0x27>
c0021a7f:	90                   	nop
c0021a80:	31 db                	xor    ebx,ebx
c0021a82:	31 c0                	xor    eax,eax
c0021a84:	89 da                	mov    edx,ebx
c0021a86:	83 c4 1c             	add    esp,0x1c
c0021a89:	5b                   	pop    ebx
c0021a8a:	5e                   	pop    esi
c0021a8b:	5f                   	pop    edi
c0021a8c:	5d                   	pop    ebp
c0021a8d:	c3                   	ret    
c0021a8e:	66 90                	xchg   ax,ax
c0021a90:	b8 20 00 00 00       	mov    eax,0x20
c0021a95:	29 d8                	sub    eax,ebx
c0021a97:	88 d9                	mov    cl,bl
c0021a99:	d3 e2                	shl    edx,cl
c0021a9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021a9f:	89 fa                	mov    edx,edi
c0021aa1:	88 c1                	mov    cl,al
c0021aa3:	d3 ea                	shr    edx,cl
c0021aa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021aa9:	09 d1                	or     ecx,edx
c0021aab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021aaf:	88 d9                	mov    cl,bl
c0021ab1:	d3 e7                	shl    edi,cl
c0021ab3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ab7:	89 f7                	mov    edi,esi
c0021ab9:	88 c1                	mov    cl,al
c0021abb:	d3 ef                	shr    edi,cl
c0021abd:	88 d9                	mov    cl,bl
c0021abf:	d3 e6                	shl    esi,cl
c0021ac1:	89 ea                	mov    edx,ebp
c0021ac3:	88 c1                	mov    cl,al
c0021ac5:	d3 ea                	shr    edx,cl
c0021ac7:	09 d6                	or     esi,edx
c0021ac9:	89 f0                	mov    eax,esi
c0021acb:	89 fa                	mov    edx,edi
c0021acd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021ad1:	89 d7                	mov    edi,edx
c0021ad3:	89 c6                	mov    esi,eax
c0021ad5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ad9:	39 d7                	cmp    edi,edx
c0021adb:	72 13                	jb     c0021af0 <__udivdi3+0xec>
c0021add:	74 09                	je     c0021ae8 <__udivdi3+0xe4>
c0021adf:	89 f0                	mov    eax,esi
c0021ae1:	31 db                	xor    ebx,ebx
c0021ae3:	e9 43 ff ff ff       	jmp    c0021a2b <__udivdi3+0x27>
c0021ae8:	88 d9                	mov    cl,bl
c0021aea:	d3 e5                	shl    ebp,cl
c0021aec:	39 c5                	cmp    ebp,eax
c0021aee:	73 ef                	jae    c0021adf <__udivdi3+0xdb>
c0021af0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021af3:	31 db                	xor    ebx,ebx
c0021af5:	e9 31 ff ff ff       	jmp    c0021a2b <__udivdi3+0x27>
c0021afa:	66 90                	xchg   ax,ax
c0021afc:	31 c0                	xor    eax,eax
c0021afe:	e9 28 ff ff ff       	jmp    c0021a2b <__udivdi3+0x27>
c0021b03:	90                   	nop

c0021b04 <__umoddi3>:
c0021b04:	55                   	push   ebp
c0021b05:	57                   	push   edi
c0021b06:	56                   	push   esi
c0021b07:	53                   	push   ebx
c0021b08:	83 ec 1c             	sub    esp,0x1c
c0021b0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021b13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021b17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021b1b:	89 da                	mov    edx,ebx
c0021b1d:	85 c0                	test   eax,eax
c0021b1f:	75 37                	jne    c0021b58 <__umoddi3+0x54>
c0021b21:	39 df                	cmp    edi,ebx
c0021b23:	76 13                	jbe    c0021b38 <__umoddi3+0x34>
c0021b25:	89 f0                	mov    eax,esi
c0021b27:	f7 f7                	div    edi
c0021b29:	89 d0                	mov    eax,edx
c0021b2b:	31 d2                	xor    edx,edx
c0021b2d:	83 c4 1c             	add    esp,0x1c
c0021b30:	5b                   	pop    ebx
c0021b31:	5e                   	pop    esi
c0021b32:	5f                   	pop    edi
c0021b33:	5d                   	pop    ebp
c0021b34:	c3                   	ret    
c0021b35:	8d 76 00             	lea    esi,[esi+0x0]
c0021b38:	89 fd                	mov    ebp,edi
c0021b3a:	85 ff                	test   edi,edi
c0021b3c:	75 0b                	jne    c0021b49 <__umoddi3+0x45>
c0021b3e:	b8 01 00 00 00       	mov    eax,0x1
c0021b43:	31 d2                	xor    edx,edx
c0021b45:	f7 f7                	div    edi
c0021b47:	89 c5                	mov    ebp,eax
c0021b49:	89 d8                	mov    eax,ebx
c0021b4b:	31 d2                	xor    edx,edx
c0021b4d:	f7 f5                	div    ebp
c0021b4f:	89 f0                	mov    eax,esi
c0021b51:	f7 f5                	div    ebp
c0021b53:	89 d0                	mov    eax,edx
c0021b55:	eb d4                	jmp    c0021b2b <__umoddi3+0x27>
c0021b57:	90                   	nop
c0021b58:	89 f1                	mov    ecx,esi
c0021b5a:	39 d8                	cmp    eax,ebx
c0021b5c:	76 0a                	jbe    c0021b68 <__umoddi3+0x64>
c0021b5e:	89 f0                	mov    eax,esi
c0021b60:	83 c4 1c             	add    esp,0x1c
c0021b63:	5b                   	pop    ebx
c0021b64:	5e                   	pop    esi
c0021b65:	5f                   	pop    edi
c0021b66:	5d                   	pop    ebp
c0021b67:	c3                   	ret    
c0021b68:	0f bd e8             	bsr    ebp,eax
c0021b6b:	83 f5 1f             	xor    ebp,0x1f
c0021b6e:	75 1c                	jne    c0021b8c <__umoddi3+0x88>
c0021b70:	39 d8                	cmp    eax,ebx
c0021b72:	72 04                	jb     c0021b78 <__umoddi3+0x74>
c0021b74:	39 f7                	cmp    edi,esi
c0021b76:	77 08                	ja     c0021b80 <__umoddi3+0x7c>
c0021b78:	89 da                	mov    edx,ebx
c0021b7a:	29 fe                	sub    esi,edi
c0021b7c:	19 c2                	sbb    edx,eax
c0021b7e:	89 f1                	mov    ecx,esi
c0021b80:	89 c8                	mov    eax,ecx
c0021b82:	83 c4 1c             	add    esp,0x1c
c0021b85:	5b                   	pop    ebx
c0021b86:	5e                   	pop    esi
c0021b87:	5f                   	pop    edi
c0021b88:	5d                   	pop    ebp
c0021b89:	c3                   	ret    
c0021b8a:	66 90                	xchg   ax,ax
c0021b8c:	ba 20 00 00 00       	mov    edx,0x20
c0021b91:	29 ea                	sub    edx,ebp
c0021b93:	89 e9                	mov    ecx,ebp
c0021b95:	d3 e0                	shl    eax,cl
c0021b97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b9b:	89 f8                	mov    eax,edi
c0021b9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ba1:	88 d1                	mov    cl,dl
c0021ba3:	d3 e8                	shr    eax,cl
c0021ba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ba9:	09 c1                	or     ecx,eax
c0021bab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021baf:	89 e9                	mov    ecx,ebp
c0021bb1:	d3 e7                	shl    edi,cl
c0021bb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021bb7:	89 d8                	mov    eax,ebx
c0021bb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bbd:	88 d1                	mov    cl,dl
c0021bbf:	d3 e8                	shr    eax,cl
c0021bc1:	89 c7                	mov    edi,eax
c0021bc3:	89 e9                	mov    ecx,ebp
c0021bc5:	d3 e3                	shl    ebx,cl
c0021bc7:	89 f0                	mov    eax,esi
c0021bc9:	88 d1                	mov    cl,dl
c0021bcb:	d3 e8                	shr    eax,cl
c0021bcd:	09 d8                	or     eax,ebx
c0021bcf:	89 e9                	mov    ecx,ebp
c0021bd1:	d3 e6                	shl    esi,cl
c0021bd3:	89 f3                	mov    ebx,esi
c0021bd5:	89 fa                	mov    edx,edi
c0021bd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021bdb:	89 d1                	mov    ecx,edx
c0021bdd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021be1:	89 c6                	mov    esi,eax
c0021be3:	89 d7                	mov    edi,edx
c0021be5:	39 d1                	cmp    ecx,edx
c0021be7:	72 27                	jb     c0021c10 <__umoddi3+0x10c>
c0021be9:	74 21                	je     c0021c0c <__umoddi3+0x108>
c0021beb:	89 ca                	mov    edx,ecx
c0021bed:	29 f3                	sub    ebx,esi
c0021bef:	19 fa                	sbb    edx,edi
c0021bf1:	89 d0                	mov    eax,edx
c0021bf3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021bf7:	d3 e0                	shl    eax,cl
c0021bf9:	89 e9                	mov    ecx,ebp
c0021bfb:	d3 eb                	shr    ebx,cl
c0021bfd:	09 d8                	or     eax,ebx
c0021bff:	d3 ea                	shr    edx,cl
c0021c01:	83 c4 1c             	add    esp,0x1c
c0021c04:	5b                   	pop    ebx
c0021c05:	5e                   	pop    esi
c0021c06:	5f                   	pop    edi
c0021c07:	5d                   	pop    ebp
c0021c08:	c3                   	ret    
c0021c09:	8d 76 00             	lea    esi,[esi+0x0]
c0021c0c:	39 c3                	cmp    ebx,eax
c0021c0e:	73 db                	jae    c0021beb <__umoddi3+0xe7>
c0021c10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021c14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021c18:	89 d7                	mov    edi,edx
c0021c1a:	89 c6                	mov    esi,eax
c0021c1c:	eb cd                	jmp    c0021beb <__umoddi3+0xe7>

Disassembly of section .init:

c0021c1e <_init>:
c0021c1e:	55                   	push   ebp
c0021c1f:	89 e5                	mov    ebp,esp
c0021c21:	e8 ce e4 fd ff       	call   c00000f4 <frame_dummy>
c0021c26:	e8 e5 fa ff ff       	call   c0021710 <__do_global_ctors_aux>
c0021c2b:	5d                   	pop    ebp
c0021c2c:	c3                   	ret    

Disassembly of section .fini:

c0021c2d <_fini>:
c0021c2d:	55                   	push   ebp
c0021c2e:	89 e5                	mov    ebp,esp
c0021c30:	e8 4f e4 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021c35:	5d                   	pop    ebp
c0021c36:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021c38 <DriverlessDevice::~DriverlessDevice()>:
c0021c38:	ba bc 36 02 c0       	mov    edx,0xc00236bc
c0021c3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c41:	89 10                	mov    DWORD PTR [eax],edx
c0021c43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c47:	50                   	push   eax
c0021c48:	e8 09 7d fe ff       	call   c0009956 <Device::~Device()>
c0021c4d:	83 c4 04             	add    esp,0x4
c0021c50:	90                   	nop
c0021c51:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021c52 <DriverlessDevice::~DriverlessDevice()>:
c0021c52:	83 ec 0c             	sub    esp,0xc
c0021c55:	83 ec 0c             	sub    esp,0xc
c0021c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c5c:	e8 d7 ff ff ff       	call   c0021c38 <DriverlessDevice::~DriverlessDevice()>
c0021c61:	83 c4 10             	add    esp,0x10
c0021c64:	83 ec 08             	sub    esp,0x8
c0021c67:	68 58 01 00 00       	push   0x158
c0021c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c70:	e8 3b b7 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0021c75:	83 c4 10             	add    esp,0x10
c0021c78:	83 c4 0c             	add    esp,0xc
c0021c7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021c7c <LinkedList<Device>::addElement(Device*)>:
c0021c7c:	83 ec 0c             	sub    esp,0xc
c0021c7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021c84:	75 10                	jne    c0021c96 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021c86:	83 ec 0c             	sub    esp,0xc
c0021c89:	68 50 36 02 c0       	push   0xc0023650
c0021c8e:	e8 61 e0 fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021c93:	83 c4 10             	add    esp,0x10
c0021c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c9c:	85 c0                	test   eax,eax
c0021c9e:	74 3a                	je     c0021cda <LinkedList<Device>::addElement(Device*)+0x5e>
c0021ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ca7:	85 c0                	test   eax,eax
c0021ca9:	74 2f                	je     c0021cda <LinkedList<Device>::addElement(Device*)+0x5e>
c0021cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021caf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cb6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ccb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cce:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021cd8:	eb 68                	jmp    c0021d42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ce0:	85 c0                	test   eax,eax
c0021ce2:	75 4e                	jne    c0021d32 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ceb:	85 c0                	test   eax,eax
c0021ced:	75 43                	jne    c0021d32 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cf7:	89 10                	mov    DWORD PTR [eax],edx
c0021cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d0b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d1c:	85 c0                	test   eax,eax
c0021d1e:	74 22                	je     c0021d42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021d20:	83 ec 0c             	sub    esp,0xc
c0021d23:	68 72 36 02 c0       	push   0xc0023672
c0021d28:	e8 c7 df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021d2d:	83 c4 10             	add    esp,0x10
c0021d30:	eb 10                	jmp    c0021d42 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	68 7c 36 02 c0       	push   0xc002367c
c0021d3a:	e8 b5 df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d49:	8d 50 01             	lea    edx,[eax+0x1]
c0021d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d53:	90                   	nop
c0021d54:	83 c4 0c             	add    esp,0xc
c0021d57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021d58 <LinkedList<Device>::LinkedList()>:
c0021d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021d98:	90                   	nop
c0021d99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021d9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021da2:	85 c0                	test   eax,eax
c0021da4:	75 0e                	jne    c0021db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dad:	85 c0                	test   eax,eax
c0021daf:	75 03                	jne    c0021db4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021db1:	b0 01                	mov    al,0x1
c0021db3:	c3                   	ret    
c0021db4:	b0 00                	mov    al,0x0
c0021db6:	90                   	nop
c0021db7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021db8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dbe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021dc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021dc0:	83 ec 0c             	sub    esp,0xc
c0021dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dc9:	85 c0                	test   eax,eax
c0021dcb:	75 17                	jne    c0021de4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021dcd:	83 ec 0c             	sub    esp,0xc
c0021dd0:	68 ec 38 02 c0       	push   0xc00238ec
c0021dd5:	e8 1a df fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021dda:	83 c4 10             	add    esp,0x10
c0021ddd:	e9 96 00 00 00       	jmp    c0021e78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021de2:	66 90                	xchg   ax,ax
c0021de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021deb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021dee:	85 c0                	test   eax,eax
c0021df0:	0f 95 c0             	setne  al
c0021df3:	0f b6 c0             	movzx  eax,al
c0021df6:	85 c0                	test   eax,eax
c0021df8:	74 12                	je     c0021e0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021dfa:	83 ec 0c             	sub    esp,0xc
c0021dfd:	68 37 39 02 c0       	push   0xc0023937
c0021e02:	e8 ed de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021e07:	83 c4 10             	add    esp,0x10
c0021e0a:	66 90                	xchg   ax,ax
c0021e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021e15:	85 c0                	test   eax,eax
c0021e17:	0f 94 c0             	sete   al
c0021e1a:	0f b6 c0             	movzx  eax,al
c0021e1d:	85 c0                	test   eax,eax
c0021e1f:	74 33                	je     c0021e54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e25:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e3d:	83 f8 01             	cmp    eax,0x1
c0021e40:	74 22                	je     c0021e64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	68 10 39 02 c0       	push   0xc0023910
c0021e4a:	e8 a5 de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021e4f:	83 c4 10             	add    esp,0x10
c0021e52:	eb 10                	jmp    c0021e64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e5a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e61:	89 10                	mov    DWORD PTR [eax],edx
c0021e63:	90                   	nop
c0021e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e6b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e75:	8d 76 00             	lea    esi,[esi+0x0]
c0021e78:	83 c4 0c             	add    esp,0xc
c0021e7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021e7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021e7c:	83 ec 0c             	sub    esp,0xc
c0021e7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021e84:	75 12                	jne    c0021e98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021e86:	83 ec 0c             	sub    esp,0xc
c0021e89:	68 50 36 02 c0       	push   0xc0023650
c0021e8e:	e8 61 de fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	66 90                	xchg   ax,ax
c0021e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e9e:	85 c0                	test   eax,eax
c0021ea0:	74 36                	je     c0021ed8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ea9:	85 c0                	test   eax,eax
c0021eab:	74 2b                	je     c0021ed8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021eb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eb8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021ebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ebf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ec3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ecd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021ed4:	eb 6a                	jmp    c0021f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021ed6:	66 90                	xchg   ax,ax
c0021ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ede:	85 c0                	test   eax,eax
c0021ee0:	75 4e                	jne    c0021f30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ee6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ee9:	85 c0                	test   eax,eax
c0021eeb:	75 43                	jne    c0021f30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ef5:	89 10                	mov    DWORD PTR [eax],edx
c0021ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021eff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021f09:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f17:	85 c0                	test   eax,eax
c0021f19:	74 25                	je     c0021f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021f1b:	83 ec 0c             	sub    esp,0xc
c0021f1e:	68 72 36 02 c0       	push   0xc0023672
c0021f23:	e8 cc dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021f28:	83 c4 10             	add    esp,0x10
c0021f2b:	eb 13                	jmp    c0021f40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0021f30:	83 ec 0c             	sub    esp,0xc
c0021f33:	68 7c 36 02 c0       	push   0xc002367c
c0021f38:	e8 b7 dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021f3d:	83 c4 10             	add    esp,0x10
c0021f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f47:	8d 50 01             	lea    edx,[eax+0x1]
c0021f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f51:	90                   	nop
c0021f52:	83 c4 0c             	add    esp,0xc
c0021f55:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021f58 <ACPI::~ACPI()>:
c0021f58:	83 ec 0c             	sub    esp,0xc
c0021f5b:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c0021f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f64:	89 10                	mov    DWORD PTR [eax],edx
c0021f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6a:	83 ec 0c             	sub    esp,0xc
c0021f6d:	50                   	push   eax
c0021f6e:	e8 e3 79 fe ff       	call   c0009956 <Device::~Device()>
c0021f73:	83 c4 10             	add    esp,0x10
c0021f76:	90                   	nop
c0021f77:	83 c4 0c             	add    esp,0xc
c0021f7a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021f7c <ACPI::~ACPI()>:
c0021f7c:	83 ec 0c             	sub    esp,0xc
c0021f7f:	83 ec 0c             	sub    esp,0xc
c0021f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f86:	e8 cd ff ff ff       	call   c0021f58 <ACPI::~ACPI()>
c0021f8b:	83 c4 10             	add    esp,0x10
c0021f8e:	83 ec 08             	sub    esp,0x8
c0021f91:	68 64 12 00 00       	push   0x1264
c0021f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f9a:	e8 11 b4 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0021f9f:	83 c4 10             	add    esp,0x10
c0021fa2:	83 c4 0c             	add    esp,0xc
c0021fa5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021fa8 <LinkedList<Device>::~LinkedList()>:
c0021fa8:	90                   	nop
c0021fa9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021fac <LinkedList<Device>::isEmpty()>:
c0021fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fb2:	85 c0                	test   eax,eax
c0021fb4:	75 0e                	jne    c0021fc4 <LinkedList<Device>::isEmpty()+0x18>
c0021fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fbd:	85 c0                	test   eax,eax
c0021fbf:	75 03                	jne    c0021fc4 <LinkedList<Device>::isEmpty()+0x18>
c0021fc1:	b0 01                	mov    al,0x1
c0021fc3:	c3                   	ret    
c0021fc4:	b0 00                	mov    al,0x0
c0021fc6:	90                   	nop
c0021fc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021fc8 <LinkedList<Device>::getFirstElement()>:
c0021fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021fd0 <LinkedList<Device>::removeFirst()>:
c0021fd0:	83 ec 0c             	sub    esp,0xc
c0021fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fd9:	85 c0                	test   eax,eax
c0021fdb:	75 17                	jne    c0021ff4 <LinkedList<Device>::removeFirst()+0x24>
c0021fdd:	83 ec 0c             	sub    esp,0xc
c0021fe0:	68 ec 38 02 c0       	push   0xc00238ec
c0021fe5:	e8 0a dd fe ff       	call   c000fcf4 <KePanic(char const*)>
c0021fea:	83 c4 10             	add    esp,0x10
c0021fed:	e9 92 00 00 00       	jmp    c0022084 <LinkedList<Device>::removeFirst()+0xb4>
c0021ff2:	66 90                	xchg   ax,ax
c0021ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ffb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022001:	85 c0                	test   eax,eax
c0022003:	74 13                	je     c0022018 <LinkedList<Device>::removeFirst()+0x48>
c0022005:	83 ec 0c             	sub    esp,0xc
c0022008:	68 37 39 02 c0       	push   0xc0023937
c002200d:	e8 e2 dc fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022012:	83 c4 10             	add    esp,0x10
c0022015:	8d 76 00             	lea    esi,[esi+0x0]
c0022018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201c:	8b 00                	mov    eax,DWORD PTR [eax]
c002201e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022024:	85 c0                	test   eax,eax
c0022026:	75 34                	jne    c002205c <LinkedList<Device>::removeFirst()+0x8c>
c0022028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022036:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002203d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022044:	83 f8 01             	cmp    eax,0x1
c0022047:	74 27                	je     c0022070 <LinkedList<Device>::removeFirst()+0xa0>
c0022049:	83 ec 0c             	sub    esp,0xc
c002204c:	68 10 39 02 c0       	push   0xc0023910
c0022051:	e8 9e dc fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	eb 15                	jmp    c0022070 <LinkedList<Device>::removeFirst()+0xa0>
c002205b:	90                   	nop
c002205c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022060:	8b 00                	mov    eax,DWORD PTR [eax]
c0022062:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206c:	89 10                	mov    DWORD PTR [eax],edx
c002206e:	66 90                	xchg   ax,ax
c0022070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022074:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022077:	8d 50 ff             	lea    edx,[eax-0x1]
c002207a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022081:	8d 76 00             	lea    esi,[esi+0x0]
c0022084:	83 c4 0c             	add    esp,0xc
c0022087:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022088 <Computer::~Computer()>:
c0022088:	83 ec 0c             	sub    esp,0xc
c002208b:	ba e4 3e 02 c0       	mov    edx,0xc0023ee4
c0022090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022094:	89 10                	mov    DWORD PTR [eax],edx
c0022096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209a:	83 ec 0c             	sub    esp,0xc
c002209d:	50                   	push   eax
c002209e:	e8 b3 78 fe ff       	call   c0009956 <Device::~Device()>
c00220a3:	83 c4 10             	add    esp,0x10
c00220a6:	90                   	nop
c00220a7:	83 c4 0c             	add    esp,0xc
c00220aa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00220ac <Computer::~Computer()>:
c00220ac:	83 ec 0c             	sub    esp,0xc
c00220af:	83 ec 0c             	sub    esp,0xc
c00220b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b6:	e8 cd ff ff ff       	call   c0022088 <Computer::~Computer()>
c00220bb:	83 c4 10             	add    esp,0x10
c00220be:	83 ec 08             	sub    esp,0x8
c00220c1:	68 68 01 00 00       	push   0x168
c00220c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ca:	e8 e1 b2 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00220cf:	83 c4 10             	add    esp,0x10
c00220d2:	83 c4 0c             	add    esp,0xc
c00220d5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00220d6 <idleCommon()>:
c00220d6:	83 ec 0c             	sub    esp,0xc
c00220d9:	fa                   	cli    
c00220da:	ff 05 70 ca 02 c0    	inc    DWORD PTR ds:0xc002ca70
c00220e0:	e8 3b 4d ff ff       	call   c0016e20 <schedule()>
c00220e5:	f0 ff 0d 70 ca 02 c0 	lock dec DWORD PTR ds:0xc002ca70
c00220ec:	83 3d 70 ca 02 c0 00 	cmp    DWORD PTR ds:0xc002ca70,0x0
c00220f3:	75 01                	jne    c00220f6 <idleCommon()+0x20>
c00220f5:	fb                   	sti    
c00220f6:	83 c4 0c             	add    esp,0xc
c00220f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00220fa <LinkedList<UnixFile>::~LinkedList()>:
c00220fa:	90                   	nop
c00220fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00220fc <LinkedList<UnixFile>::LinkedList()>:
c00220fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022100:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002210a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022115:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002211c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022120:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002212a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022135:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002213c:	90                   	nop
c002213d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002213e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002213e:	83 ec 0c             	sub    esp,0xc
c0022141:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022146:	75 10                	jne    c0022158 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022148:	83 ec 0c             	sub    esp,0xc
c002214b:	68 50 36 02 c0       	push   0xc0023650
c0022150:	e8 9f db fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022155:	83 c4 10             	add    esp,0x10
c0022158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215c:	8b 00                	mov    eax,DWORD PTR [eax]
c002215e:	85 c0                	test   eax,eax
c0022160:	74 34                	je     c0022196 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022166:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022169:	85 c0                	test   eax,eax
c002216b:	74 29                	je     c0022196 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002216d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022171:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022178:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002217b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022183:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002218d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022194:	eb 65                	jmp    c00221fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219a:	8b 00                	mov    eax,DWORD PTR [eax]
c002219c:	85 c0                	test   eax,eax
c002219e:	75 4b                	jne    c00221eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00221a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221a7:	85 c0                	test   eax,eax
c00221a9:	75 40                	jne    c00221eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00221ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221b3:	89 10                	mov    DWORD PTR [eax],edx
c00221b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00221bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00221c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00221ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221d5:	85 c0                	test   eax,eax
c00221d7:	74 22                	je     c00221fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00221d9:	83 ec 0c             	sub    esp,0xc
c00221dc:	68 72 36 02 c0       	push   0xc0023672
c00221e1:	e8 0e db fe ff       	call   c000fcf4 <KePanic(char const*)>
c00221e6:	83 c4 10             	add    esp,0x10
c00221e9:	eb 10                	jmp    c00221fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00221eb:	83 ec 0c             	sub    esp,0xc
c00221ee:	68 7c 36 02 c0       	push   0xc002367c
c00221f3:	e8 fc da fe ff       	call   c000fcf4 <KePanic(char const*)>
c00221f8:	83 c4 10             	add    esp,0x10
c00221fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022202:	8d 50 01             	lea    edx,[eax+0x1]
c0022205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022209:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002220c:	90                   	nop
c002220d:	83 c4 0c             	add    esp,0xc
c0022210:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022212 <LinkedList<UnixFile>::getFirstElement()>:
c0022212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022216:	8b 00                	mov    eax,DWORD PTR [eax]
c0022218:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002221a <LinkedList<UnixFile>::removeFirst()>:
c002221a:	83 ec 0c             	sub    esp,0xc
c002221d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022221:	8b 00                	mov    eax,DWORD PTR [eax]
c0022223:	85 c0                	test   eax,eax
c0022225:	75 12                	jne    c0022239 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022227:	83 ec 0c             	sub    esp,0xc
c002222a:	68 ec 38 02 c0       	push   0xc00238ec
c002222f:	e8 c0 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022234:	83 c4 10             	add    esp,0x10
c0022237:	eb 7e                	jmp    c00222b7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022240:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022243:	85 c0                	test   eax,eax
c0022245:	74 10                	je     c0022257 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022247:	83 ec 0c             	sub    esp,0xc
c002224a:	68 37 39 02 c0       	push   0xc0023937
c002224f:	e8 a0 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022254:	83 c4 10             	add    esp,0x10
c0022257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225b:	8b 00                	mov    eax,DWORD PTR [eax]
c002225d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022260:	85 c0                	test   eax,eax
c0022262:	75 33                	jne    c0022297 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002226e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022272:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022280:	83 f8 01             	cmp    eax,0x1
c0022283:	74 21                	je     c00222a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022285:	83 ec 0c             	sub    esp,0xc
c0022288:	68 10 39 02 c0       	push   0xc0023910
c002228d:	e8 62 da fe ff       	call   c000fcf4 <KePanic(char const*)>
c0022292:	83 c4 10             	add    esp,0x10
c0022295:	eb 0f                	jmp    c00222a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229b:	8b 00                	mov    eax,DWORD PTR [eax]
c002229d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00222a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a4:	89 10                	mov    DWORD PTR [eax],edx
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222ad:	8d 50 ff             	lea    edx,[eax-0x1]
c00222b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00222b7:	83 c4 0c             	add    esp,0xc
c00222ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00222bc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00222bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00222c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00222c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00222c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00222cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00222cc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00222cc:	90                   	nop
c00222cd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00222d0 <ThreadControlBlock::ThreadControlBlock()>:
c00222d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00222db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222df:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00222e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ea:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00222f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222f5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00222fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022300:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0022307:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002230b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002230f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022313:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0022317:	90                   	nop
c0022318:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002231c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002231c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022320:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002232a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022331:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022335:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002233c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022340:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002234a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022355:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002235c:	90                   	nop
c002235d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002235e <IOAPIC::~IOAPIC()>:
c002235e:	83 ec 0c             	sub    esp,0xc
c0022361:	ba 98 53 02 c0       	mov    edx,0xc0025398
c0022366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236a:	89 10                	mov    DWORD PTR [eax],edx
c002236c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022370:	83 ec 0c             	sub    esp,0xc
c0022373:	50                   	push   eax
c0022374:	e8 dd 75 fe ff       	call   c0009956 <Device::~Device()>
c0022379:	83 c4 10             	add    esp,0x10
c002237c:	90                   	nop
c002237d:	83 c4 0c             	add    esp,0xc
c0022380:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0022382 <IOAPIC::~IOAPIC()>:
c0022382:	83 ec 0c             	sub    esp,0xc
c0022385:	83 ec 0c             	sub    esp,0xc
c0022388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002238c:	e8 cd ff ff ff       	call   c002235e <IOAPIC::~IOAPIC()>
c0022391:	83 c4 10             	add    esp,0x10
c0022394:	83 ec 08             	sub    esp,0x8
c0022397:	68 68 01 00 00       	push   0x168
c002239c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223a0:	e8 0b b0 fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00223a5:	83 c4 10             	add    esp,0x10
c00223a8:	83 c4 0c             	add    esp,0xc
c00223ab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00223ac <CPU::~CPU()>:
c00223ac:	83 ec 0c             	sub    esp,0xc
c00223af:	ba 0c 57 02 c0       	mov    edx,0xc002570c
c00223b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b8:	89 10                	mov    DWORD PTR [eax],edx
c00223ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223be:	83 ec 0c             	sub    esp,0xc
c00223c1:	50                   	push   eax
c00223c2:	e8 8f 75 fe ff       	call   c0009956 <Device::~Device()>
c00223c7:	83 c4 10             	add    esp,0x10
c00223ca:	90                   	nop
c00223cb:	83 c4 0c             	add    esp,0xc
c00223ce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00223d0 <CPU::~CPU()>:
c00223d0:	83 ec 0c             	sub    esp,0xc
c00223d3:	83 ec 0c             	sub    esp,0xc
c00223d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223da:	e8 cd ff ff ff       	call   c00223ac <CPU::~CPU()>
c00223df:	83 c4 10             	add    esp,0x10
c00223e2:	83 ec 08             	sub    esp,0x8
c00223e5:	68 78 11 00 00       	push   0x1178
c00223ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223ee:	e8 bd af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00223f3:	83 c4 10             	add    esp,0x10
c00223f6:	83 c4 0c             	add    esp,0xc
c00223f9:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00223fa <PCI::~PCI()>:
c00223fa:	83 ec 0c             	sub    esp,0xc
c00223fd:	ba 70 5c 02 c0       	mov    edx,0xc0025c70
c0022402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022406:	89 10                	mov    DWORD PTR [eax],edx
c0022408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240c:	83 ec 0c             	sub    esp,0xc
c002240f:	50                   	push   eax
c0022410:	e8 87 65 fe ff       	call   c000899c <Bus::~Bus()>
c0022415:	83 c4 10             	add    esp,0x10
c0022418:	90                   	nop
c0022419:	83 c4 0c             	add    esp,0xc
c002241c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002241e <PCI::~PCI()>:
c002241e:	83 ec 0c             	sub    esp,0xc
c0022421:	83 ec 0c             	sub    esp,0xc
c0022424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022428:	e8 cd ff ff ff       	call   c00223fa <PCI::~PCI()>
c002242d:	83 c4 10             	add    esp,0x10
c0022430:	83 ec 08             	sub    esp,0x8
c0022433:	68 5c 01 00 00       	push   0x15c
c0022438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002243c:	e8 6f af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022441:	83 c4 10             	add    esp,0x10
c0022444:	83 c4 0c             	add    esp,0xc
c0022447:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022448 <IDE::~IDE()>:
c0022448:	83 ec 0c             	sub    esp,0xc
c002244b:	ba c0 5d 02 c0       	mov    edx,0xc0025dc0
c0022450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022454:	89 10                	mov    DWORD PTR [eax],edx
c0022456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245a:	83 ec 0c             	sub    esp,0xc
c002245d:	50                   	push   eax
c002245e:	e8 81 79 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c0022463:	83 c4 10             	add    esp,0x10
c0022466:	90                   	nop
c0022467:	83 c4 0c             	add    esp,0xc
c002246a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002246c <IDE::~IDE()>:
c002246c:	83 ec 0c             	sub    esp,0xc
c002246f:	83 ec 0c             	sub    esp,0xc
c0022472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022476:	e8 cd ff ff ff       	call   c0022448 <IDE::~IDE()>
c002247b:	83 c4 10             	add    esp,0x10
c002247e:	83 ec 08             	sub    esp,0x8
c0022481:	68 70 02 00 00       	push   0x270
c0022486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002248a:	e8 21 af fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c002248f:	83 c4 10             	add    esp,0x10
c0022492:	83 c4 0c             	add    esp,0xc
c0022495:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022496 <SATABus::~SATABus()>:
c0022496:	83 ec 0c             	sub    esp,0xc
c0022499:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c002249e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a2:	89 10                	mov    DWORD PTR [eax],edx
c00224a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a8:	83 ec 0c             	sub    esp,0xc
c00224ab:	50                   	push   eax
c00224ac:	e8 33 79 fe ff       	call   c0009de4 <HardDiskController::~HardDiskController()>
c00224b1:	83 c4 10             	add    esp,0x10
c00224b4:	90                   	nop
c00224b5:	83 c4 0c             	add    esp,0xc
c00224b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00224ba <SATABus::~SATABus()>:
c00224ba:	83 ec 0c             	sub    esp,0xc
c00224bd:	83 ec 0c             	sub    esp,0xc
c00224c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224c4:	e8 cd ff ff ff       	call   c0022496 <SATABus::~SATABus()>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	83 ec 08             	sub    esp,0x8
c00224cf:	68 64 01 00 00       	push   0x164
c00224d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224d8:	e8 d3 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00224dd:	83 c4 10             	add    esp,0x10
c00224e0:	83 c4 0c             	add    esp,0xc
c00224e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00224e4 <ATA::~ATA()>:
c00224e4:	83 ec 0c             	sub    esp,0xc
c00224e7:	ba f8 5e 02 c0       	mov    edx,0xc0025ef8
c00224ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f0:	89 10                	mov    DWORD PTR [eax],edx
c00224f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f6:	83 ec 0c             	sub    esp,0xc
c00224f9:	50                   	push   eax
c00224fa:	e8 c7 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00224ff:	83 c4 10             	add    esp,0x10
c0022502:	90                   	nop
c0022503:	83 c4 0c             	add    esp,0xc
c0022506:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022508 <ATA::~ATA()>:
c0022508:	83 ec 0c             	sub    esp,0xc
c002250b:	83 ec 0c             	sub    esp,0xc
c002250e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022512:	e8 cd ff ff ff       	call   c00224e4 <ATA::~ATA()>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	83 ec 08             	sub    esp,0x8
c002251d:	68 8c 01 00 00       	push   0x18c
c0022522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022526:	e8 85 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c002252b:	83 c4 10             	add    esp,0x10
c002252e:	83 c4 0c             	add    esp,0xc
c0022531:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0022532 <ATAPI::~ATAPI()>:
c0022532:	83 ec 0c             	sub    esp,0xc
c0022535:	ba 40 5f 02 c0       	mov    edx,0xc0025f40
c002253a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253e:	89 10                	mov    DWORD PTR [eax],edx
c0022540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022544:	83 ec 0c             	sub    esp,0xc
c0022547:	50                   	push   eax
c0022548:	e8 79 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002254d:	83 c4 10             	add    esp,0x10
c0022550:	90                   	nop
c0022551:	83 c4 0c             	add    esp,0xc
c0022554:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0022556 <ATAPI::~ATAPI()>:
c0022556:	83 ec 0c             	sub    esp,0xc
c0022559:	83 ec 0c             	sub    esp,0xc
c002255c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022560:	e8 cd ff ff ff       	call   c0022532 <ATAPI::~ATAPI()>
c0022565:	83 c4 10             	add    esp,0x10
c0022568:	83 ec 08             	sub    esp,0x8
c002256b:	68 84 01 00 00       	push   0x184
c0022570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022574:	e8 37 ae fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022579:	83 c4 10             	add    esp,0x10
c002257c:	83 c4 0c             	add    esp,0xc
c002257f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022580 <SATA::~SATA()>:
c0022580:	83 ec 0c             	sub    esp,0xc
c0022583:	ba 00 60 02 c0       	mov    edx,0xc0026000
c0022588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002258c:	89 10                	mov    DWORD PTR [eax],edx
c002258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022592:	83 ec 0c             	sub    esp,0xc
c0022595:	50                   	push   eax
c0022596:	e8 2b 79 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c002259b:	83 c4 10             	add    esp,0x10
c002259e:	90                   	nop
c002259f:	83 c4 0c             	add    esp,0xc
c00225a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00225a4 <SATA::~SATA()>:
c00225a4:	83 ec 0c             	sub    esp,0xc
c00225a7:	83 ec 0c             	sub    esp,0xc
c00225aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225ae:	e8 cd ff ff ff       	call   c0022580 <SATA::~SATA()>
c00225b3:	83 c4 10             	add    esp,0x10
c00225b6:	83 ec 08             	sub    esp,0x8
c00225b9:	68 7c 01 00 00       	push   0x17c
c00225be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225c2:	e8 e9 ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00225c7:	83 c4 10             	add    esp,0x10
c00225ca:	83 c4 0c             	add    esp,0xc
c00225cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00225ce <SATAPI::~SATAPI()>:
c00225ce:	83 ec 0c             	sub    esp,0xc
c00225d1:	ba 24 61 02 c0       	mov    edx,0xc0026124
c00225d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225da:	89 10                	mov    DWORD PTR [eax],edx
c00225dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e0:	83 ec 0c             	sub    esp,0xc
c00225e3:	50                   	push   eax
c00225e4:	e8 dd 78 fe ff       	call   c0009ec6 <PhysicalDisk::~PhysicalDisk()>
c00225e9:	83 c4 10             	add    esp,0x10
c00225ec:	90                   	nop
c00225ed:	83 c4 0c             	add    esp,0xc
c00225f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00225f2 <SATAPI::~SATAPI()>:
c00225f2:	83 ec 0c             	sub    esp,0xc
c00225f5:	83 ec 0c             	sub    esp,0xc
c00225f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225fc:	e8 cd ff ff ff       	call   c00225ce <SATAPI::~SATAPI()>
c0022601:	83 c4 10             	add    esp,0x10
c0022604:	83 ec 08             	sub    esp,0x8
c0022607:	68 84 01 00 00       	push   0x184
c002260c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022610:	e8 9b ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022615:	83 c4 10             	add    esp,0x10
c0022618:	83 c4 0c             	add    esp,0xc
c002261b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002261c <APICTimer::~APICTimer()>:
c002261c:	83 ec 0c             	sub    esp,0xc
c002261f:	ba 78 61 02 c0       	mov    edx,0xc0026178
c0022624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022628:	89 10                	mov    DWORD PTR [eax],edx
c002262a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002262e:	83 ec 0c             	sub    esp,0xc
c0022631:	50                   	push   eax
c0022632:	e8 5d 8a fe ff       	call   c000b094 <Timer::~Timer()>
c0022637:	83 c4 10             	add    esp,0x10
c002263a:	90                   	nop
c002263b:	83 c4 0c             	add    esp,0xc
c002263e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022640 <APICTimer::~APICTimer()>:
c0022640:	83 ec 0c             	sub    esp,0xc
c0022643:	83 ec 0c             	sub    esp,0xc
c0022646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002264a:	e8 cd ff ff ff       	call   c002261c <APICTimer::~APICTimer()>
c002264f:	83 c4 10             	add    esp,0x10
c0022652:	83 ec 08             	sub    esp,0x8
c0022655:	68 60 01 00 00       	push   0x160
c002265a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002265e:	e8 4d ad fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c0022663:	83 c4 10             	add    esp,0x10
c0022666:	83 c4 0c             	add    esp,0xc
c0022669:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002266c <PIT::~PIT()>:
c002266c:	83 ec 0c             	sub    esp,0xc
c002266f:	ba c8 61 02 c0       	mov    edx,0xc00261c8
c0022674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022678:	89 10                	mov    DWORD PTR [eax],edx
c002267a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002267e:	83 ec 0c             	sub    esp,0xc
c0022681:	50                   	push   eax
c0022682:	e8 0d 8a fe ff       	call   c000b094 <Timer::~Timer()>
c0022687:	83 c4 10             	add    esp,0x10
c002268a:	90                   	nop
c002268b:	83 c4 0c             	add    esp,0xc
c002268e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022690 <PIT::~PIT()>:
c0022690:	83 ec 0c             	sub    esp,0xc
c0022693:	83 ec 0c             	sub    esp,0xc
c0022696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002269a:	e8 cd ff ff ff       	call   c002266c <PIT::~PIT()>
c002269f:	83 c4 10             	add    esp,0x10
c00226a2:	83 ec 08             	sub    esp,0x8
c00226a5:	68 5c 01 00 00       	push   0x15c
c00226aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ae:	e8 fd ac fe ff       	call   c000d3b0 <operator delete(void*, unsigned long)>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	83 c4 0c             	add    esp,0xc
c00226b9:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be db 43 02 c0       	mov    esi,0xc00243db
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be f7 43 02 c0       	mov    esi,0xc00243f7
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
