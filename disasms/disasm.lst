
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8b eb 00 00       	call   c000ebab <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000025:	3d 48 45 02 c0       	cmp    eax,0xc0024548
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 45 02 c0       	push   0xc0024548
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 45 02 c0       	mov    eax,0xc0024548
c0000051:	2d 48 45 02 c0       	sub    eax,0xc0024548
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 45 02 c0       	push   0xc0024548
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d0 07 02 c0       	mov    ebx,0xc00207d0
c0000097:	81 eb cc 07 02 c0    	sub    ebx,0xc00207cc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be cc 07 02 c0       	mov    esi,0xc00207cc
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 45 02 c0       	push   0xc0024548
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 48 45 02 c0       	push   0xc0024548
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 23 4a 01 00       	call   c0014cd0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 96 2d 01 00       	call   c001305b <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 01 4a 01 00       	call   c0014cd0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 4f 01 00       	call   c00151fc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c1 53 01 00       	call   c00156b8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3a e4 00 00       	jmp    c000e7b9 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf820],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf820],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf820],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 07 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf820],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf820],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 99 da 00 00       	call   c000e8f9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 a6 d9 00 00       	call   c000e89b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 85 d8 00 00       	call   c000e865 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 80 d8 00 00       	call   c000e89b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 2c d7 00 00       	call   c000e865 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 12 d7 00 00       	call   c000e865 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 e8 d6 00 00       	call   c000e865 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00012e5:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c0001321:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001326:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001334:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001385:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013a0:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c000145a:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c0001460:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001467:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000152d:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001533:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c000153a:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf71c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 f1 82 01 00       	jmp    c001a27c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 1b 83 01 00       	jmp    c001a2bc <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 3c 83 01 00       	jmp    c001a2fc <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 0a 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf5c0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 0a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf5c0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba a0 31 02 c0       	mov    edx,0xc00231a0
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 08 02 c0       	mov    edx,0xc00208fc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 09 02 c0       	mov    eax,0xc0020902
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf640]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 09 02 c0       	mov    eax,0xc002090b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 0a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf5c0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 09 02 c0       	mov    eax,0xc0020990
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 09 02 c0       	mov    ebx,0xc0020980
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 09 02 c0       	mov    eax,0xc0020960
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 09 02 c0       	mov    eax,0xc0020970
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 09 02 c0       	mov    edx,0xc0020912
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 09 02 c0       	mov    edx,0xc002091e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 09 02 c0       	mov    edx,0xc0020932
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 64 8b 00 00       	call   c000e97b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 5c 8b 00 00       	call   c000e98b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d60
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d60
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 0b 02 c0       	mov    eax,0xc0020b60
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 0a 02 c0       	mov    eax,0xc0020aa0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf5a0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 0e 02 c0       	push   0xc0020e60
c0006303:	e8 10 49 01 00       	call   c001ac18 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 0e 02 c0       	push   0xc0020e6e
c000633b:	e8 d8 48 01 00       	call   c001ac18 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 41 48 01 00       	call   c001abbc <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 0e 02 c0       	push   0xc0020e7d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c0006746:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000674c:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006768:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067e1:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068d9:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c0006917:	05 40 65 02 c0       	add    eax,0xc0026540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069d6:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 0e 02 c0       	push   0xc0020e80
c00069fa:	e8 19 42 01 00       	call   c001ac18 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 2d 42 01 00       	call   c001ac34 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e85
c0006a14:	e8 ff 41 01 00       	call   c001ac18 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a20:	e8 0f 42 01 00       	call   c001ac34 <iso_kprintfd>
c0006a25:	c7 04 24 8b 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e8b
c0006a2c:	e8 e7 41 01 00       	call   c001ac18 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a38:	e8 f7 41 01 00       	call   c001ac34 <iso_kprintfd>
c0006a3d:	c7 04 24 91 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e91
c0006a44:	e8 cf 41 01 00       	call   c001ac18 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a50:	e8 df 41 01 00       	call   c001ac34 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006ab6:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c0006b12:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 0e 02 c0       	push   0xc0020e7d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006bee:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006bf4:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 65 02 c0       	add    eax,0xc0026550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 0e 02 c0       	push   0xc0020e9a
c0006c19:	e8 fa 3f 01 00       	call   c001ac18 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c4e:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 0e 02 c0       	push   0xc0020ea5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 0e 02 c0       	push   0xc0020eac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006cec:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d0f:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 0e 02 c0       	push   0xc0020eb3
c0006d30:	e8 e3 3e 01 00       	call   c001ac18 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 0e 02 c0       	push   0xc0020ebe
c0006d4b:	e8 c8 3e 01 00       	call   c001ac18 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 65 02 c0       	push   0xc0026540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d75:	e8 01 7c 00 00       	call   c000e97b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d86:	e8 f0 7b 00 00       	call   c000e97b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 db 7b 00 00       	call   c000e97b <malloc>
c0006da0:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 c2 7b 00 00       	call   c000e97b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006de6:	e8 a0 7b 00 00       	call   c000e98b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 92 7b 00 00       	call   c000e98b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 78 7b 00 00       	call   c000e98b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 63 7b 00 00       	call   c000e98b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e35:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 0e 02 c0       	mov    esi,0xc0020ed0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 0e 02 c0       	mov    al,ds:0xc0020ecf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 e0 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf120]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 30 10 02 c0       	push   0xc0021030
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 44 10 02 c0       	push   0xc0021044
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 4e 10 02 c0       	push   0xc002104e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 58 10 02 c0       	push   0xc0021058
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 9c 11 02 c0       	push   0xc002119c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 62 10 02 c0       	push   0xc0021062
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 bc 11 02 c0       	push   0xc00211bc
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 77 10 02 c0       	push   0xc0021077
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 91 10 02 c0       	push   0xc0021091
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 00 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc500]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 e4 11 02 c0       	push   0xc00211e4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 9c 11 02 c0       	push   0xc002119c
c00071d4:	e8 e9 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 2c 12 02 c0       	push   0xc002122c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 2c 12 02 c0       	push   0xc002122c
c0007203:	e8 ba 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 9c 10 02 c0       	push   0xc002109c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 9c 10 02 c0       	push   0xc002109c
c000722f:	e8 8e 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 b9 10 02 c0       	push   0xc00210b9
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 b9 10 02 c0       	push   0xc00210b9
c000725b:	e8 62 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 4c 12 02 c0       	push   0xc002124c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 4c 12 02 c0       	push   0xc002124c
c0007287:	e8 36 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 70 12 02 c0       	push   0xc0021270
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 70 12 02 c0       	push   0xc0021270
c00072b3:	e8 0a 7a 00 00       	call   c000ecc2 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 d5 10 02 c0       	push   0xc00210d5
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 d5 10 02 c0       	push   0xc00210d5
c00072df:	e8 de 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 f1 10 02 c0       	push   0xc00210f1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 f1 10 02 c0       	push   0xc00210f1
c000730b:	e8 b2 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 90 12 02 c0       	push   0xc0021290
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 90 12 02 c0       	push   0xc0021290
c0007337:	e8 86 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 b4 12 02 c0       	push   0xc00212b4
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 b4 12 02 c0       	push   0xc00212b4
c0007363:	e8 5a 79 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 b1 75 00 00       	call   c000e97b <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073d5:	68 d3 12 02 c0       	push   0xc00212d3
c00073da:	50                   	push   eax
c00073db:	e8 32 0d 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 f1 12 02 c0       	push   0xc00212f1
c00073ef:	e8 ce 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 2f 0d 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 0b 13 02 c0       	push   0xc002130b
c0007410:	e8 ad 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 25 13 02 c0       	push   0xc0021325
c0007457:	e8 66 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 3f 13 02 c0       	push   0xc002133f
c0007487:	e8 36 78 00 00       	call   c000ecc2 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 f3 0c 00 00       	call   c000818e <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 b4 62 00 00       	call   c000d78d <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 a3 81 00 00       	call   c000f696 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 59 13 02 c0       	push   0xc0021359
c000752c:	e8 91 77 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 73 02 c0       	push   0xc0027300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 69 4f 00 00       	call   c000c57a <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 5e 73 00 00       	call   c000e97b <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007628:	68 d3 12 02 c0       	push   0xc00212d3
c000762d:	50                   	push   eax
c000762e:	e8 df 0a 00 00       	call   c0008112 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 62 13 02 c0       	push   0xc0021362
c0007642:	e8 7b 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 a1 0d 00 00       	call   c00083f4 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 cc 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 7f 13 02 c0       	push   0xc002137f
c0007673:	e8 4a 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 0a 0b 00 00       	call   c000818e <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 92 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 9c 13 02 c0       	push   0xc002139c
c00076ad:	e8 10 76 00 00       	call   c000ecc2 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 70 0a 00 00       	call   c000818e <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007790:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 cf 71 00 00       	call   c000e97b <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00077b7:	68 d3 12 02 c0       	push   0xc00212d3
c00077bc:	50                   	push   eax
c00077bd:	e8 50 09 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 b7 13 02 c0       	push   0xc00213b7
c00077d1:	e8 ec 74 00 00       	call   c000ecc2 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 10 0c 00 00       	call   c00083f4 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 3b 09 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 d2 13 02 c0       	push   0xc00213d2
c0007804:	e8 b9 74 00 00       	call   c000ecc2 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 25 09 00 00       	call   c000818e <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 07 09 00 00       	call   c000818e <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 a8 70 00 00       	call   c000e97b <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 2d 08 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 36 08 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 9d 0a 00 00       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 77 07 00 00       	call   c000818e <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 5e 07 00 00       	call   c000818e <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 1e 6f 00 00       	call   c000e97b <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 a5 06 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be ed 13 02 c0       	mov    esi,0xc00213ed
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 3a 06 00 00       	call   c000818e <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 22 06 00 00       	call   c000818e <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba ac 14 02 c0       	mov    edx,0xc00214ac
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 d7 a0 00 00       	call   c0011dc6 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 e5 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 89 a0 00 00       	call   c0011dc6 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 97 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 40 14 02 c0       	mov    edx,0xc0021440
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 40 14 02 c0       	mov    edx,0xc0021440
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 41 49 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 81 6b 00 00       	call   c000e97b <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 16 26 01 00       	call   c001a418 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 6d 6b 00 00       	call   c000e97b <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 2e 35 01 00       	call   c001b344 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 d4 2a 02 c0       	push   0xc0022ad4
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 f6 13 02 c0       	push   0xc00213f6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 11 14 02 c0       	push   0xc0021411
c000801f:	e8 9e 6c 00 00       	call   c000ecc2 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 92 9b 00 00       	call   c0011be0 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba ac 14 02 c0       	mov    edx,0xc00214ac
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080a0:	83 e8 41             	sub    eax,0x41
c00080a3:	88 c2                	mov    dl,al
c00080a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080c1:	0f b6 c0             	movzx  eax,al
c00080c4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080cb:	85 c0                	test   eax,eax
c00080cd:	74 3e                	je     c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d9:	0f b6 c0             	movzx  eax,al
c00080dc:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e9:	85 c0                	test   eax,eax
c00080eb:	75 20                	jne    c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f7:	0f b6 c0             	movzx  eax,al
c00080fa:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008101:	83 ec 0c             	sub    esp,0xc
c0008104:	50                   	push   eax
c0008105:	e8 00 1f 00 00       	call   c000a00a <LogicalDisk::mount()>
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	90                   	nop
c000810e:	83 c4 1c             	add    esp,0x1c
c0008111:	c3                   	ret    

c0008112 <File::File(char const*, Process*)>:
c0008112:	83 ec 0c             	sub    esp,0xc
c0008115:	6a 01                	push   0x1
c0008117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008123:	e8 0c ff ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008128:	83 c4 10             	add    esp,0x10
c000812b:	90                   	nop
c000812c:	83 c4 0c             	add    esp,0xc
c000812f:	c3                   	ret    

c0008130 <File::open(FileOpenMode)>:
c0008130:	53                   	push   ebx
c0008131:	b8 0b 00 00 00       	mov    eax,0xb
c0008136:	83 ec 08             	sub    esp,0x8
c0008139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000813d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008144:	83 fa 19             	cmp    edx,0x19
c0008147:	77 40                	ja     c0008189 <File::open(FileOpenMode)+0x59>
c0008149:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008150:	85 d2                	test   edx,edx
c0008152:	74 35                	je     c0008189 <File::open(FileOpenMode)+0x59>
c0008154:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000815a:	85 d2                	test   edx,edx
c000815c:	74 2b                	je     c0008189 <File::open(FileOpenMode)+0x59>
c000815e:	b8 06 00 00 00       	mov    eax,0x6
c0008163:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008167:	75 20                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008169:	8b 02                	mov    eax,DWORD PTR [edx]
c000816b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008175:	51                   	push   ecx
c0008176:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008179:	51                   	push   ecx
c000817a:	52                   	push   edx
c000817b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	85 c0                	test   eax,eax
c0008183:	75 04                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008185:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008189:	83 c4 08             	add    esp,0x8
c000818c:	5b                   	pop    ebx
c000818d:	c3                   	ret    

c000818e <File::close()>:
c000818e:	53                   	push   ebx
c000818f:	b8 0b 00 00 00       	mov    eax,0xb
c0008194:	83 ec 08             	sub    esp,0x8
c0008197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000819b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081a2:	83 f9 19             	cmp    ecx,0x19
c00081a5:	77 41                	ja     c00081e8 <File::close()+0x5a>
c00081a7:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081ae:	85 db                	test   ebx,ebx
c00081b0:	74 36                	je     c00081e8 <File::close()+0x5a>
c00081b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b9:	74 2d                	je     c00081e8 <File::close()+0x5a>
c00081bb:	b8 05 00 00 00       	mov    eax,0x5
c00081c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081c4:	74 22                	je     c00081e8 <File::close()+0x5a>
c00081c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ca:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d7:	53                   	push   ebx
c00081d8:	53                   	push   ebx
c00081d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081e1:	50                   	push   eax
c00081e2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	83 c4 08             	add    esp,0x8
c00081eb:	5b                   	pop    ebx
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <File::seek(unsigned long long)>:
c00081ee:	56                   	push   esi
c00081ef:	53                   	push   ebx
c00081f0:	b8 0b 00 00 00       	mov    eax,0xb
c00081f5:	51                   	push   ecx
c00081f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008205:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008209:	83 fa 19             	cmp    edx,0x19
c000820c:	77 31                	ja     c000823f <File::seek(unsigned long long)+0x51>
c000820e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008215:	85 d2                	test   edx,edx
c0008217:	74 26                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008219:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000821f:	85 d2                	test   edx,edx
c0008221:	74 1c                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008223:	b8 05 00 00 00       	mov    eax,0x5
c0008228:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000822c:	74 11                	je     c000823f <File::seek(unsigned long long)+0x51>
c000822e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008230:	53                   	push   ebx
c0008231:	51                   	push   ecx
c0008232:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008238:	52                   	push   edx
c0008239:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	5a                   	pop    edx
c0008240:	5b                   	pop    ebx
c0008241:	5e                   	pop    esi
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <File::truncate(unsigned long long)>:
c0008244:	56                   	push   esi
c0008245:	53                   	push   ebx
c0008246:	b8 0b 00 00 00       	mov    eax,0xb
c000824b:	51                   	push   ecx
c000824c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008254:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000825b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000825f:	83 fa 19             	cmp    edx,0x19
c0008262:	77 31                	ja     c0008295 <File::truncate(unsigned long long)+0x51>
c0008264:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000826b:	85 d2                	test   edx,edx
c000826d:	74 26                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c000826f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008275:	85 d2                	test   edx,edx
c0008277:	74 1c                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008279:	b8 05 00 00 00       	mov    eax,0x5
c000827e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008282:	74 11                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 02                	mov    eax,DWORD PTR [edx]
c0008286:	53                   	push   ebx
c0008287:	51                   	push   ecx
c0008288:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828e:	52                   	push   edx
c000828f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	5a                   	pop    edx
c0008296:	5b                   	pop    ebx
c0008297:	5e                   	pop    esi
c0008298:	c3                   	ret    
c0008299:	90                   	nop

c000829a <File::tell(unsigned long long*)>:
c000829a:	83 ec 0c             	sub    esp,0xc
c000829d:	b8 0b 00 00 00       	mov    eax,0xb
c00082a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082ad:	83 fa 19             	cmp    edx,0x19
c00082b0:	77 34                	ja     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082b2:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b9:	85 d2                	test   edx,edx
c00082bb:	74 29                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c3:	85 d2                	test   edx,edx
c00082c5:	74 1f                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082c7:	b8 05 00 00 00       	mov    eax,0x5
c00082cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082d0:	74 14                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082d2:	50                   	push   eax
c00082d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082df:	52                   	push   edx
c00082e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082e3:	83 c4 10             	add    esp,0x10
c00082e6:	83 c4 0c             	add    esp,0xc
c00082e9:	c3                   	ret    

c00082ea <File::rewind()>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	6a 00                	push   0x0
c00082ef:	6a 00                	push   0x0
c00082f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f5:	e8 f4 fe ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00082fa:	83 c4 1c             	add    esp,0x1c
c00082fd:	c3                   	ret    

c00082fe <File::unlink()>:
c00082fe:	83 ec 0c             	sub    esp,0xc
c0008301:	b8 0b 00 00 00       	mov    eax,0xb
c0008306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000830a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008311:	83 f9 19             	cmp    ecx,0x19
c0008314:	77 2f                	ja     c0008345 <File::unlink()+0x47>
c0008316:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000831d:	85 c9                	test   ecx,ecx
c000831f:	74 24                	je     c0008345 <File::unlink()+0x47>
c0008321:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008327:	85 c9                	test   ecx,ecx
c0008329:	74 1a                	je     c0008345 <File::unlink()+0x47>
c000832b:	b8 06 00 00 00       	mov    eax,0x6
c0008330:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008334:	75 0f                	jne    c0008345 <File::unlink()+0x47>
c0008336:	83 c2 0d             	add    edx,0xd
c0008339:	50                   	push   eax
c000833a:	50                   	push   eax
c000833b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000833d:	52                   	push   edx
c000833e:	51                   	push   ecx
c000833f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008342:	83 c4 10             	add    esp,0x10
c0008345:	83 c4 0c             	add    esp,0xc
c0008348:	c3                   	ret    
c0008349:	90                   	nop

c000834a <File::rename(char const*)>:
c000834a:	83 ec 0c             	sub    esp,0xc
c000834d:	b8 0b 00 00 00       	mov    eax,0xb
c0008352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000835d:	83 f9 19             	cmp    ecx,0x19
c0008360:	77 32                	ja     c0008394 <File::rename(char const*)+0x4a>
c0008362:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008369:	85 c9                	test   ecx,ecx
c000836b:	74 27                	je     c0008394 <File::rename(char const*)+0x4a>
c000836d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008373:	85 c9                	test   ecx,ecx
c0008375:	74 1d                	je     c0008394 <File::rename(char const*)+0x4a>
c0008377:	b8 06 00 00 00       	mov    eax,0x6
c000837c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008380:	75 12                	jne    c0008394 <File::rename(char const*)+0x4a>
c0008382:	83 c2 0d             	add    edx,0xd
c0008385:	50                   	push   eax
c0008386:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000838c:	52                   	push   edx
c000838d:	51                   	push   ecx
c000838e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008391:	83 c4 10             	add    esp,0x10
c0008394:	83 c4 0c             	add    esp,0xc
c0008397:	c3                   	ret    

c0008398 <File::chfatattr(unsigned char, unsigned char)>:
c0008398:	57                   	push   edi
c0008399:	b8 0b 00 00 00       	mov    eax,0xb
c000839e:	56                   	push   esi
c000839f:	53                   	push   ebx
c00083a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083b3:	83 f9 19             	cmp    ecx,0x19
c00083b6:	77 37                	ja     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083bf:	85 c9                	test   ecx,ecx
c00083c1:	74 2c                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c9:	85 c9                	test   ecx,ecx
c00083cb:	74 22                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083cd:	b8 06 00 00 00       	mov    eax,0x6
c00083d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083d6:	75 17                	jne    c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083da:	89 f0                	mov    eax,esi
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	0f b6 f0             	movzx  esi,al
c00083e2:	0f b6 db             	movzx  ebx,bl
c00083e5:	56                   	push   esi
c00083e6:	53                   	push   ebx
c00083e7:	52                   	push   edx
c00083e8:	51                   	push   ecx
c00083e9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	5b                   	pop    ebx
c00083f0:	5e                   	pop    esi
c00083f1:	5f                   	pop    edi
c00083f2:	c3                   	ret    
c00083f3:	90                   	nop

c00083f4 <File::exists()>:
c00083f4:	83 ec 0c             	sub    esp,0xc
c00083f7:	31 c0                	xor    eax,eax
c00083f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008404:	83 f9 19             	cmp    ecx,0x19
c0008407:	77 24                	ja     c000842d <File::exists()+0x39>
c0008409:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008410:	85 c9                	test   ecx,ecx
c0008412:	74 19                	je     c000842d <File::exists()+0x39>
c0008414:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841a:	85 c9                	test   ecx,ecx
c000841c:	74 0f                	je     c000842d <File::exists()+0x39>
c000841e:	83 c2 0d             	add    edx,0xd
c0008421:	50                   	push   eax
c0008422:	50                   	push   eax
c0008423:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008425:	52                   	push   edx
c0008426:	51                   	push   ecx
c0008427:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000842a:	83 c4 10             	add    esp,0x10
c000842d:	83 c4 0c             	add    esp,0xc
c0008430:	c3                   	ret    
c0008431:	90                   	nop

c0008432 <File::stat(unsigned long long*, bool*)>:
c0008432:	56                   	push   esi
c0008433:	53                   	push   ebx
c0008434:	50                   	push   eax
c0008435:	b8 0b 00 00 00       	mov    eax,0xb
c000843a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000843e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008442:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000844d:	83 f9 19             	cmp    ecx,0x19
c0008450:	77 3d                	ja     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008452:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008459:	85 c9                	test   ecx,ecx
c000845b:	74 32                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c000845d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008463:	85 c9                	test   ecx,ecx
c0008465:	74 28                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008467:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008469:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000846d:	74 13                	je     c0008482 <File::stat(unsigned long long*, bool*)+0x50>
c000846f:	83 ec 04             	sub    esp,0x4
c0008472:	56                   	push   esi
c0008473:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008479:	51                   	push   ecx
c000847a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000847d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008480:	eb 0a                	jmp    c000848c <File::stat(unsigned long long*, bool*)+0x5a>
c0008482:	53                   	push   ebx
c0008483:	83 c2 0d             	add    edx,0xd
c0008486:	56                   	push   esi
c0008487:	52                   	push   edx
c0008488:	51                   	push   ecx
c0008489:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	5a                   	pop    edx
c0008490:	5b                   	pop    ebx
c0008491:	5e                   	pop    esi
c0008492:	c3                   	ret    

c0008493 <Fs::setcwd(Process*, char*)>:
c0008493:	55                   	push   ebp
c0008494:	57                   	push   edi
c0008495:	56                   	push   esi
c0008496:	53                   	push   ebx
c0008497:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000849d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084a4:	6a 00                	push   0x0
c00084a6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084ac:	57                   	push   edi
c00084ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084b4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b8:	56                   	push   esi
c00084b9:	e8 5c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084be:	89 34 24             	mov    DWORD PTR [esp],esi
c00084c1:	e8 aa 80 ff ff       	call   c0000570 <strlen>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	83 f8 02             	cmp    eax,0x2
c00084cc:	77 15                	ja     c00084e3 <Fs::setcwd(Process*, char*)+0x50>
c00084ce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084d3:	83 eb 41             	sub    ebx,0x41
c00084d6:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084dd:	85 c0                	test   eax,eax
c00084df:	75 1c                	jne    c00084fd <Fs::setcwd(Process*, char*)+0x6a>
c00084e1:	eb 2f                	jmp    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	56                   	push   esi
c00084e7:	e8 84 80 ff ff       	call   c0000570 <strlen>
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	83 f8 03             	cmp    eax,0x3
c00084f2:	75 57                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f9:	75 50                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084fb:	eb d1                	jmp    c00084ce <Fs::setcwd(Process*, char*)+0x3b>
c00084fd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008504:	75 0c                	jne    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c0008506:	83 ec 0c             	sub    esp,0xc
c0008509:	50                   	push   eax
c000850a:	e8 fb 1a 00 00       	call   c000a00a <LogicalDisk::mount()>
c000850f:	83 c4 10             	add    esp,0x10
c0008512:	b8 03 00 00 00       	mov    eax,0x3
c0008517:	83 fb 19             	cmp    ebx,0x19
c000851a:	0f 87 c6 00 00 00    	ja     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008520:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008527:	b8 05 00 00 00       	mov    eax,0x5
c000852c:	85 d2                	test   edx,edx
c000852e:	0f 84 b2 00 00 00    	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008534:	b8 06 00 00 00       	mov    eax,0x6
c0008539:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008540:	0f 85 92 00 00 00    	jne    c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c0008546:	e9 9b 00 00 00       	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c000854b:	83 ec 0c             	sub    esp,0xc
c000854e:	68 14 01 00 00       	push   0x114
c0008553:	e8 23 64 00 00       	call   c000e97b <malloc>
c0008558:	83 c4 0c             	add    esp,0xc
c000855b:	89 c3                	mov    ebx,eax
c000855d:	55                   	push   ebp
c000855e:	56                   	push   esi
c000855f:	50                   	push   eax
c0008560:	e8 ad fb ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0008565:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000856a:	83 c4 0c             	add    esp,0xc
c000856d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008571:	50                   	push   eax
c0008572:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008576:	50                   	push   eax
c0008577:	53                   	push   ebx
c0008578:	e8 b5 fe ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	83 f8 02             	cmp    eax,0x2
c0008583:	74 27                	je     c00085ac <Fs::setcwd(Process*, char*)+0x119>
c0008585:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000858a:	75 1c                	jne    c00085a8 <Fs::setcwd(Process*, char*)+0x115>
c000858c:	b8 02 00 00 00       	mov    eax,0x2
c0008591:	85 db                	test   ebx,ebx
c0008593:	74 51                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000859a:	53                   	push   ebx
c000859b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000859e:	83 c4 10             	add    esp,0x10
c00085a1:	b8 02 00 00 00       	mov    eax,0x2
c00085a6:	eb 3e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085a8:	85 c0                	test   eax,eax
c00085aa:	74 1c                	je     c00085c8 <Fs::setcwd(Process*, char*)+0x135>
c00085ac:	b8 01 00 00 00       	mov    eax,0x1
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 31                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 01 00 00 00       	mov    eax,0x1
c00085c6:	eb 1e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 db                	test   ebx,ebx
c00085ca:	74 0c                	je     c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c00085cc:	83 ec 0c             	sub    esp,0xc
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	53                   	push   ebx
c00085d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	50                   	push   eax
c00085d9:	50                   	push   eax
c00085da:	56                   	push   esi
c00085db:	57                   	push   edi
c00085dc:	e8 5f 80 ff ff       	call   c0000640 <strcpy>
c00085e1:	83 c4 10             	add    esp,0x10
c00085e4:	31 c0                	xor    eax,eax
c00085e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085ec:	5b                   	pop    ebx
c00085ed:	5e                   	pop    esi
c00085ee:	5f                   	pop    edi
c00085ef:	5d                   	pop    ebp
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <Directory::Directory(char const*, Process*)>:
c00085f2:	83 ec 0c             	sub    esp,0xc
c00085f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f9:	83 ec 08             	sub    esp,0x8
c00085fc:	6a 00                	push   0x0
c00085fe:	50                   	push   eax
c00085ff:	e8 dc 95 00 00       	call   c0011be0 <UnixFile::UnixFile(int)>
c0008604:	83 c4 10             	add    esp,0x10
c0008607:	ba c8 14 02 c0       	mov    edx,0xc00214c8
c000860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008610:	89 10                	mov    DWORD PTR [eax],edx
c0008612:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008617:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000861b:	0f 95 c0             	setne  al
c000861e:	0f b6 c0             	movzx  eax,al
c0008621:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008625:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000862b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000862f:	83 c2 0d             	add    edx,0xd
c0008632:	50                   	push   eax
c0008633:	51                   	push   ecx
c0008634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008638:	52                   	push   edx
c0008639:	e8 dc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000863e:	83 c4 10             	add    esp,0x10
c0008641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008645:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008648:	83 e8 41             	sub    eax,0x41
c000864b:	88 c2                	mov    dl,al
c000864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008651:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008663:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008669:	0f b6 c0             	movzx  eax,al
c000866c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008673:	85 c0                	test   eax,eax
c0008675:	74 3e                	je     c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008681:	0f b6 c0             	movzx  eax,al
c0008684:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000868b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008691:	85 c0                	test   eax,eax
c0008693:	75 20                	jne    c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008699:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869f:	0f b6 c0             	movzx  eax,al
c00086a2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	50                   	push   eax
c00086ad:	e8 58 19 00 00       	call   c000a00a <LogicalDisk::mount()>
c00086b2:	83 c4 10             	add    esp,0x10
c00086b5:	90                   	nop
c00086b6:	83 c4 0c             	add    esp,0xc
c00086b9:	c3                   	ret    

c00086ba <Directory::open()>:
c00086ba:	53                   	push   ebx
c00086bb:	b8 0b 00 00 00       	mov    eax,0xb
c00086c0:	83 ec 08             	sub    esp,0x8
c00086c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ce:	83 fa 19             	cmp    edx,0x19
c00086d1:	77 3d                	ja     c0008710 <Directory::open()+0x56>
c00086d3:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086da:	85 d2                	test   edx,edx
c00086dc:	74 32                	je     c0008710 <Directory::open()+0x56>
c00086de:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086e4:	85 d2                	test   edx,edx
c00086e6:	74 28                	je     c0008710 <Directory::open()+0x56>
c00086e8:	b8 06 00 00 00       	mov    eax,0x6
c00086ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086f1:	75 1d                	jne    c0008710 <Directory::open()+0x56>
c00086f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f9:	50                   	push   eax
c00086fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00086fc:	51                   	push   ecx
c00086fd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008700:	51                   	push   ecx
c0008701:	52                   	push   edx
c0008702:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 04                	jne    c0008710 <Directory::open()+0x56>
c000870c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008710:	83 c4 08             	add    esp,0x8
c0008713:	5b                   	pop    ebx
c0008714:	c3                   	ret    
c0008715:	90                   	nop

c0008716 <Directory::close()>:
c0008716:	53                   	push   ebx
c0008717:	b8 0b 00 00 00       	mov    eax,0xb
c000871c:	83 ec 08             	sub    esp,0x8
c000871f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008723:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000872a:	83 f9 19             	cmp    ecx,0x19
c000872d:	77 41                	ja     c0008770 <Directory::close()+0x5a>
c000872f:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008736:	85 db                	test   ebx,ebx
c0008738:	74 36                	je     c0008770 <Directory::close()+0x5a>
c000873a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008741:	74 2d                	je     c0008770 <Directory::close()+0x5a>
c0008743:	b8 05 00 00 00       	mov    eax,0x5
c0008748:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000874c:	74 22                	je     c0008770 <Directory::close()+0x5a>
c000874e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008752:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008759:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000875f:	53                   	push   ebx
c0008760:	53                   	push   ebx
c0008761:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008763:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008769:	50                   	push   eax
c000876a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    
c0008775:	90                   	nop

c0008776 <Directory::unlink()>:
c0008776:	83 ec 0c             	sub    esp,0xc
c0008779:	b8 0b 00 00 00       	mov    eax,0xb
c000877e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008782:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008789:	83 f9 19             	cmp    ecx,0x19
c000878c:	77 2f                	ja     c00087bd <Directory::unlink()+0x47>
c000878e:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008795:	85 c9                	test   ecx,ecx
c0008797:	74 24                	je     c00087bd <Directory::unlink()+0x47>
c0008799:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000879f:	85 c9                	test   ecx,ecx
c00087a1:	74 1a                	je     c00087bd <Directory::unlink()+0x47>
c00087a3:	b8 06 00 00 00       	mov    eax,0x6
c00087a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ac:	75 0f                	jne    c00087bd <Directory::unlink()+0x47>
c00087ae:	83 c2 0d             	add    edx,0xd
c00087b1:	50                   	push   eax
c00087b2:	50                   	push   eax
c00087b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087b5:	52                   	push   edx
c00087b6:	51                   	push   ecx
c00087b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087ba:	83 c4 10             	add    esp,0x10
c00087bd:	83 c4 0c             	add    esp,0xc
c00087c0:	c3                   	ret    
c00087c1:	90                   	nop

c00087c2 <Directory::rename(char const*)>:
c00087c2:	83 ec 0c             	sub    esp,0xc
c00087c5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087d5:	83 f9 19             	cmp    ecx,0x19
c00087d8:	77 32                	ja     c000880c <Directory::rename(char const*)+0x4a>
c00087da:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087e1:	85 c9                	test   ecx,ecx
c00087e3:	74 27                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087eb:	85 c9                	test   ecx,ecx
c00087ed:	74 1d                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087ef:	b8 06 00 00 00       	mov    eax,0x6
c00087f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087f8:	75 12                	jne    c000880c <Directory::rename(char const*)+0x4a>
c00087fa:	83 c2 0d             	add    edx,0xd
c00087fd:	50                   	push   eax
c00087fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008804:	52                   	push   edx
c0008805:	51                   	push   ecx
c0008806:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	83 c4 0c             	add    esp,0xc
c000880f:	c3                   	ret    

c0008810 <Directory::exists()>:
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	31 c0                	xor    eax,eax
c0008815:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008819:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008820:	83 f9 19             	cmp    ecx,0x19
c0008823:	77 24                	ja     c0008849 <Directory::exists()+0x39>
c0008825:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000882c:	85 c9                	test   ecx,ecx
c000882e:	74 19                	je     c0008849 <Directory::exists()+0x39>
c0008830:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0f                	je     c0008849 <Directory::exists()+0x39>
c000883a:	83 c2 0d             	add    edx,0xd
c000883d:	50                   	push   eax
c000883e:	50                   	push   eax
c000883f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008841:	52                   	push   edx
c0008842:	51                   	push   ecx
c0008843:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	83 c4 0c             	add    esp,0xc
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <Directory::read(dirent*)>:
c000884e:	83 ec 1c             	sub    esp,0x1c
c0008851:	b8 0b 00 00 00       	mov    eax,0xb
c0008856:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000885a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008861:	83 f9 19             	cmp    ecx,0x19
c0008864:	77 30                	ja     c0008896 <Directory::read(dirent*)+0x48>
c0008866:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000886d:	85 c9                	test   ecx,ecx
c000886f:	74 25                	je     c0008896 <Directory::read(dirent*)+0x48>
c0008871:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008878:	74 1c                	je     c0008896 <Directory::read(dirent*)+0x48>
c000887a:	83 ec 0c             	sub    esp,0xc
c000887d:	8b 02                	mov    eax,DWORD PTR [edx]
c000887f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008883:	51                   	push   ecx
c0008884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008888:	6a 00                	push   0x0
c000888a:	68 10 01 00 00       	push   0x110
c000888f:	52                   	push   edx
c0008890:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008893:	83 c4 20             	add    esp,0x20
c0008896:	83 c4 1c             	add    esp,0x1c
c0008899:	c3                   	ret    

c000889a <Directory::create()>:
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	b8 0b 00 00 00       	mov    eax,0xb
c00088a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ad:	83 f9 19             	cmp    ecx,0x19
c00088b0:	77 2f                	ja     c00088e1 <Directory::create()+0x47>
c00088b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b9:	85 c9                	test   ecx,ecx
c00088bb:	74 24                	je     c00088e1 <Directory::create()+0x47>
c00088bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c3:	85 c9                	test   ecx,ecx
c00088c5:	74 1a                	je     c00088e1 <Directory::create()+0x47>
c00088c7:	b8 06 00 00 00       	mov    eax,0x6
c00088cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088d0:	75 0f                	jne    c00088e1 <Directory::create()+0x47>
c00088d2:	83 c2 0d             	add    edx,0xd
c00088d5:	50                   	push   eax
c00088d6:	50                   	push   eax
c00088d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d9:	52                   	push   edx
c00088da:	51                   	push   ecx
c00088db:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088de:	83 c4 10             	add    esp,0x10
c00088e1:	83 c4 0c             	add    esp,0xc
c00088e4:	c3                   	ret    
c00088e5:	90                   	nop

c00088e6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e6:	b8 0a 00 00 00       	mov    eax,0xa
c00088eb:	c3                   	ret    

c00088ec <Bus::Bus(char const*)>:
c00088ec:	83 ec 0c             	sub    esp,0xc
c00088ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088f3:	83 ec 08             	sub    esp,0x8
c00088f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fa:	50                   	push   eax
c00088fb:	e8 a4 08 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008900:	83 c4 10             	add    esp,0x10
c0008903:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c0008908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890c:	89 10                	mov    DWORD PTR [eax],edx
c000890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008912:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000891c:	90                   	nop
c000891d:	83 c4 0c             	add    esp,0xc
c0008920:	c3                   	ret    
c0008921:	90                   	nop
c0008922:	66 90                	xchg   ax,ax

c0008924 <Bus::~Bus()>:
c0008924:	83 ec 0c             	sub    esp,0xc
c0008927:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	89 10                	mov    DWORD PTR [eax],edx
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	83 ec 0c             	sub    esp,0xc
c0008939:	50                   	push   eax
c000893a:	e8 05 06 00 00       	call   c0008f44 <Device::~Device()>
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	90                   	nop
c0008943:	83 c4 0c             	add    esp,0xc
c0008946:	c3                   	ret    
c0008947:	90                   	nop

c0008948 <Bus::~Bus()>:
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	83 ec 0c             	sub    esp,0xc
c000894e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008952:	e8 cd ff ff ff       	call   c0008924 <Bus::~Bus()>
c0008957:	83 c4 10             	add    esp,0x10
c000895a:	83 ec 08             	sub    esp,0x8
c000895d:	68 58 01 00 00       	push   0x158
c0008962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008966:	e8 95 3d 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	83 c4 0c             	add    esp,0xc
c0008971:	c3                   	ret    

c0008972 <KeBeepThread(void*)>:
c0008972:	83 ec 0c             	sub    esp,0xc
c0008975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008979:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0008980:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0008987:	75 01                	jne    c000898a <KeBeepThread(void*)+0x18>
c0008989:	fb                   	sti    
c000898a:	83 ec 0c             	sub    esp,0xc
c000898d:	6b c0 0a             	imul   eax,eax,0xa
c0008990:	50                   	push   eax
c0008991:	e8 f2 cc 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c0008996:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000899d:	e8 e0 fc 00 00       	call   c0018682 <HalMakeBeep(int)>
c00089a2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089aa:	83 c4 1c             	add    esp,0x1c
c00089ad:	e9 ae cb 00 00       	jmp    c0015560 <blockTask(TaskState)>

c00089b2 <KeBeep(int, int, bool)>:
c00089b2:	56                   	push   esi
c00089b3:	53                   	push   ebx
c00089b4:	83 ec 10             	sub    esp,0x10
c00089b7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c3:	e8 ba fc 00 00       	call   c0018682 <HalMakeBeep(int)>
c00089c8:	83 c4 10             	add    esp,0x10
c00089cb:	89 f0                	mov    eax,esi
c00089cd:	84 c0                	test   al,al
c00089cf:	74 1e                	je     c00089ef <KeBeep(int, int, bool)+0x3d>
c00089d1:	83 ec 0c             	sub    esp,0xc
c00089d4:	6b db 0a             	imul   ebx,ebx,0xa
c00089d7:	53                   	push   ebx
c00089d8:	e8 ab cc 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c00089dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e5:	83 c4 14             	add    esp,0x14
c00089e8:	5b                   	pop    ebx
c00089e9:	5e                   	pop    esi
c00089ea:	e9 93 fc 00 00       	jmp    c0018682 <HalMakeBeep(int)>
c00089ef:	68 e6 00 00 00       	push   0xe6
c00089f4:	53                   	push   ebx
c00089f5:	68 72 89 00 c0       	push   0xc0008972
c00089fa:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0008a00:	e8 4b c8 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	c3                   	ret    
c0008a0b:	90                   	nop

c0008a0c <KeLoadClockSettings()>:
c0008a0c:	57                   	push   edi
c0008a0d:	56                   	push   esi
c0008a0e:	53                   	push   ebx
c0008a0f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a15:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a1a:	68 08 15 02 c0       	push   0xc0021508
c0008a1f:	e8 30 3d 00 00       	call   c000c754 <CmOpen(char const*)>
c0008a24:	59                   	pop    ecx
c0008a25:	89 c3                	mov    ebx,eax
c0008a27:	5e                   	pop    esi
c0008a28:	68 2d 15 02 c0       	push   0xc002152d
c0008a2d:	50                   	push   eax
c0008a2e:	e8 21 49 00 00       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a33:	5f                   	pop    edi
c0008a34:	89 c6                	mov    esi,eax
c0008a36:	5a                   	pop    edx
c0008a37:	50                   	push   eax
c0008a38:	68 42 15 02 c0       	push   0xc0021542
c0008a3d:	e8 22 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a42:	83 c4 10             	add    esp,0x10
c0008a45:	85 f6                	test   esi,esi
c0008a47:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a4b:	7e 0c                	jle    c0008a59 <KeLoadClockSettings()+0x4d>
c0008a4d:	52                   	push   edx
c0008a4e:	57                   	push   edi
c0008a4f:	56                   	push   esi
c0008a50:	53                   	push   ebx
c0008a51:	e8 6e 3e 00 00       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 ec 0c             	sub    esp,0xc
c0008a5c:	53                   	push   ebx
c0008a5d:	e8 10 3e 00 00       	call   c000c872 <CmClose(Reghive_Tag*)>
c0008a62:	83 c4 0c             	add    esp,0xc
c0008a65:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a6a:	50                   	push   eax
c0008a6b:	57                   	push   edi
c0008a6c:	68 50 15 02 c0       	push   0xc0021550
c0008a71:	e8 ee e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a76:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a7a:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a81:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	a8 fd                	test   al,0xfd
c0008a89:	75 50                	jne    c0008adb <KeLoadClockSettings()+0xcf>
c0008a8b:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a90:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a95:	83 fb 2e             	cmp    ebx,0x2e
c0008a98:	75 07                	jne    c0008aa1 <KeLoadClockSettings()+0x95>
c0008a9a:	b0 01                	mov    al,0x1
c0008a9c:	83 fa 35             	cmp    edx,0x35
c0008a9f:	74 0f                	je     c0008ab0 <KeLoadClockSettings()+0xa4>
c0008aa1:	31 c0                	xor    eax,eax
c0008aa3:	83 fa 2e             	cmp    edx,0x2e
c0008aa6:	75 08                	jne    c0008ab0 <KeLoadClockSettings()+0xa4>
c0008aa8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aad:	0f 94 c0             	sete   al
c0008ab0:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008aba:	83 e8 30             	sub    eax,0x30
c0008abd:	83 fa 2e             	cmp    edx,0x2e
c0008ac0:	75 07                	jne    c0008ac9 <KeLoadClockSettings()+0xbd>
c0008ac2:	6b c0 0a             	imul   eax,eax,0xa
c0008ac5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ac9:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008ace:	80 f9 2d             	cmp    cl,0x2d
c0008ad1:	75 19                	jne    c0008aec <KeLoadClockSettings()+0xe0>
c0008ad3:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad9:	eb 11                	jmp    c0008aec <KeLoadClockSettings()+0xe0>
c0008adb:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008ae2:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008aec:	50                   	push   eax
c0008aed:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af4:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af7:	50                   	push   eax
c0008af8:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afe:	68 67 15 02 c0       	push   0xc0021567
c0008b03:	e8 5c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b08:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0e:	5b                   	pop    ebx
c0008b0f:	5e                   	pop    esi
c0008b10:	5f                   	pop    edi
c0008b11:	c3                   	ret    

c0008b12 <Clock::Clock(char const*)>:
c0008b12:	83 ec 0c             	sub    esp,0xc
c0008b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b19:	83 ec 08             	sub    esp,0x8
c0008b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b20:	50                   	push   eax
c0008b21:	e8 7e 06 00 00       	call   c00091a4 <Device::Device(char const*)>
c0008b26:	83 c4 10             	add    esp,0x10
c0008b29:	ba 80 15 02 c0       	mov    edx,0xc0021580
c0008b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b32:	89 10                	mov    DWORD PTR [eax],edx
c0008b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b38:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b42:	90                   	nop
c0008b43:	83 c4 0c             	add    esp,0xc
c0008b46:	c3                   	ret    
c0008b47:	90                   	nop

c0008b48 <Clock::~Clock()>:
c0008b48:	83 ec 0c             	sub    esp,0xc
c0008b4b:	ba 80 15 02 c0       	mov    edx,0xc0021580
c0008b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b54:	89 10                	mov    DWORD PTR [eax],edx
c0008b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b5a:	83 ec 0c             	sub    esp,0xc
c0008b5d:	50                   	push   eax
c0008b5e:	e8 e1 03 00 00       	call   c0008f44 <Device::~Device()>
c0008b63:	83 c4 10             	add    esp,0x10
c0008b66:	90                   	nop
c0008b67:	83 c4 0c             	add    esp,0xc
c0008b6a:	c3                   	ret    
c0008b6b:	90                   	nop

c0008b6c <Clock::~Clock()>:
c0008b6c:	83 ec 0c             	sub    esp,0xc
c0008b6f:	83 ec 0c             	sub    esp,0xc
c0008b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b76:	e8 cd ff ff ff       	call   c0008b48 <Clock::~Clock()>
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	83 ec 08             	sub    esp,0x8
c0008b81:	68 58 01 00 00       	push   0x158
c0008b86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b8a:	e8 71 3b 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	83 c4 0c             	add    esp,0xc
c0008b95:	c3                   	ret    

c0008b96 <Clock::timeInSecondsLocal()>:
c0008b96:	53                   	push   ebx
c0008b97:	83 ec 14             	sub    esp,0x14
c0008b9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ba0:	50                   	push   eax
c0008ba1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba4:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008bab:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bb1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb7:	89 cb                	mov    ebx,ecx
c0008bb9:	c1 fb 1f             	sar    ebx,0x1f
c0008bbc:	01 c8                	add    eax,ecx
c0008bbe:	11 da                	adc    edx,ebx
c0008bc0:	83 c4 10             	add    esp,0x10
c0008bc3:	31 c9                	xor    ecx,ecx
c0008bc5:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bcc:	74 05                	je     c0008bd3 <Clock::timeInSecondsLocal()+0x3d>
c0008bce:	b9 08 07 00 00       	mov    ecx,0x708
c0008bd3:	31 db                	xor    ebx,ebx
c0008bd5:	01 c8                	add    eax,ecx
c0008bd7:	11 da                	adc    edx,ebx
c0008bd9:	83 c4 08             	add    esp,0x8
c0008bdc:	5b                   	pop    ebx
c0008bdd:	c3                   	ret    

c0008bde <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bde:	57                   	push   edi
c0008bdf:	56                   	push   esi
c0008be0:	53                   	push   ebx
c0008be1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008beb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008bef:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bf2:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf9:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bff:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c05:	99                   	cdq    
c0008c06:	29 c6                	sub    esi,eax
c0008c08:	19 d7                	sbb    edi,edx
c0008c0a:	89 f0                	mov    eax,esi
c0008c0c:	89 fa                	mov    edx,edi
c0008c0e:	31 f6                	xor    esi,esi
c0008c10:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c17:	74 05                	je     c0008c1e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c19:	be 08 07 00 00       	mov    esi,0x708
c0008c1e:	31 ff                	xor    edi,edi
c0008c20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c24:	29 f0                	sub    eax,esi
c0008c26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c2a:	19 fa                	sbb    edx,edi
c0008c2c:	89 d8                	mov    eax,ebx
c0008c2e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c32:	5b                   	pop    ebx
c0008c33:	5e                   	pop    esi
c0008c34:	5f                   	pop    edi
c0008c35:	ff e0                	jmp    eax

c0008c37 <KeDatetimeToSeconds(datetime_t)>:
c0008c37:	55                   	push   ebp
c0008c38:	57                   	push   edi
c0008c39:	56                   	push   esi
c0008c3a:	53                   	push   ebx
c0008c3b:	83 ec 0c             	sub    esp,0xc
c0008c3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c42:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c46:	89 d6                	mov    esi,edx
c0008c48:	0f b6 c7             	movzx  eax,bh
c0008c4b:	c1 ee 10             	shr    esi,0x10
c0008c4e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c51:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c57:	0f b6 ce             	movzx  ecx,dh
c0008c5a:	89 df                	mov    edi,ebx
c0008c5c:	49                   	dec    ecx
c0008c5d:	c1 ef 10             	shr    edi,0x10
c0008c60:	0f b6 db             	movzx  ebx,bl
c0008c63:	89 f8                	mov    eax,edi
c0008c65:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c6b:	0f b6 f8             	movzx  edi,al
c0008c6e:	0f b6 d2             	movzx  edx,dl
c0008c71:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c75:	01 d8                	add    eax,ebx
c0008c77:	0f b7 de             	movzx  ebx,si
c0008c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c7d:	c1 f8 1f             	sar    eax,0x1f
c0008c80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c84:	0f b6 c1             	movzx  eax,cl
c0008c87:	8b 0c 85 c0 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdea40]
c0008c8e:	83 f8 01             	cmp    eax,0x1
c0008c91:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008c95:	76 27                	jbe    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c97:	83 e6 03             	and    esi,0x3
c0008c9a:	75 22                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c9c:	31 d2                	xor    edx,edx
c0008c9e:	be 64 00 00 00       	mov    esi,0x64
c0008ca3:	89 d8                	mov    eax,ebx
c0008ca5:	f7 f6                	div    esi
c0008ca7:	85 d2                	test   edx,edx
c0008ca9:	75 12                	jne    c0008cbd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008cab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb1:	be 90 01 00 00       	mov    esi,0x190
c0008cb6:	99                   	cdq    
c0008cb7:	f7 fe                	idiv   esi
c0008cb9:	85 d2                	test   edx,edx
c0008cbb:	75 01                	jne    c0008cbe <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbd:	41                   	inc    ecx
c0008cbe:	83 fb 46             	cmp    ebx,0x46
c0008cc1:	76 48                	jbe    c0008d0b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008cc3:	be 46 00 00 00       	mov    esi,0x46
c0008cc8:	bf 64 00 00 00       	mov    edi,0x64
c0008ccd:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cd7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cdd:	75 23                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cdf:	89 f0                	mov    eax,esi
c0008ce1:	99                   	cdq    
c0008ce2:	f7 ff                	idiv   edi
c0008ce4:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce9:	85 d2                	test   edx,edx
c0008ceb:	75 15                	jne    c0008d02 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008ced:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf3:	99                   	cdq    
c0008cf4:	f7 fd                	idiv   ebp
c0008cf6:	83 fa 01             	cmp    edx,0x1
c0008cf9:	19 c0                	sbb    eax,eax
c0008cfb:	f7 d0                	not    eax
c0008cfd:	05 6e 01 00 00       	add    eax,0x16e
c0008d02:	01 c1                	add    ecx,eax
c0008d04:	46                   	inc    esi
c0008d05:	39 de                	cmp    esi,ebx
c0008d07:	7c c9                	jl     c0008cd2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d09:	eb 34                	jmp    c0008d3f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d0b:	74 32                	je     c0008d3f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d0d:	b8 45 00 00 00       	mov    eax,0x45
c0008d12:	89 c2                	mov    edx,eax
c0008d14:	83 e2 03             	and    edx,0x3
c0008d17:	39 d8                	cmp    eax,ebx
c0008d19:	7e 0f                	jle    c0008d2a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d1b:	83 fa 01             	cmp    edx,0x1
c0008d1e:	19 d2                	sbb    edx,edx
c0008d20:	48                   	dec    eax
c0008d21:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d28:	eb e8                	jmp    c0008d12 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d2a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d2f:	85 d2                	test   edx,edx
c0008d31:	75 0a                	jne    c0008d3d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d33:	83 fb 01             	cmp    ebx,0x1
c0008d36:	19 c0                	sbb    eax,eax
c0008d38:	05 6e 01 00 00       	add    eax,0x16e
c0008d3d:	29 c1                	sub    ecx,eax
c0008d3f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d44:	f7 e9                	imul   ecx
c0008d46:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d49:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d4d:	83 c4 0c             	add    esp,0xc
c0008d50:	5b                   	pop    ebx
c0008d51:	5e                   	pop    esi
c0008d52:	5f                   	pop    edi
c0008d53:	5d                   	pop    ebp
c0008d54:	c3                   	ret    
c0008d55:	90                   	nop

c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d56:	57                   	push   edi
c0008d57:	56                   	push   esi
c0008d58:	53                   	push   ebx
c0008d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	e8 c8 fe ff ff       	call   c0008c37 <KeDatetimeToSeconds(datetime_t)>
c0008d6f:	59                   	pop    ecx
c0008d70:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d77:	5b                   	pop    ebx
c0008d78:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d84:	89 cb                	mov    ebx,ecx
c0008d86:	c1 fb 1f             	sar    ebx,0x1f
c0008d89:	29 c8                	sub    eax,ecx
c0008d8b:	19 da                	sbb    edx,ebx
c0008d8d:	31 c9                	xor    ecx,ecx
c0008d8f:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d96:	74 05                	je     c0008d9d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d98:	b9 08 07 00 00       	mov    ecx,0x708
c0008d9d:	31 db                	xor    ebx,ebx
c0008d9f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da3:	29 c8                	sub    eax,ecx
c0008da5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da9:	19 da                	sbb    edx,ebx
c0008dab:	89 f8                	mov    eax,edi
c0008dad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db1:	5b                   	pop    ebx
c0008db2:	5e                   	pop    esi
c0008db3:	5f                   	pop    edi
c0008db4:	ff e0                	jmp    eax

c0008db6 <KeSecondsToDatetime(unsigned long long)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 1c             	sub    esp,0x1c
c0008dbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dc1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc9:	6a 00                	push   0x0
c0008dcb:	68 80 51 01 00       	push   0x15180
c0008dd0:	55                   	push   ebp
c0008dd1:	57                   	push   edi
c0008dd2:	e8 2d 6d 01 00       	call   c001fb04 <__udivdi3>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de4:	6a 00                	push   0x0
c0008de6:	68 80 51 01 00       	push   0x15180
c0008deb:	55                   	push   ebp
c0008dec:	57                   	push   edi
c0008ded:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df2:	e8 0d 6e 01 00       	call   c001fc04 <__umoddi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	99                   	cdq    
c0008dfb:	f7 ff                	idiv   edi
c0008dfd:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e02:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e05:	89 d0                	mov    eax,edx
c0008e07:	99                   	cdq    
c0008e08:	f7 ff                	idiv   edi
c0008e0a:	85 db                	test   ebx,ebx
c0008e0c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e12:	79 11                	jns    c0008e25 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e18:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e23:	eb 07                	jmp    c0008e2c <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e25:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2a:	89 d8                	mov    eax,ebx
c0008e2c:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e31:	99                   	cdq    
c0008e32:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e37:	f7 f9                	idiv   ecx
c0008e39:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e42:	31 d2                	xor    edx,edx
c0008e44:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e4c:	01 c3                	add    ebx,eax
c0008e4e:	89 d8                	mov    eax,ebx
c0008e50:	f7 f1                	div    ecx
c0008e52:	31 d2                	xor    edx,edx
c0008e54:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e57:	89 d8                	mov    eax,ebx
c0008e59:	f7 f7                	div    edi
c0008e5b:	31 d2                	xor    edx,edx
c0008e5d:	29 c1                	sub    ecx,eax
c0008e5f:	89 d8                	mov    eax,ebx
c0008e61:	f7 f5                	div    ebp
c0008e63:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e68:	29 c1                	sub    ecx,eax
c0008e6a:	31 d2                	xor    edx,edx
c0008e6c:	89 c8                	mov    eax,ecx
c0008e6e:	f7 f5                	div    ebp
c0008e70:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e79:	31 d2                	xor    edx,edx
c0008e7b:	89 c8                	mov    eax,ecx
c0008e7d:	f7 f5                	div    ebp
c0008e7f:	31 d2                	xor    edx,edx
c0008e81:	01 c3                	add    ebx,eax
c0008e83:	89 c8                	mov    eax,ecx
c0008e85:	f7 f7                	div    edi
c0008e87:	bf 99 00 00 00       	mov    edi,0x99
c0008e8c:	29 c3                	sub    ebx,eax
c0008e8e:	31 d2                	xor    edx,edx
c0008e90:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e98:	29 c3                	sub    ebx,eax
c0008e9a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008e9d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ea0:	bb 05 00 00 00       	mov    ebx,0x5
c0008ea5:	83 c1 02             	add    ecx,0x2
c0008ea8:	89 c8                	mov    eax,ecx
c0008eaa:	f7 f7                	div    edi
c0008eac:	31 d2                	xor    edx,edx
c0008eae:	89 c7                	mov    edi,eax
c0008eb0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb6:	83 c0 02             	add    eax,0x2
c0008eb9:	f7 f3                	div    ebx
c0008ebb:	89 eb                	mov    ebx,ebp
c0008ebd:	29 c3                	sub    ebx,eax
c0008ebf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec7:	19 c0                	sbb    eax,eax
c0008ec9:	31 d2                	xor    edx,edx
c0008ecb:	83 e0 0c             	and    eax,0xc
c0008ece:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008eda:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ede:	83 f9 01             	cmp    ecx,0x1
c0008ee1:	0f 96 c2             	setbe  dl
c0008ee4:	41                   	inc    ecx
c0008ee5:	01 d0                	add    eax,edx
c0008ee7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008eea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eee:	83 c4 1c             	add    esp,0x1c
c0008ef1:	89 f0                	mov    eax,esi
c0008ef3:	5b                   	pop    ebx
c0008ef4:	5e                   	pop    esi
c0008ef5:	5f                   	pop    edi
c0008ef6:	5d                   	pop    ebp
c0008ef7:	c2 04 00             	ret    0x4

c0008efa <Clock::timeInDatetimeLocal()>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 14             	sub    esp,0x14
c0008efe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f02:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f06:	e8 8b fc ff ff       	call   c0008b96 <Clock::timeInSecondsLocal()>
c0008f0b:	83 c4 0c             	add    esp,0xc
c0008f0e:	52                   	push   edx
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 a0 fe ff ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0008f16:	89 d8                	mov    eax,ebx
c0008f18:	83 c4 14             	add    esp,0x14
c0008f1b:	5b                   	pop    ebx
c0008f1c:	c2 04 00             	ret    0x4
c0008f1f:	90                   	nop

c0008f20 <Device::hibernate()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::wake()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::detect()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::disableLegacy()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::powerSaving(PowerSavingLevel)>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::close(int, int, void*)>:
c0008f2a:	31 c0                	xor    eax,eax
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::detect()>:
c0008f2e:	c3                   	ret    
c0008f2f:	90                   	nop

c0008f30 <DriverlessDevice::open(int, int, void*)>:
c0008f30:	83 ec 18             	sub    esp,0x18
c0008f33:	68 f0 15 02 c0       	push   0xc00215f0
c0008f38:	e8 85 5d 00 00       	call   c000ecc2 <KePanic(char const*)>
c0008f3d:	83 c8 ff             	or     eax,0xffffffff
c0008f40:	83 c4 1c             	add    esp,0x1c
c0008f43:	c3                   	ret    

c0008f44 <Device::~Device()>:
c0008f44:	ba 94 16 02 c0       	mov    edx,0xc0021694
c0008f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f4d:	89 10                	mov    DWORD PTR [eax],edx
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop

c0008f52 <Device::~Device()>:
c0008f52:	83 ec 0c             	sub    esp,0xc
c0008f55:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f59:	e8 e6 ff ff ff       	call   c0008f44 <Device::~Device()>
c0008f5e:	83 c4 04             	add    esp,0x4
c0008f61:	83 ec 08             	sub    esp,0x8
c0008f64:	68 58 01 00 00       	push   0x158
c0008f69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f6d:	e8 8e 37 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0008f72:	83 c4 10             	add    esp,0x10
c0008f75:	83 c4 0c             	add    esp,0xc
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <Device::findAndLoadDriver()>:
c0008f7a:	c7 44 24 04 0e 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002160e
c0008f82:	e9 dd df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008f87:	90                   	nop

c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f88:	57                   	push   edi
c0008f89:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8e:	56                   	push   esi
c0008f8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f93:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f97:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa7:	fc                   	cld    
c0008fa8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008faa:	5e                   	pop    esi
c0008fab:	5f                   	pop    edi
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Device::preOpenACPI(void*, char*, char*)>:
c0008fae:	57                   	push   edi
c0008faf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb4:	56                   	push   esi
c0008fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fbd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fc7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fcd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd9:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fde:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fea:	5e                   	pop    esi
c0008feb:	5f                   	pop    edi
c0008fec:	c3                   	ret    
c0008fed:	90                   	nop

c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fee:	53                   	push   ebx
c0008fef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ff3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008fff:	0f b6 c0             	movzx  eax,al
c0009002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009012:	5b                   	pop    ebx
c0009013:	e9 33 fa 00 00       	jmp    c0018a4b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009018 <Device::getParent()>:
c0009018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000901c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009022:	c3                   	ret    
c0009023:	90                   	nop

c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000902c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009031:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009035:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009039:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000903d:	e9 6b fb 00 00       	jmp    c0018bad <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009042 <Device::addChild(Device*)>:
c0009042:	53                   	push   ebx
c0009043:	83 ec 08             	sub    esp,0x8
c0009046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009054:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000905c:	85 d2                	test   edx,edx
c000905e:	74 04                	je     c0009064 <Device::addChild(Device*)+0x22>
c0009060:	89 d3                	mov    ebx,edx
c0009062:	eb f6                	jmp    c000905a <Device::addChild(Device*)+0x18>
c0009064:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009067:	83 ec 0c             	sub    esp,0xc
c000906a:	6a 08                	push   0x8
c000906c:	e8 0a 59 00 00       	call   c000e97b <malloc>
c0009071:	89 03                	mov    DWORD PTR [ebx],eax
c0009073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009080:	83 c4 18             	add    esp,0x18
c0009083:	5b                   	pop    ebx
c0009084:	c3                   	ret    
c0009085:	90                   	nop

c0009086 <Device::removeAllChildren()>:
c0009086:	56                   	push   esi
c0009087:	53                   	push   ebx
c0009088:	52                   	push   edx
c0009089:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000908d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009093:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009096:	74 17                	je     c00090af <Device::removeAllChildren()+0x29>
c0009098:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909b:	85 c0                	test   eax,eax
c000909d:	74 0c                	je     c00090ab <Device::removeAllChildren()+0x25>
c000909f:	83 ec 0c             	sub    esp,0xc
c00090a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a4:	50                   	push   eax
c00090a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090ad:	eb e4                	jmp    c0009093 <Device::removeAllChildren()+0xd>
c00090af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c8:	58                   	pop    eax
c00090c9:	5b                   	pop    ebx
c00090ca:	5e                   	pop    esi
c00090cb:	c3                   	ret    

c00090cc <Device::hibernateAll()>:
c00090cc:	53                   	push   ebx
c00090cd:	83 ec 14             	sub    esp,0x14
c00090d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d6:	53                   	push   ebx
c00090d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e0:	83 c4 10             	add    esp,0x10
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 0f                	je     c00090f7 <Device::hibernateAll()+0x2b>
c00090e8:	83 ec 0c             	sub    esp,0xc
c00090eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ee:	e8 d9 ff ff ff       	call   c00090cc <Device::hibernateAll()>
c00090f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f5:	eb e9                	jmp    c00090e0 <Device::hibernateAll()+0x14>
c00090f7:	83 c4 08             	add    esp,0x8
c00090fa:	5b                   	pop    ebx
c00090fb:	c3                   	ret    

c00090fc <Device::wakeAll()>:
c00090fc:	53                   	push   ebx
c00090fd:	83 ec 14             	sub    esp,0x14
c0009100:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009104:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009106:	53                   	push   ebx
c0009107:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009110:	83 c4 10             	add    esp,0x10
c0009113:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009116:	74 0f                	je     c0009127 <Device::wakeAll()+0x2b>
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911e:	e8 d9 ff ff ff       	call   c00090fc <Device::wakeAll()>
c0009123:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009125:	eb e9                	jmp    c0009110 <Device::wakeAll()+0x14>
c0009127:	83 c4 08             	add    esp,0x8
c000912a:	5b                   	pop    ebx
c000912b:	c3                   	ret    

c000912c <Device::detectAll()>:
c000912c:	53                   	push   ebx
c000912d:	83 ec 14             	sub    esp,0x14
c0009130:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009134:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009136:	53                   	push   ebx
c0009137:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009140:	83 c4 10             	add    esp,0x10
c0009143:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009146:	74 0f                	je     c0009157 <Device::detectAll()+0x2b>
c0009148:	83 ec 0c             	sub    esp,0xc
c000914b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914e:	e8 d9 ff ff ff       	call   c000912c <Device::detectAll()>
c0009153:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009155:	eb e9                	jmp    c0009140 <Device::detectAll()+0x14>
c0009157:	83 c4 08             	add    esp,0x8
c000915a:	5b                   	pop    ebx
c000915b:	c3                   	ret    

c000915c <Device::disableLegacyAll()>:
c000915c:	c3                   	ret    
c000915d:	90                   	nop

c000915e <Device::loadDriversForAll()>:
c000915e:	c3                   	ret    
c000915f:	90                   	nop

c0009160 <Device::powerSavingAll(PowerSavingLevel)>:
c0009160:	56                   	push   esi
c0009161:	53                   	push   ebx
c0009162:	83 ec 0c             	sub    esp,0xc
c0009165:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009169:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000916d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916f:	56                   	push   esi
c0009170:	53                   	push   ebx
c0009171:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009174:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009180:	74 0f                	je     c0009191 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009182:	52                   	push   edx
c0009183:	52                   	push   edx
c0009184:	56                   	push   esi
c0009185:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009188:	e8 d3 ff ff ff       	call   c0009160 <Device::powerSavingAll(PowerSavingLevel)>
c000918d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918f:	eb e9                	jmp    c000917a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009191:	58                   	pop    eax
c0009192:	5b                   	pop    ebx
c0009193:	5e                   	pop    esi
c0009194:	c3                   	ret    
c0009195:	90                   	nop

c0009196 <Device::setName(char const*)>:
c0009196:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919e:	e9 9d 74 ff ff       	jmp    c0000640 <strcpy>
c00091a3:	90                   	nop

c00091a4 <Device::Device(char const*)>:
c00091a4:	83 ec 1c             	sub    esp,0x1c
c00091a7:	ba 94 16 02 c0       	mov    edx,0xc0021694
c00091ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b0:	89 10                	mov    DWORD PTR [eax],edx
c00091b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ea:	83 ec 08             	sub    esp,0x8
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	e8 9c ff ff ff       	call   c0009196 <Device::setName(char const*)>
c00091fa:	83 c4 10             	add    esp,0x10
c00091fd:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009205:	83 ec 0c             	sub    esp,0xc
c0009208:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000920c:	e8 6a 57 00 00       	call   c000e97b <malloc>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009221:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009225:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009235:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000924c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009250:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009257:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009266:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009274:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009282:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000928c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009290:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929a:	90                   	nop
c000929b:	83 c4 1c             	add    esp,0x1c
c000929e:	c3                   	ret    
c000929f:	90                   	nop

c00092a0 <Device::getName()>:
c00092a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a4:	05 d0 00 00 00       	add    eax,0xd0
c00092a9:	c3                   	ret    

c00092aa <Device::closeAll()>:
c00092aa:	53                   	push   ebx
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b2:	53                   	push   ebx
c00092b3:	e8 e8 ff ff ff       	call   c00092a0 <Device::getName()>
c00092b8:	52                   	push   edx
c00092b9:	50                   	push   eax
c00092ba:	68 48 16 02 c0       	push   0xc0021648
c00092bf:	e8 a0 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c6:	6a 00                	push   0x0
c00092c8:	6a 00                	push   0x0
c00092ca:	6a 00                	push   0x0
c00092cc:	53                   	push   ebx
c00092cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d6:	83 c4 20             	add    esp,0x20
c00092d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092dc:	74 12                	je     c00092f0 <Device::closeAll()+0x46>
c00092de:	83 ec 0c             	sub    esp,0xc
c00092e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e4:	e8 c1 ff ff ff       	call   c00092aa <Device::closeAll()>
c00092e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092eb:	83 c4 10             	add    esp,0x10
c00092ee:	eb e9                	jmp    c00092d9 <Device::closeAll()+0x2f>
c00092f0:	83 c4 08             	add    esp,0x8
c00092f3:	5b                   	pop    ebx
c00092f4:	c3                   	ret    
c00092f5:	90                   	nop

c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f6:	83 ec 0c             	sub    esp,0xc
c00092f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092fd:	83 ec 08             	sub    esp,0x8
c0009300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009304:	50                   	push   eax
c0009305:	e8 9a fe ff ff       	call   c00091a4 <Device::Device(char const*)>
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c0009312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009316:	89 10                	mov    DWORD PTR [eax],edx
c0009318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009326:	90                   	nop
c0009327:	83 c4 0c             	add    esp,0xc
c000932a:	c3                   	ret    
c000932b:	90                   	nop

c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000932c:	57                   	push   edi
c000932d:	56                   	push   esi
c000932e:	53                   	push   ebx
c000932f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009337:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009341:	75 0c                	jne    c000934f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009343:	52                   	push   edx
c0009344:	52                   	push   edx
c0009345:	53                   	push   ebx
c0009346:	56                   	push   esi
c0009347:	e8 30 6a 01 00       	call   c001fd7c <LinkedList<Device>::addElement(Device*)>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009355:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009358:	74 12                	je     c000936c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935a:	50                   	push   eax
c000935b:	57                   	push   edi
c000935c:	56                   	push   esi
c000935d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009360:	e8 c7 ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009365:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	eb e9                	jmp    c0009355 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000936c:	5b                   	pop    ebx
c000936d:	5e                   	pop    esi
c000936e:	5f                   	pop    edi
c000936f:	c3                   	ret    

c0009370 <getDevicesOfType(DeviceType)>:
c0009370:	53                   	push   ebx
c0009371:	83 ec 14             	sub    esp,0x14
c0009374:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009378:	53                   	push   ebx
c0009379:	e8 da 6a 01 00       	call   c001fe58 <LinkedList<Device>::LinkedList()>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009385:	53                   	push   ebx
c0009386:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000938c:	e8 9b ff ff ff       	call   c000932c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009391:	89 d8                	mov    eax,ebx
c0009393:	83 c4 18             	add    esp,0x18
c0009396:	5b                   	pop    ebx
c0009397:	c2 04 00             	ret    0x4
c000939a:	66 90                	xchg   ax,ax

c000939c <HardDiskController::HardDiskController(char const*)>:
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a3:	83 ec 08             	sub    esp,0x8
c00093a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093aa:	50                   	push   eax
c00093ab:	e8 f4 fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c00093b0:	83 c4 10             	add    esp,0x10
c00093b3:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c00093b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bc:	89 10                	mov    DWORD PTR [eax],edx
c00093be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093cc:	90                   	nop
c00093cd:	83 c4 0c             	add    esp,0xc
c00093d0:	c3                   	ret    
c00093d1:	90                   	nop
c00093d2:	66 90                	xchg   ax,ax

c00093d4 <HardDiskController::~HardDiskController()>:
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ba ec 16 02 c0       	mov    edx,0xc00216ec
c00093dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e0:	89 10                	mov    DWORD PTR [eax],edx
c00093e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e6:	83 ec 0c             	sub    esp,0xc
c00093e9:	50                   	push   eax
c00093ea:	e8 55 fb ff ff       	call   c0008f44 <Device::~Device()>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	90                   	nop
c00093f3:	83 c4 0c             	add    esp,0xc
c00093f6:	c3                   	ret    
c00093f7:	90                   	nop

c00093f8 <HardDiskController::~HardDiskController()>:
c00093f8:	83 ec 0c             	sub    esp,0xc
c00093fb:	83 ec 0c             	sub    esp,0xc
c00093fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009402:	e8 cd ff ff ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	83 ec 08             	sub    esp,0x8
c000940d:	68 58 01 00 00       	push   0x158
c0009412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009416:	e8 e5 32 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	83 c4 0c             	add    esp,0xc
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::eject()>:
c0009422:	83 c8 ff             	or     eax,0xffffffff
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009426:	83 ec 0c             	sub    esp,0xc
c0009429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000942d:	83 ec 08             	sub    esp,0x8
c0009430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009434:	50                   	push   eax
c0009435:	e8 6a fd ff ff       	call   c00091a4 <Device::Device(char const*)>
c000943a:	83 c4 10             	add    esp,0x10
c000943d:	ba 18 17 02 c0       	mov    edx,0xc0021718
c0009442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009446:	89 10                	mov    DWORD PTR [eax],edx
c0009448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009457:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009474:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009488:	90                   	nop
c0009489:	83 c4 0c             	add    esp,0xc
c000948c:	c3                   	ret    
c000948d:	90                   	nop

c000948e <PhysicalDisk::startCache()>:
c000948e:	56                   	push   esi
c000948f:	53                   	push   ebx
c0009490:	83 ec 10             	sub    esp,0x10
c0009493:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009497:	6a 44                	push   0x44
c0009499:	e8 dd 54 00 00       	call   c000e97b <malloc>
c000949e:	89 c6                	mov    esi,eax
c00094a0:	58                   	pop    eax
c00094a1:	5a                   	pop    edx
c00094a2:	53                   	push   ebx
c00094a3:	56                   	push   esi
c00094a4:	e8 0f 14 00 00       	call   c000a8b8 <VCache::VCache(PhysicalDisk*)>
c00094a9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094af:	83 c4 14             	add    esp,0x14
c00094b2:	5b                   	pop    ebx
c00094b3:	5e                   	pop    esi
c00094b4:	c3                   	ret    
c00094b5:	90                   	nop

c00094b6 <PhysicalDisk::~PhysicalDisk()>:
c00094b6:	83 ec 0c             	sub    esp,0xc
c00094b9:	ba 18 17 02 c0       	mov    edx,0xc0021718
c00094be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c2:	89 10                	mov    DWORD PTR [eax],edx
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	83 ec 0c             	sub    esp,0xc
c00094cb:	50                   	push   eax
c00094cc:	e8 73 fa ff ff       	call   c0008f44 <Device::~Device()>
c00094d1:	83 c4 10             	add    esp,0x10
c00094d4:	90                   	nop
c00094d5:	83 c4 0c             	add    esp,0xc
c00094d8:	c3                   	ret    
c00094d9:	90                   	nop

c00094da <PhysicalDisk::~PhysicalDisk()>:
c00094da:	83 ec 0c             	sub    esp,0xc
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e4:	e8 cd ff ff ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00094e9:	83 c4 10             	add    esp,0x10
c00094ec:	83 ec 08             	sub    esp,0x8
c00094ef:	68 6c 01 00 00       	push   0x16c
c00094f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f8:	e8 03 32 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c00094fd:	83 c4 10             	add    esp,0x10
c0009500:	83 c4 0c             	add    esp,0xc
c0009503:	c3                   	ret    

c0009504 <startGUI(void*)>:
c0009504:	55                   	push   ebp
c0009505:	89 e5                	mov    ebp,esp
c0009507:	53                   	push   ebx
c0009508:	83 ec 04             	sub    esp,0x4
c000950b:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009513:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009518:	85 c0                	test   eax,eax
c000951a:	75 01                	jne    c000951d <startGUI(void*)+0x19>
c000951c:	fb                   	sti    
c000951d:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009523:	83 ec 08             	sub    esp,0x8
c0009526:	6a 01                	push   0x1
c0009528:	68 48 17 02 c0       	push   0xc0021748
c000952d:	e8 8a b4 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c0009532:	83 c4 10             	add    esp,0x10
c0009535:	83 ec 08             	sub    esp,0x8
c0009538:	53                   	push   ebx
c0009539:	50                   	push   eax
c000953a:	e8 cf b6 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c000953f:	83 c4 10             	add    esp,0x10
c0009542:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009548:	83 ec 08             	sub    esp,0x8
c000954b:	6a 01                	push   0x1
c000954d:	68 62 17 02 c0       	push   0xc0021762
c0009552:	e8 65 b4 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c0009557:	83 c4 10             	add    esp,0x10
c000955a:	83 ec 08             	sub    esp,0x8
c000955d:	53                   	push   ebx
c000955e:	50                   	push   eax
c000955f:	e8 aa b6 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c0009564:	83 c4 10             	add    esp,0x10
c0009567:	eb fe                	jmp    c0009567 <startGUI(void*)+0x63>

c0009569 <startGUIVESA(void*)>:
c0009569:	55                   	push   ebp
c000956a:	89 e5                	mov    ebp,esp
c000956c:	53                   	push   ebx
c000956d:	83 ec 04             	sub    esp,0x4
c0009570:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009578:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000957d:	85 c0                	test   eax,eax
c000957f:	75 01                	jne    c0009582 <startGUIVESA(void*)+0x19>
c0009581:	fb                   	sti    
c0009582:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009588:	83 ec 08             	sub    esp,0x8
c000958b:	6a 01                	push   0x1
c000958d:	68 80 17 02 c0       	push   0xc0021780
c0009592:	e8 25 b4 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c0009597:	83 c4 10             	add    esp,0x10
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	53                   	push   ebx
c000959e:	50                   	push   eax
c000959f:	e8 6a b6 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c00095a4:	83 c4 10             	add    esp,0x10
c00095a7:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095ad:	83 ec 08             	sub    esp,0x8
c00095b0:	6a 01                	push   0x1
c00095b2:	68 62 17 02 c0       	push   0xc0021762
c00095b7:	e8 00 b4 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c00095bc:	83 c4 10             	add    esp,0x10
c00095bf:	83 ec 08             	sub    esp,0x8
c00095c2:	53                   	push   ebx
c00095c3:	50                   	push   eax
c00095c4:	e8 45 b6 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c00095c9:	83 c4 10             	add    esp,0x10
c00095cc:	eb fe                	jmp    c00095cc <startGUIVESA(void*)+0x63>

c00095ce <sendKeyToTerminal(unsigned char)>:
c00095ce:	55                   	push   ebp
c00095cf:	89 e5                	mov    ebp,esp
c00095d1:	83 ec 28             	sub    esp,0x28
c00095d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095da:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095df:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e3:	83 ec 08             	sub    esp,0x8
c00095e6:	52                   	push   edx
c00095e7:	50                   	push   eax
c00095e8:	e8 69 81 00 00       	call   c0011756 <VgaText::receiveKey(unsigned char)>
c00095ed:	83 c4 10             	add    esp,0x10
c00095f0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095f4:	83 f8 0a             	cmp    eax,0xa
c00095f7:	74 16                	je     c000960f <sendKeyToTerminal(unsigned char)+0x41>
c00095f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fd:	83 f8 03             	cmp    eax,0x3
c0009600:	74 0d                	je     c000960f <sendKeyToTerminal(unsigned char)+0x41>
c0009602:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009606:	83 f8 1c             	cmp    eax,0x1c
c0009609:	0f 85 92 00 00 00    	jne    c00096a1 <sendKeyToTerminal(unsigned char)+0xd3>
c000960f:	fa                   	cli    
c0009610:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009615:	83 c0 01             	add    eax,0x1
c0009618:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000961d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009622:	83 c0 01             	add    eax,0x1
c0009625:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000962a:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c000962f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009632:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c000963c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009640:	74 1f                	je     c0009661 <sendKeyToTerminal(unsigned char)+0x93>
c0009642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009645:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009648:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000964b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000964e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009651:	83 ec 0c             	sub    esp,0xc
c0009654:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009657:	e8 54 c1 00 00       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	eb db                	jmp    c000963c <sendKeyToTerminal(unsigned char)+0x6e>
c0009661:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009666:	83 e8 01             	sub    eax,0x1
c0009669:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000966e:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009673:	85 c0                	test   eax,eax
c0009675:	75 18                	jne    c000968f <sendKeyToTerminal(unsigned char)+0xc1>
c0009677:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000967c:	85 c0                	test   eax,eax
c000967e:	74 0f                	je     c000968f <sendKeyToTerminal(unsigned char)+0xc1>
c0009680:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000968a:	e8 11 be 00 00       	call   c00154a0 <schedule()>
c000968f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009697:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969c:	85 c0                	test   eax,eax
c000969e:	75 01                	jne    c00096a1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096a0:	fb                   	sti    
c00096a1:	90                   	nop
c00096a2:	c9                   	leave  
c00096a3:	c3                   	ret    

c00096a4 <sendKeyboardToken(KeyboardToken)>:
c00096a4:	55                   	push   ebp
c00096a5:	89 e5                	mov    ebp,esp
c00096a7:	83 ec 18             	sub    esp,0x18
c00096aa:	e8 23 5f 00 00       	call   c000f5d2 <KeUserIOReceived()>
c00096af:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b5:	0f b7 c0             	movzx  eax,ax
c00096b8:	83 f2 01             	xor    edx,0x1
c00096bb:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096c1:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096c6:	85 c0                	test   eax,eax
c00096c8:	74 24                	je     c00096ee <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ca:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c00096d0:	83 ec 04             	sub    esp,0x4
c00096d3:	68 40 93 02 c0       	push   0xc0029340
c00096d8:	83 ec 08             	sub    esp,0x8
c00096db:	89 e2                	mov    edx,esp
c00096dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e0:	89 02                	mov    DWORD PTR [edx],eax
c00096e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00096e5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00096e9:	ff d1                	call   ecx
c00096eb:	83 c4 10             	add    esp,0x10
c00096ee:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096f2:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00096f5:	0f b6 c0             	movzx  eax,al
c00096f8:	85 c0                	test   eax,eax
c00096fa:	0f 84 da 00 00 00    	je     c00097da <sendKeyboardToken(KeyboardToken)+0x136>
c0009700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009703:	0f b7 c0             	movzx  eax,ax
c0009706:	3d 18 03 00 00       	cmp    eax,0x318
c000970b:	75 06                	jne    c0009713 <sendKeyboardToken(KeyboardToken)+0x6f>
c000970d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009716:	0f b7 c0             	movzx  eax,ax
c0009719:	3d 19 03 00 00       	cmp    eax,0x319
c000971e:	75 06                	jne    c0009726 <sendKeyboardToken(KeyboardToken)+0x82>
c0009720:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009729:	0f b7 c0             	movzx  eax,ax
c000972c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009731:	75 06                	jne    c0009739 <sendKeyboardToken(KeyboardToken)+0x95>
c0009733:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000973c:	0f b7 c0             	movzx  eax,ax
c000973f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009744:	75 06                	jne    c000974c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009746:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000974c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000974f:	0f b7 c0             	movzx  eax,ax
c0009752:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009757:	75 06                	jne    c000975f <sendKeyboardToken(KeyboardToken)+0xbb>
c0009759:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000975f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009762:	0f b7 c0             	movzx  eax,ax
c0009765:	3d 1d 03 00 00       	cmp    eax,0x31d
c000976a:	75 06                	jne    c0009772 <sendKeyboardToken(KeyboardToken)+0xce>
c000976c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009775:	0f b7 c0             	movzx  eax,ax
c0009778:	3d 1e 03 00 00       	cmp    eax,0x31e
c000977d:	75 06                	jne    c0009785 <sendKeyboardToken(KeyboardToken)+0xe1>
c000977f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009788:	0f b7 c0             	movzx  eax,ax
c000978b:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009790:	75 06                	jne    c0009798 <sendKeyboardToken(KeyboardToken)+0xf4>
c0009792:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0009798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979b:	0f b7 c0             	movzx  eax,ax
c000979e:	3d 20 03 00 00       	cmp    eax,0x320
c00097a3:	75 06                	jne    c00097ab <sendKeyboardToken(KeyboardToken)+0x107>
c00097a5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ae:	0f b7 c0             	movzx  eax,ax
c00097b1:	3d 21 03 00 00       	cmp    eax,0x321
c00097b6:	75 06                	jne    c00097be <sendKeyboardToken(KeyboardToken)+0x11a>
c00097b8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c1:	0f b7 c0             	movzx  eax,ax
c00097c4:	3d 22 03 00 00       	cmp    eax,0x322
c00097c9:	0f 85 f1 00 00 00    	jne    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097cf:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097d5:	e9 e6 00 00 00       	jmp    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097dd:	0f b7 c0             	movzx  eax,ax
c00097e0:	3d 18 03 00 00       	cmp    eax,0x318
c00097e5:	75 0a                	jne    c00097f1 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097e7:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097f4:	0f b7 c0             	movzx  eax,ax
c00097f7:	3d 19 03 00 00       	cmp    eax,0x319
c00097fc:	75 0a                	jne    c0009808 <sendKeyboardToken(KeyboardToken)+0x164>
c00097fe:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009804:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000980b:	0f b7 c0             	movzx  eax,ax
c000980e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009813:	75 0a                	jne    c000981f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009815:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000981b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000981f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009822:	0f b7 c0             	movzx  eax,ax
c0009825:	3d 1b 03 00 00       	cmp    eax,0x31b
c000982a:	75 0a                	jne    c0009836 <sendKeyboardToken(KeyboardToken)+0x192>
c000982c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009832:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009839:	0f b7 c0             	movzx  eax,ax
c000983c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009841:	75 0a                	jne    c000984d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009843:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009849:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000984d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009850:	0f b7 c0             	movzx  eax,ax
c0009853:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009858:	75 0a                	jne    c0009864 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000985a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009860:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009867:	0f b7 c0             	movzx  eax,ax
c000986a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000986f:	75 0a                	jne    c000987b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009871:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009877:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000987b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000987e:	0f b7 c0             	movzx  eax,ax
c0009881:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009886:	75 0a                	jne    c0009892 <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009888:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000988e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009895:	0f b7 c0             	movzx  eax,ax
c0009898:	3d 20 03 00 00       	cmp    eax,0x320
c000989d:	75 0a                	jne    c00098a9 <sendKeyboardToken(KeyboardToken)+0x205>
c000989f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ac:	0f b7 c0             	movzx  eax,ax
c00098af:	3d 21 03 00 00       	cmp    eax,0x321
c00098b4:	75 0a                	jne    c00098c0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098b6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098c3:	0f b7 c0             	movzx  eax,ax
c00098c6:	3d 00 02 00 00       	cmp    eax,0x200
c00098cb:	75 2f                	jne    c00098fc <sendKeyboardToken(KeyboardToken)+0x258>
c00098cd:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098d2:	83 f0 01             	xor    eax,0x1
c00098d5:	0f b6 c0             	movzx  eax,al
c00098d8:	85 c0                	test   eax,eax
c00098da:	74 20                	je     c00098fc <sendKeyboardToken(KeyboardToken)+0x258>
c00098dc:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098e1:	6a 01                	push   0x1
c00098e3:	6a 00                	push   0x0
c00098e5:	68 04 95 00 c0       	push   0xc0009504
c00098ea:	50                   	push   eax
c00098eb:	e8 60 b9 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c00098f0:	83 c4 10             	add    esp,0x10
c00098f3:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c00098fa:	eb 3a                	jmp    c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c00098fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ff:	0f b7 c0             	movzx  eax,ax
c0009902:	3d 01 02 00 00       	cmp    eax,0x201
c0009907:	75 2d                	jne    c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c0009909:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c000990e:	83 f0 01             	xor    eax,0x1
c0009911:	0f b6 c0             	movzx  eax,al
c0009914:	85 c0                	test   eax,eax
c0009916:	74 1e                	je     c0009936 <sendKeyboardToken(KeyboardToken)+0x292>
c0009918:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000991d:	6a 01                	push   0x1
c000991f:	6a 00                	push   0x0
c0009921:	68 69 95 00 c0       	push   0xc0009569
c0009926:	50                   	push   eax
c0009927:	e8 24 b9 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c000992c:	83 c4 10             	add    esp,0x10
c000992f:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009939:	0f b7 c0             	movzx  eax,ax
c000993c:	3d 25 03 00 00       	cmp    eax,0x325
c0009941:	75 06                	jne    c0009949 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009943:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994c:	0f b7 c0             	movzx  eax,ax
c000994f:	3d 24 03 00 00       	cmp    eax,0x324
c0009954:	75 06                	jne    c000995c <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009956:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000995c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000995f:	0f b7 c0             	movzx  eax,ax
c0009962:	3d 23 03 00 00       	cmp    eax,0x323
c0009967:	75 06                	jne    c000996f <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009969:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000996f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009972:	0f b7 c0             	movzx  eax,ax
c0009975:	3d 26 03 00 00       	cmp    eax,0x326
c000997a:	75 06                	jne    c0009982 <sendKeyboardToken(KeyboardToken)+0x2de>
c000997c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009985:	0f b7 c0             	movzx  eax,ax
c0009988:	3d 27 03 00 00       	cmp    eax,0x327
c000998d:	75 06                	jne    c0009995 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000998f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009998:	0f b7 c0             	movzx  eax,ax
c000999b:	3d 22 03 00 00       	cmp    eax,0x322
c00099a0:	75 06                	jne    c00099a8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099a2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099a8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099af:	83 f0 01             	xor    eax,0x1
c00099b2:	0f b6 c0             	movzx  eax,al
c00099b5:	85 c0                	test   eax,eax
c00099b7:	74 7c                	je     c0009a35 <sendKeyboardToken(KeyboardToken)+0x391>
c00099b9:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099be:	0f b6 c0             	movzx  eax,al
c00099c1:	85 c0                	test   eax,eax
c00099c3:	74 43                	je     c0009a08 <sendKeyboardToken(KeyboardToken)+0x364>
c00099c5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099c9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099cd:	85 c0                	test   eax,eax
c00099cf:	74 2b                	je     c00099fc <sendKeyboardToken(KeyboardToken)+0x358>
c00099d1:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099d7:	89 d0                	mov    eax,edx
c00099d9:	c1 e0 02             	shl    eax,0x2
c00099dc:	01 d0                	add    eax,edx
c00099de:	01 c0                	add    eax,eax
c00099e0:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	8d 50 d0             	lea    edx,[eax-0x30]
c00099ee:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099f3:	01 d0                	add    eax,edx
c00099f5:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099fa:	eb 71                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c00099fc:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a06:	eb 65                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a08:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a0d:	85 c0                	test   eax,eax
c0009a0f:	74 18                	je     c0009a29 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a11:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a16:	0f b6 c0             	movzx  eax,al
c0009a19:	83 ec 0c             	sub    esp,0xc
c0009a1c:	50                   	push   eax
c0009a1d:	e8 ac fb ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a29:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a33:	eb 38                	jmp    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a40:	75 2b                	jne    c0009a6d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a42:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a47:	85 c0                	test   eax,eax
c0009a49:	74 18                	je     c0009a63 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a4b:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a50:	0f b6 c0             	movzx  eax,al
c0009a53:	83 ec 0c             	sub    esp,0xc
c0009a56:	50                   	push   eax
c0009a57:	e8 72 fb ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a63:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a6d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a70:	83 f0 01             	xor    eax,0x1
c0009a73:	0f b6 c0             	movzx  eax,al
c0009a76:	85 c0                	test   eax,eax
c0009a78:	74 5a                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a7a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a7d:	83 f0 01             	xor    eax,0x1
c0009a80:	0f b6 c0             	movzx  eax,al
c0009a83:	85 c0                	test   eax,eax
c0009a85:	74 4d                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a87:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a8c:	83 f0 01             	xor    eax,0x1
c0009a8f:	0f b6 c0             	movzx  eax,al
c0009a92:	85 c0                	test   eax,eax
c0009a94:	74 3e                	je     c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a99:	0f b7 c0             	movzx  eax,ax
c0009a9c:	83 f8 1f             	cmp    eax,0x1f
c0009a9f:	76 0b                	jbe    c0009aac <sendKeyboardToken(KeyboardToken)+0x408>
c0009aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa4:	0f b7 c0             	movzx  eax,ax
c0009aa7:	83 f8 7e             	cmp    eax,0x7e
c0009aaa:	76 16                	jbe    c0009ac2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aaf:	0f b7 c0             	movzx  eax,ax
c0009ab2:	83 f8 0a             	cmp    eax,0xa
c0009ab5:	74 0b                	je     c0009ac2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aba:	0f b7 c0             	movzx  eax,ax
c0009abd:	83 f8 08             	cmp    eax,0x8
c0009ac0:	75 12                	jne    c0009ad4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac5:	0f b6 c0             	movzx  eax,al
c0009ac8:	83 ec 0c             	sub    esp,0xc
c0009acb:	50                   	push   eax
c0009acc:	e8 fd fa ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009ad1:	83 c4 10             	add    esp,0x10
c0009ad4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ad7:	83 f0 01             	xor    eax,0x1
c0009ada:	0f b6 c0             	movzx  eax,al
c0009add:	85 c0                	test   eax,eax
c0009adf:	74 5d                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009ae1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ae4:	83 f0 01             	xor    eax,0x1
c0009ae7:	0f b6 c0             	movzx  eax,al
c0009aea:	85 c0                	test   eax,eax
c0009aec:	74 50                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009aee:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009af3:	0f b6 c0             	movzx  eax,al
c0009af6:	85 c0                	test   eax,eax
c0009af8:	74 44                	je     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009afd:	0f b7 c0             	movzx  eax,ax
c0009b00:	83 f8 3f             	cmp    eax,0x3f
c0009b03:	76 39                	jbe    c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b08:	0f b7 c0             	movzx  eax,ax
c0009b0b:	83 f8 7f             	cmp    eax,0x7f
c0009b0e:	77 2e                	ja     c0009b3e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b13:	88 c2                	mov    dl,al
c0009b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b18:	0f b7 c0             	movzx  eax,ax
c0009b1b:	83 f8 5f             	cmp    eax,0x5f
c0009b1e:	76 04                	jbe    c0009b24 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b20:	b0 20                	mov    al,0x20
c0009b22:	eb 02                	jmp    c0009b26 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b24:	b0 00                	mov    al,0x0
c0009b26:	89 d1                	mov    ecx,edx
c0009b28:	29 c1                	sub    ecx,eax
c0009b2a:	89 c8                	mov    eax,ecx
c0009b2c:	83 e8 40             	sub    eax,0x40
c0009b2f:	0f b6 c0             	movzx  eax,al
c0009b32:	83 ec 0c             	sub    esp,0xc
c0009b35:	50                   	push   eax
c0009b36:	e8 93 fa ff ff       	call   c00095ce <sendKeyToTerminal(unsigned char)>
c0009b3b:	83 c4 10             	add    esp,0x10
c0009b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b41:	0f b7 c0             	movzx  eax,ax
c0009b44:	3d 00 03 00 00       	cmp    eax,0x300
c0009b49:	75 12                	jne    c0009b5d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b4b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b4e:	83 f0 01             	xor    eax,0x1
c0009b51:	0f b6 c0             	movzx  eax,al
c0009b54:	85 c0                	test   eax,eax
c0009b56:	74 05                	je     c0009b5d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b58:	e8 46 73 00 00       	call   c0010ea3 <doTerminalCycle()>
c0009b5d:	90                   	nop
c0009b5e:	c9                   	leave  
c0009b5f:	c3                   	ret    

c0009b60 <clearInternalKeybuffer(VgaText*)>:
c0009b60:	55                   	push   ebp
c0009b61:	89 e5                	mov    ebp,esp
c0009b63:	83 ec 08             	sub    esp,0x8
c0009b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b69:	05 02 01 00 00       	add    eax,0x102
c0009b6e:	83 ec 0c             	sub    esp,0xc
c0009b71:	50                   	push   eax
c0009b72:	e8 f9 69 ff ff       	call   c0000570 <strlen>
c0009b77:	83 c4 10             	add    esp,0x10
c0009b7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b7d:	81 c2 02 01 00 00    	add    edx,0x102
c0009b83:	83 ec 04             	sub    esp,0x4
c0009b86:	50                   	push   eax
c0009b87:	6a 00                	push   0x0
c0009b89:	52                   	push   edx
c0009b8a:	e8 61 69 ff ff       	call   c00004f0 <memset>
c0009b8f:	83 c4 10             	add    esp,0x10
c0009b92:	90                   	nop
c0009b93:	c9                   	leave  
c0009b94:	c3                   	ret    

c0009b95 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009b95:	55                   	push   ebp
c0009b96:	89 e5                	mov    ebp,esp
c0009b98:	83 ec 18             	sub    esp,0x18
c0009b9b:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009ba0:	85 c0                	test   eax,eax
c0009ba2:	74 2a                	je     c0009bce <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009ba4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009baa:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c0009bb0:	83 ec 04             	sub    esp,0x4
c0009bb3:	68 40 93 02 c0       	push   0xc0029340
c0009bb8:	83 ec 08             	sub    esp,0x8
c0009bbb:	89 e2                	mov    edx,esp
c0009bbd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009bc0:	89 02                	mov    DWORD PTR [edx],eax
c0009bc2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009bc5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009bc9:	ff d1                	call   ecx
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bd3:	0f b6 c0             	movzx  eax,al
c0009bd6:	85 c0                	test   eax,eax
c0009bd8:	74 07                	je     c0009be1 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009bda:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009be1:	fb                   	sti    
c0009be2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009be9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bed:	0f 84 2a 01 00 00    	je     c0009d1d <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009bf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bf6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009bfc:	0f be c0             	movsx  eax,al
c0009bff:	85 c0                	test   eax,eax
c0009c01:	75 27                	jne    c0009c2a <readKeyboard(VgaText*, char*, unsigned long)+0x95>
c0009c03:	fa                   	cli    
c0009c04:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c09:	83 c0 01             	add    eax,0x1
c0009c0c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c11:	e8 8a b8 00 00       	call   c00154a0 <schedule()>
c0009c16:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009c1e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c23:	85 c0                	test   eax,eax
c0009c25:	75 cc                	jne    c0009bf3 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c27:	fb                   	sti    
c0009c28:	eb c9                	jmp    c0009bf3 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2a:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c2f:	0f b6 c0             	movzx  eax,al
c0009c32:	85 c0                	test   eax,eax
c0009c34:	74 0a                	je     c0009c40 <readKeyboard(VgaText*, char*, unsigned long)+0xab>
c0009c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c39:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c43:	8d 50 01             	lea    edx,[eax+0x1]
c0009c46:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c4c:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c52:	88 10                	mov    BYTE PTR [eax],dl
c0009c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c57:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c5d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c60:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c64:	83 f8 03             	cmp    eax,0x3
c0009c67:	75 1e                	jne    c0009c87 <readKeyboard(VgaText*, char*, unsigned long)+0xf2>
c0009c69:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c73:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c79:	83 ec 08             	sub    esp,0x8
c0009c7c:	6a 02                	push   0x2
c0009c7e:	50                   	push   eax
c0009c7f:	e8 67 61 00 00       	call   c000fdeb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c84:	83 c4 10             	add    esp,0x10
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 1c             	cmp    eax,0x1c
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 09                	push   0x9
c0009ca5:	50                   	push   eax
c0009ca6:	e8 40 61 00 00       	call   c000fdeb <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb1:	05 02 01 00 00       	add    eax,0x102
c0009cb6:	83 ec 0c             	sub    esp,0xc
c0009cb9:	50                   	push   eax
c0009cba:	e8 b1 68 ff ff       	call   c0000570 <strlen>
c0009cbf:	83 c4 10             	add    esp,0x10
c0009cc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc5:	81 c2 02 01 00 00    	add    edx,0x102
c0009ccb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd1:	81 c2 02 01 00 00    	add    edx,0x102
c0009cd7:	83 ec 04             	sub    esp,0x4
c0009cda:	50                   	push   eax
c0009cdb:	51                   	push   ecx
c0009cdc:	52                   	push   edx
c0009cdd:	e8 ee 66 ff ff       	call   c00003d0 <memmove>
c0009ce2:	83 c4 10             	add    esp,0x10
c0009ce5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ced:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf1:	83 f8 0a             	cmp    eax,0xa
c0009cf4:	74 22                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cf6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfa:	83 f8 03             	cmp    eax,0x3
c0009cfd:	74 19                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cff:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d03:	83 f8 1c             	cmp    eax,0x1c
c0009d06:	74 10                	je     c0009d18 <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d08:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d0d:	0f b6 c0             	movzx  eax,al
c0009d10:	85 c0                	test   eax,eax
c0009d12:	0f 84 d1 fe ff ff    	je     c0009be9 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d1b:	eb 03                	jmp    c0009d20 <readKeyboard(VgaText*, char*, unsigned long)+0x18b>
c0009d1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d20:	c9                   	leave  
c0009d21:	c3                   	ret    

c0009d22 <Keyboard::Keyboard(char const*)>:
c0009d22:	83 ec 0c             	sub    esp,0xc
c0009d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d29:	83 ec 08             	sub    esp,0x8
c0009d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d30:	50                   	push   eax
c0009d31:	e8 6e f4 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009d36:	83 c4 10             	add    esp,0x10
c0009d39:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c0009d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d42:	89 10                	mov    DWORD PTR [eax],edx
c0009d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d48:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d52:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d59:	90                   	nop
c0009d5a:	83 c4 0c             	add    esp,0xc
c0009d5d:	c3                   	ret    

c0009d5e <Keyboard::~Keyboard()>:
c0009d5e:	83 ec 0c             	sub    esp,0xc
c0009d61:	ba a4 17 02 c0       	mov    edx,0xc00217a4
c0009d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d6a:	89 10                	mov    DWORD PTR [eax],edx
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	83 ec 0c             	sub    esp,0xc
c0009d73:	50                   	push   eax
c0009d74:	e8 cb f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009d79:	83 c4 10             	add    esp,0x10
c0009d7c:	90                   	nop
c0009d7d:	83 c4 0c             	add    esp,0xc
c0009d80:	c3                   	ret    
c0009d81:	90                   	nop

c0009d82 <Keyboard::~Keyboard()>:
c0009d82:	83 ec 0c             	sub    esp,0xc
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	e8 cd ff ff ff       	call   c0009d5e <Keyboard::~Keyboard()>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	83 ec 08             	sub    esp,0x8
c0009d97:	68 5c 01 00 00       	push   0x15c
c0009d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da0:	e8 5b 29 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	83 c4 0c             	add    esp,0xc
c0009dab:	c3                   	ret    

c0009dac <LogicalDisk::close(int, int, void*)>:
c0009dac:	83 c8 ff             	or     eax,0xffffffff
c0009daf:	c3                   	ret    

c0009db0 <LogicalDisk::~LogicalDisk()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	ba 1c 18 02 c0       	mov    edx,0xc002181c
c0009db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dbc:	89 10                	mov    DWORD PTR [eax],edx
c0009dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc2:	83 ec 0c             	sub    esp,0xc
c0009dc5:	50                   	push   eax
c0009dc6:	e8 79 f1 ff ff       	call   c0008f44 <Device::~Device()>
c0009dcb:	83 c4 10             	add    esp,0x10
c0009dce:	90                   	nop
c0009dcf:	83 c4 0c             	add    esp,0xc
c0009dd2:	c3                   	ret    
c0009dd3:	90                   	nop

c0009dd4 <LogicalDisk::~LogicalDisk()>:
c0009dd4:	83 ec 0c             	sub    esp,0xc
c0009dd7:	83 ec 0c             	sub    esp,0xc
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 cd ff ff ff       	call   c0009db0 <LogicalDisk::~LogicalDisk()>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	83 ec 08             	sub    esp,0x8
c0009de9:	68 78 01 00 00       	push   0x178
c0009dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df2:	e8 09 29 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	83 c4 0c             	add    esp,0xc
c0009dfd:	c3                   	ret    

c0009dfe <LogicalDisk::open(int, int, void*)>:
c0009dfe:	83 ec 18             	sub    esp,0x18
c0009e01:	68 d0 17 02 c0       	push   0xc00217d0
c0009e06:	e8 b7 4e 00 00       	call   c000ecc2 <KePanic(char const*)>
c0009e0b:	83 c8 ff             	or     eax,0xffffffff
c0009e0e:	83 c4 1c             	add    esp,0x1c
c0009e11:	c3                   	ret    

c0009e12 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e12:	53                   	push   ebx
c0009e13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e1f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e25:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e2b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e31:	77 10                	ja     c0009e43 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e33:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e39:	89 d3                	mov    ebx,edx
c0009e3b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e41:	72 05                	jb     c0009e48 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e43:	83 c8 ff             	or     eax,0xffffffff
c0009e46:	89 c2                	mov    edx,eax
c0009e48:	5b                   	pop    ebx
c0009e49:	c3                   	ret    

c0009e4a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e4a:	56                   	push   esi
c0009e4b:	83 c8 ff             	or     eax,0xffffffff
c0009e4e:	53                   	push   ebx
c0009e4f:	89 c2                	mov    edx,eax
c0009e51:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e55:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e5d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e63:	77 27                	ja     c0009e8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e65:	89 d8                	mov    eax,ebx
c0009e67:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e6d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e78:	89 c2                	mov    edx,eax
c0009e7a:	73 10                	jae    c0009e8c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e7c:	89 c8                	mov    eax,ecx
c0009e7e:	89 da                	mov    edx,ebx
c0009e80:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e86:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	c3                   	ret    
c0009e8f:	90                   	nop

c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e90:	83 ec 1c             	sub    esp,0x1c
c0009e93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ea7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eb6:	83 ec 08             	sub    esp,0x8
c0009eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ebd:	50                   	push   eax
c0009ebe:	e8 e1 f2 ff ff       	call   c00091a4 <Device::Device(char const*)>
c0009ec3:	83 c4 10             	add    esp,0x10
c0009ec6:	ba 1c 18 02 c0       	mov    edx,0xc002181c
c0009ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ecf:	89 10                	mov    DWORD PTR [eax],edx
c0009ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f0c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f12:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f18:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f23:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f29:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f37:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f41:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f4b:	90                   	nop
c0009f4c:	83 c4 1c             	add    esp,0x1c
c0009f4f:	c3                   	ret    

c0009f50 <LogicalDisk::assignDriveLetter()>:
c0009f50:	55                   	push   ebp
c0009f51:	57                   	push   edi
c0009f52:	56                   	push   esi
c0009f53:	53                   	push   ebx
c0009f54:	83 ec 14             	sub    esp,0x14
c0009f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f61:	b0 41                	mov    al,0x41
c0009f63:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f69:	84 d2                	test   dl,dl
c0009f6b:	75 02                	jne    c0009f6f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f6d:	b0 43                	mov    al,0x43
c0009f6f:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f75:	0f b6 ca             	movzx  ecx,dl
c0009f78:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f7c:	0f be e8             	movsx  ebp,al
c0009f7f:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f89:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f8d:	3c 43                	cmp    al,0x43
c0009f8f:	75 10                	jne    c0009fa1 <LogicalDisk::assignDriveLetter()+0x51>
c0009f91:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f98:	75 5a                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f9a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f9f:	75 53                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fa1:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fa4:	ba 01 00 00 00       	mov    edx,0x1
c0009fa9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fac:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009faf:	d3 e2                	shl    edx,cl
c0009fb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb5:	89 d7                	mov    edi,edx
c0009fb7:	89 d6                	mov    esi,edx
c0009fb9:	c1 ff 1f             	sar    edi,0x1f
c0009fbc:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fc0:	21 f9                	and    ecx,edi
c0009fc2:	09 d1                	or     ecx,edx
c0009fc4:	75 2e                	jne    c0009ff4 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fc6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fce:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fd4:	09 f2                	or     edx,esi
c0009fd6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fd9:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fdf:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fea:	09 fa                	or     edx,edi
c0009fec:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c0009ff2:	eb 0d                	jmp    c000a001 <LogicalDisk::assignDriveLetter()+0xb1>
c0009ff4:	8d 50 01             	lea    edx,[eax+0x1]
c0009ff7:	45                   	inc    ebp
c0009ff8:	88 d0                	mov    al,dl
c0009ffa:	80 fa 5b             	cmp    dl,0x5b
c0009ffd:	75 8e                	jne    c0009f8d <LogicalDisk::assignDriveLetter()+0x3d>
c0009fff:	31 c0                	xor    eax,eax
c000a001:	83 c4 14             	add    esp,0x14
c000a004:	5b                   	pop    ebx
c000a005:	5e                   	pop    esi
c000a006:	5f                   	pop    edi
c000a007:	5d                   	pop    ebp
c000a008:	c3                   	ret    
c000a009:	90                   	nop

c000a00a <LogicalDisk::mount()>:
c000a00a:	56                   	push   esi
c000a00b:	53                   	push   ebx
c000a00c:	53                   	push   ebx
c000a00d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a011:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a017:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a021:	85 db                	test   ebx,ebx
c000a023:	74 27                	je     c000a04c <LogicalDisk::mount()+0x42>
c000a025:	51                   	push   ecx
c000a026:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a02d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a02f:	83 e8 41             	sub    eax,0x41
c000a032:	50                   	push   eax
c000a033:	56                   	push   esi
c000a034:	53                   	push   ebx
c000a035:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a038:	83 c4 10             	add    esp,0x10
c000a03b:	84 c0                	test   al,al
c000a03d:	74 08                	je     c000a047 <LogicalDisk::mount()+0x3d>
c000a03f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a045:	eb 07                	jmp    c000a04e <LogicalDisk::mount()+0x44>
c000a047:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a04a:	eb d5                	jmp    c000a021 <LogicalDisk::mount()+0x17>
c000a04c:	31 c0                	xor    eax,eax
c000a04e:	5a                   	pop    edx
c000a04f:	5b                   	pop    ebx
c000a050:	5e                   	pop    esi
c000a051:	c3                   	ret    

c000a052 <LogicalDisk::unmount()>:
c000a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a056:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a060:	c3                   	ret    
c000a061:	90                   	nop

c000a062 <LogicalDisk::eject()>:
c000a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a066:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a06c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a06e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a072:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a075:	90                   	nop

c000a076 <LogicalDisk::unassignDriveLetter()>:
c000a076:	57                   	push   edi
c000a077:	56                   	push   esi
c000a078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a07c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a083:	85 c9                	test   ecx,ecx
c000a085:	75 0f                	jne    c000a096 <LogicalDisk::unassignDriveLetter()+0x20>
c000a087:	c7 44 24 0c f4 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc00217f4
c000a08f:	5e                   	pop    esi
c000a090:	5f                   	pop    edi
c000a091:	e9 2c 4c 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000a096:	83 e9 41             	sub    ecx,0x41
c000a099:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0a0:	b8 01 00 00 00       	mov    eax,0x1
c000a0a5:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0b0:	d3 e0                	shl    eax,cl
c000a0b2:	89 c7                	mov    edi,eax
c000a0b4:	f7 d0                	not    eax
c000a0b6:	c1 ff 1f             	sar    edi,0x1f
c000a0b9:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0bf:	89 fe                	mov    esi,edi
c000a0c1:	f7 d6                	not    esi
c000a0c3:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0c9:	5e                   	pop    esi
c000a0ca:	5f                   	pop    edi
c000a0cb:	c3                   	ret    

c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0cc:	57                   	push   edi
c000a0cd:	56                   	push   esi
c000a0ce:	53                   	push   ebx
c000a0cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0e5:	77 41                	ja     c000a128 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0e7:	99                   	cdq    
c000a0e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0ee:	01 c8                	add    eax,ecx
c000a0f0:	11 da                	adc    edx,ebx
c000a0f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0f8:	19 d7                	sbb    edi,edx
c000a0fa:	72 33                	jb     c000a12f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a102:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a108:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a10c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a110:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a116:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a11c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a120:	5b                   	pop    ebx
c000a121:	5e                   	pop    esi
c000a122:	5f                   	pop    edi
c000a123:	e9 d0 0a 00 00       	jmp    c000abf8 <VCache::read(unsigned long long, int, void*)>
c000a128:	b8 05 00 00 00       	mov    eax,0x5
c000a12d:	eb 05                	jmp    c000a134 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a12f:	b8 07 00 00 00       	mov    eax,0x7
c000a134:	5b                   	pop    ebx
c000a135:	5e                   	pop    esi
c000a136:	5f                   	pop    edi
c000a137:	c3                   	ret    

c000a138 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a138:	57                   	push   edi
c000a139:	56                   	push   esi
c000a13a:	53                   	push   ebx
c000a13b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a13f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a143:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a14b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a151:	77 41                	ja     c000a194 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a153:	99                   	cdq    
c000a154:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a15a:	01 c8                	add    eax,ecx
c000a15c:	11 da                	adc    edx,ebx
c000a15e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a164:	19 d7                	sbb    edi,edx
c000a166:	72 33                	jb     c000a19b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a168:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a16e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a174:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a178:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a17c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a182:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a188:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a18c:	5b                   	pop    ebx
c000a18d:	5e                   	pop    esi
c000a18e:	5f                   	pop    edi
c000a18f:	e9 70 09 00 00       	jmp    c000ab04 <VCache::write(unsigned long long, int, void*)>
c000a194:	b8 05 00 00 00       	mov    eax,0x5
c000a199:	eb 05                	jmp    c000a1a0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a19b:	b8 07 00 00 00       	mov    eax,0x7
c000a1a0:	5b                   	pop    ebx
c000a1a1:	5e                   	pop    esi
c000a1a2:	5f                   	pop    edi
c000a1a3:	c3                   	ret    

c000a1a4 <Mouse::Mouse(char const*)>:
c000a1a4:	83 ec 0c             	sub    esp,0xc
c000a1a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ab:	83 ec 08             	sub    esp,0x8
c000a1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b2:	50                   	push   eax
c000a1b3:	e8 ec ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a1b8:	83 c4 10             	add    esp,0x10
c000a1bb:	ba 48 18 02 c0       	mov    edx,0xc0021848
c000a1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c4:	89 10                	mov    DWORD PTR [eax],edx
c000a1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ca:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1d4:	90                   	nop
c000a1d5:	83 c4 0c             	add    esp,0xc
c000a1d8:	c3                   	ret    
c000a1d9:	90                   	nop
c000a1da:	66 90                	xchg   ax,ax

c000a1dc <Mouse::~Mouse()>:
c000a1dc:	83 ec 0c             	sub    esp,0xc
c000a1df:	ba 48 18 02 c0       	mov    edx,0xc0021848
c000a1e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e8:	89 10                	mov    DWORD PTR [eax],edx
c000a1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ee:	83 ec 0c             	sub    esp,0xc
c000a1f1:	50                   	push   eax
c000a1f2:	e8 4d ed ff ff       	call   c0008f44 <Device::~Device()>
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	90                   	nop
c000a1fb:	83 c4 0c             	add    esp,0xc
c000a1fe:	c3                   	ret    
c000a1ff:	90                   	nop

c000a200 <Mouse::~Mouse()>:
c000a200:	83 ec 0c             	sub    esp,0xc
c000a203:	83 ec 0c             	sub    esp,0xc
c000a206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20a:	e8 cd ff ff ff       	call   c000a1dc <Mouse::~Mouse()>
c000a20f:	83 c4 10             	add    esp,0x10
c000a212:	83 ec 08             	sub    esp,0x8
c000a215:	68 58 01 00 00       	push   0x158
c000a21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21e:	e8 dd 24 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a223:	83 c4 10             	add    esp,0x10
c000a226:	83 c4 0c             	add    esp,0xc
c000a229:	c3                   	ret    

c000a22a <NIC::getMAC()>:
c000a22a:	31 c0                	xor    eax,eax
c000a22c:	31 d2                	xor    edx,edx
c000a22e:	c3                   	ret    
c000a22f:	90                   	nop

c000a230 <NIC::write(int, unsigned char*, int*)>:
c000a230:	b8 01 00 00 00       	mov    eax,0x1
c000a235:	c3                   	ret    

c000a236 <NIC::NIC(char const*)>:
c000a236:	83 ec 0c             	sub    esp,0xc
c000a239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23d:	83 ec 08             	sub    esp,0x8
c000a240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a244:	50                   	push   eax
c000a245:	e8 5a ef ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a24a:	83 c4 10             	add    esp,0x10
c000a24d:	ba 74 18 02 c0       	mov    edx,0xc0021874
c000a252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a256:	89 10                	mov    DWORD PTR [eax],edx
c000a258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a266:	90                   	nop
c000a267:	83 c4 0c             	add    esp,0xc
c000a26a:	c3                   	ret    
c000a26b:	90                   	nop

c000a26c <NIC::~NIC()>:
c000a26c:	83 ec 0c             	sub    esp,0xc
c000a26f:	ba 74 18 02 c0       	mov    edx,0xc0021874
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	89 10                	mov    DWORD PTR [eax],edx
c000a27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27e:	83 ec 0c             	sub    esp,0xc
c000a281:	50                   	push   eax
c000a282:	e8 bd ec ff ff       	call   c0008f44 <Device::~Device()>
c000a287:	83 c4 10             	add    esp,0x10
c000a28a:	90                   	nop
c000a28b:	83 c4 0c             	add    esp,0xc
c000a28e:	c3                   	ret    
c000a28f:	90                   	nop

c000a290 <NIC::~NIC()>:
c000a290:	83 ec 0c             	sub    esp,0xc
c000a293:	83 ec 0c             	sub    esp,0xc
c000a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29a:	e8 cd ff ff ff       	call   c000a26c <NIC::~NIC()>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	83 ec 08             	sub    esp,0x8
c000a2a5:	68 58 01 00 00       	push   0x158
c000a2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ae:	e8 4d 24 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a2b3:	83 c4 10             	add    esp,0x10
c000a2b6:	83 c4 0c             	add    esp,0xc
c000a2b9:	c3                   	ret    

c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ba:	55                   	push   ebp
c000a2bb:	57                   	push   edi
c000a2bc:	56                   	push   esi
c000a2bd:	53                   	push   ebx
c000a2be:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2c4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2cb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2d2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2d9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2e8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2ef:	e8 ac ef ff ff       	call   c00092a0 <Device::getName()>
c000a2f4:	5a                   	pop    edx
c000a2f5:	59                   	pop    ecx
c000a2f6:	50                   	push   eax
c000a2f7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2fb:	55                   	push   ebp
c000a2fc:	e8 3f 63 ff ff       	call   c0000640 <strcpy>
c000a301:	5b                   	pop    ebx
c000a302:	58                   	pop    eax
c000a303:	68 a0 18 02 c0       	push   0xc00218a0
c000a308:	55                   	push   ebp
c000a309:	e8 32 65 ff ff       	call   c0000840 <strcat>
c000a30e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a315:	e8 61 46 00 00       	call   c000e97b <malloc>
c000a31a:	83 c4 0c             	add    esp,0xc
c000a31d:	89 c3                	mov    ebx,eax
c000a31f:	57                   	push   edi
c000a320:	56                   	push   esi
c000a321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a325:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a329:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a330:	55                   	push   ebp
c000a331:	50                   	push   eax
c000a332:	e8 59 fb ff ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a337:	83 c4 14             	add    esp,0x14
c000a33a:	53                   	push   ebx
c000a33b:	e8 10 fc ff ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c000a340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a343:	e8 c2 fc ff ff       	call   c000a00a <LogicalDisk::mount()>
c000a348:	58                   	pop    eax
c000a349:	5a                   	pop    edx
c000a34a:	53                   	push   ebx
c000a34b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a352:	e8 eb ec ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a357:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a35d:	5b                   	pop    ebx
c000a35e:	5e                   	pop    esi
c000a35f:	5f                   	pop    edi
c000a360:	5d                   	pop    ebp
c000a361:	c3                   	ret    

c000a362 <createPartitionsForDisk(PhysicalDisk*)>:
c000a362:	55                   	push   ebp
c000a363:	57                   	push   edi
c000a364:	56                   	push   esi
c000a365:	53                   	push   ebx
c000a366:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a36c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a373:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a379:	3d 00 02 00 00       	cmp    eax,0x200
c000a37e:	74 27                	je     c000a3a7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a380:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a386:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a38c:	83 ec 10             	sub    esp,0x10
c000a38f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a393:	99                   	cdq    
c000a394:	c1 e6 0a             	shl    esi,0xa
c000a397:	52                   	push   edx
c000a398:	89 fd                	mov    ebp,edi
c000a39a:	50                   	push   eax
c000a39b:	55                   	push   ebp
c000a39c:	56                   	push   esi
c000a39d:	e8 62 57 01 00       	call   c001fb04 <__udivdi3>
c000a3a2:	e9 b9 00 00 00       	jmp    c000a460 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3a7:	83 ec 0c             	sub    esp,0xc
c000a3aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3ac:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3b0:	56                   	push   esi
c000a3b1:	6a 01                	push   0x1
c000a3b3:	6a 00                	push   0x0
c000a3b5:	6a 00                	push   0x0
c000a3b7:	53                   	push   ebx
c000a3b8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3bb:	83 c4 20             	add    esp,0x20
c000a3be:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3c6:	75 0a                	jne    c000a3d2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3c8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3d0:	74 2c                	je     c000a3fe <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3d2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3d8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3e4:	83 ec 10             	sub    esp,0x10
c000a3e7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3eb:	89 f7                	mov    edi,esi
c000a3ed:	c1 e0 0a             	shl    eax,0xa
c000a3f0:	c1 ff 1f             	sar    edi,0x1f
c000a3f3:	57                   	push   edi
c000a3f4:	56                   	push   esi
c000a3f5:	52                   	push   edx
c000a3f6:	50                   	push   eax
c000a3f7:	e8 08 57 01 00       	call   c001fb04 <__udivdi3>
c000a3fc:	eb 62                	jmp    c000a460 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3fe:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a405:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a40c:	89 cf                	mov    edi,ecx
c000a40e:	83 e2 7f             	and    edx,0x7f
c000a411:	83 e7 7f             	and    edi,0x7f
c000a414:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a41b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a41e:	83 e0 7f             	and    eax,0x7f
c000a421:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a424:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a42b:	83 e0 7f             	and    eax,0x7f
c000a42e:	01 d0                	add    eax,edx
c000a430:	89 c5                	mov    ebp,eax
c000a432:	84 c0                	test   al,al
c000a434:	74 41                	je     c000a477 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a436:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a43c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a442:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a448:	83 ec 10             	sub    esp,0x10
c000a44b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a44f:	89 f7                	mov    edi,esi
c000a451:	c1 e0 0a             	shl    eax,0xa
c000a454:	c1 ff 1f             	sar    edi,0x1f
c000a457:	57                   	push   edi
c000a458:	56                   	push   esi
c000a459:	52                   	push   edx
c000a45a:	50                   	push   eax
c000a45b:	e8 a4 56 01 00       	call   c001fb04 <__udivdi3>
c000a460:	83 c4 14             	add    esp,0x14
c000a463:	52                   	push   edx
c000a464:	50                   	push   eax
c000a465:	6a 00                	push   0x0
c000a467:	6a 00                	push   0x0
c000a469:	53                   	push   ebx
c000a46a:	e8 4b fe ff ff       	call   c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a46f:	83 c4 20             	add    esp,0x20
c000a472:	e9 73 01 00 00       	jmp    c000a5ea <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a477:	89 f0                	mov    eax,esi
c000a479:	31 c9                	xor    ecx,ecx
c000a47b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a482:	75 02                	jne    c000a486 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a484:	89 cd                	mov    ebp,ecx
c000a486:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a48d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a494:	c1 e2 08             	shl    edx,0x8
c000a497:	c1 e6 10             	shl    esi,0x10
c000a49a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4a2:	09 f2                	or     edx,esi
c000a4a4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4ac:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4b3:	83 c0 10             	add    eax,0x10
c000a4b6:	09 f2                	or     edx,esi
c000a4b8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4bf:	c1 e6 18             	shl    esi,0x18
c000a4c2:	09 f2                	or     edx,esi
c000a4c4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4cb:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4cf:	c1 e6 10             	shl    esi,0x10
c000a4d2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4d9:	c1 e2 08             	shl    edx,0x8
c000a4dc:	09 f2                	or     edx,esi
c000a4de:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4e5:	09 f2                	or     edx,esi
c000a4e7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4ee:	c1 e6 18             	shl    esi,0x18
c000a4f1:	09 f2                	or     edx,esi
c000a4f3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4f7:	41                   	inc    ecx
c000a4f8:	83 f9 04             	cmp    ecx,0x4
c000a4fb:	0f 85 7a ff ff ff    	jne    c000a47b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a505:	83 f0 01             	xor    eax,0x1
c000a508:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a50c:	75 4f                	jne    c000a55d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a50e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a512:	83 f0 01             	xor    eax,0x1
c000a515:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a519:	75 42                	jne    c000a55d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a523:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a52b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a531:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a537:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a53d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a541:	89 f7                	mov    edi,esi
c000a543:	c1 e0 0a             	shl    eax,0xa
c000a546:	c1 ff 1f             	sar    edi,0x1f
c000a549:	57                   	push   edi
c000a54a:	56                   	push   esi
c000a54b:	52                   	push   edx
c000a54c:	50                   	push   eax
c000a54d:	e8 b2 55 01 00       	call   c001fb04 <__udivdi3>
c000a552:	83 c4 10             	add    esp,0x10
c000a555:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a559:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a55d:	89 e8                	mov    eax,ebp
c000a55f:	0f b6 e8             	movzx  ebp,al
c000a562:	85 ed                	test   ebp,ebp
c000a564:	74 50                	je     c000a5b6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a56a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a56e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a572:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a576:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a57a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a57e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a582:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a586:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a58a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a592:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a596:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a59a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a59e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5a6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5aa:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ae:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5b2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5b6:	31 ed                	xor    ebp,ebp
c000a5b8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c0:	89 f8                	mov    eax,edi
c000a5c2:	09 f0                	or     eax,esi
c000a5c4:	74 1e                	je     c000a5e4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ce:	89 d1                	mov    ecx,edx
c000a5d0:	09 c1                	or     ecx,eax
c000a5d2:	74 10                	je     c000a5e4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d4:	83 ec 0c             	sub    esp,0xc
c000a5d7:	57                   	push   edi
c000a5d8:	56                   	push   esi
c000a5d9:	52                   	push   edx
c000a5da:	50                   	push   eax
c000a5db:	53                   	push   ebx
c000a5dc:	e8 d9 fc ff ff       	call   c000a2ba <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5e1:	83 c4 20             	add    esp,0x20
c000a5e4:	45                   	inc    ebp
c000a5e5:	83 fd 04             	cmp    ebp,0x4
c000a5e8:	75 ce                	jne    c000a5b8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5ea:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5f0:	5b                   	pop    ebx
c000a5f1:	5e                   	pop    esi
c000a5f2:	5f                   	pop    edi
c000a5f3:	5d                   	pop    ebp
c000a5f4:	c3                   	ret    
c000a5f5:	66 90                	xchg   ax,ax
c000a5f7:	90                   	nop

c000a5f8 <Serial::Serial(char const*)>:
c000a5f8:	83 ec 0c             	sub    esp,0xc
c000a5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5ff:	83 ec 08             	sub    esp,0x8
c000a602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a606:	50                   	push   eax
c000a607:	e8 98 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a60c:	83 c4 10             	add    esp,0x10
c000a60f:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000a614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a618:	89 10                	mov    DWORD PTR [eax],edx
c000a61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a628:	90                   	nop
c000a629:	83 c4 0c             	add    esp,0xc
c000a62c:	c3                   	ret    
c000a62d:	90                   	nop
c000a62e:	66 90                	xchg   ax,ax

c000a630 <Serial::~Serial()>:
c000a630:	83 ec 0c             	sub    esp,0xc
c000a633:	ba b4 18 02 c0       	mov    edx,0xc00218b4
c000a638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63c:	89 10                	mov    DWORD PTR [eax],edx
c000a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a642:	83 ec 0c             	sub    esp,0xc
c000a645:	50                   	push   eax
c000a646:	e8 f9 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a64b:	83 c4 10             	add    esp,0x10
c000a64e:	90                   	nop
c000a64f:	83 c4 0c             	add    esp,0xc
c000a652:	c3                   	ret    
c000a653:	90                   	nop

c000a654 <Serial::~Serial()>:
c000a654:	83 ec 0c             	sub    esp,0xc
c000a657:	83 ec 0c             	sub    esp,0xc
c000a65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65e:	e8 cd ff ff ff       	call   c000a630 <Serial::~Serial()>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	83 ec 08             	sub    esp,0x8
c000a669:	68 58 01 00 00       	push   0x158
c000a66e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a672:	e8 89 20 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	83 c4 0c             	add    esp,0xc
c000a67d:	c3                   	ret    
c000a67e:	66 90                	xchg   ax,ax

c000a680 <Timer::Timer(char const*)>:
c000a680:	83 ec 0c             	sub    esp,0xc
c000a683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a687:	83 ec 08             	sub    esp,0x8
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	50                   	push   eax
c000a68f:	e8 10 eb ff ff       	call   c00091a4 <Device::Device(char const*)>
c000a694:	83 c4 10             	add    esp,0x10
c000a697:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000a69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a0:	89 10                	mov    DWORD PTR [eax],edx
c000a6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6b0:	90                   	nop
c000a6b1:	83 c4 0c             	add    esp,0xc
c000a6b4:	c3                   	ret    
c000a6b5:	90                   	nop
c000a6b6:	66 90                	xchg   ax,ax

c000a6b8 <Timer::~Timer()>:
c000a6b8:	83 ec 0c             	sub    esp,0xc
c000a6bb:	ba 4c 19 02 c0       	mov    edx,0xc002194c
c000a6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c4:	89 10                	mov    DWORD PTR [eax],edx
c000a6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ca:	83 ec 0c             	sub    esp,0xc
c000a6cd:	50                   	push   eax
c000a6ce:	e8 71 e8 ff ff       	call   c0008f44 <Device::~Device()>
c000a6d3:	83 c4 10             	add    esp,0x10
c000a6d6:	90                   	nop
c000a6d7:	83 c4 0c             	add    esp,0xc
c000a6da:	c3                   	ret    
c000a6db:	90                   	nop

c000a6dc <Timer::~Timer()>:
c000a6dc:	83 ec 0c             	sub    esp,0xc
c000a6df:	83 ec 0c             	sub    esp,0xc
c000a6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e6:	e8 cd ff ff ff       	call   c000a6b8 <Timer::~Timer()>
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	83 ec 08             	sub    esp,0x8
c000a6f1:	68 5c 01 00 00       	push   0x15c
c000a6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fa:	e8 01 20 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000a6ff:	83 c4 10             	add    esp,0x10
c000a702:	83 c4 0c             	add    esp,0xc
c000a705:	c3                   	ret    

c000a706 <Timer::read()>:
c000a706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a70a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a710:	c3                   	ret    

c000a711 <setupTimer(int)>:
c000a711:	53                   	push   ebx
c000a712:	83 ec 14             	sub    esp,0x14
c000a715:	68 5c 01 00 00       	push   0x15c
c000a71a:	e8 5c 42 00 00       	call   c000e97b <malloc>
c000a71f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a722:	89 c3                	mov    ebx,eax
c000a724:	e8 63 4c 01 00       	call   c001f38c <PIT::PIT()>
c000a729:	58                   	pop    eax
c000a72a:	5a                   	pop    edx
c000a72b:	53                   	push   ebx
c000a72c:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a732:	e8 0b e9 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000a737:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a739:	6a 00                	push   0x0
c000a73b:	6a 00                	push   0x0
c000a73d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a741:	53                   	push   ebx
c000a742:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a745:	89 d8                	mov    eax,ebx
c000a747:	83 c4 28             	add    esp,0x28
c000a74a:	5b                   	pop    ebx
c000a74b:	c3                   	ret    

c000a74c <timerHandler(unsigned int)>:
c000a74c:	57                   	push   edi
c000a74d:	56                   	push   esi
c000a74e:	53                   	push   ebx
c000a74f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a753:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a759:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a760:	0f 84 4e 01 00 00    	je     c000a8b4 <timerHandler(unsigned int)+0x168>
c000a766:	fa                   	cli    
c000a767:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a76d:	83 ec 0c             	sub    esp,0xc
c000a770:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a776:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a77b:	e8 1c 57 01 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a780:	83 c4 10             	add    esp,0x10
c000a783:	84 c0                	test   al,al
c000a785:	0f 85 a1 00 00 00    	jne    c000a82c <timerHandler(unsigned int)+0xe0>
c000a78b:	83 ec 0c             	sub    esp,0xc
c000a78e:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a793:	e8 20 57 01 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a798:	83 c4 10             	add    esp,0x10
c000a79b:	89 c6                	mov    esi,eax
c000a79d:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a0:	83 ec 0c             	sub    esp,0xc
c000a7a3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a8:	e8 0b 57 01 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ad:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7b4:	89 c3                	mov    ebx,eax
c000a7b6:	e8 05 57 01 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7bb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7c7:	77 23                	ja     c000a7ec <timerHandler(unsigned int)+0xa0>
c000a7c9:	83 ec 0c             	sub    esp,0xc
c000a7cc:	53                   	push   ebx
c000a7cd:	e8 de af 00 00       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c000a7d2:	83 c4 10             	add    esp,0x10
c000a7d5:	39 de                	cmp    esi,ebx
c000a7d7:	75 27                	jne    c000a800 <timerHandler(unsigned int)+0xb4>
c000a7d9:	83 ec 0c             	sub    esp,0xc
c000a7dc:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7e1:	e8 d2 56 01 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e6:	89 c6                	mov    esi,eax
c000a7e8:	eb 12                	jmp    c000a7fc <timerHandler(unsigned int)+0xb0>
c000a7ea:	66 90                	xchg   ax,ax
c000a7ec:	50                   	push   eax
c000a7ed:	50                   	push   eax
c000a7ee:	53                   	push   ebx
c000a7ef:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f4:	e8 83 57 01 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	90                   	nop
c000a800:	83 ec 0c             	sub    esp,0xc
c000a803:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a808:	e8 8f 56 01 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a80d:	83 c4 10             	add    esp,0x10
c000a810:	84 c0                	test   al,al
c000a812:	75 18                	jne    c000a82c <timerHandler(unsigned int)+0xe0>
c000a814:	83 ec 0c             	sub    esp,0xc
c000a817:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a81c:	e8 97 56 01 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	39 f0                	cmp    eax,esi
c000a826:	0f 85 74 ff ff ff    	jne    c000a7a0 <timerHandler(unsigned int)+0x54>
c000a82c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a831:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a835:	74 41                	je     c000a878 <timerHandler(unsigned int)+0x12c>
c000a837:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a83e:	74 38                	je     c000a878 <timerHandler(unsigned int)+0x12c>
c000a840:	fa                   	cli    
c000a841:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a847:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a84d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a852:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a85a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a85d:	77 05                	ja     c000a864 <timerHandler(unsigned int)+0x118>
c000a85f:	e8 3c ac 00 00       	call   c00154a0 <schedule()>
c000a864:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a86b:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a872:	75 04                	jne    c000a878 <timerHandler(unsigned int)+0x12c>
c000a874:	fb                   	sti    
c000a875:	8d 76 00             	lea    esi,[esi+0x0]
c000a878:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a87d:	48                   	dec    eax
c000a87e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a883:	75 1b                	jne    c000a8a0 <timerHandler(unsigned int)+0x154>
c000a885:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a88c:	74 12                	je     c000a8a0 <timerHandler(unsigned int)+0x154>
c000a88e:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a898:	e8 03 ac 00 00       	call   c00154a0 <schedule()>
c000a89d:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a0:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a8a7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a8ae:	75 04                	jne    c000a8b4 <timerHandler(unsigned int)+0x168>
c000a8b0:	fb                   	sti    
c000a8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b4:	5b                   	pop    ebx
c000a8b5:	5e                   	pop    esi
c000a8b6:	5f                   	pop    edi
c000a8b7:	c3                   	ret    

c000a8b8 <VCache::VCache(PhysicalDisk*)>:
c000a8b8:	53                   	push   ebx
c000a8b9:	83 ec 18             	sub    esp,0x18
c000a8bc:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	89 10                	mov    DWORD PTR [eax],edx
c000a8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8e8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8fa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a905:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a910:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a918:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a91f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a932:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a942:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a949:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a951:	83 ec 0c             	sub    esp,0xc
c000a954:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a958:	e8 1e 40 00 00       	call   c000e97b <malloc>
c000a95d:	83 c4 10             	add    esp,0x10
c000a960:	89 c3                	mov    ebx,eax
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	53                   	push   ebx
c000a966:	e8 3d 43 00 00       	call   c000eca8 <Mutex::Mutex()>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a972:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a979:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a97d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a984:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a98b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a98f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a999:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a99c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9b3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9c8:	05 00 02 00 00       	add    eax,0x200
c000a9cd:	c1 e0 03             	shl    eax,0x3
c000a9d0:	83 ec 0c             	sub    esp,0xc
c000a9d3:	50                   	push   eax
c000a9d4:	e8 a2 3f 00 00       	call   c000e97b <malloc>
c000a9d9:	83 c4 10             	add    esp,0x10
c000a9dc:	89 c2                	mov    edx,eax
c000a9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9fc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa02:	89 d0                	mov    eax,edx
c000aa04:	c1 e0 02             	shl    eax,0x2
c000aa07:	01 d0                	add    eax,edx
c000aa09:	c1 e0 04             	shl    eax,0x4
c000aa0c:	83 ec 0c             	sub    esp,0xc
c000aa0f:	50                   	push   eax
c000aa10:	e8 66 3f 00 00       	call   c000e97b <malloc>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 c2                	mov    edx,eax
c000aa1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa1e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa21:	90                   	nop
c000aa22:	83 c4 18             	add    esp,0x18
c000aa25:	5b                   	pop    ebx
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VCache::invalidateReadBuffer()>:
c000aa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa2c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa32:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa36:	c3                   	ret    
c000aa37:	90                   	nop

c000aa38 <VCache::writeWriteBuffer()>:
c000aa38:	53                   	push   ebx
c000aa39:	83 ec 08             	sub    esp,0x8
c000aa3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa40:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa44:	74 1e                	je     c000aa64 <VCache::writeWriteBuffer()+0x2c>
c000aa46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa49:	83 ec 0c             	sub    esp,0xc
c000aa4c:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa4e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa54:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa57:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa5a:	50                   	push   eax
c000aa5b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa5e:	83 c4 20             	add    esp,0x20
c000aa61:	8d 76 00             	lea    esi,[esi+0x0]
c000aa64:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa6b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa72:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa76:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa7d:	83 c4 08             	add    esp,0x8
c000aa80:	5b                   	pop    ebx
c000aa81:	c3                   	ret    
c000aa82:	66 90                	xchg   ax,ax

c000aa84 <VCache::~VCache()>:
c000aa84:	83 ec 0c             	sub    esp,0xc
c000aa87:	ba 7c 19 02 c0       	mov    edx,0xc002197c
c000aa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa90:	89 10                	mov    DWORD PTR [eax],edx
c000aa92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa96:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa99:	0f b6 c0             	movzx  eax,al
c000aa9c:	85 c0                	test   eax,eax
c000aa9e:	74 10                	je     c000aab0 <VCache::~VCache()+0x2c>
c000aaa0:	83 ec 0c             	sub    esp,0xc
c000aaa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaa7:	e8 8c ff ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000aaac:	83 c4 10             	add    esp,0x10
c000aaaf:	90                   	nop
c000aab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aab7:	83 ec 0c             	sub    esp,0xc
c000aaba:	50                   	push   eax
c000aabb:	e8 cb 3e 00 00       	call   c000e98b <free>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	50                   	push   eax
c000aace:	e8 b8 3e 00 00       	call   c000e98b <free>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	90                   	nop
c000aad7:	83 c4 0c             	add    esp,0xc
c000aada:	c3                   	ret    
c000aadb:	90                   	nop

c000aadc <VCache::~VCache()>:
c000aadc:	83 ec 0c             	sub    esp,0xc
c000aadf:	83 ec 0c             	sub    esp,0xc
c000aae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aae6:	e8 99 ff ff ff       	call   c000aa84 <VCache::~VCache()>
c000aaeb:	83 c4 10             	add    esp,0x10
c000aaee:	83 ec 08             	sub    esp,0x8
c000aaf1:	6a 44                	push   0x44
c000aaf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf7:	e8 04 1c 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 c4 0c             	add    esp,0xc
c000ab02:	c3                   	ret    
c000ab03:	90                   	nop

c000ab04 <VCache::write(unsigned long long, int, void*)>:
c000ab04:	55                   	push   ebp
c000ab05:	57                   	push   edi
c000ab06:	56                   	push   esi
c000ab07:	53                   	push   ebx
c000ab08:	83 ec 1c             	sub    esp,0x1c
c000ab0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab17:	e8 ec a6 00 00       	call   c0015208 <KeDisablePreemption()>
c000ab1c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab20:	74 0e                	je     c000ab30 <VCache::write(unsigned long long, int, void*)+0x2c>
c000ab22:	83 ec 0c             	sub    esp,0xc
c000ab25:	53                   	push   ebx
c000ab26:	e8 fd fe ff ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c000ab2b:	83 c4 10             	add    esp,0x10
c000ab2e:	66 90                	xchg   ax,ax
c000ab30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab34:	74 5e                	je     c000ab94 <VCache::write(unsigned long long, int, void*)+0x90>
c000ab36:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000ab39:	89 e8                	mov    eax,ebp
c000ab3b:	99                   	cdq    
c000ab3c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab3f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab42:	89 c1                	mov    ecx,eax
c000ab44:	89 d0                	mov    eax,edx
c000ab46:	31 f1                	xor    ecx,esi
c000ab48:	31 f8                	xor    eax,edi
c000ab4a:	09 c1                	or     ecx,eax
c000ab4c:	75 3a                	jne    c000ab88 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab4e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c000ab53:	75 33                	jne    c000ab88 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab58:	89 ef                	mov    edi,ebp
c000ab5a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab60:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab64:	0f af f9             	imul   edi,ecx
c000ab67:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab6c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab6f:	40                   	inc    eax
c000ab70:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab73:	83 f8 50             	cmp    eax,0x50
c000ab76:	75 70                	jne    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab78:	83 ec 0c             	sub    esp,0xc
c000ab7b:	53                   	push   ebx
c000ab7c:	e8 b7 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	eb 62                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab86:	66 90                	xchg   ax,ax
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	53                   	push   ebx
c000ab8c:	e8 a7 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ab91:	83 c4 10             	add    esp,0x10
c000ab94:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab97:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c000ab9c:	7f 22                	jg     c000abc0 <VCache::write(unsigned long long, int, void*)+0xbc>
c000ab9e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000aba4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000aba8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abac:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000abaf:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abb8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abbc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abbe:	eb 28                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000abc0:	83 ec 0c             	sub    esp,0xc
c000abc3:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abcd:	57                   	push   edi
c000abce:	56                   	push   esi
c000abcf:	50                   	push   eax
c000abd0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abd3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abd7:	83 c4 20             	add    esp,0x20
c000abda:	e8 51 a6 00 00       	call   c0015230 <KeRestorePreemption()>
c000abdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abe3:	eb 0b                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xec>
c000abe5:	8d 76 00             	lea    esi,[esi+0x0]
c000abe8:	e8 43 a6 00 00       	call   c0015230 <KeRestorePreemption()>
c000abed:	31 c0                	xor    eax,eax
c000abef:	90                   	nop
c000abf0:	83 c4 1c             	add    esp,0x1c
c000abf3:	5b                   	pop    ebx
c000abf4:	5e                   	pop    esi
c000abf5:	5f                   	pop    edi
c000abf6:	5d                   	pop    ebp
c000abf7:	c3                   	ret    

c000abf8 <VCache::read(unsigned long long, int, void*)>:
c000abf8:	55                   	push   ebp
c000abf9:	57                   	push   edi
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 1c             	sub    esp,0x1c
c000abff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac03:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ac07:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ac0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ac0f:	e8 f4 a5 00 00       	call   c0015208 <KeDisablePreemption()>
c000ac14:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac18:	74 0e                	je     c000ac28 <VCache::read(unsigned long long, int, void*)+0x30>
c000ac1a:	83 ec 0c             	sub    esp,0xc
c000ac1d:	53                   	push   ebx
c000ac1e:	e8 15 fe ff ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	66 90                	xchg   ax,ax
c000ac28:	83 fd 01             	cmp    ebp,0x1
c000ac2b:	0f 85 97 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac31:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac38:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac3f:	0f 85 83 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac45:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ac48:	89 e9                	mov    ecx,ebp
c000ac4a:	f7 d9                	neg    ecx
c000ac4c:	89 c8                	mov    eax,ecx
c000ac4e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac52:	c1 f8 1f             	sar    eax,0x1f
c000ac55:	21 f1                	and    ecx,esi
c000ac57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac5b:	89 c8                	mov    eax,ecx
c000ac5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac61:	21 f9                	and    ecx,edi
c000ac63:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac67:	89 ca                	mov    edx,ecx
c000ac69:	74 31                	je     c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac6b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac6e:	75 2c                	jne    c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac70:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ac73:	75 27                	jne    c000ac9c <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac75:	8d 76 00             	lea    esi,[esi+0x0]
c000ac78:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ac7f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac88:	48                   	dec    eax
c000ac89:	21 c6                	and    esi,eax
c000ac8b:	0f af f1             	imul   esi,ecx
c000ac8e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac93:	e8 98 a5 00 00       	call   c0015230 <KeRestorePreemption()>
c000ac98:	31 c0                	xor    eax,eax
c000ac9a:	eb 58                	jmp    c000acf4 <VCache::read(unsigned long long, int, void*)+0xfc>
c000ac9c:	83 ec 0c             	sub    esp,0xc
c000ac9f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000aca3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000acaa:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000acad:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000acaf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acb2:	55                   	push   ebp
c000acb3:	52                   	push   edx
c000acb4:	50                   	push   eax
c000acb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acb9:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acbc:	83 c4 20             	add    esp,0x20
c000acbf:	85 c0                	test   eax,eax
c000acc1:	75 31                	jne    c000acf4 <VCache::read(unsigned long long, int, void*)+0xfc>
c000acc3:	eb b3                	jmp    c000ac78 <VCache::read(unsigned long long, int, void*)+0x80>
c000acc5:	8d 76 00             	lea    esi,[esi+0x0]
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	53                   	push   ebx
c000accc:	e8 57 fd ff ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c000acd1:	5a                   	pop    edx
c000acd2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acd5:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000acdb:	55                   	push   ebp
c000acdc:	57                   	push   edi
c000acdd:	56                   	push   esi
c000acde:	50                   	push   eax
c000acdf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ace2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ace6:	83 c4 20             	add    esp,0x20
c000ace9:	e8 42 a5 00 00       	call   c0015230 <KeRestorePreemption()>
c000acee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acf2:	66 90                	xchg   ax,ax
c000acf4:	83 c4 1c             	add    esp,0x1c
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	5f                   	pop    edi
c000acfa:	5d                   	pop    ebp
c000acfb:	c3                   	ret    

c000acfc <Video::putrect(int, int, int, int, unsigned int)>:
c000acfc:	55                   	push   ebp
c000acfd:	57                   	push   edi
c000acfe:	56                   	push   esi
c000acff:	53                   	push   ebx
c000ad00:	83 ec 1c             	sub    esp,0x1c
c000ad03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad07:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad0b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad0f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad1b:	01 df                	add    edi,ebx
c000ad1d:	39 fb                	cmp    ebx,edi
c000ad1f:	7d 1f                	jge    c000ad40 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad21:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad25:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad29:	7d 12                	jge    c000ad3d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad2b:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad31:	53                   	push   ebx
c000ad32:	55                   	push   ebp
c000ad33:	45                   	inc    ebp
c000ad34:	56                   	push   esi
c000ad35:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	eb e8                	jmp    c000ad25 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad3d:	43                   	inc    ebx
c000ad3e:	eb dd                	jmp    c000ad1d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad40:	83 c4 1c             	add    esp,0x1c
c000ad43:	5b                   	pop    ebx
c000ad44:	5e                   	pop    esi
c000ad45:	5f                   	pop    edi
c000ad46:	5d                   	pop    ebp
c000ad47:	c3                   	ret    

c000ad48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad48:	55                   	push   ebp
c000ad49:	57                   	push   edi
c000ad4a:	31 ff                	xor    edi,edi
c000ad4c:	56                   	push   esi
c000ad4d:	53                   	push   ebx
c000ad4e:	83 ec 1c             	sub    esp,0x1c
c000ad51:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad55:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad59:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad60:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad69:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad71:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad74:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad78:	01 f9                	add    ecx,edi
c000ad7a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad7e:	7d 2f                	jge    c000adaf <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad80:	31 f6                	xor    esi,esi
c000ad82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad86:	01 f2                	add    edx,esi
c000ad88:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad8c:	7d 1a                	jge    c000ada8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad91:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad94:	46                   	inc    esi
c000ad95:	51                   	push   ecx
c000ad96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad9a:	52                   	push   edx
c000ad9b:	55                   	push   ebp
c000ad9c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad9f:	83 c4 10             	add    esp,0x10
c000ada2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ada6:	eb da                	jmp    c000ad82 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ada8:	47                   	inc    edi
c000ada9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adad:	eb c5                	jmp    c000ad74 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adaf:	83 c4 1c             	add    esp,0x1c
c000adb2:	5b                   	pop    ebx
c000adb3:	5e                   	pop    esi
c000adb4:	5f                   	pop    edi
c000adb5:	5d                   	pop    ebp
c000adb6:	c3                   	ret    
c000adb7:	90                   	nop

c000adb8 <Video::blit(unsigned int*, int, int, int, int)>:
c000adb8:	55                   	push   ebp
c000adb9:	57                   	push   edi
c000adba:	56                   	push   esi
c000adbb:	53                   	push   ebx
c000adbc:	83 ec 1c             	sub    esp,0x1c
c000adbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000adc7:	85 c0                	test   eax,eax
c000adc9:	79 02                	jns    c000adcd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000adcb:	31 c0                	xor    eax,eax
c000adcd:	c1 e0 02             	shl    eax,0x2
c000add0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000add4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000add8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000addc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ade0:	39 d8                	cmp    eax,ebx
c000ade2:	7e 49                	jle    c000ae2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ade4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adea:	7c 41                	jl     c000ae2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000adf4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adf8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000adfc:	39 f9                	cmp    ecx,edi
c000adfe:	7e 22                	jle    c000ae22 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ae00:	83 c5 04             	add    ebp,0x4
c000ae03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae09:	7c 14                	jl     c000ae1f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ae0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae0d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ae10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae18:	56                   	push   esi
c000ae19:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	47                   	inc    edi
c000ae20:	eb d2                	jmp    c000adf4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ae22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae26:	43                   	inc    ebx
c000ae27:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ae2b:	eb ab                	jmp    c000add8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ae2d:	83 c4 1c             	add    esp,0x1c
c000ae30:	5b                   	pop    ebx
c000ae31:	5e                   	pop    esi
c000ae32:	5f                   	pop    edi
c000ae33:	5d                   	pop    ebp
c000ae34:	c3                   	ret    
c000ae35:	90                   	nop

c000ae36 <Video::clearScreen(unsigned int)>:
c000ae36:	57                   	push   edi
c000ae37:	56                   	push   esi
c000ae38:	53                   	push   ebx
c000ae39:	31 db                	xor    ebx,ebx
c000ae3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae3f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae45:	7e 1f                	jle    c000ae66 <Video::clearScreen(unsigned int)+0x30>
c000ae47:	31 ff                	xor    edi,edi
c000ae49:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae4f:	7e 12                	jle    c000ae63 <Video::clearScreen(unsigned int)+0x2d>
c000ae51:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae57:	53                   	push   ebx
c000ae58:	57                   	push   edi
c000ae59:	47                   	inc    edi
c000ae5a:	56                   	push   esi
c000ae5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	eb e6                	jmp    c000ae49 <Video::clearScreen(unsigned int)+0x13>
c000ae63:	43                   	inc    ebx
c000ae64:	eb d9                	jmp    c000ae3f <Video::clearScreen(unsigned int)+0x9>
c000ae66:	5b                   	pop    ebx
c000ae67:	5e                   	pop    esi
c000ae68:	5f                   	pop    edi
c000ae69:	c3                   	ret    

c000ae6a <Video::putpixel(int, int, unsigned int)>:
c000ae6a:	c7 44 24 04 84 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021984
c000ae72:	e9 4b 3e 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000ae77:	90                   	nop

c000ae78 <Video::readPixelApprox(int, int)>:
c000ae78:	83 ec 18             	sub    esp,0x18
c000ae7b:	68 a5 19 02 c0       	push   0xc00219a5
c000ae80:	e8 3d 3e 00 00       	call   c000ecc2 <KePanic(char const*)>
c000ae85:	31 c0                	xor    eax,eax
c000ae87:	83 c4 1c             	add    esp,0x1c
c000ae8a:	c3                   	ret    
c000ae8b:	90                   	nop

c000ae8c <Video::Video(char const*)>:
c000ae8c:	83 ec 0c             	sub    esp,0xc
c000ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae93:	83 ec 08             	sub    esp,0x8
c000ae96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae9a:	50                   	push   eax
c000ae9b:	e8 04 e3 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000aea0:	83 c4 10             	add    esp,0x10
c000aea3:	ba 48 1a 02 c0       	mov    edx,0xc0021a48
c000aea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeac:	89 10                	mov    DWORD PTR [eax],edx
c000aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aebc:	90                   	nop
c000aebd:	83 c4 0c             	add    esp,0xc
c000aec0:	c3                   	ret    
c000aec1:	90                   	nop

c000aec2 <Video::~Video()>:
c000aec2:	83 ec 0c             	sub    esp,0xc
c000aec5:	ba 48 1a 02 c0       	mov    edx,0xc0021a48
c000aeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aece:	89 10                	mov    DWORD PTR [eax],edx
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	83 ec 0c             	sub    esp,0xc
c000aed7:	50                   	push   eax
c000aed8:	e8 67 e0 ff ff       	call   c0008f44 <Device::~Device()>
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	90                   	nop
c000aee1:	83 c4 0c             	add    esp,0xc
c000aee4:	c3                   	ret    
c000aee5:	90                   	nop

c000aee6 <Video::~Video()>:
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	83 ec 0c             	sub    esp,0xc
c000aeec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef0:	e8 cd ff ff ff       	call   c000aec2 <Video::~Video()>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	83 ec 08             	sub    esp,0x8
c000aefb:	68 64 01 00 00       	push   0x164
c000af00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af04:	e8 f7 17 00 00       	call   c000c700 <operator delete(void*, unsigned long)>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	83 c4 0c             	add    esp,0xc
c000af0f:	c3                   	ret    

c000af10 <Video::isMonochrome()>:
c000af10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af14:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af1a:	c3                   	ret    
c000af1b:	90                   	nop

c000af1c <Video::getWidth()>:
c000af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af26:	c3                   	ret    
c000af27:	90                   	nop

c000af28 <Video::getHeight()>:
c000af28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af32:	c3                   	ret    
c000af33:	90                   	nop

c000af34 <Video::drawCursor(int, int, unsigned int*, int)>:
c000af34:	55                   	push   ebp
c000af35:	57                   	push   edi
c000af36:	56                   	push   esi
c000af37:	53                   	push   ebx
c000af38:	83 ec 2c             	sub    esp,0x2c
c000af3b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af3f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af43:	83 f8 01             	cmp    eax,0x1
c000af46:	19 c9                	sbb    ecx,ecx
c000af48:	31 db                	xor    ebx,ebx
c000af4a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af4e:	89 cd                	mov    ebp,ecx
c000af50:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af58:	f7 d5                	not    ebp
c000af5a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000af60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af64:	01 d8                	add    eax,ebx
c000af66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af6a:	56                   	push   esi
c000af6b:	e8 b8 ff ff ff       	call   c000af28 <Video::getHeight()>
c000af70:	59                   	pop    ecx
c000af71:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af75:	7e 70                	jle    c000afe7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af77:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af7b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000af7f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af8a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af95:	89 f8                	mov    eax,edi
c000af97:	83 c0 20             	add    eax,0x20
c000af9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af9e:	56                   	push   esi
c000af9f:	e8 78 ff ff ff       	call   c000af1c <Video::getWidth()>
c000afa4:	5a                   	pop    edx
c000afa5:	39 c7                	cmp    edi,eax
c000afa7:	7d 34                	jge    c000afdd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afa9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afae:	74 05                	je     c000afb5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afb0:	8b 06                	mov    eax,DWORD PTR [esi]
c000afb2:	55                   	push   ebp
c000afb3:	eb 0d                	jmp    c000afc2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afb5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afba:	74 12                	je     c000afce <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afbc:	8b 06                	mov    eax,DWORD PTR [esi]
c000afbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afc2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afc6:	57                   	push   edi
c000afc7:	56                   	push   esi
c000afc8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afd2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afd6:	47                   	inc    edi
c000afd7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000afdb:	75 c1                	jne    c000af9e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afdd:	43                   	inc    ebx
c000afde:	83 fb 20             	cmp    ebx,0x20
c000afe1:	0f 85 79 ff ff ff    	jne    c000af60 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afe7:	83 c4 2c             	add    esp,0x2c
c000afea:	5b                   	pop    ebx
c000afeb:	5e                   	pop    esi
c000afec:	5f                   	pop    edi
c000afed:	5d                   	pop    ebp
c000afee:	c3                   	ret    
c000afef:	90                   	nop

c000aff0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000aff0:	55                   	push   ebp
c000aff1:	57                   	push   edi
c000aff2:	56                   	push   esi
c000aff3:	53                   	push   ebx
c000aff4:	83 ec 48             	sub    esp,0x48
c000aff7:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000affb:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000afff:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b003:	c1 e0 08             	shl    eax,0x8
c000b006:	01 d0                	add    eax,edx
c000b008:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b00c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b010:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b014:	c1 e0 08             	shl    eax,0x8
c000b017:	01 d0                	add    eax,edx
c000b019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b01d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b021:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b026:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b02a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b02e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b035:	50                   	push   eax
c000b036:	e8 40 39 00 00       	call   c000e97b <malloc>
c000b03b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b047:	75 10                	jne    c000b059 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b049:	83 ec 0c             	sub    esp,0xc
c000b04c:	68 d0 19 02 c0       	push   0xc00219d0
c000b051:	e8 6c 3c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	51                   	push   ecx
c000b05a:	51                   	push   ecx
c000b05b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b05f:	50                   	push   eax
c000b060:	68 e0 19 02 c0       	push   0xc00219e0
c000b065:	e8 fa be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b06a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b06d:	83 e0 20             	and    eax,0x20
c000b070:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b074:	85 c0                	test   eax,eax
c000b076:	5e                   	pop    esi
c000b077:	0f 94 c0             	sete   al
c000b07a:	5f                   	pop    edi
c000b07b:	0f b6 c0             	movzx  eax,al
c000b07e:	be 12 00 00 00       	mov    esi,0x12
c000b083:	50                   	push   eax
c000b084:	68 ea 19 02 c0       	push   0xc00219ea
c000b089:	e8 d6 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b08e:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 d0                	mov    eax,edx
c000b097:	85 d2                	test   edx,edx
c000b099:	74 11                	je     c000b0ac <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b09b:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b09f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0a3:	c1 fe 03             	sar    esi,0x3
c000b0a6:	0f af f1             	imul   esi,ecx
c000b0a9:	83 c6 12             	add    esi,0x12
c000b0ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0b1:	74 07                	je     c000b0ba <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b0b3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b0b8:	75 12                	jne    c000b0cc <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b0ba:	83 ec 0c             	sub    esp,0xc
c000b0bd:	68 f8 19 02 c0       	push   0xc00219f8
c000b0c2:	e8 9d be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0c7:	e9 a0 02 00 00       	jmp    c000b36c <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b0cc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0d0:	83 f9 02             	cmp    ecx,0x2
c000b0d3:	74 0e                	je     c000b0e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b0d5:	83 f9 0a             	cmp    ecx,0xa
c000b0d8:	0f 84 c8 00 00 00    	je     c000b1a6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b0de:	e9 72 02 00 00       	jmp    c000b355 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b0e3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0e8:	75 0e                	jne    c000b0f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0ea:	84 c0                	test   al,al
c000b0ec:	75 0a                	jne    c000b0f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0ee:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0f1:	83 e8 18             	sub    eax,0x18
c000b0f4:	a8 f7                	test   al,0xf7
c000b0f6:	74 0d                	je     c000b105 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b0f8:	83 ec 0c             	sub    esp,0xc
c000b0fb:	68 0d 1a 02 c0       	push   0xc0021a0d
c000b100:	e9 58 02 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b105:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b10a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b112:	31 c0                	xor    eax,eax
c000b114:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b118:	89 c7                	mov    edi,eax
c000b11a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b122:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b127:	75 15                	jne    c000b13e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b129:	99                   	cdq    
c000b12a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b12e:	85 d2                	test   edx,edx
c000b130:	75 0c                	jne    c000b13e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b132:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b136:	29 c7                	sub    edi,eax
c000b138:	4f                   	dec    edi
c000b139:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b13e:	31 d2                	xor    edx,edx
c000b140:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b144:	75 08                	jne    c000b14e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b146:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b14b:	c1 e2 18             	shl    edx,0x18
c000b14e:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b153:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b157:	c1 e1 10             	shl    ecx,0x10
c000b15a:	8d 47 01             	lea    eax,[edi+0x1]
c000b15d:	89 cd                	mov    ebp,ecx
c000b15f:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b164:	c1 e1 08             	shl    ecx,0x8
c000b167:	09 e9                	or     ecx,ebp
c000b169:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b16d:	09 e9                	or     ecx,ebp
c000b16f:	09 d1                	or     ecx,edx
c000b171:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b175:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b178:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b17c:	c1 fa 03             	sar    edx,0x3
c000b17f:	01 d6                	add    esi,edx
c000b181:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b185:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b189:	7e 04                	jle    c000b18f <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b18b:	89 c7                	mov    edi,eax
c000b18d:	eb 93                	jmp    c000b122 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b18f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b193:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b197:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b19b:	0f 8f 77 ff ff ff    	jg     c000b118 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b1a1:	e9 d3 01 00 00       	jmp    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1a6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1ab:	75 0e                	jne    c000b1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1ad:	85 d2                	test   edx,edx
c000b1af:	75 0a                	jne    c000b1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1b4:	83 e8 18             	sub    eax,0x18
c000b1b7:	a8 f7                	test   al,0xf7
c000b1b9:	74 0d                	je     c000b1c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	68 1b 1a 02 c0       	push   0xc0021a1b
c000b1c3:	e9 95 01 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b1c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1d0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1d8:	31 c9                	xor    ecx,ecx
c000b1da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b1de:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b1e2:	0f 8e 91 01 00 00    	jle    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1e8:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b1ec:	0f 8d 87 01 00 00    	jge    c000b379 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1f2:	8d 46 01             	lea    eax,[esi+0x1]
c000b1f5:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b1f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1fd:	83 fd 7f             	cmp    ebp,0x7f
c000b200:	89 e8                	mov    eax,ebp
c000b202:	0f 8e 9d 00 00 00    	jle    c000b2a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b208:	83 e0 7f             	and    eax,0x7f
c000b20b:	31 d2                	xor    edx,edx
c000b20d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b211:	40                   	inc    eax
c000b212:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b216:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21a:	75 0a                	jne    c000b226 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b21c:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b221:	89 ea                	mov    edx,ebp
c000b223:	c1 e2 18             	shl    edx,0x18
c000b226:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b22b:	c1 e0 10             	shl    eax,0x10
c000b22e:	89 c7                	mov    edi,eax
c000b230:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b235:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b239:	c1 e0 08             	shl    eax,0x8
c000b23c:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b240:	09 f8                	or     eax,edi
c000b242:	31 f6                	xor    esi,esi
c000b244:	09 c5                	or     ebp,eax
c000b246:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b24b:	09 d5                	or     ebp,edx
c000b24d:	85 ff                	test   edi,edi
c000b24f:	75 1d                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b251:	89 c8                	mov    eax,ecx
c000b253:	99                   	cdq    
c000b254:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b258:	85 d2                	test   edx,edx
c000b25a:	75 12                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b25c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b260:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b264:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b268:	49                   	dec    ecx
c000b269:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b26e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b272:	8d 51 01             	lea    edx,[ecx+0x1]
c000b275:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b278:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b27c:	8d 46 01             	lea    eax,[esi+0x1]
c000b27f:	7e 06                	jle    c000b287 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b281:	89 c6                	mov    esi,eax
c000b283:	89 d1                	mov    ecx,edx
c000b285:	eb c6                	jmp    c000b24d <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b287:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b28b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b28f:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b293:	c1 f8 03             	sar    eax,0x3
c000b296:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b29a:	89 d1                	mov    ecx,edx
c000b29c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b2a0:	e9 35 ff ff ff       	jmp    c000b1da <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b2a5:	8d 45 01             	lea    eax,[ebp+0x1]
c000b2a8:	31 f6                	xor    esi,esi
c000b2aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ae:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b2b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2b7:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2bc:	75 1d                	jne    c000b2db <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2be:	89 c8                	mov    eax,ecx
c000b2c0:	99                   	cdq    
c000b2c1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2c5:	85 d2                	test   edx,edx
c000b2c7:	75 12                	jne    c000b2db <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2cd:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b2d1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b2d5:	49                   	dec    ecx
c000b2d6:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b2db:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2e3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2e7:	75 10                	jne    c000b2f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2ed:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b2f2:	c1 e7 18             	shl    edi,0x18
c000b2f5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b2f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2fd:	8d 51 01             	lea    edx,[ecx+0x1]
c000b300:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b305:	c1 e0 10             	shl    eax,0x10
c000b308:	89 c7                	mov    edi,eax
c000b30a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b30e:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b313:	c1 e0 08             	shl    eax,0x8
c000b316:	09 f8                	or     eax,edi
c000b318:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b31c:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b320:	09 f8                	or     eax,edi
c000b322:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b326:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b32a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b32d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b331:	c1 f8 03             	sar    eax,0x3
c000b334:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b338:	8d 46 01             	lea    eax,[esi+0x1]
c000b33b:	39 f5                	cmp    ebp,esi
c000b33d:	7e 09                	jle    c000b348 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b33f:	89 c6                	mov    esi,eax
c000b341:	89 d1                	mov    ecx,edx
c000b343:	e9 6f ff ff ff       	jmp    c000b2b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b348:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b34c:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b350:	e9 45 ff ff ff       	jmp    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b355:	52                   	push   edx
c000b356:	52                   	push   edx
c000b357:	51                   	push   ecx
c000b358:	68 2a 1a 02 c0       	push   0xc0021a2a
c000b35d:	e8 02 bc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b362:	58                   	pop    eax
c000b363:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b367:	e8 1f 36 00 00       	call   c000e98b <free>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b377:	eb 14                	jmp    c000b38d <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b379:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b37d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b381:	89 18                	mov    DWORD PTR [eax],ebx
c000b383:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b38b:	89 18                	mov    DWORD PTR [eax],ebx
c000b38d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b391:	83 c4 3c             	add    esp,0x3c
c000b394:	5b                   	pop    ebx
c000b395:	5e                   	pop    esi
c000b396:	5f                   	pop    edi
c000b397:	5d                   	pop    ebp
c000b398:	c3                   	ret    
c000b399:	90                   	nop

c000b39a <Video::putTGA(int, int, unsigned char*, int)>:
c000b39a:	55                   	push   ebp
c000b39b:	57                   	push   edi
c000b39c:	56                   	push   esi
c000b39d:	53                   	push   ebx
c000b39e:	83 ec 28             	sub    esp,0x28
c000b3a1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b3a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3a9:	50                   	push   eax
c000b3aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3ae:	50                   	push   eax
c000b3af:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3b3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3b7:	57                   	push   edi
c000b3b8:	e8 33 fc ff ff       	call   c000aff0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3bd:	83 c4 20             	add    esp,0x20
c000b3c0:	85 c0                	test   eax,eax
c000b3c2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3c6:	74 3a                	je     c000b402 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3c8:	89 c6                	mov    esi,eax
c000b3ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3ce:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3d2:	39 d8                	cmp    eax,ebx
c000b3d4:	7e 2c                	jle    c000b402 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b3da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3e2:	39 e8                	cmp    eax,ebp
c000b3e4:	7e 19                	jle    c000b3ff <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b3e6:	83 c6 04             	add    esi,0x4
c000b3e9:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	79 0c                	jns    c000b3fc <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b3f0:	8b 17                	mov    edx,DWORD PTR [edi]
c000b3f2:	50                   	push   eax
c000b3f3:	53                   	push   ebx
c000b3f4:	55                   	push   ebp
c000b3f5:	57                   	push   edi
c000b3f6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	45                   	inc    ebp
c000b3fd:	eb db                	jmp    c000b3da <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b3ff:	43                   	inc    ebx
c000b400:	eb c8                	jmp    c000b3ca <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b402:	83 c4 1c             	add    esp,0x1c
c000b405:	5b                   	pop    ebx
c000b406:	5e                   	pop    esi
c000b407:	5f                   	pop    edi
c000b408:	5d                   	pop    ebp
c000b409:	c3                   	ret    
c000b40a:	66 90                	xchg   ax,ax

c000b40c <ACPI::close(int, int, void*)>:
c000b40c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b411:	c3                   	ret    
c000b412:	66 90                	xchg   ax,ax

c000b414 <loadACPITables(unsigned char*)>:
c000b414:	57                   	push   edi
c000b415:	56                   	push   esi
c000b416:	53                   	push   ebx
c000b417:	83 ec 60             	sub    esp,0x60
c000b41a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b41f:	0f 84 43 02 00 00    	je     c000b668 <loadACPITables(unsigned char*)+0x254>
c000b425:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b42a:	0f b6 c0             	movzx  eax,al
c000b42d:	85 c0                	test   eax,eax
c000b42f:	74 7b                	je     c000b4ac <loadACPITables(unsigned char*)+0x98>
c000b431:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b435:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b439:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b43d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b440:	83 e8 24             	sub    eax,0x24
c000b443:	c1 e8 03             	shr    eax,0x3
c000b446:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b44a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b452:	66 90                	xchg   ax,ax
c000b454:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b458:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b45c:	0f 8d ba 00 00 00    	jge    c000b51c <loadACPITables(unsigned char*)+0x108>
c000b462:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b466:	83 c0 24             	add    eax,0x24
c000b469:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b46d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b471:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b475:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b479:	c1 e0 03             	shl    eax,0x3
c000b47c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b480:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b484:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b487:	8b 00                	mov    eax,DWORD PTR [eax]
c000b489:	89 c1                	mov    ecx,eax
c000b48b:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b490:	8d 50 01             	lea    edx,[eax+0x1]
c000b493:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b499:	89 ca                	mov    edx,ecx
c000b49b:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4a2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4a7:	eb ab                	jmp    c000b454 <loadACPITables(unsigned char*)+0x40>
c000b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4b0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4bb:	83 e8 24             	sub    eax,0x24
c000b4be:	c1 e8 02             	shr    eax,0x2
c000b4c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4c5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4d4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4d8:	7d 42                	jge    c000b51c <loadACPITables(unsigned char*)+0x108>
c000b4da:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4de:	83 c0 24             	add    eax,0x24
c000b4e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f1:	c1 e0 02             	shl    eax,0x2
c000b4f4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b4f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b4fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4fe:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b503:	8d 50 01             	lea    edx,[eax+0x1]
c000b506:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b50c:	89 ca                	mov    edx,ecx
c000b50e:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b515:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b51a:	eb b4                	jmp    c000b4d0 <loadACPITables(unsigned char*)+0xbc>
c000b51c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b524:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b529:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b52d:	0f 8d 39 01 00 00    	jge    c000b66c <loadACPITables(unsigned char*)+0x258>
c000b533:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b537:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b53e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b542:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b54e:	25 ff 0f 00 00       	and    eax,0xfff
c000b553:	89 c6                	mov    esi,eax
c000b555:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b55b:	83 ec 0c             	sub    esp,0xc
c000b55e:	6a 01                	push   0x1
c000b560:	e8 ca 6a 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b56c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	6a 01                	push   0x1
c000b577:	6a 01                	push   0x1
c000b579:	50                   	push   eax
c000b57a:	52                   	push   edx
c000b57b:	53                   	push   ebx
c000b57c:	e8 7b 73 00 00       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b581:	83 c4 20             	add    esp,0x20
c000b584:	09 f0                	or     eax,esi
c000b586:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b58a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b58e:	c1 e0 03             	shl    eax,0x3
c000b591:	05 20 98 02 c0       	add    eax,0xc0029820
c000b596:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5a2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5ba:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5be:	89 c6                	mov    esi,eax
c000b5c0:	89 d7                	mov    edi,edx
c000b5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5c4:	89 c8                	mov    eax,ecx
c000b5c6:	89 fa                	mov    edx,edi
c000b5c8:	89 f3                	mov    ebx,esi
c000b5ca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5ce:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5e5:	05 00 10 00 00       	add    eax,0x1000
c000b5ea:	c1 e8 0c             	shr    eax,0xc
c000b5ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5fd:	25 ff 0f 00 00       	and    eax,0xfff
c000b602:	89 c6                	mov    esi,eax
c000b604:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b611:	e8 19 6a 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b61d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b623:	83 ec 0c             	sub    esp,0xc
c000b626:	6a 01                	push   0x1
c000b628:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b62c:	50                   	push   eax
c000b62d:	52                   	push   edx
c000b62e:	53                   	push   ebx
c000b62f:	e8 c8 72 00 00       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b634:	83 c4 20             	add    esp,0x20
c000b637:	09 f0                	or     eax,esi
c000b639:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b641:	83 ec 0c             	sub    esp,0xc
c000b644:	50                   	push   eax
c000b645:	e8 ed 6c 00 00       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b651:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b655:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b65c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b661:	e9 be fe ff ff       	jmp    c000b524 <loadACPITables(unsigned char*)+0x110>
c000b666:	66 90                	xchg   ax,ax
c000b668:	90                   	nop
c000b669:	8d 76 00             	lea    esi,[esi+0x0]
c000b66c:	83 c4 60             	add    esp,0x60
c000b66f:	5b                   	pop    ebx
c000b670:	5e                   	pop    esi
c000b671:	5f                   	pop    edi
c000b672:	c3                   	ret    
c000b673:	90                   	nop

c000b674 <findRSDT(unsigned char*)>:
c000b674:	57                   	push   edi
c000b675:	56                   	push   esi
c000b676:	53                   	push   ebx
c000b677:	83 ec 50             	sub    esp,0x50
c000b67a:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b67f:	85 c0                	test   eax,eax
c000b681:	75 0d                	jne    c000b690 <findRSDT(unsigned char*)+0x1c>
c000b683:	b8 00 00 00 00       	mov    eax,0x0
c000b688:	e9 2b 01 00 00       	jmp    c000b7b8 <findRSDT(unsigned char*)+0x144>
c000b68d:	8d 76 00             	lea    esi,[esi+0x0]
c000b690:	89 e0                	mov    eax,esp
c000b692:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b696:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b69a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b69e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6ba:	89 c6                	mov    esi,eax
c000b6bc:	89 d7                	mov    edi,edx
c000b6be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6c0:	89 c8                	mov    eax,ecx
c000b6c2:	89 fa                	mov    edx,edi
c000b6c4:	89 f3                	mov    ebx,esi
c000b6c6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6ce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6d6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6da:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6ea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6fa:	25 ff 0f 00 00       	and    eax,0xfff
c000b6ff:	89 c6                	mov    esi,eax
c000b701:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b707:	83 ec 0c             	sub    esp,0xc
c000b70a:	6a 02                	push   0x2
c000b70c:	e8 1e 69 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b718:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b71e:	83 ec 0c             	sub    esp,0xc
c000b721:	6a 01                	push   0x1
c000b723:	6a 02                	push   0x2
c000b725:	50                   	push   eax
c000b726:	52                   	push   edx
c000b727:	53                   	push   ebx
c000b728:	e8 cf 71 00 00       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b72d:	83 c4 20             	add    esp,0x20
c000b730:	09 f0                	or     eax,esi
c000b732:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b736:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b73a:	25 ff 0f 00 00       	and    eax,0xfff
c000b73f:	89 c6                	mov    esi,eax
c000b741:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 02                	push   0x2
c000b74c:	e8 de 68 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b758:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b75e:	83 ec 0c             	sub    esp,0xc
c000b761:	6a 01                	push   0x1
c000b763:	6a 02                	push   0x2
c000b765:	50                   	push   eax
c000b766:	52                   	push   edx
c000b767:	53                   	push   ebx
c000b768:	e8 8f 71 00 00       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b76d:	83 c4 20             	add    esp,0x20
c000b770:	09 f0                	or     eax,esi
c000b772:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b776:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b77b:	85 c0                	test   eax,eax
c000b77d:	75 11                	jne    c000b790 <findRSDT(unsigned char*)+0x11c>
c000b77f:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b786:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b78a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b78e:	eb 24                	jmp    c000b7b4 <findRSDT(unsigned char*)+0x140>
c000b790:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b795:	83 f8 02             	cmp    eax,0x2
c000b798:	75 12                	jne    c000b7ac <findRSDT(unsigned char*)+0x138>
c000b79a:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7a5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7a9:	eb 09                	jmp    c000b7b4 <findRSDT(unsigned char*)+0x140>
c000b7ab:	90                   	nop
c000b7ac:	b8 00 00 00 00       	mov    eax,0x0
c000b7b1:	eb 05                	jmp    c000b7b8 <findRSDT(unsigned char*)+0x144>
c000b7b3:	90                   	nop
c000b7b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7b8:	83 c4 50             	add    esp,0x50
c000b7bb:	5b                   	pop    ebx
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <findDataTable(unsigned char*, char*)>:
c000b7c0:	83 ec 1c             	sub    esp,0x1c
c000b7c3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7c8:	75 0a                	jne    c000b7d4 <findDataTable(unsigned char*, char*)+0x14>
c000b7ca:	b8 00 00 00 00       	mov    eax,0x0
c000b7cf:	eb 5f                	jmp    c000b830 <findDataTable(unsigned char*, char*)+0x70>
c000b7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7dc:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7e1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7e5:	7d 41                	jge    c000b828 <findDataTable(unsigned char*, char*)+0x68>
c000b7e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7eb:	c1 e0 03             	shl    eax,0x3
c000b7ee:	05 20 98 02 c0       	add    eax,0xc0029820
c000b7f3:	83 ec 04             	sub    esp,0x4
c000b7f6:	6a 04                	push   0x4
c000b7f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b7fc:	50                   	push   eax
c000b7fd:	e8 7e 4b ff ff       	call   c0000380 <memcmp>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	85 c0                	test   eax,eax
c000b807:	0f 94 c0             	sete   al
c000b80a:	0f b6 c0             	movzx  eax,al
c000b80d:	85 c0                	test   eax,eax
c000b80f:	74 0f                	je     c000b820 <findDataTable(unsigned char*, char*)+0x60>
c000b811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b815:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b81c:	eb 12                	jmp    c000b830 <findDataTable(unsigned char*, char*)+0x70>
c000b81e:	66 90                	xchg   ax,ax
c000b820:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b825:	eb b5                	jmp    c000b7dc <findDataTable(unsigned char*, char*)+0x1c>
c000b827:	90                   	nop
c000b828:	b8 00 00 00 00       	mov    eax,0x0
c000b82d:	8d 76 00             	lea    esi,[esi+0x0]
c000b830:	83 c4 1c             	add    esp,0x1c
c000b833:	c3                   	ret    

c000b834 <scanMADT()>:
c000b834:	53                   	push   ebx
c000b835:	83 ec 38             	sub    esp,0x38
c000b838:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b842:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b84c:	e8 a4 c4 00 00       	call   c0017cf5 <HalFindRSDP()>
c000b851:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b856:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b85b:	85 c0                	test   eax,eax
c000b85d:	0f 84 11 04 00 00    	je     c000bc74 <scanMADT()+0x440>
c000b863:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b868:	83 ec 0c             	sub    esp,0xc
c000b86b:	50                   	push   eax
c000b86c:	e8 03 fe ff ff       	call   c000b674 <findRSDT(unsigned char*)>
c000b871:	83 c4 10             	add    esp,0x10
c000b874:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b879:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b87e:	85 c0                	test   eax,eax
c000b880:	0f 84 f2 03 00 00    	je     c000bc78 <scanMADT()+0x444>
c000b886:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	50                   	push   eax
c000b88f:	e8 80 fb ff ff       	call   c000b414 <loadACPITables(unsigned char*)>
c000b894:	83 c4 10             	add    esp,0x10
c000b897:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 8c 1a 02 c0       	push   0xc0021a8c
c000b8a4:	50                   	push   eax
c000b8a5:	e8 16 ff ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8b1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8b6:	0f 84 c0 03 00 00    	je     c000bc7c <scanMADT()+0x448>
c000b8bc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8cb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8cf:	0f 87 af 03 00 00    	ja     c000bc84 <scanMADT()+0x450>
c000b8d5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8dd:	0f 87 a1 03 00 00    	ja     c000bc84 <scanMADT()+0x450>
c000b8e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ef:	8d 50 01             	lea    edx,[eax+0x1]
c000b8f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8fa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8fe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b906:	8d 50 01             	lea    edx,[eax+0x1]
c000b909:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b911:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b915:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b919:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b91e:	83 f8 02             	cmp    eax,0x2
c000b921:	0f 86 59 03 00 00    	jbe    c000bc80 <scanMADT()+0x44c>
c000b927:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b92c:	85 c0                	test   eax,eax
c000b92e:	75 58                	jne    c000b988 <scanMADT()+0x154>
c000b930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b934:	8d 50 01             	lea    edx,[eax+0x1]
c000b937:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b93b:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b941:	0f b6 d2             	movzx  edx,dl
c000b944:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b948:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b94c:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b956:	8d 50 01             	lea    edx,[eax+0x1]
c000b959:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b95d:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b963:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b966:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b96c:	0f b6 d2             	movzx  edx,dl
c000b96f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b973:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b977:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b97d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b982:	e9 d9 02 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000b987:	90                   	nop
c000b988:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b98d:	83 f8 01             	cmp    eax,0x1
c000b990:	0f 85 1a 01 00 00    	jne    c000bab0 <scanMADT()+0x27c>
c000b996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b99a:	8d 50 01             	lea    edx,[eax+0x1]
c000b99d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9a1:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9a7:	0f b6 d2             	movzx  edx,dl
c000b9aa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9ae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9b2:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9b8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9c5:	01 d0                	add    eax,edx
c000b9c7:	83 c0 2c             	add    eax,0x2c
c000b9ca:	8a 00                	mov    al,BYTE PTR [eax]
c000b9cc:	0f b6 d0             	movzx  edx,al
c000b9cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d3:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9da:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9de:	0f b6 c0             	movzx  eax,al
c000b9e1:	c1 e0 08             	shl    eax,0x8
c000b9e4:	89 d1                	mov    ecx,edx
c000b9e6:	09 c1                	or     ecx,eax
c000b9e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ec:	8d 50 02             	lea    edx,[eax+0x2]
c000b9ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9f3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9f7:	0f b6 c0             	movzx  eax,al
c000b9fa:	c1 e0 10             	shl    eax,0x10
c000b9fd:	09 c1                	or     ecx,eax
c000b9ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba03:	8d 50 03             	lea    edx,[eax+0x3]
c000ba06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba0e:	0f b6 c0             	movzx  eax,al
c000ba11:	c1 e0 18             	shl    eax,0x18
c000ba14:	09 c1                	or     ecx,eax
c000ba16:	89 ca                	mov    edx,ecx
c000ba18:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba1d:	0f b6 c0             	movzx  eax,al
c000ba20:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba34:	01 d0                	add    eax,edx
c000ba36:	83 c0 2c             	add    eax,0x2c
c000ba39:	8a 00                	mov    al,BYTE PTR [eax]
c000ba3b:	0f b6 d0             	movzx  edx,al
c000ba3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba42:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba49:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	c1 e0 08             	shl    eax,0x8
c000ba53:	89 d1                	mov    ecx,edx
c000ba55:	09 c1                	or     ecx,eax
c000ba57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba5b:	8d 50 02             	lea    edx,[eax+0x2]
c000ba5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba66:	0f b6 c0             	movzx  eax,al
c000ba69:	c1 e0 10             	shl    eax,0x10
c000ba6c:	09 c1                	or     ecx,eax
c000ba6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba72:	8d 50 03             	lea    edx,[eax+0x3]
c000ba75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba7d:	0f b6 c0             	movzx  eax,al
c000ba80:	c1 e0 18             	shl    eax,0x18
c000ba83:	09 c1                	or     ecx,eax
c000ba85:	89 ca                	mov    edx,ecx
c000ba87:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba8c:	0f b6 c0             	movzx  eax,al
c000ba8f:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000ba96:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba9b:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa0:	83 c0 01             	add    eax,0x1
c000baa3:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000baa8:	e9 b3 01 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000baad:	8d 76 00             	lea    esi,[esi+0x0]
c000bab0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bab5:	83 f8 02             	cmp    eax,0x2
c000bab8:	0f 85 ea 00 00 00    	jne    c000bba8 <scanMADT()+0x374>
c000babe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac2:	8d 50 01             	lea    edx,[eax+0x1]
c000bac5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bac9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bacd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad1:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bad5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad9:	8d 50 01             	lea    edx,[eax+0x1]
c000badc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bae8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000baec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf4:	01 d0                	add    eax,edx
c000baf6:	83 c0 2c             	add    eax,0x2c
c000baf9:	8a 00                	mov    al,BYTE PTR [eax]
c000bafb:	0f b6 d0             	movzx  edx,al
c000bafe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb02:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb0d:	0f b6 c0             	movzx  eax,al
c000bb10:	c1 e0 08             	shl    eax,0x8
c000bb13:	89 d1                	mov    ecx,edx
c000bb15:	09 c1                	or     ecx,eax
c000bb17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb1b:	8d 50 02             	lea    edx,[eax+0x2]
c000bb1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb22:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb26:	0f b6 c0             	movzx  eax,al
c000bb29:	c1 e0 10             	shl    eax,0x10
c000bb2c:	09 c1                	or     ecx,eax
c000bb2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb32:	8d 50 03             	lea    edx,[eax+0x3]
c000bb35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb39:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb3d:	0f b6 c0             	movzx  eax,al
c000bb40:	c1 e0 18             	shl    eax,0x18
c000bb43:	09 c8                	or     eax,ecx
c000bb45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb49:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb56:	01 d0                	add    eax,edx
c000bb58:	83 c0 2c             	add    eax,0x2c
c000bb5b:	8a 00                	mov    al,BYTE PTR [eax]
c000bb5d:	0f b6 c0             	movzx  eax,al
c000bb60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bb64:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb6b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bb6f:	0f b6 d2             	movzx  edx,dl
c000bb72:	c1 e2 08             	shl    edx,0x8
c000bb75:	09 d0                	or     eax,edx
c000bb77:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb7c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb81:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb8a:	88 90 28 3b 02 c0    	mov    BYTE PTR [eax-0x3ffdc4d8],dl
c000bb90:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bb95:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bb9a:	66 89 84 12 c0 9a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6540],ax
c000bba2:	e9 b9 00 00 00       	jmp    c000bc60 <scanMADT()+0x42c>
c000bba7:	90                   	nop
c000bba8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbad:	83 f8 04             	cmp    eax,0x4
c000bbb0:	0f 85 9a 00 00 00    	jne    c000bc50 <scanMADT()+0x41c>
c000bbb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbba:	8d 50 01             	lea    edx,[eax+0x1]
c000bbbd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbc5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbc9:	0f b6 c0             	movzx  eax,al
c000bbcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd8:	01 d0                	add    eax,edx
c000bbda:	83 c0 2c             	add    eax,0x2c
c000bbdd:	8a 00                	mov    al,BYTE PTR [eax]
c000bbdf:	0f b6 d0             	movzx  edx,al
c000bbe2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbe9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbf1:	0f b6 c0             	movzx  eax,al
c000bbf4:	c1 e0 08             	shl    eax,0x8
c000bbf7:	09 d0                	or     eax,edx
c000bbf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbfd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc06:	8d 50 01             	lea    edx,[eax+0x1]
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc11:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc15:	0f b6 c0             	movzx  eax,al
c000bc18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc20:	c1 e0 08             	shl    eax,0x8
c000bc23:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc27:	89 c1                	mov    ecx,eax
c000bc29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc2d:	c1 e0 18             	shl    eax,0x18
c000bc30:	89 c3                	mov    ebx,eax
c000bc32:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc37:	8d 50 01             	lea    edx,[eax+0x1]
c000bc3a:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc40:	09 d9                	or     ecx,ebx
c000bc42:	89 ca                	mov    edx,ecx
c000bc44:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc4b:	eb 13                	jmp    c000bc60 <scanMADT()+0x42c>
c000bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc55:	83 f8 05             	cmp    eax,0x5
c000bc58:	75 06                	jne    c000bc60 <scanMADT()+0x42c>
c000bc5a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc5f:	90                   	nop
c000bc60:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc69:	01 d0                	add    eax,edx
c000bc6b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc6f:	e9 50 fc ff ff       	jmp    c000b8c4 <scanMADT()+0x90>
c000bc74:	90                   	nop
c000bc75:	eb 0d                	jmp    c000bc84 <scanMADT()+0x450>
c000bc77:	90                   	nop
c000bc78:	90                   	nop
c000bc79:	eb 09                	jmp    c000bc84 <scanMADT()+0x450>
c000bc7b:	90                   	nop
c000bc7c:	90                   	nop
c000bc7d:	eb 05                	jmp    c000bc84 <scanMADT()+0x450>
c000bc7f:	90                   	nop
c000bc80:	90                   	nop
c000bc81:	8d 76 00             	lea    esi,[esi+0x0]
c000bc84:	83 c4 38             	add    esp,0x38
c000bc87:	5b                   	pop    ebx
c000bc88:	c3                   	ret    
c000bc89:	90                   	nop
c000bc8a:	66 90                	xchg   ax,ax

c000bc8c <ACPI::ACPI()>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	83 ec 08             	sub    esp,0x8
c000bc96:	68 91 1a 02 c0       	push   0xc0021a91
c000bc9b:	50                   	push   eax
c000bc9c:	e8 03 d5 ff ff       	call   c00091a4 <Device::Device(char const*)>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	ba 8c 1c 02 c0       	mov    edx,0xc0021c8c
c000bca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcad:	89 10                	mov    DWORD PTR [eax],edx
c000bcaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bccc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcd6:	e8 59 fb ff ff       	call   c000b834 <scanMADT()>
c000bcdb:	90                   	nop
c000bcdc:	83 c4 0c             	add    esp,0xc
c000bcdf:	c3                   	ret    

c000bce0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bce0:	83 ec 2c             	sub    esp,0x2c
c000bce3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bce7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bceb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bcf3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bcf8:	88 d0                	mov    al,dl
c000bcfa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bcfe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd0b:	90                   	nop
c000bd0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd10:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd16:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd1a:	0f 8d b0 00 00 00    	jge    c000bdd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd28:	83 c2 2a             	add    edx,0x2a
c000bd2b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd34:	0f b7 c0             	movzx  eax,ax
c000bd37:	39 c2                	cmp    edx,eax
c000bd39:	0f 85 85 00 00 00    	jne    c000bdc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd47:	83 c2 2a             	add    edx,0x2a
c000bd4a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd4e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd53:	0f b6 c0             	movzx  eax,al
c000bd56:	39 c2                	cmp    edx,eax
c000bd58:	75 6a                	jne    c000bdc4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd5a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd5f:	85 c0                	test   eax,eax
c000bd61:	74 3d                	je     c000bda0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd6b:	83 c2 2a             	add    edx,0x2a
c000bd6e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd79:	39 c2                	cmp    edx,eax
c000bd7b:	74 13                	je     c000bd90 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd7d:	83 ec 0c             	sub    esp,0xc
c000bd80:	68 0c 1c 02 c0       	push   0xc0021c0c
c000bd85:	e8 38 2f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bd8a:	83 c4 10             	add    esp,0x10
c000bd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	68 96 1a 02 c0       	push   0xc0021a96
c000bd98:	e8 25 2f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bd9d:	83 c4 10             	add    esp,0x10
c000bda0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bda4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bda8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdac:	83 c2 2a             	add    edx,0x2a
c000bdaf:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdb5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdb8:	89 01                	mov    DWORD PTR [ecx],eax
c000bdba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdbd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdc2:	66 90                	xchg   ax,ax
c000bdc4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bdc9:	e9 3e ff ff ff       	jmp    c000bd0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdce:	66 90                	xchg   ax,ax
c000bdd0:	90                   	nop
c000bdd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bdd5:	83 c4 2c             	add    esp,0x2c
c000bdd8:	c2 04 00             	ret    0x4
c000bddb:	90                   	nop

c000bddc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bddc:	83 ec 1c             	sub    esp,0x1c
c000bddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bde3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bde7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdf0:	88 c8                	mov    al,cl
c000bdf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdf6:	88 d0                	mov    al,dl
c000bdf8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000be11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000be15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000be26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000be2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be3d:	83 c0 01             	add    eax,0x1
c000be40:	88 c1                	mov    cl,al
c000be42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be46:	83 c2 2a             	add    edx,0x2a
c000be49:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be51:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be5e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be62:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be70:	8d 50 01             	lea    edx,[eax+0x1]
c000be73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be77:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be81:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be87:	3d 00 02 00 00       	cmp    eax,0x200
c000be8c:	75 12                	jne    c000bea0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be8e:	83 ec 0c             	sub    esp,0xc
c000be91:	68 a5 1a 02 c0       	push   0xc0021aa5
c000be96:	e8 27 2e 00 00       	call   c000ecc2 <KePanic(char const*)>
c000be9b:	83 c4 10             	add    esp,0x10
c000be9e:	66 90                	xchg   ax,ax
c000bea0:	90                   	nop
c000bea1:	83 c4 1c             	add    esp,0x1c
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop
c000bea6:	66 90                	xchg   ax,ax

c000bea8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bea8:	b8 00 00 00 00       	mov    eax,0x0
c000bead:	c3                   	ret    
c000beae:	66 90                	xchg   ax,ax

c000beb0 <ACPI::detectPCI()>:
c000beb0:	53                   	push   ebx
c000beb1:	83 ec 28             	sub    esp,0x28
c000beb4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000beb9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bebe:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bec3:	83 ec 08             	sub    esp,0x8
c000bec6:	68 c2 1a 02 c0       	push   0xc0021ac2
c000becb:	50                   	push   eax
c000becc:	e8 ef f8 ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000bed1:	83 c4 10             	add    esp,0x10
c000bed4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bed8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bedd:	74 0d                	je     c000beec <ACPI::detectPCI()+0x3c>
c000bedf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bee4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bee9:	8d 76 00             	lea    esi,[esi+0x0]
c000beec:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bef8:	8a 00                	mov    al,BYTE PTR [eax]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 f8 01             	cmp    eax,0x1
c000bf00:	75 0e                	jne    c000bf10 <ACPI::detectPCI()+0x60>
c000bf02:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf07:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf0c:	eb 2e                	jmp    c000bf3c <ACPI::detectPCI()+0x8c>
c000bf0e:	66 90                	xchg   ax,ax
c000bf10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf14:	8a 00                	mov    al,BYTE PTR [eax]
c000bf16:	0f b6 c0             	movzx  eax,al
c000bf19:	83 f8 02             	cmp    eax,0x2
c000bf1c:	75 1e                	jne    c000bf3c <ACPI::detectPCI()+0x8c>
c000bf1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf23:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf28:	85 c0                	test   eax,eax
c000bf2a:	74 10                	je     c000bf3c <ACPI::detectPCI()+0x8c>
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	68 3c 1c 02 c0       	push   0xc0021c3c
c000bf34:	e8 89 2d 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf40:	83 f0 01             	xor    eax,0x1
c000bf43:	0f b6 c0             	movzx  eax,al
c000bf46:	85 c0                	test   eax,eax
c000bf48:	74 46                	je     c000bf90 <ACPI::detectPCI()+0xe0>
c000bf4a:	e8 e1 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf58:	75 0e                	jne    c000bf68 <ACPI::detectPCI()+0xb8>
c000bf5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf5f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf64:	eb 2a                	jmp    c000bf90 <ACPI::detectPCI()+0xe0>
c000bf66:	66 90                	xchg   ax,ax
c000bf68:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf6d:	75 21                	jne    c000bf90 <ACPI::detectPCI()+0xe0>
c000bf6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf74:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf79:	85 c0                	test   eax,eax
c000bf7b:	74 13                	je     c000bf90 <ACPI::detectPCI()+0xe0>
c000bf7d:	83 ec 0c             	sub    esp,0xc
c000bf80:	68 3c 1c 02 c0       	push   0xc0021c3c
c000bf85:	e8 38 2d 00 00       	call   c000ecc2 <KePanic(char const*)>
c000bf8a:	83 c4 10             	add    esp,0x10
c000bf8d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf90:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf95:	85 c0                	test   eax,eax
c000bf97:	0f 84 87 00 00 00    	je     c000c024 <ACPI::detectPCI()+0x174>
c000bf9d:	83 ec 0c             	sub    esp,0xc
c000bfa0:	68 c7 1a 02 c0       	push   0xc0021ac7
c000bfa5:	e8 96 06 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfbc:	e8 ba 29 00 00       	call   c000e97b <malloc>
c000bfc1:	83 c4 10             	add    esp,0x10
c000bfc4:	89 c3                	mov    ebx,eax
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	53                   	push   ebx
c000bfca:	e8 b5 f9 00 00       	call   c001b984 <PCI::PCI()>
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfda:	83 ec 08             	sub    esp,0x8
c000bfdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe1:	50                   	push   eax
c000bfe2:	e8 5b d0 ff ff       	call   c0009042 <Device::addChild(Device*)>
c000bfe7:	83 c4 10             	add    esp,0x10
c000bfea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfee:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff0:	83 c0 08             	add    eax,0x8
c000bff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000bffa:	85 d2                	test   edx,edx
c000bffc:	74 0a                	je     c000c008 <ACPI::detectPCI()+0x158>
c000bffe:	ba 01 00 00 00       	mov    edx,0x1
c000c003:	eb 0b                	jmp    c000c010 <ACPI::detectPCI()+0x160>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	ba 02 00 00 00       	mov    edx,0x2
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	6a 00                	push   0x0
c000c012:	6a 00                	push   0x0
c000c014:	52                   	push   edx
c000c015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c019:	ff d0                	call   eax
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	e9 91 00 00 00       	jmp    c000c0b4 <ACPI::detectPCI()+0x204>
c000c023:	90                   	nop
c000c024:	83 ec 0c             	sub    esp,0xc
c000c027:	68 df 1a 02 c0       	push   0xc0021adf
c000c02c:	e8 0f 06 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c031:	83 c4 10             	add    esp,0x10
c000c034:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c03b:	83 ec 0c             	sub    esp,0xc
c000c03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c042:	e8 34 29 00 00       	call   c000e97b <malloc>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 c3                	mov    ebx,eax
c000c04c:	83 ec 0c             	sub    esp,0xc
c000c04f:	53                   	push   ebx
c000c050:	e8 35 05 01 00       	call   c001c58a <IDE::IDE()>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c05c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c060:	83 ec 08             	sub    esp,0x8
c000c063:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c067:	50                   	push   eax
c000c068:	e8 d5 cf ff ff       	call   c0009042 <Device::addChild(Device*)>
c000c06d:	83 c4 10             	add    esp,0x10
c000c070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c074:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c082:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c08b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c08f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c098:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c09c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c09e:	83 c0 08             	add    eax,0x8
c000c0a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0a3:	6a 00                	push   0x0
c000c0a5:	6a 00                	push   0x0
c000c0a7:	6a 00                	push   0x0
c000c0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ad:	ff d0                	call   eax
c000c0af:	83 c4 10             	add    esp,0x10
c000c0b2:	66 90                	xchg   ax,ax
c000c0b4:	90                   	nop
c000c0b5:	83 c4 28             	add    esp,0x28
c000c0b8:	5b                   	pop    ebx
c000c0b9:	c3                   	ret    
c000c0ba:	66 90                	xchg   ax,ax

c000c0bc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0bc:	83 ec 0c             	sub    esp,0xc
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	68 f4 1a 02 c0       	push   0xc0021af4
c000c0c7:	e8 f6 2b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c0cc:	83 c4 10             	add    esp,0x10
c000c0cf:	90                   	nop
c000c0d0:	83 c4 0c             	add    esp,0xc
c000c0d3:	c3                   	ret    

c000c0d4 <ACPI::open(int, int, void*)>:
c000c0d4:	57                   	push   edi
c000c0d5:	56                   	push   esi
c000c0d6:	53                   	push   ebx
c000c0d7:	81 ec 70 01 00 00    	sub    esp,0x170
c000c0dd:	83 ec 0c             	sub    esp,0xc
c000c0e0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c0e7:	e8 c4 fd ff ff       	call   c000beb0 <ACPI::detectPCI()>
c000c0ec:	83 c4 10             	add    esp,0x10
c000c0ef:	83 ec 0c             	sub    esp,0xc
c000c0f2:	68 64 1c 02 c0       	push   0xc0021c64
c000c0f7:	e8 44 05 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	b8 4c 05 00 00       	mov    eax,0x54c
c000c104:	8a 00                	mov    al,BYTE PTR [eax]
c000c106:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c10d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c115:	83 f8 01             	cmp    eax,0x1
c000c118:	75 12                	jne    c000c12c <ACPI::open(int, int, void*)+0x58>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	68 05 1b 02 c0       	push   0xc0021b05
c000c122:	e8 1b 7e 00 00       	call   c0013f42 <Thr::loadKernelSymbolTable(char const*)>
c000c127:	83 c4 10             	add    esp,0x10
c000c12a:	eb 34                	jmp    c000c160 <ACPI::open(int, int, void*)+0x8c>
c000c12c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c134:	3d bb 00 00 00       	cmp    eax,0xbb
c000c139:	75 15                	jne    c000c150 <ACPI::open(int, int, void*)+0x7c>
c000c13b:	83 ec 0c             	sub    esp,0xc
c000c13e:	68 23 1b 02 c0       	push   0xc0021b23
c000c143:	e8 fa 7d 00 00       	call   c0013f42 <Thr::loadKernelSymbolTable(char const*)>
c000c148:	83 c4 10             	add    esp,0x10
c000c14b:	eb 13                	jmp    c000c160 <ACPI::open(int, int, void*)+0x8c>
c000c14d:	8d 76 00             	lea    esi,[esi+0x0]
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	68 41 1b 02 c0       	push   0xc0021b41
c000c158:	e8 65 2b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c15d:	83 c4 10             	add    esp,0x10
c000c160:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c168:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c17d:	e8 f9 27 00 00       	call   c000e97b <malloc>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	89 c3                	mov    ebx,eax
c000c187:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c18c:	83 ec 04             	sub    esp,0x4
c000c18f:	50                   	push   eax
c000c190:	68 5b 1b 02 c0       	push   0xc0021b5b
c000c195:	53                   	push   ebx
c000c196:	e8 77 bf ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c19b:	83 c4 10             	add    esp,0x10
c000c19e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c1a5:	83 ec 08             	sub    esp,0x8
c000c1a8:	6a 01                	push   0x1
c000c1aa:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1b1:	e8 7a bf ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c1b6:	83 c4 10             	add    esp,0x10
c000c1b9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c1c0:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c1c8:	75 16                	jne    c000c1e0 <ACPI::open(int, int, void*)+0x10c>
c000c1ca:	83 ec 0c             	sub    esp,0xc
c000c1cd:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1d4:	e8 b5 bf ff ff       	call   c000818e <File::close()>
c000c1d9:	83 c4 10             	add    esp,0x10
c000c1dc:	eb 0a                	jmp    c000c1e8 <ACPI::open(int, int, void*)+0x114>
c000c1de:	66 90                	xchg   ax,ax
c000c1e0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c1e8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c1f0:	74 1e                	je     c000c210 <ACPI::open(int, int, void*)+0x13c>
c000c1f2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c1f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1fb:	83 c0 08             	add    eax,0x8
c000c1fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000c200:	83 ec 0c             	sub    esp,0xc
c000c203:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c20a:	ff d0                	call   eax
c000c20c:	83 c4 10             	add    esp,0x10
c000c20f:	90                   	nop
c000c210:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c217:	83 f0 01             	xor    eax,0x1
c000c21a:	0f b6 c0             	movzx  eax,al
c000c21d:	85 c0                	test   eax,eax
c000c21f:	74 2f                	je     c000c250 <ACPI::open(int, int, void*)+0x17c>
c000c221:	83 ec 0c             	sub    esp,0xc
c000c224:	68 79 1b 02 c0       	push   0xc0021b79
c000c229:	e8 12 04 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c23c:	83 ec 0c             	sub    esp,0xc
c000c23f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c246:	e8 13 60 00 00       	call   c001225e <Virt::setupPageSwapping(int)>
c000c24b:	83 c4 10             	add    esp,0x10
c000c24e:	66 90                	xchg   ax,ax
c000c250:	83 ec 0c             	sub    esp,0xc
c000c253:	68 94 1b 02 c0       	push   0xc0021b94
c000c258:	e8 e3 03 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c267:	83 ec 08             	sub    esp,0x8
c000c26a:	6a 13                	push   0x13
c000c26c:	50                   	push   eax
c000c26d:	e8 fe d0 ff ff       	call   c0009370 <getDevicesOfType(DeviceType)>
c000c272:	83 c4 0c             	add    esp,0xc
c000c275:	8d 76 00             	lea    esi,[esi+0x0]
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c282:	50                   	push   eax
c000c283:	e8 24 3e 01 00       	call   c00200ac <LinkedList<Device>::isEmpty()>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	83 f0 01             	xor    eax,0x1
c000c28e:	0f b6 c0             	movzx  eax,al
c000c291:	85 c0                	test   eax,eax
c000c293:	0f 84 47 01 00 00    	je     c000c3e0 <ACPI::open(int, int, void*)+0x30c>
c000c299:	83 ec 0c             	sub    esp,0xc
c000c29c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2a3:	50                   	push   eax
c000c2a4:	e8 1f 3e 01 00       	call   c00200c8 <LinkedList<Device>::getFirstElement()>
c000c2a9:	83 c4 10             	add    esp,0x10
c000c2ac:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c2b3:	83 ec 0c             	sub    esp,0xc
c000c2b6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2bd:	50                   	push   eax
c000c2be:	e8 0d 3e 01 00       	call   c00200d0 <LinkedList<Device>::removeFirst()>
c000c2c3:	83 c4 10             	add    esp,0x10
c000c2c6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c2cd:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c2d4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c2db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c2df:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c2e5:	ba 09 00 00 00       	mov    edx,0x9
c000c2ea:	fc                   	cld    
c000c2eb:	89 c7                	mov    edi,eax
c000c2ed:	89 de                	mov    esi,ebx
c000c2ef:	89 d1                	mov    ecx,edx
c000c2f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2f3:	83 ec 08             	sub    esp,0x8
c000c2f6:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c2fa:	50                   	push   eax
c000c2fb:	83 ec 24             	sub    esp,0x24
c000c2fe:	89 e0                	mov    eax,esp
c000c300:	89 c3                	mov    ebx,eax
c000c302:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c306:	ba 09 00 00 00       	mov    edx,0x9
c000c30b:	89 df                	mov    edi,ebx
c000c30d:	89 c6                	mov    esi,eax
c000c30f:	89 d1                	mov    ecx,edx
c000c311:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c313:	e8 56 fb 00 00       	call   c001be6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c318:	83 c4 30             	add    esp,0x30
c000c31b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c322:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c32a:	0f 84 48 ff ff ff    	je     c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c330:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c33b:	83 ec 0c             	sub    esp,0xc
c000c33e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c345:	e8 31 26 00 00       	call   c000e97b <malloc>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	89 c3                	mov    ebx,eax
c000c34f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c354:	83 ec 04             	sub    esp,0x4
c000c357:	50                   	push   eax
c000c358:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c35f:	53                   	push   ebx
c000c360:	e8 ad bd ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c365:	83 c4 10             	add    esp,0x10
c000c368:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c36f:	83 ec 0c             	sub    esp,0xc
c000c372:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c379:	e8 76 c0 ff ff       	call   c00083f4 <File::exists()>
c000c37e:	83 c4 10             	add    esp,0x10
c000c381:	0f b6 c0             	movzx  eax,al
c000c384:	85 c0                	test   eax,eax
c000c386:	74 28                	je     c000c3b0 <ACPI::open(int, int, void*)+0x2dc>
c000c388:	83 ec 08             	sub    esp,0x8
c000c38b:	6a 01                	push   0x1
c000c38d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c394:	e8 23 86 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	83 ec 08             	sub    esp,0x8
c000c39f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3a6:	50                   	push   eax
c000c3a7:	e8 62 88 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c3b8:	0f 84 ba fe ff ff    	je     c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c3be:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c3c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3c7:	83 c0 08             	add    eax,0x8
c000c3ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3cc:	83 ec 0c             	sub    esp,0xc
c000c3cf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3d6:	ff d0                	call   eax
c000c3d8:	83 c4 10             	add    esp,0x10
c000c3db:	e9 98 fe ff ff       	jmp    c000c278 <ACPI::open(int, int, void*)+0x1a4>
c000c3e0:	83 ec 0c             	sub    esp,0xc
c000c3e3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c3ea:	50                   	push   eax
c000c3eb:	e8 b8 3c 01 00       	call   c00200a8 <LinkedList<Device>::~LinkedList()>
c000c3f0:	83 c4 10             	add    esp,0x10
c000c3f3:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c3f9:	83 ec 08             	sub    esp,0x8
c000c3fc:	6a 01                	push   0x1
c000c3fe:	68 ae 1b 02 c0       	push   0xc0021bae
c000c403:	e8 b4 85 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	83 ec 08             	sub    esp,0x8
c000c40e:	53                   	push   ebx
c000c40f:	50                   	push   eax
c000c410:	e8 f9 87 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c000c415:	83 c4 10             	add    esp,0x10
c000c418:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c41d:	85 c0                	test   eax,eax
c000c41f:	0f 84 27 01 00 00    	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c425:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c42a:	85 c0                	test   eax,eax
c000c42c:	0f 84 1a 01 00 00    	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c432:	83 ec 0c             	sub    esp,0xc
c000c435:	68 cb 1b 02 c0       	push   0xc0021bcb
c000c43a:	e8 01 02 00 00       	call   c000c640 <KeSetBootMessage(char const*)>
c000c43f:	83 c4 10             	add    esp,0x10
c000c442:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c457:	e8 1f 25 00 00       	call   c000e97b <malloc>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	89 c3                	mov    ebx,eax
c000c461:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c466:	83 ec 04             	sub    esp,0x4
c000c469:	50                   	push   eax
c000c46a:	68 e8 1b 02 c0       	push   0xc0021be8
c000c46f:	53                   	push   ebx
c000c470:	e8 9d bc ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c475:	83 c4 10             	add    esp,0x10
c000c478:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c47f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c487:	74 1f                	je     c000c4a8 <ACPI::open(int, int, void*)+0x3d4>
c000c489:	83 ec 0c             	sub    esp,0xc
c000c48c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c493:	e8 5c bf ff ff       	call   c00083f4 <File::exists()>
c000c498:	83 c4 10             	add    esp,0x10
c000c49b:	0f b6 c0             	movzx  eax,al
c000c49e:	85 c0                	test   eax,eax
c000c4a0:	74 06                	je     c000c4a8 <ACPI::open(int, int, void*)+0x3d4>
c000c4a2:	b0 01                	mov    al,0x1
c000c4a4:	eb 06                	jmp    c000c4ac <ACPI::open(int, int, void*)+0x3d8>
c000c4a6:	66 90                	xchg   ax,ax
c000c4a8:	b0 00                	mov    al,0x0
c000c4aa:	66 90                	xchg   ax,ax
c000c4ac:	0f b6 c0             	movzx  eax,al
c000c4af:	85 c0                	test   eax,eax
c000c4b1:	74 25                	je     c000c4d8 <ACPI::open(int, int, void*)+0x404>
c000c4b3:	83 ec 08             	sub    esp,0x8
c000c4b6:	6a 01                	push   0x1
c000c4b8:	68 e8 1b 02 c0       	push   0xc0021be8
c000c4bd:	e8 fa 84 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c000c4c2:	83 c4 10             	add    esp,0x10
c000c4c5:	83 ec 08             	sub    esp,0x8
c000c4c8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c4cf:	50                   	push   eax
c000c4d0:	e8 39 87 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4e0:	74 2a                	je     c000c50c <ACPI::open(int, int, void*)+0x438>
c000c4e2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4ea:	74 20                	je     c000c50c <ACPI::open(int, int, void*)+0x438>
c000c4ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c4f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4f5:	83 c0 08             	add    eax,0x8
c000c4f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4fa:	83 ec 0c             	sub    esp,0xc
c000c4fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c504:	ff d0                	call   eax
c000c506:	83 c4 10             	add    esp,0x10
c000c509:	8d 76 00             	lea    esi,[esi+0x0]
c000c50c:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c511:	83 ec 08             	sub    esp,0x8
c000c514:	68 05 1c 02 c0       	push   0xc0021c05
c000c519:	50                   	push   eax
c000c51a:	e8 a1 f2 ff ff       	call   c000b7c0 <findDataTable(unsigned char*, char*)>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c529:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c531:	74 19                	je     c000c54c <ACPI::open(int, int, void*)+0x478>
c000c533:	83 ec 08             	sub    esp,0x8
c000c536:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c53d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c544:	e8 73 fb ff ff       	call   c000c0bc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c549:	83 c4 10             	add    esp,0x10
c000c54c:	b8 00 00 00 00       	mov    eax,0x0
c000c551:	81 c4 70 01 00 00    	add    esp,0x170
c000c557:	5b                   	pop    ebx
c000c558:	5e                   	pop    esi
c000c559:	5f                   	pop    edi
c000c55a:	c3                   	ret    

c000c55b <KeInitialiseAtexit()>:
c000c55b:	83 ec 10             	sub    esp,0x10
c000c55e:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c568:	6a 60                	push   0x60
c000c56a:	6a 00                	push   0x0
c000c56c:	68 00 9d 02 c0       	push   0xc0029d00
c000c571:	e8 7a 3f ff ff       	call   c00004f0 <memset>
c000c576:	83 c4 1c             	add    esp,0x1c
c000c579:	c3                   	ret    

c000c57a <KeRegisterAtexit(void (*)(void*), void*)>:
c000c57a:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c57f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c583:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c58a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c58e:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c595:	40                   	inc    eax
c000c596:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c59b:	83 f8 17             	cmp    eax,0x17
c000c59e:	7e 0d                	jle    c000c5ad <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c5a0:	c7 44 24 04 b0 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021cb0
c000c5a8:	e9 15 27 00 00       	jmp    c000ecc2 <KePanic(char const*)>
c000c5ad:	c3                   	ret    

c000c5ae <KeExecuteAtexit()>:
c000c5ae:	53                   	push   ebx
c000c5af:	31 db                	xor    ebx,ebx
c000c5b1:	83 ec 08             	sub    esp,0x8
c000c5b4:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c5ba:	7e 50                	jle    c000c60c <KeExecuteAtexit()+0x5e>
c000c5bc:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c5c3:	85 c0                	test   eax,eax
c000c5c5:	74 42                	je     c000c609 <KeExecuteAtexit()+0x5b>
c000c5c7:	51                   	push   ecx
c000c5c8:	50                   	push   eax
c000c5c9:	53                   	push   ebx
c000c5ca:	68 c9 1c 02 c0       	push   0xc0021cc9
c000c5cf:	e8 90 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5d4:	58                   	pop    eax
c000c5d5:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c5dc:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c5e3:	c7 04 24 eb 1c 02 c0 	mov    DWORD PTR [esp],0xc0021ceb
c000c5ea:	e8 75 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5ef:	c7 04 24 6b 20 02 c0 	mov    DWORD PTR [esp],0xc002206b
c000c5f6:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c601:	e8 5e a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	43                   	inc    ebx
c000c60a:	eb a8                	jmp    c000c5b4 <KeExecuteAtexit()+0x6>
c000c60c:	83 c4 08             	add    esp,0x8
c000c60f:	5b                   	pop    ebx
c000c610:	c3                   	ret    

c000c611 <KeDisplaySplashScreen()>:
c000c611:	53                   	push   ebx
c000c612:	bb 01 00 00 00       	mov    ebx,0x1
c000c617:	83 ec 08             	sub    esp,0x8
c000c61a:	43                   	inc    ebx
c000c61b:	0f be 83 ee 1c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde312]
c000c622:	85 c0                	test   eax,eax
c000c624:	74 15                	je     c000c63b <KeDisplaySplashScreen()+0x2a>
c000c626:	83 ec 0c             	sub    esp,0xc
c000c629:	6a 01                	push   0x1
c000c62b:	53                   	push   ebx
c000c62c:	6a 00                	push   0x0
c000c62e:	6a 0f                	push   0xf
c000c630:	50                   	push   eax
c000c631:	e8 ca cf 00 00       	call   c0019600 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c636:	83 c4 20             	add    esp,0x20
c000c639:	eb df                	jmp    c000c61a <KeDisplaySplashScreen()+0x9>
c000c63b:	83 c4 08             	add    esp,0x8
c000c63e:	5b                   	pop    ebx
c000c63f:	c3                   	ret    

c000c640 <KeSetBootMessage(char const*)>:
c000c640:	57                   	push   edi
c000c641:	56                   	push   esi
c000c642:	53                   	push   ebx
c000c643:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c649:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c650:	68 9e 00 00 00       	push   0x9e
c000c655:	6a 00                	push   0x0
c000c657:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c65b:	56                   	push   esi
c000c65c:	e8 8f 3e ff ff       	call   c00004f0 <memset>
c000c661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c664:	e8 07 3f ff ff       	call   c0000570 <strlen>
c000c669:	ba 50 00 00 00       	mov    edx,0x50
c000c66e:	83 c4 10             	add    esp,0x10
c000c671:	29 c2                	sub    edx,eax
c000c673:	31 c9                	xor    ecx,ecx
c000c675:	83 e2 fe             	and    edx,0xfffffffe
c000c678:	01 f2                	add    edx,esi
c000c67a:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c67f:	84 c0                	test   al,al
c000c681:	74 0a                	je     c000c68d <KeSetBootMessage(char const*)+0x4d>
c000c683:	80 cc 07             	or     ah,0x7
c000c686:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c68a:	41                   	inc    ecx
c000c68b:	eb ed                	jmp    c000c67a <KeSetBootMessage(char const*)+0x3a>
c000c68d:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c692:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c699:	50                   	push   eax
c000c69a:	50                   	push   eax
c000c69b:	53                   	push   ebx
c000c69c:	68 03 1d 02 c0       	push   0xc0021d03
c000c6a1:	e8 be a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6a6:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c6ac:	5b                   	pop    ebx
c000c6ad:	5e                   	pop    esi
c000c6ae:	5f                   	pop    edi
c000c6af:	c3                   	ret    

c000c6b0 <__cxa_atexit>:
c000c6b0:	31 c0                	xor    eax,eax
c000c6b2:	c3                   	ret    

c000c6b3 <__cxa_finalize>:
c000c6b3:	c3                   	ret    

c000c6b4 <__stack_chk_fail>:
c000c6b4:	55                   	push   ebp
c000c6b5:	89 e5                	mov    ebp,esp
c000c6b7:	83 ec 10             	sub    esp,0x10
c000c6ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c6bd:	68 11 1d 02 c0       	push   0xc0021d11
c000c6c2:	e8 9d a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6c7:	58                   	pop    eax
c000c6c8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c6cb:	5a                   	pop    edx
c000c6cc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c6cf:	68 11 1d 02 c0       	push   0xc0021d11
c000c6d4:	e8 8b a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6d9:	c7 04 24 19 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d19
c000c6e0:	e8 dd 25 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	c9                   	leave  
c000c6e9:	c3                   	ret    

c000c6ea <__cxa_pure_virtual>:
c000c6ea:	83 ec 18             	sub    esp,0x18
c000c6ed:	68 31 1d 02 c0       	push   0xc0021d31
c000c6f2:	e8 cb 25 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c6f7:	83 c4 1c             	add    esp,0x1c
c000c6fa:	c3                   	ret    

c000c6fb <operator new[](unsigned long)>:
c000c6fb:	e9 7b 22 00 00       	jmp    c000e97b <malloc>

c000c700 <operator delete(void*, unsigned long)>:
c000c700:	e9 96 22 00 00       	jmp    c000e99b <rfree>

c000c705 <operator delete[](void*)>:
c000c705:	e9 91 22 00 00       	jmp    c000e99b <rfree>

c000c70a <operator delete[](void*, unsigned long)>:
c000c70a:	e9 8c 22 00 00       	jmp    c000e99b <rfree>
c000c70f:	90                   	nop

c000c710 <CUnlockScheduler>:
c000c710:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000c718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c71d:	85 c0                	test   eax,eax
c000c71f:	75 03                	jne    c000c724 <CUnlockScheduler+0x14>
c000c721:	fb                   	sti    
c000c722:	66 90                	xchg   ax,ax
c000c724:	90                   	nop
c000c725:	c3                   	ret    
c000c726:	66 90                	xchg   ax,ax

c000c728 <CLockScheduler>:
c000c728:	fa                   	cli    
c000c729:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c72e:	83 c0 01             	add    eax,0x1
c000c731:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c736:	90                   	nop
c000c737:	c3                   	ret    

c000c738 <CPrintf>:
c000c738:	83 ec 0c             	sub    esp,0xc
c000c73b:	83 ec 08             	sub    esp,0x8
c000c73e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c742:	68 44 1d 02 c0       	push   0xc0021d44
c000c747:	e8 18 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c74c:	83 c4 10             	add    esp,0x10
c000c74f:	90                   	nop
c000c750:	83 c4 0c             	add    esp,0xc
c000c753:	c3                   	ret    

c000c754 <CmOpen(char const*)>:
c000c754:	57                   	push   edi
c000c755:	56                   	push   esi
c000c756:	53                   	push   ebx
c000c757:	83 ec 1c             	sub    esp,0x1c
c000c75a:	6a 30                	push   0x30
c000c75c:	e8 1a 22 00 00       	call   c000e97b <malloc>
c000c761:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c768:	89 c3                	mov    ebx,eax
c000c76a:	e8 0c 22 00 00       	call   c000e97b <malloc>
c000c76f:	83 c4 0c             	add    esp,0xc
c000c772:	89 c6                	mov    esi,eax
c000c774:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c77a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c77e:	50                   	push   eax
c000c77f:	e8 8e b9 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c784:	83 c4 0c             	add    esp,0xc
c000c787:	89 33                	mov    DWORD PTR [ebx],esi
c000c789:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c78d:	50                   	push   eax
c000c78e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c792:	50                   	push   eax
c000c793:	56                   	push   esi
c000c794:	e8 99 bc ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000c799:	5a                   	pop    edx
c000c79a:	59                   	pop    ecx
c000c79b:	6a 01                	push   0x1
c000c79d:	ff 33                	push   DWORD PTR [ebx]
c000c79f:	e8 8c b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7a4:	5e                   	pop    esi
c000c7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a9:	e8 cd 21 00 00       	call   c000e97b <malloc>
c000c7ae:	5a                   	pop    edx
c000c7af:	89 c7                	mov    edi,eax
c000c7b1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c7b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7b9:	56                   	push   esi
c000c7ba:	57                   	push   edi
c000c7bb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7c3:	50                   	push   eax
c000c7c4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7c7:	83 c4 14             	add    esp,0x14
c000c7ca:	ff 33                	push   DWORD PTR [ebx]
c000c7cc:	e8 bd b9 ff ff       	call   c000818e <File::close()>
c000c7d1:	59                   	pop    ecx
c000c7d2:	58                   	pop    eax
c000c7d3:	6a 13                	push   0x13
c000c7d5:	ff 33                	push   DWORD PTR [ebx]
c000c7d7:	e8 54 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7de:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7e0:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7e3:	57                   	push   edi
c000c7e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7ec:	50                   	push   eax
c000c7ed:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c7f0:	83 c4 14             	add    esp,0x14
c000c7f3:	57                   	push   edi
c000c7f4:	e8 92 21 00 00       	call   c000e98b <free>
c000c7f9:	83 c4 10             	add    esp,0x10
c000c7fc:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ff:	75 10                	jne    c000c811 <CmOpen(char const*)+0xbd>
c000c801:	83 ec 0c             	sub    esp,0xc
c000c804:	68 47 1d 02 c0       	push   0xc0021d47
c000c809:	e8 b4 24 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c80e:	83 c4 10             	add    esp,0x10
c000c811:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c814:	50                   	push   eax
c000c815:	6a 00                	push   0x0
c000c817:	6a 00                	push   0x0
c000c819:	ff 33                	push   DWORD PTR [ebx]
c000c81b:	e8 ce b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c820:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c822:	8b 10                	mov    edx,DWORD PTR [eax]
c000c824:	89 34 24             	mov    DWORD PTR [esp],esi
c000c827:	57                   	push   edi
c000c828:	6a 00                	push   0x0
c000c82a:	6a 2b                	push   0x2b
c000c82c:	50                   	push   eax
c000c82d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c830:	83 c4 1c             	add    esp,0x1c
c000c833:	6a 00                	push   0x0
c000c835:	6a 00                	push   0x0
c000c837:	ff 33                	push   DWORD PTR [ebx]
c000c839:	e8 b0 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c83e:	83 c4 0c             	add    esp,0xc
c000c841:	6a 08                	push   0x8
c000c843:	68 58 1d 02 c0       	push   0xc0021d58
c000c848:	57                   	push   edi
c000c849:	e8 32 3b ff ff       	call   c0000380 <memcmp>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	85 c0                	test   eax,eax
c000c853:	74 10                	je     c000c865 <CmOpen(char const*)+0x111>
c000c855:	83 ec 0c             	sub    esp,0xc
c000c858:	68 61 1d 02 c0       	push   0xc0021d61
c000c85d:	e8 60 24 00 00       	call   c000ecc2 <KePanic(char const*)>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c869:	89 d8                	mov    eax,ebx
c000c86b:	83 c4 10             	add    esp,0x10
c000c86e:	5b                   	pop    ebx
c000c86f:	5e                   	pop    esi
c000c870:	5f                   	pop    edi
c000c871:	c3                   	ret    

c000c872 <CmClose(Reghive_Tag*)>:
c000c872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c876:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c87a:	74 0b                	je     c000c887 <CmClose(Reghive_Tag*)+0x15>
c000c87c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c87e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c882:	e9 07 b9 ff ff       	jmp    c000818e <File::close()>
c000c887:	c3                   	ret    

c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c888:	53                   	push   ebx
c000c889:	83 ec 18             	sub    esp,0x18
c000c88c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c890:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c894:	74 29                	je     c000c8bf <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c896:	50                   	push   eax
c000c897:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c89c:	99                   	cdq    
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 33                	push   DWORD PTR [ebx]
c000c8a1:	e8 48 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c8a6:	5a                   	pop    edx
c000c8a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8a9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c8ad:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8af:	51                   	push   ecx
c000c8b0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c8b4:	6a 00                	push   0x0
c000c8b6:	6a 2b                	push   0x2b
c000c8b8:	50                   	push   eax
c000c8b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c8bc:	83 c4 20             	add    esp,0x20
c000c8bf:	83 c4 18             	add    esp,0x18
c000c8c2:	5b                   	pop    ebx
c000c8c3:	c3                   	ret    

c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>:
c000c8c4:	55                   	push   ebp
c000c8c5:	57                   	push   edi
c000c8c6:	56                   	push   esi
c000c8c7:	53                   	push   ebx
c000c8c8:	31 db                	xor    ebx,ebx
c000c8ca:	83 ec 70             	sub    esp,0x70
c000c8cd:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c8d4:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c8d8:	50                   	push   eax
c000c8d9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c8e0:	55                   	push   ebp
c000c8e1:	e8 a2 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c8ee:	c1 e0 08             	shl    eax,0x8
c000c8f1:	89 c2                	mov    edx,eax
c000c8f3:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c8f8:	09 d0                	or     eax,edx
c000c8fa:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c8ff:	c1 e0 08             	shl    eax,0x8
c000c902:	09 d0                	or     eax,edx
c000c904:	74 25                	je     c000c92b <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c906:	6b fb 0d             	imul   edi,ebx,0xd
c000c909:	52                   	push   edx
c000c90a:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c90e:	52                   	push   edx
c000c90f:	50                   	push   eax
c000c910:	55                   	push   ebp
c000c911:	e8 72 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c916:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c91a:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c921:	b9 27 00 00 00       	mov    ecx,0x27
c000c926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	83 c3 03             	add    ebx,0x3
c000c92e:	83 fb 15             	cmp    ebx,0x15
c000c931:	75 b6                	jne    c000c8e9 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c933:	83 c4 6c             	add    esp,0x6c
c000c936:	5b                   	pop    ebx
c000c937:	5e                   	pop    esi
c000c938:	5f                   	pop    edi
c000c939:	5d                   	pop    ebp
c000c93a:	c3                   	ret    

c000c93b <CmEnterDirectory(Reghive_Tag*, int)>:
c000c93b:	83 ec 40             	sub    esp,0x40
c000c93e:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c942:	50                   	push   eax
c000c943:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c947:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c94b:	e8 38 ff ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c950:	83 c4 10             	add    esp,0x10
c000c953:	83 c8 ff             	or     eax,0xffffffff
c000c956:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c95b:	75 19                	jne    c000c976 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c95d:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c962:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c967:	c1 e0 08             	shl    eax,0x8
c000c96a:	09 c2                	or     edx,eax
c000c96c:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c971:	c1 e0 10             	shl    eax,0x10
c000c974:	09 d0                	or     eax,edx
c000c976:	83 c4 3c             	add    esp,0x3c
c000c979:	c3                   	ret    

c000c97a <CmGetNext(Reghive_Tag*, int)>:
c000c97a:	83 ec 40             	sub    esp,0x40
c000c97d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c981:	50                   	push   eax
c000c982:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c986:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c98a:	e8 f9 fe ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c98f:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c994:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c999:	c1 e0 08             	shl    eax,0x8
c000c99c:	09 c2                	or     edx,eax
c000c99e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c9a3:	83 c4 4c             	add    esp,0x4c
c000c9a6:	c1 e0 10             	shl    eax,0x10
c000c9a9:	09 d0                	or     eax,edx
c000c9ab:	c3                   	ret    

c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	83 ec 18             	sub    esp,0x18
c000c9b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9b4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9b8:	74 29                	je     c000c9e3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c9ba:	50                   	push   eax
c000c9bb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c9c0:	99                   	cdq    
c000c9c1:	52                   	push   edx
c000c9c2:	50                   	push   eax
c000c9c3:	ff 33                	push   DWORD PTR [ebx]
c000c9c5:	e8 24 b8 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c9ca:	5a                   	pop    edx
c000c9cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9cd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c9d1:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9d3:	51                   	push   ecx
c000c9d4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c9d8:	6a 00                	push   0x0
c000c9da:	6a 2b                	push   0x2b
c000c9dc:	50                   	push   eax
c000c9dd:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e0:	83 c4 20             	add    esp,0x20
c000c9e3:	83 c4 18             	add    esp,0x18
c000c9e6:	5b                   	pop    ebx
c000c9e7:	c3                   	ret    

c000c9e8 <CmFreeExtent(Reghive_Tag*, int)>:
c000c9e8:	53                   	push   ebx
c000c9e9:	83 ec 3c             	sub    esp,0x3c
c000c9ec:	6a 2b                	push   0x2b
c000c9ee:	6a 00                	push   0x0
c000c9f0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c9f4:	53                   	push   ebx
c000c9f5:	e8 f6 3a ff ff       	call   c00004f0 <memset>
c000c9fa:	83 c4 0c             	add    esp,0xc
c000c9fd:	53                   	push   ebx
c000c9fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca06:	e8 a1 ff ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca0b:	83 c4 48             	add    esp,0x48
c000ca0e:	5b                   	pop    ebx
c000ca0f:	c3                   	ret    

c000ca10 <CmUpdateHeader(Reghive_Tag*)>:
c000ca10:	83 ec 0c             	sub    esp,0xc
c000ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca17:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca1b:	74 10                	je     c000ca2d <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ca1d:	52                   	push   edx
c000ca1e:	8d 50 05             	lea    edx,[eax+0x5]
c000ca21:	52                   	push   edx
c000ca22:	6a 00                	push   0x0
c000ca24:	50                   	push   eax
c000ca25:	e8 82 ff ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	83 c4 0c             	add    esp,0xc
c000ca30:	c3                   	ret    

c000ca31 <CmExpand(Reghive_Tag*, int)>:
c000ca31:	57                   	push   edi
c000ca32:	56                   	push   esi
c000ca33:	83 ce ff             	or     esi,0xffffffff
c000ca36:	53                   	push   ebx
c000ca37:	83 ec 30             	sub    esp,0x30
c000ca3a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca3e:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca42:	74 5f                	je     c000caa3 <CmExpand(Reghive_Tag*, int)+0x72>
c000ca44:	31 d2                	xor    edx,edx
c000ca46:	31 f6                	xor    esi,esi
c000ca48:	50                   	push   eax
c000ca49:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ca4d:	52                   	push   edx
c000ca4e:	50                   	push   eax
c000ca4f:	ff 33                	push   DWORD PTR [ebx]
c000ca51:	e8 98 b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000ca56:	83 c4 0c             	add    esp,0xc
c000ca59:	6a 2b                	push   0x2b
c000ca5b:	6a 00                	push   0x0
c000ca5d:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000ca61:	57                   	push   edi
c000ca62:	e8 89 3a ff ff       	call   c00004f0 <memset>
c000ca67:	83 c4 10             	add    esp,0x10
c000ca6a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ca6e:	7d 1b                	jge    c000ca8b <CmExpand(Reghive_Tag*, int)+0x5a>
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca75:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca79:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca7b:	46                   	inc    esi
c000ca7c:	51                   	push   ecx
c000ca7d:	57                   	push   edi
c000ca7e:	6a 00                	push   0x0
c000ca80:	6a 2b                	push   0x2b
c000ca82:	50                   	push   eax
c000ca83:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca86:	83 c4 20             	add    esp,0x20
c000ca89:	eb df                	jmp    c000ca6a <CmExpand(Reghive_Tag*, int)+0x39>
c000ca8b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ca8f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	01 f2                	add    edx,esi
c000ca97:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000ca9a:	53                   	push   ebx
c000ca9b:	e8 70 ff ff ff       	call   c000ca10 <CmUpdateHeader(Reghive_Tag*)>
c000caa0:	83 c4 10             	add    esp,0x10
c000caa3:	83 c4 30             	add    esp,0x30
c000caa6:	89 f0                	mov    eax,esi
c000caa8:	5b                   	pop    ebx
c000caa9:	5e                   	pop    esi
c000caaa:	5f                   	pop    edi
c000caab:	c3                   	ret    

c000caac <CmFindUnusedExtent(Reghive_Tag*)>:
c000caac:	55                   	push   ebp
c000caad:	57                   	push   edi
c000caae:	56                   	push   esi
c000caaf:	53                   	push   ebx
c000cab0:	83 cb ff             	or     ebx,0xffffffff
c000cab3:	83 ec 1c             	sub    esp,0x1c
c000cab6:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000caba:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cabe:	74 68                	je     c000cb28 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cac0:	be 2b 00 00 00       	mov    esi,0x2b
c000cac5:	51                   	push   ecx
c000cac6:	31 ff                	xor    edi,edi
c000cac8:	6a 00                	push   0x0
c000caca:	31 db                	xor    ebx,ebx
c000cacc:	6a 00                	push   0x0
c000cace:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cad1:	e8 18 b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cadc:	76 3b                	jbe    c000cb19 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cade:	83 ec 0c             	sub    esp,0xc
c000cae1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cae4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cae8:	8b 10                	mov    edx,DWORD PTR [eax]
c000caea:	51                   	push   ecx
c000caeb:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000caef:	51                   	push   ecx
c000caf0:	6a 00                	push   0x0
c000caf2:	6a 01                	push   0x1
c000caf4:	50                   	push   eax
c000caf5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caf8:	83 c4 20             	add    esp,0x20
c000cafb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cb00:	74 26                	je     c000cb28 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb02:	43                   	inc    ebx
c000cb03:	52                   	push   edx
c000cb04:	57                   	push   edi
c000cb05:	56                   	push   esi
c000cb06:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb09:	e8 e0 b6 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cb0e:	83 c6 2b             	add    esi,0x2b
c000cb11:	83 d7 00             	adc    edi,0x0
c000cb14:	83 c4 10             	add    esp,0x10
c000cb17:	eb c0                	jmp    c000cad9 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cb19:	50                   	push   eax
c000cb1a:	50                   	push   eax
c000cb1b:	6a 40                	push   0x40
c000cb1d:	55                   	push   ebp
c000cb1e:	e8 0e ff ff ff       	call   c000ca31 <CmExpand(Reghive_Tag*, int)>
c000cb23:	83 c4 10             	add    esp,0x10
c000cb26:	89 c3                	mov    ebx,eax
c000cb28:	83 c4 1c             	add    esp,0x1c
c000cb2b:	89 d8                	mov    eax,ebx
c000cb2d:	5b                   	pop    ebx
c000cb2e:	5e                   	pop    esi
c000cb2f:	5f                   	pop    edi
c000cb30:	5d                   	pop    ebp
c000cb31:	c3                   	ret    

c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cb32:	55                   	push   ebp
c000cb33:	57                   	push   edi
c000cb34:	56                   	push   esi
c000cb35:	53                   	push   ebx
c000cb36:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb3c:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb43:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb4a:	e8 5d ff ff ff       	call   c000caac <CmFindUnusedExtent(Reghive_Tag*)>
c000cb4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb53:	83 c4 0c             	add    esp,0xc
c000cb56:	6a 2b                	push   0x2b
c000cb58:	6a 00                	push   0x0
c000cb5a:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb5e:	55                   	push   ebp
c000cb5f:	e8 8c 39 ff ff       	call   c00004f0 <memset>
c000cb64:	83 c4 10             	add    esp,0x10
c000cb67:	85 db                	test   ebx,ebx
c000cb69:	74 12                	je     c000cb7d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb6b:	51                   	push   ecx
c000cb6c:	55                   	push   ebp
c000cb6d:	53                   	push   ebx
c000cb6e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb75:	e8 0e fd ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb81:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb88:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb8f:	85 db                	test   ebx,ebx
c000cb91:	74 49                	je     c000cbdc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb93:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb98:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cba1:	c1 e0 08             	shl    eax,0x8
c000cba4:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cbaa:	09 c8                	or     eax,ecx
c000cbac:	74 11                	je     c000cbbf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cbae:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cbb2:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cbb6:	c1 e8 10             	shr    eax,0x10
c000cbb9:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cbbd:	eb 0f                	jmp    c000cbce <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cbbf:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbc4:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbc9:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbce:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cbd2:	c1 ea 08             	shr    edx,0x8
c000cbd5:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cbda:	eb 0f                	jmp    c000cbeb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cbdc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbe1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbe6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbeb:	52                   	push   edx
c000cbec:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cbf0:	50                   	push   eax
c000cbf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf5:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbfc:	e8 ab fd ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	85 db                	test   ebx,ebx
c000cc06:	74 12                	je     c000cc1a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cc08:	50                   	push   eax
c000cc09:	55                   	push   ebp
c000cc0a:	53                   	push   ebx
c000cc0b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc12:	e8 95 fd ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc17:	83 c4 10             	add    esp,0x10
c000cc1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc1e:	83 c4 7c             	add    esp,0x7c
c000cc21:	5b                   	pop    ebx
c000cc22:	5e                   	pop    esi
c000cc23:	5f                   	pop    edi
c000cc24:	5d                   	pop    ebp
c000cc25:	c3                   	ret    

c000cc26 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cc26:	55                   	push   ebp
c000cc27:	57                   	push   edi
c000cc28:	56                   	push   esi
c000cc29:	53                   	push   ebx
c000cc2a:	bb 27 00 00 00       	mov    ebx,0x27
c000cc2f:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc35:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc3c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc43:	e8 28 39 ff ff       	call   c0000570 <strlen>
c000cc48:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc4b:	89 c8                	mov    eax,ecx
c000cc4d:	99                   	cdq    
c000cc4e:	f7 fb                	idiv   ebx
c000cc50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc5d:	7e 10                	jle    c000cc6f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc5f:	83 ec 0c             	sub    esp,0xc
c000cc62:	68 72 1d 02 c0       	push   0xc0021d72
c000cc67:	e8 56 20 00 00       	call   c000ecc2 <KePanic(char const*)>
c000cc6c:	83 c4 10             	add    esp,0x10
c000cc6f:	31 ff                	xor    edi,edi
c000cc71:	50                   	push   eax
c000cc72:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc76:	53                   	push   ebx
c000cc77:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc7e:	56                   	push   esi
c000cc7f:	e8 04 fc ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cc8b:	89 d0                	mov    eax,edx
c000cc8d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cc91:	c1 e0 08             	shl    eax,0x8
c000cc94:	09 c2                	or     edx,eax
c000cc96:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc9a:	c1 e2 08             	shl    edx,0x8
c000cc9d:	09 c2                	or     edx,eax
c000cc9f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000cca3:	7e 76                	jle    c000cd1b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000cca5:	85 d2                	test   edx,edx
c000cca7:	75 25                	jne    c000ccce <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cca9:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000ccae:	8d 44 24 45          	lea    eax,[esp+0x45]
c000ccb2:	50                   	push   eax
c000ccb3:	6a 00                	push   0x0
c000ccb5:	6a 00                	push   0x0
c000ccb7:	56                   	push   esi
c000ccb8:	e8 75 fe ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ccbd:	83 c4 10             	add    esp,0x10
c000ccc0:	89 c2                	mov    edx,eax
c000ccc2:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ccc5:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000ccc8:	c1 f8 10             	sar    eax,0x10
c000cccb:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000ccce:	55                   	push   ebp
c000cccf:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000ccd3:	55                   	push   ebp
c000ccd4:	52                   	push   edx
c000ccd5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ccd9:	56                   	push   esi
c000ccda:	e8 a9 fb ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ccdf:	83 c4 0c             	add    esp,0xc
c000cce2:	6a 27                	push   0x27
c000cce4:	6a 00                	push   0x0
c000cce6:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccea:	51                   	push   ecx
c000cceb:	e8 00 38 ff ff       	call   c00004f0 <memset>
c000ccf0:	83 c4 0c             	add    esp,0xc
c000ccf3:	6b c7 27             	imul   eax,edi,0x27
c000ccf6:	6a 27                	push   0x27
c000ccf8:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ccff:	50                   	push   eax
c000cd00:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd04:	51                   	push   ecx
c000cd05:	e8 76 39 ff ff       	call   c0000680 <strncpy>
c000cd0a:	83 c4 0c             	add    esp,0xc
c000cd0d:	55                   	push   ebp
c000cd0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd12:	52                   	push   edx
c000cd13:	56                   	push   esi
c000cd14:	e8 93 fc ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd19:	eb 19                	jmp    c000cd34 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cd1b:	85 d2                	test   edx,edx
c000cd1d:	74 18                	je     c000cd37 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cd1f:	51                   	push   ecx
c000cd20:	51                   	push   ecx
c000cd21:	52                   	push   edx
c000cd22:	56                   	push   esi
c000cd23:	e8 c0 fc ff ff       	call   c000c9e8 <CmFreeExtent(Reghive_Tag*, int)>
c000cd28:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cd2c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cd30:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cd34:	83 c4 10             	add    esp,0x10
c000cd37:	47                   	inc    edi
c000cd38:	83 c3 03             	add    ebx,0x3
c000cd3b:	83 ff 07             	cmp    edi,0x7
c000cd3e:	0f 85 43 ff ff ff    	jne    c000cc87 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd44:	50                   	push   eax
c000cd45:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd49:	50                   	push   eax
c000cd4a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd51:	56                   	push   esi
c000cd52:	e8 55 fc ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd57:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd5d:	5b                   	pop    ebx
c000cd5e:	5e                   	pop    esi
c000cd5f:	5f                   	pop    edi
c000cd60:	5d                   	pop    ebp
c000cd61:	c3                   	ret    

c000cd62 <CmGetMatch(char*, char*, bool, bool*)>:
c000cd62:	56                   	push   esi
c000cd63:	53                   	push   ebx
c000cd64:	50                   	push   eax
c000cd65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd69:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd6e:	74 25                	je     c000cd95 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd70:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd73:	31 db                	xor    ebx,ebx
c000cd75:	50                   	push   eax
c000cd76:	50                   	push   eax
c000cd77:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cd7e:	50                   	push   eax
c000cd7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd83:	e8 c8 39 ff ff       	call   c0000750 <strcmp>
c000cd88:	83 c4 10             	add    esp,0x10
c000cd8b:	85 c0                	test   eax,eax
c000cd8d:	74 2e                	je     c000cdbd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd8f:	43                   	inc    ebx
c000cd90:	83 fb 3f             	cmp    ebx,0x3f
c000cd93:	75 e0                	jne    c000cd75 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cd95:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd98:	31 db                	xor    ebx,ebx
c000cd9a:	8d 04 9d 40 3b 02 c0 	lea    eax,[ebx*4-0x3ffdc4c0]
c000cda1:	51                   	push   ecx
c000cda2:	51                   	push   ecx
c000cda3:	50                   	push   eax
c000cda4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cda8:	e8 a3 39 ff ff       	call   c0000750 <strcmp>
c000cdad:	83 c4 10             	add    esp,0x10
c000cdb0:	85 c0                	test   eax,eax
c000cdb2:	74 09                	je     c000cdbd <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cdb4:	43                   	inc    ebx
c000cdb5:	83 fb 3f             	cmp    ebx,0x3f
c000cdb8:	75 e0                	jne    c000cd9a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cdba:	83 cb ff             	or     ebx,0xffffffff
c000cdbd:	89 d8                	mov    eax,ebx
c000cdbf:	5a                   	pop    edx
c000cdc0:	5b                   	pop    ebx
c000cdc1:	5e                   	pop    esi
c000cdc2:	c3                   	ret    

c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cdc3:	55                   	push   ebp
c000cdc4:	31 c0                	xor    eax,eax
c000cdc6:	57                   	push   edi
c000cdc7:	56                   	push   esi
c000cdc8:	53                   	push   ebx
c000cdc9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdcd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cdd1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cdd3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cdd7:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cdda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdde:	83 fd 1f             	cmp    ebp,0x1f
c000cde1:	7f 0b                	jg     c000cdee <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cde3:	0f b6 c2             	movzx  eax,dl
c000cde6:	d3 e0                	shl    eax,cl
c000cde8:	09 07                	or     DWORD PTR [edi],eax
c000cdea:	b0 01                	mov    al,0x1
c000cdec:	01 33                	add    DWORD PTR [ebx],esi
c000cdee:	5b                   	pop    ebx
c000cdef:	5e                   	pop    esi
c000cdf0:	5f                   	pop    edi
c000cdf1:	5d                   	pop    ebp
c000cdf2:	c3                   	ret    

c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cdf3:	57                   	push   edi
c000cdf4:	56                   	push   esi
c000cdf5:	53                   	push   ebx
c000cdf6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cdfa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cdfe:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ce02:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce06:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000ce08:	7c 17                	jl     c000ce21 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000ce0a:	8b 17                	mov    edx,DWORD PTR [edi]
c000ce0c:	b8 01 00 00 00       	mov    eax,0x1
c000ce11:	d3 e0                	shl    eax,cl
c000ce13:	48                   	dec    eax
c000ce14:	21 d0                	and    eax,edx
c000ce16:	d3 ea                	shr    edx,cl
c000ce18:	89 17                	mov    DWORD PTR [edi],edx
c000ce1a:	29 0b                	sub    DWORD PTR [ebx],ecx
c000ce1c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce1f:	eb 05                	jmp    c000ce26 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000ce21:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce24:	31 c0                	xor    eax,eax
c000ce26:	5b                   	pop    ebx
c000ce27:	5e                   	pop    esi
c000ce28:	5f                   	pop    edi
c000ce29:	c3                   	ret    

c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000ce2a:	83 ec 40             	sub    esp,0x40
c000ce2d:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce31:	50                   	push   eax
c000ce32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce36:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce3a:	e8 49 fa ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce3f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce43:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce47:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce4b:	89 10                	mov    DWORD PTR [eax],edx
c000ce4d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ce50:	83 c4 4c             	add    esp,0x4c
c000ce53:	c3                   	ret    

c000ce54 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000ce54:	55                   	push   ebp
c000ce55:	57                   	push   edi
c000ce56:	56                   	push   esi
c000ce57:	53                   	push   ebx
c000ce58:	83 ec 40             	sub    esp,0x40
c000ce5b:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce5f:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce63:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce67:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce6b:	53                   	push   ebx
c000ce6c:	56                   	push   esi
c000ce6d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce71:	e8 12 fa ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce76:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce7a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce7e:	83 c4 0c             	add    esp,0xc
c000ce81:	53                   	push   ebx
c000ce82:	56                   	push   esi
c000ce83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce87:	e8 20 fb ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce8c:	83 c4 4c             	add    esp,0x4c
c000ce8f:	5b                   	pop    ebx
c000ce90:	5e                   	pop    esi
c000ce91:	5f                   	pop    edi
c000ce92:	5d                   	pop    ebp
c000ce93:	c3                   	ret    

c000ce94 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000ce94:	55                   	push   ebp
c000ce95:	57                   	push   edi
c000ce96:	56                   	push   esi
c000ce97:	31 f6                	xor    esi,esi
c000ce99:	53                   	push   ebx
c000ce9a:	31 db                	xor    ebx,ebx
c000ce9c:	83 ec 40             	sub    esp,0x40
c000ce9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cea7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ceaf:	6a 12                	push   0x12
c000ceb1:	68 ee 00 00 00       	push   0xee
c000ceb6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ceba:	e8 31 36 ff ff       	call   c00004f0 <memset>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000cec6:	6a 08                	push   0x8
c000cec8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cecc:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ced0:	50                   	push   eax
c000ced1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ced5:	55                   	push   ebp
c000ced6:	57                   	push   edi
c000ced7:	e8 e7 fe ff ff       	call   c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cedc:	83 c4 10             	add    esp,0x10
c000cedf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cee3:	50                   	push   eax
c000cee4:	6a 06                	push   0x6
c000cee6:	55                   	push   ebp
c000cee7:	57                   	push   edi
c000cee8:	e8 06 ff ff ff       	call   c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000ceed:	83 c4 10             	add    esp,0x10
c000cef0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cef5:	74 07                	je     c000cefe <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cef7:	46                   	inc    esi
c000cef8:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cefc:	eb e1                	jmp    c000cedf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cefe:	43                   	inc    ebx
c000ceff:	83 fb 12             	cmp    ebx,0x12
c000cf02:	75 c2                	jne    c000cec6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cf04:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf08:	31 db                	xor    ebx,ebx
c000cf0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000cf0d:	50                   	push   eax
c000cf0e:	50                   	push   eax
c000cf0f:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000cf14:	43                   	inc    ebx
c000cf15:	8d 04 85 40 3b 02 c0 	lea    eax,[eax*4-0x3ffdc4c0]
c000cf1c:	50                   	push   eax
c000cf1d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf21:	e8 1a 39 ff ff       	call   c0000840 <strcat>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	83 fb 18             	cmp    ebx,0x18
c000cf2c:	75 df                	jne    c000cf0d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cf2e:	83 c4 3c             	add    esp,0x3c
c000cf31:	31 c0                	xor    eax,eax
c000cf33:	5b                   	pop    ebx
c000cf34:	5e                   	pop    esi
c000cf35:	5f                   	pop    edi
c000cf36:	5d                   	pop    ebp
c000cf37:	c3                   	ret    

c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cf38:	83 ec 40             	sub    esp,0x40
c000cf3b:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf3f:	50                   	push   eax
c000cf40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf48:	e8 3b f9 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf4d:	58                   	pop    eax
c000cf4e:	5a                   	pop    edx
c000cf4f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cf53:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cf57:	50                   	push   eax
c000cf58:	e8 37 ff ff ff       	call   c000ce94 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf5d:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf62:	83 c4 4c             	add    esp,0x4c
c000cf65:	c3                   	ret    

c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf66:	55                   	push   ebp
c000cf67:	57                   	push   edi
c000cf68:	56                   	push   esi
c000cf69:	53                   	push   ebx
c000cf6a:	31 db                	xor    ebx,ebx
c000cf6c:	83 ec 70             	sub    esp,0x70
c000cf6f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf76:	6a 30                	push   0x30
c000cf78:	6a 00                	push   0x0
c000cf7a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf7e:	56                   	push   esi
c000cf7f:	e8 6c 35 ff ff       	call   c00004f0 <memset>
c000cf84:	83 c4 10             	add    esp,0x10
c000cf87:	83 ec 0c             	sub    esp,0xc
c000cf8a:	57                   	push   edi
c000cf8b:	e8 e0 35 ff ff       	call   c0000570 <strlen>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	39 d8                	cmp    eax,ebx
c000cf95:	76 16                	jbe    c000cfad <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cf97:	83 ec 0c             	sub    esp,0xc
c000cf9a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cf9e:	50                   	push   eax
c000cf9f:	e8 8c 39 ff ff       	call   c0000930 <toupper>
c000cfa4:	83 c4 10             	add    esp,0x10
c000cfa7:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cfaa:	43                   	inc    ebx
c000cfab:	eb da                	jmp    c000cf87 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cfad:	31 f6                	xor    esi,esi
c000cfaf:	52                   	push   edx
c000cfb0:	31 ff                	xor    edi,edi
c000cfb2:	6a 18                	push   0x18
c000cfb4:	6a 3f                	push   0x3f
c000cfb6:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfba:	50                   	push   eax
c000cfbb:	e8 30 35 ff ff       	call   c00004f0 <memset>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000cfc7:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000cfcb:	84 c0                	test   al,al
c000cfcd:	0f 84 b0 00 00 00    	je     c000d083 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000cfd3:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cfd7:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000cfdc:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000cfe0:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000cfe5:	8d 6e 01             	lea    ebp,[esi+0x1]
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cfef:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cff3:	53                   	push   ebx
c000cff4:	e8 77 35 ff ff       	call   c0000570 <strlen>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	85 c0                	test   eax,eax
c000cffe:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d002:	74 0b                	je     c000d00f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d004:	50                   	push   eax
c000d005:	6a 01                	push   0x1
c000d007:	53                   	push   ebx
c000d008:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d00c:	50                   	push   eax
c000d00d:	eb 0a                	jmp    c000d019 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d00f:	50                   	push   eax
c000d010:	6a 00                	push   0x0
c000d012:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d016:	50                   	push   eax
c000d017:	6a 00                	push   0x0
c000d019:	e8 44 fd ff ff       	call   c000cd62 <CmGetMatch(char*, char*, bool, bool*)>
c000d01e:	83 c4 10             	add    esp,0x10
c000d021:	83 f8 ff             	cmp    eax,0xffffffff
c000d024:	75 1a                	jne    c000d040 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d026:	83 ec 0c             	sub    esp,0xc
c000d029:	68 87 1d 02 c0       	push   0xc0021d87
c000d02e:	e8 8f 1c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d033:	83 c4 10             	add    esp,0x10
c000d036:	b8 02 00 00 00       	mov    eax,0x2
c000d03b:	e9 bc 00 00 00       	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d040:	83 ff 18             	cmp    edi,0x18
c000d043:	75 1a                	jne    c000d05f <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d045:	83 ec 0c             	sub    esp,0xc
c000d048:	68 9c 1d 02 c0       	push   0xc0021d9c
c000d04d:	e8 70 1c 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	b8 01 00 00 00       	mov    eax,0x1
c000d05a:	e9 9d 00 00 00       	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d05f:	47                   	inc    edi
c000d060:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d065:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d069:	74 02                	je     c000d06d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d06b:	89 ee                	mov    esi,ebp
c000d06d:	83 ec 0c             	sub    esp,0xc
c000d070:	53                   	push   ebx
c000d071:	e8 fa 34 ff ff       	call   c0000570 <strlen>
c000d076:	83 c4 10             	add    esp,0x10
c000d079:	85 c0                	test   eax,eax
c000d07b:	74 06                	je     c000d083 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d07d:	46                   	inc    esi
c000d07e:	e9 40 ff ff ff       	jmp    c000cfc3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d083:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d08b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d093:	31 f6                	xor    esi,esi
c000d095:	50                   	push   eax
c000d096:	31 ff                	xor    edi,edi
c000d098:	6a 12                	push   0x12
c000d09a:	68 ee 00 00 00       	push   0xee
c000d09f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d0a6:	e8 45 34 ff ff       	call   c00004f0 <memset>
c000d0ab:	83 c4 10             	add    esp,0x10
c000d0ae:	83 fe 17             	cmp    esi,0x17
c000d0b1:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d0b5:	7e 26                	jle    c000d0dd <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d0b7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d0bb:	50                   	push   eax
c000d0bc:	6a 08                	push   0x8
c000d0be:	55                   	push   ebp
c000d0bf:	53                   	push   ebx
c000d0c0:	e8 2e fd ff ff       	call   c000cdf3 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d0c5:	83 c4 10             	add    esp,0x10
c000d0c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0cd:	74 26                	je     c000d0f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d0cf:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d0d6:	4e                   	dec    esi
c000d0d7:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d0da:	47                   	inc    edi
c000d0db:	eb 1c                	jmp    c000d0f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0dd:	6a 06                	push   0x6
c000d0df:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d0e4:	50                   	push   eax
c000d0e5:	55                   	push   ebp
c000d0e6:	53                   	push   ebx
c000d0e7:	e8 d7 fc ff ff       	call   c000cdc3 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	84 c0                	test   al,al
c000d0f1:	75 06                	jne    c000d0f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0f3:	eb c2                	jmp    c000d0b7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d0f5:	31 c0                	xor    eax,eax
c000d0f7:	eb 03                	jmp    c000d0fc <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d0f9:	46                   	inc    esi
c000d0fa:	eb b2                	jmp    c000d0ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d0fc:	83 c4 6c             	add    esp,0x6c
c000d0ff:	5b                   	pop    ebx
c000d100:	5e                   	pop    esi
c000d101:	5f                   	pop    edi
c000d102:	5d                   	pop    ebp
c000d103:	c3                   	ret    

c000d104 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d104:	53                   	push   ebx
c000d105:	83 ec 3c             	sub    esp,0x3c
c000d108:	6a 2b                	push   0x2b
c000d10a:	6a 00                	push   0x0
c000d10c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d110:	53                   	push   ebx
c000d111:	e8 da 33 ff ff       	call   c00004f0 <memset>
c000d116:	58                   	pop    eax
c000d117:	5a                   	pop    edx
c000d118:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d11c:	50                   	push   eax
c000d11d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d121:	e8 40 fe ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d126:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d12b:	83 c4 0c             	add    esp,0xc
c000d12e:	6a 15                	push   0x15
c000d130:	6a 00                	push   0x0
c000d132:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d136:	50                   	push   eax
c000d137:	e8 b4 33 ff ff       	call   c00004f0 <memset>
c000d13c:	53                   	push   ebx
c000d13d:	6a 00                	push   0x0
c000d13f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d143:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d147:	e8 e6 f9 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d14c:	83 c4 58             	add    esp,0x58
c000d14f:	5b                   	pop    ebx
c000d150:	c3                   	ret    

c000d151 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d151:	56                   	push   esi
c000d152:	53                   	push   ebx
c000d153:	83 ec 48             	sub    esp,0x48
c000d156:	6a 12                	push   0x12
c000d158:	68 ff 00 00 00       	push   0xff
c000d15d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d161:	56                   	push   esi
c000d162:	e8 89 33 ff ff       	call   c00004f0 <memset>
c000d167:	5a                   	pop    edx
c000d168:	59                   	pop    ecx
c000d169:	56                   	push   esi
c000d16a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d16e:	e8 f3 fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d173:	83 c4 10             	add    esp,0x10
c000d176:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d17a:	85 db                	test   ebx,ebx
c000d17c:	74 42                	je     c000d1c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d17e:	50                   	push   eax
c000d17f:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d183:	50                   	push   eax
c000d184:	53                   	push   ebx
c000d185:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d189:	e8 fa f6 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d18e:	83 c4 0c             	add    esp,0xc
c000d191:	6a 12                	push   0x12
c000d193:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d197:	50                   	push   eax
c000d198:	56                   	push   esi
c000d199:	e8 e2 31 ff ff       	call   c0000380 <memcmp>
c000d19e:	83 c4 10             	add    esp,0x10
c000d1a1:	85 c0                	test   eax,eax
c000d1a3:	74 1e                	je     c000d1c3 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d1a5:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d1aa:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d1af:	c1 e3 08             	shl    ebx,0x8
c000d1b2:	09 d8                	or     eax,ebx
c000d1b4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d1b9:	c1 e3 10             	shl    ebx,0x10
c000d1bc:	09 c3                	or     ebx,eax
c000d1be:	eb ba                	jmp    c000d17a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d1c0:	83 cb ff             	or     ebx,0xffffffff
c000d1c3:	89 d8                	mov    eax,ebx
c000d1c5:	83 c4 44             	add    esp,0x44
c000d1c8:	5b                   	pop    ebx
c000d1c9:	5e                   	pop    esi
c000d1ca:	c3                   	ret    

c000d1cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d1cb:	57                   	push   edi
c000d1cc:	56                   	push   esi
c000d1cd:	53                   	push   ebx
c000d1ce:	83 ec 34             	sub    esp,0x34
c000d1d1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d1d5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d1d9:	6a 2b                	push   0x2b
c000d1db:	6a 00                	push   0x0
c000d1dd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d1e1:	53                   	push   ebx
c000d1e2:	e8 09 33 ff ff       	call   c00004f0 <memset>
c000d1e7:	58                   	pop    eax
c000d1e8:	5a                   	pop    edx
c000d1e9:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1ed:	50                   	push   eax
c000d1ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1f2:	e8 6f fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1f7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d1fb:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d1ff:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d203:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d207:	53                   	push   ebx
c000d208:	6a 00                	push   0x0
c000d20a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d20e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d212:	e8 1b f9 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d217:	83 c4 50             	add    esp,0x50
c000d21a:	5b                   	pop    ebx
c000d21b:	5e                   	pop    esi
c000d21c:	5f                   	pop    edi
c000d21d:	c3                   	ret    

c000d21e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d21e:	55                   	push   ebp
c000d21f:	57                   	push   edi
c000d220:	56                   	push   esi
c000d221:	53                   	push   ebx
c000d222:	83 ec 40             	sub    esp,0x40
c000d225:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d229:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d22d:	6a 2b                	push   0x2b
c000d22f:	6a 00                	push   0x0
c000d231:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d235:	56                   	push   esi
c000d236:	e8 b5 32 ff ff       	call   c00004f0 <memset>
c000d23b:	5f                   	pop    edi
c000d23c:	89 ef                	mov    edi,ebp
c000d23e:	58                   	pop    eax
c000d23f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d243:	50                   	push   eax
c000d244:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d248:	e8 19 fd ff ff       	call   c000cf66 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d24d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d252:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d257:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d25c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d261:	83 c4 10             	add    esp,0x10
c000d264:	85 ed                	test   ebp,ebp
c000d266:	74 14                	je     c000d27c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d268:	51                   	push   ecx
c000d269:	51                   	push   ecx
c000d26a:	57                   	push   edi
c000d26b:	53                   	push   ebx
c000d26c:	e8 09 f7 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	85 c0                	test   eax,eax
c000d276:	74 04                	je     c000d27c <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d278:	89 c7                	mov    edi,eax
c000d27a:	eb e8                	jmp    c000d264 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d27c:	56                   	push   esi
c000d27d:	6a 00                	push   0x0
c000d27f:	57                   	push   edi
c000d280:	53                   	push   ebx
c000d281:	e8 ac f8 ff ff       	call   c000cb32 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d286:	83 c4 0c             	add    esp,0xc
c000d289:	89 c7                	mov    edi,eax
c000d28b:	56                   	push   esi
c000d28c:	50                   	push   eax
c000d28d:	53                   	push   ebx
c000d28e:	e8 f5 f5 ff ff       	call   c000c888 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d293:	58                   	pop    eax
c000d294:	5a                   	pop    edx
c000d295:	6a 6c                	push   0x6c
c000d297:	6a 00                	push   0x0
c000d299:	6a 00                	push   0x0
c000d29b:	68 ad 1d 02 c0       	push   0xc0021dad
c000d2a0:	57                   	push   edi
c000d2a1:	53                   	push   ebx
c000d2a2:	e8 24 ff ff ff       	call   c000d1cb <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d2a7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d2ab:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d2af:	c1 e8 10             	shr    eax,0x10
c000d2b2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d2b6:	83 c4 1c             	add    esp,0x1c
c000d2b9:	56                   	push   esi
c000d2ba:	57                   	push   edi
c000d2bb:	53                   	push   ebx
c000d2bc:	e8 eb f6 ff ff       	call   c000c9ac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d2c1:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d2c6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d2cb:	c1 e0 08             	shl    eax,0x8
c000d2ce:	09 c2                	or     edx,eax
c000d2d0:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d2d5:	83 c4 4c             	add    esp,0x4c
c000d2d8:	c1 e0 10             	shl    eax,0x10
c000d2db:	5b                   	pop    ebx
c000d2dc:	09 d0                	or     eax,edx
c000d2de:	5e                   	pop    esi
c000d2df:	5f                   	pop    edi
c000d2e0:	5d                   	pop    ebp
c000d2e1:	c3                   	ret    

c000d2e2 <zStrtok(char*, char const*)>:
c000d2e2:	55                   	push   ebp
c000d2e3:	57                   	push   edi
c000d2e4:	56                   	push   esi
c000d2e5:	53                   	push   ebx
c000d2e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2ee:	85 db                	test   ebx,ebx
c000d2f0:	74 2f                	je     c000d321 <zStrtok(char*, char const*)+0x3f>
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	75 09                	jne    c000d2ff <zStrtok(char*, char const*)+0x1d>
c000d2f6:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d2fb:	85 c0                	test   eax,eax
c000d2fd:	74 50                	je     c000d34f <zStrtok(char*, char const*)+0x6d>
c000d2ff:	31 c9                	xor    ecx,ecx
c000d301:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d305:	74 03                	je     c000d30a <zStrtok(char*, char const*)+0x28>
c000d307:	41                   	inc    ecx
c000d308:	eb f7                	jmp    c000d301 <zStrtok(char*, char const*)+0x1f>
c000d30a:	31 d2                	xor    edx,edx
c000d30c:	39 ca                	cmp    edx,ecx
c000d30e:	74 15                	je     c000d325 <zStrtok(char*, char const*)+0x43>
c000d310:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d314:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d317:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d31a:	39 ee                	cmp    esi,ebp
c000d31c:	74 13                	je     c000d331 <zStrtok(char*, char const*)+0x4f>
c000d31e:	42                   	inc    edx
c000d31f:	eb eb                	jmp    c000d30c <zStrtok(char*, char const*)+0x2a>
c000d321:	31 c0                	xor    eax,eax
c000d323:	eb 2a                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d325:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d32f:	eb 1e                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d331:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d334:	39 ce                	cmp    esi,ecx
c000d336:	75 0a                	jne    c000d342 <zStrtok(char*, char const*)+0x60>
c000d338:	40                   	inc    eax
c000d339:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d33e:	89 d8                	mov    eax,ebx
c000d340:	eb 0d                	jmp    c000d34f <zStrtok(char*, char const*)+0x6d>
c000d342:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d346:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d349:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d34f:	5b                   	pop    ebx
c000d350:	5e                   	pop    esi
c000d351:	5f                   	pop    edi
c000d352:	5d                   	pop    ebp
c000d353:	c3                   	ret    

c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d354:	57                   	push   edi
c000d355:	56                   	push   esi
c000d356:	53                   	push   ebx
c000d357:	81 ec 08 01 00 00    	sub    esp,0x108
c000d35d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d364:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d36b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d36f:	53                   	push   ebx
c000d370:	e8 cb 32 ff ff       	call   c0000640 <strcpy>
c000d375:	59                   	pop    ecx
c000d376:	5e                   	pop    esi
c000d377:	68 d4 2a 02 c0       	push   0xc0022ad4
c000d37c:	53                   	push   ebx
c000d37d:	bb 01 00 00 00       	mov    ebx,0x1
c000d382:	e8 5b ff ff ff       	call   c000d2e2 <zStrtok(char*, char const*)>
c000d387:	83 c4 10             	add    esp,0x10
c000d38a:	85 c0                	test   eax,eax
c000d38c:	74 3b                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d38e:	52                   	push   edx
c000d38f:	50                   	push   eax
c000d390:	6a 01                	push   0x1
c000d392:	57                   	push   edi
c000d393:	e8 b9 fd ff ff       	call   c000d151 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d398:	59                   	pop    ecx
c000d399:	89 c3                	mov    ebx,eax
c000d39b:	5e                   	pop    esi
c000d39c:	68 d4 2a 02 c0       	push   0xc0022ad4
c000d3a1:	6a 00                	push   0x0
c000d3a3:	e8 3a ff ff ff       	call   c000d2e2 <zStrtok(char*, char const*)>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	89 c6                	mov    esi,eax
c000d3ad:	85 c0                	test   eax,eax
c000d3af:	74 18                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3b1:	52                   	push   edx
c000d3b2:	52                   	push   edx
c000d3b3:	53                   	push   ebx
c000d3b4:	57                   	push   edi
c000d3b5:	e8 81 f5 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c000d3ba:	83 c4 10             	add    esp,0x10
c000d3bd:	89 c3                	mov    ebx,eax
c000d3bf:	83 f8 ff             	cmp    eax,0xffffffff
c000d3c2:	74 05                	je     c000d3c9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3c4:	50                   	push   eax
c000d3c5:	56                   	push   esi
c000d3c6:	53                   	push   ebx
c000d3c7:	eb c9                	jmp    c000d392 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d3c9:	81 c4 00 01 00 00    	add    esp,0x100
c000d3cf:	89 d8                	mov    eax,ebx
c000d3d1:	5b                   	pop    ebx
c000d3d2:	5e                   	pop    esi
c000d3d3:	5f                   	pop    edi
c000d3d4:	c3                   	ret    

c000d3d5 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d3d5:	55                   	push   ebp
c000d3d6:	57                   	push   edi
c000d3d7:	56                   	push   esi
c000d3d8:	53                   	push   ebx
c000d3d9:	83 ec 5c             	sub    esp,0x5c
c000d3dc:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d3e0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d3e4:	85 db                	test   ebx,ebx
c000d3e6:	0f 8e 84 00 00 00    	jle    c000d470 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d3ec:	31 ed                	xor    ebp,ebp
c000d3ee:	57                   	push   edi
c000d3ef:	6a 32                	push   0x32
c000d3f1:	6a 00                	push   0x0
c000d3f3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d3f7:	57                   	push   edi
c000d3f8:	e8 f3 30 ff ff       	call   c00004f0 <memset>
c000d3fd:	83 c4 0c             	add    esp,0xc
c000d400:	57                   	push   edi
c000d401:	53                   	push   ebx
c000d402:	56                   	push   esi
c000d403:	e8 30 fb ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d408:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d40c:	83 c4 10             	add    esp,0x10
c000d40f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d413:	7d 13                	jge    c000d428 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d415:	83 ec 0c             	sub    esp,0xc
c000d418:	45                   	inc    ebp
c000d419:	68 82 2f 02 c0       	push   0xc0022f82
c000d41e:	e8 41 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	eb e7                	jmp    c000d40f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d428:	51                   	push   ecx
c000d429:	57                   	push   edi
c000d42a:	53                   	push   ebx
c000d42b:	68 b3 1d 02 c0       	push   0xc0021db3
c000d430:	e8 2f 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d435:	83 c4 10             	add    esp,0x10
c000d438:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d43d:	75 1e                	jne    c000d45d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d43f:	52                   	push   edx
c000d440:	52                   	push   edx
c000d441:	53                   	push   ebx
c000d442:	56                   	push   esi
c000d443:	e8 f3 f4 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c000d448:	83 c4 0c             	add    esp,0xc
c000d44b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d44f:	8d 51 04             	lea    edx,[ecx+0x4]
c000d452:	52                   	push   edx
c000d453:	50                   	push   eax
c000d454:	56                   	push   esi
c000d455:	e8 7b ff ff ff       	call   c000d3d5 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	50                   	push   eax
c000d45e:	50                   	push   eax
c000d45f:	53                   	push   ebx
c000d460:	56                   	push   esi
c000d461:	e8 14 f5 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	89 c3                	mov    ebx,eax
c000d46b:	e9 74 ff ff ff       	jmp    c000d3e4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d470:	83 c4 5c             	add    esp,0x5c
c000d473:	5b                   	pop    ebx
c000d474:	5e                   	pop    esi
c000d475:	5f                   	pop    edi
c000d476:	5d                   	pop    ebp
c000d477:	c3                   	ret    

c000d478 <CmSplitFinalSlashInPlace(char*)>:
c000d478:	53                   	push   ebx
c000d479:	83 ec 14             	sub    esp,0x14
c000d47c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d480:	53                   	push   ebx
c000d481:	e8 ea 30 ff ff       	call   c0000570 <strlen>
c000d486:	83 c4 10             	add    esp,0x10
c000d489:	48                   	dec    eax
c000d48a:	85 c0                	test   eax,eax
c000d48c:	74 15                	je     c000d4a3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d48e:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d491:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d495:	75 09                	jne    c000d4a0 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d497:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d49a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d49e:	eb 05                	jmp    c000d4a5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d4a0:	48                   	dec    eax
c000d4a1:	eb e7                	jmp    c000d48a <CmSplitFinalSlashInPlace(char*)+0x12>
c000d4a3:	31 c0                	xor    eax,eax
c000d4a5:	83 c4 08             	add    esp,0x8
c000d4a8:	5b                   	pop    ebx
c000d4a9:	c3                   	ret    
c000d4aa:	66 90                	xchg   ax,ax

c000d4ac <Krnl::handlePowerButton()>:
c000d4ac:	83 ec 0c             	sub    esp,0xc
c000d4af:	e8 29 21 00 00       	call   c000f5dd <KeHandlePowerButton()>
c000d4b4:	90                   	nop
c000d4b5:	83 c4 0c             	add    esp,0xc
c000d4b8:	c3                   	ret    
c000d4b9:	8d 76 00             	lea    esi,[esi+0x0]

c000d4bc <Krnl::handleSleepButton()>:
c000d4bc:	83 ec 0c             	sub    esp,0xc
c000d4bf:	e8 31 21 00 00       	call   c000f5f5 <KeHandleSleepButton()>
c000d4c4:	90                   	nop
c000d4c5:	83 c4 0c             	add    esp,0xc
c000d4c8:	c3                   	ret    
c000d4c9:	90                   	nop

c000d4ca <Computer::close(int, int, void*)>:
c000d4ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d4cf:	c3                   	ret    

c000d4d0 <Computer::open(int, int, void*)>:
c000d4d0:	56                   	push   esi
c000d4d1:	53                   	push   ebx
c000d4d2:	83 ec 04             	sub    esp,0x4
c000d4d5:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d4dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4e0:	0f 94 05 20 42 02 c0 	sete   BYTE PTR ds:0xc0024220
c000d4e7:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d4ed:	74 10                	je     c000d4ff <Computer::open(int, int, void*)+0x2f>
c000d4ef:	83 ec 0c             	sub    esp,0xc
c000d4f2:	68 c0 1d 02 c0       	push   0xc0021dc0
c000d4f7:	e8 c6 17 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	83 ec 0c             	sub    esp,0xc
c000d502:	68 78 1e 02 c0       	push   0xc0021e78
c000d507:	e8 34 f1 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d50c:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d513:	e8 63 14 00 00       	call   c000e97b <malloc>
c000d518:	89 04 24             	mov    DWORD PTR [esp],eax
c000d51b:	89 c6                	mov    esi,eax
c000d51d:	e8 6a e7 ff ff       	call   c000bc8c <ACPI::ACPI()>
c000d522:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d528:	58                   	pop    eax
c000d529:	5a                   	pop    edx
c000d52a:	56                   	push   esi
c000d52b:	53                   	push   ebx
c000d52c:	e8 11 bb ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d531:	c7 04 24 90 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e90
c000d538:	e8 03 f1 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d53d:	e8 ee a6 00 00       	call   c0017c30 <HalEnableNMI()>
c000d542:	e8 01 99 00 00       	call   c0016e48 <HalDetectFeatures()>
c000d547:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d54e:	e8 28 14 00 00       	call   c000e97b <malloc>
c000d553:	89 04 24             	mov    DWORD PTR [esp],eax
c000d556:	89 c6                	mov    esi,eax
c000d558:	e8 91 b1 00 00       	call   c00186ee <CPU::CPU()>
c000d55d:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d563:	59                   	pop    ecx
c000d564:	58                   	pop    eax
c000d565:	56                   	push   esi
c000d566:	53                   	push   ebx
c000d567:	e8 d6 ba ff ff       	call   c0009042 <Device::addChild(Device*)>
c000d56c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d570:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d576:	8b 10                	mov    edx,DWORD PTR [eax]
c000d578:	51                   	push   ecx
c000d579:	6a 00                	push   0x0
c000d57b:	6a 00                	push   0x0
c000d57d:	50                   	push   eax
c000d57e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d581:	83 c4 14             	add    esp,0x14
c000d584:	68 ec 1d 02 c0       	push   0xc0021dec
c000d589:	e8 b2 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d58e:	e8 b5 ad 00 00       	call   c0018348 <HalInitialiseCoprocessor()>
c000d593:	c7 04 24 aa 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eaa
c000d59a:	e8 a1 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d59f:	c7 04 24 b6 d5 00 c0 	mov    DWORD PTR [esp],0xc000d5b6
c000d5a6:	e8 d1 7d 00 00       	call   c001537c <setupMultitasking(void (*)())>
c000d5ab:	83 c4 14             	add    esp,0x14
c000d5ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5b3:	5b                   	pop    ebx
c000d5b4:	5e                   	pop    esi
c000d5b5:	c3                   	ret    

c000d5b6 <KeFirstTask()>:
c000d5b6:	53                   	push   ebx
c000d5b7:	83 ec 14             	sub    esp,0x14
c000d5ba:	fb                   	sti    
c000d5bb:	68 c5 1e 02 c0       	push   0xc0021ec5
c000d5c0:	e8 7b f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d5c5:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d5cc:	e8 aa 13 00 00       	call   c000e97b <malloc>
c000d5d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5d8:	89 c3                	mov    ebx,eax
c000d5da:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d5df:	50                   	push   eax
c000d5e0:	68 de 1e 02 c0       	push   0xc0021ede
c000d5e5:	6a 01                	push   0x1
c000d5e7:	53                   	push   ebx
c000d5e8:	e8 3b 7a 00 00       	call   c0015028 <Process::Process(bool, char const*, Process*, char**)>
c000d5ed:	83 c4 20             	add    esp,0x20
c000d5f0:	68 ff 00 00 00       	push   0xff
c000d5f5:	6a 00                	push   0x0
c000d5f7:	68 a5 e2 00 c0       	push   0xc000e2a5
c000d5fc:	53                   	push   ebx
c000d5fd:	e8 4e 7c 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c000d602:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d608:	6a 7a                	push   0x7a
c000d60a:	6a 00                	push   0x0
c000d60c:	68 38 5b 01 c0       	push   0xc0015b38
c000d611:	52                   	push   edx
c000d612:	e8 39 7c 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c000d617:	83 c4 14             	add    esp,0x14
c000d61a:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d61f:	68 10 1e 02 c0       	push   0xc0021e10
c000d624:	e8 17 f0 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d629:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d630:	e8 cc 20 00 00       	call   c000f701 <KeInitRand()>
c000d635:	e8 cc 88 00 00       	call   c0015f06 <Vm::initialise8086()>
c000d63a:	e8 b1 a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d63f:	c7 04 24 94 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b94
c000d646:	e8 f5 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d64b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d650:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d656:	8b 10                	mov    edx,DWORD PTR [eax]
c000d658:	6a 00                	push   0x0
c000d65a:	6a 00                	push   0x0
c000d65c:	6a 00                	push   0x0
c000d65e:	50                   	push   eax
c000d65f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d662:	83 c4 14             	add    esp,0x14
c000d665:	68 10 1e 02 c0       	push   0xc0021e10
c000d66a:	e8 d1 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d66f:	e8 61 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d674:	e8 f5 05 00 00       	call   c000dc6e <KeLoadSystemEnv()>
c000d679:	e8 8f 1f 00 00       	call   c000f60d <KeSetupPowerManager()>
c000d67e:	c7 04 24 34 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e34
c000d685:	e8 b6 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d68a:	59                   	pop    ecx
c000d68b:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d690:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d696:	53                   	push   ebx
c000d697:	e8 c2 ba ff ff       	call   c000915e <Device::loadDriversForAll()>
c000d69c:	c7 04 24 eb 1e 02 c0 	mov    DWORD PTR [esp],0xc0021eeb
c000d6a3:	e8 98 ef ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c000d6a8:	58                   	pop    eax
c000d6a9:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d6af:	5a                   	pop    edx
c000d6b0:	6a 01                	push   0x1
c000d6b2:	68 fc 1e 02 c0       	push   0xc0021efc
c000d6b7:	e8 00 73 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c000d6bc:	59                   	pop    ecx
c000d6bd:	5a                   	pop    edx
c000d6be:	53                   	push   ebx
c000d6bf:	50                   	push   eax
c000d6c0:	e8 49 75 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	6a 02                	push   0x2
c000d6cd:	e8 8e 7e 00 00       	call   c0015560 <blockTask(TaskState)>
c000d6d2:	83 c4 10             	add    esp,0x10
c000d6d5:	eb f1                	jmp    c000d6c8 <KeFirstTask()+0x112>
c000d6d7:	90                   	nop

c000d6d8 <Computer::Computer()>:
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6df:	83 ec 08             	sub    esp,0x8
c000d6e2:	68 18 1f 02 c0       	push   0xc0021f18
c000d6e7:	50                   	push   eax
c000d6e8:	e8 b7 ba ff ff       	call   c00091a4 <Device::Device(char const*)>
c000d6ed:	83 c4 10             	add    esp,0x10
c000d6f0:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c000d6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f9:	89 10                	mov    DWORD PTR [eax],edx
c000d6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ff:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d717:	90                   	nop
c000d718:	83 c4 0c             	add    esp,0xc
c000d71b:	c3                   	ret    

c000d71c <KePrepareShutdown()>:
c000d71c:	83 ec 0c             	sub    esp,0xc
c000d71f:	e8 8a ee ff ff       	call   c000c5ae <KeExecuteAtexit()>
c000d724:	83 ec 0c             	sub    esp,0xc
c000d727:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d72c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d732:	50                   	push   eax
c000d733:	e8 72 bb ff ff       	call   c00092aa <Device::closeAll()>
c000d738:	83 c4 1c             	add    esp,0x1c
c000d73b:	c3                   	ret    

c000d73c <KeShutdown()>:
c000d73c:	83 ec 0c             	sub    esp,0xc
c000d73f:	e8 d8 ff ff ff       	call   c000d71c <KePrepareShutdown()>
c000d744:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d749:	85 c0                	test   eax,eax
c000d74b:	74 02                	je     c000d74f <KeShutdown()+0x13>
c000d74d:	ff d0                	call   eax
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	68 54 1e 02 c0       	push   0xc0021e54
c000d757:	e8 66 15 00 00       	call   c000ecc2 <KePanic(char const*)>
c000d75c:	83 c4 1c             	add    esp,0x1c
c000d75f:	c3                   	ret    

c000d760 <KeSleep()>:
c000d760:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d765:	85 c0                	test   eax,eax
c000d767:	74 02                	je     c000d76b <KeSleep()+0xb>
c000d769:	ff e0                	jmp    eax
c000d76b:	c3                   	ret    

c000d76c <KeRestart()>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	e8 a8 ff ff ff       	call   c000d71c <KePrepareShutdown()>
c000d774:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d779:	85 c0                	test   eax,eax
c000d77b:	74 02                	je     c000d77f <KeRestart()+0x13>
c000d77d:	ff d0                	call   eax
c000d77f:	e4 64                	in     al,0x64
c000d781:	a8 02                	test   al,0x2
c000d783:	75 fa                	jne    c000d77f <KeRestart()+0x13>
c000d785:	b0 fe                	mov    al,0xfe
c000d787:	e6 64                	out    0x64,al
c000d789:	83 c4 0c             	add    esp,0xc
c000d78c:	c3                   	ret    

c000d78d <KeCalculateCRC32(unsigned char*, int)>:
c000d78d:	53                   	push   ebx
c000d78e:	83 c8 ff             	or     eax,0xffffffff
c000d791:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d795:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d799:	01 cb                	add    ebx,ecx
c000d79b:	39 d9                	cmp    ecx,ebx
c000d79d:	74 15                	je     c000d7b4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d79f:	41                   	inc    ecx
c000d7a0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d7a3:	31 c2                	xor    edx,eax
c000d7a5:	c1 e8 08             	shr    eax,0x8
c000d7a8:	0f b6 d2             	movzx  edx,dl
c000d7ab:	33 04 95 40 3c 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc3c0]
c000d7b2:	eb e7                	jmp    c000d79b <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d7b4:	f7 d0                	not    eax
c000d7b6:	5b                   	pop    ebx
c000d7b7:	c3                   	ret    

c000d7b8 <EnvVarContainer::getEnv(char const*)>:
c000d7b8:	57                   	push   edi
c000d7b9:	56                   	push   esi
c000d7ba:	53                   	push   ebx
c000d7bb:	31 db                	xor    ebx,ebx
c000d7bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7c1:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d7c3:	7e 2b                	jle    c000d7f0 <EnvVarContainer::getEnv(char const*)+0x38>
c000d7c5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d7cc:	50                   	push   eax
c000d7cd:	50                   	push   eax
c000d7ce:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7d1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d7d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d7d8:	e8 73 2f ff ff       	call   c0000750 <strcmp>
c000d7dd:	83 c4 10             	add    esp,0x10
c000d7e0:	85 c0                	test   eax,eax
c000d7e2:	75 09                	jne    c000d7ed <EnvVarContainer::getEnv(char const*)+0x35>
c000d7e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7e7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d7eb:	eb 05                	jmp    c000d7f2 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d7ed:	43                   	inc    ebx
c000d7ee:	eb d1                	jmp    c000d7c1 <EnvVarContainer::getEnv(char const*)+0x9>
c000d7f0:	31 c0                	xor    eax,eax
c000d7f2:	5b                   	pop    ebx
c000d7f3:	5e                   	pop    esi
c000d7f4:	5f                   	pop    edi
c000d7f5:	c3                   	ret    

c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d7f6:	55                   	push   ebp
c000d7f7:	57                   	push   edi
c000d7f8:	56                   	push   esi
c000d7f9:	53                   	push   ebx
c000d7fa:	83 ec 28             	sub    esp,0x28
c000d7fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d801:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d805:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d809:	56                   	push   esi
c000d80a:	e8 61 2d ff ff       	call   c0000570 <strlen>
c000d80f:	40                   	inc    eax
c000d810:	89 04 24             	mov    DWORD PTR [esp],eax
c000d813:	e8 63 11 00 00       	call   c000e97b <malloc>
c000d818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d81b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d81f:	e8 4c 2d ff ff       	call   c0000570 <strlen>
c000d824:	40                   	inc    eax
c000d825:	89 04 24             	mov    DWORD PTR [esp],eax
c000d828:	e8 4e 11 00 00       	call   c000e97b <malloc>
c000d82d:	89 34 24             	mov    DWORD PTR [esp],esi
c000d830:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d834:	e8 37 2d ff ff       	call   c0000570 <strlen>
c000d839:	83 c4 0c             	add    esp,0xc
c000d83c:	40                   	inc    eax
c000d83d:	50                   	push   eax
c000d83e:	6a 00                	push   0x0
c000d840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d844:	e8 a7 2c ff ff       	call   c00004f0 <memset>
c000d849:	89 34 24             	mov    DWORD PTR [esp],esi
c000d84c:	e8 1f 2d ff ff       	call   c0000570 <strlen>
c000d851:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d855:	8d 48 01             	lea    ecx,[eax+0x1]
c000d858:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d85a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d85d:	89 de                	mov    esi,ebx
c000d85f:	e8 0c 2d ff ff       	call   c0000570 <strlen>
c000d864:	83 c4 0c             	add    esp,0xc
c000d867:	40                   	inc    eax
c000d868:	50                   	push   eax
c000d869:	6a 00                	push   0x0
c000d86b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d86f:	e8 7c 2c ff ff       	call   c00004f0 <memset>
c000d874:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d877:	e8 f4 2c ff ff       	call   c0000570 <strlen>
c000d87c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d880:	8d 48 01             	lea    ecx,[eax+0x1]
c000d883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d885:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d888:	40                   	inc    eax
c000d889:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d88c:	c1 e0 03             	shl    eax,0x3
c000d88f:	5a                   	pop    edx
c000d890:	59                   	pop    ecx
c000d891:	50                   	push   eax
c000d892:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d895:	e8 cd 10 00 00       	call   c000e967 <realloc>
c000d89a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d89e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d8a1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d8a4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d8a8:	b9 08 00 00 00       	mov    ecx,0x8
c000d8ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8af:	83 c4 2c             	add    esp,0x2c
c000d8b2:	5b                   	pop    ebx
c000d8b3:	5e                   	pop    esi
c000d8b4:	5f                   	pop    edi
c000d8b5:	5d                   	pop    ebp
c000d8b6:	c3                   	ret    
c000d8b7:	90                   	nop

c000d8b8 <EnvVarContainer::deleteEnv(char const*)>:
c000d8b8:	c3                   	ret    
c000d8b9:	90                   	nop

c000d8ba <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d8ba:	55                   	push   ebp
c000d8bb:	57                   	push   edi
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	81 ec 38 01 00 00    	sub    esp,0x138
c000d8c4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d8cb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d8d2:	68 14 01 00 00       	push   0x114
c000d8d7:	e8 9f 10 00 00       	call   c000e97b <malloc>
c000d8dc:	83 c4 0c             	add    esp,0xc
c000d8df:	89 c3                	mov    ebx,eax
c000d8e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d8e4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d8eb:	50                   	push   eax
c000d8ec:	e8 21 a8 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000d8f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8f4:	e8 fb aa ff ff       	call   c00083f4 <File::exists()>
c000d8f9:	83 c4 10             	add    esp,0x10
c000d8fc:	84 c0                	test   al,al
c000d8fe:	75 31                	jne    c000d931 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d900:	50                   	push   eax
c000d901:	50                   	push   eax
c000d902:	6a 12                	push   0x12
c000d904:	53                   	push   ebx
c000d905:	e8 26 a8 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d90a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d90c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d90f:	89 34 24             	mov    DWORD PTR [esp],esi
c000d912:	e8 59 2c ff ff       	call   c0000570 <strlen>
c000d917:	5a                   	pop    edx
c000d918:	31 d2                	xor    edx,edx
c000d91a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d91e:	51                   	push   ecx
c000d91f:	56                   	push   esi
c000d920:	52                   	push   edx
c000d921:	50                   	push   eax
c000d922:	53                   	push   ebx
c000d923:	ff d7                	call   edi
c000d925:	83 c4 14             	add    esp,0x14
c000d928:	53                   	push   ebx
c000d929:	e8 60 a8 ff ff       	call   c000818e <File::close()>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	56                   	push   esi
c000d932:	31 f6                	xor    esi,esi
c000d934:	68 00 01 00 00       	push   0x100
c000d939:	6a 00                	push   0x0
c000d93b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d93f:	50                   	push   eax
c000d940:	e8 ab 2b ff ff       	call   c00004f0 <memset>
c000d945:	5f                   	pop    edi
c000d946:	58                   	pop    eax
c000d947:	6a 01                	push   0x1
c000d949:	53                   	push   ebx
c000d94a:	e8 e1 a7 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d94f:	83 c4 10             	add    esp,0x10
c000d952:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d95a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d962:	83 ec 0c             	sub    esp,0xc
c000d965:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d967:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d96b:	51                   	push   ecx
c000d96c:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d970:	52                   	push   edx
c000d971:	6a 00                	push   0x0
c000d973:	6a 01                	push   0x1
c000d975:	53                   	push   ebx
c000d976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d979:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d97e:	83 c4 20             	add    esp,0x20
c000d981:	89 c2                	mov    edx,eax
c000d983:	85 c0                	test   eax,eax
c000d985:	0f 84 36 01 00 00    	je     c000dac1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d98b:	83 f8 0d             	cmp    eax,0xd
c000d98e:	0f 84 22 01 00 00    	je     c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d994:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d999:	0f 84 f0 00 00 00    	je     c000da8f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d99f:	83 f8 0a             	cmp    eax,0xa
c000d9a2:	74 13                	je     c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9a4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9a9:	74 0c                	je     c000d9b7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9ab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9b1:	0f 8e f6 00 00 00    	jle    c000daad <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9bb:	83 ec 0c             	sub    esp,0xc
c000d9be:	8d 78 01             	lea    edi,[eax+0x1]
c000d9c1:	57                   	push   edi
c000d9c2:	e8 b4 0f 00 00       	call   c000e97b <malloc>
c000d9c7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d9cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9cf:	8d 56 04             	lea    edx,[esi+0x4]
c000d9d2:	89 14 24             	mov    DWORD PTR [esp],edx
c000d9d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d9:	e8 9d 0f 00 00       	call   c000e97b <malloc>
c000d9de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d9e2:	83 c4 0c             	add    esp,0xc
c000d9e5:	57                   	push   edi
c000d9e6:	6a 00                	push   0x0
c000d9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9ec:	e8 ff 2a ff ff       	call   c00004f0 <memset>
c000d9f1:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d9f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d9f9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da06:	52                   	push   edx
c000da07:	6a 00                	push   0x0
c000da09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da0d:	e8 de 2a ff ff       	call   c00004f0 <memset>
c000da12:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da16:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000da1a:	89 34 24             	mov    DWORD PTR [esp],esi
c000da1d:	e8 4e 2b ff ff       	call   c0000570 <strlen>
c000da22:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000da26:	89 c1                	mov    ecx,eax
c000da28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da2a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da2d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da30:	40                   	inc    eax
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da37:	85 d2                	test   edx,edx
c000da39:	75 0c                	jne    c000da47 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000da3b:	83 ec 0c             	sub    esp,0xc
c000da3e:	6a 08                	push   0x8
c000da40:	e8 36 0f 00 00       	call   c000e97b <malloc>
c000da45:	eb 0c                	jmp    c000da53 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da47:	c1 e0 03             	shl    eax,0x3
c000da4a:	51                   	push   ecx
c000da4b:	51                   	push   ecx
c000da4c:	50                   	push   eax
c000da4d:	52                   	push   edx
c000da4e:	e8 14 0f 00 00       	call   c000e967 <realloc>
c000da53:	83 c4 10             	add    esp,0x10
c000da56:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da59:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da5c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da5f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da63:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da67:	b9 08 00 00 00       	mov    ecx,0x8
c000da6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da6e:	31 f6                	xor    esi,esi
c000da70:	50                   	push   eax
c000da71:	68 00 01 00 00       	push   0x100
c000da76:	6a 00                	push   0x0
c000da78:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da7c:	50                   	push   eax
c000da7d:	e8 6e 2a ff ff       	call   c00004f0 <memset>
c000da82:	83 c4 10             	add    esp,0x10
c000da85:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da8d:	eb 27                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da8f:	83 f8 3d             	cmp    eax,0x3d
c000da92:	74 1e                	je     c000dab2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000da94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000da9a:	7f 07                	jg     c000daa3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da9c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000daa0:	46                   	inc    esi
c000daa1:	eb 13                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daa3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000daab:	eb 09                	jmp    c000dab6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daad:	83 f8 3d             	cmp    eax,0x3d
c000dab0:	75 ea                	jne    c000da9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dab2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dab6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dabb:	0f 85 99 fe ff ff    	jne    c000d95a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dac1:	83 ec 0c             	sub    esp,0xc
c000dac4:	53                   	push   ebx
c000dac5:	e8 c4 a6 ff ff       	call   c000818e <File::close()>
c000daca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dacc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dacf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad2:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dad8:	5b                   	pop    ebx
c000dad9:	5e                   	pop    esi
c000dada:	5f                   	pop    edi
c000dadb:	5d                   	pop    ebp
c000dadc:	c3                   	ret    
c000dadd:	90                   	nop

c000dade <EnvVarContainer::__loadSystem()>:
c000dade:	83 ec 10             	sub    esp,0x10
c000dae1:	68 40 40 02 c0       	push   0xc0024040
c000dae6:	68 50 1f 02 c0       	push   0xc0021f50
c000daeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daef:	e8 c6 fd ff ff       	call   c000d8ba <EnvVarContainer::loadFrom(char const*, char const*)>
c000daf4:	83 c4 1c             	add    esp,0x1c
c000daf7:	c3                   	ret    

c000daf8 <EnvVarContainer::__loadUser()>:
c000daf8:	c3                   	ret    
c000daf9:	90                   	nop

c000dafa <EnvVarContainer::EnvVarContainer(Process*)>:
c000dafa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dafe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db0c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db1a:	90                   	nop
c000db1b:	c3                   	ret    

c000db1c <EnvVarContainer::~EnvVarContainer()>:
c000db1c:	83 ec 0c             	sub    esp,0xc
c000db1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db26:	85 c0                	test   eax,eax
c000db28:	74 1d                	je     c000db47 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000db30:	85 c0                	test   eax,eax
c000db32:	74 13                	je     c000db47 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3b:	83 ec 0c             	sub    esp,0xc
c000db3e:	50                   	push   eax
c000db3f:	e8 47 0e 00 00       	call   c000e98b <free>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	90                   	nop
c000db48:	83 c4 0c             	add    esp,0xc
c000db4b:	c3                   	ret    

c000db4c <KeGetEnv(Process*, char const*)>:
c000db4c:	53                   	push   ebx
c000db4d:	83 ec 08             	sub    esp,0x8
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db58:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000db5e:	74 04                	je     c000db64 <KeGetEnv(Process*, char const*)+0x18>
c000db60:	85 c0                	test   eax,eax
c000db62:	75 0b                	jne    c000db6f <KeGetEnv(Process*, char const*)+0x23>
c000db64:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db69:	85 c0                	test   eax,eax
c000db6b:	75 19                	jne    c000db86 <KeGetEnv(Process*, char const*)+0x3a>
c000db6d:	eb 27                	jmp    c000db96 <KeGetEnv(Process*, char const*)+0x4a>
c000db6f:	52                   	push   edx
c000db70:	52                   	push   edx
c000db71:	53                   	push   ebx
c000db72:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db78:	e8 3b fc ff ff       	call   c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	85 c0                	test   eax,eax
c000db82:	75 28                	jne    c000dbac <KeGetEnv(Process*, char const*)+0x60>
c000db84:	eb de                	jmp    c000db64 <KeGetEnv(Process*, char const*)+0x18>
c000db86:	52                   	push   edx
c000db87:	52                   	push   edx
c000db88:	53                   	push   ebx
c000db89:	50                   	push   eax
c000db8a:	e8 29 fc ff ff       	call   c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000db8f:	83 c4 10             	add    esp,0x10
c000db92:	85 c0                	test   eax,eax
c000db94:	75 16                	jne    c000dbac <KeGetEnv(Process*, char const*)+0x60>
c000db96:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db9a:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000db9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dba3:	83 c4 08             	add    esp,0x8
c000dba6:	5b                   	pop    ebx
c000dba7:	e9 0c fc ff ff       	jmp    c000d7b8 <EnvVarContainer::getEnv(char const*)>
c000dbac:	83 c4 08             	add    esp,0x8
c000dbaf:	5b                   	pop    ebx
c000dbb0:	c3                   	ret    

c000dbb1 <KeSetEnvSystem(char const*, char const*)>:
c000dbb1:	83 ec 10             	sub    esp,0x10
c000dbb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbbc:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000dbc2:	e8 2f fc ff ff       	call   c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbc7:	83 c4 1c             	add    esp,0x1c
c000dbca:	c3                   	ret    

c000dbcb <KeSetEnvUser(char const*, char const*)>:
c000dbcb:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dbd0:	85 c0                	test   eax,eax
c000dbd2:	74 15                	je     c000dbe9 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dbd4:	83 ec 10             	sub    esp,0x10
c000dbd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbdf:	50                   	push   eax
c000dbe0:	e8 11 fc ff ff       	call   c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbe5:	83 c4 1c             	add    esp,0x1c
c000dbe8:	c3                   	ret    
c000dbe9:	c3                   	ret    

c000dbea <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dbea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dbf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbf8:	e9 f9 fb ff ff       	jmp    c000d7f6 <EnvVarContainer::setEnv(char const*, char const*)>

c000dbfd <KeDeleteEnvSystem(char const*)>:
c000dbfd:	c3                   	ret    

c000dbfe <KeDeleteEnvUser(char const*)>:
c000dbfe:	c3                   	ret    

c000dbff <KeDeleteEnvProcess(Process*, char const*)>:
c000dbff:	c3                   	ret    

c000dc00 <KeNewProcessEnv(Process*)>:
c000dc00:	83 ec 28             	sub    esp,0x28
c000dc03:	6a 0c                	push   0xc
c000dc05:	e8 71 0d 00 00       	call   c000e97b <malloc>
c000dc0a:	5a                   	pop    edx
c000dc0b:	59                   	pop    ecx
c000dc0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc10:	50                   	push   eax
c000dc11:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc15:	e8 e0 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc1e:	83 c4 2c             	add    esp,0x2c
c000dc21:	c3                   	ret    

c000dc22 <KeCopyProcessEnv(Process*, Process*)>:
c000dc22:	57                   	push   edi
c000dc23:	56                   	push   esi
c000dc24:	53                   	push   ebx
c000dc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dc32:	6a 0c                	push   0xc
c000dc34:	e8 42 0d 00 00       	call   c000e97b <malloc>
c000dc39:	89 c3                	mov    ebx,eax
c000dc3b:	58                   	pop    eax
c000dc3c:	5a                   	pop    edx
c000dc3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc41:	53                   	push   ebx
c000dc42:	e8 b3 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc47:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc49:	89 03                	mov    DWORD PTR [ebx],eax
c000dc4b:	c1 e0 03             	shl    eax,0x3
c000dc4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc51:	e8 25 0d 00 00       	call   c000e97b <malloc>
c000dc56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc59:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc5b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc5e:	c1 e1 03             	shl    ecx,0x3
c000dc61:	89 c7                	mov    edi,eax
c000dc63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 d8                	mov    eax,ebx
c000dc6a:	5b                   	pop    ebx
c000dc6b:	5e                   	pop    esi
c000dc6c:	5f                   	pop    edi
c000dc6d:	c3                   	ret    

c000dc6e <KeLoadSystemEnv()>:
c000dc6e:	53                   	push   ebx
c000dc6f:	83 ec 14             	sub    esp,0x14
c000dc72:	6a 0c                	push   0xc
c000dc74:	e8 02 0d 00 00       	call   c000e97b <malloc>
c000dc79:	89 c3                	mov    ebx,eax
c000dc7b:	58                   	pop    eax
c000dc7c:	5a                   	pop    edx
c000dc7d:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc83:	53                   	push   ebx
c000dc84:	e8 71 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dc89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc8c:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dc92:	e8 47 fe ff ff       	call   c000dade <EnvVarContainer::__loadSystem()>
c000dc97:	83 c4 18             	add    esp,0x18
c000dc9a:	5b                   	pop    ebx
c000dc9b:	c3                   	ret    

c000dc9c <KeLoadUserEnv()>:
c000dc9c:	53                   	push   ebx
c000dc9d:	83 ec 14             	sub    esp,0x14
c000dca0:	6a 0c                	push   0xc
c000dca2:	e8 d4 0c 00 00       	call   c000e97b <malloc>
c000dca7:	89 c3                	mov    ebx,eax
c000dca9:	58                   	pop    eax
c000dcaa:	5a                   	pop    edx
c000dcab:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dcb1:	53                   	push   ebx
c000dcb2:	e8 43 fe ff ff       	call   c000dafa <EnvVarContainer::EnvVarContainer(Process*)>
c000dcb7:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dcbd:	83 c4 18             	add    esp,0x18
c000dcc0:	5b                   	pop    ebx
c000dcc1:	c3                   	ret    

c000dcc2 <KeFlushEnv()>:
c000dcc2:	c3                   	ret    

c000dcc3 <KeGetProcessTotalEnvCount(Process*)>:
c000dcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcc7:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dccd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcd3:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dcd8:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcda:	03 01                	add    eax,DWORD PTR [ecx]
c000dcdc:	85 d2                	test   edx,edx
c000dcde:	74 02                	je     c000dce2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dce0:	03 02                	add    eax,DWORD PTR [edx]
c000dce2:	c3                   	ret    

c000dce3 <KeGetProcessEnvPair(Process*, int)>:
c000dce3:	57                   	push   edi
c000dce4:	56                   	push   esi
c000dce5:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dceb:	53                   	push   ebx
c000dcec:	85 f6                	test   esi,esi
c000dcee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcf6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd00:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd02:	75 16                	jne    c000dd1a <KeGetProcessEnvPair(Process*, int)+0x37>
c000dd04:	39 c2                	cmp    edx,eax
c000dd06:	7c 16                	jl     c000dd1e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd08:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dd0e:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd10:	01 c6                	add    esi,eax
c000dd12:	39 d6                	cmp    esi,edx
c000dd14:	7e 3c                	jle    c000dd52 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd16:	29 c2                	sub    edx,eax
c000dd18:	eb 04                	jmp    c000dd1e <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd1a:	39 c2                	cmp    edx,eax
c000dd1c:	7d 05                	jge    c000dd23 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dd1e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dd21:	eb 20                	jmp    c000dd43 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dd23:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dd25:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dd28:	39 d1                	cmp    ecx,edx
c000dd2a:	7e 04                	jle    c000dd30 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dd2c:	29 c2                	sub    edx,eax
c000dd2e:	eb 10                	jmp    c000dd40 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dd30:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dd36:	03 0e                	add    ecx,DWORD PTR [esi]
c000dd38:	39 d1                	cmp    ecx,edx
c000dd3a:	7e 16                	jle    c000dd52 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd3c:	29 c2                	sub    edx,eax
c000dd3e:	29 fa                	sub    edx,edi
c000dd40:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd43:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd46:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd48:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd4b:	89 03                	mov    DWORD PTR [ebx],eax
c000dd4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dd50:	eb 1d                	jmp    c000dd6f <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dd52:	83 ec 0c             	sub    esp,0xc
c000dd55:	68 72 1f 02 c0       	push   0xc0021f72
c000dd5a:	e8 63 0f 00 00       	call   c000ecc2 <KePanic(char const*)>
c000dd5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd6c:	83 c4 10             	add    esp,0x10
c000dd6f:	89 d8                	mov    eax,ebx
c000dd71:	5b                   	pop    ebx
c000dd72:	5e                   	pop    esi
c000dd73:	5f                   	pop    edi
c000dd74:	c2 04 00             	ret    0x4
c000dd77:	90                   	nop

c000dd78 <KeSetupInterrupts()>:
c000dd78:	83 ec 10             	sub    esp,0x10
c000dd7b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd83:	90                   	nop
c000dd84:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd8c:	7f 5a                	jg     c000dde8 <KeSetupInterrupts()+0x70>
c000dd8e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd96:	66 90                	xchg   ax,ax
c000dd98:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd9d:	7f 41                	jg     c000dde0 <KeSetupInterrupts()+0x68>
c000dd9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dda3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddae:	01 d0                	add    eax,edx
c000ddb0:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000ddbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddca:	01 d0                	add    eax,edx
c000ddcc:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000ddd7:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dddc:	eb ba                	jmp    c000dd98 <KeSetupInterrupts()+0x20>
c000ddde:	66 90                	xchg   ax,ax
c000dde0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dde5:	eb 9d                	jmp    c000dd84 <KeSetupInterrupts()+0xc>
c000dde7:	90                   	nop
c000dde8:	90                   	nop
c000dde9:	83 c4 10             	add    esp,0x10
c000ddec:	c3                   	ret    
c000dded:	8d 76 00             	lea    esi,[esi+0x0]

c000ddf0 <int_handler>:
c000ddf0:	83 ec 2c             	sub    esp,0x2c
c000ddf3:	90                   	nop
c000ddf4:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000ddf9:	0f b6 c0             	movzx  eax,al
c000ddfc:	85 c0                	test   eax,eax
c000ddfe:	74 04                	je     c000de04 <int_handler+0x14>
c000de00:	fa                   	cli    
c000de01:	f4                   	hlt    
c000de02:	eb f0                	jmp    c000ddf4 <int_handler+0x4>
c000de04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de08:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de0f:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000de14:	7e 1a                	jle    c000de30 <int_handler+0x40>
c000de16:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000de1b:	7f 13                	jg     c000de30 <int_handler+0x40>
c000de1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de21:	83 e8 20             	sub    eax,0x20
c000de24:	83 ec 0c             	sub    esp,0xc
c000de27:	50                   	push   eax
c000de28:	e8 92 a8 00 00       	call   c00186bf <HalEndOfInterrupt(int)>
c000de2d:	83 c4 10             	add    esp,0x10
c000de30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de34:	c1 e0 04             	shl    eax,0x4
c000de37:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000de3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de44:	c1 e0 04             	shl    eax,0x4
c000de47:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000de4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de50:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de58:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de5d:	0f 8f ad 00 00 00    	jg     c000df10 <int_handler+0x120>
c000de63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de72:	01 d0                	add    eax,edx
c000de74:	8b 00                	mov    eax,DWORD PTR [eax]
c000de76:	85 c0                	test   eax,eax
c000de78:	0f 84 86 00 00 00    	je     c000df04 <int_handler+0x114>
c000de7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de82:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de85:	83 f8 60             	cmp    eax,0x60
c000de88:	75 46                	jne    c000ded0 <int_handler+0xe0>
c000de8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de8e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de99:	01 d0                	add    eax,edx
c000de9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dea1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000dea8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deac:	01 ca                	add    edx,ecx
c000deae:	8b 12                	mov    edx,DWORD PTR [edx]
c000deb0:	83 ec 08             	sub    esp,0x8
c000deb3:	52                   	push   edx
c000deb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000deb8:	ff d0                	call   eax
c000deba:	83 c4 10             	add    esp,0x10
c000debd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dec9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000decd:	eb 4d                	jmp    c000df1c <int_handler+0x12c>
c000decf:	90                   	nop
c000ded0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ded4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dedb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dedf:	01 d0                	add    eax,edx
c000dee1:	8b 00                	mov    eax,DWORD PTR [eax]
c000dee3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dee7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000deee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000def2:	01 ca                	add    edx,ecx
c000def4:	8b 12                	mov    edx,DWORD PTR [edx]
c000def6:	83 ec 08             	sub    esp,0x8
c000def9:	52                   	push   edx
c000defa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000defe:	ff d0                	call   eax
c000df00:	83 c4 10             	add    esp,0x10
c000df03:	90                   	nop
c000df04:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000df09:	e9 4a ff ff ff       	jmp    c000de58 <int_handler+0x68>
c000df0e:	66 90                	xchg   ax,ax
c000df10:	b8 00 00 00 00       	mov    eax,0x0
c000df15:	ba 00 00 00 00       	mov    edx,0x0
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	83 c4 2c             	add    esp,0x2c
c000df1f:	c3                   	ret    

c000df20 <KeDisplayProgramFault(char const*)>:
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	83 ec 0c             	sub    esp,0xc
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 35 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df37:	8b 00                	mov    eax,DWORD PTR [eax]
c000df39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df42:	85 c0                	test   eax,eax
c000df44:	74 22                	je     c000df68 <KeDisplayProgramFault(char const*)+0x48>
c000df46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df56:	6a 04                	push   0x4
c000df58:	6a 0f                	push   0xf
c000df5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df5e:	50                   	push   eax
c000df5f:	e8 54 35 00 00       	call   c00114b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df64:	83 c4 10             	add    esp,0x10
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	83 c4 0c             	add    esp,0xc
c000df6c:	c3                   	ret    
c000df6d:	8d 76 00             	lea    esi,[esi+0x0]

c000df70 <KeGeneralProtectionFault(void*, void*)>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	83 ec 08             	sub    esp,0x8
c000df76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df7e:	e8 5c 9d 00 00       	call   c0017cdf <HalHandleGeneralProtectionFault(void*, void*)>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	0f b6 c0             	movzx  eax,al
c000df89:	85 c0                	test   eax,eax
c000df8b:	75 2f                	jne    c000dfbc <KeGeneralProtectionFault(void*, void*)+0x4c>
c000df8d:	83 ec 0c             	sub    esp,0xc
c000df90:	68 8c 1f 02 c0       	push   0xc0021f8c
c000df95:	e8 86 ff ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000df9a:	83 c4 10             	add    esp,0x10
c000df9d:	83 ec 0c             	sub    esp,0xc
c000dfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa4:	e8 52 9e 00 00       	call   c0017dfb <HalDisplayDebugInfo(void*)>
c000dfa9:	83 c4 10             	add    esp,0x10
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	6a 00                	push   0x0
c000dfb1:	e8 aa 7d 00 00       	call   c0015d60 <Thr::terminateFromIRQ(int)>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	eb 05                	jmp    c000dfc0 <KeGeneralProtectionFault(void*, void*)+0x50>
c000dfbb:	90                   	nop
c000dfbc:	90                   	nop
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	83 c4 0c             	add    esp,0xc
c000dfc3:	c3                   	ret    

c000dfc4 <KePageFault(void*, void*)>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	83 ec 08             	sub    esp,0x8
c000dfca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	e8 b3 9d 00 00       	call   c0017d8a <HalHandlePageFault(void*, void*)>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	0f b6 c0             	movzx  eax,al
c000dfdd:	85 c0                	test   eax,eax
c000dfdf:	75 2f                	jne    c000e010 <KePageFault(void*, void*)+0x4c>
c000dfe1:	83 ec 0c             	sub    esp,0xc
c000dfe4:	68 a5 1f 02 c0       	push   0xc0021fa5
c000dfe9:	e8 32 ff ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000dfee:	83 c4 10             	add    esp,0x10
c000dff1:	83 ec 0c             	sub    esp,0xc
c000dff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff8:	e8 fe 9d 00 00       	call   c0017dfb <HalDisplayDebugInfo(void*)>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	83 ec 0c             	sub    esp,0xc
c000e003:	6a 00                	push   0x0
c000e005:	e8 56 7d 00 00       	call   c0015d60 <Thr::terminateFromIRQ(int)>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	eb 05                	jmp    c000e014 <KePageFault(void*, void*)+0x50>
c000e00f:	90                   	nop
c000e010:	90                   	nop
c000e011:	8d 76 00             	lea    esi,[esi+0x0]
c000e014:	83 c4 0c             	add    esp,0xc
c000e017:	c3                   	ret    

c000e018 <KeNonMaskableInterrupt(void*, void*)>:
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	e8 69 a1 00 00       	call   c0018189 <HalReceivedNMI()>
c000e020:	90                   	nop
c000e021:	83 c4 0c             	add    esp,0xc
c000e024:	c3                   	ret    
c000e025:	8d 76 00             	lea    esi,[esi+0x0]

c000e028 <KeOtherFault(void*, void*)>:
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	83 ec 0c             	sub    esp,0xc
c000e02e:	68 b0 1f 02 c0       	push   0xc0021fb0
c000e033:	e8 e8 fe ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	83 ec 0c             	sub    esp,0xc
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 b4 9d 00 00       	call   c0017dfb <HalDisplayDebugInfo(void*)>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	83 ec 0c             	sub    esp,0xc
c000e04d:	6a 00                	push   0x0
c000e04f:	e8 0c 7d 00 00       	call   c0015d60 <Thr::terminateFromIRQ(int)>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	90                   	nop
c000e058:	83 c4 0c             	add    esp,0xc
c000e05b:	c3                   	ret    

c000e05c <KeOpcodeFault(void*, void*)>:
c000e05c:	55                   	push   ebp
c000e05d:	89 e5                	mov    ebp,esp
c000e05f:	83 ec 08             	sub    esp,0x8
c000e062:	83 ec 08             	sub    esp,0x8
c000e065:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e068:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e06b:	e8 49 9d 00 00       	call   c0017db9 <HalHandleOpcodeFault(void*, void*)>
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	0f b6 c0             	movzx  eax,al
c000e076:	85 c0                	test   eax,eax
c000e078:	75 2e                	jne    c000e0a8 <KeOpcodeFault(void*, void*)+0x4c>
c000e07a:	83 ec 0c             	sub    esp,0xc
c000e07d:	68 d8 1f 02 c0       	push   0xc0021fd8
c000e082:	e8 99 fe ff ff       	call   c000df20 <KeDisplayProgramFault(char const*)>
c000e087:	83 c4 10             	add    esp,0x10
c000e08a:	83 ec 0c             	sub    esp,0xc
c000e08d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e090:	e8 66 9d 00 00       	call   c0017dfb <HalDisplayDebugInfo(void*)>
c000e095:	83 c4 10             	add    esp,0x10
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	6a 00                	push   0x0
c000e09d:	e8 be 7c 00 00       	call   c0015d60 <Thr::terminateFromIRQ(int)>
c000e0a2:	83 c4 10             	add    esp,0x10
c000e0a5:	eb 05                	jmp    c000e0ac <KeOpcodeFault(void*, void*)+0x50>
c000e0a7:	90                   	nop
c000e0a8:	90                   	nop
c000e0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e0ac:	c9                   	leave  
c000e0ad:	c3                   	ret    
c000e0ae:	66 90                	xchg   ax,ax

c000e0b0 <KeDoubleFault(void*, void*)>:
c000e0b0:	55                   	push   ebp
c000e0b1:	89 e5                	mov    ebp,esp
c000e0b3:	83 ec 08             	sub    esp,0x8
c000e0b6:	83 ec 0c             	sub    esp,0xc
c000e0b9:	68 e5 1f 02 c0       	push   0xc0021fe5
c000e0be:	e8 ff 0b 00 00       	call   c000ecc2 <KePanic(char const*)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	90                   	nop
c000e0c7:	c9                   	leave  
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop

c000e0ca <GDTEntry::setBase(unsigned int)>:
c000e0ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0d2:	89 c1                	mov    ecx,eax
c000e0d4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e0d8:	c1 e9 10             	shr    ecx,0x10
c000e0db:	c1 e8 18             	shr    eax,0x18
c000e0de:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e0e1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e0e4:	c3                   	ret    
c000e0e5:	90                   	nop

c000e0e6 <GDTEntry::setLimit(unsigned int)>:
c000e0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0ee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e0f1:	66 89 01             	mov    WORD PTR [ecx],ax
c000e0f4:	83 e2 f0             	and    edx,0xfffffff0
c000e0f7:	c1 e8 10             	shr    eax,0x10
c000e0fa:	83 e0 0f             	and    eax,0xf
c000e0fd:	09 d0                	or     eax,edx
c000e0ff:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e102:	c3                   	ret    
c000e103:	90                   	nop

c000e104 <GDT::GDT()>:
c000e104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e118:	90                   	nop
c000e119:	c3                   	ret    

c000e11a <GDT::addEntry(GDTEntry)>:
c000e11a:	53                   	push   ebx
c000e11b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e11f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e123:	8b 02                	mov    eax,DWORD PTR [edx]
c000e125:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e129:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e12d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e131:	8d 48 01             	lea    ecx,[eax+0x1]
c000e134:	c1 e0 03             	shl    eax,0x3
c000e137:	89 0a                	mov    DWORD PTR [edx],ecx
c000e139:	5b                   	pop    ebx
c000e13a:	c3                   	ret    
c000e13b:	90                   	nop

c000e13c <GDT::getNumberOfEntries()>:
c000e13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e140:	8b 00                	mov    eax,DWORD PTR [eax]
c000e142:	c3                   	ret    
c000e143:	90                   	nop

c000e144 <GDT::flush()>:
c000e144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e148:	8b 10                	mov    edx,DWORD PTR [eax]
c000e14a:	83 c0 04             	add    eax,0x4
c000e14d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e154:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e159:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e160:	e9 f5 21 ff ff       	jmp    c000035a <loadGDT>
c000e165:	90                   	nop

c000e166 <GDT::setup()>:
c000e166:	57                   	push   edi
c000e167:	56                   	push   esi
c000e168:	53                   	push   ebx
c000e169:	83 ec 30             	sub    esp,0x30
c000e16c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e170:	6a 00                	push   0x0
c000e172:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e176:	56                   	push   esi
c000e177:	e8 4e ff ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e17c:	6a 00                	push   0x0
c000e17e:	56                   	push   esi
c000e17f:	e8 62 ff ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c000e184:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e18c:	6a 00                	push   0x0
c000e18e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e192:	56                   	push   esi
c000e193:	e8 32 ff ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e198:	68 ff ff ff 00       	push   0xffffff
c000e19d:	56                   	push   esi
c000e19e:	e8 43 ff ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c000e1a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e1a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e1af:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e1b3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e1b8:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1c1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1c5:	89 f8                	mov    eax,edi
c000e1c7:	89 fa                	mov    edx,edi
c000e1c9:	80 e4 f7             	and    ah,0xf7
c000e1cc:	80 ce 60             	or     dh,0x60
c000e1cf:	89 c7                	mov    edi,eax
c000e1d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1d5:	80 cc 60             	or     ah,0x60
c000e1d8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e1dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e1e0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e1e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1e8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1ec:	83 c4 20             	add    esp,0x20
c000e1ef:	6a 00                	push   0x0
c000e1f1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e1f5:	50                   	push   eax
c000e1f6:	e8 cf fe ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e1fb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e1ff:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e203:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e207:	83 e0 3f             	and    eax,0x3f
c000e20a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e20e:	6a 00                	push   0x0
c000e210:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e214:	50                   	push   eax
c000e215:	e8 b0 fe ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c000e21a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e21e:	83 e0 3f             	and    eax,0x3f
c000e221:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e225:	83 c4 0c             	add    esp,0xc
c000e228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e22c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e230:	53                   	push   ebx
c000e231:	e8 e4 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e236:	83 c4 0c             	add    esp,0xc
c000e239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e23d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e241:	53                   	push   ebx
c000e242:	e8 d3 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e247:	83 c4 0c             	add    esp,0xc
c000e24a:	57                   	push   edi
c000e24b:	56                   	push   esi
c000e24c:	53                   	push   ebx
c000e24d:	e8 c8 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e252:	83 c4 0c             	add    esp,0xc
c000e255:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e259:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e25d:	53                   	push   ebx
c000e25e:	e8 b7 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e263:	83 c4 0c             	add    esp,0xc
c000e266:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e26a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e26e:	53                   	push   ebx
c000e26f:	e8 a6 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e274:	83 c4 0c             	add    esp,0xc
c000e277:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e27b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e27f:	53                   	push   ebx
c000e280:	e8 95 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e285:	83 c4 0c             	add    esp,0xc
c000e288:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e28c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e290:	53                   	push   ebx
c000e291:	e8 84 fe ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c000e296:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e299:	e8 a6 fe ff ff       	call   c000e144 <GDT::flush()>
c000e29e:	83 c4 40             	add    esp,0x40
c000e2a1:	5b                   	pop    ebx
c000e2a2:	5e                   	pop    esi
c000e2a3:	5f                   	pop    edi
c000e2a4:	c3                   	ret    

c000e2a5 <idleFunction(void*)>:
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e2af:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e2b6:	75 01                	jne    c000e2b9 <idleFunction(void*)+0x14>
c000e2b8:	fb                   	sti    
c000e2b9:	e8 66 9f 00 00       	call   c0018224 <HalSystemIdle()>
c000e2be:	e8 13 1f 01 00       	call   c00201d6 <idleCommon()>
c000e2c3:	eb f4                	jmp    c000e2b9 <idleFunction(void*)+0x14>
c000e2c5:	66 90                	xchg   ax,ax
c000e2c7:	90                   	nop

c000e2c8 <IDTEntry::IDTEntry(bool)>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 04             	sub    esp,0x4
c000e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d0:	88 04 24             	mov    BYTE PTR [esp],al
c000e2d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2d7:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2ec:	83 e2 f0             	and    edx,0xfffffff0
c000e2ef:	83 ca 0e             	or     edx,0xe
c000e2f2:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f9:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2fc:	83 e2 ef             	and    edx,0xffffffef
c000e2ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e302:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e306:	85 c0                	test   eax,eax
c000e308:	74 06                	je     c000e310 <IDTEntry::IDTEntry(bool)+0x48>
c000e30a:	b2 03                	mov    dl,0x3
c000e30c:	eb 06                	jmp    c000e314 <IDTEntry::IDTEntry(bool)+0x4c>
c000e30e:	66 90                	xchg   ax,ax
c000e310:	b2 00                	mov    dl,0x0
c000e312:	66 90                	xchg   ax,ax
c000e314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e318:	83 e2 03             	and    edx,0x3
c000e31b:	89 d3                	mov    ebx,edx
c000e31d:	c1 e3 05             	shl    ebx,0x5
c000e320:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e323:	83 e2 9f             	and    edx,0xffffff9f
c000e326:	88 d1                	mov    cl,dl
c000e328:	88 da                	mov    dl,bl
c000e32a:	09 ca                	or     edx,ecx
c000e32c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e32f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e333:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e336:	83 ca 80             	or     edx,0xffffff80
c000e339:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e33c:	90                   	nop
c000e33d:	83 c4 04             	add    esp,0x4
c000e340:	5b                   	pop    ebx
c000e341:	c3                   	ret    

c000e342 <IDTEntry::setOffset(unsigned int)>:
c000e342:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e34a:	66 89 02             	mov    WORD PTR [edx],ax
c000e34d:	c1 e8 10             	shr    eax,0x10
c000e350:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e354:	c3                   	ret    
c000e355:	90                   	nop
c000e356:	66 90                	xchg   ax,ax

c000e358 <IDT::IDT()>:
c000e358:	90                   	nop
c000e359:	c3                   	ret    

c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e35a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e35e:	83 c0 30             	add    eax,0x30
c000e361:	c3                   	ret    

c000e362 <IDT::addEntry(IDTEntry, int)>:
c000e362:	53                   	push   ebx
c000e363:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e367:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e36b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e373:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e376:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e37a:	5b                   	pop    ebx
c000e37b:	c3                   	ret    

c000e37c <IDT::addEntry(int, void (*)(), bool)>:
c000e37c:	53                   	push   ebx
c000e37d:	83 ec 10             	sub    esp,0x10
c000e380:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e385:	50                   	push   eax
c000e386:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e38a:	53                   	push   ebx
c000e38b:	e8 38 ff ff ff       	call   c000e2c8 <IDTEntry::IDTEntry(bool)>
c000e390:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e394:	53                   	push   ebx
c000e395:	e8 a8 ff ff ff       	call   c000e342 <IDTEntry::setOffset(unsigned int)>
c000e39a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e39e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e3aa:	e8 b3 ff ff ff       	call   c000e362 <IDT::addEntry(IDTEntry, int)>
c000e3af:	83 c4 30             	add    esp,0x30
c000e3b2:	5b                   	pop    ebx
c000e3b3:	c3                   	ret    

c000e3b4 <IDT::flush()>:
c000e3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b8:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e3c1:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e3c6:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e3cd:	c3                   	ret    

c000e3ce <IDT::setup()>:
c000e3ce:	57                   	push   edi
c000e3cf:	56                   	push   esi
c000e3d0:	53                   	push   ebx
c000e3d1:	83 ec 10             	sub    esp,0x10
c000e3d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3d8:	6a 00                	push   0x0
c000e3da:	68 80 f4 01 c0       	push   0xc001f480
c000e3df:	6a 00                	push   0x0
c000e3e1:	53                   	push   ebx
c000e3e2:	e8 95 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e3e7:	6a 00                	push   0x0
c000e3e9:	68 90 f4 01 c0       	push   0xc001f490
c000e3ee:	6a 01                	push   0x1
c000e3f0:	53                   	push   ebx
c000e3f1:	e8 86 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e3f6:	83 c4 20             	add    esp,0x20
c000e3f9:	6a 00                	push   0x0
c000e3fb:	68 9a f4 01 c0       	push   0xc001f49a
c000e400:	6a 02                	push   0x2
c000e402:	53                   	push   ebx
c000e403:	e8 74 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e408:	6a 00                	push   0x0
c000e40a:	68 a4 f4 01 c0       	push   0xc001f4a4
c000e40f:	6a 03                	push   0x3
c000e411:	53                   	push   ebx
c000e412:	e8 65 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e417:	83 c4 20             	add    esp,0x20
c000e41a:	6a 00                	push   0x0
c000e41c:	68 ae f4 01 c0       	push   0xc001f4ae
c000e421:	6a 04                	push   0x4
c000e423:	53                   	push   ebx
c000e424:	e8 53 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e429:	6a 00                	push   0x0
c000e42b:	68 b8 f4 01 c0       	push   0xc001f4b8
c000e430:	6a 05                	push   0x5
c000e432:	53                   	push   ebx
c000e433:	e8 44 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e438:	83 c4 20             	add    esp,0x20
c000e43b:	6a 00                	push   0x0
c000e43d:	68 c2 f4 01 c0       	push   0xc001f4c2
c000e442:	6a 06                	push   0x6
c000e444:	53                   	push   ebx
c000e445:	e8 32 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e44a:	6a 00                	push   0x0
c000e44c:	68 cc f4 01 c0       	push   0xc001f4cc
c000e451:	6a 07                	push   0x7
c000e453:	53                   	push   ebx
c000e454:	e8 23 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e459:	83 c4 20             	add    esp,0x20
c000e45c:	6a 00                	push   0x0
c000e45e:	68 d6 f4 01 c0       	push   0xc001f4d6
c000e463:	6a 08                	push   0x8
c000e465:	53                   	push   ebx
c000e466:	e8 11 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e46b:	6a 00                	push   0x0
c000e46d:	68 de f4 01 c0       	push   0xc001f4de
c000e472:	6a 09                	push   0x9
c000e474:	53                   	push   ebx
c000e475:	e8 02 ff ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e47a:	83 c4 20             	add    esp,0x20
c000e47d:	6a 00                	push   0x0
c000e47f:	68 e8 f4 01 c0       	push   0xc001f4e8
c000e484:	6a 0a                	push   0xa
c000e486:	53                   	push   ebx
c000e487:	e8 f0 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e48c:	6a 00                	push   0x0
c000e48e:	68 f0 f4 01 c0       	push   0xc001f4f0
c000e493:	6a 0b                	push   0xb
c000e495:	53                   	push   ebx
c000e496:	e8 e1 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e49b:	83 c4 20             	add    esp,0x20
c000e49e:	6a 00                	push   0x0
c000e4a0:	68 f8 f4 01 c0       	push   0xc001f4f8
c000e4a5:	6a 0c                	push   0xc
c000e4a7:	53                   	push   ebx
c000e4a8:	e8 cf fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ad:	6a 00                	push   0x0
c000e4af:	68 00 f5 01 c0       	push   0xc001f500
c000e4b4:	6a 0d                	push   0xd
c000e4b6:	53                   	push   ebx
c000e4b7:	e8 c0 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4bc:	83 c4 20             	add    esp,0x20
c000e4bf:	6a 00                	push   0x0
c000e4c1:	68 1a f5 01 c0       	push   0xc001f51a
c000e4c6:	6a 0e                	push   0xe
c000e4c8:	53                   	push   ebx
c000e4c9:	e8 ae fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ce:	6a 00                	push   0x0
c000e4d0:	68 22 f5 01 c0       	push   0xc001f522
c000e4d5:	6a 0f                	push   0xf
c000e4d7:	53                   	push   ebx
c000e4d8:	e8 9f fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4dd:	83 c4 20             	add    esp,0x20
c000e4e0:	6a 00                	push   0x0
c000e4e2:	68 2c f5 01 c0       	push   0xc001f52c
c000e4e7:	6a 10                	push   0x10
c000e4e9:	53                   	push   ebx
c000e4ea:	e8 8d fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4ef:	6a 00                	push   0x0
c000e4f1:	68 36 f5 01 c0       	push   0xc001f536
c000e4f6:	6a 11                	push   0x11
c000e4f8:	53                   	push   ebx
c000e4f9:	e8 7e fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e4fe:	83 c4 20             	add    esp,0x20
c000e501:	6a 00                	push   0x0
c000e503:	68 40 f5 01 c0       	push   0xc001f540
c000e508:	6a 12                	push   0x12
c000e50a:	53                   	push   ebx
c000e50b:	e8 6c fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e510:	6a 01                	push   0x1
c000e512:	68 da f5 01 c0       	push   0xc001f5da
c000e517:	6a 60                	push   0x60
c000e519:	53                   	push   ebx
c000e51a:	e8 5d fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e51f:	83 c4 20             	add    esp,0x20
c000e522:	6a 00                	push   0x0
c000e524:	68 e1 f5 01 c0       	push   0xc001f5e1
c000e529:	6a 20                	push   0x20
c000e52b:	53                   	push   ebx
c000e52c:	e8 4b fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e531:	6a 00                	push   0x0
c000e533:	68 cc f5 01 c0       	push   0xc001f5cc
c000e538:	6a 21                	push   0x21
c000e53a:	53                   	push   ebx
c000e53b:	e8 3c fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e540:	83 c4 20             	add    esp,0x20
c000e543:	6a 00                	push   0x0
c000e545:	68 d3 f5 01 c0       	push   0xc001f5d3
c000e54a:	6a 22                	push   0x22
c000e54c:	53                   	push   ebx
c000e54d:	e8 2a fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e552:	6a 00                	push   0x0
c000e554:	68 4a f5 01 c0       	push   0xc001f54a
c000e559:	6a 23                	push   0x23
c000e55b:	53                   	push   ebx
c000e55c:	e8 1b fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e561:	83 c4 20             	add    esp,0x20
c000e564:	6a 00                	push   0x0
c000e566:	68 54 f5 01 c0       	push   0xc001f554
c000e56b:	6a 24                	push   0x24
c000e56d:	53                   	push   ebx
c000e56e:	e8 09 fe ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e573:	6a 00                	push   0x0
c000e575:	68 5e f5 01 c0       	push   0xc001f55e
c000e57a:	6a 25                	push   0x25
c000e57c:	53                   	push   ebx
c000e57d:	e8 fa fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e582:	83 c4 20             	add    esp,0x20
c000e585:	6a 00                	push   0x0
c000e587:	68 68 f5 01 c0       	push   0xc001f568
c000e58c:	6a 26                	push   0x26
c000e58e:	53                   	push   ebx
c000e58f:	e8 e8 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e594:	6a 00                	push   0x0
c000e596:	68 72 f5 01 c0       	push   0xc001f572
c000e59b:	6a 27                	push   0x27
c000e59d:	53                   	push   ebx
c000e59e:	e8 d9 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5a3:	83 c4 20             	add    esp,0x20
c000e5a6:	6a 00                	push   0x0
c000e5a8:	68 7c f5 01 c0       	push   0xc001f57c
c000e5ad:	6a 28                	push   0x28
c000e5af:	53                   	push   ebx
c000e5b0:	e8 c7 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5b5:	6a 00                	push   0x0
c000e5b7:	68 86 f5 01 c0       	push   0xc001f586
c000e5bc:	6a 29                	push   0x29
c000e5be:	53                   	push   ebx
c000e5bf:	e8 b8 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5c4:	83 c4 20             	add    esp,0x20
c000e5c7:	6a 00                	push   0x0
c000e5c9:	68 90 f5 01 c0       	push   0xc001f590
c000e5ce:	6a 2a                	push   0x2a
c000e5d0:	53                   	push   ebx
c000e5d1:	e8 a6 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5d6:	6a 00                	push   0x0
c000e5d8:	68 9a f5 01 c0       	push   0xc001f59a
c000e5dd:	6a 2b                	push   0x2b
c000e5df:	53                   	push   ebx
c000e5e0:	e8 97 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5e5:	83 c4 20             	add    esp,0x20
c000e5e8:	6a 00                	push   0x0
c000e5ea:	68 a4 f5 01 c0       	push   0xc001f5a4
c000e5ef:	6a 2c                	push   0x2c
c000e5f1:	53                   	push   ebx
c000e5f2:	e8 85 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e5f7:	6a 00                	push   0x0
c000e5f9:	68 ae f5 01 c0       	push   0xc001f5ae
c000e5fe:	6a 2d                	push   0x2d
c000e600:	53                   	push   ebx
c000e601:	e8 76 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e606:	83 c4 20             	add    esp,0x20
c000e609:	6a 00                	push   0x0
c000e60b:	68 b8 f5 01 c0       	push   0xc001f5b8
c000e610:	6a 2e                	push   0x2e
c000e612:	53                   	push   ebx
c000e613:	e8 64 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e618:	6a 00                	push   0x0
c000e61a:	68 c2 f5 01 c0       	push   0xc001f5c2
c000e61f:	6a 2f                	push   0x2f
c000e621:	53                   	push   ebx
c000e622:	e8 55 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e627:	83 c4 20             	add    esp,0x20
c000e62a:	6a 00                	push   0x0
c000e62c:	68 1c f7 01 c0       	push   0xc001f71c
c000e631:	6a 30                	push   0x30
c000e633:	53                   	push   ebx
c000e634:	e8 43 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e639:	6a 00                	push   0x0
c000e63b:	68 26 f7 01 c0       	push   0xc001f726
c000e640:	6a 31                	push   0x31
c000e642:	53                   	push   ebx
c000e643:	e8 34 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e648:	83 c4 20             	add    esp,0x20
c000e64b:	6a 00                	push   0x0
c000e64d:	68 30 f7 01 c0       	push   0xc001f730
c000e652:	6a 32                	push   0x32
c000e654:	53                   	push   ebx
c000e655:	e8 22 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e65a:	6a 00                	push   0x0
c000e65c:	68 3a f7 01 c0       	push   0xc001f73a
c000e661:	6a 33                	push   0x33
c000e663:	53                   	push   ebx
c000e664:	e8 13 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e669:	83 c4 20             	add    esp,0x20
c000e66c:	6a 00                	push   0x0
c000e66e:	68 44 f7 01 c0       	push   0xc001f744
c000e673:	6a 34                	push   0x34
c000e675:	53                   	push   ebx
c000e676:	e8 01 fd ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e67b:	6a 00                	push   0x0
c000e67d:	68 4e f7 01 c0       	push   0xc001f74e
c000e682:	6a 35                	push   0x35
c000e684:	53                   	push   ebx
c000e685:	e8 f2 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e68a:	83 c4 20             	add    esp,0x20
c000e68d:	6a 00                	push   0x0
c000e68f:	68 58 f7 01 c0       	push   0xc001f758
c000e694:	6a 36                	push   0x36
c000e696:	53                   	push   ebx
c000e697:	e8 e0 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e69c:	6a 00                	push   0x0
c000e69e:	68 62 f7 01 c0       	push   0xc001f762
c000e6a3:	6a 37                	push   0x37
c000e6a5:	53                   	push   ebx
c000e6a6:	e8 d1 fc ff ff       	call   c000e37c <IDT::addEntry(int, void (*)(), bool)>
c000e6ab:	83 c4 1c             	add    esp,0x1c
c000e6ae:	6a 03                	push   0x3
c000e6b0:	6a 02                	push   0x2
c000e6b2:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e6b8:	e8 59 41 00 00       	call   c0012816 <VAS::allocatePages(int, int)>
c000e6bd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6c4:	89 c6                	mov    esi,eax
c000e6c6:	e8 b0 02 00 00       	call   c000e97b <malloc>
c000e6cb:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6d4:	89 c7                	mov    edi,eax
c000e6d6:	e8 09 32 00 00       	call   c00118e4 <TSS::TSS()>
c000e6db:	83 c4 0c             	add    esp,0xc
c000e6de:	68 d6 f4 01 c0       	push   0xc001f4d6
c000e6e3:	56                   	push   esi
c000e6e4:	57                   	push   edi
c000e6e5:	e8 3e 32 00 00       	call   c0011928 <TSS::setup(unsigned long, unsigned long)>
c000e6ea:	89 c6                	mov    esi,eax
c000e6ec:	58                   	pop    eax
c000e6ed:	5a                   	pop    edx
c000e6ee:	6a 00                	push   0x0
c000e6f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e6f4:	50                   	push   eax
c000e6f5:	e8 ce fb ff ff       	call   c000e2c8 <IDTEntry::IDTEntry(bool)>
c000e6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6fe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e703:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e70a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e710:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e714:	80 ce 05             	or     dh,0x5
c000e717:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e71a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e71e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e722:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e725:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e728:	e8 87 fc ff ff       	call   c000e3b4 <IDT::flush()>
c000e72d:	83 c4 20             	add    esp,0x20
c000e730:	5b                   	pop    ebx
c000e731:	5e                   	pop    esi
c000e732:	5f                   	pop    edi
c000e733:	c3                   	ret    

c000e734 <CPU::current()>:
c000e734:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e739:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e73f:	c3                   	ret    

c000e740 <operator new(unsigned long)>:
c000e740:	e9 36 02 00 00       	jmp    c000e97b <malloc>

c000e745 <operator delete(void*)>:
c000e745:	e9 51 02 00 00       	jmp    c000e99b <rfree>

c000e74a <disableIRQs()>:
c000e74a:	fa                   	cli    
c000e74b:	c3                   	ret    

c000e74c <enableIRQs()>:
c000e74c:	fb                   	sti    
c000e74d:	c3                   	ret    

c000e74e <lockScheduler()>:
c000e74e:	fa                   	cli    
c000e74f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e755:	c3                   	ret    

c000e756 <unlockScheduler()>:
c000e756:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e75d:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e764:	75 01                	jne    c000e767 <unlockScheduler()+0x11>
c000e766:	fb                   	sti    
c000e767:	c3                   	ret    

c000e768 <lockStuff()>:
c000e768:	fa                   	cli    
c000e769:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e76f:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e775:	c3                   	ret    

c000e776 <unlockStuff()>:
c000e776:	83 ec 0c             	sub    esp,0xc
c000e779:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e77e:	48                   	dec    eax
c000e77f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e784:	75 18                	jne    c000e79e <unlockStuff()+0x28>
c000e786:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e78d:	74 0f                	je     c000e79e <unlockStuff()+0x28>
c000e78f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e799:	e8 02 6d 00 00       	call   c00154a0 <schedule()>
c000e79e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e7a5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e7ac:	75 01                	jne    c000e7af <unlockStuff()+0x39>
c000e7ae:	fb                   	sti    
c000e7af:	83 c4 0c             	add    esp,0xc
c000e7b2:	c3                   	ret    

c000e7b3 <Virt::getAKernelVAS()>:
c000e7b3:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e7b8:	c3                   	ret    

c000e7b9 <__not_memcpy>:
c000e7b9:	57                   	push   edi
c000e7ba:	56                   	push   esi
c000e7bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7c7:	89 c7                	mov    edi,eax
c000e7c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7cb:	5e                   	pop    esi
c000e7cc:	5f                   	pop    edi
c000e7cd:	c3                   	ret    

c000e7ce <sbrk>:
c000e7ce:	55                   	push   ebp
c000e7cf:	57                   	push   edi
c000e7d0:	56                   	push   esi
c000e7d1:	53                   	push   ebx
c000e7d2:	83 ec 1c             	sub    esp,0x1c
c000e7d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d9:	85 c0                	test   eax,eax
c000e7db:	74 61                	je     c000e83e <sbrk+0x70>
c000e7dd:	78 66                	js     c000e845 <sbrk+0x77>
c000e7df:	8b 15 90 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024090
c000e7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e7e9:	05 ff 0f 00 00       	add    eax,0xfff
c000e7ee:	89 c5                	mov    ebp,eax
c000e7f0:	78 6b                	js     c000e85d <sbrk+0x8f>
c000e7f2:	c1 fd 0c             	sar    ebp,0xc
c000e7f5:	bb 00 00 00 00       	mov    ebx,0x0
c000e7fa:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e800:	8b 3d 90 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024090
c000e806:	e8 ab 06 00 00       	call   c000eeb6 <Phys::allocatePage()>
c000e80b:	68 01 04 00 00       	push   0x401
c000e810:	57                   	push   edi
c000e811:	50                   	push   eax
c000e812:	56                   	push   esi
c000e813:	e8 fa 3e 00 00       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e818:	81 05 90 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024090,0x1000
c000e822:	83 c3 01             	add    ebx,0x1
c000e825:	83 c4 10             	add    esp,0x10
c000e828:	39 dd                	cmp    ebp,ebx
c000e82a:	75 ce                	jne    c000e7fa <sbrk+0x2c>
c000e82c:	0f 20 d8             	mov    eax,cr3
c000e82f:	0f 22 d8             	mov    cr3,eax
c000e832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e836:	83 c4 1c             	add    esp,0x1c
c000e839:	5b                   	pop    ebx
c000e83a:	5e                   	pop    esi
c000e83b:	5f                   	pop    edi
c000e83c:	5d                   	pop    ebp
c000e83d:	c3                   	ret    
c000e83e:	a1 90 40 02 c0       	mov    eax,ds:0xc0024090
c000e843:	eb f1                	jmp    c000e836 <sbrk+0x68>
c000e845:	83 ec 08             	sub    esp,0x8
c000e848:	50                   	push   eax
c000e849:	68 f4 1f 02 c0       	push   0xc0021ff4
c000e84e:	e8 11 87 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e853:	83 c4 10             	add    esp,0x10
c000e856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85b:	eb d9                	jmp    c000e836 <sbrk+0x68>
c000e85d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e863:	eb 8d                	jmp    c000e7f2 <sbrk+0x24>

c000e865 <sbrk_thunk>:
c000e865:	83 ec 0c             	sub    esp,0xc
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e871:	7f 10                	jg     c000e883 <sbrk_thunk+0x1e>
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	50                   	push   eax
c000e877:	e8 52 ff ff ff       	call   c000e7ce <sbrk>
c000e87c:	83 c4 10             	add    esp,0x10
c000e87f:	83 c4 0c             	add    esp,0xc
c000e882:	c3                   	ret    
c000e883:	83 ec 08             	sub    esp,0x8
c000e886:	50                   	push   eax
c000e887:	68 24 20 02 c0       	push   0xc0022024
c000e88c:	e8 d3 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e899:	eb e4                	jmp    c000e87f <sbrk_thunk+0x1a>

c000e89b <mmap>:
c000e89b:	55                   	push   ebp
c000e89c:	57                   	push   edi
c000e89d:	56                   	push   esi
c000e89e:	53                   	push   ebx
c000e89f:	83 ec 18             	sub    esp,0x18
c000e8a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a6:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e8ac:	89 fb                	mov    ebx,edi
c000e8ae:	c1 eb 0c             	shr    ebx,0xc
c000e8b1:	53                   	push   ebx
c000e8b2:	e8 78 37 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c000e8b7:	89 c5                	mov    ebp,eax
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	85 db                	test   ebx,ebx
c000e8be:	7e 2f                	jle    c000e8ef <mmap+0x54>
c000e8c0:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8c6:	01 c7                	add    edi,eax
c000e8c8:	89 c3                	mov    ebx,eax
c000e8ca:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e8d0:	e8 e1 05 00 00       	call   c000eeb6 <Phys::allocatePage()>
c000e8d5:	68 01 04 00 00       	push   0x401
c000e8da:	53                   	push   ebx
c000e8db:	50                   	push   eax
c000e8dc:	56                   	push   esi
c000e8dd:	e8 30 3e 00 00       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e8e8:	83 c4 10             	add    esp,0x10
c000e8eb:	39 fb                	cmp    ebx,edi
c000e8ed:	75 db                	jne    c000e8ca <mmap+0x2f>
c000e8ef:	89 e8                	mov    eax,ebp
c000e8f1:	83 c4 0c             	add    esp,0xc
c000e8f4:	5b                   	pop    ebx
c000e8f5:	5e                   	pop    esi
c000e8f6:	5f                   	pop    edi
c000e8f7:	5d                   	pop    ebp
c000e8f8:	c3                   	ret    

c000e8f9 <munmap>:
c000e8f9:	83 ec 18             	sub    esp,0x18
c000e8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e900:	e8 32 3a 00 00       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c000e905:	b8 00 00 00 00       	mov    eax,0x0
c000e90a:	83 c4 1c             	add    esp,0x1c
c000e90d:	c3                   	ret    

c000e90e <liballoc_lock()>:
c000e90e:	fa                   	cli    
c000e90f:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e916:	b8 00 00 00 00       	mov    eax,0x0
c000e91b:	c3                   	ret    

c000e91c <liballoc_unlock()>:
c000e91c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e924:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e92b:	75 01                	jne    c000e92e <liballoc_unlock()+0x12>
c000e92d:	fb                   	sti    
c000e92e:	b8 00 00 00 00       	mov    eax,0x0
c000e933:	c3                   	ret    

c000e934 <liballoc_alloc(int)>:
c000e934:	83 ec 10             	sub    esp,0x10
c000e937:	6a 01                	push   0x1
c000e939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e93d:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e943:	e8 ce 3e 00 00       	call   c0012816 <VAS::allocatePages(int, int)>
c000e948:	83 c4 1c             	add    esp,0x1c
c000e94b:	c3                   	ret    

c000e94c <liballoc_free(void*, int)>:
c000e94c:	83 ec 14             	sub    esp,0x14
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e959:	e8 16 3b 00 00       	call   c0012474 <VAS::freeAllocatedPages(unsigned long)>
c000e95e:	b8 00 00 00 00       	mov    eax,0x0
c000e963:	83 c4 1c             	add    esp,0x1c
c000e966:	c3                   	ret    

c000e967 <realloc>:
c000e967:	83 ec 14             	sub    esp,0x14
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e972:	e8 e0 2d ff ff       	call   c0001757 <dlrealloc>
c000e977:	83 c4 1c             	add    esp,0x1c
c000e97a:	c3                   	ret    

c000e97b <malloc>:
c000e97b:	83 ec 18             	sub    esp,0x18
c000e97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e982:	e8 93 28 ff ff       	call   c000121a <dlmalloc>
c000e987:	83 c4 1c             	add    esp,0x1c
c000e98a:	c3                   	ret    

c000e98b <free>:
c000e98b:	83 ec 18             	sub    esp,0x18
c000e98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e992:	e8 bc 23 ff ff       	call   c0000d53 <dlfree>
c000e997:	83 c4 1c             	add    esp,0x1c
c000e99a:	c3                   	ret    

c000e99b <rfree>:
c000e99b:	83 ec 18             	sub    esp,0x18
c000e99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a2:	e8 ac 23 ff ff       	call   c0000d53 <dlfree>
c000e9a7:	83 c4 1c             	add    esp,0x1c
c000e9aa:	c3                   	ret    

c000e9ab <calloc>:
c000e9ab:	56                   	push   esi
c000e9ac:	53                   	push   ebx
c000e9ad:	83 ec 10             	sub    esp,0x10
c000e9b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e9b4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e9b9:	53                   	push   ebx
c000e9ba:	e8 bc ff ff ff       	call   c000e97b <malloc>
c000e9bf:	89 c6                	mov    esi,eax
c000e9c1:	83 c4 0c             	add    esp,0xc
c000e9c4:	53                   	push   ebx
c000e9c5:	6a 00                	push   0x0
c000e9c7:	50                   	push   eax
c000e9c8:	e8 23 1b ff ff       	call   c00004f0 <memset>
c000e9cd:	89 f0                	mov    eax,esi
c000e9cf:	83 c4 14             	add    esp,0x14
c000e9d2:	5b                   	pop    ebx
c000e9d3:	5e                   	pop    esi
c000e9d4:	c3                   	ret    
c000e9d5:	66 90                	xchg   ax,ax
c000e9d7:	90                   	nop

c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>:
c000e9d8:	83 ec 10             	sub    esp,0x10
c000e9db:	fa                   	cli    
c000e9dc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9e1:	83 c0 01             	add    eax,0x1
c000e9e4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9e9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9f5:	85 c0                	test   eax,eax
c000e9f7:	75 23                	jne    c000ea1c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea01:	89 10                	mov    DWORD PTR [eax],edx
c000ea03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea0a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea14:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea19:	8d 76 00             	lea    esi,[esi+0x0]
c000ea1c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea24:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea29:	85 c0                	test   eax,eax
c000ea2b:	75 03                	jne    c000ea30 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ea2d:	fb                   	sti    
c000ea2e:	66 90                	xchg   ax,ax
c000ea30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea34:	83 c4 10             	add    esp,0x10
c000ea37:	c3                   	ret    

c000ea38 <KeMailboxTryGet(Mailbox*, void**)>:
c000ea38:	83 ec 10             	sub    esp,0x10
c000ea3b:	fa                   	cli    
c000ea3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea41:	83 c0 01             	add    eax,0x1
c000ea44:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea49:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea55:	83 f8 01             	cmp    eax,0x1
c000ea58:	75 22                	jne    c000ea7c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea5e:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea64:	89 10                	mov    DWORD PTR [eax],edx
c000ea66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea6d:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea77:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea7c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea84:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea89:	85 c0                	test   eax,eax
c000ea8b:	75 03                	jne    c000ea90 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000ea8d:	fb                   	sti    
c000ea8e:	66 90                	xchg   ax,ax
c000ea90:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	c3                   	ret    

c000ea98 <KeMailboxCreate()>:
c000ea98:	83 ec 1c             	sub    esp,0x1c
c000ea9b:	83 ec 0c             	sub    esp,0xc
c000ea9e:	6a 08                	push   0x8
c000eaa0:	e8 d6 fe ff ff       	call   c000e97b <malloc>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eaac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac5:	83 c4 1c             	add    esp,0x1c
c000eac8:	c3                   	ret    
c000eac9:	8d 76 00             	lea    esi,[esi+0x0]

c000eacc <KeMailboxPost(Mailbox*, void*)>:
c000eacc:	83 ec 1c             	sub    esp,0x1c
c000eacf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ead4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ead8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eadc:	e8 f7 fe ff ff       	call   c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>
c000eae1:	83 c4 08             	add    esp,0x8
c000eae4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eae8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaec:	83 f0 01             	xor    eax,0x1
c000eaef:	0f b6 c0             	movzx  eax,al
c000eaf2:	85 c0                	test   eax,eax
c000eaf4:	74 26                	je     c000eb1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000eaf6:	fa                   	cli    
c000eaf7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eafc:	83 c0 01             	add    eax,0x1
c000eaff:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb04:	e8 97 69 00 00       	call   c00154a0 <schedule()>
c000eb09:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eb11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb16:	85 c0                	test   eax,eax
c000eb18:	75 02                	jne    c000eb1c <KeMailboxPost(Mailbox*, void*)+0x50>
c000eb1a:	fb                   	sti    
c000eb1b:	90                   	nop
c000eb1c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb21:	85 c0                	test   eax,eax
c000eb23:	75 03                	jne    c000eb28 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000eb25:	eb ad                	jmp    c000ead4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb27:	90                   	nop
c000eb28:	90                   	nop
c000eb29:	83 c4 1c             	add    esp,0x1c
c000eb2c:	c3                   	ret    
c000eb2d:	8d 76 00             	lea    esi,[esi+0x0]

c000eb30 <KeMailboxGet(Mailbox*, void**)>:
c000eb30:	83 ec 1c             	sub    esp,0x1c
c000eb33:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb40:	e8 f3 fe ff ff       	call   c000ea38 <KeMailboxTryGet(Mailbox*, void**)>
c000eb45:	83 c4 08             	add    esp,0x8
c000eb48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb50:	83 f0 01             	xor    eax,0x1
c000eb53:	0f b6 c0             	movzx  eax,al
c000eb56:	85 c0                	test   eax,eax
c000eb58:	74 26                	je     c000eb80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb5a:	fa                   	cli    
c000eb5b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb60:	83 c0 01             	add    eax,0x1
c000eb63:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb68:	e8 33 69 00 00       	call   c00154a0 <schedule()>
c000eb6d:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eb75:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb7a:	85 c0                	test   eax,eax
c000eb7c:	75 02                	jne    c000eb80 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb7e:	fb                   	sti    
c000eb7f:	90                   	nop
c000eb80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb85:	85 c0                	test   eax,eax
c000eb87:	75 03                	jne    c000eb8c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eb89:	eb ad                	jmp    c000eb38 <KeMailboxGet(Mailbox*, void**)+0x8>
c000eb8b:	90                   	nop
c000eb8c:	90                   	nop
c000eb8d:	83 c4 1c             	add    esp,0x1c
c000eb90:	c3                   	ret    
c000eb91:	8d 76 00             	lea    esi,[esi+0x0]

c000eb94 <KeMailboxDestroy(Mailbox*)>:
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	83 ec 0c             	sub    esp,0xc
c000eb9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb9e:	e8 e8 fd ff ff       	call   c000e98b <free>
c000eba3:	83 c4 10             	add    esp,0x10
c000eba6:	90                   	nop
c000eba7:	83 c4 0c             	add    esp,0xc
c000ebaa:	c3                   	ret    

c000ebab <KeEntryPoint>:
c000ebab:	57                   	push   edi
c000ebac:	bf f9 03 00 00       	mov    edi,0x3f9
c000ebb1:	56                   	push   esi
c000ebb2:	89 fa                	mov    edx,edi
c000ebb4:	53                   	push   ebx
c000ebb5:	31 f6                	xor    esi,esi
c000ebb7:	83 ec 2c             	sub    esp,0x2c
c000ebba:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ebbf:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000ebc4:	89 f0                	mov    eax,esi
c000ebc6:	ee                   	out    dx,al
c000ebc7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebcc:	b0 80                	mov    al,0x80
c000ebce:	89 da                	mov    edx,ebx
c000ebd0:	ee                   	out    dx,al
c000ebd1:	b1 03                	mov    cl,0x3
c000ebd3:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebd8:	88 c8                	mov    al,cl
c000ebda:	ee                   	out    dx,al
c000ebdb:	89 f0                	mov    eax,esi
c000ebdd:	89 fa                	mov    edx,edi
c000ebdf:	ee                   	out    dx,al
c000ebe0:	88 c8                	mov    al,cl
c000ebe2:	89 da                	mov    edx,ebx
c000ebe4:	ee                   	out    dx,al
c000ebe5:	b0 c7                	mov    al,0xc7
c000ebe7:	ba fa 03 00 00       	mov    edx,0x3fa
c000ebec:	ee                   	out    dx,al
c000ebed:	b0 0b                	mov    al,0xb
c000ebef:	ba fc 03 00 00       	mov    edx,0x3fc
c000ebf4:	ee                   	out    dx,al
c000ebf5:	68 33 20 02 c0       	push   0xc0022033
c000ebfa:	e8 65 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebff:	e8 0d da ff ff       	call   c000c611 <KeDisplaySplashScreen()>
c000ec04:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ec09:	05 ff 0f 00 00       	add    eax,0xfff
c000ec0e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec16:	e8 0d 04 00 00       	call   c000f028 <Phys::physicalMemorySetup(unsigned int)>
c000ec1b:	e8 ed 35 00 00       	call   c001220d <Virt::virtualMemorySetup()>
c000ec20:	e8 36 d9 ff ff       	call   c000c55b <KeInitialiseAtexit()>
c000ec25:	c7 04 24 4a 20 02 c0 	mov    DWORD PTR [esp],0xc002204a
c000ec2c:	e8 33 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec31:	58                   	pop    eax
c000ec32:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec36:	53                   	push   ebx
c000ec37:	e8 b8 38 00 00       	call   c00124f4 <VAS::VAS()>
c000ec3c:	c7 04 24 5a 20 02 c0 	mov    DWORD PTR [esp],0xc002205a
c000ec43:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ec49:	e8 16 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec4e:	e8 cb 10 01 00       	call   c001fd1e <_init>
c000ec53:	c7 04 24 6e 20 02 c0 	mov    DWORD PTR [esp],0xc002206e
c000ec5a:	e8 05 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec5f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec66:	e8 10 fd ff ff       	call   c000e97b <malloc>
c000ec6b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec6e:	89 c6                	mov    esi,eax
c000ec70:	e8 63 ea ff ff       	call   c000d6d8 <Computer::Computer()>
c000ec75:	5a                   	pop    edx
c000ec76:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ec7c:	59                   	pop    ecx
c000ec7d:	56                   	push   esi
c000ec7e:	68 7d 20 02 c0       	push   0xc002207d
c000ec83:	e8 dc 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec88:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ec8d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec8f:	53                   	push   ebx
c000ec90:	6a 00                	push   0x0
c000ec92:	6a 00                	push   0x0
c000ec94:	50                   	push   eax
c000ec95:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec98:	83 c4 14             	add    esp,0x14
c000ec9b:	53                   	push   ebx
c000ec9c:	e8 09 39 00 00       	call   c00125aa <VAS::~VAS()>
c000eca1:	83 c4 30             	add    esp,0x30
c000eca4:	5b                   	pop    ebx
c000eca5:	5e                   	pop    esi
c000eca6:	5f                   	pop    edi
c000eca7:	c3                   	ret    

c000eca8 <Mutex::Mutex()>:
c000eca8:	83 ec 0c             	sub    esp,0xc
c000ecab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecaf:	83 ec 08             	sub    esp,0x8
c000ecb2:	6a 01                	push   0x1
c000ecb4:	50                   	push   eax
c000ecb5:	e8 36 0c 00 00       	call   c000f8f0 <Semaphore::Semaphore(int)>
c000ecba:	83 c4 10             	add    esp,0x10
c000ecbd:	90                   	nop
c000ecbe:	83 c4 0c             	add    esp,0xc
c000ecc1:	c3                   	ret    

c000ecc2 <KePanic(char const*)>:
c000ecc2:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ecc9:	e9 fe 96 00 00       	jmp    c00183cc <HalPanic(char const*)>

c000ecce <Phys::allocateDMA(unsigned long)>:
c000ecce:	55                   	push   ebp
c000eccf:	31 ed                	xor    ebp,ebp
c000ecd1:	57                   	push   edi
c000ecd2:	56                   	push   esi
c000ecd3:	53                   	push   ebx
c000ecd4:	31 db                	xor    ebx,ebx
c000ecd6:	83 ec 1c             	sub    esp,0x1c
c000ecd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecdd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ece5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000eceb:	31 c0                	xor    eax,eax
c000eced:	c1 ef 0c             	shr    edi,0xc
c000ecf0:	eb 1b                	jmp    c000ed0d <Phys::allocateDMA(unsigned long)+0x3f>
c000ecf2:	85 c0                	test   eax,eax
c000ecf4:	75 06                	jne    c000ecfc <Phys::allocateDMA(unsigned long)+0x2e>
c000ecf6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ecfa:	89 dd                	mov    ebp,ebx
c000ecfc:	8d 70 01             	lea    esi,[eax+0x1]
c000ecff:	39 f7                	cmp    edi,esi
c000ed01:	74 37                	je     c000ed3a <Phys::allocateDMA(unsigned long)+0x6c>
c000ed03:	89 f0                	mov    eax,esi
c000ed05:	83 c3 01             	add    ebx,0x1
c000ed08:	83 fb 0f             	cmp    ebx,0xf
c000ed0b:	7f 13                	jg     c000ed20 <Phys::allocateDMA(unsigned long)+0x52>
c000ed0d:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ed14:	74 dc                	je     c000ecf2 <Phys::allocateDMA(unsigned long)+0x24>
c000ed16:	31 c0                	xor    eax,eax
c000ed18:	83 c3 01             	add    ebx,0x1
c000ed1b:	83 fb 0f             	cmp    ebx,0xf
c000ed1e:	7e ed                	jle    c000ed0d <Phys::allocateDMA(unsigned long)+0x3f>
c000ed20:	83 ec 0c             	sub    esp,0xc
c000ed23:	68 94 20 02 c0       	push   0xc0022094
c000ed28:	e8 95 ff ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ed2d:	83 c4 10             	add    esp,0x10
c000ed30:	31 c0                	xor    eax,eax
c000ed32:	83 c4 1c             	add    esp,0x1c
c000ed35:	5b                   	pop    ebx
c000ed36:	5e                   	pop    esi
c000ed37:	5f                   	pop    edi
c000ed38:	5d                   	pop    ebp
c000ed39:	c3                   	ret    
c000ed3a:	89 e9                	mov    ecx,ebp
c000ed3c:	c1 f9 04             	sar    ecx,0x4
c000ed3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed43:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ed47:	89 ca                	mov    edx,ecx
c000ed49:	83 ea 01             	sub    edx,0x1
c000ed4c:	79 03                	jns    c000ed51 <Phys::allocateDMA(unsigned long)+0x83>
c000ed4e:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed51:	c1 fa 04             	sar    edx,0x4
c000ed54:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ed58:	74 08                	je     c000ed62 <Phys::allocateDMA(unsigned long)+0x94>
c000ed5a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed5e:	31 c0                	xor    eax,eax
c000ed60:	eb b6                	jmp    c000ed18 <Phys::allocateDMA(unsigned long)+0x4a>
c000ed62:	85 f6                	test   esi,esi
c000ed64:	74 17                	je     c000ed7d <Phys::allocateDMA(unsigned long)+0xaf>
c000ed66:	8d 95 b0 bd 02 c0    	lea    edx,[ebp-0x3ffd4250]
c000ed6c:	8d 84 05 b1 bd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd424f]
c000ed73:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed76:	83 c2 01             	add    edx,0x1
c000ed79:	39 d0                	cmp    eax,edx
c000ed7b:	75 f6                	jne    c000ed73 <Phys::allocateDMA(unsigned long)+0xa5>
c000ed7d:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed86:	01 f8                	add    eax,edi
c000ed88:	85 d2                	test   edx,edx
c000ed8a:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed8f:	74 17                	je     c000eda8 <Phys::allocateDMA(unsigned long)+0xda>
c000ed91:	83 ec 0c             	sub    esp,0xc
c000ed94:	68 94 20 02 c0       	push   0xc0022094
c000ed99:	e8 24 ff ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	89 f0                	mov    eax,esi
c000eda3:	e9 5d ff ff ff       	jmp    c000ed05 <Phys::allocateDMA(unsigned long)+0x37>
c000eda8:	c1 e5 0c             	shl    ebp,0xc
c000edab:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000edb1:	e9 7c ff ff ff       	jmp    c000ed32 <Phys::allocateDMA(unsigned long)+0x64>

c000edb6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000edb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edba:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000edc0:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edc5:	c1 ea 0c             	shr    edx,0xc
c000edc8:	29 d0                	sub    eax,edx
c000edca:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000edcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000edd8:	c1 e8 0c             	shr    eax,0xc
c000eddb:	85 d2                	test   edx,edx
c000eddd:	74 11                	je     c000edf0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000eddf:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ede4:	01 c2                	add    edx,eax
c000ede6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ede9:	83 c0 01             	add    eax,0x1
c000edec:	39 d0                	cmp    eax,edx
c000edee:	75 f6                	jne    c000ede6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000edf0:	c3                   	ret    

c000edf1 <Phys::setPageState(unsigned long, bool)>:
c000edf1:	57                   	push   edi
c000edf2:	56                   	push   esi
c000edf3:	8b 35 94 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024094
c000edf9:	53                   	push   ebx
c000edfa:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000edff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee07:	0f b6 c0             	movzx  eax,al
c000ee0a:	89 ca                	mov    edx,ecx
c000ee0c:	83 e1 07             	and    ecx,0x7
c000ee0f:	c1 ea 03             	shr    edx,0x3
c000ee12:	d3 c3                	rol    ebx,cl
c000ee14:	01 d6                	add    esi,edx
c000ee16:	d3 e0                	shl    eax,cl
c000ee18:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ee1b:	21 fb                	and    ebx,edi
c000ee1d:	88 1e                	mov    BYTE PTR [esi],bl
c000ee1f:	8b 1d 94 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024094
c000ee25:	01 da                	add    edx,ebx
c000ee27:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee29:	09 c8                	or     eax,ecx
c000ee2b:	88 02                	mov    BYTE PTR [edx],al
c000ee2d:	5b                   	pop    ebx
c000ee2e:	5e                   	pop    esi
c000ee2f:	5f                   	pop    edi
c000ee30:	c3                   	ret    

c000ee31 <Phys::getPageState(unsigned long)>:
c000ee31:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee35:	8b 15 94 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024094
c000ee3b:	89 c8                	mov    eax,ecx
c000ee3d:	83 e1 07             	and    ecx,0x7
c000ee40:	c1 e8 03             	shr    eax,0x3
c000ee43:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee47:	d3 f8                	sar    eax,cl
c000ee49:	83 e0 01             	and    eax,0x1
c000ee4c:	c3                   	ret    

c000ee4d <Phys::freePage(unsigned long)>:
c000ee4d:	53                   	push   ebx
c000ee4e:	83 ec 08             	sub    esp,0x8
c000ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee55:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee5b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee61:	76 41                	jbe    c000eea4 <Phys::freePage(unsigned long)+0x57>
c000ee63:	c1 e8 0c             	shr    eax,0xc
c000ee66:	50                   	push   eax
c000ee67:	89 c3                	mov    ebx,eax
c000ee69:	e8 c3 ff ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000ee6e:	5a                   	pop    edx
c000ee6f:	84 c0                	test   al,al
c000ee71:	74 20                	je     c000ee93 <Phys::freePage(unsigned long)+0x46>
c000ee73:	83 ec 08             	sub    esp,0x8
c000ee76:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ee7b:	6a 00                	push   0x0
c000ee7d:	83 e8 01             	sub    eax,0x1
c000ee80:	53                   	push   ebx
c000ee81:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ee86:	e8 66 ff ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	83 c4 08             	add    esp,0x8
c000ee91:	5b                   	pop    ebx
c000ee92:	c3                   	ret    
c000ee93:	c7 44 24 10 39 21 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022139
c000ee9b:	83 c4 08             	add    esp,0x8
c000ee9e:	5b                   	pop    ebx
c000ee9f:	e9 1e fe ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c000eea4:	68 00 10 00 00       	push   0x1000
c000eea9:	50                   	push   eax
c000eeaa:	e8 07 ff ff ff       	call   c000edb6 <Phys::freeDMA(unsigned long, unsigned long)>
c000eeaf:	59                   	pop    ecx
c000eeb0:	5b                   	pop    ebx
c000eeb1:	83 c4 08             	add    esp,0x8
c000eeb4:	5b                   	pop    ebx
c000eeb5:	c3                   	ret    

c000eeb6 <Phys::allocatePage()>:
c000eeb6:	56                   	push   esi
c000eeb7:	53                   	push   ebx
c000eeb8:	83 ec 14             	sub    esp,0x14
c000eebb:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000eec1:	89 f3                	mov    ebx,esi
c000eec3:	eb 0a                	jmp    c000eecf <Phys::allocatePage()+0x19>
c000eec5:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000eecb:	39 de                	cmp    esi,ebx
c000eecd:	74 26                	je     c000eef5 <Phys::allocatePage()+0x3f>
c000eecf:	53                   	push   ebx
c000eed0:	e8 5c ff ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000eed5:	5a                   	pop    edx
c000eed6:	84 c0                	test   al,al
c000eed8:	74 67                	je     c000ef41 <Phys::allocatePage()+0x8b>
c000eeda:	83 c3 01             	add    ebx,0x1
c000eedd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eee3:	75 e0                	jne    c000eec5 <Phys::allocatePage()+0xf>
c000eee5:	31 db                	xor    ebx,ebx
c000eee7:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000eef1:	39 de                	cmp    esi,ebx
c000eef3:	75 da                	jne    c000eecf <Phys::allocatePage()+0x19>
c000eef5:	83 ec 0c             	sub    esp,0xc
c000eef8:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000eefd:	83 f0 01             	xor    eax,0x1
c000ef00:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ef05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef0d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ef13:	50                   	push   eax
c000ef14:	e8 3f 40 00 00       	call   c0012f58 <VAS::scanForEviction()>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	85 c0                	test   eax,eax
c000ef1e:	75 48                	jne    c000ef68 <Phys::allocatePage()+0xb2>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 bc 20 02 c0       	push   0xc00220bc
c000ef28:	e8 95 fd ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ef2d:	83 c4 10             	add    esp,0x10
c000ef30:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ef36:	53                   	push   ebx
c000ef37:	e8 f5 fe ff ff       	call   c000ee31 <Phys::getPageState(unsigned long)>
c000ef3c:	5a                   	pop    edx
c000ef3d:	84 c0                	test   al,al
c000ef3f:	75 99                	jne    c000eeda <Phys::allocatePage()+0x24>
c000ef41:	6a 01                	push   0x1
c000ef43:	53                   	push   ebx
c000ef44:	e8 a8 fe ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ef49:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ef4f:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000ef54:	83 c2 01             	add    edx,0x1
c000ef57:	59                   	pop    ecx
c000ef58:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ef5e:	c1 e0 0c             	shl    eax,0xc
c000ef61:	5b                   	pop    ebx
c000ef62:	83 c4 14             	add    esp,0x14
c000ef65:	5b                   	pop    ebx
c000ef66:	5e                   	pop    esi
c000ef67:	c3                   	ret    
c000ef68:	83 ec 08             	sub    esp,0x8
c000ef6b:	89 c2                	mov    edx,eax
c000ef6d:	6a 01                	push   0x1
c000ef6f:	c1 ea 0c             	shr    edx,0xc
c000ef72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef76:	52                   	push   edx
c000ef77:	e8 75 fe ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000ef7c:	83 c4 10             	add    esp,0x10
c000ef7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef83:	eb dd                	jmp    c000ef62 <Phys::allocatePage()+0xac>

c000ef85 <Phys::allocateContiguousPages(int)>:
c000ef85:	57                   	push   edi
c000ef86:	56                   	push   esi
c000ef87:	53                   	push   ebx
c000ef88:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef8c:	fa                   	cli    
c000ef8d:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c000ef93:	31 db                	xor    ebx,ebx
c000ef95:	83 c2 01             	add    edx,0x1
c000ef98:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c000ef9e:	85 db                	test   ebx,ebx
c000efa0:	75 11                	jne    c000efb3 <Phys::allocateContiguousPages(int)+0x2e>
c000efa2:	e8 0f ff ff ff       	call   c000eeb6 <Phys::allocatePage()>
c000efa7:	83 fe 01             	cmp    esi,0x1
c000efaa:	89 c7                	mov    edi,eax
c000efac:	74 21                	je     c000efcf <Phys::allocateContiguousPages(int)+0x4a>
c000efae:	bb 01 00 00 00       	mov    ebx,0x1
c000efb3:	e8 fe fe ff ff       	call   c000eeb6 <Phys::allocatePage()>
c000efb8:	89 da                	mov    edx,ebx
c000efba:	c1 e2 0c             	shl    edx,0xc
c000efbd:	01 fa                	add    edx,edi
c000efbf:	39 c2                	cmp    edx,eax
c000efc1:	74 24                	je     c000efe7 <Phys::allocateContiguousPages(int)+0x62>
c000efc3:	bb 01 00 00 00       	mov    ebx,0x1
c000efc8:	89 c7                	mov    edi,eax
c000efca:	83 fe 01             	cmp    esi,0x1
c000efcd:	75 e4                	jne    c000efb3 <Phys::allocateContiguousPages(int)+0x2e>
c000efcf:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000efd7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000efdc:	85 c0                	test   eax,eax
c000efde:	75 01                	jne    c000efe1 <Phys::allocateContiguousPages(int)+0x5c>
c000efe0:	fb                   	sti    
c000efe1:	89 f8                	mov    eax,edi
c000efe3:	5b                   	pop    ebx
c000efe4:	5e                   	pop    esi
c000efe5:	5f                   	pop    edi
c000efe6:	c3                   	ret    
c000efe7:	83 c3 01             	add    ebx,0x1
c000efea:	39 f3                	cmp    ebx,esi
c000efec:	75 b0                	jne    c000ef9e <Phys::allocateContiguousPages(int)+0x19>
c000efee:	eb df                	jmp    c000efcf <Phys::allocateContiguousPages(int)+0x4a>

c000eff0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000eff0:	56                   	push   esi
c000eff1:	53                   	push   ebx
c000eff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eff6:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000effc:	73 06                	jae    c000f004 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000effe:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000f004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f008:	c1 eb 0c             	shr    ebx,0xc
c000f00b:	c1 e8 0c             	shr    eax,0xc
c000f00e:	39 d8                	cmp    eax,ebx
c000f010:	73 13                	jae    c000f025 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f012:	6a 00                	push   0x0
c000f014:	8d 70 01             	lea    esi,[eax+0x1]
c000f017:	50                   	push   eax
c000f018:	e8 d4 fd ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f01d:	5a                   	pop    edx
c000f01e:	89 f0                	mov    eax,esi
c000f020:	59                   	pop    ecx
c000f021:	39 f3                	cmp    ebx,esi
c000f023:	75 ed                	jne    c000f012 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f025:	5b                   	pop    ebx
c000f026:	5e                   	pop    esi
c000f027:	c3                   	ret    

c000f028 <Phys::physicalMemorySetup(unsigned int)>:
c000f028:	55                   	push   ebp
c000f029:	57                   	push   edi
c000f02a:	56                   	push   esi
c000f02b:	53                   	push   ebx
c000f02c:	83 ec 40             	sub    esp,0x40
c000f02f:	6a 10                	push   0x10
c000f031:	6a 00                	push   0x0
c000f033:	68 b0 bd 02 c0       	push   0xc002bdb0
c000f038:	e8 b3 14 ff ff       	call   c00004f0 <memset>
c000f03d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f041:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f046:	05 00 10 00 00       	add    eax,0x1000
c000f04b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f04f:	5b                   	pop    ebx
c000f050:	31 db                	xor    ebx,ebx
c000f052:	5e                   	pop    esi
c000f053:	50                   	push   eax
c000f054:	68 4f 21 02 c0       	push   0xc002214f
c000f059:	e8 06 7f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f05e:	83 c4 10             	add    esp,0x10
c000f061:	83 ec 08             	sub    esp,0x8
c000f064:	6a 01                	push   0x1
c000f066:	53                   	push   ebx
c000f067:	83 c3 01             	add    ebx,0x1
c000f06a:	e8 82 fd ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f06f:	83 c4 10             	add    esp,0x10
c000f072:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f078:	75 e7                	jne    c000f061 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f07a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f081:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f088:	c1 e0 08             	shl    eax,0x8
c000f08b:	09 c2                	or     edx,eax
c000f08d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f091:	0f 84 98 01 00 00    	je     c000f22f <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f097:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f09b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0a3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f0b4:	eb 1c                	jmp    c000f0d2 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f0b6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0ba:	83 c3 18             	add    ebx,0x18
c000f0bd:	83 c6 01             	add    esi,0x1
c000f0c0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0c8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f0cc:	0f 84 6d 01 00 00    	je     c000f23f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f0d2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0d8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0e3:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0e5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0e8:	01 f0                	add    eax,esi
c000f0ea:	55                   	push   ebp
c000f0eb:	11 fa                	adc    edx,edi
c000f0ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0f1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0f9:	51                   	push   ecx
c000f0fa:	56                   	push   esi
c000f0fb:	68 ec 20 02 c0       	push   0xc00220ec
c000f100:	e8 5f 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f105:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f109:	83 c4 10             	add    esp,0x10
c000f10c:	09 f8                	or     eax,edi
c000f10e:	0f 85 2b 01 00 00    	jne    c000f23f <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f114:	83 fd 01             	cmp    ebp,0x1
c000f117:	75 9d                	jne    c000f0b6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f119:	ba 00 00 08 00       	mov    edx,0x80000
c000f11e:	89 c1                	mov    ecx,eax
c000f120:	39 f2                	cmp    edx,esi
c000f122:	19 f9                	sbb    ecx,edi
c000f124:	0f 82 ab 00 00 00    	jb     c000f1d5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f12a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f12e:	89 c1                	mov    ecx,eax
c000f130:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f134:	0f 83 9b 00 00 00    	jae    c000f1d5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f13a:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f13f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f143:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f147:	39 fa                	cmp    edx,edi
c000f149:	19 e8                	sbb    eax,ebp
c000f14b:	0f 82 b0 01 00 00    	jb     c000f301 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f151:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f155:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f159:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f15f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f164:	83 d5 ff             	adc    ebp,0xffffffff
c000f167:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f16b:	31 c0                	xor    eax,eax
c000f16d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f171:	39 fa                	cmp    edx,edi
c000f173:	89 c1                	mov    ecx,eax
c000f175:	19 e9                	sbb    ecx,ebp
c000f177:	0f 83 39 ff ff ff    	jae    c000f0b6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f17d:	be 00 00 08 00       	mov    esi,0x80000
c000f182:	83 ec 04             	sub    esp,0x4
c000f185:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f189:	57                   	push   edi
c000f18a:	56                   	push   esi
c000f18b:	68 10 21 02 c0       	push   0xc0022110
c000f190:	e8 cf 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f195:	5d                   	pop    ebp
c000f196:	58                   	pop    eax
c000f197:	57                   	push   edi
c000f198:	56                   	push   esi
c000f199:	e8 52 fe ff ff       	call   c000eff0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f19e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1a6:	83 c4 0c             	add    esp,0xc
c000f1a9:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f1ad:	8b 15 ac bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bdac
c000f1b3:	01 d0                	add    eax,edx
c000f1b5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1bc:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1c1:	52                   	push   edx
c000f1c2:	50                   	push   eax
c000f1c3:	68 75 21 02 c0       	push   0xc0022175
c000f1c8:	e8 97 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1cd:	83 c4 10             	add    esp,0x10
c000f1d0:	e9 e1 fe ff ff       	jmp    c000f0b6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1d5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f1d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1e1:	39 ea                	cmp    edx,ebp
c000f1e3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f1e7:	0f 82 c9 fe ff ff    	jb     c000f0b6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1ed:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f1f2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f1f6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f1fa:	0f 83 b6 fe ff ff    	jae    c000f0b6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f200:	39 ee                	cmp    esi,ebp
c000f202:	89 f8                	mov    eax,edi
c000f204:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f208:	0f 83 74 ff ff ff    	jae    c000f182 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f20e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f216:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f21a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f21e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f222:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f226:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f22a:	e9 53 ff ff ff       	jmp    c000f182 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f22f:	83 ec 0c             	sub    esp,0xc
c000f232:	68 67 21 02 c0       	push   0xc0022167
c000f237:	e8 86 fa ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	83 ec 08             	sub    esp,0x8
c000f242:	bb 60 00 00 00       	mov    ebx,0x60
c000f247:	6a 00                	push   0x0
c000f249:	6a 06                	push   0x6
c000f24b:	e8 a1 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f250:	58                   	pop    eax
c000f251:	5a                   	pop    edx
c000f252:	6a 00                	push   0x0
c000f254:	6a 07                	push   0x7
c000f256:	e8 96 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f25b:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	83 c1 02             	add    ecx,0x2
c000f267:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f26d:	83 ec 08             	sub    esp,0x8
c000f270:	6a 00                	push   0x0
c000f272:	53                   	push   ebx
c000f273:	83 c3 01             	add    ebx,0x1
c000f276:	e8 76 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f27b:	83 c4 10             	add    esp,0x10
c000f27e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f284:	75 e7                	jne    c000f26d <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f286:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f28b:	bb 40 01 00 00       	mov    ebx,0x140
c000f290:	83 c0 20             	add    eax,0x20
c000f293:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f298:	eb 26                	jmp    c000f2c0 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f29a:	83 ec 08             	sub    esp,0x8
c000f29d:	6a 00                	push   0x0
c000f29f:	53                   	push   ebx
c000f2a0:	83 c3 01             	add    ebx,0x1
c000f2a3:	e8 49 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f2a8:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2ad:	83 c4 10             	add    esp,0x10
c000f2b0:	83 c0 01             	add    eax,0x1
c000f2b3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2b9:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2be:	74 07                	je     c000f2c7 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f2c0:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2c5:	7e d3                	jle    c000f29a <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f2c7:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2cc:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2d1:	7f 26                	jg     c000f2f9 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f2d3:	83 ec 08             	sub    esp,0x8
c000f2d6:	6a 00                	push   0x0
c000f2d8:	53                   	push   ebx
c000f2d9:	83 c3 01             	add    ebx,0x1
c000f2dc:	e8 10 fb ff ff       	call   c000edf1 <Phys::setPageState(unsigned long, bool)>
c000f2e1:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2e6:	83 c4 10             	add    esp,0x10
c000f2e9:	83 c0 01             	add    eax,0x1
c000f2ec:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f2f2:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2f7:	75 d3                	jne    c000f2cc <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f2f9:	83 c4 3c             	add    esp,0x3c
c000f2fc:	5b                   	pop    ebx
c000f2fd:	5e                   	pop    esi
c000f2fe:	5f                   	pop    edi
c000f2ff:	5d                   	pop    ebp
c000f300:	c3                   	ret    
c000f301:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f309:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f311:	e9 3b fe ff ff       	jmp    c000f151 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000f316 <Pipe::isAtty()>:
c000f316:	31 c0                	xor    eax,eax
c000f318:	c3                   	ret    
c000f319:	90                   	nop

c000f31a <Pipe::~Pipe()>:
c000f31a:	83 ec 0c             	sub    esp,0xc
c000f31d:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c000f322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f326:	89 10                	mov    DWORD PTR [eax],edx
c000f328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32c:	83 ec 0c             	sub    esp,0xc
c000f32f:	50                   	push   eax
c000f330:	e8 91 2a 00 00       	call   c0011dc6 <UnixFile::~UnixFile()>
c000f335:	83 c4 10             	add    esp,0x10
c000f338:	90                   	nop
c000f339:	83 c4 0c             	add    esp,0xc
c000f33c:	c3                   	ret    
c000f33d:	90                   	nop

c000f33e <Pipe::~Pipe()>:
c000f33e:	83 ec 0c             	sub    esp,0xc
c000f341:	83 ec 0c             	sub    esp,0xc
c000f344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f348:	e8 cd ff ff ff       	call   c000f31a <Pipe::~Pipe()>
c000f34d:	83 c4 10             	add    esp,0x10
c000f350:	83 ec 08             	sub    esp,0x8
c000f353:	6a 20                	push   0x20
c000f355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f359:	e8 a2 d3 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c000f35e:	83 c4 10             	add    esp,0x10
c000f361:	83 c4 0c             	add    esp,0xc
c000f364:	c3                   	ret    
c000f365:	90                   	nop

c000f366 <Pipe::write(unsigned long long, void*, int*)>:
c000f366:	55                   	push   ebp
c000f367:	57                   	push   edi
c000f368:	56                   	push   esi
c000f369:	53                   	push   ebx
c000f36a:	83 ec 1c             	sub    esp,0x1c
c000f36d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f371:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f375:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f378:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f37c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f37f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f383:	89 d8                	mov    eax,ebx
c000f385:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f388:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f38c:	89 d6                	mov    esi,edx
c000f38e:	89 d7                	mov    edi,edx
c000f390:	c1 ff 1f             	sar    edi,0x1f
c000f393:	03 34 24             	add    esi,DWORD PTR [esp]
c000f396:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f39a:	c1 f8 1f             	sar    eax,0x1f
c000f39d:	39 f3                	cmp    ebx,esi
c000f39f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3a7:	19 f8                	sbb    eax,edi
c000f3a9:	b8 01 00 00 00       	mov    eax,0x1
c000f3ae:	72 6e                	jb     c000f41e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f3b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3b3:	01 d0                	add    eax,edx
c000f3b5:	99                   	cdq    
c000f3b6:	f7 fb                	idiv   ebx
c000f3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3bc:	29 d3                	sub    ebx,edx
c000f3be:	89 d7                	mov    edi,edx
c000f3c0:	89 de                	mov    esi,ebx
c000f3c2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f3c5:	c1 fb 1f             	sar    ebx,0x1f
c000f3c8:	39 f2                	cmp    edx,esi
c000f3ca:	19 d8                	sbb    eax,ebx
c000f3cc:	b8 00 00 00 00       	mov    eax,0x0
c000f3d1:	72 04                	jb     c000f3d7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f3d3:	89 d0                	mov    eax,edx
c000f3d5:	29 f0                	sub    eax,esi
c000f3d7:	89 d3                	mov    ebx,edx
c000f3d9:	29 c3                	sub    ebx,eax
c000f3db:	74 0b                	je     c000f3e8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f3dd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f3e0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f3e4:	89 d9                	mov    ecx,ebx
c000f3e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3e8:	85 c0                	test   eax,eax
c000f3ea:	74 0d                	je     c000f3f9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f3ec:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f3f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f3f3:	89 de                	mov    esi,ebx
c000f3f5:	89 c1                	mov    ecx,eax
c000f3f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f3fc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f401:	75 10                	jne    c000f413 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f403:	83 ec 0c             	sub    esp,0xc
c000f406:	68 91 21 02 c0       	push   0xc0022191
c000f40b:	e8 b2 f8 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f410:	83 c4 10             	add    esp,0x10
c000f413:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f417:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f41a:	89 08                	mov    DWORD PTR [eax],ecx
c000f41c:	31 c0                	xor    eax,eax
c000f41e:	83 c4 1c             	add    esp,0x1c
c000f421:	5b                   	pop    ebx
c000f422:	5e                   	pop    esi
c000f423:	5f                   	pop    edi
c000f424:	5d                   	pop    ebp
c000f425:	c3                   	ret    

c000f426 <Pipe::read(unsigned long long, void*, int*)>:
c000f426:	55                   	push   ebp
c000f427:	57                   	push   edi
c000f428:	56                   	push   esi
c000f429:	53                   	push   ebx
c000f42a:	83 ec 1c             	sub    esp,0x1c
c000f42d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f431:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f435:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f439:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f43c:	89 c8                	mov    eax,ecx
c000f43e:	99                   	cdq    
c000f43f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f443:	74 27                	je     c000f46c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f445:	39 f9                	cmp    ecx,edi
c000f447:	89 d1                	mov    ecx,edx
c000f449:	19 f1                	sbb    ecx,esi
c000f44b:	73 1f                	jae    c000f46c <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f44d:	fa                   	cli    
c000f44e:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f454:	e8 47 60 00 00       	call   c00154a0 <schedule()>
c000f459:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f460:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f467:	75 d0                	jne    c000f439 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f469:	fb                   	sti    
c000f46a:	eb cd                	jmp    c000f439 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f46c:	39 f8                	cmp    eax,edi
c000f46e:	89 d1                	mov    ecx,edx
c000f470:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f473:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f477:	19 f1                	sbb    ecx,esi
c000f479:	73 07                	jae    c000f482 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000f47b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f47e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f482:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f485:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f488:	29 f7                	sub    edi,esi
c000f48a:	89 f8                	mov    eax,edi
c000f48c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f490:	99                   	cdq    
c000f491:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f498:	19 d0                	sbb    eax,edx
c000f49a:	73 07                	jae    c000f4a3 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000f49c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f49f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4a3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f4a6:	89 ea                	mov    edx,ebp
c000f4a8:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f4ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f4b1:	74 0d                	je     c000f4c0 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000f4b3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4b6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4c0:	85 d2                	test   edx,edx
c000f4c2:	74 11                	je     c000f4d5 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000f4c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4c8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f4cb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f4cf:	89 d1                	mov    ecx,edx
c000f4d1:	89 c7                	mov    edi,eax
c000f4d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f4d8:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f4db:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f4de:	99                   	cdq    
c000f4df:	89 f7                	mov    edi,esi
c000f4e1:	03 04 24             	add    eax,DWORD PTR [esp]
c000f4e4:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f4e8:	c1 ff 1f             	sar    edi,0x1f
c000f4eb:	57                   	push   edi
c000f4ec:	56                   	push   esi
c000f4ed:	52                   	push   edx
c000f4ee:	50                   	push   eax
c000f4ef:	e8 10 07 01 00       	call   c001fc04 <__umoddi3>
c000f4f4:	83 c4 10             	add    esp,0x10
c000f4f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f4fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f4ff:	75 10                	jne    c000f511 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000f501:	83 ec 0c             	sub    esp,0xc
c000f504:	68 ae 21 02 c0       	push   0xc00221ae
c000f509:	e8 b4 f7 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f515:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f518:	89 10                	mov    DWORD PTR [eax],edx
c000f51a:	83 c4 1c             	add    esp,0x1c
c000f51d:	31 c0                	xor    eax,eax
c000f51f:	5b                   	pop    ebx
c000f520:	5e                   	pop    esi
c000f521:	5f                   	pop    edi
c000f522:	5d                   	pop    ebp
c000f523:	c3                   	ret    

c000f524 <Pipe::Pipe(int)>:
c000f524:	83 ec 0c             	sub    esp,0xc
c000f527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f52b:	83 ec 08             	sub    esp,0x8
c000f52e:	6a 00                	push   0x0
c000f530:	50                   	push   eax
c000f531:	e8 aa 26 00 00       	call   c0011be0 <UnixFile::UnixFile(int)>
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c000f53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f542:	89 10                	mov    DWORD PTR [eax],edx
c000f544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f548:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f54c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f553:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f569:	83 ec 0c             	sub    esp,0xc
c000f56c:	50                   	push   eax
c000f56d:	e8 09 f4 ff ff       	call   c000e97b <malloc>
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	89 c2                	mov    edx,eax
c000f577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f582:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f586:	90                   	nop
c000f587:	83 c4 0c             	add    esp,0xc
c000f58a:	c3                   	ret    

c000f58b <KePowerThread(void*)>:
c000f58b:	83 ec 0c             	sub    esp,0xc
c000f58e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f595:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f59c:	75 01                	jne    c000f59f <KePowerThread(void*)+0x14>
c000f59e:	fb                   	sti    
c000f59f:	83 ec 0c             	sub    esp,0xc
c000f5a2:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f5a9:	6a 0a                	push   0xa
c000f5ab:	e8 ec 60 00 00       	call   c001569c <sleep(unsigned int)>
c000f5b0:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f5b7:	83 c4 10             	add    esp,0x10
c000f5ba:	eb e3                	jmp    c000f59f <KePowerThread(void*)+0x14>

c000f5bc <KeChangePowerSettings(PowerSettings)>:
c000f5bc:	57                   	push   edi
c000f5bd:	b9 09 00 00 00       	mov    ecx,0x9
c000f5c2:	56                   	push   esi
c000f5c3:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f5c8:	fc                   	cld    
c000f5c9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5cf:	5e                   	pop    esi
c000f5d0:	5f                   	pop    edi
c000f5d1:	c3                   	ret    

c000f5d2 <KeUserIOReceived()>:
c000f5d2:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f5dc:	c3                   	ret    

c000f5dd <KeHandlePowerButton()>:
c000f5dd:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f5e2:	83 f8 02             	cmp    eax,0x2
c000f5e5:	75 05                	jne    c000f5ec <KeHandlePowerButton()+0xf>
c000f5e7:	e9 50 e1 ff ff       	jmp    c000d73c <KeShutdown()>
c000f5ec:	48                   	dec    eax
c000f5ed:	75 05                	jne    c000f5f4 <KeHandlePowerButton()+0x17>
c000f5ef:	e9 6c e1 ff ff       	jmp    c000d760 <KeSleep()>
c000f5f4:	c3                   	ret    

c000f5f5 <KeHandleSleepButton()>:
c000f5f5:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f5fa:	83 f8 02             	cmp    eax,0x2
c000f5fd:	75 05                	jne    c000f604 <KeHandleSleepButton()+0xf>
c000f5ff:	e9 38 e1 ff ff       	jmp    c000d73c <KeShutdown()>
c000f604:	48                   	dec    eax
c000f605:	75 05                	jne    c000f60c <KeHandleSleepButton()+0x17>
c000f607:	e9 54 e1 ff ff       	jmp    c000d760 <KeSleep()>
c000f60c:	c3                   	ret    

c000f60d <KeSetupPowerManager()>:
c000f60d:	83 ec 0c             	sub    esp,0xc
c000f610:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f61a:	68 f0 00 00 00       	push   0xf0
c000f61f:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f626:	6a 00                	push   0x0
c000f628:	68 8b f5 00 c0       	push   0xc000f58b
c000f62d:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f633:	e8 18 5c 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c000f638:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f642:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f64c:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f656:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f660:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f66a:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f674:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f67e:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f688:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f692:	83 c4 1c             	add    esp,0x1c
c000f695:	c3                   	ret    

c000f696 <KeRand()>:
c000f696:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f6a0:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f6aa:	53                   	push   ebx
c000f6ab:	01 c1                	add    ecx,eax
c000f6ad:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6b2:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f6b8:	01 ca                	add    edx,ecx
c000f6ba:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6bf:	83 d2 00             	adc    edx,0x0
c000f6c2:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6c7:	0f b7 da             	movzx  ebx,dx
c000f6ca:	89 da                	mov    edx,ebx
c000f6cc:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f6d2:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f6d6:	5b                   	pop    ebx
c000f6d7:	c3                   	ret    

c000f6d8 <KeSeedRand(unsigned int)>:
c000f6d8:	53                   	push   ebx
c000f6d9:	83 ec 08             	sub    esp,0x8
c000f6dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6e0:	e8 d7 8f 00 00       	call   c00186bc <HalGetRand()>
c000f6e5:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f6ef:	31 d8                	xor    eax,ebx
c000f6f1:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6f6:	e8 9b ff ff ff       	call   c000f696 <KeRand()>
c000f6fb:	83 c4 08             	add    esp,0x8
c000f6fe:	5b                   	pop    ebx
c000f6ff:	eb 95                	jmp    c000f696 <KeRand()>

c000f701 <KeInitRand()>:
c000f701:	83 ec 0c             	sub    esp,0xc
c000f704:	e8 d7 8d 00 00       	call   c00184e0 <HalQueryPerformanceCounter()>
c000f709:	0f 20 da             	mov    edx,cr3
c000f70c:	0f 22 da             	mov    cr3,edx
c000f70f:	0f 20 da             	mov    edx,cr3
c000f712:	0f 22 da             	mov    cr3,edx
c000f715:	0f 20 da             	mov    edx,cr3
c000f718:	0f 22 da             	mov    cr3,edx
c000f71b:	0f 20 da             	mov    edx,cr3
c000f71e:	0f 22 da             	mov    cr3,edx
c000f721:	83 ec 0c             	sub    esp,0xc
c000f724:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f729:	50                   	push   eax
c000f72a:	e8 a9 ff ff ff       	call   c000f6d8 <KeSeedRand(unsigned int)>
c000f72f:	83 c4 1c             	add    esp,0x1c
c000f732:	c3                   	ret    
c000f733:	90                   	nop

c000f734 <KeResolveCompatibilitySymbol(char*)>:
c000f734:	83 ec 0c             	sub    esp,0xc
c000f737:	83 ec 08             	sub    esp,0x8
c000f73a:	68 e8 21 02 c0       	push   0xc00221e8
c000f73f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f743:	e8 08 10 ff ff       	call   c0000750 <strcmp>
c000f748:	83 c4 10             	add    esp,0x10
c000f74b:	85 c0                	test   eax,eax
c000f74d:	0f 94 c0             	sete   al
c000f750:	0f b6 c0             	movzx  eax,al
c000f753:	85 c0                	test   eax,eax
c000f755:	74 0d                	je     c000f764 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f757:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f75c:	e9 8b 01 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f761:	8d 76 00             	lea    esi,[esi+0x0]
c000f764:	83 ec 08             	sub    esp,0x8
c000f767:	68 f1 21 02 c0       	push   0xc00221f1
c000f76c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f770:	e8 db 0f ff ff       	call   c0000750 <strcmp>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	85 c0                	test   eax,eax
c000f77a:	0f 94 c0             	sete   al
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	85 c0                	test   eax,eax
c000f782:	74 0c                	je     c000f790 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f784:	b8 04 fb 01 c0       	mov    eax,0xc001fb04
c000f789:	e9 5e 01 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f78e:	66 90                	xchg   ax,ax
c000f790:	83 ec 08             	sub    esp,0x8
c000f793:	68 fb 21 02 c0       	push   0xc00221fb
c000f798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f79c:	e8 af 0f ff ff       	call   c0000750 <strcmp>
c000f7a1:	83 c4 10             	add    esp,0x10
c000f7a4:	85 c0                	test   eax,eax
c000f7a6:	0f 94 c0             	sete   al
c000f7a9:	0f b6 c0             	movzx  eax,al
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	74 0c                	je     c000f7bc <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7b0:	b8 38 f8 01 c0       	mov    eax,0xc001f838
c000f7b5:	e9 32 01 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ba:	66 90                	xchg   ax,ax
c000f7bc:	83 ec 08             	sub    esp,0x8
c000f7bf:	68 04 22 02 c0       	push   0xc0022204
c000f7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c8:	e8 83 0f ff ff       	call   c0000750 <strcmp>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	85 c0                	test   eax,eax
c000f7d2:	0f 94 c0             	sete   al
c000f7d5:	0f b6 c0             	movzx  eax,al
c000f7d8:	85 c0                	test   eax,eax
c000f7da:	74 0c                	je     c000f7e8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f7dc:	b8 c2 ec 00 c0       	mov    eax,0xc000ecc2
c000f7e1:	e9 06 01 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	83 ec 08             	sub    esp,0x8
c000f7eb:	68 17 22 02 c0       	push   0xc0022217
c000f7f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f4:	e8 57 0f ff ff       	call   c0000750 <strcmp>
c000f7f9:	83 c4 10             	add    esp,0x10
c000f7fc:	85 c0                	test   eax,eax
c000f7fe:	0f 94 c0             	sete   al
c000f801:	0f b6 c0             	movzx  eax,al
c000f804:	85 c0                	test   eax,eax
c000f806:	74 0c                	je     c000f814 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f808:	b8 40 c6 00 c0       	mov    eax,0xc000c640
c000f80d:	e9 da 00 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f812:	66 90                	xchg   ax,ax
c000f814:	83 ec 08             	sub    esp,0x8
c000f817:	68 34 22 02 c0       	push   0xc0022234
c000f81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f820:	e8 2b 0f ff ff       	call   c0000750 <strcmp>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	85 c0                	test   eax,eax
c000f82a:	0f 94 c0             	sete   al
c000f82d:	0f b6 c0             	movzx  eax,al
c000f830:	85 c0                	test   eax,eax
c000f832:	74 0c                	je     c000f840 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f834:	b8 04 fc 01 c0       	mov    eax,0xc001fc04
c000f839:	e9 ae 00 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f83e:	66 90                	xchg   ax,ax
c000f840:	83 ec 08             	sub    esp,0x8
c000f843:	68 3e 22 02 c0       	push   0xc002223e
c000f848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84c:	e8 ff 0e ff ff       	call   c0000750 <strcmp>
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	85 c0                	test   eax,eax
c000f856:	0f 94 c0             	sete   al
c000f859:	0f b6 c0             	movzx  eax,al
c000f85c:	85 c0                	test   eax,eax
c000f85e:	74 0c                	je     c000f86c <KeResolveCompatibilitySymbol(char*)+0x138>
c000f860:	b8 84 f9 01 c0       	mov    eax,0xc001f984
c000f865:	e9 82 00 00 00       	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f86a:	66 90                	xchg   ax,ax
c000f86c:	83 ec 08             	sub    esp,0x8
c000f86f:	68 47 22 02 c0       	push   0xc0022247
c000f874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f878:	e8 d3 0e ff ff       	call   c0000750 <strcmp>
c000f87d:	83 c4 10             	add    esp,0x10
c000f880:	85 c0                	test   eax,eax
c000f882:	0f 94 c0             	sete   al
c000f885:	0f b6 c0             	movzx  eax,al
c000f888:	85 c0                	test   eax,eax
c000f88a:	74 08                	je     c000f894 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f88c:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f891:	eb 59                	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f893:	90                   	nop
c000f894:	83 ec 08             	sub    esp,0x8
c000f897:	68 5f 22 02 c0       	push   0xc002225f
c000f89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a0:	e8 ab 0e ff ff       	call   c0000750 <strcmp>
c000f8a5:	83 c4 10             	add    esp,0x10
c000f8a8:	85 c0                	test   eax,eax
c000f8aa:	0f 94 c0             	sete   al
c000f8ad:	0f b6 c0             	movzx  eax,al
c000f8b0:	85 c0                	test   eax,eax
c000f8b2:	74 08                	je     c000f8bc <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8b4:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8b9:	eb 31                	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8bb:	90                   	nop
c000f8bc:	83 ec 08             	sub    esp,0x8
c000f8bf:	68 6c 22 02 c0       	push   0xc002226c
c000f8c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c8:	e8 83 0e ff ff       	call   c0000750 <strcmp>
c000f8cd:	83 c4 10             	add    esp,0x10
c000f8d0:	85 c0                	test   eax,eax
c000f8d2:	0f 94 c0             	sete   al
c000f8d5:	0f b6 c0             	movzx  eax,al
c000f8d8:	85 c0                	test   eax,eax
c000f8da:	74 08                	je     c000f8e4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f8dc:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f8e1:	eb 09                	jmp    c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8e3:	90                   	nop
c000f8e4:	b8 00 00 00 00       	mov    eax,0x0
c000f8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8ec:	83 c4 0c             	add    esp,0xc
c000f8ef:	c3                   	ret    

c000f8f0 <Semaphore::Semaphore(int)>:
c000f8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8f8:	89 10                	mov    DWORD PTR [eax],edx
c000f8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8fe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f905:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f909:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f914:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f91b:	90                   	nop
c000f91c:	c3                   	ret    
c000f91d:	90                   	nop
c000f91e:	66 90                	xchg   ax,ax

c000f920 <Semaphore::tryAcquire()>:
c000f920:	83 ec 0c             	sub    esp,0xc
c000f923:	fa                   	cli    
c000f924:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f929:	83 c0 01             	add    eax,0x1
c000f92c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f931:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f936:	83 c0 01             	add    eax,0x1
c000f939:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f942:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f949:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94b:	39 c2                	cmp    edx,eax
c000f94d:	7d 59                	jge    c000f9a8 <Semaphore::tryAcquire()+0x88>
c000f94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f953:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f956:	8d 50 01             	lea    edx,[eax+0x1]
c000f959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f960:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f965:	83 e8 01             	sub    eax,0x1
c000f968:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f96d:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f972:	85 c0                	test   eax,eax
c000f974:	75 1a                	jne    c000f990 <Semaphore::tryAcquire()+0x70>
c000f976:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f97b:	85 c0                	test   eax,eax
c000f97d:	74 11                	je     c000f990 <Semaphore::tryAcquire()+0x70>
c000f97f:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f989:	e8 12 5b 00 00       	call   c00154a0 <schedule()>
c000f98e:	66 90                	xchg   ax,ax
c000f990:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f998:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f99d:	85 c0                	test   eax,eax
c000f99f:	75 03                	jne    c000f9a4 <Semaphore::tryAcquire()+0x84>
c000f9a1:	fb                   	sti    
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	b0 01                	mov    al,0x1
c000f9a6:	eb 48                	jmp    c000f9f0 <Semaphore::tryAcquire()+0xd0>
c000f9a8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9ad:	83 e8 01             	sub    eax,0x1
c000f9b0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9b5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9ba:	85 c0                	test   eax,eax
c000f9bc:	75 1a                	jne    c000f9d8 <Semaphore::tryAcquire()+0xb8>
c000f9be:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9c3:	85 c0                	test   eax,eax
c000f9c5:	74 11                	je     c000f9d8 <Semaphore::tryAcquire()+0xb8>
c000f9c7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9d1:	e8 ca 5a 00 00       	call   c00154a0 <schedule()>
c000f9d6:	66 90                	xchg   ax,ax
c000f9d8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9e0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9e5:	85 c0                	test   eax,eax
c000f9e7:	75 03                	jne    c000f9ec <Semaphore::tryAcquire()+0xcc>
c000f9e9:	fb                   	sti    
c000f9ea:	66 90                	xchg   ax,ax
c000f9ec:	b0 00                	mov    al,0x0
c000f9ee:	66 90                	xchg   ax,ax
c000f9f0:	83 c4 0c             	add    esp,0xc
c000f9f3:	c3                   	ret    

c000f9f4 <Semaphore::assertLocked(char const*)>:
c000f9f4:	83 ec 0c             	sub    esp,0xc
c000f9f7:	fa                   	cli    
c000f9f8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9fd:	83 c0 01             	add    eax,0x1
c000fa00:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa05:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa0a:	83 c0 01             	add    eax,0x1
c000fa0d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa16:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa1f:	39 c2                	cmp    edx,eax
c000fa21:	7d 11                	jge    c000fa34 <Semaphore::assertLocked(char const*)+0x40>
c000fa23:	83 ec 0c             	sub    esp,0xc
c000fa26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa2a:	e8 93 f2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	66 90                	xchg   ax,ax
c000fa34:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa39:	83 e8 01             	sub    eax,0x1
c000fa3c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa41:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa46:	85 c0                	test   eax,eax
c000fa48:	75 1a                	jne    c000fa64 <Semaphore::assertLocked(char const*)+0x70>
c000fa4a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fa4f:	85 c0                	test   eax,eax
c000fa51:	74 11                	je     c000fa64 <Semaphore::assertLocked(char const*)+0x70>
c000fa53:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fa5d:	e8 3e 5a 00 00       	call   c00154a0 <schedule()>
c000fa62:	66 90                	xchg   ax,ax
c000fa64:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fa6c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa71:	85 c0                	test   eax,eax
c000fa73:	75 03                	jne    c000fa78 <Semaphore::assertLocked(char const*)+0x84>
c000fa75:	fb                   	sti    
c000fa76:	66 90                	xchg   ax,ax
c000fa78:	90                   	nop
c000fa79:	83 c4 0c             	add    esp,0xc
c000fa7c:	c3                   	ret    
c000fa7d:	90                   	nop
c000fa7e:	66 90                	xchg   ax,ax

c000fa80 <Semaphore::acquire(int)>:
c000fa80:	83 ec 1c             	sub    esp,0x1c
c000fa83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fa88:	0f 84 9a 00 00 00    	je     c000fb28 <Semaphore::acquire(int)+0xa8>
c000fa8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa96:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fa9b:	90                   	nop
c000fa9c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000faa1:	85 c0                	test   eax,eax
c000faa3:	74 77                	je     c000fb1c <Semaphore::acquire(int)+0x9c>
c000faa5:	83 ec 0c             	sub    esp,0xc
c000faa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faac:	e8 6f fe ff ff       	call   c000f920 <Semaphore::tryAcquire()>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	83 f0 01             	xor    eax,0x1
c000fab7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fabb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fabf:	83 f0 01             	xor    eax,0x1
c000fac2:	0f b6 c0             	movzx  eax,al
c000fac5:	85 c0                	test   eax,eax
c000fac7:	75 4f                	jne    c000fb18 <Semaphore::acquire(int)+0x98>
c000fac9:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000face:	7f 2c                	jg     c000fafc <Semaphore::acquire(int)+0x7c>
c000fad0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fad4:	89 d0                	mov    eax,edx
c000fad6:	c1 e0 02             	shl    eax,0x2
c000fad9:	01 d0                	add    eax,edx
c000fadb:	01 c0                	add    eax,eax
c000fadd:	83 ec 0c             	sub    esp,0xc
c000fae0:	50                   	push   eax
c000fae1:	e8 a2 5b 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000faed:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000faf1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000faf9:	eb a1                	jmp    c000fa9c <Semaphore::acquire(int)+0x1c>
c000fafb:	90                   	nop
c000fafc:	83 ec 0c             	sub    esp,0xc
c000faff:	68 90 01 00 00       	push   0x190
c000fb04:	e8 7f 5b 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb11:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb16:	eb 84                	jmp    c000fa9c <Semaphore::acquire(int)+0x1c>
c000fb18:	90                   	nop
c000fb19:	8d 76 00             	lea    esi,[esi+0x0]
c000fb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb20:	e9 fb 00 00 00       	jmp    c000fc20 <Semaphore::acquire(int)+0x1a0>
c000fb25:	8d 76 00             	lea    esi,[esi+0x0]
c000fb28:	fa                   	cli    
c000fb29:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb2e:	83 c0 01             	add    eax,0x1
c000fb31:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb36:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb3b:	83 c0 01             	add    eax,0x1
c000fb3e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb47:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb50:	39 c2                	cmp    edx,eax
c000fb52:	7d 14                	jge    c000fb68 <Semaphore::acquire(int)+0xe8>
c000fb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb5b:	8d 50 01             	lea    edx,[eax+0x1]
c000fb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb65:	eb 6d                	jmp    c000fbd4 <Semaphore::acquire(int)+0x154>
c000fb67:	90                   	nop
c000fb68:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb7d:	85 c0                	test   eax,eax
c000fb7f:	75 13                	jne    c000fb94 <Semaphore::acquire(int)+0x114>
c000fb81:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb86:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb8f:	eb 17                	jmp    c000fba8 <Semaphore::acquire(int)+0x128>
c000fb91:	8d 76 00             	lea    esi,[esi+0x0]
c000fb94:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fb99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fba0:	8b 12                	mov    edx,DWORD PTR [edx]
c000fba2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fba5:	8d 76 00             	lea    esi,[esi+0x0]
c000fba8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbad:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbb6:	83 ec 0c             	sub    esp,0xc
c000fbb9:	68 7c 22 02 c0       	push   0xc002227c
c000fbbe:	e8 a1 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbc3:	83 c4 10             	add    esp,0x10
c000fbc6:	83 ec 0c             	sub    esp,0xc
c000fbc9:	6a 05                	push   0x5
c000fbcb:	e8 90 59 00 00       	call   c0015560 <blockTask(TaskState)>
c000fbd0:	83 c4 10             	add    esp,0x10
c000fbd3:	90                   	nop
c000fbd4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbd9:	83 e8 01             	sub    eax,0x1
c000fbdc:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbe1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbe6:	85 c0                	test   eax,eax
c000fbe8:	75 1a                	jne    c000fc04 <Semaphore::acquire(int)+0x184>
c000fbea:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fbef:	85 c0                	test   eax,eax
c000fbf1:	74 11                	je     c000fc04 <Semaphore::acquire(int)+0x184>
c000fbf3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fbfd:	e8 9e 58 00 00       	call   c00154a0 <schedule()>
c000fc02:	66 90                	xchg   ax,ax
c000fc04:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fc0c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc11:	85 c0                	test   eax,eax
c000fc13:	75 03                	jne    c000fc18 <Semaphore::acquire(int)+0x198>
c000fc15:	fb                   	sti    
c000fc16:	66 90                	xchg   ax,ax
c000fc18:	b8 00 00 00 00       	mov    eax,0x0
c000fc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc20:	83 c4 1c             	add    esp,0x1c
c000fc23:	c3                   	ret    

c000fc24 <Semaphore::acquire()>:
c000fc24:	83 ec 0c             	sub    esp,0xc
c000fc27:	83 ec 08             	sub    esp,0x8
c000fc2a:	6a 00                	push   0x0
c000fc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc30:	e8 4b fe ff ff       	call   c000fa80 <Semaphore::acquire(int)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	90                   	nop
c000fc39:	83 c4 0c             	add    esp,0xc
c000fc3c:	c3                   	ret    
c000fc3d:	90                   	nop
c000fc3e:	66 90                	xchg   ax,ax

c000fc40 <Semaphore::release()>:
c000fc40:	83 ec 1c             	sub    esp,0x1c
c000fc43:	fa                   	cli    
c000fc44:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc49:	83 c0 01             	add    eax,0x1
c000fc4c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc51:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc56:	83 c0 01             	add    eax,0x1
c000fc59:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc65:	85 c0                	test   eax,eax
c000fc67:	74 2b                	je     c000fc94 <Semaphore::release()+0x54>
c000fc69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc78:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc82:	83 ec 0c             	sub    esp,0xc
c000fc85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc89:	e8 22 5b 00 00       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c000fc8e:	83 c4 10             	add    esp,0x10
c000fc91:	eb 15                	jmp    c000fca8 <Semaphore::release()+0x68>
c000fc93:	90                   	nop
c000fc94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc9b:	8d 50 ff             	lea    edx,[eax-0x1]
c000fc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca5:	8d 76 00             	lea    esi,[esi+0x0]
c000fca8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcad:	83 e8 01             	sub    eax,0x1
c000fcb0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fcb5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcba:	85 c0                	test   eax,eax
c000fcbc:	75 1a                	jne    c000fcd8 <Semaphore::release()+0x98>
c000fcbe:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fcc3:	85 c0                	test   eax,eax
c000fcc5:	74 11                	je     c000fcd8 <Semaphore::release()+0x98>
c000fcc7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fcd1:	e8 ca 57 00 00       	call   c00154a0 <schedule()>
c000fcd6:	66 90                	xchg   ax,ax
c000fcd8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fce0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fce5:	85 c0                	test   eax,eax
c000fce7:	75 03                	jne    c000fcec <Semaphore::release()+0xac>
c000fce9:	fb                   	sti    
c000fcea:	66 90                	xchg   ax,ax
c000fcec:	90                   	nop
c000fced:	83 c4 1c             	add    esp,0x1c
c000fcf0:	c3                   	ret    

c000fcf1 <KiSigKill(int)>:
c000fcf1:	83 ec 0c             	sub    esp,0xc
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a ff                	push   0xffffffff
c000fcfa:	6a 01                	push   0x1
c000fcfc:	e8 51 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd01:	83 c4 1c             	add    esp,0x1c
c000fd04:	c3                   	ret    

c000fd05 <KiDefaultSignalHandlerIgnore(int)>:
c000fd05:	c3                   	ret    

c000fd06 <KiDefaultSignalHandlerPause(int)>:
c000fd06:	57                   	push   edi
c000fd07:	b9 07 00 00 00       	mov    ecx,0x7
c000fd0c:	56                   	push   esi
c000fd0d:	be d7 22 02 c0       	mov    esi,0xc00222d7
c000fd12:	83 ec 24             	sub    esp,0x24
c000fd15:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd19:	fc                   	cld    
c000fd1a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd1c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd20:	50                   	push   eax
c000fd21:	6a 00                	push   0x0
c000fd23:	6a 00                	push   0x0
c000fd25:	6a 27                	push   0x27
c000fd27:	e8 26 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd2c:	83 c4 34             	add    esp,0x34
c000fd2f:	5e                   	pop    esi
c000fd30:	5f                   	pop    edi
c000fd31:	c3                   	ret    

c000fd32 <KiDefaultSignalHandlerResume(int)>:
c000fd32:	57                   	push   edi
c000fd33:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd38:	56                   	push   esi
c000fd39:	be f3 22 02 c0       	mov    esi,0xc00222f3
c000fd3e:	83 ec 24             	sub    esp,0x24
c000fd41:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd45:	fc                   	cld    
c000fd46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd48:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd4c:	50                   	push   eax
c000fd4d:	6a 00                	push   0x0
c000fd4f:	6a 00                	push   0x0
c000fd51:	6a 27                	push   0x27
c000fd53:	e8 fa 52 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd58:	83 c4 34             	add    esp,0x34
c000fd5b:	5e                   	pop    esi
c000fd5c:	5f                   	pop    edi
c000fd5d:	c3                   	ret    

c000fd5e <KeDeinitSignals(SigHandlerBlock*)>:
c000fd5e:	e9 28 ec ff ff       	jmp    c000e98b <free>

c000fd63 <KeInitSignals()>:
c000fd63:	53                   	push   ebx
c000fd64:	83 ec 14             	sub    esp,0x14
c000fd67:	68 c8 00 00 00       	push   0xc8
c000fd6c:	e8 0a ec ff ff       	call   c000e97b <malloc>
c000fd71:	83 c4 0c             	add    esp,0xc
c000fd74:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fd7e:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fd88:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fd8f:	89 c3                	mov    ebx,eax
c000fd91:	6a 20                	push   0x20
c000fd93:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fd99:	6a 00                	push   0x0
c000fd9b:	50                   	push   eax
c000fd9c:	e8 4f 07 ff ff       	call   c00004f0 <memset>
c000fda1:	83 c4 0c             	add    esp,0xc
c000fda4:	6a 44                	push   0x44
c000fda6:	6a 00                	push   0x0
c000fda8:	53                   	push   ebx
c000fda9:	e8 42 07 ff ff       	call   c00004f0 <memset>
c000fdae:	89 d8                	mov    eax,ebx
c000fdb0:	83 c4 18             	add    esp,0x18
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c3                   	ret    

c000fdb5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fdb5:	53                   	push   ebx
c000fdb6:	b8 01 00 00 00       	mov    eax,0x1
c000fdbb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdc3:	83 f9 10             	cmp    ecx,0x10
c000fdc6:	7f 21                	jg     c000fde9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fdc8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fdcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdcf:	89 03                	mov    DWORD PTR [ebx],eax
c000fdd1:	b8 01 00 00 00       	mov    eax,0x1
c000fdd6:	d3 e0                	shl    eax,cl
c000fdd8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fddc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fddf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fde7:	31 c0                	xor    eax,eax
c000fde9:	5b                   	pop    ebx
c000fdea:	c3                   	ret    

c000fdeb <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fdeb:	55                   	push   ebp
c000fdec:	57                   	push   edi
c000fded:	bf 08 00 00 00       	mov    edi,0x8
c000fdf2:	56                   	push   esi
c000fdf3:	53                   	push   ebx
c000fdf4:	83 ec 18             	sub    esp,0x18
c000fdf7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fdfb:	68 10 23 02 c0       	push   0xc0022310
c000fe00:	e8 5f 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe05:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe0c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	31 c9                	xor    ecx,ecx
c000fe17:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe1b:	99                   	cdq    
c000fe1c:	f7 ff                	idiv   edi
c000fe1e:	8d 42 24             	lea    eax,[edx+0x24]
c000fe21:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe25:	85 f6                	test   esi,esi
c000fe27:	75 1a                	jne    c000fe43 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe29:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe2d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe31:	50                   	push   eax
c000fe32:	50                   	push   eax
c000fe33:	52                   	push   edx
c000fe34:	68 21 23 02 c0       	push   0xc0022321
c000fe39:	e8 26 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe3e:	83 c4 10             	add    esp,0x10
c000fe41:	eb 1b                	jmp    c000fe5e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe43:	41                   	inc    ecx
c000fe44:	83 f9 08             	cmp    ecx,0x8
c000fe47:	75 ce                	jne    c000fe17 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe49:	83 ec 0c             	sub    esp,0xc
c000fe4c:	be 01 00 00 00       	mov    esi,0x1
c000fe51:	68 42 23 02 c0       	push   0xc0022342
c000fe56:	e8 09 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	83 c4 0c             	add    esp,0xc
c000fe61:	89 f0                	mov    eax,esi
c000fe63:	5b                   	pop    ebx
c000fe64:	5e                   	pop    esi
c000fe65:	5f                   	pop    edi
c000fe66:	5d                   	pop    ebp
c000fe67:	c3                   	ret    

c000fe68 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fe68:	55                   	push   ebp
c000fe69:	57                   	push   edi
c000fe6a:	56                   	push   esi
c000fe6b:	53                   	push   ebx
c000fe6c:	51                   	push   ecx
c000fe6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe71:	85 db                	test   ebx,ebx
c000fe73:	0f 84 bc 00 00 00    	je     c000ff35 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe79:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fe80:	0f 84 af 00 00 00    	je     c000ff35 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe86:	31 c9                	xor    ecx,ecx
c000fe88:	bf 08 00 00 00       	mov    edi,0x8
c000fe8d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fe93:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fe96:	99                   	cdq    
c000fe97:	f7 ff                	idiv   edi
c000fe99:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fea0:	85 ed                	test   ebp,ebp
c000fea2:	0f 84 9e 00 00 00    	je     c000ff46 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fea8:	89 e9                	mov    ecx,ebp
c000feaa:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000feb0:	bf 01 00 00 00       	mov    edi,0x1
c000feb5:	89 04 24             	mov    DWORD PTR [esp],eax
c000feb8:	d3 e7                	shl    edi,cl
c000feba:	31 c9                	xor    ecx,ecx
c000febc:	b8 01 00 00 00       	mov    eax,0x1
c000fec1:	d3 e0                	shl    eax,cl
c000fec3:	85 04 24             	test   DWORD PTR [esp],eax
c000fec6:	74 06                	je     c000fece <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fec8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fecc:	75 67                	jne    c000ff35 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fece:	41                   	inc    ecx
c000fecf:	83 f9 11             	cmp    ecx,0x11
c000fed2:	75 e8                	jne    c000febc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fed4:	46                   	inc    esi
c000fed5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fed8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fede:	09 f8                	or     eax,edi
c000fee0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000feeb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fef1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fef8:	31 c0                	xor    eax,eax
c000fefa:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff02:	74 09                	je     c000ff0d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff04:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff0b:	eb 06                	jmp    c000ff13 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff0d:	40                   	inc    eax
c000ff0e:	83 f8 08             	cmp    eax,0x8
c000ff11:	75 e7                	jne    c000fefa <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff13:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff1a:	83 fd 09             	cmp    ebp,0x9
c000ff1d:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff1f:	75 07                	jne    c000ff28 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff21:	b8 f1 fc 00 c0       	mov    eax,0xc000fcf1
c000ff26:	eb 31                	jmp    c000ff59 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff28:	83 f8 01             	cmp    eax,0x1
c000ff2b:	75 0c                	jne    c000ff39 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff2d:	f7 d7                	not    edi
c000ff2f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff35:	31 c0                	xor    eax,eax
c000ff37:	eb 20                	jmp    c000ff59 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff39:	85 c0                	test   eax,eax
c000ff3b:	75 1c                	jne    c000ff59 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff3d:	8b 04 ad a0 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbf60]
c000ff44:	eb 13                	jmp    c000ff59 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff46:	46                   	inc    esi
c000ff47:	41                   	inc    ecx
c000ff48:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff4e:	83 f9 08             	cmp    ecx,0x8
c000ff51:	0f 85 36 ff ff ff    	jne    c000fe8d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff57:	eb dc                	jmp    c000ff35 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff59:	5a                   	pop    edx
c000ff5a:	5b                   	pop    ebx
c000ff5b:	5e                   	pop    esi
c000ff5c:	5f                   	pop    edi
c000ff5d:	5d                   	pop    ebp
c000ff5e:	c3                   	ret    

c000ff5f <KiCheckSignalZ>:
c000ff5f:	83 ec 10             	sub    esp,0x10
c000ff62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff66:	50                   	push   eax
c000ff67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff6f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff75:	e8 ee fe ff ff       	call   c000fe68 <KeCheckSignal(SigHandlerBlock*, int*)>
c000ff7a:	5a                   	pop    edx
c000ff7b:	31 d2                	xor    edx,edx
c000ff7d:	59                   	pop    ecx
c000ff7e:	85 c0                	test   eax,eax
c000ff80:	74 19                	je     c000ff9b <KiCheckSignalZ+0x3c>
c000ff82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff88:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ff8b:	89 02                	mov    DWORD PTR [edx],eax
c000ff8d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ff94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff98:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ff9b:	89 d0                	mov    eax,edx
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	c3                   	ret    

c000ffa1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffa1:	56                   	push   esi
c000ffa2:	53                   	push   ebx
c000ffa3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffa8:	52                   	push   edx
c000ffa9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffb1:	d3 e3                	shl    ebx,cl
c000ffb3:	83 f9 10             	cmp    ecx,0x10
c000ffb6:	7f 08                	jg     c000ffc0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ffb8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ffbe:	75 10                	jne    c000ffd0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	68 53 23 02 c0       	push   0xc0022353
c000ffc8:	e8 f5 ec ff ff       	call   c000ecc2 <KePanic(char const*)>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	f7 d3                	not    ebx
c000ffd2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ffd8:	58                   	pop    eax
c000ffd9:	5b                   	pop    ebx
c000ffda:	5e                   	pop    esi
c000ffdb:	c3                   	ret    

c000ffdc <KiFinishSignalZ>:
c000ffdc:	53                   	push   ebx
c000ffdd:	83 ec 10             	sub    esp,0x10
c000ffe0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ffe4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ffe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffef:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000fff5:	e8 a7 ff ff ff       	call   c000ffa1 <KeCompleteSignal(SigHandlerBlock*, int)>
c000fffa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010000:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010007:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001000e:	83 c4 18             	add    esp,0x18
c0010011:	5b                   	pop    ebx
c0010012:	c3                   	ret    

c0010013 <SysSeekDir(regs*)>:
c0010013:	31 c0                	xor    eax,eax
c0010015:	31 d2                	xor    edx,edx
c0010017:	c3                   	ret    

c0010018 <SysTellDir(regs*)>:
c0010018:	31 c0                	xor    eax,eax
c001001a:	31 d2                	xor    edx,edx
c001001c:	c3                   	ret    

c001001d <SysVerify(regs*)>:
c001001d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010021:	31 d2                	xor    edx,edx
c0010023:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010026:	c3                   	ret    

c0010027 <SysGetArgc(regs*)>:
c0010027:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001002c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001002f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010035:	89 c2                	mov    edx,eax
c0010037:	c1 fa 1f             	sar    edx,0x1f
c001003a:	c3                   	ret    

c001003b <SysTTYName(regs*)>:
c001003b:	b8 01 00 00 00       	mov    eax,0x1
c0010040:	31 d2                	xor    edx,edx
c0010042:	c3                   	ret    

c0010043 <SysFormatDisk(regs*)>:
c0010043:	56                   	push   esi
c0010044:	53                   	push   ebx
c0010045:	83 ec 04             	sub    esp,0x4
c0010048:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001004c:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c0010052:	eb 28                	jmp    c001007c <SysFormatDisk(regs*)+0x39>
c0010054:	83 ec 0c             	sub    esp,0xc
c0010057:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001005a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001005d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001005f:	51                   	push   ecx
c0010060:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010063:	51                   	push   ecx
c0010064:	50                   	push   eax
c0010065:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001006c:	50                   	push   eax
c001006d:	53                   	push   ebx
c001006e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010071:	83 c4 20             	add    esp,0x20
c0010074:	83 f8 08             	cmp    eax,0x8
c0010077:	75 14                	jne    c001008d <SysFormatDisk(regs*)+0x4a>
c0010079:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001007c:	85 db                	test   ebx,ebx
c001007e:	75 d4                	jne    c0010054 <SysFormatDisk(regs*)+0x11>
c0010080:	83 c4 04             	add    esp,0x4
c0010083:	b8 03 00 00 00       	mov    eax,0x3
c0010088:	31 d2                	xor    edx,edx
c001008a:	5b                   	pop    ebx
c001008b:	5e                   	pop    esi
c001008c:	c3                   	ret    
c001008d:	85 c0                	test   eax,eax
c001008f:	74 1f                	je     c00100b0 <SysFormatDisk(regs*)+0x6d>
c0010091:	83 f8 09             	cmp    eax,0x9
c0010094:	74 0d                	je     c00100a3 <SysFormatDisk(regs*)+0x60>
c0010096:	83 c4 04             	add    esp,0x4
c0010099:	b8 02 00 00 00       	mov    eax,0x2
c001009e:	31 d2                	xor    edx,edx
c00100a0:	5b                   	pop    ebx
c00100a1:	5e                   	pop    esi
c00100a2:	c3                   	ret    
c00100a3:	83 c4 04             	add    esp,0x4
c00100a6:	b8 01 00 00 00       	mov    eax,0x1
c00100ab:	31 d2                	xor    edx,edx
c00100ad:	5b                   	pop    ebx
c00100ae:	5e                   	pop    esi
c00100af:	c3                   	ret    
c00100b0:	83 c4 04             	add    esp,0x4
c00100b3:	31 c0                	xor    eax,eax
c00100b5:	31 d2                	xor    edx,edx
c00100b7:	5b                   	pop    ebx
c00100b8:	5e                   	pop    esi
c00100b9:	c3                   	ret    

c00100ba <SysSetDiskVolumeLabel(regs*)>:
c00100ba:	56                   	push   esi
c00100bb:	53                   	push   ebx
c00100bc:	83 ec 04             	sub    esp,0x4
c00100bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100c6:	83 f8 19             	cmp    eax,0x19
c00100c9:	77 33                	ja     c00100fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00100cb:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c00100d2:	85 c9                	test   ecx,ecx
c00100d4:	74 28                	je     c00100fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00100d6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00100d9:	85 db                	test   ebx,ebx
c00100db:	74 21                	je     c00100fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00100dd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00100e3:	85 d2                	test   edx,edx
c00100e5:	74 17                	je     c00100fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00100e7:	8b 32                	mov    esi,DWORD PTR [edx]
c00100e9:	53                   	push   ebx
c00100ea:	50                   	push   eax
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	89 c2                	mov    edx,eax
c00100f5:	83 c4 04             	add    esp,0x4
c00100f8:	c1 fa 1f             	sar    edx,0x1f
c00100fb:	5b                   	pop    ebx
c00100fc:	5e                   	pop    esi
c00100fd:	c3                   	ret    
c00100fe:	83 c4 04             	add    esp,0x4
c0010101:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010106:	ba ff ff ff ff       	mov    edx,0xffffffff
c001010b:	5b                   	pop    ebx
c001010c:	5e                   	pop    esi
c001010d:	c3                   	ret    

c001010e <SysGetDiskVolumeLabel(regs*)>:
c001010e:	57                   	push   edi
c001010f:	56                   	push   esi
c0010110:	53                   	push   ebx
c0010111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010115:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010118:	83 fa 19             	cmp    edx,0x19
c001011b:	77 3c                	ja     c0010159 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001011d:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010124:	85 c9                	test   ecx,ecx
c0010126:	74 31                	je     c0010159 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010128:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001012b:	85 db                	test   ebx,ebx
c001012d:	74 2a                	je     c0010159 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001012f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010132:	85 f6                	test   esi,esi
c0010134:	74 23                	je     c0010159 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010136:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001013c:	85 c0                	test   eax,eax
c001013e:	74 19                	je     c0010159 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	8b 38                	mov    edi,DWORD PTR [eax]
c0010145:	56                   	push   esi
c0010146:	53                   	push   ebx
c0010147:	52                   	push   edx
c0010148:	51                   	push   ecx
c0010149:	50                   	push   eax
c001014a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001014d:	83 c4 20             	add    esp,0x20
c0010150:	89 c2                	mov    edx,eax
c0010152:	5b                   	pop    ebx
c0010153:	c1 fa 1f             	sar    edx,0x1f
c0010156:	5e                   	pop    esi
c0010157:	5f                   	pop    edi
c0010158:	c3                   	ret    
c0010159:	5b                   	pop    ebx
c001015a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001015f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010164:	5e                   	pop    esi
c0010165:	5f                   	pop    edi
c0010166:	c3                   	ret    

c0010167 <SysRealpath(regs*)>:
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010171:	85 d2                	test   edx,edx
c0010173:	74 07                	je     c001017c <SysRealpath(regs*)+0x15>
c0010175:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010178:	85 c0                	test   eax,eax
c001017a:	75 0b                	jne    c0010187 <SysRealpath(regs*)+0x20>
c001017c:	b8 01 00 00 00       	mov    eax,0x1
c0010181:	31 d2                	xor    edx,edx
c0010183:	83 c4 0c             	add    esp,0xc
c0010186:	c3                   	ret    
c0010187:	6a 00                	push   0x0
c0010189:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001018f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010192:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010198:	51                   	push   ecx
c0010199:	52                   	push   edx
c001019a:	50                   	push   eax
c001019b:	e8 7a 7c ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00101a0:	83 c4 10             	add    esp,0x10
c00101a3:	31 c0                	xor    eax,eax
c00101a5:	31 d2                	xor    edx,edx
c00101a7:	83 c4 0c             	add    esp,0xc
c00101aa:	c3                   	ret    

c00101ab <SysReadDir(regs*)>:
c00101ab:	53                   	push   ebx
c00101ac:	83 ec 18             	sub    esp,0x18
c00101af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101b6:	83 f8 02             	cmp    eax,0x2
c00101b9:	76 61                	jbe    c001021c <SysReadDir(regs*)+0x71>
c00101bb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101c2:	77 49                	ja     c001020d <SysReadDir(regs*)+0x62>
c00101c4:	83 ec 0c             	sub    esp,0xc
c00101c7:	50                   	push   eax
c00101c8:	e8 08 1d 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	85 c0                	test   eax,eax
c00101d2:	74 39                	je     c001020d <SysReadDir(regs*)+0x62>
c00101d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	8b 10                	mov    edx,DWORD PTR [eax]
c00101e1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101e5:	51                   	push   ecx
c00101e6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101e9:	51                   	push   ecx
c00101ea:	6a 00                	push   0x0
c00101ec:	68 10 01 00 00       	push   0x110
c00101f1:	50                   	push   eax
c00101f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101f5:	83 c4 20             	add    esp,0x20
c00101f8:	85 c0                	test   eax,eax
c00101fa:	74 29                	je     c0010225 <SysReadDir(regs*)+0x7a>
c00101fc:	83 f8 07             	cmp    eax,0x7
c00101ff:	74 1b                	je     c001021c <SysReadDir(regs*)+0x71>
c0010201:	b8 02 00 00 00       	mov    eax,0x2
c0010206:	31 d2                	xor    edx,edx
c0010208:	83 c4 18             	add    esp,0x18
c001020b:	5b                   	pop    ebx
c001020c:	c3                   	ret    
c001020d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010212:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010217:	83 c4 18             	add    esp,0x18
c001021a:	5b                   	pop    ebx
c001021b:	c3                   	ret    
c001021c:	b8 01 00 00 00       	mov    eax,0x1
c0010221:	31 d2                	xor    edx,edx
c0010223:	eb e3                	jmp    c0010208 <SysReadDir(regs*)+0x5d>
c0010225:	31 c0                	xor    eax,eax
c0010227:	31 d2                	xor    edx,edx
c0010229:	eb dd                	jmp    c0010208 <SysReadDir(regs*)+0x5d>

c001022b <SysIsATTY(regs*)>:
c001022b:	83 ec 0c             	sub    esp,0xc
c001022e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010232:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010235:	83 f8 02             	cmp    eax,0x2
c0010238:	76 07                	jbe    c0010241 <SysIsATTY(regs*)+0x16>
c001023a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001023f:	75 26                	jne    c0010267 <SysIsATTY(regs*)+0x3c>
c0010241:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010246:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010249:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001024f:	85 c0                	test   eax,eax
c0010251:	74 24                	je     c0010277 <SysIsATTY(regs*)+0x4c>
c0010253:	83 ec 0c             	sub    esp,0xc
c0010256:	8b 10                	mov    edx,DWORD PTR [eax]
c0010258:	50                   	push   eax
c0010259:	ff 12                	call   DWORD PTR [edx]
c001025b:	31 d2                	xor    edx,edx
c001025d:	0f b6 c0             	movzx  eax,al
c0010260:	83 c4 10             	add    esp,0x10
c0010263:	83 c4 0c             	add    esp,0xc
c0010266:	c3                   	ret    
c0010267:	83 ec 0c             	sub    esp,0xc
c001026a:	50                   	push   eax
c001026b:	e8 65 1c 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	85 c0                	test   eax,eax
c0010275:	75 dc                	jne    c0010253 <SysIsATTY(regs*)+0x28>
c0010277:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001027c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010281:	83 c4 0c             	add    esp,0xc
c0010284:	c3                   	ret    

c0010285 <SysSeek(regs*)>:
c0010285:	53                   	push   ebx
c0010286:	83 ec 08             	sub    esp,0x8
c0010289:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001028d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010290:	8d 50 fd             	lea    edx,[eax-0x3]
c0010293:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010299:	77 32                	ja     c00102cd <SysSeek(regs*)+0x48>
c001029b:	83 ec 0c             	sub    esp,0xc
c001029e:	50                   	push   eax
c001029f:	e8 31 1c 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c00102a4:	83 c4 0c             	add    esp,0xc
c00102a7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102aa:	31 db                	xor    ebx,ebx
c00102ac:	53                   	push   ebx
c00102ad:	51                   	push   ecx
c00102ae:	50                   	push   eax
c00102af:	e8 3a 7f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	85 c0                	test   eax,eax
c00102b9:	0f 95 c0             	setne  al
c00102bc:	31 d2                	xor    edx,edx
c00102be:	0f b6 c0             	movzx  eax,al
c00102c1:	f7 d8                	neg    eax
c00102c3:	83 d2 00             	adc    edx,0x0
c00102c6:	83 c4 08             	add    esp,0x8
c00102c9:	f7 da                	neg    edx
c00102cb:	5b                   	pop    ebx
c00102cc:	c3                   	ret    
c00102cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102d7:	83 c4 08             	add    esp,0x8
c00102da:	5b                   	pop    ebx
c00102db:	c3                   	ret    

c00102dc <SysTell(regs*)>:
c00102dc:	53                   	push   ebx
c00102dd:	83 ec 08             	sub    esp,0x8
c00102e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102e7:	83 f8 02             	cmp    eax,0x2
c00102ea:	76 4e                	jbe    c001033a <SysTell(regs*)+0x5e>
c00102ec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102f1:	76 19                	jbe    c001030c <SysTell(regs*)+0x30>
c00102f3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102f6:	31 d2                	xor    edx,edx
c00102f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010305:	31 c0                	xor    eax,eax
c0010307:	83 c4 08             	add    esp,0x8
c001030a:	5b                   	pop    ebx
c001030b:	c3                   	ret    
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	50                   	push   eax
c0010310:	e8 c0 1b 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0010315:	5a                   	pop    edx
c0010316:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010319:	59                   	pop    ecx
c001031a:	53                   	push   ebx
c001031b:	50                   	push   eax
c001031c:	e8 79 7f ff ff       	call   c000829a <File::tell(unsigned long long*)>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	85 c0                	test   eax,eax
c0010326:	0f 95 c0             	setne  al
c0010329:	31 d2                	xor    edx,edx
c001032b:	0f b6 c0             	movzx  eax,al
c001032e:	f7 d8                	neg    eax
c0010330:	83 d2 00             	adc    edx,0x0
c0010333:	83 c4 08             	add    esp,0x8
c0010336:	f7 da                	neg    edx
c0010338:	5b                   	pop    ebx
c0010339:	c3                   	ret    
c001033a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001033f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010344:	83 c4 08             	add    esp,0x8
c0010347:	5b                   	pop    ebx
c0010348:	c3                   	ret    

c0010349 <SysSize(regs*)>:
c0010349:	53                   	push   ebx
c001034a:	83 ec 18             	sub    esp,0x18
c001034d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010351:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010354:	83 f8 02             	cmp    eax,0x2
c0010357:	76 54                	jbe    c00103ad <SysSize(regs*)+0x64>
c0010359:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001035e:	76 19                	jbe    c0010379 <SysSize(regs*)+0x30>
c0010360:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010363:	31 d2                	xor    edx,edx
c0010365:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001036b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010372:	31 c0                	xor    eax,eax
c0010374:	83 c4 18             	add    esp,0x18
c0010377:	5b                   	pop    ebx
c0010378:	c3                   	ret    
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 53 1b 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0010382:	83 c4 0c             	add    esp,0xc
c0010385:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010389:	52                   	push   edx
c001038a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001038d:	52                   	push   edx
c001038e:	50                   	push   eax
c001038f:	e8 9e 80 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	85 c0                	test   eax,eax
c0010399:	0f 95 c0             	setne  al
c001039c:	31 d2                	xor    edx,edx
c001039e:	0f b6 c0             	movzx  eax,al
c00103a1:	f7 d8                	neg    eax
c00103a3:	83 d2 00             	adc    edx,0x0
c00103a6:	83 c4 18             	add    esp,0x18
c00103a9:	f7 da                	neg    edx
c00103ab:	5b                   	pop    ebx
c00103ac:	c3                   	ret    
c00103ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103b7:	83 c4 18             	add    esp,0x18
c00103ba:	5b                   	pop    ebx
c00103bb:	c3                   	ret    

c00103bc <SysSizeFromFilename(regs*)>:
c00103bc:	55                   	push   ebp
c00103bd:	57                   	push   edi
c00103be:	56                   	push   esi
c00103bf:	53                   	push   ebx
c00103c0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103c6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103cd:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00103d0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00103d3:	85 f6                	test   esi,esi
c00103d5:	74 34                	je     c001040b <SysSizeFromFilename(regs*)+0x4f>
c00103d7:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00103dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103e0:	83 f8 02             	cmp    eax,0x2
c00103e3:	76 2d                	jbe    c0010412 <SysSizeFromFilename(regs*)+0x56>
c00103e5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103ea:	76 3b                	jbe    c0010427 <SysSizeFromFilename(regs*)+0x6b>
c00103ec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103fc:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010402:	31 c0                	xor    eax,eax
c0010404:	5b                   	pop    ebx
c0010405:	31 d2                	xor    edx,edx
c0010407:	5e                   	pop    esi
c0010408:	5f                   	pop    edi
c0010409:	5d                   	pop    ebp
c001040a:	c3                   	ret    
c001040b:	89 f8                	mov    eax,edi
c001040d:	83 f8 02             	cmp    eax,0x2
c0010410:	77 d3                	ja     c00103e5 <SysSizeFromFilename(regs*)+0x29>
c0010412:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010418:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001041d:	5b                   	pop    ebx
c001041e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010423:	5e                   	pop    esi
c0010424:	5f                   	pop    edi
c0010425:	5d                   	pop    ebp
c0010426:	c3                   	ret    
c0010427:	83 ec 0c             	sub    esp,0xc
c001042a:	68 14 01 00 00       	push   0x114
c001042f:	e8 47 e5 ff ff       	call   c000e97b <malloc>
c0010434:	6a 01                	push   0x1
c0010436:	89 c5                	mov    ebp,eax
c0010438:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001043d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010440:	51                   	push   ecx
c0010441:	57                   	push   edi
c0010442:	55                   	push   ebp
c0010443:	e8 ec 7b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010448:	83 c4 1c             	add    esp,0x1c
c001044b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001044f:	50                   	push   eax
c0010450:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010453:	53                   	push   ebx
c0010454:	55                   	push   ebp
c0010455:	e8 d8 7f ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001045a:	83 c4 10             	add    esp,0x10
c001045d:	85 ed                	test   ebp,ebp
c001045f:	74 15                	je     c0010476 <SysSizeFromFilename(regs*)+0xba>
c0010461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010465:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	55                   	push   ebp
c001046c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001046f:	83 c4 10             	add    esp,0x10
c0010472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010476:	85 c0                	test   eax,eax
c0010478:	75 98                	jne    c0010412 <SysSizeFromFilename(regs*)+0x56>
c001047a:	6a 00                	push   0x0
c001047c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010481:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010484:	05 0c 01 00 00       	add    eax,0x10c
c0010489:	50                   	push   eax
c001048a:	57                   	push   edi
c001048b:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0010492:	53                   	push   ebx
c0010493:	e8 82 79 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010498:	58                   	pop    eax
c0010499:	5a                   	pop    edx
c001049a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001049e:	50                   	push   eax
c001049f:	53                   	push   ebx
c00104a0:	e8 fc 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	83 f8 01             	cmp    eax,0x1
c00104ab:	74 1a                	je     c00104c7 <SysSizeFromFilename(regs*)+0x10b>
c00104ad:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00104b2:	74 26                	je     c00104da <SysSizeFromFilename(regs*)+0x11e>
c00104b4:	85 f6                	test   esi,esi
c00104b6:	0f 84 40 ff ff ff    	je     c00103fc <SysSizeFromFilename(regs*)+0x40>
c00104bc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00104c2:	e9 35 ff ff ff       	jmp    c00103fc <SysSizeFromFilename(regs*)+0x40>
c00104c7:	85 f6                	test   esi,esi
c00104c9:	0f 84 2d ff ff ff    	je     c00103fc <SysSizeFromFilename(regs*)+0x40>
c00104cf:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00104d5:	e9 22 ff ff ff       	jmp    c00103fc <SysSizeFromFilename(regs*)+0x40>
c00104da:	85 f6                	test   esi,esi
c00104dc:	0f 84 1a ff ff ff    	je     c00103fc <SysSizeFromFilename(regs*)+0x40>
c00104e2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104e8:	e9 0f ff ff ff       	jmp    c00103fc <SysSizeFromFilename(regs*)+0x40>

c00104ed <SysSizeFromFilenameNoSymlink(regs*)>:
c00104ed:	55                   	push   ebp
c00104ee:	57                   	push   edi
c00104ef:	56                   	push   esi
c00104f0:	53                   	push   ebx
c00104f1:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00104f7:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00104fe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010501:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010504:	85 f6                	test   esi,esi
c0010506:	74 34                	je     c001053c <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010508:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001050e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010511:	83 f8 02             	cmp    eax,0x2
c0010514:	76 2d                	jbe    c0010543 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010516:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001051b:	76 3b                	jbe    c0010558 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001051d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010520:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010526:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001052d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010533:	31 c0                	xor    eax,eax
c0010535:	5b                   	pop    ebx
c0010536:	31 d2                	xor    edx,edx
c0010538:	5e                   	pop    esi
c0010539:	5f                   	pop    edi
c001053a:	5d                   	pop    ebp
c001053b:	c3                   	ret    
c001053c:	89 f8                	mov    eax,edi
c001053e:	83 f8 02             	cmp    eax,0x2
c0010541:	77 d3                	ja     c0010516 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0010543:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010549:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001054e:	5b                   	pop    ebx
c001054f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010554:	5e                   	pop    esi
c0010555:	5f                   	pop    edi
c0010556:	5d                   	pop    ebp
c0010557:	c3                   	ret    
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	68 14 01 00 00       	push   0x114
c0010560:	e8 16 e4 ff ff       	call   c000e97b <malloc>
c0010565:	6a 00                	push   0x0
c0010567:	89 c5                	mov    ebp,eax
c0010569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001056e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010571:	51                   	push   ecx
c0010572:	57                   	push   edi
c0010573:	55                   	push   ebp
c0010574:	e8 bb 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010579:	83 c4 1c             	add    esp,0x1c
c001057c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010580:	50                   	push   eax
c0010581:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010584:	53                   	push   ebx
c0010585:	55                   	push   ebp
c0010586:	e8 a7 7e ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	85 ed                	test   ebp,ebp
c0010590:	74 15                	je     c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010599:	83 ec 0c             	sub    esp,0xc
c001059c:	55                   	push   ebp
c001059d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00105a0:	83 c4 10             	add    esp,0x10
c00105a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a7:	85 c0                	test   eax,eax
c00105a9:	75 98                	jne    c0010543 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00105ab:	6a 00                	push   0x0
c00105ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105b5:	05 0c 01 00 00       	add    eax,0x10c
c00105ba:	50                   	push   eax
c00105bb:	57                   	push   edi
c00105bc:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00105c3:	53                   	push   ebx
c00105c4:	e8 51 78 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105c9:	58                   	pop    eax
c00105ca:	5a                   	pop    edx
c00105cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105cf:	50                   	push   eax
c00105d0:	53                   	push   ebx
c00105d1:	e8 cb 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00105d6:	83 c4 10             	add    esp,0x10
c00105d9:	83 f8 01             	cmp    eax,0x1
c00105dc:	74 1a                	je     c00105f8 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00105de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00105e3:	74 26                	je     c001060b <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00105e5:	85 f6                	test   esi,esi
c00105e7:	0f 84 40 ff ff ff    	je     c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00105ed:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105f3:	e9 35 ff ff ff       	jmp    c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00105f8:	85 f6                	test   esi,esi
c00105fa:	0f 84 2d ff ff ff    	je     c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010600:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010606:	e9 22 ff ff ff       	jmp    c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001060b:	85 f6                	test   esi,esi
c001060d:	0f 84 1a ff ff ff    	je     c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010613:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010619:	e9 0f ff ff ff       	jmp    c001052d <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c001061e <SysClose(regs*)>:
c001061e:	53                   	push   ebx
c001061f:	83 ec 08             	sub    esp,0x8
c0010622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010626:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010629:	83 f8 02             	cmp    eax,0x2
c001062c:	76 41                	jbe    c001066f <SysClose(regs*)+0x51>
c001062e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010634:	83 fa 01             	cmp    edx,0x1
c0010637:	76 2d                	jbe    c0010666 <SysClose(regs*)+0x48>
c0010639:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001063e:	77 2f                	ja     c001066f <SysClose(regs*)+0x51>
c0010640:	83 ec 0c             	sub    esp,0xc
c0010643:	50                   	push   eax
c0010644:	e8 8c 18 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0010649:	89 c3                	mov    ebx,eax
c001064b:	89 04 24             	mov    DWORD PTR [esp],eax
c001064e:	e8 3b 7b ff ff       	call   c000818e <File::close()>
c0010653:	83 c4 10             	add    esp,0x10
c0010656:	85 db                	test   ebx,ebx
c0010658:	74 0c                	je     c0010666 <SysClose(regs*)+0x48>
c001065a:	83 ec 0c             	sub    esp,0xc
c001065d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001065f:	53                   	push   ebx
c0010660:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010663:	83 c4 10             	add    esp,0x10
c0010666:	31 c0                	xor    eax,eax
c0010668:	31 d2                	xor    edx,edx
c001066a:	83 c4 08             	add    esp,0x8
c001066d:	5b                   	pop    ebx
c001066e:	c3                   	ret    
c001066f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010674:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010679:	83 c4 08             	add    esp,0x8
c001067c:	5b                   	pop    ebx
c001067d:	c3                   	ret    

c001067e <SysOpenDir(regs*)>:
c001067e:	56                   	push   esi
c001067f:	53                   	push   ebx
c0010680:	83 ec 04             	sub    esp,0x4
c0010683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010687:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001068a:	85 c9                	test   ecx,ecx
c001068c:	74 5d                	je     c00106eb <SysOpenDir(regs*)+0x6d>
c001068e:	83 ec 0c             	sub    esp,0xc
c0010691:	68 14 01 00 00       	push   0x114
c0010696:	e8 e0 e2 ff ff       	call   c000e97b <malloc>
c001069b:	83 c4 0c             	add    esp,0xc
c001069e:	89 c6                	mov    esi,eax
c00106a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106a8:	50                   	push   eax
c00106a9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00106ac:	52                   	push   edx
c00106ad:	56                   	push   esi
c00106ae:	e8 3f 7f ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c00106b3:	83 c4 10             	add    esp,0x10
c00106b6:	85 f6                	test   esi,esi
c00106b8:	74 31                	je     c00106eb <SysOpenDir(regs*)+0x6d>
c00106ba:	83 ec 0c             	sub    esp,0xc
c00106bd:	56                   	push   esi
c00106be:	e8 f7 7f ff ff       	call   c00086ba <Directory::open()>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 c0                	test   eax,eax
c00106c8:	75 21                	jne    c00106eb <SysOpenDir(regs*)+0x6d>
c00106ca:	83 ec 0c             	sub    esp,0xc
c00106cd:	56                   	push   esi
c00106ce:	e8 05 15 00 00       	call   c0011bd8 <UnixFile::getFileDescriptor()>
c00106d3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	89 02                	mov    DWORD PTR [edx],eax
c00106db:	c1 f8 1f             	sar    eax,0x1f
c00106de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00106e1:	83 c4 04             	add    esp,0x4
c00106e4:	31 c0                	xor    eax,eax
c00106e6:	31 d2                	xor    edx,edx
c00106e8:	5b                   	pop    ebx
c00106e9:	5e                   	pop    esi
c00106ea:	c3                   	ret    
c00106eb:	83 c4 04             	add    esp,0x4
c00106ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106f8:	5b                   	pop    ebx
c00106f9:	5e                   	pop    esi
c00106fa:	c3                   	ret    

c00106fb <SysMakeDir(regs*)>:
c00106fb:	56                   	push   esi
c00106fc:	53                   	push   ebx
c00106fd:	83 ec 10             	sub    esp,0x10
c0010700:	68 14 01 00 00       	push   0x114
c0010705:	e8 71 e2 ff ff       	call   c000e97b <malloc>
c001070a:	83 c4 0c             	add    esp,0xc
c001070d:	89 c3                	mov    ebx,eax
c001070f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010714:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010717:	50                   	push   eax
c0010718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001071c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001071f:	52                   	push   edx
c0010720:	53                   	push   ebx
c0010721:	e8 cc 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c0010726:	83 c4 10             	add    esp,0x10
c0010729:	85 db                	test   ebx,ebx
c001072b:	74 2c                	je     c0010759 <SysMakeDir(regs*)+0x5e>
c001072d:	83 ec 0c             	sub    esp,0xc
c0010730:	53                   	push   ebx
c0010731:	e8 64 81 ff ff       	call   c000889a <Directory::create()>
c0010736:	89 c6                	mov    esi,eax
c0010738:	8b 03                	mov    eax,DWORD PTR [ebx]
c001073a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001073d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010740:	83 c4 10             	add    esp,0x10
c0010743:	31 c0                	xor    eax,eax
c0010745:	85 f6                	test   esi,esi
c0010747:	0f 95 c0             	setne  al
c001074a:	31 d2                	xor    edx,edx
c001074c:	f7 d8                	neg    eax
c001074e:	83 d2 00             	adc    edx,0x0
c0010751:	83 c4 04             	add    esp,0x4
c0010754:	f7 da                	neg    edx
c0010756:	5b                   	pop    ebx
c0010757:	5e                   	pop    esi
c0010758:	c3                   	ret    
c0010759:	83 c4 04             	add    esp,0x4
c001075c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010761:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010766:	5b                   	pop    ebx
c0010767:	5e                   	pop    esi
c0010768:	c3                   	ret    

c0010769 <SysCloseDir(regs*)>:
c0010769:	53                   	push   ebx
c001076a:	83 ec 08             	sub    esp,0x8
c001076d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010771:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010774:	8d 50 fd             	lea    edx,[eax-0x3]
c0010777:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001077d:	77 2f                	ja     c00107ae <SysCloseDir(regs*)+0x45>
c001077f:	83 ec 0c             	sub    esp,0xc
c0010782:	50                   	push   eax
c0010783:	e8 4d 17 00 00       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0010788:	89 c3                	mov    ebx,eax
c001078a:	89 04 24             	mov    DWORD PTR [esp],eax
c001078d:	e8 84 7f ff ff       	call   c0008716 <Directory::close()>
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	85 db                	test   ebx,ebx
c0010797:	74 0c                	je     c00107a5 <SysCloseDir(regs*)+0x3c>
c0010799:	83 ec 0c             	sub    esp,0xc
c001079c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079e:	53                   	push   ebx
c001079f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107a2:	83 c4 10             	add    esp,0x10
c00107a5:	31 c0                	xor    eax,eax
c00107a7:	31 d2                	xor    edx,edx
c00107a9:	83 c4 08             	add    esp,0x8
c00107ac:	5b                   	pop    ebx
c00107ad:	c3                   	ret    
c00107ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107b8:	83 c4 08             	add    esp,0x8
c00107bb:	5b                   	pop    ebx
c00107bc:	c3                   	ret    

c00107bd <SysWait(regs*)>:
c00107bd:	83 ec 10             	sub    esp,0x10
c00107c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107c4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00107c7:	52                   	push   edx
c00107c8:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00107cb:	51                   	push   ecx
c00107cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107cf:	50                   	push   eax
c00107d0:	e8 c7 4d 00 00       	call   c001559c <waitTask(int, int*, int)>
c00107d5:	83 c4 1c             	add    esp,0x1c
c00107d8:	89 c2                	mov    edx,eax
c00107da:	c1 fa 1f             	sar    edx,0x1f
c00107dd:	c3                   	ret    

c00107de <SysNotImpl(regs*)>:
c00107de:	83 ec 18             	sub    esp,0x18
c00107e1:	68 64 23 02 c0       	push   0xc0022364
c00107e6:	e8 d7 e4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00107eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107f5:	83 c4 1c             	add    esp,0x1c
c00107f8:	c3                   	ret    

c00107f9 <SysPanic(regs*)>:
c00107f9:	83 ec 18             	sub    esp,0x18
c00107fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010800:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010803:	50                   	push   eax
c0010804:	e8 b9 e4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0010809:	b8 01 00 00 00       	mov    eax,0x1
c001080e:	31 d2                	xor    edx,edx
c0010810:	83 c4 1c             	add    esp,0x1c
c0010813:	c3                   	ret    

c0010814 <SysRmdir(regs*)>:
c0010814:	56                   	push   esi
c0010815:	53                   	push   ebx
c0010816:	83 ec 20             	sub    esp,0x20
c0010819:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001081d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010820:	68 14 01 00 00       	push   0x114
c0010825:	e8 51 e1 ff ff       	call   c000e97b <malloc>
c001082a:	6a 00                	push   0x0
c001082c:	89 c3                	mov    ebx,eax
c001082e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010833:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010836:	50                   	push   eax
c0010837:	56                   	push   esi
c0010838:	53                   	push   ebx
c0010839:	e8 f6 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001083e:	83 c4 14             	add    esp,0x14
c0010841:	53                   	push   ebx
c0010842:	e8 b7 7a ff ff       	call   c00082fe <File::unlink()>
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	85 db                	test   ebx,ebx
c001084c:	74 14                	je     c0010862 <SysRmdir(regs*)+0x4e>
c001084e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010852:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	53                   	push   ebx
c0010858:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001085b:	83 c4 10             	add    esp,0x10
c001085e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010862:	85 c0                	test   eax,eax
c0010864:	0f 95 c0             	setne  al
c0010867:	31 d2                	xor    edx,edx
c0010869:	0f b6 c0             	movzx  eax,al
c001086c:	f7 d8                	neg    eax
c001086e:	83 d2 00             	adc    edx,0x0
c0010871:	83 c4 14             	add    esp,0x14
c0010874:	f7 da                	neg    edx
c0010876:	5b                   	pop    ebx
c0010877:	5e                   	pop    esi
c0010878:	c3                   	ret    

c0010879 <SysUnlink(regs*)>:
c0010879:	56                   	push   esi
c001087a:	53                   	push   ebx
c001087b:	83 ec 20             	sub    esp,0x20
c001087e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010882:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010885:	68 14 01 00 00       	push   0x114
c001088a:	e8 ec e0 ff ff       	call   c000e97b <malloc>
c001088f:	6a 00                	push   0x0
c0010891:	89 c3                	mov    ebx,eax
c0010893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010898:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001089b:	50                   	push   eax
c001089c:	56                   	push   esi
c001089d:	53                   	push   ebx
c001089e:	e8 91 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00108a3:	83 c4 14             	add    esp,0x14
c00108a6:	53                   	push   ebx
c00108a7:	e8 52 7a ff ff       	call   c00082fe <File::unlink()>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	85 db                	test   ebx,ebx
c00108b1:	74 14                	je     c00108c7 <SysUnlink(regs*)+0x4e>
c00108b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	53                   	push   ebx
c00108bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108c7:	85 c0                	test   eax,eax
c00108c9:	0f 95 c0             	setne  al
c00108cc:	31 d2                	xor    edx,edx
c00108ce:	0f b6 c0             	movzx  eax,al
c00108d1:	f7 d8                	neg    eax
c00108d3:	83 d2 00             	adc    edx,0x0
c00108d6:	83 c4 14             	add    esp,0x14
c00108d9:	f7 da                	neg    edx
c00108db:	5b                   	pop    ebx
c00108dc:	5e                   	pop    esi
c00108dd:	c3                   	ret    

c00108de <SysGetArgv(regs*)>:
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108e5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108e8:	85 c0                	test   eax,eax
c00108ea:	78 2c                	js     c0010918 <SysGetArgv(regs*)+0x3a>
c00108ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00108f2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00108f5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00108fb:	7d 1b                	jge    c0010918 <SysGetArgv(regs*)+0x3a>
c00108fd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010904:	85 c0                	test   eax,eax
c0010906:	74 18                	je     c0010920 <SysGetArgv(regs*)+0x42>
c0010908:	83 ec 08             	sub    esp,0x8
c001090b:	50                   	push   eax
c001090c:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001090f:	50                   	push   eax
c0010910:	e8 2b fd fe ff       	call   c0000640 <strcpy>
c0010915:	83 c4 10             	add    esp,0x10
c0010918:	31 c0                	xor    eax,eax
c001091a:	31 d2                	xor    edx,edx
c001091c:	83 c4 0c             	add    esp,0xc
c001091f:	c3                   	ret    
c0010920:	b8 01 00 00 00       	mov    eax,0x1
c0010925:	31 d2                	xor    edx,edx
c0010927:	83 c4 0c             	add    esp,0xc
c001092a:	c3                   	ret    

c001092b <SysUSleep(regs*)>:
c001092b:	83 ec 1c             	sub    esp,0x1c
c001092e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010932:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010935:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010938:	6a 00                	push   0x0
c001093a:	6a 64                	push   0x64
c001093c:	52                   	push   edx
c001093d:	50                   	push   eax
c001093e:	e8 c1 f1 00 00       	call   c001fb04 <__udivdi3>
c0010943:	83 c4 14             	add    esp,0x14
c0010946:	50                   	push   eax
c0010947:	e8 3c 4d 00 00       	call   c0015688 <milliTenthSleep(unsigned int)>
c001094c:	31 c0                	xor    eax,eax
c001094e:	31 d2                	xor    edx,edx
c0010950:	83 c4 1c             	add    esp,0x1c
c0010953:	c3                   	ret    

c0010954 <SysSpawn(regs*)>:
c0010954:	56                   	push   esi
c0010955:	53                   	push   ebx
c0010956:	83 ec 04             	sub    esp,0x4
c0010959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001095d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010960:	85 f6                	test   esi,esi
c0010962:	75 0a                	jne    c001096e <SysSpawn(regs*)+0x1a>
c0010964:	83 c4 04             	add    esp,0x4
c0010967:	31 c0                	xor    eax,eax
c0010969:	31 d2                	xor    edx,edx
c001096b:	5b                   	pop    ebx
c001096c:	5e                   	pop    esi
c001096d:	c3                   	ret    
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	68 24 07 00 00       	push   0x724
c0010976:	e8 00 e0 ff ff       	call   c000e97b <malloc>
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010981:	89 c6                	mov    esi,eax
c0010983:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010986:	85 c9                	test   ecx,ecx
c0010988:	75 39                	jne    c00109c3 <SysSpawn(regs*)+0x6f>
c001098a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001098f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010992:	52                   	push   edx
c0010993:	50                   	push   eax
c0010994:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010997:	50                   	push   eax
c0010998:	56                   	push   esi
c0010999:	e8 7e 44 00 00       	call   c0014e1c <Process::Process(char const*, Process*, char**)>
c001099e:	83 c4 10             	add    esp,0x10
c00109a1:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00109a8:	75 ba                	jne    c0010964 <SysSpawn(regs*)+0x10>
c00109aa:	83 ec 0c             	sub    esp,0xc
c00109ad:	56                   	push   esi
c00109ae:	e8 a9 49 00 00       	call   c001535c <Process::createUserThread()>
c00109b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	89 c2                	mov    edx,eax
c00109ba:	83 c4 04             	add    esp,0x4
c00109bd:	c1 fa 1f             	sar    edx,0x1f
c00109c0:	5b                   	pop    ebx
c00109c1:	5e                   	pop    esi
c00109c2:	c3                   	ret    
c00109c3:	31 c0                	xor    eax,eax
c00109c5:	eb cb                	jmp    c0010992 <SysSpawn(regs*)+0x3e>

c00109c7 <SysGetEnv(regs*)>:
c00109c7:	57                   	push   edi
c00109c8:	56                   	push   esi
c00109c9:	53                   	push   ebx
c00109ca:	83 ec 1c             	sub    esp,0x1c
c00109cd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00109d9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109dc:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00109df:	51                   	push   ecx
c00109e0:	e8 de d2 ff ff       	call   c000dcc3 <KeGetProcessTotalEnvCount(Process*)>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	39 c7                	cmp    edi,eax
c00109ea:	7c 14                	jl     c0010a00 <SysGetEnv(regs*)+0x39>
c00109ec:	85 f6                	test   esi,esi
c00109ee:	75 0b                	jne    c00109fb <SysGetEnv(regs*)+0x34>
c00109f0:	83 c4 10             	add    esp,0x10
c00109f3:	31 c0                	xor    eax,eax
c00109f5:	5b                   	pop    ebx
c00109f6:	31 d2                	xor    edx,edx
c00109f8:	5e                   	pop    esi
c00109f9:	5f                   	pop    edi
c00109fa:	c3                   	ret    
c00109fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00109fe:	eb f0                	jmp    c00109f0 <SysGetEnv(regs*)+0x29>
c0010a00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a04:	83 ec 04             	sub    esp,0x4
c0010a07:	57                   	push   edi
c0010a08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a0e:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a11:	57                   	push   edi
c0010a12:	50                   	push   eax
c0010a13:	e8 cb d2 ff ff       	call   c000dce3 <KeGetProcessEnvPair(Process*, int)>
c0010a18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a23:	83 c4 0c             	add    esp,0xc
c0010a26:	85 d2                	test   edx,edx
c0010a28:	75 23                	jne    c0010a4d <SysGetEnv(regs*)+0x86>
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	50                   	push   eax
c0010a2e:	e8 3d fb fe ff       	call   c0000570 <strlen>
c0010a33:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a36:	89 c3                	mov    ebx,eax
c0010a38:	e8 33 fb fe ff       	call   c0000570 <strlen>
c0010a3d:	83 c4 10             	add    esp,0x10
c0010a40:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	31 d2                	xor    edx,edx
c0010a49:	5b                   	pop    ebx
c0010a4a:	5e                   	pop    esi
c0010a4b:	5f                   	pop    edi
c0010a4c:	c3                   	ret    
c0010a4d:	83 ec 08             	sub    esp,0x8
c0010a50:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a53:	50                   	push   eax
c0010a54:	56                   	push   esi
c0010a55:	e8 e6 fb fe ff       	call   c0000640 <strcpy>
c0010a5a:	58                   	pop    eax
c0010a5b:	5a                   	pop    edx
c0010a5c:	68 7e 23 02 c0       	push   0xc002237e
c0010a61:	56                   	push   esi
c0010a62:	e8 d9 fd fe ff       	call   c0000840 <strcat>
c0010a67:	59                   	pop    ecx
c0010a68:	5b                   	pop    ebx
c0010a69:	57                   	push   edi
c0010a6a:	56                   	push   esi
c0010a6b:	e8 d0 fd fe ff       	call   c0000840 <strcat>
c0010a70:	83 c4 10             	add    esp,0x10
c0010a73:	e9 78 ff ff ff       	jmp    c00109f0 <SysGetEnv(regs*)+0x29>

c0010a78 <SysSetFatAttrib(regs*)>:
c0010a78:	57                   	push   edi
c0010a79:	56                   	push   esi
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 1c             	sub    esp,0x1c
c0010a7e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010a82:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010a85:	68 14 01 00 00       	push   0x114
c0010a8a:	e8 ec de ff ff       	call   c000e97b <malloc>
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	89 c3                	mov    ebx,eax
c0010a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a9c:	50                   	push   eax
c0010a9d:	57                   	push   edi
c0010a9e:	53                   	push   ebx
c0010a9f:	e8 6e 76 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010aa4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	0f b6 d4             	movzx  edx,ah
c0010aad:	0f b6 c0             	movzx  eax,al
c0010ab0:	52                   	push   edx
c0010ab1:	50                   	push   eax
c0010ab2:	53                   	push   ebx
c0010ab3:	e8 e0 78 ff ff       	call   c0008398 <File::chfatattr(unsigned char, unsigned char)>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	85 db                	test   ebx,ebx
c0010abd:	74 14                	je     c0010ad3 <SysSetFatAttrib(regs*)+0x5b>
c0010abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ac3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ac5:	83 ec 0c             	sub    esp,0xc
c0010ac8:	53                   	push   ebx
c0010ac9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010acc:	83 c4 10             	add    esp,0x10
c0010acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ad3:	85 c0                	test   eax,eax
c0010ad5:	0f 95 c0             	setne  al
c0010ad8:	31 d2                	xor    edx,edx
c0010ada:	0f b6 c0             	movzx  eax,al
c0010add:	f7 d8                	neg    eax
c0010adf:	83 d2 00             	adc    edx,0x0
c0010ae2:	83 c4 10             	add    esp,0x10
c0010ae5:	f7 da                	neg    edx
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	c3                   	ret    

c0010aeb <SysShutdown(regs*)>:
c0010aeb:	83 ec 1c             	sub    esp,0x1c
c0010aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010af5:	85 c9                	test   ecx,ecx
c0010af7:	74 18                	je     c0010b11 <SysShutdown(regs*)+0x26>
c0010af9:	83 f9 01             	cmp    ecx,0x1
c0010afc:	74 26                	je     c0010b24 <SysShutdown(regs*)+0x39>
c0010afe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b08:	83 f9 02             	cmp    ecx,0x2
c0010b0b:	74 24                	je     c0010b31 <SysShutdown(regs*)+0x46>
c0010b0d:	83 c4 1c             	add    esp,0x1c
c0010b10:	c3                   	ret    
c0010b11:	e8 26 cc ff ff       	call   c000d73c <KeShutdown()>
c0010b16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b20:	83 c4 1c             	add    esp,0x1c
c0010b23:	c3                   	ret    
c0010b24:	e8 37 cc ff ff       	call   c000d760 <KeSleep()>
c0010b29:	31 c0                	xor    eax,eax
c0010b2b:	31 d2                	xor    edx,edx
c0010b2d:	83 c4 1c             	add    esp,0x1c
c0010b30:	c3                   	ret    
c0010b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010b39:	e8 2e cc ff ff       	call   c000d76c <KeRestart()>
c0010b3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b46:	eb c5                	jmp    c0010b0d <SysShutdown(regs*)+0x22>

c0010b48 <SysPipe(regs*)>:
c0010b48:	57                   	push   edi
c0010b49:	56                   	push   esi
c0010b4a:	53                   	push   ebx
c0010b4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4f:	83 ec 0c             	sub    esp,0xc
c0010b52:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b55:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b58:	6a 20                	push   0x20
c0010b5a:	e8 1c de ff ff       	call   c000e97b <malloc>
c0010b5f:	89 c3                	mov    ebx,eax
c0010b61:	58                   	pop    eax
c0010b62:	5a                   	pop    edx
c0010b63:	68 00 50 00 00       	push   0x5000
c0010b68:	53                   	push   ebx
c0010b69:	e8 b6 e9 ff ff       	call   c000f524 <Pipe::Pipe(int)>
c0010b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b71:	e8 62 10 00 00       	call   c0011bd8 <UnixFile::getFileDescriptor()>
c0010b76:	89 07                	mov    DWORD PTR [edi],eax
c0010b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b7b:	e8 58 10 00 00       	call   c0011bd8 <UnixFile::getFileDescriptor()>
c0010b80:	83 c4 10             	add    esp,0x10
c0010b83:	89 06                	mov    DWORD PTR [esi],eax
c0010b85:	31 d2                	xor    edx,edx
c0010b87:	5b                   	pop    ebx
c0010b88:	31 c0                	xor    eax,eax
c0010b8a:	5e                   	pop    esi
c0010b8b:	5f                   	pop    edi
c0010b8c:	c3                   	ret    

c0010b8d <SysGetUnixTime(regs*)>:
c0010b8d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010b92:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b9c:	e9 f5 7f ff ff       	jmp    c0008b96 <Clock::timeInSecondsLocal()>

c0010ba1 <string_ends_with(char const*, char const*)>:
c0010ba1:	57                   	push   edi
c0010ba2:	56                   	push   esi
c0010ba3:	53                   	push   ebx
c0010ba4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	53                   	push   ebx
c0010bb0:	e8 bb f9 fe ff       	call   c0000570 <strlen>
c0010bb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010bb8:	89 c6                	mov    esi,eax
c0010bba:	e8 b1 f9 fe ff       	call   c0000570 <strlen>
c0010bbf:	83 c4 10             	add    esp,0x10
c0010bc2:	39 c6                	cmp    esi,eax
c0010bc4:	7d 06                	jge    c0010bcc <string_ends_with(char const*, char const*)+0x2b>
c0010bc6:	5b                   	pop    ebx
c0010bc7:	31 c0                	xor    eax,eax
c0010bc9:	5e                   	pop    esi
c0010bca:	5f                   	pop    edi
c0010bcb:	c3                   	ret    
c0010bcc:	83 ec 08             	sub    esp,0x8
c0010bcf:	29 c6                	sub    esi,eax
c0010bd1:	57                   	push   edi
c0010bd2:	01 f3                	add    ebx,esi
c0010bd4:	53                   	push   ebx
c0010bd5:	e8 76 fb fe ff       	call   c0000750 <strcmp>
c0010bda:	83 c4 10             	add    esp,0x10
c0010bdd:	85 c0                	test   eax,eax
c0010bdf:	5b                   	pop    ebx
c0010be0:	0f 94 c0             	sete   al
c0010be3:	5e                   	pop    esi
c0010be4:	0f b6 c0             	movzx  eax,al
c0010be7:	5f                   	pop    edi
c0010be8:	c3                   	ret    

c0010be9 <SysOpen(regs*)>:
c0010be9:	56                   	push   esi
c0010bea:	53                   	push   ebx
c0010beb:	81 ec 04 01 00 00    	sub    esp,0x104
c0010bf1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010bf8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bfb:	85 c0                	test   eax,eax
c0010bfd:	0f 84 bc 01 00 00    	je     c0010dbf <SysOpen(regs*)+0x1d6>
c0010c03:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c06:	85 c0                	test   eax,eax
c0010c08:	0f 84 b1 01 00 00    	je     c0010dbf <SysOpen(regs*)+0x1d6>
c0010c0e:	6a 00                	push   0x0
c0010c10:	68 80 23 02 c0       	push   0xc0022380
c0010c15:	50                   	push   eax
c0010c16:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c1a:	56                   	push   esi
c0010c1b:	e8 fa 71 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010c20:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c23:	e8 48 f9 fe ff       	call   c0000570 <strlen>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	83 e8 01             	sub    eax,0x1
c0010c2e:	74 21                	je     c0010c51 <SysOpen(regs*)+0x68>
c0010c30:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010c34:	eb 12                	jmp    c0010c48 <SysOpen(regs*)+0x5f>
c0010c36:	83 fa 3a             	cmp    edx,0x3a
c0010c39:	74 12                	je     c0010c4d <SysOpen(regs*)+0x64>
c0010c3b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c3f:	83 e8 01             	sub    eax,0x1
c0010c42:	74 0d                	je     c0010c51 <SysOpen(regs*)+0x68>
c0010c44:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010c48:	83 fa 2e             	cmp    edx,0x2e
c0010c4b:	75 e9                	jne    c0010c36 <SysOpen(regs*)+0x4d>
c0010c4d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c51:	83 ec 08             	sub    esp,0x8
c0010c54:	68 84 23 02 c0       	push   0xc0022384
c0010c59:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c5c:	50                   	push   eax
c0010c5d:	e8 3f ff ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010c62:	83 c4 10             	add    esp,0x10
c0010c65:	85 c0                	test   eax,eax
c0010c67:	74 1d                	je     c0010c86 <SysOpen(regs*)+0x9d>
c0010c69:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c6c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c79:	81 c4 04 01 00 00    	add    esp,0x104
c0010c7f:	31 c0                	xor    eax,eax
c0010c81:	31 d2                	xor    edx,edx
c0010c83:	5b                   	pop    ebx
c0010c84:	5e                   	pop    esi
c0010c85:	c3                   	ret    
c0010c86:	83 ec 08             	sub    esp,0x8
c0010c89:	68 89 23 02 c0       	push   0xc0022389
c0010c8e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c91:	50                   	push   eax
c0010c92:	e8 0a ff ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010c97:	83 c4 10             	add    esp,0x10
c0010c9a:	85 c0                	test   eax,eax
c0010c9c:	75 cb                	jne    c0010c69 <SysOpen(regs*)+0x80>
c0010c9e:	83 ec 08             	sub    esp,0x8
c0010ca1:	68 85 23 02 c0       	push   0xc0022385
c0010ca6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca9:	50                   	push   eax
c0010caa:	e8 a1 fa fe ff       	call   c0000750 <strcmp>
c0010caf:	83 c4 10             	add    esp,0x10
c0010cb2:	85 c0                	test   eax,eax
c0010cb4:	74 b3                	je     c0010c69 <SysOpen(regs*)+0x80>
c0010cb6:	83 ec 08             	sub    esp,0x8
c0010cb9:	68 84 23 02 c0       	push   0xc0022384
c0010cbe:	56                   	push   esi
c0010cbf:	e8 dd fe ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010cc4:	83 c4 10             	add    esp,0x10
c0010cc7:	85 c0                	test   eax,eax
c0010cc9:	75 9e                	jne    c0010c69 <SysOpen(regs*)+0x80>
c0010ccb:	83 ec 08             	sub    esp,0x8
c0010cce:	68 8e 23 02 c0       	push   0xc002238e
c0010cd3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd6:	50                   	push   eax
c0010cd7:	e8 c5 fe ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	85 c0                	test   eax,eax
c0010ce1:	0f 85 eb 00 00 00    	jne    c0010dd2 <SysOpen(regs*)+0x1e9>
c0010ce7:	83 ec 08             	sub    esp,0x8
c0010cea:	68 93 23 02 c0       	push   0xc0022393
c0010cef:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cf2:	50                   	push   eax
c0010cf3:	e8 a9 fe ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	85 c0                	test   eax,eax
c0010cfd:	0f 85 cf 00 00 00    	jne    c0010dd2 <SysOpen(regs*)+0x1e9>
c0010d03:	83 ec 08             	sub    esp,0x8
c0010d06:	68 8f 23 02 c0       	push   0xc002238f
c0010d0b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d0e:	51                   	push   ecx
c0010d0f:	e8 3c fa fe ff       	call   c0000750 <strcmp>
c0010d14:	83 c4 10             	add    esp,0x10
c0010d17:	85 c0                	test   eax,eax
c0010d19:	0f 84 b3 00 00 00    	je     c0010dd2 <SysOpen(regs*)+0x1e9>
c0010d1f:	83 ec 08             	sub    esp,0x8
c0010d22:	68 8e 23 02 c0       	push   0xc002238e
c0010d27:	56                   	push   esi
c0010d28:	e8 74 fe ff ff       	call   c0010ba1 <string_ends_with(char const*, char const*)>
c0010d2d:	83 c4 10             	add    esp,0x10
c0010d30:	85 c0                	test   eax,eax
c0010d32:	0f 85 9a 00 00 00    	jne    c0010dd2 <SysOpen(regs*)+0x1e9>
c0010d38:	83 ec 0c             	sub    esp,0xc
c0010d3b:	68 14 01 00 00       	push   0x114
c0010d40:	e8 36 dc ff ff       	call   c000e97b <malloc>
c0010d45:	83 c4 0c             	add    esp,0xc
c0010d48:	89 c6                	mov    esi,eax
c0010d4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d52:	50                   	push   eax
c0010d53:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d56:	52                   	push   edx
c0010d57:	56                   	push   esi
c0010d58:	e8 b5 73 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010d5d:	83 c4 10             	add    esp,0x10
c0010d60:	85 f6                	test   esi,esi
c0010d62:	74 5b                	je     c0010dbf <SysOpen(regs*)+0x1d6>
c0010d64:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d67:	0f b6 c2             	movzx  eax,dl
c0010d6a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d6d:	89 d0                	mov    eax,edx
c0010d6f:	83 e0 01             	and    eax,0x1
c0010d72:	f6 c2 02             	test   dl,0x2
c0010d75:	74 03                	je     c0010d7a <SysOpen(regs*)+0x191>
c0010d77:	83 c8 02             	or     eax,0x2
c0010d7a:	f6 c2 04             	test   dl,0x4
c0010d7d:	74 03                	je     c0010d82 <SysOpen(regs*)+0x199>
c0010d7f:	83 c8 04             	or     eax,0x4
c0010d82:	f6 c2 08             	test   dl,0x8
c0010d85:	74 03                	je     c0010d8a <SysOpen(regs*)+0x1a1>
c0010d87:	83 c8 0a             	or     eax,0xa
c0010d8a:	80 e2 10             	and    dl,0x10
c0010d8d:	74 03                	je     c0010d92 <SysOpen(regs*)+0x1a9>
c0010d8f:	83 c8 12             	or     eax,0x12
c0010d92:	83 ec 08             	sub    esp,0x8
c0010d95:	50                   	push   eax
c0010d96:	56                   	push   esi
c0010d97:	e8 94 73 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	85 c0                	test   eax,eax
c0010da1:	75 1c                	jne    c0010dbf <SysOpen(regs*)+0x1d6>
c0010da3:	83 ec 0c             	sub    esp,0xc
c0010da6:	56                   	push   esi
c0010da7:	e8 2c 0e 00 00       	call   c0011bd8 <UnixFile::getFileDescriptor()>
c0010dac:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	89 02                	mov    DWORD PTR [edx],eax
c0010db4:	c1 f8 1f             	sar    eax,0x1f
c0010db7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dba:	e9 ba fe ff ff       	jmp    c0010c79 <SysOpen(regs*)+0x90>
c0010dbf:	81 c4 04 01 00 00    	add    esp,0x104
c0010dc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dcf:	5b                   	pop    ebx
c0010dd0:	5e                   	pop    esi
c0010dd1:	c3                   	ret    
c0010dd2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dd5:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010ddb:	e9 92 fe ff ff       	jmp    c0010c72 <SysOpen(regs*)+0x89>

c0010de0 <KeSystemCall(regs*, void*)>:
c0010de0:	56                   	push   esi
c0010de1:	53                   	push   ebx
c0010de2:	50                   	push   eax
c0010de3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010de7:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010dea:	83 fb 40             	cmp    ebx,0x40
c0010ded:	77 25                	ja     c0010e14 <KeSystemCall(regs*, void*)+0x34>
c0010def:	8b 04 9d 00 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf00]
c0010df6:	85 c0                	test   eax,eax
c0010df8:	74 1a                	je     c0010e14 <KeSystemCall(regs*, void*)+0x34>
c0010dfa:	83 ec 0c             	sub    esp,0xc
c0010dfd:	56                   	push   esi
c0010dfe:	ff d0                	call   eax
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010e06:	83 fb 2f             	cmp    ebx,0x2f
c0010e09:	75 19                	jne    c0010e24 <KeSystemCall(regs*, void*)+0x44>
c0010e0b:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010e12:	eb 10                	jmp    c0010e24 <KeSystemCall(regs*, void*)+0x44>
c0010e14:	56                   	push   esi
c0010e15:	56                   	push   esi
c0010e16:	53                   	push   ebx
c0010e17:	68 98 23 02 c0       	push   0xc0022398
c0010e1c:	e8 43 61 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	59                   	pop    ecx
c0010e25:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e2a:	31 d2                	xor    edx,edx
c0010e2c:	5b                   	pop    ebx
c0010e2d:	5e                   	pop    esi
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <VgaText::isAtty()>:
c0010e30:	b0 01                	mov    al,0x1
c0010e32:	c3                   	ret    
c0010e33:	90                   	nop

c0010e34 <VgaText::~VgaText()>:
c0010e34:	83 ec 0c             	sub    esp,0xc
c0010e37:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c0010e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e40:	89 10                	mov    DWORD PTR [eax],edx
c0010e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e46:	83 ec 0c             	sub    esp,0xc
c0010e49:	50                   	push   eax
c0010e4a:	e8 77 0f 00 00       	call   c0011dc6 <UnixFile::~UnixFile()>
c0010e4f:	83 c4 10             	add    esp,0x10
c0010e52:	90                   	nop
c0010e53:	83 c4 0c             	add    esp,0xc
c0010e56:	c3                   	ret    
c0010e57:	90                   	nop

c0010e58 <VgaText::~VgaText()>:
c0010e58:	83 ec 0c             	sub    esp,0xc
c0010e5b:	83 ec 0c             	sub    esp,0xc
c0010e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e62:	e8 cd ff ff ff       	call   c0010e34 <VgaText::~VgaText()>
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	83 ec 08             	sub    esp,0x8
c0010e6d:	68 84 01 00 00       	push   0x184
c0010e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e76:	e8 85 b8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0010e7b:	83 c4 10             	add    esp,0x10
c0010e7e:	83 c4 0c             	add    esp,0xc
c0010e81:	c3                   	ret    

c0010e82 <VgaText::read(unsigned long long, void*, int*)>:
c0010e82:	83 ec 10             	sub    esp,0x10
c0010e85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e89:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e91:	e8 ff 8c ff ff       	call   c0009b95 <readKeyboard(VgaText*, char*, unsigned long)>
c0010e96:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e9a:	89 02                	mov    DWORD PTR [edx],eax
c0010e9c:	31 c0                	xor    eax,eax
c0010e9e:	83 c4 1c             	add    esp,0x1c
c0010ea1:	c3                   	ret    

c0010ea2 <setTerminalScrollLock(bool)>:
c0010ea2:	c3                   	ret    

c0010ea3 <doTerminalCycle()>:
c0010ea3:	c3                   	ret    

c0010ea4 <addToTerminalCycle(VgaText*)>:
c0010ea4:	c3                   	ret    

c0010ea5 <scrollTerminalScrollLock(int)>:
c0010ea5:	c3                   	ret    

c0010ea6 <VgaText::updateTitle()>:
c0010ea6:	c3                   	ret    
c0010ea7:	90                   	nop

c0010ea8 <VgaText::load()>:
c0010ea8:	c3                   	ret    
c0010ea9:	90                   	nop

c0010eaa <VgaText::updateCursor()>:
c0010eaa:	83 ec 14             	sub    esp,0x14
c0010ead:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010eb1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010eb4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010eb7:	e8 a8 87 00 00       	call   c0019664 <HalConsoleCursorUpdate(int, int)>
c0010ebc:	83 c4 1c             	add    esp,0x1c
c0010ebf:	c3                   	ret    

c0010ec0 <VgaText::doANSI_SGR(int)>:
c0010ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec8:	85 d2                	test   edx,edx
c0010eca:	75 0b                	jne    c0010ed7 <VgaText::doANSI_SGR(int)+0x17>
c0010ecc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010ecf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010ed2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ed5:	eb 59                	jmp    c0010f30 <VgaText::doANSI_SGR(int)+0x70>
c0010ed7:	83 fa 07             	cmp    edx,0x7
c0010eda:	75 0b                	jne    c0010ee7 <VgaText::doANSI_SGR(int)+0x27>
c0010edc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010edf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010ee2:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010ee5:	eb 49                	jmp    c0010f30 <VgaText::doANSI_SGR(int)+0x70>
c0010ee7:	83 fa 1b             	cmp    edx,0x1b
c0010eea:	74 e0                	je     c0010ecc <VgaText::doANSI_SGR(int)+0xc>
c0010eec:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010eef:	83 f9 07             	cmp    ecx,0x7
c0010ef2:	77 09                	ja     c0010efd <VgaText::doANSI_SGR(int)+0x3d>
c0010ef4:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010efb:	eb 20                	jmp    c0010f1d <VgaText::doANSI_SGR(int)+0x5d>
c0010efd:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f00:	83 f9 07             	cmp    ecx,0x7
c0010f03:	77 09                	ja     c0010f0e <VgaText::doANSI_SGR(int)+0x4e>
c0010f05:	8b 14 8d 40 42 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbdc0]
c0010f0c:	eb 22                	jmp    c0010f30 <VgaText::doANSI_SGR(int)+0x70>
c0010f0e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010f11:	83 f9 07             	cmp    ecx,0x7
c0010f14:	77 0b                	ja     c0010f21 <VgaText::doANSI_SGR(int)+0x61>
c0010f16:	8b 14 95 f8 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf08]
c0010f1d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f20:	c3                   	ret    
c0010f21:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010f24:	83 f9 07             	cmp    ecx,0x7
c0010f27:	77 0a                	ja     c0010f33 <VgaText::doANSI_SGR(int)+0x73>
c0010f29:	8b 14 95 d0 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf30]
c0010f30:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f33:	c3                   	ret    

c0010f34 <VgaText::setDefaultBgColour(VgaColour)>:
c0010f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f3c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f3f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f42:	c3                   	ret    
c0010f43:	90                   	nop

c0010f44 <VgaText::setDefaultFgColour(VgaColour)>:
c0010f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f4c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010f4f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f52:	c3                   	ret    
c0010f53:	90                   	nop

c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010f54:	53                   	push   ebx
c0010f55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f61:	51                   	push   ecx
c0010f62:	e8 cd ff ff ff       	call   c0010f34 <VgaText::setDefaultBgColour(VgaColour)>
c0010f67:	58                   	pop    eax
c0010f68:	5a                   	pop    edx
c0010f69:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f6d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f71:	5b                   	pop    ebx
c0010f72:	eb d0                	jmp    c0010f44 <VgaText::setDefaultFgColour(VgaColour)>

c0010f74 <VgaText::setTitleTextColour(VgaColour)>:
c0010f74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f7c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f7f:	c3                   	ret    

c0010f80 <VgaText::setTitleColour(VgaColour)>:
c0010f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f8b:	c3                   	ret    

c0010f8c <VgaText::setTitle(char*)>:
c0010f8c:	c3                   	ret    
c0010f8d:	90                   	nop

c0010f8e <VgaText::combineColours(unsigned char, unsigned char)>:
c0010f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f92:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010f97:	83 e0 0f             	and    eax,0xf
c0010f9a:	c1 e2 04             	shl    edx,0x4
c0010f9d:	09 d0                	or     eax,edx
c0010f9f:	c3                   	ret    

c0010fa0 <VgaText::scrollScreen()>:
c0010fa0:	55                   	push   ebp
c0010fa1:	57                   	push   edi
c0010fa2:	56                   	push   esi
c0010fa3:	be 01 00 00 00       	mov    esi,0x1
c0010fa8:	53                   	push   ebx
c0010fa9:	83 ec 0c             	sub    esp,0xc
c0010fac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fb0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010fb3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010fb9:	31 ff                	xor    edi,edi
c0010fbb:	01 e9                	add    ecx,ebp
c0010fbd:	8a 01                	mov    al,BYTE PTR [ecx]
c0010fbf:	83 fe 18             	cmp    esi,0x18
c0010fc2:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010fc8:	75 20                	jne    c0010fea <VgaText::scrollScreen()+0x4a>
c0010fca:	f7 c7 01 00 00 00    	test   edi,0x1
c0010fd0:	74 15                	je     c0010fe7 <VgaText::scrollScreen()+0x47>
c0010fd2:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010fd6:	50                   	push   eax
c0010fd7:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010fdb:	50                   	push   eax
c0010fdc:	e8 ad ff ff ff       	call   c0010f8e <VgaText::combineColours(unsigned char, unsigned char)>
c0010fe1:	5a                   	pop    edx
c0010fe2:	5a                   	pop    edx
c0010fe3:	88 01                	mov    BYTE PTR [ecx],al
c0010fe5:	eb 03                	jmp    c0010fea <VgaText::scrollScreen()+0x4a>
c0010fe7:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010fea:	47                   	inc    edi
c0010feb:	41                   	inc    ecx
c0010fec:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010ff2:	75 c9                	jne    c0010fbd <VgaText::scrollScreen()+0x1d>
c0010ff4:	46                   	inc    esi
c0010ff5:	83 fe 19             	cmp    esi,0x19
c0010ff8:	75 b9                	jne    c0010fb3 <VgaText::scrollScreen()+0x13>
c0010ffa:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0011000:	75 1f                	jne    c0011021 <VgaText::scrollScreen()+0x81>
c0011002:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011006:	74 05                	je     c001100d <VgaText::scrollScreen()+0x6d>
c0011008:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001100b:	eb 14                	jmp    c0011021 <VgaText::scrollScreen()+0x81>
c001100d:	50                   	push   eax
c001100e:	50                   	push   eax
c001100f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011013:	50                   	push   eax
c0011014:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011018:	50                   	push   eax
c0011019:	e8 da 84 00 00       	call   c00194f8 <HalConsoleScroll(int, int)>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011025:	83 c4 0c             	add    esp,0xc
c0011028:	5b                   	pop    ebx
c0011029:	5e                   	pop    esi
c001102a:	5f                   	pop    edi
c001102b:	5d                   	pop    ebp
c001102c:	e9 79 fe ff ff       	jmp    c0010eaa <VgaText::updateCursor()>
c0011031:	90                   	nop

c0011032 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011032:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011037:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001103c:	c1 e0 08             	shl    eax,0x8
c001103f:	09 d0                	or     eax,edx
c0011041:	c3                   	ret    

c0011042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011042:	55                   	push   ebp
c0011043:	57                   	push   edi
c0011044:	56                   	push   esi
c0011045:	53                   	push   ebx
c0011046:	83 ec 1c             	sub    esp,0x1c
c0011049:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001104d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011051:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011055:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011059:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001105d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011061:	0f b6 c3             	movzx  eax,bl
c0011064:	50                   	push   eax
c0011065:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001106a:	50                   	push   eax
c001106b:	e8 1e ff ff ff       	call   c0010f8e <VgaText::combineColours(unsigned char, unsigned char)>
c0011070:	5a                   	pop    edx
c0011071:	0f b6 c0             	movzx  eax,al
c0011074:	59                   	pop    ecx
c0011075:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c001107a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001107e:	50                   	push   eax
c001107f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011083:	e8 aa ff ff ff       	call   c0011032 <VgaText::combineCharAndColour(char, unsigned char)>
c0011088:	5a                   	pop    edx
c0011089:	6b d7 50             	imul   edx,edi,0x50
c001108c:	59                   	pop    ecx
c001108d:	01 f2                	add    edx,esi
c001108f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0011092:	0f b7 d2             	movzx  edx,dx
c0011095:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0011099:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c001109f:	75 28                	jne    c00110c9 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00110a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110a5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00110a9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00110ad:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00110b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00110b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00110bd:	83 c4 1c             	add    esp,0x1c
c00110c0:	5b                   	pop    ebx
c00110c1:	5e                   	pop    esi
c00110c2:	5f                   	pop    edi
c00110c3:	5d                   	pop    ebp
c00110c4:	e9 37 85 00 00       	jmp    c0019600 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00110c9:	83 c4 1c             	add    esp,0x1c
c00110cc:	5b                   	pop    ebx
c00110cd:	5e                   	pop    esi
c00110ce:	5f                   	pop    edi
c00110cf:	5d                   	pop    ebp
c00110d0:	c3                   	ret    
c00110d1:	90                   	nop

c00110d2 <VgaText::getCursorX()>:
c00110d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00110d9:	c3                   	ret    

c00110da <VgaText::getCursorY()>:
c00110da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110e1:	c3                   	ret    

c00110e2 <VgaText::setCursor(int, int)>:
c00110e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110ea:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00110ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00110f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00110f4:	e9 b1 fd ff ff       	jmp    c0010eaa <VgaText::updateCursor()>

c00110f9 <setActiveTerminal(VgaText*)>:
c00110f9:	53                   	push   ebx
c00110fa:	83 ec 08             	sub    esp,0x8
c00110fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011101:	85 db                	test   ebx,ebx
c0011103:	75 11                	jne    c0011116 <setActiveTerminal(VgaText*)+0x1d>
c0011105:	c7 44 24 10 ac 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223ac
c001110d:	83 c4 08             	add    esp,0x8
c0011110:	5b                   	pop    ebx
c0011111:	e9 ac db ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0011116:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001111b:	85 c0                	test   eax,eax
c001111d:	74 0c                	je     c001112b <setActiveTerminal(VgaText*)+0x32>
c001111f:	83 ec 0c             	sub    esp,0xc
c0011122:	50                   	push   eax
c0011123:	e8 82 fd ff ff       	call   c0010eaa <VgaText::updateCursor()>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011131:	50                   	push   eax
c0011132:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011135:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011138:	53                   	push   ebx
c0011139:	e8 a4 ff ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c001113e:	83 c4 18             	add    esp,0x18
c0011141:	5b                   	pop    ebx
c0011142:	c3                   	ret    
c0011143:	90                   	nop

c0011144 <VgaText::clearScreen()>:
c0011144:	57                   	push   edi
c0011145:	56                   	push   esi
c0011146:	31 f6                	xor    esi,esi
c0011148:	53                   	push   ebx
c0011149:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001114d:	52                   	push   edx
c001114e:	6a 00                	push   0x0
c0011150:	6a 00                	push   0x0
c0011152:	53                   	push   ebx
c0011153:	e8 8a ff ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c0011158:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001115f:	83 c4 10             	add    esp,0x10
c0011162:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011165:	7e 20                	jle    c0011187 <VgaText::clearScreen()+0x43>
c0011167:	31 ff                	xor    edi,edi
c0011169:	50                   	push   eax
c001116a:	50                   	push   eax
c001116b:	56                   	push   esi
c001116c:	57                   	push   edi
c001116d:	47                   	inc    edi
c001116e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011171:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011174:	6a 20                	push   0x20
c0011176:	53                   	push   ebx
c0011177:	e8 c6 fe ff ff       	call   c0011042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001117c:	83 c4 20             	add    esp,0x20
c001117f:	83 ff 50             	cmp    edi,0x50
c0011182:	75 e5                	jne    c0011169 <VgaText::clearScreen()+0x25>
c0011184:	46                   	inc    esi
c0011185:	eb db                	jmp    c0011162 <VgaText::clearScreen()+0x1e>
c0011187:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001118e:	5b                   	pop    ebx
c001118f:	5e                   	pop    esi
c0011190:	5f                   	pop    edi
c0011191:	c3                   	ret    

c0011192 <VgaText::setCursorX(int)>:
c0011192:	83 ec 10             	sub    esp,0x10
c0011195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011199:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001119c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a0:	50                   	push   eax
c00111a1:	e8 3c ff ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c00111a6:	83 c4 1c             	add    esp,0x1c
c00111a9:	c3                   	ret    

c00111aa <VgaText::setCursorY(int)>:
c00111aa:	83 ec 10             	sub    esp,0x10
c00111ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00111b5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00111b8:	50                   	push   eax
c00111b9:	e8 24 ff ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c00111be:	83 c4 1c             	add    esp,0x1c
c00111c1:	c3                   	ret    

c00111c2 <VgaText::incrementCursor(bool)>:
c00111c2:	56                   	push   esi
c00111c3:	53                   	push   ebx
c00111c4:	51                   	push   ecx
c00111c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00111cd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00111d0:	40                   	inc    eax
c00111d1:	83 f8 50             	cmp    eax,0x50
c00111d4:	74 05                	je     c00111db <VgaText::incrementCursor(bool)+0x19>
c00111d6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00111d9:	eb 24                	jmp    c00111ff <VgaText::incrementCursor(bool)+0x3d>
c00111db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111de:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111e5:	8d 50 01             	lea    edx,[eax+0x1]
c00111e8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00111eb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00111ee:	75 0f                	jne    c00111ff <VgaText::incrementCursor(bool)+0x3d>
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00111f6:	53                   	push   ebx
c00111f7:	e8 a4 fd ff ff       	call   c0010fa0 <VgaText::scrollScreen()>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	89 f0                	mov    eax,esi
c0011201:	84 c0                	test   al,al
c0011203:	74 0c                	je     c0011211 <VgaText::incrementCursor(bool)+0x4f>
c0011205:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011209:	5a                   	pop    edx
c001120a:	5b                   	pop    ebx
c001120b:	5e                   	pop    esi
c001120c:	e9 99 fc ff ff       	jmp    c0010eaa <VgaText::updateCursor()>
c0011211:	58                   	pop    eax
c0011212:	5b                   	pop    ebx
c0011213:	5e                   	pop    esi
c0011214:	c3                   	ret    
c0011215:	90                   	nop

c0011216 <VgaText::decrementCursor(bool)>:
c0011216:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001121a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001121e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011221:	85 c0                	test   eax,eax
c0011223:	74 04                	je     c0011229 <VgaText::decrementCursor(bool)+0x13>
c0011225:	48                   	dec    eax
c0011226:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011229:	84 c9                	test   cl,cl
c001122b:	74 09                	je     c0011236 <VgaText::decrementCursor(bool)+0x20>
c001122d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011231:	e9 74 fc ff ff       	jmp    c0010eaa <VgaText::updateCursor()>
c0011236:	c3                   	ret    
c0011237:	90                   	nop

c0011238 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011238:	53                   	push   ebx
c0011239:	83 ec 08             	sub    esp,0x8
c001123c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011241:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011245:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011249:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001124d:	83 f8 07             	cmp    eax,0x7
c0011250:	75 21                	jne    c0011273 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011252:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001125a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011262:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c001126a:	83 c4 08             	add    esp,0x8
c001126d:	5b                   	pop    ebx
c001126e:	e9 3f 77 ff ff       	jmp    c00089b2 <KeBeep(int, int, bool)>
c0011273:	83 f8 0d             	cmp    eax,0xd
c0011276:	75 09                	jne    c0011281 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011278:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001127f:	eb 2d                	jmp    c00112ae <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011281:	83 f8 0a             	cmp    eax,0xa
c0011284:	75 31                	jne    c00112b7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011286:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011289:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011290:	8d 50 01             	lea    edx,[eax+0x1]
c0011293:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011296:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011299:	75 0f                	jne    c00112aa <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001129b:	83 ec 0c             	sub    esp,0xc
c001129e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00112a1:	53                   	push   ebx
c00112a2:	e8 f9 fc ff ff       	call   c0010fa0 <VgaText::scrollScreen()>
c00112a7:	83 c4 10             	add    esp,0x10
c00112aa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00112ae:	83 c4 08             	add    esp,0x8
c00112b1:	5b                   	pop    ebx
c00112b2:	e9 f3 fb ff ff       	jmp    c0010eaa <VgaText::updateCursor()>
c00112b7:	83 f8 08             	cmp    eax,0x8
c00112ba:	75 25                	jne    c00112e1 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00112bc:	50                   	push   eax
c00112bd:	50                   	push   eax
c00112be:	6a 01                	push   0x1
c00112c0:	53                   	push   ebx
c00112c1:	e8 50 ff ff ff       	call   c0011216 <VgaText::decrementCursor(bool)>
c00112c6:	5a                   	pop    edx
c00112c7:	59                   	pop    ecx
c00112c8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112cb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00112d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00112d4:	6a 20                	push   0x20
c00112d6:	53                   	push   ebx
c00112d7:	e8 66 fd ff ff       	call   c0011042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112dc:	83 c4 28             	add    esp,0x28
c00112df:	5b                   	pop    ebx
c00112e0:	c3                   	ret    
c00112e1:	83 ec 08             	sub    esp,0x8
c00112e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112ea:	51                   	push   ecx
c00112eb:	52                   	push   edx
c00112ec:	50                   	push   eax
c00112ed:	53                   	push   ebx
c00112ee:	e8 4f fd ff ff       	call   c0011042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112f3:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00112f7:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00112ff:	83 c4 28             	add    esp,0x28
c0011302:	5b                   	pop    ebx
c0011303:	e9 ba fe ff ff       	jmp    c00111c2 <VgaText::incrementCursor(bool)>

c0011308 <VgaText::putchar(char)>:
c0011308:	57                   	push   edi
c0011309:	56                   	push   esi
c001130a:	53                   	push   ebx
c001130b:	83 ec 10             	sub    esp,0x10
c001130e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011312:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011316:	89 f8                	mov    eax,edi
c0011318:	0f be c0             	movsx  eax,al
c001131b:	83 f8 5b             	cmp    eax,0x5b
c001131e:	75 18                	jne    c0011338 <VgaText::putchar(char)+0x30>
c0011320:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011324:	74 20                	je     c0011346 <VgaText::putchar(char)+0x3e>
c0011326:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001132c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011333:	e9 c1 00 00 00       	jmp    c00113f9 <VgaText::putchar(char)+0xf1>
c0011338:	83 f8 1b             	cmp    eax,0x1b
c001133b:	75 09                	jne    c0011346 <VgaText::putchar(char)+0x3e>
c001133d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011341:	e9 b3 00 00 00       	jmp    c00113f9 <VgaText::putchar(char)+0xf1>
c0011346:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011349:	84 c9                	test   cl,cl
c001134b:	0f 84 98 00 00 00    	je     c00113e9 <VgaText::putchar(char)+0xe1>
c0011351:	8d 77 c0             	lea    esi,[edi-0x40]
c0011354:	89 f2                	mov    edx,esi
c0011356:	80 fa 3e             	cmp    dl,0x3e
c0011359:	77 78                	ja     c00113d3 <VgaText::putchar(char)+0xcb>
c001135b:	83 f8 6d             	cmp    eax,0x6d
c001135e:	75 47                	jne    c00113a7 <VgaText::putchar(char)+0x9f>
c0011360:	31 f6                	xor    esi,esi
c0011362:	31 d2                	xor    edx,edx
c0011364:	31 c0                	xor    eax,eax
c0011366:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011369:	7e 2d                	jle    c0011398 <VgaText::putchar(char)+0x90>
c001136b:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011370:	83 fa 3b             	cmp    edx,0x3b
c0011373:	75 17                	jne    c001138c <VgaText::putchar(char)+0x84>
c0011375:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011379:	50                   	push   eax
c001137a:	53                   	push   ebx
c001137b:	e8 40 fb ff ff       	call   c0010ec0 <VgaText::doANSI_SGR(int)>
c0011380:	59                   	pop    ecx
c0011381:	31 d2                	xor    edx,edx
c0011383:	5f                   	pop    edi
c0011384:	31 c0                	xor    eax,eax
c0011386:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001138a:	eb 09                	jmp    c0011395 <VgaText::putchar(char)+0x8d>
c001138c:	6b c0 0a             	imul   eax,eax,0xa
c001138f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011393:	88 ca                	mov    dl,cl
c0011395:	46                   	inc    esi
c0011396:	eb ce                	jmp    c0011366 <VgaText::putchar(char)+0x5e>
c0011398:	84 d2                	test   dl,dl
c001139a:	74 2f                	je     c00113cb <VgaText::putchar(char)+0xc3>
c001139c:	50                   	push   eax
c001139d:	53                   	push   ebx
c001139e:	e8 1d fb ff ff       	call   c0010ec0 <VgaText::doANSI_SGR(int)>
c00113a3:	58                   	pop    eax
c00113a4:	5a                   	pop    edx
c00113a5:	eb 24                	jmp    c00113cb <VgaText::putchar(char)+0xc3>
c00113a7:	83 f8 4a             	cmp    eax,0x4a
c00113aa:	75 1f                	jne    c00113cb <VgaText::putchar(char)+0xc3>
c00113ac:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00113b0:	75 19                	jne    c00113cb <VgaText::putchar(char)+0xc3>
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	53                   	push   ebx
c00113b6:	e8 89 fd ff ff       	call   c0011144 <VgaText::clearScreen()>
c00113bb:	83 c4 0c             	add    esp,0xc
c00113be:	6a 00                	push   0x0
c00113c0:	6a 00                	push   0x0
c00113c2:	53                   	push   ebx
c00113c3:	e8 1a fd ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c00113c8:	83 c4 10             	add    esp,0x10
c00113cb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00113d1:	eb 26                	jmp    c00113f9 <VgaText::putchar(char)+0xf1>
c00113d3:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00113d6:	83 f8 0e             	cmp    eax,0xe
c00113d9:	7f 1e                	jg     c00113f9 <VgaText::putchar(char)+0xf1>
c00113db:	8d 48 01             	lea    ecx,[eax+0x1]
c00113de:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00113e1:	89 f9                	mov    ecx,edi
c00113e3:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00113e7:	eb 10                	jmp    c00113f9 <VgaText::putchar(char)+0xf1>
c00113e9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00113ec:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00113ef:	50                   	push   eax
c00113f0:	53                   	push   ebx
c00113f1:	e8 42 fe ff ff       	call   c0011238 <VgaText::putchar(char, VgaColour, VgaColour)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	83 c4 10             	add    esp,0x10
c00113fc:	5b                   	pop    ebx
c00113fd:	5e                   	pop    esi
c00113fe:	5f                   	pop    edi
c00113ff:	c3                   	ret    

c0011400 <VgaText::putx(unsigned int)>:
c0011400:	57                   	push   edi
c0011401:	b9 11 00 00 00       	mov    ecx,0x11
c0011406:	56                   	push   esi
c0011407:	be cf 0e 02 c0       	mov    esi,0xc0020ecf
c001140c:	53                   	push   ebx
c001140d:	83 ec 20             	sub    esp,0x20
c0011410:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011414:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011418:	fc                   	cld    
c0011419:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001141b:	be 08 00 00 00       	mov    esi,0x8
c0011420:	50                   	push   eax
c0011421:	50                   	push   eax
c0011422:	89 d8                	mov    eax,ebx
c0011424:	c1 e3 04             	shl    ebx,0x4
c0011427:	c1 e8 1c             	shr    eax,0x1c
c001142a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001142f:	50                   	push   eax
c0011430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011434:	e8 cf fe ff ff       	call   c0011308 <VgaText::putchar(char)>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	4e                   	dec    esi
c001143d:	75 e1                	jne    c0011420 <VgaText::putx(unsigned int)+0x20>
c001143f:	83 c4 20             	add    esp,0x20
c0011442:	5b                   	pop    ebx
c0011443:	5e                   	pop    esi
c0011444:	5f                   	pop    edi
c0011445:	c3                   	ret    

c0011446 <VgaText::puts(char const*)>:
c0011446:	53                   	push   ebx
c0011447:	83 ec 08             	sub    esp,0x8
c001144a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001144e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011451:	85 c0                	test   eax,eax
c0011453:	74 12                	je     c0011467 <VgaText::puts(char const*)+0x21>
c0011455:	43                   	inc    ebx
c0011456:	51                   	push   ecx
c0011457:	51                   	push   ecx
c0011458:	50                   	push   eax
c0011459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001145d:	e8 a6 fe ff ff       	call   c0011308 <VgaText::putchar(char)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	eb e7                	jmp    c001144e <VgaText::puts(char const*)+0x8>
c0011467:	83 c4 08             	add    esp,0x8
c001146a:	5b                   	pop    ebx
c001146b:	c3                   	ret    

c001146c <VgaText::write(unsigned long long, void*, int*)>:
c001146c:	55                   	push   ebp
c001146d:	57                   	push   edi
c001146e:	56                   	push   esi
c001146f:	53                   	push   ebx
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011477:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001147b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001147f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011486:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011489:	39 eb                	cmp    ebx,ebp
c001148b:	74 13                	je     c00114a0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001148d:	43                   	inc    ebx
c001148e:	50                   	push   eax
c001148f:	50                   	push   eax
c0011490:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011494:	50                   	push   eax
c0011495:	56                   	push   esi
c0011496:	e8 6d fe ff ff       	call   c0011308 <VgaText::putchar(char)>
c001149b:	83 c4 10             	add    esp,0x10
c001149e:	eb e9                	jmp    c0011489 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114a0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00114a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114ab:	89 38                	mov    DWORD PTR [eax],edi
c00114ad:	83 c4 0c             	add    esp,0xc
c00114b0:	31 c0                	xor    eax,eax
c00114b2:	5b                   	pop    ebx
c00114b3:	5e                   	pop    esi
c00114b4:	5f                   	pop    edi
c00114b5:	5d                   	pop    ebp
c00114b6:	c3                   	ret    
c00114b7:	90                   	nop

c00114b8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00114b8:	55                   	push   ebp
c00114b9:	57                   	push   edi
c00114ba:	56                   	push   esi
c00114bb:	53                   	push   ebx
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00114cf:	50                   	push   eax
c00114d0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114d5:	50                   	push   eax
c00114d6:	e8 b3 fa ff ff       	call   c0010f8e <VgaText::combineColours(unsigned char, unsigned char)>
c00114db:	5a                   	pop    edx
c00114dc:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00114e0:	59                   	pop    ecx
c00114e1:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00114e4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114e8:	0f b7 f6             	movzx  esi,si
c00114eb:	0f b6 e8             	movzx  ebp,al
c00114ee:	01 f6                	add    esi,esi
c00114f0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00114f3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00114f6:	85 c0                	test   eax,eax
c00114f8:	0f 84 ef 00 00 00    	je     c00115ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c00114fe:	83 f8 0d             	cmp    eax,0xd
c0011501:	75 0c                	jne    c001150f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011503:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001150a:	e9 d8 00 00 00       	jmp    c00115e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001150f:	83 f8 0a             	cmp    eax,0xa
c0011512:	75 44                	jne    c0011558 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011514:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011517:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001151e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011521:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0011524:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0011527:	75 0f                	jne    c0011538 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011529:	83 ec 0c             	sub    esp,0xc
c001152c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001152f:	53                   	push   ebx
c0011530:	e8 6b fa ff ff       	call   c0010fa0 <VgaText::scrollScreen()>
c0011535:	83 c4 10             	add    esp,0x10
c0011538:	83 ec 0c             	sub    esp,0xc
c001153b:	53                   	push   ebx
c001153c:	e8 69 f9 ff ff       	call   c0010eaa <VgaText::updateCursor()>
c0011541:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001154b:	0f b7 f6             	movzx  esi,si
c001154e:	01 f6                	add    esi,esi
c0011550:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011553:	e9 8f 00 00 00       	jmp    c00115e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011558:	83 f8 08             	cmp    eax,0x8
c001155b:	75 34                	jne    c0011591 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001155d:	51                   	push   ecx
c001155e:	51                   	push   ecx
c001155f:	6a 01                	push   0x1
c0011561:	53                   	push   ebx
c0011562:	e8 af fc ff ff       	call   c0011216 <VgaText::decrementCursor(bool)>
c0011567:	5e                   	pop    esi
c0011568:	58                   	pop    eax
c0011569:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001156c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001156f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011572:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011575:	6a 20                	push   0x20
c0011577:	53                   	push   ebx
c0011578:	e8 c5 fa ff ff       	call   c0011042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001157d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011581:	83 c4 20             	add    esp,0x20
c0011584:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011587:	0f b7 f6             	movzx  esi,si
c001158a:	01 f6                	add    esi,esi
c001158c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001158f:	eb 56                	jmp    c00115e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011591:	52                   	push   edx
c0011592:	52                   	push   edx
c0011593:	55                   	push   ebp
c0011594:	50                   	push   eax
c0011595:	e8 98 fa ff ff       	call   c0011032 <VgaText::combineCharAndColour(char, unsigned char)>
c001159a:	83 c4 10             	add    esp,0x10
c001159d:	66 89 06             	mov    WORD PTR [esi],ax
c00115a0:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c00115a6:	75 1d                	jne    c00115c5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00115a8:	83 ec 0c             	sub    esp,0xc
c00115ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00115ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00115b1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115b5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115b9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00115bc:	50                   	push   eax
c00115bd:	e8 3e 80 00 00       	call   c0019600 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00115c2:	83 c4 20             	add    esp,0x20
c00115c5:	83 c6 02             	add    esi,0x2
c00115c8:	50                   	push   eax
c00115c9:	50                   	push   eax
c00115ca:	6a 00                	push   0x0
c00115cc:	53                   	push   ebx
c00115cd:	e8 f0 fb ff ff       	call   c00111c2 <VgaText::incrementCursor(bool)>
c00115d2:	83 c4 10             	add    esp,0x10
c00115d5:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00115d9:	75 0c                	jne    c00115e7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115db:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115df:	0f b7 f6             	movzx  esi,si
c00115e2:	01 f6                	add    esi,esi
c00115e4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115e7:	47                   	inc    edi
c00115e8:	e9 06 ff ff ff       	jmp    c00114f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00115ed:	83 ec 0c             	sub    esp,0xc
c00115f0:	53                   	push   ebx
c00115f1:	e8 b4 f8 ff ff       	call   c0010eaa <VgaText::updateCursor()>
c00115f6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00115fd:	83 c4 1c             	add    esp,0x1c
c0011600:	5b                   	pop    ebx
c0011601:	5e                   	pop    esi
c0011602:	5f                   	pop    edi
c0011603:	5d                   	pop    ebp
c0011604:	c3                   	ret    
c0011605:	90                   	nop

c0011606 <VgaText::VgaText(char const*)>:
c0011606:	56                   	push   esi
c0011607:	53                   	push   ebx
c0011608:	83 ec 04             	sub    esp,0x4
c001160b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001160f:	83 ec 08             	sub    esp,0x8
c0011612:	6a 00                	push   0x0
c0011614:	50                   	push   eax
c0011615:	e8 c6 05 00 00       	call   c0011be0 <UnixFile::UnixFile(int)>
c001161a:	83 c4 10             	add    esp,0x10
c001161d:	ba d0 23 02 c0       	mov    edx,0xc00223d0
c0011622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011626:	89 10                	mov    DWORD PTR [eax],edx
c0011628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011637:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011642:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001164a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001164e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011652:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011668:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001166f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011673:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001167a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001167e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0011685:	83 ec 0c             	sub    esp,0xc
c0011688:	6a 01                	push   0x1
c001168a:	e8 a0 09 00 00       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	89 c2                	mov    edx,eax
c0011694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011698:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001169b:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00116a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116a8:	89 c6                	mov    esi,eax
c00116aa:	e8 07 d8 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00116af:	68 05 0c 00 00       	push   0xc05
c00116b4:	56                   	push   esi
c00116b5:	50                   	push   eax
c00116b6:	53                   	push   ebx
c00116b7:	e8 56 10 00 00       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c00116bc:	83 c4 10             	add    esp,0x10
c00116bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116c6:	83 ec 04             	sub    esp,0x4
c00116c9:	68 a0 0f 00 00       	push   0xfa0
c00116ce:	6a 00                	push   0x0
c00116d0:	50                   	push   eax
c00116d1:	e8 1a ee fe ff       	call   c00004f0 <memset>
c00116d6:	83 c4 10             	add    esp,0x10
c00116d9:	83 ec 04             	sub    esp,0x4
c00116dc:	6a 00                	push   0x0
c00116de:	6a 07                	push   0x7
c00116e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116e4:	e8 6b f8 ff ff       	call   c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	83 ec 04             	sub    esp,0x4
c00116ef:	6a 00                	push   0x0
c00116f1:	6a 00                	push   0x0
c00116f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116f7:	e8 e6 f9 ff ff       	call   c00110e2 <VgaText::setCursor(int, int)>
c00116fc:	83 c4 10             	add    esp,0x10
c00116ff:	83 ec 0c             	sub    esp,0xc
c0011702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011706:	e8 39 fa ff ff       	call   c0011144 <VgaText::clearScreen()>
c001170b:	83 c4 10             	add    esp,0x10
c001170e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011712:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001171a:	05 82 00 00 00       	add    eax,0x82
c001171f:	83 ec 04             	sub    esp,0x4
c0011722:	68 80 00 00 00       	push   0x80
c0011727:	6a 00                	push   0x0
c0011729:	50                   	push   eax
c001172a:	e8 c1 ed fe ff       	call   c00004f0 <memset>
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011736:	05 02 01 00 00       	add    eax,0x102
c001173b:	83 ec 04             	sub    esp,0x4
c001173e:	68 80 00 00 00       	push   0x80
c0011743:	6a 00                	push   0x0
c0011745:	50                   	push   eax
c0011746:	e8 a5 ed fe ff       	call   c00004f0 <memset>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	90                   	nop
c001174f:	83 c4 04             	add    esp,0x4
c0011752:	5b                   	pop    ebx
c0011753:	5e                   	pop    esi
c0011754:	c3                   	ret    
c0011755:	90                   	nop

c0011756 <VgaText::receiveKey(unsigned char)>:
c0011756:	55                   	push   ebp
c0011757:	57                   	push   edi
c0011758:	56                   	push   esi
c0011759:	53                   	push   ebx
c001175a:	83 ec 2c             	sub    esp,0x2c
c001175d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0011761:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011765:	89 ef                	mov    edi,ebp
c0011767:	81 e7 ff 00 00 00    	and    edi,0xff
c001176d:	0f 84 66 01 00 00    	je     c00118d9 <VgaText::receiveKey(unsigned char)+0x183>
c0011773:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011779:	83 ff 08             	cmp    edi,0x8
c001177c:	75 73                	jne    c00117f1 <VgaText::receiveKey(unsigned char)+0x9b>
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	56                   	push   esi
c0011782:	e8 e9 ed fe ff       	call   c0000570 <strlen>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	85 c0                	test   eax,eax
c001178c:	0f 84 02 01 00 00    	je     c0011894 <VgaText::receiveKey(unsigned char)+0x13e>
c0011792:	50                   	push   eax
c0011793:	50                   	push   eax
c0011794:	6a 08                	push   0x8
c0011796:	53                   	push   ebx
c0011797:	e8 6c fb ff ff       	call   c0011308 <VgaText::putchar(char)>
c001179c:	89 34 24             	mov    DWORD PTR [esp],esi
c001179f:	e8 cc ed fe ff       	call   c0000570 <strlen>
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00117af:	83 fa 0d             	cmp    edx,0xd
c00117b2:	89 d0                	mov    eax,edx
c00117b4:	0f 95 c1             	setne  cl
c00117b7:	83 fa 1f             	cmp    edx,0x1f
c00117ba:	0f 9e c2             	setle  dl
c00117bd:	0f b6 d2             	movzx  edx,dl
c00117c0:	85 ca                	test   edx,ecx
c00117c2:	74 17                	je     c00117db <VgaText::receiveKey(unsigned char)+0x85>
c00117c4:	83 e8 08             	sub    eax,0x8
c00117c7:	3c 02                	cmp    al,0x2
c00117c9:	76 10                	jbe    c00117db <VgaText::receiveKey(unsigned char)+0x85>
c00117cb:	55                   	push   ebp
c00117cc:	55                   	push   ebp
c00117cd:	68 ba 23 02 c0       	push   0xc00223ba
c00117d2:	53                   	push   ebx
c00117d3:	e8 6e fc ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	83 ec 0c             	sub    esp,0xc
c00117de:	56                   	push   esi
c00117df:	e8 8c ed fe ff       	call   c0000570 <strlen>
c00117e4:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00117ec:	e9 a0 00 00 00       	jmp    c0011891 <VgaText::receiveKey(unsigned char)+0x13b>
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00117fa:	50                   	push   eax
c00117fb:	e8 70 ed fe ff       	call   c0000570 <strlen>
c0011800:	89 34 24             	mov    DWORD PTR [esp],esi
c0011803:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011807:	e8 64 ed fe ff       	call   c0000570 <strlen>
c001180c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011817:	3d 80 00 00 00       	cmp    eax,0x80
c001181c:	0f 87 b7 00 00 00    	ja     c00118d9 <VgaText::receiveKey(unsigned char)+0x183>
c0011822:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011825:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011828:	3c 1e                	cmp    al,0x1e
c001182a:	0f 96 c0             	setbe  al
c001182d:	80 fa 01             	cmp    dl,0x1
c0011830:	0f 97 c2             	seta   dl
c0011833:	0f b6 d2             	movzx  edx,dl
c0011836:	85 c2                	test   edx,eax
c0011838:	74 2e                	je     c0011868 <VgaText::receiveKey(unsigned char)+0x112>
c001183a:	83 ff 0d             	cmp    edi,0xd
c001183d:	74 29                	je     c0011868 <VgaText::receiveKey(unsigned char)+0x112>
c001183f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011842:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011845:	68 c0 23 02 c0       	push   0xc00223c0
c001184a:	53                   	push   ebx
c001184b:	e8 68 fc ff ff       	call   c00114b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011850:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011853:	8d 45 40             	lea    eax,[ebp+0x40]
c0011856:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011859:	0f b6 c0             	movzx  eax,al
c001185c:	50                   	push   eax
c001185d:	53                   	push   ebx
c001185e:	e8 d5 f9 ff ff       	call   c0011238 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011863:	83 c4 20             	add    esp,0x20
c0011866:	eb 11                	jmp    c0011879 <VgaText::receiveKey(unsigned char)+0x123>
c0011868:	89 e8                	mov    eax,ebp
c001186a:	51                   	push   ecx
c001186b:	0f be c0             	movsx  eax,al
c001186e:	51                   	push   ecx
c001186f:	50                   	push   eax
c0011870:	53                   	push   ebx
c0011871:	e8 92 fa ff ff       	call   c0011308 <VgaText::putchar(char)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001187e:	89 e8                	mov    eax,ebp
c0011880:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011884:	52                   	push   edx
c0011885:	52                   	push   edx
c0011886:	8d 44 24 26          	lea    eax,[esp+0x26]
c001188a:	50                   	push   eax
c001188b:	56                   	push   esi
c001188c:	e8 af ef fe ff       	call   c0000840 <strcat>
c0011891:	83 c4 10             	add    esp,0x10
c0011894:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c001189a:	b0 01                	mov    al,0x1
c001189c:	83 ff 1c             	cmp    edi,0x1c
c001189f:	77 0e                	ja     c00118af <VgaText::receiveKey(unsigned char)+0x159>
c00118a1:	b8 08 04 00 10       	mov    eax,0x10000408
c00118a6:	89 f9                	mov    ecx,edi
c00118a8:	d3 e8                	shr    eax,cl
c00118aa:	f7 d0                	not    eax
c00118ac:	83 e0 01             	and    eax,0x1
c00118af:	84 c0                	test   al,al
c00118b1:	74 04                	je     c00118b7 <VgaText::receiveKey(unsigned char)+0x161>
c00118b3:	84 d2                	test   dl,dl
c00118b5:	74 22                	je     c00118d9 <VgaText::receiveKey(unsigned char)+0x183>
c00118b7:	81 c3 02 01 00 00    	add    ebx,0x102
c00118bd:	50                   	push   eax
c00118be:	50                   	push   eax
c00118bf:	56                   	push   esi
c00118c0:	53                   	push   ebx
c00118c1:	e8 7a ef fe ff       	call   c0000840 <strcat>
c00118c6:	83 c4 0c             	add    esp,0xc
c00118c9:	68 80 00 00 00       	push   0x80
c00118ce:	6a 00                	push   0x0
c00118d0:	56                   	push   esi
c00118d1:	e8 1a ec fe ff       	call   c00004f0 <memset>
c00118d6:	83 c4 10             	add    esp,0x10
c00118d9:	83 c4 2c             	add    esp,0x2c
c00118dc:	5b                   	pop    ebx
c00118dd:	5e                   	pop    esi
c00118de:	5f                   	pop    edi
c00118df:	5d                   	pop    ebp
c00118e0:	c3                   	ret    
c00118e1:	90                   	nop

c00118e2 <VgaText::doUpdate()>:
c00118e2:	c3                   	ret    
c00118e3:	90                   	nop

c00118e4 <TSS::TSS()>:
c00118e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118ef:	90                   	nop
c00118f0:	c3                   	ret    
c00118f1:	90                   	nop
c00118f2:	66 90                	xchg   ax,ax

c00118f4 <TSS::setESP(unsigned long)>:
c00118f4:	55                   	push   ebp
c00118f5:	89 e5                	mov    ebp,esp
c00118f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011900:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011903:	90                   	nop
c0011904:	5d                   	pop    ebp
c0011905:	c3                   	ret    
c0011906:	66 90                	xchg   ax,ax

c0011908 <TSS::flush()>:
c0011908:	55                   	push   ebp
c0011909:	89 e5                	mov    ebp,esp
c001190b:	83 ec 10             	sub    esp,0x10
c001190e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011911:	8b 00                	mov    eax,DWORD PTR [eax]
c0011913:	83 c8 03             	or     eax,0x3
c0011916:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001191a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001191e:	66 89 d0             	mov    ax,dx
c0011921:	0f 00 d8             	ltr    ax
c0011924:	90                   	nop
c0011925:	c9                   	leave  
c0011926:	c3                   	ret    
c0011927:	90                   	nop

c0011928 <TSS::setup(unsigned long, unsigned long)>:
c0011928:	55                   	push   ebp
c0011929:	89 e5                	mov    ebp,esp
c001192b:	83 ec 18             	sub    esp,0x18
c001192e:	83 ec 0c             	sub    esp,0xc
c0011931:	6a 68                	push   0x68
c0011933:	e8 43 d0 ff ff       	call   c000e97b <malloc>
c0011938:	83 c4 10             	add    esp,0x10
c001193b:	89 c2                	mov    edx,eax
c001193d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011940:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	50                   	push   eax
c001194d:	68 e4 23 02 c0       	push   0xc00223e4
c0011952:	e8 0d 56 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011960:	83 ec 04             	sub    esp,0x4
c0011963:	6a 68                	push   0x68
c0011965:	6a 00                	push   0x0
c0011967:	50                   	push   eax
c0011968:	e8 83 eb fe ff       	call   c00004f0 <memset>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011976:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001197c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001197f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011982:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001198e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011991:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001199a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00119a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a6:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00119ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b2:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00119b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119be:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00119c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ca:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00119d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119d6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00119e5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00119e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119f1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fa:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a01:	83 ec 0c             	sub    esp,0xc
c0011a04:	68 fb 23 02 c0       	push   0xc00223fb
c0011a09:	e8 56 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a0e:	83 c4 10             	add    esp,0x10
c0011a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a17:	0f 20 da             	mov    edx,cr3
c0011a1a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a20:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a23:	83 ec 0c             	sub    esp,0xc
c0011a26:	68 fe 23 02 c0       	push   0xc00223fe
c0011a2b:	e8 34 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a30:	83 c4 10             	add    esp,0x10
c0011a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a39:	83 ec 08             	sub    esp,0x8
c0011a3c:	50                   	push   eax
c0011a3d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a40:	50                   	push   eax
c0011a41:	e8 84 c6 ff ff       	call   c000e0ca <GDTEntry::setBase(unsigned int)>
c0011a46:	83 c4 10             	add    esp,0x10
c0011a49:	83 ec 08             	sub    esp,0x8
c0011a4c:	6a 68                	push   0x68
c0011a4e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a51:	50                   	push   eax
c0011a52:	e8 8f c6 ff ff       	call   c000e0e6 <GDTEntry::setLimit(unsigned int)>
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011a5e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a61:	83 e0 0f             	and    eax,0xf
c0011a64:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a67:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a6a:	83 c8 40             	or     eax,0x40
c0011a6d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	68 01 24 02 c0       	push   0xc0022401
c0011a78:	e8 e7 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a7d:	83 c4 10             	add    esp,0x10
c0011a80:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011a85:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a8b:	83 ec 08             	sub    esp,0x8
c0011a8e:	50                   	push   eax
c0011a8f:	68 04 24 02 c0       	push   0xc0022404
c0011a94:	e8 cb 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011aa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011aa7:	05 64 01 00 00       	add    eax,0x164
c0011aac:	83 ec 04             	sub    esp,0x4
c0011aaf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ab2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011ab5:	50                   	push   eax
c0011ab6:	e8 5f c6 ff ff       	call   c000e11a <GDT::addEntry(GDTEntry)>
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	89 c2                	mov    edx,eax
c0011ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac3:	89 10                	mov    DWORD PTR [eax],edx
c0011ac5:	83 ec 0c             	sub    esp,0xc
c0011ac8:	68 19 24 02 c0       	push   0xc0022419
c0011acd:	e8 92 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011ada:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ae0:	05 64 01 00 00       	add    eax,0x164
c0011ae5:	83 ec 0c             	sub    esp,0xc
c0011ae8:	50                   	push   eax
c0011ae9:	e8 56 c6 ff ff       	call   c000e144 <GDT::flush()>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	68 1c 24 02 c0       	push   0xc002241c
c0011af9:	e8 66 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011afe:	83 c4 10             	add    esp,0x10
c0011b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b06:	c9                   	leave  
c0011b07:	c3                   	ret    

c0011b08 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b13:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b18:	75 08                	jne    c0011b22 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b1a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b20:	eb 38                	jmp    c0011b5a <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b27:	75 17                	jne    c0011b40 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b31:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b37:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b3d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011b40:	89 c1                	mov    ecx,eax
c0011b42:	83 e1 fd             	and    ecx,0xfffffffd
c0011b45:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011b4b:	74 cd                	je     c0011b1a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b4d:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b52:	83 e0 ef             	and    eax,0xffffffef
c0011b55:	83 f8 08             	cmp    eax,0x8
c0011b58:	76 c0                	jbe    c0011b1a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b5a:	31 c0                	xor    eax,eax
c0011b5c:	c3                   	ret    
c0011b5d:	90                   	nop

c0011b5e <ReservedFilename::isAtty()>:
c0011b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b62:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011b65:	31 c0                	xor    eax,eax
c0011b67:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011b6d:	74 09                	je     c0011b78 <ReservedFilename::isAtty()+0x1a>
c0011b6f:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011b75:	0f 94 c0             	sete   al
c0011b78:	c3                   	ret    
c0011b79:	90                   	nop

c0011b7a <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b89:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b8e:	75 08                	jne    c0011b98 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011b90:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b96:	eb 3d                	jmp    c0011bd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011b98:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b9d:	75 17                	jne    c0011bb6 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011b9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bad:	8b 10                	mov    edx,DWORD PTR [eax]
c0011baf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bb3:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011bb6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bbb:	75 04                	jne    c0011bc1 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011bbd:	89 0a                	mov    DWORD PTR [edx],ecx
c0011bbf:	eb 14                	jmp    c0011bd5 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011bc1:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011bc6:	74 c8                	je     c0011b90 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011bc8:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011bcd:	83 e0 ef             	and    eax,0xffffffef
c0011bd0:	83 f8 08             	cmp    eax,0x8
c0011bd3:	76 bb                	jbe    c0011b90 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011bd5:	31 c0                	xor    eax,eax
c0011bd7:	c3                   	ret    

c0011bd8 <UnixFile::getFileDescriptor()>:
c0011bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bdf:	c3                   	ret    

c0011be0 <UnixFile::UnixFile(int)>:
c0011be0:	53                   	push   ebx
c0011be1:	83 ec 28             	sub    esp,0x28
c0011be4:	ba 48 24 02 c0       	mov    edx,0xc0022448
c0011be9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bed:	89 10                	mov    DWORD PTR [eax],edx
c0011bef:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011bf7:	0f 8f 90 01 00 00    	jg     c0011d8d <UnixFile::UnixFile(int)+0x1ad>
c0011bfd:	a1 80 42 02 c0       	mov    eax,ds:0xc0024280
c0011c02:	8d 50 01             	lea    edx,[eax+0x1]
c0011c05:	89 15 80 42 02 c0    	mov    DWORD PTR ds:0xc0024280,edx
c0011c0b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c0f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c12:	83 ec 08             	sub    esp,0x8
c0011c15:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c19:	68 b8 be 02 c0       	push   0xc002beb8
c0011c1e:	e8 1b e6 00 00       	call   c002023e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011c2b:	83 f0 01             	xor    eax,0x1
c0011c2e:	0f b6 c0             	movzx  eax,al
c0011c31:	85 c0                	test   eax,eax
c0011c33:	0f 84 55 01 00 00    	je     c0011d8e <UnixFile::UnixFile(int)+0x1ae>
c0011c39:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011c40:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c4f:	e8 27 cd ff ff       	call   c000e97b <malloc>
c0011c54:	83 c4 10             	add    esp,0x10
c0011c57:	89 c3                	mov    ebx,eax
c0011c59:	83 ec 08             	sub    esp,0x8
c0011c5c:	68 03 ff ff 0f       	push   0xfffff03
c0011c61:	53                   	push   ebx
c0011c62:	e8 2d 01 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011c67:	83 c4 10             	add    esp,0x10
c0011c6a:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011c70:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011c78:	83 ec 0c             	sub    esp,0xc
c0011c7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c7f:	e8 f7 cc ff ff       	call   c000e97b <malloc>
c0011c84:	83 c4 10             	add    esp,0x10
c0011c87:	89 c3                	mov    ebx,eax
c0011c89:	83 ec 08             	sub    esp,0x8
c0011c8c:	68 01 ff ff 0f       	push   0xfffff01
c0011c91:	53                   	push   ebx
c0011c92:	e8 fd 00 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011c97:	83 c4 10             	add    esp,0x10
c0011c9a:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011ca0:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011caf:	e8 c7 cc ff ff       	call   c000e97b <malloc>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	89 c3                	mov    ebx,eax
c0011cb9:	83 ec 08             	sub    esp,0x8
c0011cbc:	68 00 ff ff 0f       	push   0xfffff00
c0011cc1:	53                   	push   ebx
c0011cc2:	e8 cd 00 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011cd0:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011cdf:	e8 97 cc ff ff       	call   c000e97b <malloc>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	89 c3                	mov    ebx,eax
c0011ce9:	83 ec 08             	sub    esp,0x8
c0011cec:	68 02 ff ff 0f       	push   0xfffff02
c0011cf1:	53                   	push   ebx
c0011cf2:	e8 9d 00 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011d00:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d08:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d0d:	7f 7f                	jg     c0011d8e <UnixFile::UnixFile(int)+0x1ae>
c0011d0f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d17:	83 ec 0c             	sub    esp,0xc
c0011d1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d1e:	e8 58 cc ff ff       	call   c000e97b <malloc>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	89 c3                	mov    ebx,eax
c0011d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d2c:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011d31:	83 ec 08             	sub    esp,0x8
c0011d34:	50                   	push   eax
c0011d35:	53                   	push   ebx
c0011d36:	e8 59 00 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d42:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011d49:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d58:	e8 1e cc ff ff       	call   c000e97b <malloc>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	89 c3                	mov    ebx,eax
c0011d62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d66:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011d6b:	83 ec 08             	sub    esp,0x8
c0011d6e:	50                   	push   eax
c0011d6f:	53                   	push   ebx
c0011d70:	e8 1f 00 00 00       	call   c0011d94 <ReservedFilename::ReservedFilename(int)>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d7c:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011d83:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011d88:	e9 7b ff ff ff       	jmp    c0011d08 <UnixFile::UnixFile(int)+0x128>
c0011d8d:	90                   	nop
c0011d8e:	83 c4 28             	add    esp,0x28
c0011d91:	5b                   	pop    ebx
c0011d92:	c3                   	ret    
c0011d93:	90                   	nop

c0011d94 <ReservedFilename::ReservedFilename(int)>:
c0011d94:	83 ec 0c             	sub    esp,0xc
c0011d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d9b:	83 ec 08             	sub    esp,0x8
c0011d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011da2:	50                   	push   eax
c0011da3:	e8 38 fe ff ff       	call   c0011be0 <UnixFile::UnixFile(int)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	ba 64 24 02 c0       	mov    edx,0xc0022464
c0011db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db4:	89 10                	mov    DWORD PTR [eax],edx
c0011db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011dbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011dc1:	90                   	nop
c0011dc2:	83 c4 0c             	add    esp,0xc
c0011dc5:	c3                   	ret    

c0011dc6 <UnixFile::~UnixFile()>:
c0011dc6:	83 ec 1c             	sub    esp,0x1c
c0011dc9:	ba 48 24 02 c0       	mov    edx,0xc0022448
c0011dce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd2:	89 10                	mov    DWORD PTR [eax],edx
c0011dd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ddb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011de0:	7f 76                	jg     c0011e58 <UnixFile::~UnixFile()+0x92>
c0011de2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011dea:	83 ec 0c             	sub    esp,0xc
c0011ded:	68 b8 be 02 c0       	push   0xc002beb8
c0011df2:	e8 1b e5 00 00       	call   c0020312 <LinkedList<UnixFile>::getFirstElement()>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	68 b8 be 02 c0       	push   0xc002beb8
c0011e06:	e8 0f e5 00 00       	call   c002031a <LinkedList<UnixFile>::removeFirst()>
c0011e0b:	83 c4 10             	add    esp,0x10
c0011e0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e12:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e16:	74 43                	je     c0011e5b <UnixFile::~UnixFile()+0x95>
c0011e18:	83 ec 08             	sub    esp,0x8
c0011e1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e1f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e24:	e8 15 e4 00 00       	call   c002023e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e29:	83 c4 10             	add    esp,0x10
c0011e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e30:	8d 50 01             	lea    edx,[eax+0x1]
c0011e33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e37:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011e3c:	0f 94 c0             	sete   al
c0011e3f:	0f b6 c0             	movzx  eax,al
c0011e42:	85 c0                	test   eax,eax
c0011e44:	74 a4                	je     c0011dea <UnixFile::~UnixFile()+0x24>
c0011e46:	83 ec 0c             	sub    esp,0xc
c0011e49:	68 20 24 02 c0       	push   0xc0022420
c0011e4e:	e8 6f ce ff ff       	call   c000ecc2 <KePanic(char const*)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	eb 92                	jmp    c0011dea <UnixFile::~UnixFile()+0x24>
c0011e58:	90                   	nop
c0011e59:	eb 01                	jmp    c0011e5c <UnixFile::~UnixFile()+0x96>
c0011e5b:	90                   	nop
c0011e5c:	90                   	nop
c0011e5d:	83 c4 1c             	add    esp,0x1c
c0011e60:	c3                   	ret    
c0011e61:	90                   	nop

c0011e62 <UnixFile::~UnixFile()>:
c0011e62:	83 ec 0c             	sub    esp,0xc
c0011e65:	83 ec 0c             	sub    esp,0xc
c0011e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e6c:	e8 55 ff ff ff       	call   c0011dc6 <UnixFile::~UnixFile()>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	83 ec 08             	sub    esp,0x8
c0011e77:	6a 0c                	push   0xc
c0011e79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e7d:	e8 7e a8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0011e82:	83 c4 10             	add    esp,0x10
c0011e85:	83 c4 0c             	add    esp,0xc
c0011e88:	c3                   	ret    
c0011e89:	90                   	nop

c0011e8a <ReservedFilename::~ReservedFilename()>:
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	ba 64 24 02 c0       	mov    edx,0xc0022464
c0011e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e96:	89 10                	mov    DWORD PTR [eax],edx
c0011e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9c:	83 ec 0c             	sub    esp,0xc
c0011e9f:	50                   	push   eax
c0011ea0:	e8 21 ff ff ff       	call   c0011dc6 <UnixFile::~UnixFile()>
c0011ea5:	83 c4 10             	add    esp,0x10
c0011ea8:	90                   	nop
c0011ea9:	83 c4 0c             	add    esp,0xc
c0011eac:	c3                   	ret    
c0011ead:	90                   	nop

c0011eae <ReservedFilename::~ReservedFilename()>:
c0011eae:	83 ec 0c             	sub    esp,0xc
c0011eb1:	83 ec 0c             	sub    esp,0xc
c0011eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011eb8:	e8 cd ff ff ff       	call   c0011e8a <ReservedFilename::~ReservedFilename()>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	83 ec 08             	sub    esp,0x8
c0011ec3:	6a 0c                	push   0xc
c0011ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ec9:	e8 32 a8 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0011ece:	83 c4 10             	add    esp,0x10
c0011ed1:	83 c4 0c             	add    esp,0xc
c0011ed4:	c3                   	ret    

c0011ed5 <KeGetFileFromDescriptor(int)>:
c0011ed5:	53                   	push   ebx
c0011ed6:	83 ec 08             	sub    esp,0x8
c0011ed9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011edd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011ee3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011ee9:	7f 2c                	jg     c0011f17 <KeGetFileFromDescriptor(int)+0x42>
c0011eeb:	83 ec 0c             	sub    esp,0xc
c0011eee:	68 b8 be 02 c0       	push   0xc002beb8
c0011ef3:	e8 1a e4 00 00       	call   c0020312 <LinkedList<UnixFile>::getFirstElement()>
c0011ef8:	83 c4 10             	add    esp,0x10
c0011efb:	85 c0                	test   eax,eax
c0011efd:	75 04                	jne    c0011f03 <KeGetFileFromDescriptor(int)+0x2e>
c0011eff:	31 c0                	xor    eax,eax
c0011f01:	eb 6e                	jmp    c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f03:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011f06:	74 69                	je     c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f08:	52                   	push   edx
c0011f09:	52                   	push   edx
c0011f0a:	50                   	push   eax
c0011f0b:	68 b8 be 02 c0       	push   0xc002beb8
c0011f10:	e8 a7 e4 00 00       	call   c00203bc <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011f15:	eb e1                	jmp    c0011ef8 <KeGetFileFromDescriptor(int)+0x23>
c0011f17:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011f1c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011f22:	74 4d                	je     c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f24:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011f29:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011f2f:	74 40                	je     c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f31:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011f36:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011f3c:	74 33                	je     c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f3e:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011f43:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011f49:	74 26                	je     c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f4b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011f51:	83 f8 08             	cmp    eax,0x8
c0011f54:	77 09                	ja     c0011f5f <KeGetFileFromDescriptor(int)+0x8a>
c0011f56:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011f5d:	eb 12                	jmp    c0011f71 <KeGetFileFromDescriptor(int)+0x9c>
c0011f5f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011f65:	83 fb 08             	cmp    ebx,0x8
c0011f68:	77 95                	ja     c0011eff <KeGetFileFromDescriptor(int)+0x2a>
c0011f6a:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011f71:	83 c4 08             	add    esp,0x8
c0011f74:	5b                   	pop    ebx
c0011f75:	c3                   	ret    

c0011f76 <__static_initialization_and_destruction_0(int, int)>:
c0011f76:	83 ec 0c             	sub    esp,0xc
c0011f79:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011f7e:	75 34                	jne    c0011fb4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f80:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011f88:	75 2a                	jne    c0011fb4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f8a:	83 ec 0c             	sub    esp,0xc
c0011f8d:	68 b8 be 02 c0       	push   0xc002beb8
c0011f92:	e8 65 e2 00 00       	call   c00201fc <LinkedList<UnixFile>::LinkedList()>
c0011f97:	83 c4 10             	add    esp,0x10
c0011f9a:	83 ec 04             	sub    esp,0x4
c0011f9d:	68 e0 3a 02 c0       	push   0xc0023ae0
c0011fa2:	68 b8 be 02 c0       	push   0xc002beb8
c0011fa7:	68 fa 01 02 c0       	push   0xc00201fa
c0011fac:	e8 ff a6 ff ff       	call   c000c6b0 <__cxa_atexit>
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	90                   	nop
c0011fb5:	83 c4 0c             	add    esp,0xc
c0011fb8:	c3                   	ret    

c0011fb9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011fb9:	83 ec 0c             	sub    esp,0xc
c0011fbc:	83 ec 08             	sub    esp,0x8
c0011fbf:	68 ff ff 00 00       	push   0xffff
c0011fc4:	6a 01                	push   0x1
c0011fc6:	e8 ab ff ff ff       	call   c0011f76 <__static_initialization_and_destruction_0(int, int)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	83 c4 0c             	add    esp,0xc
c0011fd1:	c3                   	ret    

c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011fd2:	53                   	push   ebx
c0011fd3:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c0011fd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011fe1:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011fe7:	89 d8                	mov    eax,ebx
c0011fe9:	d1 e8                	shr    eax,1
c0011feb:	01 d0                	add    eax,edx
c0011fed:	80 e3 01             	and    bl,0x1
c0011ff0:	8a 10                	mov    dl,BYTE PTR [eax]
c0011ff2:	75 09                	jne    c0011ffd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011ff4:	83 e2 f0             	and    edx,0xfffffff0
c0011ff7:	09 ca                	or     edx,ecx
c0011ff9:	88 10                	mov    BYTE PTR [eax],dl
c0011ffb:	5b                   	pop    ebx
c0011ffc:	c3                   	ret    
c0011ffd:	83 e2 0f             	and    edx,0xf
c0012000:	0f b6 c9             	movzx  ecx,cl
c0012003:	c1 e1 04             	shl    ecx,0x4
c0012006:	09 ca                	or     edx,ecx
c0012008:	88 10                	mov    BYTE PTR [eax],dl
c001200a:	5b                   	pop    ebx
c001200b:	c3                   	ret    

c001200c <Virt::getPageState(unsigned long)>:
c001200c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012010:	8b 0d 88 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024288
c0012016:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001201c:	89 d0                	mov    eax,edx
c001201e:	d1 e8                	shr    eax,1
c0012020:	80 e2 01             	and    dl,0x1
c0012023:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012026:	74 03                	je     c001202b <Virt::getPageState(unsigned long)+0x1f>
c0012028:	c1 e8 04             	shr    eax,0x4
c001202b:	83 e0 0f             	and    eax,0xf
c001202e:	c3                   	ret    

c001202f <Virt::allocateKernelVirtualPages(int)>:
c001202f:	55                   	push   ebp
c0012030:	31 ed                	xor    ebp,ebp
c0012032:	57                   	push   edi
c0012033:	31 ff                	xor    edi,edi
c0012035:	56                   	push   esi
c0012036:	53                   	push   ebx
c0012037:	31 db                	xor    ebx,ebx
c0012039:	83 ec 0c             	sub    esp,0xc
c001203c:	8b 35 84 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024284
c0012042:	56                   	push   esi
c0012043:	e8 c4 ff ff ff       	call   c001200c <Virt::getPageState(unsigned long)>
c0012048:	5a                   	pop    edx
c0012049:	84 c0                	test   al,al
c001204b:	75 41                	jne    c001208e <Virt::allocateKernelVirtualPages(int)+0x5f>
c001204d:	85 db                	test   ebx,ebx
c001204f:	75 02                	jne    c0012053 <Virt::allocateKernelVirtualPages(int)+0x24>
c0012051:	89 f5                	mov    ebp,esi
c0012053:	83 c3 01             	add    ebx,0x1
c0012056:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001205a:	74 5f                	je     c00120bb <Virt::allocateKernelVirtualPages(int)+0x8c>
c001205c:	83 c6 01             	add    esi,0x1
c001205f:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012065:	76 34                	jbe    c001209b <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012067:	c7 05 84 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024284,0xc8000
c0012071:	f7 c7 01 00 00 00    	test   edi,0x1
c0012077:	75 2a                	jne    c00120a3 <Virt::allocateKernelVirtualPages(int)+0x74>
c0012079:	be 00 80 0c 00       	mov    esi,0xc8000
c001207e:	bf 01 00 00 00       	mov    edi,0x1
c0012083:	56                   	push   esi
c0012084:	e8 83 ff ff ff       	call   c001200c <Virt::getPageState(unsigned long)>
c0012089:	5a                   	pop    edx
c001208a:	84 c0                	test   al,al
c001208c:	74 bf                	je     c001204d <Virt::allocateKernelVirtualPages(int)+0x1e>
c001208e:	31 db                	xor    ebx,ebx
c0012090:	83 c6 01             	add    esi,0x1
c0012093:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012099:	77 cc                	ja     c0012067 <Virt::allocateKernelVirtualPages(int)+0x38>
c001209b:	89 35 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,esi
c00120a1:	eb 9f                	jmp    c0012042 <Virt::allocateKernelVirtualPages(int)+0x13>
c00120a3:	83 ec 0c             	sub    esp,0xc
c00120a6:	68 78 24 02 c0       	push   0xc0022478
c00120ab:	e8 12 cc ff ff       	call   c000ecc2 <KePanic(char const*)>
c00120b0:	8b 35 84 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024284
c00120b6:	83 c4 10             	add    esp,0x10
c00120b9:	eb 87                	jmp    c0012042 <Virt::allocateKernelVirtualPages(int)+0x13>
c00120bb:	89 2d 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,ebp
c00120c1:	83 fb 01             	cmp    ebx,0x1
c00120c4:	74 6f                	je     c0012135 <Virt::allocateKernelVirtualPages(int)+0x106>
c00120c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120ca:	85 c9                	test   ecx,ecx
c00120cc:	74 49                	je     c0012117 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00120ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120d2:	89 e8                	mov    eax,ebp
c00120d4:	31 db                	xor    ebx,ebx
c00120d6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00120d9:	eb 18                	jmp    c00120f3 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00120db:	6a 01                	push   0x1
c00120dd:	83 c3 01             	add    ebx,0x1
c00120e0:	50                   	push   eax
c00120e1:	e8 ec fe ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120e6:	58                   	pop    eax
c00120e7:	5a                   	pop    edx
c00120e8:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00120ec:	74 29                	je     c0012117 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00120ee:	a1 84 42 02 c0       	mov    eax,ds:0xc0024284
c00120f3:	8d 50 01             	lea    edx,[eax+0x1]
c00120f6:	85 db                	test   ebx,ebx
c00120f8:	89 15 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,edx
c00120fe:	74 24                	je     c0012124 <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012100:	39 df                	cmp    edi,ebx
c0012102:	75 d7                	jne    c00120db <Virt::allocateKernelVirtualPages(int)+0xac>
c0012104:	6a 03                	push   0x3
c0012106:	83 c3 01             	add    ebx,0x1
c0012109:	50                   	push   eax
c001210a:	e8 c3 fe ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001210f:	59                   	pop    ecx
c0012110:	5e                   	pop    esi
c0012111:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012115:	75 d7                	jne    c00120ee <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012117:	83 c4 0c             	add    esp,0xc
c001211a:	89 e8                	mov    eax,ebp
c001211c:	5b                   	pop    ebx
c001211d:	c1 e0 0c             	shl    eax,0xc
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	5d                   	pop    ebp
c0012123:	c3                   	ret    
c0012124:	6a 02                	push   0x2
c0012126:	bb 01 00 00 00       	mov    ebx,0x1
c001212b:	50                   	push   eax
c001212c:	e8 a1 fe ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012131:	58                   	pop    eax
c0012132:	5a                   	pop    edx
c0012133:	eb b9                	jmp    c00120ee <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012135:	6a 04                	push   0x4
c0012137:	8d 45 01             	lea    eax,[ebp+0x1]
c001213a:	55                   	push   ebp
c001213b:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c0012140:	e8 8d fe ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012145:	5b                   	pop    ebx
c0012146:	89 e8                	mov    eax,ebp
c0012148:	5e                   	pop    esi
c0012149:	c1 e0 0c             	shl    eax,0xc
c001214c:	83 c4 0c             	add    esp,0xc
c001214f:	5b                   	pop    ebx
c0012150:	5e                   	pop    esi
c0012151:	5f                   	pop    edi
c0012152:	5d                   	pop    ebp
c0012153:	c3                   	ret    

c0012154 <Virt::freeSwapfilePage(unsigned long)>:
c0012154:	53                   	push   ebx
c0012155:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c001215b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001215f:	b8 01 00 00 00       	mov    eax,0x1
c0012164:	89 cb                	mov    ebx,ecx
c0012166:	d3 e0                	shl    eax,cl
c0012168:	c1 eb 05             	shr    ebx,0x5
c001216b:	f7 d0                	not    eax
c001216d:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012170:	21 c1                	and    ecx,eax
c0012172:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012175:	5b                   	pop    ebx
c0012176:	c3                   	ret    

c0012177 <Virt::swapIDToSector(unsigned long)>:
c0012177:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001217b:	8b 15 8c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002428c
c0012181:	8b 0d 94 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024294
c0012187:	0f af c2             	imul   eax,edx
c001218a:	01 c8                	add    eax,ecx
c001218c:	c3                   	ret    

c001218d <Virt::allocateSwapfilePage()>:
c001218d:	55                   	push   ebp
c001218e:	31 d2                	xor    edx,edx
c0012190:	57                   	push   edi
c0012191:	56                   	push   esi
c0012192:	53                   	push   ebx
c0012193:	83 ec 0c             	sub    esp,0xc
c0012196:	8b 0d 8c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002428c
c001219c:	a1 90 42 02 c0       	mov    eax,ds:0xc0024290
c00121a1:	f7 f1                	div    ecx
c00121a3:	39 0d 90 42 02 c0    	cmp    DWORD PTR ds:0xc0024290,ecx
c00121a9:	72 2f                	jb     c00121da <Virt::allocateSwapfilePage()+0x4d>
c00121ab:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00121b1:	8b 16                	mov    edx,DWORD PTR [esi]
c00121b3:	f6 c2 01             	test   dl,0x1
c00121b6:	74 3e                	je     c00121f6 <Virt::allocateSwapfilePage()+0x69>
c00121b8:	31 c9                	xor    ecx,ecx
c00121ba:	bf 01 00 00 00       	mov    edi,0x1
c00121bf:	eb 12                	jmp    c00121d3 <Virt::allocateSwapfilePage()+0x46>
c00121c1:	89 fd                	mov    ebp,edi
c00121c3:	89 ca                	mov    edx,ecx
c00121c5:	d3 e5                	shl    ebp,cl
c00121c7:	c1 ea 05             	shr    edx,0x5
c00121ca:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00121cd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121cf:	85 ea                	test   edx,ebp
c00121d1:	74 2c                	je     c00121ff <Virt::allocateSwapfilePage()+0x72>
c00121d3:	83 c1 01             	add    ecx,0x1
c00121d6:	39 c8                	cmp    eax,ecx
c00121d8:	77 e7                	ja     c00121c1 <Virt::allocateSwapfilePage()+0x34>
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	68 e8 26 02 c0       	push   0xc00226e8
c00121e2:	e8 db ca ff ff       	call   c000ecc2 <KePanic(char const*)>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	31 c9                	xor    ecx,ecx
c00121ec:	83 c4 0c             	add    esp,0xc
c00121ef:	89 c8                	mov    eax,ecx
c00121f1:	5b                   	pop    ebx
c00121f2:	5e                   	pop    esi
c00121f3:	5f                   	pop    edi
c00121f4:	5d                   	pop    ebp
c00121f5:	c3                   	ret    
c00121f6:	89 f3                	mov    ebx,esi
c00121f8:	bd 01 00 00 00       	mov    ebp,0x1
c00121fd:	31 c9                	xor    ecx,ecx
c00121ff:	09 ea                	or     edx,ebp
c0012201:	89 c8                	mov    eax,ecx
c0012203:	89 13                	mov    DWORD PTR [ebx],edx
c0012205:	83 c4 0c             	add    esp,0xc
c0012208:	5b                   	pop    ebx
c0012209:	5e                   	pop    esi
c001220a:	5f                   	pop    edi
c001220b:	5d                   	pop    ebp
c001220c:	c3                   	ret    

c001220d <Virt::virtualMemorySetup()>:
c001220d:	53                   	push   ebx
c001220e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012213:	6a 0f                	push   0xf
c0012215:	53                   	push   ebx
c0012216:	83 c3 01             	add    ebx,0x1
c0012219:	e8 b4 fd ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001221e:	58                   	pop    eax
c001221f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012225:	5a                   	pop    edx
c0012226:	75 eb                	jne    c0012213 <Virt::virtualMemorySetup()+0x6>
c0012228:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001222d:	6a 00                	push   0x0
c001222f:	53                   	push   ebx
c0012230:	83 c3 01             	add    ebx,0x1
c0012233:	e8 9a fd ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012238:	59                   	pop    ecx
c0012239:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001223f:	58                   	pop    eax
c0012240:	75 eb                	jne    c001222d <Virt::virtualMemorySetup()+0x20>
c0012242:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012247:	6a 0f                	push   0xf
c0012249:	53                   	push   ebx
c001224a:	83 c3 01             	add    ebx,0x1
c001224d:	e8 80 fd ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012252:	58                   	pop    eax
c0012253:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012259:	5a                   	pop    edx
c001225a:	75 eb                	jne    c0012247 <Virt::virtualMemorySetup()+0x3a>
c001225c:	5b                   	pop    ebx
c001225d:	c3                   	ret    

c001225e <Virt::setupPageSwapping(int)>:
c001225e:	53                   	push   ebx
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012266:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c001226b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012271:	8b 10                	mov    edx,DWORD PTR [eax]
c0012273:	53                   	push   ebx
c0012274:	c1 e3 0b             	shl    ebx,0xb
c0012277:	68 ff 26 02 c0       	push   0xc00226ff
c001227c:	50                   	push   eax
c001227d:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012280:	89 1d 90 42 02 c0    	mov    DWORD PTR ds:0xc0024290,ebx
c0012286:	c6 05 98 42 02 c0 43 	mov    BYTE PTR ds:0xc0024298,0x43
c001228d:	c1 eb 08             	shr    ebx,0x8
c0012290:	a3 94 42 02 c0       	mov    ds:0xc0024294,eax
c0012295:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012298:	c7 05 8c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002428c,0x8
c00122a2:	e8 d4 c6 ff ff       	call   c000e97b <malloc>
c00122a7:	83 c4 0c             	add    esp,0xc
c00122aa:	89 c1                	mov    ecx,eax
c00122ac:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00122b1:	31 d2                	xor    edx,edx
c00122b3:	a1 90 42 02 c0       	mov    eax,ds:0xc0024290
c00122b8:	f7 35 8c 42 02 c0    	div    DWORD PTR ds:0xc002428c
c00122be:	c1 e8 05             	shr    eax,0x5
c00122c1:	50                   	push   eax
c00122c2:	6a 00                	push   0x0
c00122c4:	51                   	push   ecx
c00122c5:	e8 26 e2 fe ff       	call   c00004f0 <memset>
c00122ca:	83 c4 18             	add    esp,0x18
c00122cd:	5b                   	pop    ebx
c00122ce:	c3                   	ret    
c00122cf:	90                   	nop

c00122d0 <VAS::setCPUSpecific(unsigned long)>:
c00122d0:	c3                   	ret    
c00122d1:	90                   	nop

c00122d2 <VAS::VAS(VAS*)>:
c00122d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00122e8:	90                   	nop
c00122e9:	c3                   	ret    

c00122ea <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00122ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122ee:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00122f3:	89 c2                	mov    edx,eax
c00122f5:	c1 e8 0a             	shr    eax,0xa
c00122f8:	c1 ea 16             	shr    edx,0x16
c00122fb:	83 f9 01             	cmp    ecx,0x1
c00122fe:	19 c9                	sbb    ecx,ecx
c0012300:	c1 e2 0c             	shl    edx,0xc
c0012303:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012309:	25 fc 0f 00 00       	and    eax,0xffc
c001230e:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012315:	01 d0                	add    eax,edx
c0012317:	c3                   	ret    

c0012318 <VAS::getPageTableEntry(unsigned long)>:
c0012318:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001231c:	89 ca                	mov    edx,ecx
c001231e:	c1 e9 0a             	shr    ecx,0xa
c0012321:	c1 ea 16             	shr    edx,0x16
c0012324:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001232a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012330:	c1 e0 0c             	shl    eax,0xc
c0012333:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012336:	c3                   	ret    

c0012337 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012337:	55                   	push   ebp
c0012338:	57                   	push   edi
c0012339:	bf 01 00 00 00       	mov    edi,0x1
c001233e:	56                   	push   esi
c001233f:	53                   	push   ebx
c0012340:	83 ec 1c             	sub    esp,0x1c
c0012343:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012347:	c1 ee 0c             	shr    esi,0xc
c001234a:	eb 48                	jmp    c0012394 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001234c:	83 ec 08             	sub    esp,0x8
c001234f:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0012354:	55                   	push   ebp
c0012355:	50                   	push   eax
c0012356:	e8 bd ff ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012360:	f6 c6 04             	test   dh,0x4
c0012363:	75 70                	jne    c00123d5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012365:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001236b:	83 fb 04             	cmp    ebx,0x4
c001236e:	0f 84 8a 00 00 00    	je     c00123fe <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012374:	83 fb 02             	cmp    ebx,0x2
c0012377:	0f 84 9a 00 00 00    	je     c0012417 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001237d:	83 fb 03             	cmp    ebx,0x3
c0012380:	0f 84 be 00 00 00    	je     c0012444 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012386:	83 fb 01             	cmp    ebx,0x1
c0012389:	0f 84 a2 00 00 00    	je     c0012431 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001238f:	83 c6 01             	add    esi,0x1
c0012392:	31 ff                	xor    edi,edi
c0012394:	56                   	push   esi
c0012395:	89 f5                	mov    ebp,esi
c0012397:	e8 70 fc ff ff       	call   c001200c <Virt::getPageState(unsigned long)>
c001239c:	c1 e5 0c             	shl    ebp,0xc
c001239f:	0f b6 d8             	movzx  ebx,al
c00123a2:	5a                   	pop    edx
c00123a3:	85 db                	test   ebx,ebx
c00123a5:	75 a5                	jne    c001234c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00123a7:	83 ec 0c             	sub    esp,0xc
c00123aa:	68 16 27 02 c0       	push   0xc0022716
c00123af:	e8 0e c9 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00123b4:	5a                   	pop    edx
c00123b5:	59                   	pop    ecx
c00123b6:	55                   	push   ebp
c00123b7:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00123bd:	55                   	push   ebp
c00123be:	e8 55 ff ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00123c8:	f6 c6 04             	test   dh,0x4
c00123cb:	75 08                	jne    c00123d5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00123cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123d3:	eb ba                	jmp    c001238f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00123df:	83 ec 0c             	sub    esp,0xc
c00123e2:	52                   	push   edx
c00123e3:	e8 65 ca ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	83 fb 04             	cmp    ebx,0x4
c00123ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123f8:	0f 85 76 ff ff ff    	jne    c0012374 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00123fe:	83 e7 01             	and    edi,0x1
c0012401:	75 46                	jne    c0012449 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012403:	c7 44 24 30 98 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022498
c001240b:	83 c4 1c             	add    esp,0x1c
c001240e:	5b                   	pop    ebx
c001240f:	5e                   	pop    esi
c0012410:	5f                   	pop    edi
c0012411:	5d                   	pop    ebp
c0012412:	e9 ab c8 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0012417:	83 e7 01             	and    edi,0x1
c001241a:	75 15                	jne    c0012431 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001241c:	83 ec 0c             	sub    esp,0xc
c001241f:	68 32 27 02 c0       	push   0xc0022732
c0012424:	e8 99 c8 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0012429:	83 c4 10             	add    esp,0x10
c001242c:	e9 5e ff ff ff       	jmp    c001238f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012431:	83 ec 08             	sub    esp,0x8
c0012434:	6a 00                	push   0x0
c0012436:	56                   	push   esi
c0012437:	e8 96 fb ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	e9 4b ff ff ff       	jmp    c001238f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012444:	83 e7 01             	and    edi,0x1
c0012447:	75 16                	jne    c001245f <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012449:	83 ec 08             	sub    esp,0x8
c001244c:	6a 00                	push   0x0
c001244e:	56                   	push   esi
c001244f:	e8 7e fb ff ff       	call   c0011fd2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	83 c4 1c             	add    esp,0x1c
c001245a:	5b                   	pop    ebx
c001245b:	5e                   	pop    esi
c001245c:	5f                   	pop    edi
c001245d:	5d                   	pop    ebp
c001245e:	c3                   	ret    
c001245f:	c7 44 24 30 4e 27 02 c0 	mov    DWORD PTR [esp+0x30],0xc002274e
c0012467:	83 c4 1c             	add    esp,0x1c
c001246a:	5b                   	pop    ebx
c001246b:	5e                   	pop    esi
c001246c:	5f                   	pop    edi
c001246d:	5d                   	pop    ebp
c001246e:	e9 4f c8 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0012473:	90                   	nop

c0012474 <VAS::freeAllocatedPages(unsigned long)>:
c0012474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012478:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001247c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012480:	74 09                	je     c001248b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012482:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012486:	e9 ac fe ff ff       	jmp    c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c001248b:	c7 44 24 04 bc 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc00224bc
c0012493:	e9 cc 4a ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012498 <VAS::virtualToPhysical(unsigned long)>:
c0012498:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001249c:	50                   	push   eax
c001249d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124a1:	52                   	push   edx
c00124a2:	e8 71 fe ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c00124a7:	59                   	pop    ecx
c00124a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00124aa:	5a                   	pop    edx
c00124ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124b0:	c3                   	ret    
c00124b1:	90                   	nop

c00124b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00124b2:	55                   	push   ebp
c00124b3:	57                   	push   edi
c00124b4:	56                   	push   esi
c00124b5:	53                   	push   ebx
c00124b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00124ba:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00124be:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00124c2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00124c6:	85 db                	test   ebx,ebx
c00124c8:	7e 24                	jle    c00124ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00124ca:	c1 e3 0c             	shl    ebx,0xc
c00124cd:	01 f3                	add    ebx,esi
c00124cf:	56                   	push   esi
c00124d0:	81 c6 00 10 00 00    	add    esi,0x1000
c00124d6:	55                   	push   ebp
c00124d7:	e8 3c fe ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c00124dc:	5a                   	pop    edx
c00124dd:	59                   	pop    ecx
c00124de:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00124e4:	21 f9                	and    ecx,edi
c00124e6:	09 d1                	or     ecx,edx
c00124e8:	39 f3                	cmp    ebx,esi
c00124ea:	89 08                	mov    DWORD PTR [eax],ecx
c00124ec:	75 e1                	jne    c00124cf <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00124ee:	5b                   	pop    ebx
c00124ef:	5e                   	pop    esi
c00124f0:	5f                   	pop    edi
c00124f1:	5d                   	pop    ebp
c00124f2:	c3                   	ret    
c00124f3:	90                   	nop

c00124f4 <VAS::VAS()>:
c00124f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012503:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001250a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001250e:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c0012513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012517:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001251b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012526:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001252d:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0012532:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012537:	29 c2                	sub    edx,eax
c0012539:	89 d0                	mov    eax,edx
c001253b:	05 ff 0f 00 00       	add    eax,0xfff
c0012540:	c1 e8 0c             	shr    eax,0xc
c0012543:	89 c2                	mov    edx,eax
c0012545:	b8 00 50 02 c0       	mov    eax,0xc0025000
c001254a:	6a 04                	push   0x4
c001254c:	6a ff                	push   0xffffffff
c001254e:	52                   	push   edx
c001254f:	50                   	push   eax
c0012550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012554:	e8 59 ff ff ff       	call   c00124b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012559:	83 c4 14             	add    esp,0x14
c001255c:	90                   	nop
c001255d:	c3                   	ret    

c001255e <VAS::setToWriteCombining(unsigned long, int)>:
c001255e:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c0012563:	50                   	push   eax
c0012564:	6a ff                	push   0xffffffff
c0012566:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001256a:	52                   	push   edx
c001256b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001256f:	51                   	push   ecx
c0012570:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012574:	50                   	push   eax
c0012575:	e8 38 ff ff ff       	call   c00124b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001257a:	83 c4 14             	add    esp,0x14
c001257d:	c3                   	ret    

c001257e <VAS::mapOtherVASIn(bool, VAS*)>:
c001257e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012582:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012589:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001258c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012591:	83 f8 01             	cmp    eax,0x1
c0012594:	19 c0                	sbb    eax,eax
c0012596:	83 ca 03             	or     edx,0x3
c0012599:	83 e0 fc             	and    eax,0xfffffffc
c001259c:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00125a3:	0f 20 d8             	mov    eax,cr3
c00125a6:	0f 22 d8             	mov    cr3,eax
c00125a9:	c3                   	ret    

c00125aa <VAS::~VAS()>:
c00125aa:	83 ec 2c             	sub    esp,0x2c
c00125ad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00125b5:	fa                   	cli    
c00125b6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00125bb:	83 c0 01             	add    eax,0x1
c00125be:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00125c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00125c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125cd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00125d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00125d7:	6a 01                	push   0x1
c00125d9:	50                   	push   eax
c00125da:	e8 9f ff ff ff       	call   c001257e <VAS::mapOtherVASIn(bool, VAS*)>
c00125df:	83 c4 0c             	add    esp,0xc
c00125e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00125f2:	0f 8f d8 00 00 00    	jg     c00126d0 <VAS::~VAS()+0x126>
c00125f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012603:	c1 e2 02             	shl    edx,0x2
c0012606:	01 d0                	add    eax,edx
c0012608:	8b 00                	mov    eax,DWORD PTR [eax]
c001260a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001260e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012612:	83 e0 01             	and    eax,0x1
c0012615:	0f 84 ab 00 00 00    	je     c00126c6 <VAS::~VAS()+0x11c>
c001261b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012623:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001262b:	7f 74                	jg     c00126a1 <VAS::~VAS()+0xf7>
c001262d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012631:	c1 e0 0a             	shl    eax,0xa
c0012634:	89 c2                	mov    edx,eax
c0012636:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001263a:	01 d0                	add    eax,edx
c001263c:	c1 e0 0c             	shl    eax,0xc
c001263f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012643:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012648:	8b 00                	mov    eax,DWORD PTR [eax]
c001264a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001264d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012653:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012657:	6a 01                	push   0x1
c0012659:	50                   	push   eax
c001265a:	e8 8b fc ff ff       	call   c00122ea <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001265f:	83 c4 0c             	add    esp,0xc
c0012662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012666:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001266a:	8b 00                	mov    eax,DWORD PTR [eax]
c001266c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012674:	25 01 04 00 00       	and    eax,0x401
c0012679:	3d 01 04 00 00       	cmp    eax,0x401
c001267e:	75 1a                	jne    c001269a <VAS::~VAS()+0xf0>
c0012680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012684:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012689:	83 ec 0c             	sub    esp,0xc
c001268c:	50                   	push   eax
c001268d:	e8 bb c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0012692:	83 c4 10             	add    esp,0x10
c0012695:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001269a:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001269f:	eb 82                	jmp    c0012623 <VAS::~VAS()+0x79>
c00126a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a5:	25 00 04 00 00       	and    eax,0x400
c00126aa:	74 1a                	je     c00126c6 <VAS::~VAS()+0x11c>
c00126ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b5:	83 ec 0c             	sub    esp,0xc
c00126b8:	50                   	push   eax
c00126b9:	e8 8f c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126c6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00126cb:	e9 1a ff ff ff       	jmp    c00125ea <VAS::~VAS()+0x40>
c00126d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126d7:	83 ec 0c             	sub    esp,0xc
c00126da:	50                   	push   eax
c00126db:	e8 57 fc ff ff       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00126ea:	83 ec 0c             	sub    esp,0xc
c00126ed:	50                   	push   eax
c00126ee:	e8 5a c7 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c00126f3:	83 c4 10             	add    esp,0x10
c00126f6:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126fb:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012703:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012708:	85 c0                	test   eax,eax
c001270a:	75 01                	jne    c001270d <VAS::~VAS()+0x163>
c001270c:	fb                   	sti    
c001270d:	90                   	nop
c001270e:	83 c4 2c             	add    esp,0x2c
c0012711:	c3                   	ret    

c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012712:	55                   	push   ebp
c0012713:	57                   	push   edi
c0012714:	56                   	push   esi
c0012715:	53                   	push   ebx
c0012716:	83 ec 1c             	sub    esp,0x1c
c0012719:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001271d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012721:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012727:	77 08                	ja     c0012731 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012729:	0f 20 d8             	mov    eax,cr3
c001272c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001272f:	75 49                	jne    c001277a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0012731:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012735:	09 d8                	or     eax,ebx
c0012737:	a9 ff 0f 00 00       	test   eax,0xfff
c001273c:	75 59                	jne    c0012797 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c001273e:	89 de                	mov    esi,ebx
c0012740:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012743:	c1 ee 16             	shr    esi,0x16
c0012746:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001274d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012751:	74 56                	je     c00127a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0012753:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012757:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001275b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012761:	c1 eb 0a             	shr    ebx,0xa
c0012764:	c1 e6 0c             	shl    esi,0xc
c0012767:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001276d:	09 d0                	or     eax,edx
c001276f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012772:	83 c4 1c             	add    esp,0x1c
c0012775:	5b                   	pop    ebx
c0012776:	5e                   	pop    esi
c0012777:	5f                   	pop    edi
c0012778:	5d                   	pop    ebp
c0012779:	c3                   	ret    
c001277a:	83 ec 0c             	sub    esp,0xc
c001277d:	68 e0 24 02 c0       	push   0xc00224e0
c0012782:	e8 dd 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012787:	83 c4 10             	add    esp,0x10
c001278a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001278e:	09 d8                	or     eax,ebx
c0012790:	a9 ff 0f 00 00       	test   eax,0xfff
c0012795:	74 a7                	je     c001273e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	68 48 25 02 c0       	push   0xc0022548
c001279f:	e8 1e c5 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00127a4:	83 c4 10             	add    esp,0x10
c00127a7:	eb 95                	jmp    c001273e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00127a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ad:	e8 04 c7 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00127b2:	83 ec 0c             	sub    esp,0xc
c00127b5:	89 c5                	mov    ebp,eax
c00127b7:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00127bd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127c1:	6a 01                	push   0x1
c00127c3:	e8 67 f8 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c00127c8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127cf:	6a 01                	push   0x1
c00127d1:	50                   	push   eax
c00127d2:	55                   	push   ebp
c00127d3:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127dd:	51                   	push   ecx
c00127de:	e8 19 01 00 00       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e3:	83 c4 1c             	add    esp,0x1c
c00127e6:	68 00 10 00 00       	push   0x1000
c00127eb:	6a 00                	push   0x0
c00127ed:	50                   	push   eax
c00127ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127f2:	e8 f9 dc fe ff       	call   c00004f0 <memset>
c00127f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127fe:	e8 34 fb ff ff       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c0012803:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012807:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001280a:	83 c4 10             	add    esp,0x10
c001280d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012810:	e9 3e ff ff ff       	jmp    c0012753 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012815:	90                   	nop

c0012816 <VAS::allocatePages(int, int)>:
c0012816:	55                   	push   ebp
c0012817:	57                   	push   edi
c0012818:	56                   	push   esi
c0012819:	53                   	push   ebx
c001281a:	83 ec 1c             	sub    esp,0x1c
c001281d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012821:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012825:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012829:	75 71                	jne    c001289c <VAS::allocatePages(int, int)+0x86>
c001282b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001282e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012832:	85 c0                	test   eax,eax
c0012834:	74 4d                	je     c0012883 <VAS::allocatePages(int, int)+0x6d>
c0012836:	89 dd                	mov    ebp,ebx
c0012838:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001283c:	c1 e5 0c             	shl    ebp,0xc
c001283f:	01 c5                	add    ebp,eax
c0012841:	85 db                	test   ebx,ebx
c0012843:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012846:	7e 29                	jle    c0012871 <VAS::allocatePages(int, int)+0x5b>
c0012848:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001284c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012850:	81 cf 00 04 00 00    	or     edi,0x400
c0012856:	e8 5b c6 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001285b:	57                   	push   edi
c001285c:	53                   	push   ebx
c001285d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012863:	50                   	push   eax
c0012864:	56                   	push   esi
c0012865:	e8 a8 fe ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	39 dd                	cmp    ebp,ebx
c001286f:	75 e5                	jne    c0012856 <VAS::allocatePages(int, int)+0x40>
c0012871:	0f 20 d8             	mov    eax,cr3
c0012874:	0f 22 d8             	mov    cr3,eax
c0012877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001287b:	83 c4 1c             	add    esp,0x1c
c001287e:	5b                   	pop    ebx
c001287f:	5e                   	pop    esi
c0012880:	5f                   	pop    edi
c0012881:	5d                   	pop    ebp
c0012882:	c3                   	ret    
c0012883:	83 ec 0c             	sub    esp,0xc
c0012886:	68 6c 25 02 c0       	push   0xc002256c
c001288b:	e8 32 c4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0012890:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012893:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	eb 9a                	jmp    c0012836 <VAS::allocatePages(int, int)+0x20>
c001289c:	83 ec 0c             	sub    esp,0xc
c001289f:	53                   	push   ebx
c00128a0:	e8 8a f7 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c00128a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128a9:	83 c4 10             	add    esp,0x10
c00128ac:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00128b1:	77 37                	ja     c00128ea <VAS::allocatePages(int, int)+0xd4>
c00128b3:	85 db                	test   ebx,ebx
c00128b5:	7e ba                	jle    c0012871 <VAS::allocatePages(int, int)+0x5b>
c00128b7:	c1 e3 0c             	shl    ebx,0xc
c00128ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128be:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128c2:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00128c5:	81 cf 00 04 00 00    	or     edi,0x400
c00128cb:	89 c3                	mov    ebx,eax
c00128cd:	e8 e4 c5 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00128d2:	57                   	push   edi
c00128d3:	53                   	push   ebx
c00128d4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128da:	50                   	push   eax
c00128db:	56                   	push   esi
c00128dc:	e8 31 fe ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	39 dd                	cmp    ebp,ebx
c00128e6:	75 e5                	jne    c00128cd <VAS::allocatePages(int, int)+0xb7>
c00128e8:	eb 87                	jmp    c0012871 <VAS::allocatePages(int, int)+0x5b>
c00128ea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00128ee:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c00128f3:	09 c2                	or     edx,eax
c00128f5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00128f9:	eb b8                	jmp    c00128b3 <VAS::allocatePages(int, int)+0x9d>
c00128fb:	90                   	nop

c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00128fc:	55                   	push   ebp
c00128fd:	57                   	push   edi
c00128fe:	56                   	push   esi
c00128ff:	53                   	push   ebx
c0012900:	83 ec 0c             	sub    esp,0xc
c0012903:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012907:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001290b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001290f:	85 db                	test   ebx,ebx
c0012911:	7e 2f                	jle    c0012942 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0012913:	c1 e3 0c             	shl    ebx,0xc
c0012916:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001291a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001291e:	01 d3                	add    ebx,edx
c0012920:	55                   	push   ebp
c0012921:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012925:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012929:	29 c2                	sub    edx,eax
c001292b:	01 f2                	add    edx,esi
c001292d:	52                   	push   edx
c001292e:	56                   	push   esi
c001292f:	81 c6 00 10 00 00    	add    esi,0x1000
c0012935:	57                   	push   edi
c0012936:	e8 d7 fd ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	39 de                	cmp    esi,ebx
c0012940:	75 de                	jne    c0012920 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0012942:	0f 20 d8             	mov    eax,cr3
c0012945:	0f 22 d8             	mov    cr3,eax
c0012948:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001294c:	83 c4 0c             	add    esp,0xc
c001294f:	5b                   	pop    ebx
c0012950:	5e                   	pop    esi
c0012951:	5f                   	pop    edi
c0012952:	5d                   	pop    ebp
c0012953:	c3                   	ret    

c0012954 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012954:	55                   	push   ebp
c0012955:	57                   	push   edi
c0012956:	56                   	push   esi
c0012957:	53                   	push   ebx
c0012958:	83 ec 1c             	sub    esp,0x1c
c001295b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001295f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012963:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012967:	09 f8                	or     eax,edi
c0012969:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001296d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012972:	75 4f                	jne    c00129c3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012974:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012978:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001297b:	c1 eb 16             	shr    ebx,0x16
c001297e:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012985:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012989:	74 52                	je     c00129dd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c001298b:	0f b6 f2             	movzx  esi,dl
c001298e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012992:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012996:	c1 e8 0a             	shr    eax,0xa
c0012999:	83 fe 01             	cmp    esi,0x1
c001299c:	19 d2                	sbb    edx,edx
c001299e:	c1 e3 0c             	shl    ebx,0xc
c00129a1:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00129a7:	25 fc 0f 00 00       	and    eax,0xffc
c00129ac:	01 d8                	add    eax,ebx
c00129ae:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129b2:	09 d9                	or     ecx,ebx
c00129b4:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00129bb:	83 c4 1c             	add    esp,0x1c
c00129be:	5b                   	pop    ebx
c00129bf:	5e                   	pop    esi
c00129c0:	5f                   	pop    edi
c00129c1:	5d                   	pop    ebp
c00129c2:	c3                   	ret    
c00129c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00129c7:	83 ec 0c             	sub    esp,0xc
c00129ca:	68 98 25 02 c0       	push   0xc0022598
c00129cf:	e8 ee c2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00129d4:	83 c4 10             	add    esp,0x10
c00129d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129db:	eb 97                	jmp    c0012974 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00129dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129e1:	e8 d0 c4 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00129e6:	83 ec 0c             	sub    esp,0xc
c00129e9:	89 c5                	mov    ebp,eax
c00129eb:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00129f1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00129f5:	6a 01                	push   0x1
c00129f7:	e8 33 f6 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c00129fc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a03:	6a 01                	push   0x1
c0012a05:	50                   	push   eax
c0012a06:	55                   	push   ebp
c0012a07:	81 cd 07 04 00 00    	or     ebp,0x407
c0012a0d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012a11:	51                   	push   ecx
c0012a12:	e8 e5 fe ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a17:	83 c4 1c             	add    esp,0x1c
c0012a1a:	68 00 10 00 00       	push   0x1000
c0012a1f:	6a 00                	push   0x0
c0012a21:	50                   	push   eax
c0012a22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012a26:	e8 c5 da fe ff       	call   c00004f0 <memset>
c0012a2b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a2f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012a32:	e8 00 f9 ff ff       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c0012a37:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012a3a:	83 c4 10             	add    esp,0x10
c0012a3d:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012a40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a44:	e9 42 ff ff ff       	jmp    c001298b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012a49:	90                   	nop

c0012a4a <VAS::VAS(bool)>:
c0012a4a:	53                   	push   ebx
c0012a4b:	83 ec 28             	sub    esp,0x28
c0012a4e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a70:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a74:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a77:	e8 3a c4 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012a7c:	89 c2                	mov    edx,eax
c0012a7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a82:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012a85:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0012a8b:	83 ec 0c             	sub    esp,0xc
c0012a8e:	6a 01                	push   0x1
c0012a90:	e8 9a f5 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c0012a95:	83 c4 10             	add    esp,0x10
c0012a98:	89 c2                	mov    edx,eax
c0012a9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012aa1:	83 ec 0c             	sub    esp,0xc
c0012aa4:	6a 03                	push   0x3
c0012aa6:	6a 01                	push   0x1
c0012aa8:	52                   	push   edx
c0012aa9:	50                   	push   eax
c0012aaa:	53                   	push   ebx
c0012aab:	e8 4c fe ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ab0:	83 c4 20             	add    esp,0x20
c0012ab3:	89 c2                	mov    edx,eax
c0012ab5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ab9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012abc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ac4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012acc:	7f 1d                	jg     c0012aeb <VAS::VAS(bool)+0xa1>
c0012ace:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ad2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ad5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ad9:	c1 e2 02             	shl    edx,0x2
c0012adc:	01 d0                	add    eax,edx
c0012ade:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012ae4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012ae9:	eb d9                	jmp    c0012ac4 <VAS::VAS(bool)+0x7a>
c0012aeb:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012af3:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012afb:	7f 59                	jg     c0012b56 <VAS::VAS(bool)+0x10c>
c0012afd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b01:	2d 00 02 00 00       	sub    eax,0x200
c0012b06:	c1 e0 0c             	shl    eax,0xc
c0012b09:	89 c2                	mov    edx,eax
c0012b0b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b10:	89 d1                	mov    ecx,edx
c0012b12:	09 c1                	or     ecx,eax
c0012b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b1f:	c1 e2 02             	shl    edx,0x2
c0012b22:	01 d0                	add    eax,edx
c0012b24:	83 c9 05             	or     ecx,0x5
c0012b27:	89 ca                	mov    edx,ecx
c0012b29:	89 10                	mov    DWORD PTR [eax],edx
c0012b2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b2f:	2d 40 03 00 00       	sub    eax,0x340
c0012b34:	83 f8 7f             	cmp    eax,0x7f
c0012b37:	77 16                	ja     c0012b4f <VAS::VAS(bool)+0x105>
c0012b39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b44:	c1 e2 02             	shl    edx,0x2
c0012b47:	01 d0                	add    eax,edx
c0012b49:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b4f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012b54:	eb 9d                	jmp    c0012af3 <VAS::VAS(bool)+0xa9>
c0012b56:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012b5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b63:	05 20 0c 00 00       	add    eax,0xc20
c0012b68:	81 ca 03 40 00 00    	or     edx,0x4003
c0012b6e:	89 10                	mov    DWORD PTR [eax],edx
c0012b70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b74:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012b77:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b7c:	09 c2                	or     edx,eax
c0012b7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b85:	05 fc 0f 00 00       	add    eax,0xffc
c0012b8a:	83 ca 03             	or     edx,0x3
c0012b8d:	89 10                	mov    DWORD PTR [eax],edx
c0012b8f:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b9a:	83 ec 0c             	sub    esp,0xc
c0012b9d:	50                   	push   eax
c0012b9e:	e8 fd 66 ff ff       	call   c00092a0 <Device::getName()>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 ec 08             	sub    esp,0x8
c0012ba9:	68 68 27 02 c0       	push   0xc0022768
c0012bae:	50                   	push   eax
c0012baf:	e8 9c db fe ff       	call   c0000750 <strcmp>
c0012bb4:	83 c4 10             	add    esp,0x10
c0012bb7:	85 c0                	test   eax,eax
c0012bb9:	0f 94 c0             	sete   al
c0012bbc:	0f b6 c0             	movzx  eax,al
c0012bbf:	85 c0                	test   eax,eax
c0012bc1:	74 68                	je     c0012c2b <VAS::VAS(bool)+0x1e1>
c0012bc3:	fa                   	cli    
c0012bc4:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bc9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bcf:	05 68 09 00 00       	add    eax,0x968
c0012bd4:	83 ec 0c             	sub    esp,0xc
c0012bd7:	50                   	push   eax
c0012bd8:	e8 7d b7 ff ff       	call   c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012be5:	89 c3                	mov    ebx,eax
c0012be7:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bf2:	05 68 09 00 00       	add    eax,0x968
c0012bf7:	83 ec 0c             	sub    esp,0xc
c0012bfa:	50                   	push   eax
c0012bfb:	e8 5a b7 ff ff       	call   c000e35a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c00:	83 c4 10             	add    esp,0x10
c0012c03:	83 ec 08             	sub    esp,0x8
c0012c06:	50                   	push   eax
c0012c07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c0b:	e8 08 f7 ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c0012c10:	83 c4 10             	add    esp,0x10
c0012c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c15:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c1a:	6a 11                	push   0x11
c0012c1c:	53                   	push   ebx
c0012c1d:	50                   	push   eax
c0012c1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c22:	e8 eb fa ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	fb                   	sti    
c0012c2b:	90                   	nop
c0012c2c:	83 c4 28             	add    esp,0x28
c0012c2f:	5b                   	pop    ebx
c0012c30:	c3                   	ret    
c0012c31:	90                   	nop

c0012c32 <VAS::evict(unsigned long)>:
c0012c32:	55                   	push   ebp
c0012c33:	57                   	push   edi
c0012c34:	56                   	push   esi
c0012c35:	53                   	push   ebx
c0012c36:	83 ec 1c             	sub    esp,0x1c
c0012c39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c3d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012c41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c45:	e8 43 f5 ff ff       	call   c001218d <Virt::allocateSwapfilePage()>
c0012c4a:	89 c7                	mov    edi,eax
c0012c4c:	a1 8c 42 02 c0       	mov    eax,ds:0xc002428c
c0012c51:	85 c0                	test   eax,eax
c0012c53:	7e 40                	jle    c0012c95 <VAS::evict(unsigned long)+0x63>
c0012c55:	89 ee                	mov    esi,ebp
c0012c57:	31 db                	xor    ebx,ebx
c0012c59:	83 ec 0c             	sub    esp,0xc
c0012c5c:	57                   	push   edi
c0012c5d:	e8 15 f5 ff ff       	call   c0012177 <Virt::swapIDToSector(unsigned long)>
c0012c62:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c65:	01 d8                	add    eax,ebx
c0012c67:	6a 01                	push   0x1
c0012c69:	31 d2                	xor    edx,edx
c0012c6b:	83 c3 01             	add    ebx,0x1
c0012c6e:	52                   	push   edx
c0012c6f:	81 c6 00 02 00 00    	add    esi,0x200
c0012c75:	50                   	push   eax
c0012c76:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012c7d:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012c84:	50                   	push   eax
c0012c85:	e8 ae 74 ff ff       	call   c000a138 <LogicalDisk::write(unsigned long long, int, void*)>
c0012c8a:	83 c4 20             	add    esp,0x20
c0012c8d:	39 1d 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,ebx
c0012c93:	7f c4                	jg     c0012c59 <VAS::evict(unsigned long)+0x27>
c0012c95:	83 ec 08             	sub    esp,0x8
c0012c98:	c1 e7 0c             	shl    edi,0xc
c0012c9b:	55                   	push   ebp
c0012c9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ca0:	50                   	push   eax
c0012ca1:	e8 72 f6 ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c0012ca6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ca8:	89 d3                	mov    ebx,edx
c0012caa:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012cb0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012cb6:	09 d7                	or     edi,edx
c0012cb8:	89 38                	mov    DWORD PTR [eax],edi
c0012cba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cbd:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012cc3:	83 c2 01             	add    edx,0x1
c0012cc6:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012ccc:	e8 7c c1 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0012cd1:	0f 20 d8             	mov    eax,cr3
c0012cd4:	0f 22 d8             	mov    cr3,eax
c0012cd7:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012cdd:	51                   	push   ecx
c0012cde:	55                   	push   ebp
c0012cdf:	53                   	push   ebx
c0012ce0:	68 bc 25 02 c0       	push   0xc00225bc
c0012ce5:	e8 7a 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012cea:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012cef:	c7 44 24 50 76 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022776
c0012cf7:	8d 50 01             	lea    edx,[eax+0x1]
c0012cfa:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012cfe:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012d04:	83 c4 3c             	add    esp,0x3c
c0012d07:	5b                   	pop    ebx
c0012d08:	5e                   	pop    esi
c0012d09:	5f                   	pop    edi
c0012d0a:	5d                   	pop    ebp
c0012d0b:	e9 54 42 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012d10 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012d10:	55                   	push   ebp
c0012d11:	57                   	push   edi
c0012d12:	56                   	push   esi
c0012d13:	53                   	push   ebx
c0012d14:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012d1a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0012d21:	89 f3                	mov    ebx,esi
c0012d23:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d29:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012d2f:	77 22                	ja     c0012d53 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012d31:	83 ec 08             	sub    esp,0x8
c0012d34:	56                   	push   esi
c0012d35:	68 99 27 02 c0       	push   0xc0022799
c0012d3a:	e8 25 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	85 db                	test   ebx,ebx
c0012d44:	75 2a                	jne    c0012d70 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012d46:	31 c0                	xor    eax,eax
c0012d48:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012d4e:	5b                   	pop    ebx
c0012d4f:	5e                   	pop    esi
c0012d50:	5f                   	pop    edi
c0012d51:	5d                   	pop    ebp
c0012d52:	c3                   	ret    
c0012d53:	83 ec 0c             	sub    esp,0xc
c0012d56:	68 87 27 02 c0       	push   0xc0022787
c0012d5b:	e8 62 bf ff ff       	call   c000ecc2 <KePanic(char const*)>
c0012d60:	5d                   	pop    ebp
c0012d61:	58                   	pop    eax
c0012d62:	56                   	push   esi
c0012d63:	68 99 27 02 c0       	push   0xc0022799
c0012d68:	e8 f7 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d6d:	83 c4 10             	add    esp,0x10
c0012d70:	83 ec 08             	sub    esp,0x8
c0012d73:	53                   	push   ebx
c0012d74:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012d7b:	57                   	push   edi
c0012d7c:	e8 97 f5 ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c0012d81:	83 c4 10             	add    esp,0x10
c0012d84:	89 c2                	mov    edx,eax
c0012d86:	85 c0                	test   eax,eax
c0012d88:	74 bc                	je     c0012d46 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012d8a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0012d8c:	f7 c5 00 02 00 00    	test   ebp,0x200
c0012d92:	0f 85 c1 00 00 00    	jne    c0012e59 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012d98:	89 e8                	mov    eax,ebp
c0012d9a:	25 01 04 00 00       	and    eax,0x401
c0012d9f:	3d 00 04 00 00       	cmp    eax,0x400
c0012da4:	75 a0                	jne    c0012d46 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012da6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012daa:	c1 ed 0c             	shr    ebp,0xc
c0012dad:	e8 04 c1 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012db2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012db6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012db8:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0012dbe:	09 c1                	or     ecx,eax
c0012dc0:	81 c9 01 08 00 00    	or     ecx,0x801
c0012dc6:	89 0a                	mov    DWORD PTR [edx],ecx
c0012dc8:	8b 0d 8c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002428c
c0012dce:	85 c9                	test   ecx,ecx
c0012dd0:	7e 40                	jle    c0012e12 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012dd2:	89 df                	mov    edi,ebx
c0012dd4:	31 f6                	xor    esi,esi
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	55                   	push   ebp
c0012dda:	e8 98 f3 ff ff       	call   c0012177 <Virt::swapIDToSector(unsigned long)>
c0012ddf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012de2:	01 f0                	add    eax,esi
c0012de4:	6a 01                	push   0x1
c0012de6:	31 d2                	xor    edx,edx
c0012de8:	83 c6 01             	add    esi,0x1
c0012deb:	52                   	push   edx
c0012dec:	81 c7 00 02 00 00    	add    edi,0x200
c0012df2:	50                   	push   eax
c0012df3:	0f be 05 98 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024298
c0012dfa:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012e01:	50                   	push   eax
c0012e02:	e8 c5 72 ff ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c0012e07:	83 c4 20             	add    esp,0x20
c0012e0a:	39 35 8c 42 02 c0    	cmp    DWORD PTR ds:0xc002428c,esi
c0012e10:	7f c4                	jg     c0012dd6 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0012e12:	83 ec 04             	sub    esp,0x4
c0012e15:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012e1a:	83 e8 01             	sub    eax,0x1
c0012e1d:	50                   	push   eax
c0012e1e:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012e23:	53                   	push   ebx
c0012e24:	68 ac 27 02 c0       	push   0xc00227ac
c0012e29:	e8 36 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e2e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e31:	e8 1e f3 ff ff       	call   c0012154 <Virt::freeSwapfilePage(unsigned long)>
c0012e36:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012e3e:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0012e44:	83 c4 10             	add    esp,0x10
c0012e47:	85 d2                	test   edx,edx
c0012e49:	75 01                	jne    c0012e4c <VAS::tryLoadBackOffDisk(unsigned long)+0x13c>
c0012e4b:	fb                   	sti    
c0012e4c:	0f 20 d8             	mov    eax,cr3
c0012e4f:	0f 22 d8             	mov    cr3,eax
c0012e52:	b0 01                	mov    al,0x1
c0012e54:	e9 ef fe ff ff       	jmp    c0012d48 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012e59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e5d:	83 ec 0c             	sub    esp,0xc
c0012e60:	68 ec 25 02 c0       	push   0xc00225ec
c0012e65:	e8 fa 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e6a:	e8 47 c0 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012e6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e73:	8b 32                	mov    esi,DWORD PTR [edx]
c0012e75:	83 ce 01             	or     esi,0x1
c0012e78:	89 32                	mov    DWORD PTR [edx],esi
c0012e7a:	0f 20 d9             	mov    ecx,cr3
c0012e7d:	0f 22 d9             	mov    cr3,ecx
c0012e80:	bd 00 10 00 00       	mov    ebp,0x1000
c0012e85:	89 de                	mov    esi,ebx
c0012e87:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012e8b:	89 e9                	mov    ecx,ebp
c0012e8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e8f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012e91:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012e97:	09 c8                	or     eax,ecx
c0012e99:	83 c8 02             	or     eax,0x2
c0012e9c:	89 02                	mov    DWORD PTR [edx],eax
c0012e9e:	0f 20 d8             	mov    eax,cr3
c0012ea1:	0f 22 d8             	mov    cr3,eax
c0012ea4:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012ea8:	89 df                	mov    edi,ebx
c0012eaa:	89 e9                	mov    ecx,ebp
c0012eac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eae:	b0 01                	mov    al,0x1
c0012eb0:	83 c4 10             	add    esp,0x10
c0012eb3:	e9 90 fe ff ff       	jmp    c0012d48 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0012eb8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012eb8:	55                   	push   ebp
c0012eb9:	57                   	push   edi
c0012eba:	56                   	push   esi
c0012ebb:	53                   	push   ebx
c0012ebc:	83 ec 28             	sub    esp,0x28
c0012ebf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0012ec3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012ec7:	50                   	push   eax
c0012ec8:	e8 62 f1 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c0012ecd:	83 c4 0c             	add    esp,0xc
c0012ed0:	89 c5                	mov    ebp,eax
c0012ed2:	6a 07                	push   0x7
c0012ed4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012ed8:	52                   	push   edx
c0012ed9:	56                   	push   esi
c0012eda:	e8 37 f9 ff ff       	call   c0012816 <VAS::allocatePages(int, int)>
c0012edf:	83 c4 10             	add    esp,0x10
c0012ee2:	89 c7                	mov    edi,eax
c0012ee4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012ee8:	85 c9                	test   ecx,ecx
c0012eea:	74 2f                	je     c0012f1b <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012eec:	31 db                	xor    ebx,ebx
c0012eee:	e8 c3 bf ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0012ef3:	83 c3 01             	add    ebx,0x1
c0012ef6:	6a 03                	push   0x3
c0012ef8:	55                   	push   ebp
c0012ef9:	50                   	push   eax
c0012efa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012efe:	56                   	push   esi
c0012eff:	e8 0e f8 ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f04:	6a 07                	push   0x7
c0012f06:	57                   	push   edi
c0012f07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f0b:	50                   	push   eax
c0012f0c:	56                   	push   esi
c0012f0d:	e8 00 f8 ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f12:	83 c4 20             	add    esp,0x20
c0012f15:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0012f19:	75 d3                	jne    c0012eee <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012f1b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f1f:	89 28                	mov    DWORD PTR [eax],ebp
c0012f21:	83 c4 1c             	add    esp,0x1c
c0012f24:	89 f8                	mov    eax,edi
c0012f26:	5b                   	pop    ebx
c0012f27:	5e                   	pop    esi
c0012f28:	5f                   	pop    edi
c0012f29:	5d                   	pop    ebp
c0012f2a:	c3                   	ret    
c0012f2b:	90                   	nop

c0012f2c <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012f2c:	53                   	push   ebx
c0012f2d:	83 ec 14             	sub    esp,0x14
c0012f30:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012f34:	68 0c 26 02 c0       	push   0xc002260c
c0012f39:	e8 26 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f3e:	c7 04 24 6c 26 02 c0 	mov    DWORD PTR [esp],0xc002266c
c0012f45:	e8 1a 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f4a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012f4e:	83 c4 18             	add    esp,0x18
c0012f51:	5b                   	pop    ebx
c0012f52:	e9 e0 f3 ff ff       	jmp    c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f57:	90                   	nop

c0012f58 <VAS::scanForEviction()>:
c0012f58:	57                   	push   edi
c0012f59:	56                   	push   esi
c0012f5a:	31 f6                	xor    esi,esi
c0012f5c:	53                   	push   ebx
c0012f5d:	83 ec 10             	sub    esp,0x10
c0012f60:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f64:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f67:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012f6d:	75 0e                	jne    c0012f7d <VAS::scanForEviction()+0x25>
c0012f6f:	89 da                	mov    edx,ebx
c0012f71:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012f74:	c1 ea 16             	shr    edx,0x16
c0012f77:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012f7b:	74 57                	je     c0012fd4 <VAS::scanForEviction()+0x7c>
c0012f7d:	53                   	push   ebx
c0012f7e:	57                   	push   edi
c0012f7f:	e8 94 f3 ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c0012f84:	5a                   	pop    edx
c0012f85:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f87:	59                   	pop    ecx
c0012f88:	89 d1                	mov    ecx,edx
c0012f8a:	c1 e9 0c             	shr    ecx,0xc
c0012f8d:	74 10                	je     c0012f9f <VAS::scanForEviction()+0x47>
c0012f8f:	89 d1                	mov    ecx,edx
c0012f91:	81 e1 01 08 00 00    	and    ecx,0x801
c0012f97:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012f9d:	74 40                	je     c0012fdf <VAS::scanForEviction()+0x87>
c0012f9f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012fa5:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012fab:	76 2d                	jbe    c0012fda <VAS::scanForEviction()+0x82>
c0012fad:	83 c6 01             	add    esi,0x1
c0012fb0:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012fb7:	83 fe 03             	cmp    esi,0x3
c0012fba:	74 32                	je     c0012fee <VAS::scanForEviction()+0x96>
c0012fbc:	31 db                	xor    ebx,ebx
c0012fbe:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012fc4:	75 b7                	jne    c0012f7d <VAS::scanForEviction()+0x25>
c0012fc6:	89 da                	mov    edx,ebx
c0012fc8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012fcb:	c1 ea 16             	shr    edx,0x16
c0012fce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012fd2:	75 a9                	jne    c0012f7d <VAS::scanForEviction()+0x25>
c0012fd4:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012fda:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012fdd:	eb 88                	jmp    c0012f67 <VAS::scanForEviction()+0xf>
c0012fdf:	f6 c2 20             	test   dl,0x20
c0012fe2:	74 13                	je     c0012ff7 <VAS::scanForEviction()+0x9f>
c0012fe4:	83 e2 df             	and    edx,0xffffffdf
c0012fe7:	89 10                	mov    DWORD PTR [eax],edx
c0012fe9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012fec:	eb b1                	jmp    c0012f9f <VAS::scanForEviction()+0x47>
c0012fee:	83 c4 10             	add    esp,0x10
c0012ff1:	31 c0                	xor    eax,eax
c0012ff3:	5b                   	pop    ebx
c0012ff4:	5e                   	pop    esi
c0012ff5:	5f                   	pop    edi
c0012ff6:	c3                   	ret    
c0012ff7:	83 ec 08             	sub    esp,0x8
c0012ffa:	89 d0                	mov    eax,edx
c0012ffc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013001:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013005:	53                   	push   ebx
c0013006:	68 c1 27 02 c0       	push   0xc00227c1
c001300b:	e8 54 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013010:	58                   	pop    eax
c0013011:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013014:	5a                   	pop    edx
c0013015:	51                   	push   ecx
c0013016:	57                   	push   edi
c0013017:	e8 16 fc ff ff       	call   c0012c32 <VAS::evict(unsigned long)>
c001301c:	5b                   	pop    ebx
c001301d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013020:	5e                   	pop    esi
c0013021:	50                   	push   eax
c0013022:	68 d5 27 02 c0       	push   0xc00227d5
c0013027:	e8 38 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001302c:	58                   	pop    eax
c001302d:	5a                   	pop    edx
c001302e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013032:	50                   	push   eax
c0013033:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013037:	68 e8 27 02 c0       	push   0xc00227e8
c001303c:	e8 23 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013041:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	81 c1 00 10 00 00    	add    ecx,0x1000
c001304d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013051:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	5b                   	pop    ebx
c0013058:	5e                   	pop    esi
c0013059:	5f                   	pop    edi
c001305a:	c3                   	ret    

c001305b <mapVASFirstTime>:
c001305b:	55                   	push   ebp
c001305c:	57                   	push   edi
c001305d:	56                   	push   esi
c001305e:	53                   	push   ebx
c001305f:	83 ec 0c             	sub    esp,0xc
c0013062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013067:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001306a:	83 fa 01             	cmp    edx,0x1
c001306d:	0f 84 cb 00 00 00    	je     c001313e <mapVASFirstTime+0xe3>
c0013073:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013076:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013079:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001307e:	c1 e5 15             	shl    ebp,0x15
c0013081:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013086:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001308c:	29 eb                	sub    ebx,ebp
c001308e:	29 ef                	sub    edi,ebp
c0013090:	e8 21 be ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0013095:	83 ec 0c             	sub    esp,0xc
c0013098:	68 03 04 00 00       	push   0x403
c001309d:	6a 01                	push   0x1
c001309f:	53                   	push   ebx
c00130a0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130a6:	50                   	push   eax
c00130a7:	56                   	push   esi
c00130a8:	e8 4f f8 ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130ad:	83 c4 20             	add    esp,0x20
c00130b0:	39 fb                	cmp    ebx,edi
c00130b2:	75 dc                	jne    c0013090 <mapVASFirstTime+0x35>
c00130b4:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00130b9:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00130be:	29 eb                	sub    ebx,ebp
c00130c0:	29 ef                	sub    edi,ebp
c00130c2:	e8 ef bd ff ff       	call   c000eeb6 <Phys::allocatePage()>
c00130c7:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00130cb:	83 fa 01             	cmp    edx,0x1
c00130ce:	19 d2                	sbb    edx,edx
c00130d0:	83 ec 0c             	sub    esp,0xc
c00130d3:	83 e2 04             	and    edx,0x4
c00130d6:	81 c2 03 04 00 00    	add    edx,0x403
c00130dc:	52                   	push   edx
c00130dd:	6a 01                	push   0x1
c00130df:	53                   	push   ebx
c00130e0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130e6:	50                   	push   eax
c00130e7:	56                   	push   esi
c00130e8:	e8 0f f8 ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130ed:	83 c4 20             	add    esp,0x20
c00130f0:	39 df                	cmp    edi,ebx
c00130f2:	75 ce                	jne    c00130c2 <mapVASFirstTime+0x67>
c00130f4:	83 ec 0c             	sub    esp,0xc
c00130f7:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c00130fc:	6a 04                	push   0x4
c00130fe:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c0013104:	6a ff                	push   0xffffffff
c0013106:	c1 eb 0c             	shr    ebx,0xc
c0013109:	53                   	push   ebx
c001310a:	68 00 50 02 c0       	push   0xc0025000
c001310f:	56                   	push   esi
c0013110:	e8 9d f3 ff ff       	call   c00124b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013115:	83 c4 14             	add    esp,0x14
c0013118:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001311d:	6a 04                	push   0x4
c001311f:	6a ff                	push   0xffffffff
c0013121:	53                   	push   ebx
c0013122:	68 00 50 02 c0       	push   0xc0025000
c0013127:	50                   	push   eax
c0013128:	e8 85 f3 ff ff       	call   c00124b2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001312d:	0f 20 d8             	mov    eax,cr3
c0013130:	0f 22 d8             	mov    cr3,eax
c0013133:	83 c4 20             	add    esp,0x20
c0013136:	83 c4 0c             	add    esp,0xc
c0013139:	5b                   	pop    ebx
c001313a:	5e                   	pop    esi
c001313b:	5f                   	pop    edi
c001313c:	5d                   	pop    ebp
c001313d:	c3                   	ret    
c001313e:	83 ec 0c             	sub    esp,0xc
c0013141:	68 f5 27 02 c0       	push   0xc00227f5
c0013146:	e8 19 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	83 c4 0c             	add    esp,0xc
c0013151:	5b                   	pop    ebx
c0013152:	5e                   	pop    esi
c0013153:	5f                   	pop    edi
c0013154:	5d                   	pop    ebp
c0013155:	c3                   	ret    

c0013156 <SysEject(regs*)>:
c0013156:	83 ec 0c             	sub    esp,0xc
c0013159:	83 ca ff             	or     edx,0xffffffff
c001315c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013160:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013163:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013168:	83 e9 41             	sub    ecx,0x41
c001316b:	83 f9 19             	cmp    ecx,0x19
c001316e:	77 18                	ja     c0013188 <SysEject(regs*)+0x32>
c0013170:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0013177:	85 c9                	test   ecx,ecx
c0013179:	74 0d                	je     c0013188 <SysEject(regs*)+0x32>
c001317b:	83 ec 0c             	sub    esp,0xc
c001317e:	51                   	push   ecx
c001317f:	e8 de 6e ff ff       	call   c000a062 <LogicalDisk::eject()>
c0013184:	83 c4 10             	add    esp,0x10
c0013187:	99                   	cdq    
c0013188:	83 c4 0c             	add    esp,0xc
c001318b:	c3                   	ret    

c001318c <SysExit(regs*)>:
c001318c:	83 ec 18             	sub    esp,0x18
c001318f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013193:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013196:	e8 b5 2a 00 00       	call   c0015c50 <terminateTask(int)>
c001319b:	83 c8 ff             	or     eax,0xffffffff
c001319e:	83 c4 1c             	add    esp,0x1c
c00131a1:	89 c2                	mov    edx,eax
c00131a3:	c3                   	ret    

c00131a4 <SysGetCwd(regs*)>:
c00131a4:	83 ec 10             	sub    esp,0x10
c00131a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131ab:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00131ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131b9:	e8 08 4c ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00131be:	83 c4 1c             	add    esp,0x1c
c00131c1:	99                   	cdq    
c00131c2:	c3                   	ret    

c00131c3 <SysGetPID(regs*)>:
c00131c3:	83 ec 14             	sub    esp,0x14
c00131c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ce:	ff 30                	push   DWORD PTR [eax]
c00131d0:	68 0e 28 02 c0       	push   0xc002280e
c00131d5:	e8 8a 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00131e4:	83 c4 1c             	add    esp,0x1c
c00131e7:	99                   	cdq    
c00131e8:	c3                   	ret    

c00131e9 <SysGetRAMData(regs*)>:
c00131e9:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c00131ef:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c00131f9:	99                   	cdq    
c00131fa:	f7 f9                	idiv   ecx
c00131fc:	c1 e0 18             	shl    eax,0x18
c00131ff:	09 c8                	or     eax,ecx
c0013201:	99                   	cdq    
c0013202:	c3                   	ret    

c0013203 <SysGetVGAPtr(regs*)>:
c0013203:	55                   	push   ebp
c0013204:	57                   	push   edi
c0013205:	56                   	push   esi
c0013206:	53                   	push   ebx
c0013207:	83 ec 0c             	sub    esp,0xc
c001320a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001320e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013211:	83 f8 ff             	cmp    eax,0xffffffff
c0013214:	74 1b                	je     c0013231 <SysGetVGAPtr(regs*)+0x2e>
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	50                   	push   eax
c001321a:	e8 e1 24 00 00       	call   c0015700 <Thr::processFromPID(int)>
c001321f:	83 c4 10             	add    esp,0x10
c0013222:	89 c1                	mov    ecx,eax
c0013224:	31 d2                	xor    edx,edx
c0013226:	b8 01 00 00 00       	mov    eax,0x1
c001322b:	85 c9                	test   ecx,ecx
c001322d:	75 0a                	jne    c0013239 <SysGetVGAPtr(regs*)+0x36>
c001322f:	eb 61                	jmp    c0013292 <SysGetVGAPtr(regs*)+0x8f>
c0013231:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013236:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013239:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001323f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013243:	74 0c                	je     c0013251 <SysGetVGAPtr(regs*)+0x4e>
c0013245:	83 ec 0c             	sub    esp,0xc
c0013248:	55                   	push   ebp
c0013249:	e8 ab de ff ff       	call   c00110f9 <setActiveTerminal(VgaText*)>
c001324e:	83 c4 10             	add    esp,0x10
c0013251:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013254:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013257:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001325c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001325e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013261:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013264:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001326a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001326d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013270:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013276:	50                   	push   eax
c0013277:	50                   	push   eax
c0013278:	68 1d 28 02 c0       	push   0xc002281d
c001327d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013280:	05 a8 0f 00 00       	add    eax,0xfa8
c0013285:	50                   	push   eax
c0013286:	e8 b5 d3 fe ff       	call   c0000640 <strcpy>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	31 c0                	xor    eax,eax
c0013290:	31 d2                	xor    edx,edx
c0013292:	83 c4 0c             	add    esp,0xc
c0013295:	5b                   	pop    ebx
c0013296:	5e                   	pop    esi
c0013297:	5f                   	pop    edi
c0013298:	5d                   	pop    ebp
c0013299:	c3                   	ret    
c001329a:	66 90                	xchg   ax,ax

c001329c <SysKill(regs*)>:
c001329c:	53                   	push   ebx
c001329d:	83 ec 08             	sub    esp,0x8
c00132a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132a4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00132a8:	75 16                	jne    c00132c0 <SysKill(regs*)+0x24>
c00132aa:	83 ec 0c             	sub    esp,0xc
c00132ad:	68 27 28 02 c0       	push   0xc0022827
c00132b2:	e8 0b ba ff ff       	call   c000ecc2 <KePanic(char const*)>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	e9 89 00 00 00       	jmp    c0013348 <SysKill(regs*)+0xac>
c00132bf:	90                   	nop
c00132c0:	83 ec 0c             	sub    esp,0xc
c00132c3:	68 cc c6 02 c0       	push   0xc002c6cc
c00132c8:	e8 eb cb 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132cd:	8d 76 00             	lea    esi,[esi+0x0]
c00132d0:	83 c4 10             	add    esp,0x10
c00132d3:	85 c0                	test   eax,eax
c00132d5:	74 19                	je     c00132f0 <SysKill(regs*)+0x54>
c00132d7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00132dd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00132df:	74 33                	je     c0013314 <SysKill(regs*)+0x78>
c00132e1:	52                   	push   edx
c00132e2:	52                   	push   edx
c00132e3:	50                   	push   eax
c00132e4:	68 cc c6 02 c0       	push   0xc002c6cc
c00132e9:	e8 d6 d0 00 00       	call   c00203c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00132ee:	eb e0                	jmp    c00132d0 <SysKill(regs*)+0x34>
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	68 c0 c6 02 c0       	push   0xc002c6c0
c00132f8:	e8 bb cb 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	85 c0                	test   eax,eax
c0013305:	74 41                	je     c0013348 <SysKill(regs*)+0xac>
c0013307:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001330a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001330d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001330f:	75 27                	jne    c0013338 <SysKill(regs*)+0x9c>
c0013311:	8d 76 00             	lea    esi,[esi+0x0]
c0013314:	51                   	push   ecx
c0013315:	51                   	push   ecx
c0013316:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013319:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001331e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013321:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013327:	e8 bf ca ff ff       	call   c000fdeb <KeRaiseSignal(SigHandlerBlock*, int)>
c001332c:	83 c4 10             	add    esp,0x10
c001332f:	31 c0                	xor    eax,eax
c0013331:	31 d2                	xor    edx,edx
c0013333:	eb 1b                	jmp    c0013350 <SysKill(regs*)+0xb4>
c0013335:	8d 76 00             	lea    esi,[esi+0x0]
c0013338:	52                   	push   edx
c0013339:	52                   	push   edx
c001333a:	50                   	push   eax
c001333b:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013340:	e8 7f d0 00 00       	call   c00203c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013345:	eb b9                	jmp    c0013300 <SysKill(regs*)+0x64>
c0013347:	90                   	nop
c0013348:	83 c8 ff             	or     eax,0xffffffff
c001334b:	89 c2                	mov    edx,eax
c001334d:	8d 76 00             	lea    esi,[esi+0x0]
c0013350:	83 c4 08             	add    esp,0x8
c0013353:	5b                   	pop    ebx
c0013354:	c3                   	ret    

c0013355 <SysLoadDLL(regs*)>:
c0013355:	56                   	push   esi
c0013356:	53                   	push   ebx
c0013357:	31 d2                	xor    edx,edx
c0013359:	51                   	push   ecx
c001335a:	b8 01 00 00 00       	mov    eax,0x1
c001335f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013363:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013367:	0f 84 8c 00 00 00    	je     c00133f9 <SysLoadDLL(regs*)+0xa4>
c001336d:	83 ec 0c             	sub    esp,0xc
c0013370:	68 14 01 00 00       	push   0x114
c0013375:	e8 01 b6 ff ff       	call   c000e97b <malloc>
c001337a:	83 c4 0c             	add    esp,0xc
c001337d:	89 c3                	mov    ebx,eax
c001337f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013384:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013387:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001338a:	53                   	push   ebx
c001338b:	e8 82 4d ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	31 d2                	xor    edx,edx
c0013395:	b8 02 00 00 00       	mov    eax,0x2
c001339a:	85 db                	test   ebx,ebx
c001339c:	74 5b                	je     c00133f9 <SysLoadDLL(regs*)+0xa4>
c001339e:	83 ec 0c             	sub    esp,0xc
c00133a1:	53                   	push   ebx
c00133a2:	e8 4d 50 ff ff       	call   c00083f4 <File::exists()>
c00133a7:	83 c4 10             	add    esp,0x10
c00133aa:	84 c0                	test   al,al
c00133ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ae:	75 11                	jne    c00133c1 <SysLoadDLL(regs*)+0x6c>
c00133b0:	83 ec 0c             	sub    esp,0xc
c00133b3:	53                   	push   ebx
c00133b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	b8 03 00 00 00       	mov    eax,0x3
c00133bf:	eb 36                	jmp    c00133f7 <SysLoadDLL(regs*)+0xa2>
c00133c1:	83 ec 0c             	sub    esp,0xc
c00133c4:	53                   	push   ebx
c00133c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133c8:	58                   	pop    eax
c00133c9:	5a                   	pop    edx
c00133ca:	6a 00                	push   0x0
c00133cc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133cf:	e8 e8 15 00 00       	call   c00149bc <Thr::loadDLL(char const*, bool)>
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	89 c1                	mov    ecx,eax
c00133d9:	31 d2                	xor    edx,edx
c00133db:	b8 04 00 00 00       	mov    eax,0x4
c00133e0:	85 c9                	test   ecx,ecx
c00133e2:	74 15                	je     c00133f9 <SysLoadDLL(regs*)+0xa4>
c00133e4:	53                   	push   ebx
c00133e5:	53                   	push   ebx
c00133e6:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00133ec:	51                   	push   ecx
c00133ed:	e8 1c 18 00 00       	call   c0014c0e <Thr::executeDLL(unsigned long, void*)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	31 c0                	xor    eax,eax
c00133f7:	31 d2                	xor    edx,edx
c00133f9:	59                   	pop    ecx
c00133fa:	5b                   	pop    ebx
c00133fb:	5e                   	pop    esi
c00133fc:	c3                   	ret    

c00133fd <SysRead(regs*)>:
c00133fd:	57                   	push   edi
c00133fe:	56                   	push   esi
c00133ff:	53                   	push   ebx
c0013400:	83 ec 10             	sub    esp,0x10
c0013403:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013407:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001340a:	83 f8 02             	cmp    eax,0x2
c001340d:	77 10                	ja     c001341f <SysRead(regs*)+0x22>
c001340f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013414:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013417:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001341d:	eb 0e                	jmp    c001342d <SysRead(regs*)+0x30>
c001341f:	83 ec 0c             	sub    esp,0xc
c0013422:	50                   	push   eax
c0013423:	e8 ad ea ff ff       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c0013428:	83 c4 10             	add    esp,0x10
c001342b:	89 c1                	mov    ecx,eax
c001342d:	83 c8 ff             	or     eax,0xffffffff
c0013430:	85 c9                	test   ecx,ecx
c0013432:	89 c2                	mov    edx,eax
c0013434:	74 28                	je     c001345e <SysRead(regs*)+0x61>
c0013436:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001343e:	31 ff                	xor    edi,edi
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013445:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013449:	52                   	push   edx
c001344a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001344d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013450:	57                   	push   edi
c0013451:	56                   	push   esi
c0013452:	51                   	push   ecx
c0013453:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013456:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001345a:	83 c4 20             	add    esp,0x20
c001345d:	99                   	cdq    
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	5b                   	pop    ebx
c0013462:	5e                   	pop    esi
c0013463:	5f                   	pop    edi
c0013464:	c3                   	ret    

c0013465 <SysRegisterSignal(regs*)>:
c0013465:	83 ec 18             	sub    esp,0x18
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	6a 00                	push   0x0
c001346e:	6a 00                	push   0x0
c0013470:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013473:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013476:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001347b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001347e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013484:	e8 2c c9 ff ff       	call   c000fdb5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013489:	83 c4 2c             	add    esp,0x2c
c001348c:	99                   	cdq    
c001348d:	c3                   	ret    

c001348e <SysRegistryGetTypeFromPath(regs*)>:
c001348e:	53                   	push   ebx
c001348f:	81 ec 40 01 00 00    	sub    esp,0x140
c0013495:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001349c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001349f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134a2:	e8 ad 9e ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	89 c1                	mov    ecx,eax
c00134ac:	85 c0                	test   eax,eax
c00134ae:	74 15                	je     c00134c5 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00134b0:	50                   	push   eax
c00134b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00134b5:	50                   	push   eax
c00134b6:	51                   	push   ecx
c00134b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134ba:	e8 79 9a ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	99                   	cdq    
c00134c3:	eb 05                	jmp    c00134ca <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00134c5:	83 c8 ff             	or     eax,0xffffffff
c00134c8:	89 c2                	mov    edx,eax
c00134ca:	81 c4 38 01 00 00    	add    esp,0x138
c00134d0:	5b                   	pop    ebx
c00134d1:	c3                   	ret    

c00134d2 <SysRegistryReadExtent(regs*)>:
c00134d2:	83 ec 1c             	sub    esp,0x1c
c00134d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134d9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134dc:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00134df:	85 c0                	test   eax,eax
c00134e1:	79 1f                	jns    c0013502 <SysRegistryReadExtent(regs*)+0x30>
c00134e3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00134e8:	52                   	push   edx
c00134e9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00134ed:	52                   	push   edx
c00134ee:	50                   	push   eax
c00134ef:	51                   	push   ecx
c00134f0:	e8 35 99 ff ff       	call   c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00134f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	eb 14                	jmp    c0013516 <SysRegistryReadExtent(regs*)+0x44>
c0013502:	83 ec 04             	sub    esp,0x4
c0013505:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013508:	50                   	push   eax
c0013509:	51                   	push   ecx
c001350a:	e8 b5 93 ff ff       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	31 c0                	xor    eax,eax
c0013514:	31 d2                	xor    edx,edx
c0013516:	83 c4 1c             	add    esp,0x1c
c0013519:	c3                   	ret    

c001351a <SysRegistryPathToExtentLookup(regs*)>:
c001351a:	83 ec 14             	sub    esp,0x14
c001351d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013521:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013524:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013527:	e8 28 9e ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001352c:	83 c4 1c             	add    esp,0x1c
c001352f:	99                   	cdq    
c0013530:	c3                   	ret    

c0013531 <SysRegistryEnterDirectory(regs*)>:
c0013531:	83 ec 14             	sub    esp,0x14
c0013534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013538:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001353b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001353e:	e8 f8 93 ff ff       	call   c000c93b <CmEnterDirectory(Reghive_Tag*, int)>
c0013543:	83 c4 1c             	add    esp,0x1c
c0013546:	99                   	cdq    
c0013547:	c3                   	ret    

c0013548 <SysRegistryGetNext(regs*)>:
c0013548:	83 ec 14             	sub    esp,0x14
c001354b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001354f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013552:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013555:	e8 20 94 ff ff       	call   c000c97a <CmGetNext(Reghive_Tag*, int)>
c001355a:	83 c4 1c             	add    esp,0x1c
c001355d:	99                   	cdq    
c001355e:	c3                   	ret    

c001355f <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c001355f:	57                   	push   edi
c0013560:	56                   	push   esi
c0013561:	53                   	push   ebx
c0013562:	81 ec 34 01 00 00    	sub    esp,0x134
c0013568:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001356f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013573:	57                   	push   edi
c0013574:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013577:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001357a:	e8 b9 99 ff ff       	call   c000cf38 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001357f:	89 c3                	mov    ebx,eax
c0013581:	58                   	pop    eax
c0013582:	5a                   	pop    edx
c0013583:	57                   	push   edi
c0013584:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013587:	e8 b4 d0 fe ff       	call   c0000640 <strcpy>
c001358c:	89 d8                	mov    eax,ebx
c001358e:	81 c4 40 01 00 00    	add    esp,0x140
c0013594:	99                   	cdq    
c0013595:	5b                   	pop    ebx
c0013596:	5e                   	pop    esi
c0013597:	5f                   	pop    edi
c0013598:	c3                   	ret    

c0013599 <SysRegistryOpen(regs*)>:
c0013599:	83 ec 18             	sub    esp,0x18
c001359c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135a3:	e8 ac 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c00135a8:	83 c4 1c             	add    esp,0x1c
c00135ab:	99                   	cdq    
c00135ac:	c3                   	ret    

c00135ad <SysRegistryClose(regs*)>:
c00135ad:	83 ec 18             	sub    esp,0x18
c00135b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135b7:	e8 b6 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c00135bc:	31 c0                	xor    eax,eax
c00135be:	31 d2                	xor    edx,edx
c00135c0:	83 c4 1c             	add    esp,0x1c
c00135c3:	c3                   	ret    

c00135c4 <SysRegistryEasyReadString(regs*)>:
c00135c4:	57                   	push   edi
c00135c5:	56                   	push   esi
c00135c6:	53                   	push   ebx
c00135c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135cb:	83 ec 0c             	sub    esp,0xc
c00135ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00135d1:	e8 7e 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c00135d6:	5a                   	pop    edx
c00135d7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00135da:	59                   	pop    ecx
c00135db:	89 c3                	mov    ebx,eax
c00135dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00135e0:	50                   	push   eax
c00135e1:	e8 6e 9d ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135e6:	83 c4 10             	add    esp,0x10
c00135e9:	89 c1                	mov    ecx,eax
c00135eb:	b8 01 00 00 00       	mov    eax,0x1
c00135f0:	85 c9                	test   ecx,ecx
c00135f2:	7e 16                	jle    c001360a <SysRegistryEasyReadString(regs*)+0x46>
c00135f4:	50                   	push   eax
c00135f5:	57                   	push   edi
c00135f6:	51                   	push   ecx
c00135f7:	53                   	push   ebx
c00135f8:	e8 c7 92 ff ff       	call   c000c8c4 <CmGetString(Reghive_Tag*, int, char*)>
c00135fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013600:	e8 6d 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	31 c0                	xor    eax,eax
c001360a:	5b                   	pop    ebx
c001360b:	31 d2                	xor    edx,edx
c001360d:	5e                   	pop    esi
c001360e:	5f                   	pop    edi
c001360f:	c3                   	ret    

c0013610 <SysRegistryEasyReadInteger(regs*)>:
c0013610:	56                   	push   esi
c0013611:	53                   	push   ebx
c0013612:	83 ec 10             	sub    esp,0x10
c0013615:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013619:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001361c:	e8 33 91 ff ff       	call   c000c754 <CmOpen(char const*)>
c0013621:	5a                   	pop    edx
c0013622:	89 c3                	mov    ebx,eax
c0013624:	59                   	pop    ecx
c0013625:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013628:	50                   	push   eax
c0013629:	e8 26 9d ff ff       	call   c000d354 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001362e:	83 c4 10             	add    esp,0x10
c0013631:	89 c1                	mov    ecx,eax
c0013633:	b8 01 00 00 00       	mov    eax,0x1
c0013638:	85 c9                	test   ecx,ecx
c001363a:	7e 18                	jle    c0013654 <SysRegistryEasyReadInteger(regs*)+0x44>
c001363c:	50                   	push   eax
c001363d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013640:	51                   	push   ecx
c0013641:	53                   	push   ebx
c0013642:	e8 e3 97 ff ff       	call   c000ce2a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013647:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001364a:	e8 23 92 ff ff       	call   c000c872 <CmClose(Reghive_Tag*)>
c001364f:	83 c4 10             	add    esp,0x10
c0013652:	31 c0                	xor    eax,eax
c0013654:	59                   	pop    ecx
c0013655:	31 d2                	xor    edx,edx
c0013657:	5b                   	pop    ebx
c0013658:	5e                   	pop    esi
c0013659:	c3                   	ret    

c001365a <SysSbrk(regs*)>:
c001365a:	56                   	push   esi
c001365b:	53                   	push   ebx
c001365c:	50                   	push   eax
c001365d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013662:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013666:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013669:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001366c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013672:	85 db                	test   ebx,ebx
c0013674:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013677:	74 02                	je     c001367b <SysSbrk(regs*)+0x21>
c0013679:	79 06                	jns    c0013681 <SysSbrk(regs*)+0x27>
c001367b:	89 f0                	mov    eax,esi
c001367d:	31 d2                	xor    edx,edx
c001367f:	eb 2a                	jmp    c00136ab <SysSbrk(regs*)+0x51>
c0013681:	83 c8 ff             	or     eax,0xffffffff
c0013684:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001368a:	89 c2                	mov    edx,eax
c001368c:	77 1d                	ja     c00136ab <SysSbrk(regs*)+0x51>
c001368e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013694:	50                   	push   eax
c0013695:	c1 ea 0c             	shr    edx,0xc
c0013698:	68 07 0c 00 00       	push   0xc07
c001369d:	52                   	push   edx
c001369e:	51                   	push   ecx
c001369f:	e8 72 f1 ff ff       	call   c0012816 <VAS::allocatePages(int, int)>
c00136a4:	89 f0                	mov    eax,esi
c00136a6:	31 d2                	xor    edx,edx
c00136a8:	83 c4 10             	add    esp,0x10
c00136ab:	59                   	pop    ecx
c00136ac:	5b                   	pop    ebx
c00136ad:	5e                   	pop    esi
c00136ae:	c3                   	ret    

c00136af <SysSetCwd(regs*)>:
c00136af:	83 ec 14             	sub    esp,0x14
c00136b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136be:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136c1:	e8 cd 4d ff ff       	call   c0008493 <Fs::setcwd(Process*, char*)>
c00136c6:	83 c4 1c             	add    esp,0x1c
c00136c9:	99                   	cdq    
c00136ca:	c3                   	ret    

c00136cb <SysSetTime(regs*)>:
c00136cb:	55                   	push   ebp
c00136cc:	31 c9                	xor    ecx,ecx
c00136ce:	57                   	push   edi
c00136cf:	bd 0c 00 00 00       	mov    ebp,0xc
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	31 db                	xor    ebx,ebx
c00136d8:	83 ec 10             	sub    esp,0x10
c00136db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136df:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00136e2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136e5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00136e8:	89 c2                	mov    edx,eax
c00136ea:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00136f0:	83 e2 1f             	and    edx,0x1f
c00136f3:	c1 e7 10             	shl    edi,0x10
c00136f6:	42                   	inc    edx
c00136f7:	c1 e8 05             	shr    eax,0x5
c00136fa:	88 d1                	mov    cl,dl
c00136fc:	31 d2                	xor    edx,edx
c00136fe:	f7 f5                	div    ebp
c0013700:	89 dd                	mov    ebp,ebx
c0013702:	88 d5                	mov    ch,dl
c0013704:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001370a:	0f b7 c1             	movzx  eax,cx
c001370d:	31 d2                	xor    edx,edx
c001370f:	09 f8                	or     eax,edi
c0013711:	bf 3c 00 00 00       	mov    edi,0x3c
c0013716:	89 c1                	mov    ecx,eax
c0013718:	89 f0                	mov    eax,esi
c001371a:	f7 f7                	div    edi
c001371c:	c1 e2 10             	shl    edx,0x10
c001371f:	09 d5                	or     ebp,edx
c0013721:	31 d2                	xor    edx,edx
c0013723:	89 eb                	mov    ebx,ebp
c0013725:	f7 f7                	div    edi
c0013727:	bf 10 0e 00 00       	mov    edi,0xe10
c001372c:	88 d7                	mov    bh,dl
c001372e:	89 f0                	mov    eax,esi
c0013730:	31 d2                	xor    edx,edx
c0013732:	f7 f7                	div    edi
c0013734:	bf 18 00 00 00       	mov    edi,0x18
c0013739:	31 d2                	xor    edx,edx
c001373b:	f7 f7                	div    edi
c001373d:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013742:	88 d3                	mov    bl,dl
c0013744:	53                   	push   ebx
c0013745:	51                   	push   ecx
c0013746:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001374c:	e8 05 56 ff ff       	call   c0008d56 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013751:	83 c4 1c             	add    esp,0x1c
c0013754:	83 f0 01             	xor    eax,0x1
c0013757:	5b                   	pop    ebx
c0013758:	0f b6 c0             	movzx  eax,al
c001375b:	5e                   	pop    esi
c001375c:	31 d2                	xor    edx,edx
c001375e:	5f                   	pop    edi
c001375f:	5d                   	pop    ebp
c0013760:	c3                   	ret    

c0013761 <SysSymlink(regs*)>:
c0013761:	56                   	push   esi
c0013762:	83 c8 ff             	or     eax,0xffffffff
c0013765:	53                   	push   ebx
c0013766:	89 c2                	mov    edx,eax
c0013768:	81 ec 34 02 00 00    	sub    esp,0x234
c001376e:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013775:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013779:	74 50                	je     c00137cb <SysSymlink(regs*)+0x6a>
c001377b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001377e:	85 c9                	test   ecx,ecx
c0013780:	74 49                	je     c00137cb <SysSymlink(regs*)+0x6a>
c0013782:	6a 01                	push   0x1
c0013784:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013789:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001378c:	05 0c 01 00 00       	add    eax,0x10c
c0013791:	50                   	push   eax
c0013792:	51                   	push   ecx
c0013793:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013797:	56                   	push   esi
c0013798:	e8 7d 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001379d:	6a 01                	push   0x1
c001379f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137a7:	05 0c 01 00 00       	add    eax,0x10c
c00137ac:	50                   	push   eax
c00137ad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00137b0:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00137b7:	53                   	push   ebx
c00137b8:	e8 5d 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137bd:	83 c4 18             	add    esp,0x18
c00137c0:	56                   	push   esi
c00137c1:	53                   	push   ebx
c00137c2:	e8 81 42 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c00137c7:	83 c4 10             	add    esp,0x10
c00137ca:	99                   	cdq    
c00137cb:	81 c4 34 02 00 00    	add    esp,0x234
c00137d1:	5b                   	pop    ebx
c00137d2:	5e                   	pop    esi
c00137d3:	c3                   	ret    

c00137d4 <SysTimezone(regs*)>:
c00137d4:	83 ec 0c             	sub    esp,0xc
c00137d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137db:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00137df:	75 17                	jne    c00137f8 <SysTimezone(regs*)+0x24>
c00137e1:	83 ec 0c             	sub    esp,0xc
c00137e4:	68 48 28 02 c0       	push   0xc0022848
c00137e9:	e8 76 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00137ee:	83 c8 ff             	or     eax,0xffffffff
c00137f1:	83 c4 10             	add    esp,0x10
c00137f4:	89 c2                	mov    edx,eax
c00137f6:	eb 17                	jmp    c001380f <SysTimezone(regs*)+0x3b>
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	68 5d 28 02 c0       	push   0xc002285d
c0013800:	e8 5f 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013805:	83 c4 10             	add    esp,0x10
c0013808:	b8 01 00 00 00       	mov    eax,0x1
c001380d:	31 d2                	xor    edx,edx
c001380f:	83 c4 0c             	add    esp,0xc
c0013812:	c3                   	ret    

c0013813 <SysTruncate(regs*)>:
c0013813:	55                   	push   ebp
c0013814:	57                   	push   edi
c0013815:	31 ff                	xor    edi,edi
c0013817:	56                   	push   esi
c0013818:	53                   	push   ebx
c0013819:	83 ec 0c             	sub    esp,0xc
c001381c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013820:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013823:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013826:	89 ce                	mov    esi,ecx
c0013828:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001382c:	0f 84 9a 00 00 00    	je     c00138cc <SysTruncate(regs*)+0xb9>
c0013832:	83 ec 0c             	sub    esp,0xc
c0013835:	68 14 01 00 00       	push   0x114
c001383a:	e8 3c b1 ff ff       	call   c000e97b <malloc>
c001383f:	83 c4 0c             	add    esp,0xc
c0013842:	89 c3                	mov    ebx,eax
c0013844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013849:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001384c:	55                   	push   ebp
c001384d:	53                   	push   ebx
c001384e:	e8 bf 48 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013853:	83 c4 10             	add    esp,0x10
c0013856:	31 d2                	xor    edx,edx
c0013858:	b8 03 00 00 00       	mov    eax,0x3
c001385d:	85 db                	test   ebx,ebx
c001385f:	0f 84 a2 00 00 00    	je     c0013907 <SysTruncate(regs*)+0xf4>
c0013865:	51                   	push   ecx
c0013866:	51                   	push   ecx
c0013867:	6a 02                	push   0x2
c0013869:	53                   	push   ebx
c001386a:	e8 c1 48 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001386f:	83 c4 10             	add    esp,0x10
c0013872:	85 c0                	test   eax,eax
c0013874:	74 13                	je     c0013889 <SysTruncate(regs*)+0x76>
c0013876:	83 ec 0c             	sub    esp,0xc
c0013879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001387b:	53                   	push   ebx
c001387c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001387f:	83 c4 10             	add    esp,0x10
c0013882:	b8 04 00 00 00       	mov    eax,0x4
c0013887:	eb 7c                	jmp    c0013905 <SysTruncate(regs*)+0xf2>
c0013889:	52                   	push   edx
c001388a:	57                   	push   edi
c001388b:	56                   	push   esi
c001388c:	53                   	push   ebx
c001388d:	e8 b2 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	85 c0                	test   eax,eax
c0013897:	74 1b                	je     c00138b4 <SysTruncate(regs*)+0xa1>
c0013899:	83 ec 0c             	sub    esp,0xc
c001389c:	53                   	push   ebx
c001389d:	e8 ec 48 ff ff       	call   c000818e <File::close()>
c00138a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138aa:	83 c4 10             	add    esp,0x10
c00138ad:	b8 05 00 00 00       	mov    eax,0x5
c00138b2:	eb 51                	jmp    c0013905 <SysTruncate(regs*)+0xf2>
c00138b4:	83 ec 0c             	sub    esp,0xc
c00138b7:	53                   	push   ebx
c00138b8:	e8 d1 48 ff ff       	call   c000818e <File::close()>
c00138bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138c5:	83 c4 10             	add    esp,0x10
c00138c8:	31 c0                	xor    eax,eax
c00138ca:	eb 39                	jmp    c0013905 <SysTruncate(regs*)+0xf2>
c00138cc:	31 d2                	xor    edx,edx
c00138ce:	b8 01 00 00 00       	mov    eax,0x1
c00138d3:	83 fd 02             	cmp    ebp,0x2
c00138d6:	7e 2f                	jle    c0013907 <SysTruncate(regs*)+0xf4>
c00138d8:	83 ec 0c             	sub    esp,0xc
c00138db:	51                   	push   ecx
c00138dc:	e8 f4 e5 ff ff       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c00138e1:	83 c4 10             	add    esp,0x10
c00138e4:	89 c1                	mov    ecx,eax
c00138e6:	31 d2                	xor    edx,edx
c00138e8:	b8 02 00 00 00       	mov    eax,0x2
c00138ed:	85 c9                	test   ecx,ecx
c00138ef:	74 16                	je     c0013907 <SysTruncate(regs*)+0xf4>
c00138f1:	50                   	push   eax
c00138f2:	57                   	push   edi
c00138f3:	56                   	push   esi
c00138f4:	51                   	push   ecx
c00138f5:	e8 4a 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c00138fa:	83 c4 10             	add    esp,0x10
c00138fd:	85 c0                	test   eax,eax
c00138ff:	0f 95 c0             	setne  al
c0013902:	0f b6 c0             	movzx  eax,al
c0013905:	31 d2                	xor    edx,edx
c0013907:	83 c4 0c             	add    esp,0xc
c001390a:	5b                   	pop    ebx
c001390b:	5e                   	pop    esi
c001390c:	5f                   	pop    edi
c001390d:	5d                   	pop    ebp
c001390e:	c3                   	ret    

c001390f <SysWrite(regs*)>:
c001390f:	57                   	push   edi
c0013910:	56                   	push   esi
c0013911:	53                   	push   ebx
c0013912:	83 ec 10             	sub    esp,0x10
c0013915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013919:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001391c:	83 f8 02             	cmp    eax,0x2
c001391f:	77 10                	ja     c0013931 <SysWrite(regs*)+0x22>
c0013921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013926:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013929:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001392f:	eb 0e                	jmp    c001393f <SysWrite(regs*)+0x30>
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	50                   	push   eax
c0013935:	e8 9b e5 ff ff       	call   c0011ed5 <KeGetFileFromDescriptor(int)>
c001393a:	83 c4 10             	add    esp,0x10
c001393d:	89 c1                	mov    ecx,eax
c001393f:	83 c8 ff             	or     eax,0xffffffff
c0013942:	85 c9                	test   ecx,ecx
c0013944:	89 c2                	mov    edx,eax
c0013946:	74 28                	je     c0013970 <SysWrite(regs*)+0x61>
c0013948:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013950:	31 ff                	xor    edi,edi
c0013952:	83 ec 0c             	sub    esp,0xc
c0013955:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013957:	8d 54 24 18          	lea    edx,[esp+0x18]
c001395b:	52                   	push   edx
c001395c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001395f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013962:	57                   	push   edi
c0013963:	56                   	push   esi
c0013964:	51                   	push   ecx
c0013965:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013968:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001396c:	83 c4 20             	add    esp,0x20
c001396f:	99                   	cdq    
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	5b                   	pop    ebx
c0013974:	5e                   	pop    esi
c0013975:	5f                   	pop    edi
c0013976:	c3                   	ret    

c0013977 <SysWsbe(regs*)>:
c0013977:	55                   	push   ebp
c0013978:	57                   	push   edi
c0013979:	56                   	push   esi
c001397a:	53                   	push   ebx
c001397b:	83 ec 3c             	sub    esp,0x3c
c001397e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013982:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013989:	75 2d                	jne    c00139b8 <SysWsbe(regs*)+0x41>
c001398b:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013992:	75 24                	jne    c00139b8 <SysWsbe(regs*)+0x41>
c0013994:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001399b:	75 1b                	jne    c00139b8 <SysWsbe(regs*)+0x41>
c001399d:	6a 01                	push   0x1
c001399f:	6a 00                	push   0x0
c00139a1:	68 69 95 00 c0       	push   0xc0009569
c00139a6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00139ac:	e8 9f 18 00 00       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	31 c0                	xor    eax,eax
c00139b6:	eb 52                	jmp    c0013a0a <SysWsbe(regs*)+0x93>
c00139b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00139bc:	be 9c 28 02 c0       	mov    esi,0xc002289c
c00139c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00139c6:	fc                   	cld    
c00139c7:	83 ec 0c             	sub    esp,0xc
c00139ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139cc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00139d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139d8:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00139de:	8b 06                	mov    eax,DWORD PTR [esi]
c00139e0:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00139e3:	57                   	push   edi
c00139e4:	e8 87 cb fe ff       	call   c0000570 <strlen>
c00139e9:	5a                   	pop    edx
c00139ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00139ee:	52                   	push   edx
c00139ef:	31 d2                	xor    edx,edx
c00139f1:	57                   	push   edi
c00139f2:	52                   	push   edx
c00139f3:	50                   	push   eax
c00139f4:	56                   	push   esi
c00139f5:	ff d5                	call   ebp
c00139f7:	83 c4 14             	add    esp,0x14
c00139fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139fd:	e8 4e 22 00 00       	call   c0015c50 <terminateTask(int)>
c0013a02:	83 c4 10             	add    esp,0x10
c0013a05:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013a0a:	83 c4 3c             	add    esp,0x3c
c0013a0d:	31 d2                	xor    edx,edx
c0013a0f:	5b                   	pop    ebx
c0013a10:	5e                   	pop    esi
c0013a11:	5f                   	pop    edi
c0013a12:	5d                   	pop    ebp
c0013a13:	c3                   	ret    

c0013a14 <SysYield(regs*)>:
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	fa                   	cli    
c0013a18:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a1e:	e8 7d 1a 00 00       	call   c00154a0 <schedule()>
c0013a23:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013a2a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013a31:	75 01                	jne    c0013a34 <SysYield(regs*)+0x20>
c0013a33:	fb                   	sti    
c0013a34:	31 c0                	xor    eax,eax
c0013a36:	31 d2                	xor    edx,edx
c0013a38:	83 c4 0c             	add    esp,0xc
c0013a3b:	c3                   	ret    

c0013a3c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013a3c:	55                   	push   ebp
c0013a3d:	57                   	push   edi
c0013a3e:	56                   	push   esi
c0013a3f:	53                   	push   ebx
c0013a40:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013a46:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013a4e:	0f 95 c0             	setne  al
c0013a51:	31 d2                	xor    edx,edx
c0013a53:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013a5b:	0f 94 c2             	sete   dl
c0013a5e:	85 c2                	test   edx,eax
c0013a60:	74 34                	je     c0013a96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a62:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013a6d:	74 27                	je     c0013a96 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a6f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013a76:	05 00 10 00 00       	add    eax,0x1000
c0013a7b:	89 c1                	mov    ecx,eax
c0013a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a82:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013a88:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013a8f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013a96:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013a9d:	83 ec 0c             	sub    esp,0xc
c0013aa0:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013aa6:	6a 01                	push   0x1
c0013aa8:	e8 82 e5 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	89 c3                	mov    ebx,eax
c0013ab2:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013ab8:	0f 86 26 01 00 00    	jbe    c0013be4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013abe:	c1 ee 0c             	shr    esi,0xc
c0013ac1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ac8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013acc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ad4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013adb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013adf:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013ae6:	29 ef                	sub    edi,ebp
c0013ae8:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013aec:	0f 83 f9 00 00 00    	jae    c0013beb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0013af2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013af8:	76 05                	jbe    c0013aff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013afa:	bf 00 10 00 00       	mov    edi,0x1000
c0013aff:	83 ec 0c             	sub    esp,0xc
c0013b02:	31 d2                	xor    edx,edx
c0013b04:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b0d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b11:	50                   	push   eax
c0013b12:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013b16:	56                   	push   esi
c0013b17:	52                   	push   edx
c0013b18:	57                   	push   edi
c0013b19:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013b20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b23:	83 c4 20             	add    esp,0x20
c0013b26:	85 c0                	test   eax,eax
c0013b28:	75 06                	jne    c0013b30 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013b2a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013b2e:	74 13                	je     c0013b43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	53                   	push   ebx
c0013b34:	e8 fe e7 ff ff       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	31 c0                	xor    eax,eax
c0013b3e:	e9 80 01 00 00       	jmp    c0013cc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0013b43:	fa                   	cli    
c0013b44:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b4a:	e8 67 b3 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0013b4f:	6a 07                	push   0x7
c0013b51:	89 c7                	mov    edi,eax
c0013b53:	53                   	push   ebx
c0013b54:	50                   	push   eax
c0013b55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b5d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b63:	e8 aa eb ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b68:	83 c4 0c             	add    esp,0xc
c0013b6b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b78:	6a 00                	push   0x0
c0013b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b88:	e8 f1 e9 ff ff       	call   c001257e <VAS::mapOtherVASIn(bool, VAS*)>
c0013b8d:	58                   	pop    eax
c0013b8e:	5a                   	pop    edx
c0013b8f:	68 07 0c 00 00       	push   0xc07
c0013b94:	55                   	push   ebp
c0013b95:	57                   	push   edi
c0013b96:	89 df                	mov    edi,ebx
c0013b98:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ba5:	6a 00                	push   0x0
c0013ba7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013baf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb5:	e8 9a ed ff ff       	call   c0012954 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bba:	b9 00 10 00 00       	mov    ecx,0x1000
c0013bbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bc1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013bc8:	83 c4 20             	add    esp,0x20
c0013bcb:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013bd2:	75 01                	jne    c0013bd5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0013bd4:	fb                   	sti    
c0013bd5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013bdb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013bdf:	e9 f0 fe ff ff       	jmp    c0013ad4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013be4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013beb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013bf2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013bf8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013bfe:	0f 86 b1 00 00 00    	jbe    c0013cb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013c04:	fa                   	cli    
c0013c05:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013c0b:	c1 ee 0c             	shr    esi,0xc
c0013c0e:	51                   	push   ecx
c0013c0f:	31 ff                	xor    edi,edi
c0013c11:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c1e:	6a 00                	push   0x0
c0013c20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c2e:	e8 4b e9 ff ff       	call   c001257e <VAS::mapOtherVASIn(bool, VAS*)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	e8 7b b2 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0013c3b:	47                   	inc    edi
c0013c3c:	6a 07                	push   0x7
c0013c3e:	53                   	push   ebx
c0013c3f:	50                   	push   eax
c0013c40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c4a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013c4d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013c53:	e8 ba ea ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c58:	58                   	pop    eax
c0013c59:	5a                   	pop    edx
c0013c5a:	68 07 0c 00 00       	push   0xc07
c0013c5f:	55                   	push   ebp
c0013c60:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c6a:	50                   	push   eax
c0013c6b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c78:	6a 00                	push   0x0
c0013c7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c88:	e8 c7 ec ff ff       	call   c0012954 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c8d:	83 c4 1c             	add    esp,0x1c
c0013c90:	68 00 10 00 00       	push   0x1000
c0013c95:	6a 00                	push   0x0
c0013c97:	53                   	push   ebx
c0013c98:	e8 53 c8 fe ff       	call   c00004f0 <memset>
c0013c9d:	83 c4 10             	add    esp,0x10
c0013ca0:	39 fe                	cmp    esi,edi
c0013ca2:	77 92                	ja     c0013c36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0013ca4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013cab:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013cb2:	75 01                	jne    c0013cb5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013cb4:	fb                   	sti    
c0013cb5:	83 ec 0c             	sub    esp,0xc
c0013cb8:	53                   	push   ebx
c0013cb9:	e8 79 e6 ff ff       	call   c0012337 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	b0 01                	mov    al,0x1
c0013cc3:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013cc9:	5b                   	pop    ebx
c0013cca:	5e                   	pop    esi
c0013ccb:	5f                   	pop    edi
c0013ccc:	5d                   	pop    ebp
c0013ccd:	c3                   	ret    

c0013cce <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013cce:	55                   	push   ebp
c0013ccf:	57                   	push   edi
c0013cd0:	56                   	push   esi
c0013cd1:	53                   	push   ebx
c0013cd2:	83 ec 48             	sub    esp,0x48
c0013cd5:	68 14 01 00 00       	push   0x114
c0013cda:	e8 9c ac ff ff       	call   c000e97b <malloc>
c0013cdf:	83 c4 0c             	add    esp,0xc
c0013ce2:	89 c6                	mov    esi,eax
c0013ce4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013ce8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013cec:	50                   	push   eax
c0013ced:	e8 20 44 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013cf2:	58                   	pop    eax
c0013cf3:	5a                   	pop    edx
c0013cf4:	6a 01                	push   0x1
c0013cf6:	56                   	push   esi
c0013cf7:	e8 34 44 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013cfc:	83 c4 10             	add    esp,0x10
c0013cff:	85 c0                	test   eax,eax
c0013d01:	0f 85 43 01 00 00    	jne    c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d07:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013d0f:	83 ec 0c             	sub    esp,0xc
c0013d12:	6a 34                	push   0x34
c0013d14:	e8 62 ac ff ff       	call   c000e97b <malloc>
c0013d19:	89 c3                	mov    ebx,eax
c0013d1b:	58                   	pop    eax
c0013d1c:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d1e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013d22:	57                   	push   edi
c0013d23:	53                   	push   ebx
c0013d24:	6a 00                	push   0x0
c0013d26:	6a 34                	push   0x34
c0013d28:	56                   	push   esi
c0013d29:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d2c:	83 c4 20             	add    esp,0x20
c0013d2f:	85 c0                	test   eax,eax
c0013d31:	0f 85 13 01 00 00    	jne    c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d37:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013d3d:	0f 85 07 01 00 00    	jne    c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d43:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d46:	85 c0                	test   eax,eax
c0013d48:	0f 84 fc 00 00 00    	je     c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d4e:	31 d2                	xor    edx,edx
c0013d50:	55                   	push   ebp
c0013d51:	52                   	push   edx
c0013d52:	50                   	push   eax
c0013d53:	56                   	push   esi
c0013d54:	e8 95 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	85 c0                	test   eax,eax
c0013d5e:	0f 85 e6 00 00 00    	jne    c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d6a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d6e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013d72:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d76:	0f af c2             	imul   eax,edx
c0013d79:	50                   	push   eax
c0013d7a:	e8 fc ab ff ff       	call   c000e97b <malloc>
c0013d7f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013d85:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d88:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d8c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d90:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d94:	0f af c2             	imul   eax,edx
c0013d97:	99                   	cdq    
c0013d98:	52                   	push   edx
c0013d99:	50                   	push   eax
c0013d9a:	56                   	push   esi
c0013d9b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d9e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013da1:	83 c4 20             	add    esp,0x20
c0013da4:	85 c0                	test   eax,eax
c0013da6:	0f 84 9e 00 00 00    	je     c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dac:	31 d2                	xor    edx,edx
c0013dae:	51                   	push   ecx
c0013daf:	52                   	push   edx
c0013db0:	50                   	push   eax
c0013db1:	56                   	push   esi
c0013db2:	e8 37 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013db7:	83 c4 10             	add    esp,0x10
c0013dba:	85 c0                	test   eax,eax
c0013dbc:	0f 85 88 00 00 00    	jne    c0013e4a <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013dc2:	83 ec 0c             	sub    esp,0xc
c0013dc5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013dc9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013dcd:	31 ed                	xor    ebp,ebp
c0013dcf:	0f af c2             	imul   eax,edx
c0013dd2:	50                   	push   eax
c0013dd3:	e8 a3 ab ff ff       	call   c000e97b <malloc>
c0013dd8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013dda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dde:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013de5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013de9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ded:	0f af c2             	imul   eax,edx
c0013df0:	99                   	cdq    
c0013df1:	52                   	push   edx
c0013df2:	50                   	push   eax
c0013df3:	56                   	push   esi
c0013df4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013df7:	83 c4 20             	add    esp,0x20
c0013dfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013e02:	0f b7 fd             	movzx  edi,bp
c0013e05:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013e09:	73 7d                	jae    c0013e88 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013e0b:	c1 e7 05             	shl    edi,0x5
c0013e0e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013e12:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013e15:	75 6b                	jne    c0013e82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e17:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013e1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e1e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013e21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e25:	52                   	push   edx
c0013e26:	31 d2                	xor    edx,edx
c0013e28:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013e2b:	52                   	push   edx
c0013e2c:	50                   	push   eax
c0013e2d:	56                   	push   esi
c0013e2e:	e8 bb 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013e33:	83 c4 10             	add    esp,0x10
c0013e36:	85 c0                	test   eax,eax
c0013e38:	74 17                	je     c0013e51 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013e3a:	83 ec 0c             	sub    esp,0xc
c0013e3d:	68 c8 28 02 c0       	push   0xc00228c8
c0013e42:	e8 1d 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	31 c0                	xor    eax,eax
c0013e4c:	e9 87 00 00 00       	jmp    c0013ed8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013e51:	83 ec 0c             	sub    esp,0xc
c0013e54:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013e57:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013e5a:	50                   	push   eax
c0013e5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013e5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e63:	56                   	push   esi
c0013e64:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013e68:	e8 cf fb ff ff       	call   c0013a3c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013e6d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e71:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013e75:	83 c4 20             	add    esp,0x20
c0013e78:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013e7c:	73 04                	jae    c0013e82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e82:	45                   	inc    ebp
c0013e83:	e9 7a ff ff ff       	jmp    c0013e02 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013e88:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013e8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e94:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013e9a:	83 ec 0c             	sub    esp,0xc
c0013e9d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013ea3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ea8:	05 00 10 00 00       	add    eax,0x1000
c0013ead:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb4:	e8 d2 aa ff ff       	call   c000e98b <free>
c0013eb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ebc:	e8 ca aa ff ff       	call   c000e98b <free>
c0013ec1:	58                   	pop    eax
c0013ec2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ec6:	e8 c0 aa ff ff       	call   c000e98b <free>
c0013ecb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ece:	e8 bb 42 ff ff       	call   c000818e <File::close()>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	b0 01                	mov    al,0x1
c0013ed8:	83 c4 3c             	add    esp,0x3c
c0013edb:	5b                   	pop    ebx
c0013edc:	5e                   	pop    esi
c0013edd:	5f                   	pop    edi
c0013ede:	5d                   	pop    ebp
c0013edf:	c3                   	ret    

c0013ee0 <Thr::runtimeReferenceHelper()>:
c0013ee0:	83 ec 18             	sub    esp,0x18
c0013ee3:	68 d0 28 02 c0       	push   0xc00228d0
c0013ee8:	e8 77 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013eed:	fa                   	cli    
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	eb fe                	jmp    c0013ef1 <Thr::runtimeReferenceHelper()+0x11>

c0013ef3 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013ef3:	57                   	push   edi
c0013ef4:	56                   	push   esi
c0013ef5:	53                   	push   ebx
c0013ef6:	31 db                	xor    ebx,ebx
c0013ef8:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013efe:	7e 3c                	jle    c0013f3c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013f00:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013f07:	31 ff                	xor    edi,edi
c0013f09:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013f10:	7e 27                	jle    c0013f39 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013f12:	50                   	push   eax
c0013f13:	50                   	push   eax
c0013f14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f18:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f1a:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013f21:	50                   	push   eax
c0013f22:	e8 29 c8 fe ff       	call   c0000750 <strcmp>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	85 c0                	test   eax,eax
c0013f2c:	75 05                	jne    c0013f33 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013f2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f31:	eb 0b                	jmp    c0013f3e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013f33:	83 c6 10             	add    esi,0x10
c0013f36:	47                   	inc    edi
c0013f37:	eb d0                	jmp    c0013f09 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013f39:	43                   	inc    ebx
c0013f3a:	eb bc                	jmp    c0013ef8 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013f3c:	31 c0                	xor    eax,eax
c0013f3e:	5b                   	pop    ebx
c0013f3f:	5e                   	pop    esi
c0013f40:	5f                   	pop    edi
c0013f41:	c3                   	ret    

c0013f42 <Thr::loadKernelSymbolTable(char const*)>:
c0013f42:	55                   	push   ebp
c0013f43:	57                   	push   edi
c0013f44:	56                   	push   esi
c0013f45:	53                   	push   ebx
c0013f46:	83 ec 68             	sub    esp,0x68
c0013f49:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013f4f:	68 14 01 00 00       	push   0x114
c0013f54:	e8 22 aa ff ff       	call   c000e97b <malloc>
c0013f59:	83 c4 0c             	add    esp,0xc
c0013f5c:	89 c3                	mov    ebx,eax
c0013f5e:	56                   	push   esi
c0013f5f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013f63:	50                   	push   eax
c0013f64:	e8 a9 41 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013f69:	5e                   	pop    esi
c0013f6a:	5f                   	pop    edi
c0013f6b:	6a 01                	push   0x1
c0013f6d:	53                   	push   ebx
c0013f6e:	e8 bd 41 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013f73:	83 c4 10             	add    esp,0x10
c0013f76:	85 c0                	test   eax,eax
c0013f78:	74 0a                	je     c0013f84 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	68 f2 28 02 c0       	push   0xc00228f2
c0013f82:	eb 34                	jmp    c0013fb8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013f84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013f8c:	83 ec 0c             	sub    esp,0xc
c0013f8f:	6a 34                	push   0x34
c0013f91:	e8 e5 a9 ff ff       	call   c000e97b <malloc>
c0013f96:	59                   	pop    ecx
c0013f97:	89 c7                	mov    edi,eax
c0013f99:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013f9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f9f:	56                   	push   esi
c0013fa0:	57                   	push   edi
c0013fa1:	6a 00                	push   0x0
c0013fa3:	6a 34                	push   0x34
c0013fa5:	53                   	push   ebx
c0013fa6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fa9:	83 c4 20             	add    esp,0x20
c0013fac:	85 c0                	test   eax,eax
c0013fae:	74 17                	je     c0013fc7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013fb0:	83 ec 0c             	sub    esp,0xc
c0013fb3:	68 09 29 02 c0       	push   0xc0022909
c0013fb8:	e8 05 ad ff ff       	call   c000ecc2 <KePanic(char const*)>
c0013fbd:	83 c4 10             	add    esp,0x10
c0013fc0:	31 c0                	xor    eax,eax
c0013fc2:	e9 31 02 00 00       	jmp    c00141f8 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013fc7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013fcd:	75 e1                	jne    c0013fb0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fcf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013fd2:	85 c0                	test   eax,eax
c0013fd4:	74 da                	je     c0013fb0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fd6:	52                   	push   edx
c0013fd7:	31 d2                	xor    edx,edx
c0013fd9:	52                   	push   edx
c0013fda:	50                   	push   eax
c0013fdb:	53                   	push   ebx
c0013fdc:	e8 0d 42 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	85 c0                	test   eax,eax
c0013fe6:	75 c8                	jne    c0013fb0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fe8:	83 ec 0c             	sub    esp,0xc
c0013feb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013fef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ff3:	31 ed                	xor    ebp,ebp
c0013ff5:	0f af c2             	imul   eax,edx
c0013ff8:	50                   	push   eax
c0013ff9:	e8 7d a9 ff ff       	call   c000e97b <malloc>
c0013ffe:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014004:	89 34 24             	mov    DWORD PTR [esp],esi
c0014007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001400b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001400f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014013:	0f af c2             	imul   eax,edx
c0014016:	99                   	cdq    
c0014017:	52                   	push   edx
c0014018:	50                   	push   eax
c0014019:	53                   	push   ebx
c001401a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001401d:	83 c4 20             	add    esp,0x20
c0014020:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014028:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014030:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014038:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014040:	0f b7 f5             	movzx  esi,bp
c0014043:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014047:	0f 83 a7 00 00 00    	jae    c00140f4 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001404d:	6b f6 28             	imul   esi,esi,0x28
c0014050:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014054:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001405b:	50                   	push   eax
c001405c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014060:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014064:	8b 16                	mov    edx,DWORD PTR [esi]
c0014066:	6b c0 28             	imul   eax,eax,0x28
c0014069:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001406d:	89 d0                	mov    eax,edx
c001406f:	31 d2                	xor    edx,edx
c0014071:	52                   	push   edx
c0014072:	50                   	push   eax
c0014073:	53                   	push   ebx
c0014074:	e8 75 41 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014079:	83 c4 0c             	add    esp,0xc
c001407c:	6a 20                	push   0x20
c001407e:	6a 00                	push   0x0
c0014080:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014084:	52                   	push   edx
c0014085:	e8 66 c4 fe ff       	call   c00004f0 <memset>
c001408a:	58                   	pop    eax
c001408b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014091:	51                   	push   ecx
c0014092:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014096:	52                   	push   edx
c0014097:	6a 00                	push   0x0
c0014099:	6a 1f                	push   0x1f
c001409b:	53                   	push   ebx
c001409c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001409f:	83 c4 18             	add    esp,0x18
c00140a2:	68 20 29 02 c0       	push   0xc0022920
c00140a7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00140ab:	52                   	push   edx
c00140ac:	e8 9f c6 fe ff       	call   c0000750 <strcmp>
c00140b1:	83 c4 10             	add    esp,0x10
c00140b4:	85 c0                	test   eax,eax
c00140b6:	75 0f                	jne    c00140c7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00140b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140c7:	50                   	push   eax
c00140c8:	50                   	push   eax
c00140c9:	68 28 29 02 c0       	push   0xc0022928
c00140ce:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00140d2:	50                   	push   eax
c00140d3:	e8 78 c6 fe ff       	call   c0000750 <strcmp>
c00140d8:	83 c4 10             	add    esp,0x10
c00140db:	85 c0                	test   eax,eax
c00140dd:	75 0f                	jne    c00140ee <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00140df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140ee:	45                   	inc    ebp
c00140ef:	e9 4c ff ff ff       	jmp    c0014040 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00140f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140f9:	75 10                	jne    c001410b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00140fb:	83 ec 0c             	sub    esp,0xc
c00140fe:	68 30 29 02 c0       	push   0xc0022930
c0014103:	e8 ba ab ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014108:	83 c4 10             	add    esp,0x10
c001410b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014110:	75 10                	jne    c0014122 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	68 30 29 02 c0       	push   0xc0022930
c001411a:	e8 a3 ab ff ff       	call   c000ecc2 <KePanic(char const*)>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	31 d2                	xor    edx,edx
c0014124:	50                   	push   eax
c0014125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014129:	52                   	push   edx
c001412a:	50                   	push   eax
c001412b:	53                   	push   ebx
c001412c:	e8 bd 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014131:	5a                   	pop    edx
c0014132:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014136:	e8 40 a8 ff ff       	call   c000e97b <malloc>
c001413b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001413f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014143:	31 c9                	xor    ecx,ecx
c0014145:	5e                   	pop    esi
c0014146:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014148:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001414c:	55                   	push   ebp
c001414d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014151:	51                   	push   ecx
c0014152:	52                   	push   edx
c0014153:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014157:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001415b:	53                   	push   ebx
c001415c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001415f:	83 c4 14             	add    esp,0x14
c0014162:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014166:	e8 10 a8 ff ff       	call   c000e97b <malloc>
c001416b:	89 c6                	mov    esi,eax
c001416d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001416f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014172:	56                   	push   esi
c0014173:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014177:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001417b:	51                   	push   ecx
c001417c:	52                   	push   edx
c001417d:	53                   	push   ebx
c001417e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014181:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014185:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c001418b:	83 c4 1c             	add    esp,0x1c
c001418e:	c1 e8 04             	shr    eax,0x4
c0014191:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c0014198:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001419c:	31 d2                	xor    edx,edx
c001419e:	52                   	push   edx
c001419f:	50                   	push   eax
c00141a0:	53                   	push   ebx
c00141a1:	e8 48 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00141a6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141a8:	31 d2                	xor    edx,edx
c00141aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00141ad:	56                   	push   esi
c00141ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141b2:	52                   	push   edx
c00141b3:	50                   	push   eax
c00141b4:	53                   	push   ebx
c00141b5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b8:	83 c4 14             	add    esp,0x14
c00141bb:	53                   	push   ebx
c00141bc:	e8 cd 3f ff ff       	call   c000818e <File::close()>
c00141c1:	5d                   	pop    ebp
c00141c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141c6:	e8 c0 a7 ff ff       	call   c000e98b <free>
c00141cb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141ce:	e8 b8 a7 ff ff       	call   c000e98b <free>
c00141d3:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c00141d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141dc:	8d 50 01             	lea    edx,[eax+0x1]
c00141df:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c00141e6:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00141ed:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	b0 01                	mov    al,0x1
c00141f8:	83 c4 5c             	add    esp,0x5c
c00141fb:	5b                   	pop    ebx
c00141fc:	5e                   	pop    esi
c00141fd:	5f                   	pop    edi
c00141fe:	5d                   	pop    ebp
c00141ff:	c3                   	ret    

c0014200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014200:	55                   	push   ebp
c0014201:	57                   	push   edi
c0014202:	56                   	push   esi
c0014203:	53                   	push   ebx
c0014204:	81 ec 68 03 00 00    	sub    esp,0x368
c001420a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014211:	8b 1d d8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6d8
c0014217:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001421b:	68 14 01 00 00       	push   0x114
c0014220:	e8 56 a7 ff ff       	call   c000e97b <malloc>
c0014225:	83 c4 0c             	add    esp,0xc
c0014228:	89 c5                	mov    ebp,eax
c001422a:	53                   	push   ebx
c001422b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014232:	50                   	push   eax
c0014233:	e8 da 3e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014238:	5e                   	pop    esi
c0014239:	5f                   	pop    edi
c001423a:	6a 01                	push   0x1
c001423c:	55                   	push   ebp
c001423d:	e8 ee 3e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	85 c0                	test   eax,eax
c0014247:	0f 85 aa 06 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001424d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014255:	83 ec 0c             	sub    esp,0xc
c0014258:	6a 34                	push   0x34
c001425a:	e8 1c a7 ff ff       	call   c000e97b <malloc>
c001425f:	5b                   	pop    ebx
c0014260:	89 c7                	mov    edi,eax
c0014262:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014266:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014269:	53                   	push   ebx
c001426a:	57                   	push   edi
c001426b:	6a 00                	push   0x0
c001426d:	6a 34                	push   0x34
c001426f:	55                   	push   ebp
c0014270:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014273:	83 c4 20             	add    esp,0x20
c0014276:	85 c0                	test   eax,eax
c0014278:	0f 85 79 06 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001427e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014284:	0f 85 6d 06 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001428a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001428d:	85 c0                	test   eax,eax
c001428f:	0f 84 62 06 00 00    	je     c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014295:	31 d2                	xor    edx,edx
c0014297:	51                   	push   ecx
c0014298:	52                   	push   edx
c0014299:	50                   	push   eax
c001429a:	55                   	push   ebp
c001429b:	e8 4e 3f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00142a0:	83 c4 10             	add    esp,0x10
c00142a3:	85 c0                	test   eax,eax
c00142a5:	0f 85 4c 06 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00142b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00142b9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142bd:	0f af c2             	imul   eax,edx
c00142c0:	50                   	push   eax
c00142c1:	e8 b5 a6 ff ff       	call   c000e97b <malloc>
c00142c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142d4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142dc:	0f af c2             	imul   eax,edx
c00142df:	99                   	cdq    
c00142e0:	52                   	push   edx
c00142e1:	50                   	push   eax
c00142e2:	55                   	push   ebp
c00142e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142e6:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00142e9:	83 c4 20             	add    esp,0x20
c00142ec:	85 c0                	test   eax,eax
c00142ee:	0f 84 03 06 00 00    	je     c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142f4:	52                   	push   edx
c00142f5:	31 d2                	xor    edx,edx
c00142f7:	52                   	push   edx
c00142f8:	50                   	push   eax
c00142f9:	55                   	push   ebp
c00142fa:	e8 ef 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00142ff:	83 c4 10             	add    esp,0x10
c0014302:	85 c0                	test   eax,eax
c0014304:	0f 85 ed 05 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001430a:	83 ec 0c             	sub    esp,0xc
c001430d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014311:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014315:	31 f6                	xor    esi,esi
c0014317:	0f af c2             	imul   eax,edx
c001431a:	50                   	push   eax
c001431b:	e8 5b a6 ff ff       	call   c000e97b <malloc>
c0014320:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014323:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014327:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001432a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001432e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014332:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014336:	0f af c2             	imul   eax,edx
c0014339:	99                   	cdq    
c001433a:	52                   	push   edx
c001433b:	50                   	push   eax
c001433c:	55                   	push   ebp
c001433d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014340:	83 c4 20             	add    esp,0x20
c0014343:	0f b7 de             	movzx  ebx,si
c0014346:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c001434a:	0f 83 87 00 00 00    	jae    c00143d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014350:	c1 e3 05             	shl    ebx,0x5
c0014353:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014357:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001435a:	75 75                	jne    c00143d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001435c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001435f:	31 d2                	xor    edx,edx
c0014361:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014365:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001436c:	50                   	push   eax
c001436d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014370:	52                   	push   edx
c0014371:	50                   	push   eax
c0014372:	55                   	push   ebp
c0014373:	e8 76 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014378:	83 c4 10             	add    esp,0x10
c001437b:	85 c0                	test   eax,eax
c001437d:	0f 85 74 05 00 00    	jne    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014383:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001438a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001438d:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014391:	31 d2                	xor    edx,edx
c0014393:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014397:	83 ec 0c             	sub    esp,0xc
c001439a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001439e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143a5:	50                   	push   eax
c00143a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ae:	52                   	push   edx
c00143af:	50                   	push   eax
c00143b0:	55                   	push   ebp
c00143b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143b4:	83 c4 1c             	add    esp,0x1c
c00143b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00143ba:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00143bd:	50                   	push   eax
c00143be:	6a 00                	push   0x0
c00143c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00143c8:	50                   	push   eax
c00143c9:	e8 22 c1 fe ff       	call   c00004f0 <memset>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	46                   	inc    esi
c00143d2:	e9 6c ff ff ff       	jmp    c0014343 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00143d7:	53                   	push   ebx
c00143d8:	31 db                	xor    ebx,ebx
c00143da:	68 00 01 00 00       	push   0x100
c00143df:	6a 00                	push   0x0
c00143e1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00143e5:	50                   	push   eax
c00143e6:	e8 05 c1 fe ff       	call   c00004f0 <memset>
c00143eb:	83 c4 0c             	add    esp,0xc
c00143ee:	68 00 01 00 00       	push   0x100
c00143f3:	6a 00                	push   0x0
c00143f5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00143fc:	50                   	push   eax
c00143fd:	e8 ee c0 fe ff       	call   c00004f0 <memset>
c0014402:	83 c4 10             	add    esp,0x10
c0014405:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001440d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014415:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001441d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014425:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001442d:	0f b7 f3             	movzx  esi,bx
c0014430:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014434:	0f 83 2d 01 00 00    	jae    c0014567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001443a:	6b f6 28             	imul   esi,esi,0x28
c001443d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014441:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014448:	52                   	push   edx
c0014449:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001444d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014451:	8b 06                	mov    eax,DWORD PTR [esi]
c0014453:	6b d2 28             	imul   edx,edx,0x28
c0014456:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001445a:	31 d2                	xor    edx,edx
c001445c:	52                   	push   edx
c001445d:	50                   	push   eax
c001445e:	55                   	push   ebp
c001445f:	e8 8a 3d ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014464:	83 c4 0c             	add    esp,0xc
c0014467:	6a 20                	push   0x20
c0014469:	6a 00                	push   0x0
c001446b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014472:	51                   	push   ecx
c0014473:	e8 78 c0 fe ff       	call   c00004f0 <memset>
c0014478:	59                   	pop    ecx
c0014479:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001447c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014480:	52                   	push   edx
c0014481:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014488:	51                   	push   ecx
c0014489:	6a 00                	push   0x0
c001448b:	6a 1f                	push   0x1f
c001448d:	55                   	push   ebp
c001448e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014491:	83 c4 1c             	add    esp,0x1c
c0014494:	6a 09                	push   0x9
c0014496:	68 4a 29 02 c0       	push   0xc002294a
c001449b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00144a2:	51                   	push   ecx
c00144a3:	e8 d8 be fe ff       	call   c0000380 <memcmp>
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	85 c0                	test   eax,eax
c00144ad:	75 21                	jne    c00144d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00144af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144b7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00144bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00144bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144c2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144c9:	89 d0                	mov    eax,edx
c00144cb:	40                   	inc    eax
c00144cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144d0:	50                   	push   eax
c00144d1:	6a 09                	push   0x9
c00144d3:	68 54 29 02 c0       	push   0xc0022954
c00144d8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144df:	50                   	push   eax
c00144e0:	e8 9b be fe ff       	call   c0000380 <memcmp>
c00144e5:	83 c4 10             	add    esp,0x10
c00144e8:	85 c0                	test   eax,eax
c00144ea:	75 21                	jne    c001450d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00144ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00144f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144f8:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00144fc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144ff:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014506:	89 d0                	mov    eax,edx
c0014508:	40                   	inc    eax
c0014509:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001450d:	50                   	push   eax
c001450e:	50                   	push   eax
c001450f:	68 20 29 02 c0       	push   0xc0022920
c0014514:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001451b:	50                   	push   eax
c001451c:	e8 2f c2 fe ff       	call   c0000750 <strcmp>
c0014521:	83 c4 10             	add    esp,0x10
c0014524:	85 c0                	test   eax,eax
c0014526:	75 0f                	jne    c0014537 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014528:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001452b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001452f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014533:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014537:	50                   	push   eax
c0014538:	50                   	push   eax
c0014539:	68 28 29 02 c0       	push   0xc0022928
c001453e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014545:	50                   	push   eax
c0014546:	e8 05 c2 fe ff       	call   c0000750 <strcmp>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	85 c0                	test   eax,eax
c0014550:	75 0f                	jne    c0014561 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014552:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014555:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001455d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014561:	43                   	inc    ebx
c0014562:	e9 c6 fe ff ff       	jmp    c001442d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014567:	31 d2                	xor    edx,edx
c0014569:	50                   	push   eax
c001456a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456e:	52                   	push   edx
c001456f:	50                   	push   eax
c0014570:	55                   	push   ebp
c0014571:	e8 78 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014576:	58                   	pop    eax
c0014577:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001457b:	e8 fb a3 ff ff       	call   c000e97b <malloc>
c0014580:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014583:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014587:	31 d2                	xor    edx,edx
c0014589:	58                   	pop    eax
c001458a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001458e:	53                   	push   ebx
c001458f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014593:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014597:	52                   	push   edx
c0014598:	50                   	push   eax
c0014599:	55                   	push   ebp
c001459a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001459d:	83 c4 14             	add    esp,0x14
c00145a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145a4:	e8 d2 a3 ff ff       	call   c000e97b <malloc>
c00145a9:	31 d2                	xor    edx,edx
c00145ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00145af:	83 c4 0c             	add    esp,0xc
c00145b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145b6:	52                   	push   edx
c00145b7:	50                   	push   eax
c00145b8:	55                   	push   ebp
c00145b9:	e8 30 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00145be:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00145c1:	31 d2                	xor    edx,edx
c00145c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145ce:	52                   	push   edx
c00145cf:	50                   	push   eax
c00145d0:	55                   	push   ebp
c00145d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145d4:	83 c4 20             	add    esp,0x20
c00145d7:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00145dc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00145e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145ec:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00145f0:	0f 84 05 03 00 00    	je     c00148fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00145f6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00145fd:	31 d2                	xor    edx,edx
c00145ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014603:	c1 e8 03             	shr    eax,0x3
c0014606:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001460a:	51                   	push   ecx
c001460b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001460f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014613:	52                   	push   edx
c0014614:	50                   	push   eax
c0014615:	55                   	push   ebp
c0014616:	e8 d3 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001461b:	5b                   	pop    ebx
c001461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014620:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014627:	e8 4f a3 ff ff       	call   c000e97b <malloc>
c001462c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001462f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014633:	31 d2                	xor    edx,edx
c0014635:	5e                   	pop    esi
c0014636:	8d 44 24 58          	lea    eax,[esp+0x58]
c001463a:	50                   	push   eax
c001463b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001463f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014643:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001464a:	52                   	push   edx
c001464b:	50                   	push   eax
c001464c:	55                   	push   ebp
c001464d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014650:	83 c4 20             	add    esp,0x20
c0014653:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001465b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001465f:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014663:	0f 8d 76 02 00 00    	jge    c00148df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014669:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001466d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014671:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014676:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014679:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001467d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014681:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014685:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014689:	c1 e8 08             	shr    eax,0x8
c001468c:	89 c6                	mov    esi,eax
c001468e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014692:	c1 e6 04             	shl    esi,0x4
c0014695:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014699:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001469c:	85 db                	test   ebx,ebx
c001469e:	0f 85 b3 00 00 00    	jne    c0014757 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146ab:	03 06                	add    eax,DWORD PTR [esi]
c00146ad:	50                   	push   eax
c00146ae:	e8 40 f8 ff ff       	call   c0013ef3 <Thr::getAddressOfKernelSymbol(char const*)>
c00146b3:	83 c4 10             	add    esp,0x10
c00146b6:	89 c3                	mov    ebx,eax
c00146b8:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00146bd:	85 c0                	test   eax,eax
c00146bf:	0f 85 92 00 00 00    	jne    c0014757 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146c5:	83 ec 0c             	sub    esp,0xc
c00146c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146cc:	03 06                	add    eax,DWORD PTR [esi]
c00146ce:	50                   	push   eax
c00146cf:	e8 60 b0 ff ff       	call   c000f734 <KeResolveCompatibilitySymbol(char*)>
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	89 c3                	mov    ebx,eax
c00146d9:	85 c0                	test   eax,eax
c00146db:	75 7a                	jne    c0014757 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146dd:	51                   	push   ecx
c00146de:	51                   	push   ecx
c00146df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146e3:	03 06                	add    eax,DWORD PTR [esi]
c00146e5:	50                   	push   eax
c00146e6:	68 5e 29 02 c0       	push   0xc002295e
c00146eb:	e8 74 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146f0:	58                   	pop    eax
c00146f1:	5a                   	pop    edx
c00146f2:	68 78 29 02 c0       	push   0xc0022978
c00146f7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00146fe:	50                   	push   eax
c00146ff:	e8 3c bf fe ff       	call   c0000640 <strcpy>
c0014704:	59                   	pop    ecx
c0014705:	58                   	pop    eax
c0014706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001470a:	03 06                	add    eax,DWORD PTR [esi]
c001470c:	50                   	push   eax
c001470d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014714:	50                   	push   eax
c0014715:	e8 26 c1 fe ff       	call   c0000840 <strcat>
c001471a:	58                   	pop    eax
c001471b:	5a                   	pop    edx
c001471c:	68 12 2a 02 c0       	push   0xc0022a12
c0014721:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014728:	50                   	push   eax
c0014729:	e8 12 c1 fe ff       	call   c0000840 <strcat>
c001472e:	83 c4 10             	add    esp,0x10
c0014731:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014736:	0f 84 5d 01 00 00    	je     c0014899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014746:	50                   	push   eax
c0014747:	e8 76 a5 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001474c:	83 c4 10             	add    esp,0x10
c001474f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014753:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014757:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001475c:	83 f8 01             	cmp    eax,0x1
c001475f:	0f 85 8f 00 00 00    	jne    c00147f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014765:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001476c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014770:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014774:	01 ce                	add    esi,ecx
c0014776:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001477e:	0f 94 c0             	sete   al
c0014781:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014789:	0f 94 c2             	sete   dl
c001478c:	09 c2                	or     edx,eax
c001478e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014790:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014795:	0f b6 d2             	movzx  edx,dl
c0014798:	74 41                	je     c00147db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001479a:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001479d:	85 d2                	test   edx,edx
c001479f:	75 15                	jne    c00147b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00147a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147a5:	66 83 f8 0c          	cmp    ax,0xc
c00147a9:	76 05                	jbe    c00147b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00147ab:	b8 0c 00 00 00       	mov    eax,0xc
c00147b0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147b4:	76 37                	jbe    c00147ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00147ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147bf:	0f 84 d4 00 00 00    	je     c0014899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147c5:	83 ec 0c             	sub    esp,0xc
c00147c8:	68 8f 29 02 c0       	push   0xc002298f
c00147cd:	e8 f0 a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00147d9:	eb 12                	jmp    c00147ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147db:	01 c1                	add    ecx,eax
c00147dd:	85 d2                	test   edx,edx
c00147df:	75 0c                	jne    c00147ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147e1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147e5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147e9:	77 02                	ja     c00147ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147eb:	01 d9                	add    ecx,ebx
c00147ed:	89 0e                	mov    DWORD PTR [esi],ecx
c00147ef:	e9 e2 00 00 00       	jmp    c00148d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00147f4:	83 f8 02             	cmp    eax,0x2
c00147f7:	75 77                	jne    c0014870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00147f9:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014800:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014804:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014808:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014810:	74 21                	je     c0014833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014812:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001481a:	74 17                	je     c0014833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001481c:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014820:	b8 0a 00 00 00       	mov    eax,0xa
c0014825:	83 fa 0e             	cmp    edx,0xe
c0014828:	77 03                	ja     c001482d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001482a:	8d 42 fc             	lea    eax,[edx-0x4]
c001482d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014831:	76 17                	jbe    c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014833:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014838:	74 5f                	je     c0014899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	68 ab 29 02 c0       	push   0xc00229ab
c0014842:	e8 7b a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	8b 06                	mov    eax,DWORD PTR [esi]
c001484c:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014851:	74 13                	je     c0014866 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014853:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014857:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001485e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014862:	01 d0                	add    eax,edx
c0014864:	eb 04                	jmp    c001486a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014866:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001486a:	01 c3                	add    ebx,eax
c001486c:	89 1e                	mov    DWORD PTR [esi],ebx
c001486e:	eb 66                	jmp    c00148d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014870:	52                   	push   edx
c0014871:	52                   	push   edx
c0014872:	50                   	push   eax
c0014873:	68 c7 29 02 c0       	push   0xc00229c7
c0014878:	e8 e7 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014885:	74 12                	je     c0014899 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014887:	83 ec 0c             	sub    esp,0xc
c001488a:	68 d2 29 02 c0       	push   0xc00229d2
c001488f:	e8 2e a4 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	eb 3d                	jmp    c00148d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014899:	83 ec 0c             	sub    esp,0xc
c001489c:	55                   	push   ebp
c001489d:	e8 ec 38 ff ff       	call   c000818e <File::close()>
c00148a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148ab:	59                   	pop    ecx
c00148ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148b0:	e8 d6 a0 ff ff       	call   c000e98b <free>
c00148b5:	5b                   	pop    ebx
c00148b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148ba:	e8 cc a0 ff ff       	call   c000e98b <free>
c00148bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148c2:	e8 c4 a0 ff ff       	call   c000e98b <free>
c00148c7:	5e                   	pop    esi
c00148c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148cc:	e8 ba a0 ff ff       	call   c000e98b <free>
c00148d1:	83 c4 10             	add    esp,0x10
c00148d4:	eb 21                	jmp    c00148f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148d6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00148da:	e9 7c fd ff ff       	jmp    c001465b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00148df:	83 ec 0c             	sub    esp,0xc
c00148e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148e6:	e8 a0 a0 ff ff       	call   c000e98b <free>
c00148eb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00148ef:	83 c4 10             	add    esp,0x10
c00148f2:	e9 f1 fc ff ff       	jmp    c00145e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00148f7:	31 c0                	xor    eax,eax
c00148f9:	eb 33                	jmp    c001492e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00148fb:	83 ec 0c             	sub    esp,0xc
c00148fe:	55                   	push   ebp
c00148ff:	e8 8a 38 ff ff       	call   c000818e <File::close()>
c0014904:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014907:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001490a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001490d:	58                   	pop    eax
c001490e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014912:	e8 74 a0 ff ff       	call   c000e98b <free>
c0014917:	89 3c 24             	mov    DWORD PTR [esp],edi
c001491a:	e8 6c a0 ff ff       	call   c000e98b <free>
c001491f:	5a                   	pop    edx
c0014920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014924:	e8 62 a0 ff ff       	call   c000e98b <free>
c0014929:	83 c4 10             	add    esp,0x10
c001492c:	b0 01                	mov    al,0x1
c001492e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014934:	5b                   	pop    ebx
c0014935:	5e                   	pop    esi
c0014936:	5f                   	pop    edi
c0014937:	5d                   	pop    ebp
c0014938:	c3                   	ret    

c0014939 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014939:	56                   	push   esi
c001493a:	31 d2                	xor    edx,edx
c001493c:	53                   	push   ebx
c001493d:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014947:	39 d3                	cmp    ebx,edx
c0014949:	7e 1b                	jle    c0014966 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001494b:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014952:	39 c8                	cmp    eax,ecx
c0014954:	77 0d                	ja     c0014963 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014956:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c001495d:	01 c6                	add    esi,eax
c001495f:	39 ce                	cmp    esi,ecx
c0014961:	77 05                	ja     c0014968 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014963:	42                   	inc    edx
c0014964:	eb e1                	jmp    c0014947 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014966:	31 c0                	xor    eax,eax
c0014968:	5b                   	pop    ebx
c0014969:	5e                   	pop    esi
c001496a:	c3                   	ret    

c001496b <Thr::getDriverNameFromAddress(unsigned long)>:
c001496b:	53                   	push   ebx
c001496c:	31 c0                	xor    eax,eax
c001496e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014972:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014978:	39 c3                	cmp    ebx,eax
c001497a:	7e 22                	jle    c001499e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001497c:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c0014983:	39 ca                	cmp    edx,ecx
c0014985:	77 14                	ja     c001499b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014987:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c001498e:	39 ca                	cmp    edx,ecx
c0014990:	76 09                	jbe    c001499b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014992:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c0014999:	eb 05                	jmp    c00149a0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001499b:	40                   	inc    eax
c001499c:	eb da                	jmp    c0014978 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001499e:	31 c0                	xor    eax,eax
c00149a0:	5b                   	pop    ebx
c00149a1:	c3                   	ret    

c00149a2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00149a2:	53                   	push   ebx
c00149a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00149a7:	53                   	push   ebx
c00149a8:	e8 8c ff ff ff       	call   c0014939 <Thr::getDriverBaseFromAddress(unsigned long)>
c00149ad:	5a                   	pop    edx
c00149ae:	31 d2                	xor    edx,edx
c00149b0:	85 c0                	test   eax,eax
c00149b2:	74 04                	je     c00149b8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00149b4:	89 da                	mov    edx,ebx
c00149b6:	29 c2                	sub    edx,eax
c00149b8:	89 d0                	mov    eax,edx
c00149ba:	5b                   	pop    ebx
c00149bb:	c3                   	ret    

c00149bc <Thr::loadDLL(char const*, bool)>:
c00149bc:	55                   	push   ebp
c00149bd:	57                   	push   edi
c00149be:	56                   	push   esi
c00149bf:	53                   	push   ebx
c00149c0:	81 ec 34 01 00 00    	sub    esp,0x134
c00149c6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00149cd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00149d4:	56                   	push   esi
c00149d5:	68 ea 29 02 c0       	push   0xc00229ea
c00149da:	e8 85 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00149df:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00149e6:	e8 90 9f ff ff       	call   c000e97b <malloc>
c00149eb:	83 c4 0c             	add    esp,0xc
c00149ee:	89 c3                	mov    ebx,eax
c00149f0:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00149f6:	56                   	push   esi
c00149f7:	50                   	push   eax
c00149f8:	e8 15 37 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	85 db                	test   ebx,ebx
c0014a02:	75 3c                	jne    c0014a40 <Thr::loadDLL(char const*, bool)+0x84>
c0014a04:	89 f8                	mov    eax,edi
c0014a06:	84 c0                	test   al,al
c0014a08:	0f 84 f3 01 00 00    	je     c0014c01 <Thr::loadDLL(char const*, bool)+0x245>
c0014a0e:	55                   	push   ebp
c0014a0f:	55                   	push   ebp
c0014a10:	68 fb 29 02 c0       	push   0xc00229fb
c0014a15:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014a19:	55                   	push   ebp
c0014a1a:	e8 21 bc fe ff       	call   c0000640 <strcpy>
c0014a1f:	58                   	pop    eax
c0014a20:	5a                   	pop    edx
c0014a21:	56                   	push   esi
c0014a22:	55                   	push   ebp
c0014a23:	e8 18 be fe ff       	call   c0000840 <strcat>
c0014a28:	59                   	pop    ecx
c0014a29:	58                   	pop    eax
c0014a2a:	68 12 2a 02 c0       	push   0xc0022a12
c0014a2f:	55                   	push   ebp
c0014a30:	e8 0b be fe ff       	call   c0000840 <strcat>
c0014a35:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a38:	e8 85 a2 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014a3d:	83 c4 10             	add    esp,0x10
c0014a40:	51                   	push   ecx
c0014a41:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a45:	50                   	push   eax
c0014a46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a4a:	50                   	push   eax
c0014a4b:	53                   	push   ebx
c0014a4c:	e8 e1 39 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0014a51:	83 c4 10             	add    esp,0x10
c0014a54:	89 c5                	mov    ebp,eax
c0014a56:	85 db                	test   ebx,ebx
c0014a58:	74 0c                	je     c0014a66 <Thr::loadDLL(char const*, bool)+0xaa>
c0014a5a:	83 ec 0c             	sub    esp,0xc
c0014a5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a5f:	53                   	push   ebx
c0014a60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a63:	83 c4 10             	add    esp,0x10
c0014a66:	83 ec 0c             	sub    esp,0xc
c0014a69:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014a6e:	50                   	push   eax
c0014a6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a77:	55                   	push   ebp
c0014a78:	68 14 2a 02 c0       	push   0xc0022a14
c0014a7d:	e8 e2 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a82:	83 c4 20             	add    esp,0x20
c0014a85:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014a8a:	75 0a                	jne    c0014a96 <Thr::loadDLL(char const*, bool)+0xda>
c0014a8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a90:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014a94:	75 3c                	jne    c0014ad2 <Thr::loadDLL(char const*, bool)+0x116>
c0014a96:	89 f8                	mov    eax,edi
c0014a98:	84 c0                	test   al,al
c0014a9a:	0f 84 49 01 00 00    	je     c0014be9 <Thr::loadDLL(char const*, bool)+0x22d>
c0014aa0:	51                   	push   ecx
c0014aa1:	51                   	push   ecx
c0014aa2:	68 35 2a 02 c0       	push   0xc0022a35
c0014aa7:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014aab:	53                   	push   ebx
c0014aac:	e8 8f bb fe ff       	call   c0000640 <strcpy>
c0014ab1:	5d                   	pop    ebp
c0014ab2:	58                   	pop    eax
c0014ab3:	56                   	push   esi
c0014ab4:	53                   	push   ebx
c0014ab5:	e8 86 bd fe ff       	call   c0000840 <strcat>
c0014aba:	58                   	pop    eax
c0014abb:	5a                   	pop    edx
c0014abc:	68 12 2a 02 c0       	push   0xc0022a12
c0014ac1:	53                   	push   ebx
c0014ac2:	e8 79 bd fe ff       	call   c0000840 <strcat>
c0014ac7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aca:	e8 f3 a1 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014acf:	83 c4 10             	add    esp,0x10
c0014ad2:	52                   	push   edx
c0014ad3:	6a 03                	push   0x3
c0014ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014add:	05 ff 0f 00 00       	add    eax,0xfff
c0014ae2:	83 d2 00             	adc    edx,0x0
c0014ae5:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ae9:	50                   	push   eax
c0014aea:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014af0:	e8 21 dd ff ff       	call   c0012816 <VAS::allocatePages(int, int)>
c0014af5:	59                   	pop    ecx
c0014af6:	89 c3                	mov    ebx,eax
c0014af8:	5d                   	pop    ebp
c0014af9:	50                   	push   eax
c0014afa:	68 5a 21 02 c0       	push   0xc002215a
c0014aff:	e8 60 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014b04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b07:	e8 64 ba fe ff       	call   c0000570 <strlen>
c0014b0c:	8b 2d e0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bee0
c0014b12:	40                   	inc    eax
c0014b13:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b16:	e8 60 9e ff ff       	call   c000e97b <malloc>
c0014b1b:	89 04 ad 00 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3d00],eax
c0014b22:	58                   	pop    eax
c0014b23:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b28:	5a                   	pop    edx
c0014b29:	56                   	push   esi
c0014b2a:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014b31:	e8 0a bb fe ff       	call   c0000640 <strcpy>
c0014b36:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014b3e:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014b45:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014b4b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b4f:	83 c4 0c             	add    esp,0xc
c0014b52:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014b59:	6a 01                	push   0x1
c0014b5b:	53                   	push   ebx
c0014b5c:	56                   	push   esi
c0014b5d:	e8 9e f6 ff ff       	call   c0014200 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	0f b6 c0             	movzx  eax,al
c0014b68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b6c:	85 c0                	test   eax,eax
c0014b6e:	0f 85 89 00 00 00    	jne    c0014bfd <Thr::loadDLL(char const*, bool)+0x241>
c0014b74:	89 f8                	mov    eax,edi
c0014b76:	84 c0                	test   al,al
c0014b78:	74 73                	je     c0014bed <Thr::loadDLL(char const*, bool)+0x231>
c0014b7a:	83 ec 0c             	sub    esp,0xc
c0014b7d:	68 4e 2a 02 c0       	push   0xc0022a4e
c0014b82:	e8 3b a1 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014b87:	83 c4 10             	add    esp,0x10
c0014b8a:	eb 61                	jmp    c0014bed <Thr::loadDLL(char const*, bool)+0x231>
c0014b8c:	50                   	push   eax
c0014b8d:	50                   	push   eax
c0014b8e:	89 e8                	mov    eax,ebp
c0014b90:	c1 e0 0c             	shl    eax,0xc
c0014b93:	01 d8                	add    eax,ebx
c0014b95:	50                   	push   eax
c0014b96:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b9c:	e8 77 d7 ff ff       	call   c0012318 <VAS::getPageTableEntry(unsigned long)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ba6:	a8 60                	test   al,0x60
c0014ba8:	75 11                	jne    c0014bbb <Thr::loadDLL(char const*, bool)+0x1ff>
c0014baa:	83 ec 0c             	sub    esp,0xc
c0014bad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014bb2:	50                   	push   eax
c0014bb3:	e8 95 a2 ff ff       	call   c000ee4d <Phys::freePage(unsigned long)>
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	45                   	inc    ebp
c0014bbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bc4:	05 ff 0f 00 00       	add    eax,0xfff
c0014bc9:	bf 00 00 00 00       	mov    edi,0x0
c0014bce:	83 d2 00             	adc    edx,0x0
c0014bd1:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014bd5:	c1 ea 0c             	shr    edx,0xc
c0014bd8:	39 c5                	cmp    ebp,eax
c0014bda:	89 d1                	mov    ecx,edx
c0014bdc:	89 f8                	mov    eax,edi
c0014bde:	19 c8                	sbb    eax,ecx
c0014be0:	72 aa                	jb     c0014b8c <Thr::loadDLL(char const*, bool)+0x1d0>
c0014be2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014be7:	75 18                	jne    c0014c01 <Thr::loadDLL(char const*, bool)+0x245>
c0014be9:	31 db                	xor    ebx,ebx
c0014beb:	eb 14                	jmp    c0014c01 <Thr::loadDLL(char const*, bool)+0x245>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	68 6d 2a 02 c0       	push   0xc0022a6d
c0014bf5:	e8 c8 a0 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	31 ed                	xor    ebp,ebp
c0014bff:	eb bb                	jmp    c0014bbc <Thr::loadDLL(char const*, bool)+0x200>
c0014c01:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014c07:	89 d8                	mov    eax,ebx
c0014c09:	5b                   	pop    ebx
c0014c0a:	5e                   	pop    esi
c0014c0b:	5f                   	pop    edi
c0014c0c:	5d                   	pop    ebp
c0014c0d:	c3                   	ret    

c0014c0e <Thr::executeDLL(unsigned long, void*)>:
c0014c0e:	56                   	push   esi
c0014c0f:	53                   	push   ebx
c0014c10:	52                   	push   edx
c0014c11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c19:	85 db                	test   ebx,ebx
c0014c1b:	75 10                	jne    c0014c2d <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014c1d:	83 ec 0c             	sub    esp,0xc
c0014c20:	68 89 2a 02 c0       	push   0xc0022a89
c0014c25:	e8 98 a0 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	50                   	push   eax
c0014c2e:	50                   	push   eax
c0014c2f:	53                   	push   ebx
c0014c30:	68 b3 2a 02 c0       	push   0xc0022ab3
c0014c35:	e8 2a 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014c3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c3e:	89 d8                	mov    eax,ebx
c0014c40:	83 c4 14             	add    esp,0x14
c0014c43:	5b                   	pop    ebx
c0014c44:	5e                   	pop    esi
c0014c45:	ff e0                	jmp    eax

c0014c47 <KeProcessExec(Process*, char const*)>:
c0014c47:	56                   	push   esi
c0014c48:	53                   	push   ebx
c0014c49:	83 ec 04             	sub    esp,0x4
c0014c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c50:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014c56:	85 f6                	test   esi,esi
c0014c58:	74 16                	je     c0014c70 <KeProcessExec(Process*, char const*)+0x29>
c0014c5a:	83 ec 0c             	sub    esp,0xc
c0014c5d:	56                   	push   esi
c0014c5e:	e8 47 d9 ff ff       	call   c00125aa <VAS::~VAS()>
c0014c63:	58                   	pop    eax
c0014c64:	5a                   	pop    edx
c0014c65:	6a 14                	push   0x14
c0014c67:	56                   	push   esi
c0014c68:	e8 93 7a ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0014c6d:	83 c4 10             	add    esp,0x10
c0014c70:	83 ec 0c             	sub    esp,0xc
c0014c73:	6a 14                	push   0x14
c0014c75:	e8 01 9d ff ff       	call   c000e97b <malloc>
c0014c7a:	89 c6                	mov    esi,eax
c0014c7c:	58                   	pop    eax
c0014c7d:	5a                   	pop    edx
c0014c7e:	6a 00                	push   0x0
c0014c80:	56                   	push   esi
c0014c81:	e8 c4 dd ff ff       	call   c0012a4a <VAS::VAS(bool)>
c0014c86:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014c8c:	59                   	pop    ecx
c0014c8d:	5e                   	pop    esi
c0014c8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c92:	50                   	push   eax
c0014c93:	53                   	push   ebx
c0014c94:	e8 35 f0 ff ff       	call   c0013cce <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c99:	83 c4 14             	add    esp,0x14
c0014c9c:	31 c0                	xor    eax,eax
c0014c9e:	5b                   	pop    ebx
c0014c9f:	5e                   	pop    esi
c0014ca0:	c3                   	ret    
c0014ca1:	66 90                	xchg   ax,ax
c0014ca3:	90                   	nop

c0014ca4 <userModeEntryPoint(void*)>:
c0014ca4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0014cac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014cb1:	85 c0                	test   eax,eax
c0014cb3:	75 03                	jne    c0014cb8 <userModeEntryPoint(void*)+0x14>
c0014cb5:	fb                   	sti    
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	fb                   	sti    
c0014cb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014cc1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014cc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ccb:	e9 6f b5 fe ff       	jmp    c000023f <goToUsermode>

c0014cd0 <changeTSS>:
c0014cd0:	83 ec 14             	sub    esp,0x14
c0014cd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cd8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014cdb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014ce0:	c1 e2 15             	shl    edx,0x15
c0014ce3:	29 d0                	sub    eax,edx
c0014ce5:	50                   	push   eax
c0014ce6:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014ceb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cf1:	05 68 11 00 00       	add    eax,0x1168
c0014cf6:	50                   	push   eax
c0014cf7:	e8 f8 cb ff ff       	call   c00118f4 <TSS::setESP(unsigned long)>
c0014cfc:	83 c4 1c             	add    esp,0x1c
c0014cff:	c3                   	ret    

c0014d00 <switchToThread(ThreadControlBlock*)>:
c0014d00:	57                   	push   edi
c0014d01:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014d07:	56                   	push   esi
c0014d08:	85 c9                	test   ecx,ecx
c0014d0a:	53                   	push   ebx
c0014d0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014d0f:	0f 85 8b 00 00 00    	jne    c0014da0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014d15:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014d19:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014d1f:	74 7b                	je     c0014d9c <switchToThread(ThreadControlBlock*)+0x9c>
c0014d21:	b8 00 04 00 00       	mov    eax,0x400
c0014d26:	29 d0                	sub    eax,edx
c0014d28:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d2b:	d1 f8                	sar    eax,1
c0014d2d:	01 d0                	add    eax,edx
c0014d2f:	90                   	nop
c0014d30:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d33:	e8 a8 37 00 00       	call   c00184e0 <HalQueryPerformanceCounter()>
c0014d38:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014d3d:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014d43:	89 c6                	mov    esi,eax
c0014d45:	89 d7                	mov    edi,edx
c0014d47:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014d4d:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014d52:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014d58:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014d5e:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014d64:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d6a:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014d70:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014d73:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014d76:	01 c6                	add    esi,eax
c0014d78:	11 d7                	adc    edi,edx
c0014d7a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014d7d:	83 ec 0c             	sub    esp,0xc
c0014d80:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014d83:	53                   	push   ebx
c0014d84:	e8 ee b4 fe ff       	call   c0000277 <switchToThreadASM>
c0014d89:	0f 20 c0             	mov    eax,cr0
c0014d8c:	83 c8 08             	or     eax,0x8
c0014d8f:	0f 22 c0             	mov    cr0,eax
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	5b                   	pop    ebx
c0014d96:	5e                   	pop    esi
c0014d97:	5f                   	pop    edi
c0014d98:	c3                   	ret    
c0014d99:	8d 76 00             	lea    esi,[esi+0x0]
c0014d9c:	31 c0                	xor    eax,eax
c0014d9e:	eb 90                	jmp    c0014d30 <switchToThread(ThreadControlBlock*)+0x30>
c0014da0:	5b                   	pop    ebx
c0014da1:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014dab:	5e                   	pop    esi
c0014dac:	5f                   	pop    edi
c0014dad:	c3                   	ret    
c0014dae:	66 90                	xchg   ax,ax

c0014db0 <Process::addArgs(char**)>:
c0014db0:	57                   	push   edi
c0014db1:	56                   	push   esi
c0014db2:	53                   	push   ebx
c0014db3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014db7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014dbb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014dc5:	85 ff                	test   edi,edi
c0014dc7:	74 4f                	je     c0014e18 <Process::addArgs(char**)+0x68>
c0014dc9:	8b 07                	mov    eax,DWORD PTR [edi]
c0014dcb:	85 c0                	test   eax,eax
c0014dcd:	74 49                	je     c0014e18 <Process::addArgs(char**)+0x68>
c0014dcf:	31 db                	xor    ebx,ebx
c0014dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd4:	83 ec 0c             	sub    esp,0xc
c0014dd7:	50                   	push   eax
c0014dd8:	e8 93 b7 fe ff       	call   c0000570 <strlen>
c0014ddd:	83 c0 01             	add    eax,0x1
c0014de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0014de3:	e8 93 9b ff ff       	call   c000e97b <malloc>
c0014de8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014def:	5a                   	pop    edx
c0014df0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014df3:	59                   	pop    ecx
c0014df4:	83 c3 01             	add    ebx,0x1
c0014df7:	52                   	push   edx
c0014df8:	50                   	push   eax
c0014df9:	e8 42 b8 fe ff       	call   c0000640 <strcpy>
c0014dfe:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014e04:	83 c4 10             	add    esp,0x10
c0014e07:	83 c1 01             	add    ecx,0x1
c0014e0a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014e10:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014e13:	85 c0                	test   eax,eax
c0014e15:	75 bd                	jne    c0014dd4 <Process::addArgs(char**)+0x24>
c0014e17:	90                   	nop
c0014e18:	5b                   	pop    ebx
c0014e19:	5e                   	pop    esi
c0014e1a:	5f                   	pop    edi
c0014e1b:	c3                   	ret    

c0014e1c <Process::Process(char const*, Process*, char**)>:
c0014e1c:	56                   	push   esi
c0014e1d:	53                   	push   ebx
c0014e1e:	83 ec 14             	sub    esp,0x14
c0014e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e25:	05 0c 02 00 00       	add    eax,0x20c
c0014e2a:	bb 07 00 00 00       	mov    ebx,0x7
c0014e2f:	89 c6                	mov    esi,eax
c0014e31:	8d 76 00             	lea    esi,[esi+0x0]
c0014e34:	85 db                	test   ebx,ebx
c0014e36:	78 14                	js     c0014e4c <Process::Process(char const*, Process*, char**)+0x30>
c0014e38:	83 ec 0c             	sub    esp,0xc
c0014e3b:	56                   	push   esi
c0014e3c:	e8 8f b5 00 00       	call   c00203d0 <ThreadControlBlock::ThreadControlBlock()>
c0014e41:	83 c4 10             	add    esp,0x10
c0014e44:	83 c6 5f             	add    esi,0x5f
c0014e47:	83 eb 01             	sub    ebx,0x1
c0014e4a:	eb e8                	jmp    c0014e34 <Process::Process(char const*, Process*, char**)+0x18>
c0014e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e62:	83 ec 0c             	sub    esp,0xc
c0014e65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e69:	e8 92 8d ff ff       	call   c000dc00 <KeNewProcessEnv(Process*)>
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	89 c2                	mov    edx,eax
c0014e73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014e7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014e8a:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c0014e8f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e92:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c0014e98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e9c:	89 02                	mov    DWORD PTR [edx],eax
c0014e9e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014ea6:	83 ec 0c             	sub    esp,0xc
c0014ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ead:	e8 c9 9a ff ff       	call   c000e97b <malloc>
c0014eb2:	83 c4 10             	add    esp,0x10
c0014eb5:	89 c3                	mov    ebx,eax
c0014eb7:	83 ec 08             	sub    esp,0x8
c0014eba:	6a 00                	push   0x0
c0014ebc:	53                   	push   ebx
c0014ebd:	e8 88 db ff ff       	call   c0012a4a <VAS::VAS(bool)>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ee5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014eeb:	e8 73 ae ff ff       	call   c000fd63 <KeInitSignals()>
c0014ef0:	89 c2                	mov    edx,eax
c0014ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f06:	85 c0                	test   eax,eax
c0014f08:	74 42                	je     c0014f4c <Process::Process(char const*, Process*, char**)+0x130>
c0014f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f0e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f14:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f1e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f38:	05 0c 01 00 00       	add    eax,0x10c
c0014f3d:	83 ec 08             	sub    esp,0x8
c0014f40:	52                   	push   edx
c0014f41:	50                   	push   eax
c0014f42:	e8 f9 b6 fe ff       	call   c0000640 <strcpy>
c0014f47:	83 c4 10             	add    esp,0x10
c0014f4a:	eb 64                	jmp    c0014fb0 <Process::Process(char const*, Process*, char**)+0x194>
c0014f4c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f54:	83 ec 0c             	sub    esp,0xc
c0014f57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f5b:	e8 1b 9a ff ff       	call   c000e97b <malloc>
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	89 c3                	mov    ebx,eax
c0014f65:	83 ec 08             	sub    esp,0x8
c0014f68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f6c:	53                   	push   ebx
c0014f6d:	e8 94 c6 ff ff       	call   c0011606 <VgaText::VgaText(char const*)>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f79:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f89:	83 ec 0c             	sub    esp,0xc
c0014f8c:	50                   	push   eax
c0014f8d:	e8 12 bf ff ff       	call   c0010ea4 <addToTerminalCycle(VgaText*)>
c0014f92:	83 c4 10             	add    esp,0x10
c0014f95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f99:	05 0c 01 00 00       	add    eax,0x10c
c0014f9e:	83 ec 08             	sub    esp,0x8
c0014fa1:	68 d2 2a 02 c0       	push   0xc0022ad2
c0014fa6:	50                   	push   eax
c0014fa7:	e8 94 b6 fe ff       	call   c0000640 <strcpy>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	90                   	nop
c0014fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fb4:	83 c0 0c             	add    eax,0xc
c0014fb7:	83 ec 08             	sub    esp,0x8
c0014fba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fbe:	50                   	push   eax
c0014fbf:	e8 7c b6 fe ff       	call   c0000640 <strcpy>
c0014fc4:	83 c4 10             	add    esp,0x10
c0014fc7:	83 ec 08             	sub    esp,0x8
c0014fca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014fce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fd2:	e8 d9 fd ff ff       	call   c0014db0 <Process::addArgs(char**)>
c0014fd7:	83 c4 10             	add    esp,0x10
c0014fda:	83 ec 08             	sub    esp,0x8
c0014fdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fe5:	e8 e4 ec ff ff       	call   c0013cce <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014fea:	83 c4 10             	add    esp,0x10
c0014fed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ff1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ff5:	83 f0 01             	xor    eax,0x1
c0014ff8:	88 c2                	mov    dl,al
c0014ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ffe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015004:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015009:	83 ec 04             	sub    esp,0x4
c001500c:	50                   	push   eax
c001500d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015011:	68 2c 2b 02 c0       	push   0xc0022b2c
c0015016:	e8 49 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001501b:	83 c4 10             	add    esp,0x10
c001501e:	90                   	nop
c001501f:	83 c4 14             	add    esp,0x14
c0015022:	5b                   	pop    ebx
c0015023:	5e                   	pop    esi
c0015024:	c3                   	ret    
c0015025:	90                   	nop
c0015026:	66 90                	xchg   ax,ax

c0015028 <Process::Process(bool, char const*, Process*, char**)>:
c0015028:	56                   	push   esi
c0015029:	53                   	push   ebx
c001502a:	83 ec 24             	sub    esp,0x24
c001502d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015031:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015035:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015039:	05 0c 02 00 00       	add    eax,0x20c
c001503e:	bb 07 00 00 00       	mov    ebx,0x7
c0015043:	89 c6                	mov    esi,eax
c0015045:	8d 76 00             	lea    esi,[esi+0x0]
c0015048:	85 db                	test   ebx,ebx
c001504a:	78 14                	js     c0015060 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	56                   	push   esi
c0015050:	e8 7b b3 00 00       	call   c00203d0 <ThreadControlBlock::ThreadControlBlock()>
c0015055:	83 c4 10             	add    esp,0x10
c0015058:	83 c6 5f             	add    esi,0x5f
c001505b:	83 eb 01             	sub    ebx,0x1
c001505e:	eb e8                	jmp    c0015048 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015060:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015064:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001506b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001506f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015076:	83 ec 0c             	sub    esp,0xc
c0015079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001507d:	e8 7e 8b ff ff       	call   c000dc00 <KeNewProcessEnv(Process*)>
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	89 c2                	mov    edx,eax
c0015087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001508b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015091:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015095:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001509e:	a1 9c 42 02 c0       	mov    eax,ds:0xc002429c
c00150a3:	8d 50 01             	lea    edx,[eax+0x1]
c00150a6:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c00150ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00150b0:	89 02                	mov    DWORD PTR [edx],eax
c00150b2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00150ba:	83 ec 0c             	sub    esp,0xc
c00150bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150c1:	e8 b5 98 ff ff       	call   c000e97b <malloc>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	89 c3                	mov    ebx,eax
c00150cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00150d0:	83 ec 08             	sub    esp,0x8
c00150d3:	50                   	push   eax
c00150d4:	53                   	push   ebx
c00150d5:	e8 70 d9 ff ff       	call   c0012a4a <VAS::VAS(bool)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00150e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150eb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00150f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150f9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00150fd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015103:	e8 5b ac ff ff       	call   c000fd63 <KeInitSignals()>
c0015108:	89 c2                	mov    edx,eax
c001510a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001510e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015114:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015118:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001511e:	85 c0                	test   eax,eax
c0015120:	74 42                	je     c0015164 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015122:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015126:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001512c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015136:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001513c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015140:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015146:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001514c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015150:	05 0c 01 00 00       	add    eax,0x10c
c0015155:	83 ec 08             	sub    esp,0x8
c0015158:	52                   	push   edx
c0015159:	50                   	push   eax
c001515a:	e8 e1 b4 fe ff       	call   c0000640 <strcpy>
c001515f:	83 c4 10             	add    esp,0x10
c0015162:	eb 64                	jmp    c00151c8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015164:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001516c:	83 ec 0c             	sub    esp,0xc
c001516f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015173:	e8 03 98 ff ff       	call   c000e97b <malloc>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	89 c3                	mov    ebx,eax
c001517d:	83 ec 08             	sub    esp,0x8
c0015180:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015184:	53                   	push   ebx
c0015185:	e8 7c c4 ff ff       	call   c0011606 <VgaText::VgaText(char const*)>
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015191:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001519b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a1:	83 ec 0c             	sub    esp,0xc
c00151a4:	50                   	push   eax
c00151a5:	e8 fa bc ff ff       	call   c0010ea4 <addToTerminalCycle(VgaText*)>
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151b1:	05 0c 01 00 00       	add    eax,0x10c
c00151b6:	83 ec 08             	sub    esp,0x8
c00151b9:	68 d2 2a 02 c0       	push   0xc0022ad2
c00151be:	50                   	push   eax
c00151bf:	e8 7c b4 fe ff       	call   c0000640 <strcpy>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	90                   	nop
c00151c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151cc:	83 c0 0c             	add    eax,0xc
c00151cf:	83 ec 08             	sub    esp,0x8
c00151d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151d6:	50                   	push   eax
c00151d7:	e8 64 b4 fe ff       	call   c0000640 <strcpy>
c00151dc:	83 c4 10             	add    esp,0x10
c00151df:	83 ec 08             	sub    esp,0x8
c00151e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00151e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ea:	e8 c1 fb ff ff       	call   c0014db0 <Process::addArgs(char**)>
c00151ef:	83 c4 10             	add    esp,0x10
c00151f2:	90                   	nop
c00151f3:	83 c4 24             	add    esp,0x24
c00151f6:	5b                   	pop    ebx
c00151f7:	5e                   	pop    esi
c00151f8:	c3                   	ret    
c00151f9:	8d 76 00             	lea    esi,[esi+0x0]

c00151fc <taskStartupFunction>:
c00151fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015201:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015204:	c3                   	ret    
c0015205:	8d 76 00             	lea    esi,[esi+0x0]

c0015208 <KeDisablePreemption()>:
c0015208:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c001520d:	85 c0                	test   eax,eax
c001520f:	75 13                	jne    c0015224 <KeDisablePreemption()+0x1c>
c0015211:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c0015217:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c001521e:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015224:	83 c0 01             	add    eax,0x1
c0015227:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001522c:	c3                   	ret    
c001522d:	8d 76 00             	lea    esi,[esi+0x0]

c0015230 <KeRestorePreemption()>:
c0015230:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015235:	83 e8 01             	sub    eax,0x1
c0015238:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c001523d:	75 0d                	jne    c001524c <KeRestorePreemption()+0x1c>
c001523f:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015244:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	c3                   	ret    
c001524d:	90                   	nop
c001524e:	66 90                	xchg   ax,ax

c0015250 <Process::createThread(void (*)(void*), void*, int)>:
c0015250:	57                   	push   edi
c0015251:	31 c9                	xor    ecx,ecx
c0015253:	56                   	push   esi
c0015254:	53                   	push   ebx
c0015255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015259:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015260:	89 f2                	mov    edx,esi
c0015262:	66 90                	xchg   ax,ax
c0015264:	0f b7 c2             	movzx  eax,dx
c0015267:	80 e2 01             	and    dl,0x1
c001526a:	74 14                	je     c0015280 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001526c:	d1 f8                	sar    eax,1
c001526e:	83 c1 01             	add    ecx,0x1
c0015271:	89 c2                	mov    edx,eax
c0015273:	83 f9 10             	cmp    ecx,0x10
c0015276:	75 ec                	jne    c0015264 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015278:	31 db                	xor    ebx,ebx
c001527a:	89 d8                	mov    eax,ebx
c001527c:	5b                   	pop    ebx
c001527d:	5e                   	pop    esi
c001527e:	5f                   	pop    edi
c001527f:	c3                   	ret    
c0015280:	b8 01 00 00 00       	mov    eax,0x1
c0015285:	d3 e0                	shl    eax,cl
c0015287:	09 c6                	or     esi,eax
c0015289:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001528c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015293:	01 c0                	add    eax,eax
c0015295:	01 c8                	add    eax,ecx
c0015297:	8d 04 80             	lea    eax,[eax+eax*4]
c001529a:	01 d8                	add    eax,ebx
c001529c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00152a3:	75 0b                	jne    c00152b0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00152a5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00152af:	90                   	nop
c00152b0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00152bc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00152bf:	01 c0                	add    eax,eax
c00152c1:	01 c8                	add    eax,ecx
c00152c3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00152c6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00152c9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00152cf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00152d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152d9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00152df:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00152e5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00152eb:	89 ca                	mov    edx,ecx
c00152ed:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00152f4:	f7 da                	neg    edx
c00152f6:	c1 e2 15             	shl    edx,0x15
c00152f9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00152ff:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015305:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015309:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015313:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015319:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001531d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015323:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001532d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015337:	68 00 01 00 00       	push   0x100
c001533c:	e8 3a 96 ff ff       	call   c000e97b <malloc>
c0015341:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015344:	58                   	pop    eax
c0015345:	5a                   	pop    edx
c0015346:	53                   	push   ebx
c0015347:	68 cc c6 02 c0       	push   0xc002c6cc
c001534c:	e8 2b ac 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	89 d8                	mov    eax,ebx
c0015356:	5b                   	pop    ebx
c0015357:	5e                   	pop    esi
c0015358:	5f                   	pop    edi
c0015359:	c3                   	ret    
c001535a:	66 90                	xchg   ax,ax

c001535c <Process::createUserThread()>:
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	68 80 00 00 00       	push   0x80
c0015364:	6a 00                	push   0x0
c0015366:	68 a4 4c 01 c0       	push   0xc0014ca4
c001536b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001536f:	50                   	push   eax
c0015370:	e8 db fe ff ff       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c0015375:	83 c4 1c             	add    esp,0x1c
c0015378:	c3                   	ret    
c0015379:	8d 76 00             	lea    esi,[esi+0x0]

c001537c <setupMultitasking(void (*)())>:
c001537c:	56                   	push   esi
c001537d:	53                   	push   ebx
c001537e:	83 ec 04             	sub    esp,0x4
c0015381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015385:	eb 11                	jmp    c0015398 <setupMultitasking(void (*)())+0x1c>
c0015387:	90                   	nop
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015390:	e8 2b ab 00 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	83 ec 0c             	sub    esp,0xc
c001539b:	68 cc c6 02 c0       	push   0xc002c6cc
c00153a0:	e8 f7 aa 00 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	84 c0                	test   al,al
c00153aa:	74 dc                	je     c0015388 <setupMultitasking(void (*)())+0xc>
c00153ac:	83 ec 0c             	sub    esp,0xc
c00153af:	68 24 07 00 00       	push   0x724
c00153b4:	e8 c2 95 ff ff       	call   c000e97b <malloc>
c00153b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153c0:	89 c3                	mov    ebx,eax
c00153c2:	6a 00                	push   0x0
c00153c4:	68 d6 2a 02 c0       	push   0xc0022ad6
c00153c9:	6a 01                	push   0x1
c00153cb:	50                   	push   eax
c00153cc:	e8 57 fc ff ff       	call   c0015028 <Process::Process(bool, char const*, Process*, char**)>
c00153d1:	83 c4 14             	add    esp,0x14
c00153d4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00153da:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c00153e0:	50                   	push   eax
c00153e1:	e8 13 bd ff ff       	call   c00110f9 <setActiveTerminal(VgaText*)>
c00153e6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00153ed:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00153f7:	83 c8 01             	or     eax,0x1
c00153fa:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015401:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015407:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001540a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015414:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001541a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015420:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001542a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015434:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001543e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015444:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001544e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015454:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001545e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015465:	e8 11 95 ff ff       	call   c000e97b <malloc>
c001546a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015470:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015476:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001547c:	5a                   	pop    edx
c001547d:	59                   	pop    ecx
c001547e:	68 d2 2a 02 c0       	push   0xc0022ad2
c0015483:	50                   	push   eax
c0015484:	e8 b7 b1 fe ff       	call   c0000640 <strcpy>
c0015489:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015490:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015494:	83 c4 14             	add    esp,0x14
c0015497:	5b                   	pop    ebx
c0015498:	5e                   	pop    esi
c0015499:	e9 cb ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001549e:	66 90                	xchg   ax,ax

c00154a0 <schedule()>:
c00154a0:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00154a6:	85 d2                	test   edx,edx
c00154a8:	74 0e                	je     c00154b8 <schedule()+0x18>
c00154aa:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c00154b4:	c3                   	ret    
c00154b5:	8d 76 00             	lea    esi,[esi+0x0]
c00154b8:	53                   	push   ebx
c00154b9:	83 ec 14             	sub    esp,0x14
c00154bc:	68 cc c6 02 c0       	push   0xc002c6cc
c00154c1:	e8 d6 a9 00 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154c6:	83 c4 10             	add    esp,0x10
c00154c9:	84 c0                	test   al,al
c00154cb:	75 3f                	jne    c001550c <schedule()+0x6c>
c00154cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00154d5:	83 fa 01             	cmp    edx,0x1
c00154d8:	74 3a                	je     c0015514 <schedule()+0x74>
c00154da:	66 90                	xchg   ax,ax
c00154dc:	83 ec 0c             	sub    esp,0xc
c00154df:	68 cc c6 02 c0       	push   0xc002c6cc
c00154e4:	e8 cf a9 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00154f0:	89 c3                	mov    ebx,eax
c00154f2:	e8 c9 a9 00 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154f7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00154fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015501:	e8 fa f7 ff ff       	call   c0014d00 <switchToThread(ThreadControlBlock*)>
c0015506:	83 c4 10             	add    esp,0x10
c0015509:	8d 76 00             	lea    esi,[esi+0x0]
c001550c:	83 c4 08             	add    esp,0x8
c001550f:	5b                   	pop    ebx
c0015510:	c3                   	ret    
c0015511:	8d 76 00             	lea    esi,[esi+0x0]
c0015514:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001551b:	83 ec 08             	sub    esp,0x8
c001551e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015523:	50                   	push   eax
c0015524:	68 cc c6 02 c0       	push   0xc002c6cc
c0015529:	e8 4e aa 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	eb a9                	jmp    c00154dc <schedule()+0x3c>
c0015533:	90                   	nop

c0015534 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001553c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015540:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015543:	e8 58 ff ff ff       	call   c00154a0 <schedule()>
c0015548:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015550:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015555:	85 c0                	test   eax,eax
c0015557:	75 03                	jne    c001555c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015559:	fb                   	sti    
c001555a:	66 90                	xchg   ax,ax
c001555c:	83 c4 0c             	add    esp,0xc
c001555f:	c3                   	ret    

c0015560 <blockTask(TaskState)>:
c0015560:	83 ec 0c             	sub    esp,0xc
c0015563:	fa                   	cli    
c0015564:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015569:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001556d:	83 c0 01             	add    eax,0x1
c0015570:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015575:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001557a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001557d:	e8 1e ff ff ff       	call   c00154a0 <schedule()>
c0015582:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001558a:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015590:	85 d2                	test   edx,edx
c0015592:	75 04                	jne    c0015598 <blockTask(TaskState)+0x38>
c0015594:	fb                   	sti    
c0015595:	8d 76 00             	lea    esi,[esi+0x0]
c0015598:	83 c4 0c             	add    esp,0xc
c001559b:	c3                   	ret    

c001559c <waitTask(int, int*, int)>:
c001559c:	83 ec 18             	sub    esp,0x18
c001559f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00155a8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00155ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00155b7:	6a 07                	push   0x7
c00155b9:	e8 a2 ff ff ff       	call   c0015560 <blockTask(TaskState)>
c00155be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155c9:	85 d2                	test   edx,edx
c00155cb:	74 0b                	je     c00155d8 <waitTask(int, int*, int)+0x3c>
c00155cd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155d0:	89 02                	mov    DWORD PTR [edx],eax
c00155d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d7:	90                   	nop
c00155d8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00155db:	83 c4 0c             	add    esp,0xc
c00155de:	c3                   	ret    
c00155df:	90                   	nop

c00155e0 <milliTenthSleepUntil(unsigned int)>:
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155e7:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c00155ed:	76 05                	jbe    c00155f4 <milliTenthSleepUntil(unsigned int)+0x14>
c00155ef:	90                   	nop
c00155f0:	83 c4 0c             	add    esp,0xc
c00155f3:	c3                   	ret    
c00155f4:	fa                   	cli    
c00155f5:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c00155fb:	83 ec 08             	sub    esp,0x8
c00155fe:	83 c1 01             	add    ecx,0x1
c0015601:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c0015607:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001560d:	83 c2 01             	add    edx,0x1
c0015610:	89 15 ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,edx
c0015616:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001561c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001561f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015625:	51                   	push   ecx
c0015626:	68 c0 c6 02 c0       	push   0xc002c6c0
c001562b:	e8 4c a9 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015630:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015637:	e8 24 ff ff ff       	call   c0015560 <blockTask(TaskState)>
c001563c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	83 e8 01             	sub    eax,0x1
c0015647:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c001564c:	85 c0                	test   eax,eax
c001564e:	75 0c                	jne    c001565c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015650:	8b 15 a8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a8
c0015656:	85 d2                	test   edx,edx
c0015658:	75 1a                	jne    c0015674 <milliTenthSleepUntil(unsigned int)+0x94>
c001565a:	66 90                	xchg   ax,ax
c001565c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015664:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015669:	85 c0                	test   eax,eax
c001566b:	75 83                	jne    c00155f0 <milliTenthSleepUntil(unsigned int)+0x10>
c001566d:	fb                   	sti    
c001566e:	83 c4 0c             	add    esp,0xc
c0015671:	c3                   	ret    
c0015672:	66 90                	xchg   ax,ax
c0015674:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c001567e:	e8 1d fe ff ff       	call   c00154a0 <schedule()>
c0015683:	eb d7                	jmp    c001565c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015685:	8d 76 00             	lea    esi,[esi+0x0]

c0015688 <milliTenthSleep(unsigned int)>:
c0015688:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001568c:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c0015691:	01 c2                	add    edx,eax
c0015693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015697:	e9 44 ff ff ff       	jmp    c00155e0 <milliTenthSleepUntil(unsigned int)>

c001569c <sleep(unsigned int)>:
c001569c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a0:	8d 04 80             	lea    eax,[eax+eax*4]
c00156a3:	8d 04 80             	lea    eax,[eax+eax*4]
c00156a6:	8d 04 80             	lea    eax,[eax+eax*4]
c00156a9:	8d 04 80             	lea    eax,[eax+eax*4]
c00156ac:	c1 e0 04             	shl    eax,0x4
c00156af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156b3:	eb d3                	jmp    c0015688 <milliTenthSleep(unsigned int)>
c00156b5:	8d 76 00             	lea    esi,[esi+0x0]

c00156b8 <taskReturned>:
c00156b8:	83 ec 18             	sub    esp,0x18
c00156bb:	68 58 2b 02 c0       	push   0xc0022b58
c00156c0:	e8 fd 95 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	83 ec 0c             	sub    esp,0xc
c00156cb:	6a 02                	push   0x2
c00156cd:	e8 8e fe ff ff       	call   c0015560 <blockTask(TaskState)>
c00156d2:	fa                   	cli    
c00156d3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156d8:	83 c0 01             	add    eax,0x1
c00156db:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156e0:	e8 bb fd ff ff       	call   c00154a0 <schedule()>
c00156e5:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00156ed:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	85 d2                	test   edx,edx
c00156f8:	75 ce                	jne    c00156c8 <taskReturned+0x10>
c00156fa:	fb                   	sti    
c00156fb:	eb cb                	jmp    c00156c8 <taskReturned+0x10>
c00156fd:	8d 76 00             	lea    esi,[esi+0x0]

c0015700 <Thr::processFromPID(int)>:
c0015700:	57                   	push   edi
c0015701:	56                   	push   esi
c0015702:	53                   	push   ebx
c0015703:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015707:	fa                   	cli    
c0015708:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001570d:	83 ec 0c             	sub    esp,0xc
c0015710:	83 c0 01             	add    eax,0x1
c0015713:	68 cc c6 02 c0       	push   0xc002c6cc
c0015718:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001571d:	e8 96 a7 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015722:	83 c4 10             	add    esp,0x10
c0015725:	89 c7                	mov    edi,eax
c0015727:	eb 17                	jmp    c0015740 <Thr::processFromPID(int)+0x40>
c0015729:	8d 76 00             	lea    esi,[esi+0x0]
c001572c:	83 ec 0c             	sub    esp,0xc
c001572f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015734:	e8 7f a7 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015739:	83 c4 10             	add    esp,0x10
c001573c:	39 f8                	cmp    eax,edi
c001573e:	74 50                	je     c0015790 <Thr::processFromPID(int)+0x90>
c0015740:	83 ec 0c             	sub    esp,0xc
c0015743:	68 cc c6 02 c0       	push   0xc002c6cc
c0015748:	e8 6b a7 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001574d:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015754:	89 c3                	mov    ebx,eax
c0015756:	e8 65 a7 00 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001575b:	59                   	pop    ecx
c001575c:	58                   	pop    eax
c001575d:	53                   	push   ebx
c001575e:	68 cc c6 02 c0       	push   0xc002c6cc
c0015763:	e8 14 a8 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015768:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001576b:	83 c4 10             	add    esp,0x10
c001576e:	39 30                	cmp    DWORD PTR [eax],esi
c0015770:	75 ba                	jne    c001572c <Thr::processFromPID(int)+0x2c>
c0015772:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001577a:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015780:	85 d2                	test   edx,edx
c0015782:	74 08                	je     c001578c <Thr::processFromPID(int)+0x8c>
c0015784:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015787:	5b                   	pop    ebx
c0015788:	5e                   	pop    esi
c0015789:	5f                   	pop    edi
c001578a:	c3                   	ret    
c001578b:	90                   	nop
c001578c:	fb                   	sti    
c001578d:	eb f5                	jmp    c0015784 <Thr::processFromPID(int)+0x84>
c001578f:	90                   	nop
c0015790:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015798:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001579d:	85 c0                	test   eax,eax
c001579f:	75 07                	jne    c00157a8 <Thr::processFromPID(int)+0xa8>
c00157a1:	fb                   	sti    
c00157a2:	31 c0                	xor    eax,eax
c00157a4:	5b                   	pop    ebx
c00157a5:	5e                   	pop    esi
c00157a6:	5f                   	pop    edi
c00157a7:	c3                   	ret    
c00157a8:	5b                   	pop    ebx
c00157a9:	31 c0                	xor    eax,eax
c00157ab:	5e                   	pop    esi
c00157ac:	5f                   	pop    edi
c00157ad:	c3                   	ret    
c00157ae:	66 90                	xchg   ax,ax

c00157b0 <unblockTask(ThreadControlBlock*)>:
c00157b0:	53                   	push   ebx
c00157b1:	83 ec 08             	sub    esp,0x8
c00157b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00157b8:	fa                   	cli    
c00157b9:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00157bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157c2:	83 c2 01             	add    edx,0x1
c00157c5:	85 c0                	test   eax,eax
c00157c7:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00157cd:	74 6d                	je     c001583c <unblockTask(ThreadControlBlock*)+0x8c>
c00157cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157d2:	83 f8 01             	cmp    eax,0x1
c00157d5:	74 39                	je     c0015810 <unblockTask(ThreadControlBlock*)+0x60>
c00157d7:	83 ec 0c             	sub    esp,0xc
c00157da:	68 cc c6 02 c0       	push   0xc002c6cc
c00157df:	e8 d4 a6 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157e4:	83 c4 10             	add    esp,0x10
c00157e7:	85 c0                	test   eax,eax
c00157e9:	75 1d                	jne    c0015808 <unblockTask(ThreadControlBlock*)+0x58>
c00157eb:	eb 63                	jmp    c0015850 <unblockTask(ThreadControlBlock*)+0xa0>
c00157ed:	8d 76 00             	lea    esi,[esi+0x0]
c00157f0:	83 ec 08             	sub    esp,0x8
c00157f3:	50                   	push   eax
c00157f4:	68 cc c6 02 c0       	push   0xc002c6cc
c00157f9:	e8 c6 ab 00 00       	call   c00203c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	85 c0                	test   eax,eax
c0015803:	74 4b                	je     c0015850 <unblockTask(ThreadControlBlock*)+0xa0>
c0015805:	8d 76 00             	lea    esi,[esi+0x0]
c0015808:	39 c3                	cmp    ebx,eax
c001580a:	75 e4                	jne    c00157f0 <unblockTask(ThreadControlBlock*)+0x40>
c001580c:	eb 12                	jmp    c0015820 <unblockTask(ThreadControlBlock*)+0x70>
c001580e:	66 90                	xchg   ax,ax
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	68 f4 2a 02 c0       	push   0xc0022af4
c0015818:	e8 47 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001581d:	83 c4 10             	add    esp,0x10
c0015820:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015828:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001582d:	85 c0                	test   eax,eax
c001582f:	75 03                	jne    c0015834 <unblockTask(ThreadControlBlock*)+0x84>
c0015831:	fb                   	sti    
c0015832:	66 90                	xchg   ax,ax
c0015834:	83 c4 08             	add    esp,0x8
c0015837:	5b                   	pop    ebx
c0015838:	c3                   	ret    
c0015839:	8d 76 00             	lea    esi,[esi+0x0]
c001583c:	83 ec 0c             	sub    esp,0xc
c001583f:	68 dd 2a 02 c0       	push   0xc0022add
c0015844:	e8 1b 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015849:	83 c4 10             	add    esp,0x10
c001584c:	eb d2                	jmp    c0015820 <unblockTask(ThreadControlBlock*)+0x70>
c001584e:	66 90                	xchg   ax,ax
c0015850:	83 ec 08             	sub    esp,0x8
c0015853:	53                   	push   ebx
c0015854:	68 cc c6 02 c0       	push   0xc002c6cc
c0015859:	e8 1e a7 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001585e:	83 c4 10             	add    esp,0x10
c0015861:	eb bd                	jmp    c0015820 <unblockTask(ThreadControlBlock*)+0x70>
c0015863:	90                   	nop

c0015864 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015864:	55                   	push   ebp
c0015865:	57                   	push   edi
c0015866:	56                   	push   esi
c0015867:	53                   	push   ebx
c0015868:	83 ec 1c             	sub    esp,0x1c
c001586b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001586f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015872:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015878:	85 ed                	test   ebp,ebp
c001587a:	7e 28                	jle    c00158a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001587c:	31 f6                	xor    esi,esi
c001587e:	66 90                	xchg   ax,ax
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001588a:	83 c6 01             	add    esi,0x1
c001588d:	57                   	push   edi
c001588e:	e8 f8 90 ff ff       	call   c000e98b <free>
c0015893:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015896:	83 c4 10             	add    esp,0x10
c0015899:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001589f:	7f df                	jg     c0015880 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00158a1:	8d 76 00             	lea    esi,[esi+0x0]
c00158a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00158ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00158b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00158b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00158b9:	d3 c0                	rol    eax,cl
c00158bb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00158c2:	21 c8                	and    eax,ecx
c00158c4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00158cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158ce:	89 f7                	mov    edi,esi
c00158d0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00158d8:	0f 85 72 01 00 00    	jne    c0015a50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00158de:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00158e4:	85 ed                	test   ebp,ebp
c00158e6:	74 1c                	je     c0015904 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00158e8:	83 ec 0c             	sub    esp,0xc
c00158eb:	55                   	push   ebp
c00158ec:	e8 2b 82 ff ff       	call   c000db1c <EnvVarContainer::~EnvVarContainer()>
c00158f1:	59                   	pop    ecx
c00158f2:	5e                   	pop    esi
c00158f3:	6a 0c                	push   0xc
c00158f5:	55                   	push   ebp
c00158f6:	e8 05 6e ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00158fb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	89 f7                	mov    edi,esi
c0015903:	90                   	nop
c0015904:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001590a:	85 c0                	test   eax,eax
c001590c:	0f 84 b2 00 00 00    	je     c00159c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015912:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015915:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015919:	31 c9                	xor    ecx,ecx
c001591b:	eb 17                	jmp    c0015934 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001591d:	8d 76 00             	lea    esi,[esi+0x0]
c0015920:	83 c1 01             	add    ecx,0x1
c0015923:	83 f9 10             	cmp    ecx,0x10
c0015926:	0f 84 98 00 00 00    	je     c00159c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001592c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015932:	66 90                	xchg   ax,ax
c0015934:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001593b:	d3 fa                	sar    edx,cl
c001593d:	80 e2 01             	and    dl,0x1
c0015940:	74 de                	je     c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015942:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015945:	01 d2                	add    edx,edx
c0015947:	01 ca                	add    edx,ecx
c0015949:	8d 14 92             	lea    edx,[edx+edx*4]
c001594c:	01 d0                	add    eax,edx
c001594e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015954:	83 fd 07             	cmp    ebp,0x7
c0015957:	75 c7                	jne    c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015959:	05 40 02 00 00       	add    eax,0x240
c001595e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015961:	83 fd ff             	cmp    ebp,0xffffffff
c0015964:	0f 8c ee 00 00 00    	jl     c0015a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001596a:	0f 84 ac 01 00 00    	je     c0015b1c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015970:	85 ed                	test   ebp,ebp
c0015972:	0f 84 90 01 00 00    	je     c0015b08 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015978:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001597a:	75 a4                	jne    c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001597c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015982:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015986:	01 d0                	add    eax,edx
c0015988:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001598c:	83 ec 0c             	sub    esp,0xc
c001598f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015995:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015998:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001599e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00159a5:	50                   	push   eax
c00159a6:	e8 05 fe ff ff       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00159b5:	89 f7                	mov    edi,esi
c00159b7:	83 c1 01             	add    ecx,0x1
c00159ba:	83 f9 10             	cmp    ecx,0x10
c00159bd:	0f 85 69 ff ff ff    	jne    c001592c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00159c3:	90                   	nop
c00159c4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00159ca:	85 c0                	test   eax,eax
c00159cc:	74 62                	je     c0015a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159ce:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00159d4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00159da:	74 54                	je     c0015a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	68 cc c6 02 c0       	push   0xc002c6cc
c00159e4:	e8 cf a4 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159e9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159f0:	89 c7                	mov    edi,eax
c00159f2:	e8 a5 a4 00 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	84 c0                	test   al,al
c00159fc:	0f 84 ce 00 00 00    	je     c0015ad0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015a02:	66 90                	xchg   ax,ax
c0015a04:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a07:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a0d:	85 d2                	test   edx,edx
c0015a0f:	74 0f                	je     c0015a20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015a11:	83 ec 0c             	sub    esp,0xc
c0015a14:	8b 02                	mov    eax,DWORD PTR [edx]
c0015a16:	52                   	push   edx
c0015a17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a1a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a1d:	83 c4 10             	add    esp,0x10
c0015a20:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015a2a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015a30:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015a36:	85 db                	test   ebx,ebx
c0015a38:	74 16                	je     c0015a50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a3a:	83 ec 0c             	sub    esp,0xc
c0015a3d:	53                   	push   ebx
c0015a3e:	e8 67 cb ff ff       	call   c00125aa <VAS::~VAS()>
c0015a43:	58                   	pop    eax
c0015a44:	5a                   	pop    edx
c0015a45:	6a 14                	push   0x14
c0015a47:	53                   	push   ebx
c0015a48:	e8 b3 6c ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0015a4d:	83 c4 10             	add    esp,0x10
c0015a50:	83 c4 1c             	add    esp,0x1c
c0015a53:	5b                   	pop    ebx
c0015a54:	5e                   	pop    esi
c0015a55:	5f                   	pop    edi
c0015a56:	5d                   	pop    ebp
c0015a57:	c3                   	ret    
c0015a58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	68 8c 2b 02 c0       	push   0xc0022b8c
c0015a64:	e8 59 92 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0015a69:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a6c:	83 c4 10             	add    esp,0x10
c0015a6f:	89 f7                	mov    edi,esi
c0015a71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a75:	e9 a6 fe ff ff       	jmp    c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a7a:	66 90                	xchg   ax,ax
c0015a7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a82:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015a88:	75 1e                	jne    c0015aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	68 f4 2b 02 c0       	push   0xc0022bf4
c0015a92:	e8 cd 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015a97:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015a9e:	e8 bd fa ff ff       	call   c0015560 <blockTask(TaskState)>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	66 90                	xchg   ax,ax
c0015aa8:	83 ec 08             	sub    esp,0x8
c0015aab:	56                   	push   esi
c0015aac:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ab1:	e8 c6 a4 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ab6:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015abd:	e8 f6 a3 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ac2:	83 c4 10             	add    esp,0x10
c0015ac5:	39 f8                	cmp    eax,edi
c0015ac7:	0f 84 37 ff ff ff    	je     c0015a04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015acd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ad8:	e8 db a3 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015add:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015ae4:	89 c6                	mov    esi,eax
c0015ae6:	e8 d5 a3 00 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	39 f3                	cmp    ebx,esi
c0015af0:	74 b6                	je     c0015aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015af2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015af5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015af8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015afe:	75 a8                	jne    c0015aa8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015b00:	e9 77 ff ff ff       	jmp    c0015a7c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015b05:	8d 76 00             	lea    esi,[esi+0x0]
c0015b08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b0c:	83 ec 0c             	sub    esp,0xc
c0015b0f:	68 c0 2b 02 c0       	push   0xc0022bc0
c0015b14:	e9 4b ff ff ff       	jmp    c0015a64 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015b19:	8d 76 00             	lea    esi,[esi+0x0]
c0015b1c:	8b 36                	mov    esi,DWORD PTR [esi]
c0015b1e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b22:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015b25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b28:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015b2e:	01 d7                	add    edi,edx
c0015b30:	89 f8                	mov    eax,edi
c0015b32:	e9 51 fe ff ff       	jmp    c0015988 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015b37:	90                   	nop

c0015b38 <cleanerTaskFunction(void*)>:
c0015b38:	53                   	push   ebx
c0015b39:	83 ec 08             	sub    esp,0x8
c0015b3c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b44:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b49:	85 c0                	test   eax,eax
c0015b4b:	75 03                	jne    c0015b50 <cleanerTaskFunction(void*)+0x18>
c0015b4d:	fb                   	sti    
c0015b4e:	66 90                	xchg   ax,ax
c0015b50:	fa                   	cli    
c0015b51:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b56:	83 c0 01             	add    eax,0x1
c0015b59:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015b60:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b65:	0f 85 c9 00 00 00    	jne    c0015c34 <cleanerTaskFunction(void*)+0xfc>
c0015b6b:	83 ec 0c             	sub    esp,0xc
c0015b6e:	6a 02                	push   0x2
c0015b70:	e8 bf f9 ff ff       	call   c0015534 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015b7f:	fa                   	cli    
c0015b80:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015b86:	8b 1d ac c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6ac
c0015b8c:	83 c1 01             	add    ecx,0x1
c0015b8f:	83 c3 01             	add    ebx,0x1
c0015b92:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015b98:	89 1d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ebx
c0015b9e:	fa                   	cli    
c0015b9f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ba4:	83 c0 01             	add    eax,0x1
c0015ba7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bac:	eb 2a                	jmp    c0015bd8 <cleanerTaskFunction(void*)+0xa0>
c0015bae:	66 90                	xchg   ax,ax
c0015bb0:	83 ec 0c             	sub    esp,0xc
c0015bb3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015bb8:	e8 fb a2 00 00       	call   c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bbd:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015bc4:	89 c3                	mov    ebx,eax
c0015bc6:	e8 f5 a2 00 00       	call   c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015bcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bce:	e8 91 fc ff ff       	call   c0015864 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015bd3:	83 c4 10             	add    esp,0x10
c0015bd6:	66 90                	xchg   ax,ax
c0015bd8:	83 ec 0c             	sub    esp,0xc
c0015bdb:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015be0:	e8 b7 a2 00 00       	call   c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015be5:	83 c4 10             	add    esp,0x10
c0015be8:	84 c0                	test   al,al
c0015bea:	74 c4                	je     c0015bb0 <cleanerTaskFunction(void*)+0x78>
c0015bec:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015bf4:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015bfa:	85 d2                	test   edx,edx
c0015bfc:	75 02                	jne    c0015c00 <cleanerTaskFunction(void*)+0xc8>
c0015bfe:	fb                   	sti    
c0015bff:	90                   	nop
c0015c00:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c05:	83 e8 01             	sub    eax,0x1
c0015c08:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c0d:	0f 85 29 ff ff ff    	jne    c0015b3c <cleanerTaskFunction(void*)+0x4>
c0015c13:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015c18:	85 c0                	test   eax,eax
c0015c1a:	0f 84 1c ff ff ff    	je     c0015b3c <cleanerTaskFunction(void*)+0x4>
c0015c20:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c2a:	e8 71 f8 ff ff       	call   c00154a0 <schedule()>
c0015c2f:	e9 08 ff ff ff       	jmp    c0015b3c <cleanerTaskFunction(void*)+0x4>
c0015c34:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c41:	85 c0                	test   eax,eax
c0015c43:	0f 85 2f ff ff ff    	jne    c0015b78 <cleanerTaskFunction(void*)+0x40>
c0015c49:	fb                   	sti    
c0015c4a:	e9 29 ff ff ff       	jmp    c0015b78 <cleanerTaskFunction(void*)+0x40>
c0015c4f:	90                   	nop

c0015c50 <terminateTask(int)>:
c0015c50:	83 ec 14             	sub    esp,0x14
c0015c53:	fa                   	cli    
c0015c54:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c59:	83 c0 01             	add    eax,0x1
c0015c5c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c61:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c66:	83 c0 01             	add    eax,0x1
c0015c69:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015c6e:	fa                   	cli    
c0015c6f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c78:	83 c0 01             	add    eax,0x1
c0015c7b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c85:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015c90:	50                   	push   eax
c0015c91:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015c96:	e8 e1 a2 00 00       	call   c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015caa:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015caf:	85 c0                	test   eax,eax
c0015cb1:	0f 84 81 00 00 00    	je     c0015d38 <terminateTask(int)+0xe8>
c0015cb7:	83 ec 0c             	sub    esp,0xc
c0015cba:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015cc1:	50                   	push   eax
c0015cc2:	e8 e9 fa ff ff       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c0015cc7:	83 c4 10             	add    esp,0x10
c0015cca:	66 90                	xchg   ax,ax
c0015ccc:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015cd4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015cd9:	85 c0                	test   eax,eax
c0015cdb:	75 03                	jne    c0015ce0 <terminateTask(int)+0x90>
c0015cdd:	fb                   	sti    
c0015cde:	66 90                	xchg   ax,ax
c0015ce0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015ce5:	83 e8 01             	sub    eax,0x1
c0015ce8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015ced:	75 09                	jne    c0015cf8 <terminateTask(int)+0xa8>
c0015cef:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015cf6:	75 54                	jne    c0015d4c <terminateTask(int)+0xfc>
c0015cf8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015d00:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015d06:	85 c9                	test   ecx,ecx
c0015d08:	75 06                	jne    c0015d10 <terminateTask(int)+0xc0>
c0015d0a:	66 90                	xchg   ax,ax
c0015d0c:	fb                   	sti    
c0015d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d10:	fa                   	cli    
c0015d11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015d16:	83 c0 01             	add    eax,0x1
c0015d19:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015d1e:	e8 7d f7 ff ff       	call   c00154a0 <schedule()>
c0015d23:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015d2b:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015d31:	85 d2                	test   edx,edx
c0015d33:	75 db                	jne    c0015d10 <terminateTask(int)+0xc0>
c0015d35:	eb d5                	jmp    c0015d0c <terminateTask(int)+0xbc>
c0015d37:	90                   	nop
c0015d38:	83 ec 0c             	sub    esp,0xc
c0015d3b:	68 0b 2b 02 c0       	push   0xc0022b0b
c0015d40:	e8 1f 12 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	eb 82                	jmp    c0015ccc <terminateTask(int)+0x7c>
c0015d4a:	66 90                	xchg   ax,ax
c0015d4c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015d56:	e8 45 f7 ff ff       	call   c00154a0 <schedule()>
c0015d5b:	eb 9b                	jmp    c0015cf8 <terminateTask(int)+0xa8>
c0015d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d60 <Thr::terminateFromIRQ(int)>:
c0015d60:	83 ec 18             	sub    esp,0x18
c0015d63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d67:	50                   	push   eax
c0015d68:	e8 e3 fe ff ff       	call   c0015c50 <terminateTask(int)>
c0015d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015d70 <__static_initialization_and_destruction_0(int, int)>:
c0015d70:	83 ec 0c             	sub    esp,0xc
c0015d73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015d78:	0f 85 8e 00 00 00    	jne    c0015e0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d7e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015d86:	0f 85 80 00 00 00    	jne    c0015e0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015d94:	e8 83 a6 00 00       	call   c002041c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d99:	83 c4 10             	add    esp,0x10
c0015d9c:	83 ec 04             	sub    esp,0x4
c0015d9f:	68 e0 3a 02 c0       	push   0xc0023ae0
c0015da4:	68 cc c6 02 c0       	push   0xc002c6cc
c0015da9:	68 cc 03 02 c0       	push   0xc00203cc
c0015dae:	e8 fd 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015db3:	83 c4 10             	add    esp,0x10
c0015db6:	83 ec 0c             	sub    esp,0xc
c0015db9:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015dbe:	e8 59 a6 00 00       	call   c002041c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	83 ec 04             	sub    esp,0x4
c0015dc9:	68 e0 3a 02 c0       	push   0xc0023ae0
c0015dce:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015dd3:	68 cc 03 02 c0       	push   0xc00203cc
c0015dd8:	e8 d3 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015de8:	e8 2f a6 00 00       	call   c002041c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ded:	83 c4 10             	add    esp,0x10
c0015df0:	83 ec 04             	sub    esp,0x4
c0015df3:	68 e0 3a 02 c0       	push   0xc0023ae0
c0015df8:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015dfd:	68 cc 03 02 c0       	push   0xc00203cc
c0015e02:	e8 a9 68 ff ff       	call   c000c6b0 <__cxa_atexit>
c0015e07:	83 c4 10             	add    esp,0x10
c0015e0a:	66 90                	xchg   ax,ax
c0015e0c:	90                   	nop
c0015e0d:	83 c4 0c             	add    esp,0xc
c0015e10:	c3                   	ret    
c0015e11:	8d 76 00             	lea    esi,[esi+0x0]

c0015e14 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	83 ec 08             	sub    esp,0x8
c0015e1a:	68 ff ff 00 00       	push   0xffff
c0015e1f:	6a 01                	push   0x1
c0015e21:	e8 4a ff ff ff       	call   c0015d70 <__static_initialization_and_destruction_0(int, int)>
c0015e26:	83 c4 10             	add    esp,0x10
c0015e29:	83 c4 0c             	add    esp,0xc
c0015e2c:	c3                   	ret    

c0015e2d <Vm::inbv(unsigned short)>:
c0015e2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e31:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e36:	75 06                	jne    c0015e3e <Vm::inbv(unsigned short)+0x11>
c0015e38:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015e3d:	c3                   	ret    
c0015e3e:	ec                   	in     al,dx
c0015e3f:	c3                   	ret    

c0015e40 <Vm::outbv(unsigned short, unsigned char)>:
c0015e40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e48:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015e4d:	75 25                	jne    c0015e74 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015e4f:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015e55:	8d 51 01             	lea    edx,[ecx+0x1]
c0015e58:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015e5e:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015e64:	83 fa 20             	cmp    edx,0x20
c0015e67:	75 0c                	jne    c0015e75 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015e69:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015e73:	c3                   	ret    
c0015e74:	ee                   	out    dx,al
c0015e75:	c3                   	ret    

c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015e76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015e7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015e80:	c1 e0 04             	shl    eax,0x4
c0015e83:	01 d0                	add    eax,edx
c0015e85:	c3                   	ret    

c0015e86 <Vm::getSegment(unsigned int)>:
c0015e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e8a:	c1 e8 10             	shr    eax,0x10
c0015e8d:	c3                   	ret    

c0015e8e <Vm::getOffset(unsigned int)>:
c0015e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e92:	c3                   	ret    

c0015e93 <Vm::mainloop2()>:
c0015e93:	83 ec 18             	sub    esp,0x18
c0015e96:	fa                   	cli    
c0015e97:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e9d:	6a 02                	push   0x2
c0015e9f:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015ea6:	e8 89 f6 ff ff       	call   c0015534 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015eb4:	52                   	push   edx
c0015eb5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015eb9:	52                   	push   edx
c0015eba:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015ebe:	52                   	push   edx
c0015ebf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ec3:	50                   	push   eax
c0015ec4:	e8 46 a3 fe ff       	call   c000020f <goToVM86>
c0015ec9:	83 c4 2c             	add    esp,0x2c
c0015ecc:	c3                   	ret    

c0015ecd <Vm::mainVm8086Loop(void*)>:
c0015ecd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015ed4:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015edb:	75 01                	jne    c0015ede <Vm::mainVm8086Loop(void*)+0x11>
c0015edd:	fb                   	sti    
c0015ede:	eb b3                	jmp    c0015e93 <Vm::mainloop2()>

c0015ee0 <Vm::mainloop3(unsigned long)>:
c0015ee0:	83 ec 18             	sub    esp,0x18
c0015ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ee7:	fa                   	cli    
c0015ee8:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015eee:	6a 02                	push   0x2
c0015ef0:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015ef7:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015efc:	e8 33 f6 ff ff       	call   c0015534 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015f01:	83 c4 1c             	add    esp,0x1c
c0015f04:	eb 8d                	jmp    c0015e93 <Vm::mainloop2()>

c0015f06 <Vm::initialise8086()>:
c0015f06:	83 ec 0c             	sub    esp,0xc
c0015f09:	68 80 00 00 00       	push   0x80
c0015f0e:	6a 00                	push   0x0
c0015f10:	68 cd 5e 01 c0       	push   0xc0015ecd
c0015f15:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f1b:	e8 30 f3 ff ff       	call   c0015250 <Process::createThread(void (*)(void*), void*, int)>
c0015f20:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015f27:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015f2c:	68 10 01 00 00       	push   0x110
c0015f31:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015f36:	6a 00                	push   0x0
c0015f38:	6a 00                	push   0x0
c0015f3a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015f40:	e8 b7 c9 ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015f45:	83 c4 2c             	add    esp,0x2c
c0015f48:	c3                   	ret    

c0015f49 <Vm::resetConventionalMemory8086()>:
c0015f49:	c3                   	ret    

c0015f4a <Vm::finish8086()>:
c0015f4a:	53                   	push   ebx
c0015f4b:	83 ec 08             	sub    esp,0x8
c0015f4e:	fa                   	cli    
c0015f4f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f55:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015f5c:	75 18                	jne    c0015f76 <Vm::finish8086()+0x2c>
c0015f5e:	e8 3d f5 ff ff       	call   c00154a0 <schedule()>
c0015f63:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015f6a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015f71:	75 db                	jne    c0015f4e <Vm::finish8086()+0x4>
c0015f73:	fb                   	sti    
c0015f74:	eb d8                	jmp    c0015f4e <Vm::finish8086()+0x4>
c0015f76:	83 ec 0c             	sub    esp,0xc
c0015f79:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015f7f:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015f85:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015f8c:	e8 1f f8 ff ff       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c0015f91:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015f98:	83 c4 10             	add    esp,0x10
c0015f9b:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015fa2:	75 01                	jne    c0015fa5 <Vm::finish8086()+0x5b>
c0015fa4:	fb                   	sti    
c0015fa5:	89 d8                	mov    eax,ebx
c0015fa7:	83 c4 08             	add    esp,0x8
c0015faa:	5b                   	pop    ebx
c0015fab:	c3                   	ret    

c0015fac <Vm::getOutput8086(unsigned char*)>:
c0015fac:	57                   	push   edi
c0015fad:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015fb3:	56                   	push   esi
c0015fb4:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015fb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015fbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fbf:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015fc4:	5e                   	pop    esi
c0015fc5:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015fcf:	5f                   	pop    edi
c0015fd0:	c3                   	ret    

c0015fd1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015fd1:	55                   	push   ebp
c0015fd2:	57                   	push   edi
c0015fd3:	56                   	push   esi
c0015fd4:	53                   	push   ebx
c0015fd5:	83 ec 2c             	sub    esp,0x2c
c0015fd8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015fdc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015fe0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015fe4:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015fe8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fec:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015ff3:	75 5d                	jne    c0016052 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015ff5:	83 ec 0c             	sub    esp,0xc
c0015ff8:	68 14 01 00 00       	push   0x114
c0015ffd:	e8 79 89 ff ff       	call   c000e97b <malloc>
c0016002:	83 c4 0c             	add    esp,0xc
c0016005:	89 c7                	mov    edi,eax
c0016007:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001600d:	68 1c 2c 02 c0       	push   0xc0022c1c
c0016012:	50                   	push   eax
c0016013:	e8 fa 20 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016018:	58                   	pop    eax
c0016019:	5a                   	pop    edx
c001601a:	6a 12                	push   0x12
c001601c:	57                   	push   edi
c001601d:	e8 0e 21 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0016022:	59                   	pop    ecx
c0016023:	8b 07                	mov    eax,DWORD PTR [edi]
c0016025:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016029:	51                   	push   ecx
c001602a:	6a 00                	push   0x0
c001602c:	6a 00                	push   0x0
c001602e:	68 00 00 11 00       	push   0x110000
c0016033:	57                   	push   edi
c0016034:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016037:	83 c4 14             	add    esp,0x14
c001603a:	57                   	push   edi
c001603b:	e8 4e 21 ff ff       	call   c000818e <File::close()>
c0016040:	8b 07                	mov    eax,DWORD PTR [edi]
c0016042:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016045:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016048:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	fa                   	cli    
c0016053:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016059:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0016060:	75 18                	jne    c001607a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016062:	e8 39 f4 ff ff       	call   c00154a0 <schedule()>
c0016067:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001606e:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016075:	75 db                	jne    c0016052 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016077:	fb                   	sti    
c0016078:	eb d8                	jmp    c0016052 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001607a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001607e:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0016083:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c001608d:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016091:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016095:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016099:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001609d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00160a1:	0f b7 f6             	movzx  esi,si
c00160a4:	0f b7 db             	movzx  ebx,bx
c00160a7:	50                   	push   eax
c00160a8:	6a 20                	push   0x20
c00160aa:	6a 00                	push   0x0
c00160ac:	68 20 c7 02 c0       	push   0xc002c720
c00160b1:	e8 3a a4 fe ff       	call   c00004f0 <memset>
c00160b6:	5a                   	pop    edx
c00160b7:	59                   	pop    ecx
c00160b8:	56                   	push   esi
c00160b9:	53                   	push   ebx
c00160ba:	e8 b7 fd ff ff       	call   c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>
c00160bf:	83 c4 10             	add    esp,0x10
c00160c2:	89 c7                	mov    edi,eax
c00160c4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00160c8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00160cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00160ce:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00160d5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00160dc:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00160e3:	75 01                	jne    c00160e6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c00160e5:	fb                   	sti    
c00160e6:	83 ec 0c             	sub    esp,0xc
c00160e9:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00160ef:	e8 bc f6 ff ff       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c00160f4:	83 c4 3c             	add    esp,0x3c
c00160f7:	b0 01                	mov    al,0x1
c00160f9:	5b                   	pop    ebx
c00160fa:	5e                   	pop    esi
c00160fb:	5f                   	pop    edi
c00160fc:	5d                   	pop    ebp
c00160fd:	c3                   	ret    

c00160fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00160fe:	55                   	push   ebp
c00160ff:	57                   	push   edi
c0016100:	56                   	push   esi
c0016101:	53                   	push   ebx
c0016102:	83 ec 2c             	sub    esp,0x2c
c0016105:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016109:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001610d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016111:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016115:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016119:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0016120:	75 5d                	jne    c001617f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016122:	83 ec 0c             	sub    esp,0xc
c0016125:	68 14 01 00 00       	push   0x114
c001612a:	e8 4c 88 ff ff       	call   c000e97b <malloc>
c001612f:	83 c4 0c             	add    esp,0xc
c0016132:	89 c6                	mov    esi,eax
c0016134:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001613a:	68 1c 2c 02 c0       	push   0xc0022c1c
c001613f:	50                   	push   eax
c0016140:	e8 cd 1f ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016145:	58                   	pop    eax
c0016146:	5a                   	pop    edx
c0016147:	6a 12                	push   0x12
c0016149:	56                   	push   esi
c001614a:	e8 e1 1f ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001614f:	59                   	pop    ecx
c0016150:	8b 06                	mov    eax,DWORD PTR [esi]
c0016152:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016156:	52                   	push   edx
c0016157:	6a 00                	push   0x0
c0016159:	6a 00                	push   0x0
c001615b:	68 00 00 11 00       	push   0x110000
c0016160:	56                   	push   esi
c0016161:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016164:	83 c4 14             	add    esp,0x14
c0016167:	56                   	push   esi
c0016168:	e8 21 20 ff ff       	call   c000818e <File::close()>
c001616d:	8b 06                	mov    eax,DWORD PTR [esi]
c001616f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016172:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016175:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001617c:	83 c4 10             	add    esp,0x10
c001617f:	50                   	push   eax
c0016180:	50                   	push   eax
c0016181:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016185:	68 37 2c 02 c0       	push   0xc0022c37
c001618a:	e8 d5 0d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001618f:	83 c4 10             	add    esp,0x10
c0016192:	fa                   	cli    
c0016193:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016199:	0f b6 35 09 c7 02 c0 	movzx  esi,BYTE PTR ds:0xc002c709
c00161a0:	89 f0                	mov    eax,esi
c00161a2:	84 c0                	test   al,al
c00161a4:	75 18                	jne    c00161be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c00161a6:	e8 f5 f2 ff ff       	call   c00154a0 <schedule()>
c00161ab:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00161b2:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161b9:	75 d7                	jne    c0016192 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00161bb:	fb                   	sti    
c00161bc:	eb d4                	jmp    c0016192 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00161be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161c2:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00161c7:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00161d1:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c00161d5:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c00161d9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00161dd:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c00161e1:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161e5:	50                   	push   eax
c00161e6:	6a 20                	push   0x20
c00161e8:	6a 00                	push   0x0
c00161ea:	68 20 c7 02 c0       	push   0xc002c720
c00161ef:	e8 fc a2 fe ff       	call   c00004f0 <memset>
c00161f4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00161fb:	e8 7b 87 ff ff       	call   c000e97b <malloc>
c0016200:	83 c4 0c             	add    esp,0xc
c0016203:	89 c3                	mov    ebx,eax
c0016205:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001620b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001620f:	50                   	push   eax
c0016210:	e8 fd 1e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	85 db                	test   ebx,ebx
c001621a:	75 0a                	jne    c0016226 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	68 59 2c 02 c0       	push   0xc0022c59
c0016224:	eb 2b                	jmp    c0016251 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0016226:	50                   	push   eax
c0016227:	8d 44 24 17          	lea    eax,[esp+0x17]
c001622b:	50                   	push   eax
c001622c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016230:	50                   	push   eax
c0016231:	53                   	push   ebx
c0016232:	e8 fb 21 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0016237:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001623b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016247:	74 28                	je     c0016271 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0016249:	83 ec 0c             	sub    esp,0xc
c001624c:	68 6d 2c 02 c0       	push   0xc0022c6d
c0016251:	e8 6c 8a ff ff       	call   c000ecc2 <KePanic(char const*)>
c0016256:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016267:	75 01                	jne    c001626a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016269:	fb                   	sti    
c001626a:	31 f6                	xor    esi,esi
c001626c:	e9 91 00 00 00       	jmp    c0016302 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016271:	51                   	push   ecx
c0016272:	51                   	push   ecx
c0016273:	6a 01                	push   0x1
c0016275:	53                   	push   ebx
c0016276:	e8 b5 1e ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	85 c0                	test   eax,eax
c0016280:	74 27                	je     c00162a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	68 86 2c 02 c0       	push   0xc0022c86
c001628a:	e8 33 8a ff ff       	call   c000ecc2 <KePanic(char const*)>
c001628f:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00162a0:	75 c8                	jne    c001626a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c00162a2:	fb                   	sti    
c00162a3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00162a7:	eb 59                	jmp    c0016302 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c00162a9:	0f b7 ff             	movzx  edi,di
c00162ac:	50                   	push   eax
c00162ad:	50                   	push   eax
c00162ae:	0f b7 c5             	movzx  eax,bp
c00162b1:	57                   	push   edi
c00162b2:	50                   	push   eax
c00162b3:	e8 be fb ff ff       	call   c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>
c00162b8:	5a                   	pop    edx
c00162b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00162bf:	51                   	push   ecx
c00162c0:	50                   	push   eax
c00162c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00162c9:	53                   	push   ebx
c00162ca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162cd:	83 c4 14             	add    esp,0x14
c00162d0:	53                   	push   ebx
c00162d1:	e8 b8 1e ff ff       	call   c000818e <File::close()>
c00162d6:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00162dd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00162ee:	75 01                	jne    c00162f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c00162f0:	fb                   	sti    
c00162f1:	83 ec 0c             	sub    esp,0xc
c00162f4:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00162fa:	e8 b1 f4 ff ff       	call   c00157b0 <unblockTask(ThreadControlBlock*)>
c00162ff:	83 c4 10             	add    esp,0x10
c0016302:	83 c4 2c             	add    esp,0x2c
c0016305:	89 f0                	mov    eax,esi
c0016307:	5b                   	pop    ebx
c0016308:	5e                   	pop    esi
c0016309:	5f                   	pop    edi
c001630a:	5d                   	pop    ebp
c001630b:	c3                   	ret    

c001630c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001630c:	57                   	push   edi
c001630d:	56                   	push   esi
c001630e:	53                   	push   ebx
c001630f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016317:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001631b:	83 e8 06             	sub    eax,0x6
c001631e:	0f b7 c0             	movzx  eax,ax
c0016321:	50                   	push   eax
c0016322:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016327:	50                   	push   eax
c0016328:	e8 49 fb ff ff       	call   c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>
c001632d:	5a                   	pop    edx
c001632e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016331:	59                   	pop    ecx
c0016332:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016335:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016338:	81 e2 ff ff 00 00    	and    edx,0xffff
c001633e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016341:	8d 56 02             	lea    edx,[esi+0x2]
c0016344:	66 89 10             	mov    WORD PTR [eax],dx
c0016347:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001634b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001634f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016352:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016356:	0f b6 f1             	movzx  esi,cl
c0016359:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001635d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016363:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016367:	0f b6 d5             	movzx  edx,ch
c001636a:	74 0a                	je     c0016376 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c001636c:	c1 e2 08             	shl    edx,0x8
c001636f:	09 f2                	or     edx,esi
c0016371:	80 ce 02             	or     dh,0x2
c0016374:	eb 08                	jmp    c001637e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016376:	c1 e2 08             	shl    edx,0x8
c0016379:	09 f2                	or     edx,esi
c001637b:	80 e6 fd             	and    dh,0xfd
c001637e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016387:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001638b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016393:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016396:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001639e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00163a1:	5b                   	pop    ebx
c00163a2:	5e                   	pop    esi
c00163a3:	5f                   	pop    edi
c00163a4:	c3                   	ret    

c00163a5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00163a5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163aa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163af:	c1 e0 04             	shl    eax,0x4
c00163b2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00163b5:	c3                   	ret    

c00163b6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00163b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163c0:	c1 e0 04             	shl    eax,0x4
c00163c3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00163c7:	c3                   	ret    

c00163c8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00163c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163d2:	c1 e0 04             	shl    eax,0x4
c00163d5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00163d8:	c3                   	ret    

c00163d9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00163d9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163de:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163e3:	c1 e0 04             	shl    eax,0x4
c00163e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163ea:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00163ed:	c3                   	ret    

c00163ee <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00163ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00163f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00163f8:	c1 e0 04             	shl    eax,0x4
c00163fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00163ff:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016403:	c3                   	ret    

c0016404 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016404:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016409:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001640e:	c1 e0 04             	shl    eax,0x4
c0016411:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016415:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016418:	c3                   	ret    

c0016419 <Vm::faultHandler(regs*)>:
c0016419:	55                   	push   ebp
c001641a:	57                   	push   edi
c001641b:	56                   	push   esi
c001641c:	53                   	push   ebx
c001641d:	83 ec 2c             	sub    esp,0x2c
c0016420:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016424:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016427:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001642b:	0f b7 f8             	movzx  edi,ax
c001642e:	52                   	push   edx
c001642f:	0f b7 c0             	movzx  eax,ax
c0016432:	50                   	push   eax
c0016433:	e8 3e fa ff ff       	call   c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>
c0016438:	5a                   	pop    edx
c0016439:	59                   	pop    ecx
c001643a:	89 c1                	mov    ecx,eax
c001643c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001643f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016443:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016448:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001644c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001644f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016453:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016458:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001645c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016460:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016464:	e8 0d fa ff ff       	call   c0015e76 <Vm::realToLinear(unsigned short, unsigned short)>
c0016469:	5e                   	pop    esi
c001646a:	be 06 00 00 00       	mov    esi,0x6
c001646f:	5d                   	pop    ebp
c0016470:	31 ed                	xor    ebp,ebp
c0016472:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016477:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001647a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016480:	0f 84 74 02 00 00    	je     c00166fa <Vm::faultHandler(regs*)+0x2e1>
c0016486:	0f 87 94 00 00 00    	ja     c0016520 <Vm::faultHandler(regs*)+0x107>
c001648c:	83 fa 66             	cmp    edx,0x66
c001648f:	0f 84 e2 01 00 00    	je     c0016677 <Vm::faultHandler(regs*)+0x25e>
c0016495:	77 47                	ja     c00164de <Vm::faultHandler(regs*)+0xc5>
c0016497:	83 fa 36             	cmp    edx,0x36
c001649a:	0f 84 ca 01 00 00    	je     c001666a <Vm::faultHandler(regs*)+0x251>
c00164a0:	77 1a                	ja     c00164bc <Vm::faultHandler(regs*)+0xa3>
c00164a2:	83 fa 26             	cmp    edx,0x26
c00164a5:	0f 84 98 01 00 00    	je     c0016643 <Vm::faultHandler(regs*)+0x22a>
c00164ab:	83 fa 2e             	cmp    edx,0x2e
c00164ae:	0f 85 21 06 00 00    	jne    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c00164b4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164b7:	31 f6                	xor    esi,esi
c00164b9:	41                   	inc    ecx
c00164ba:	eb bb                	jmp    c0016477 <Vm::faultHandler(regs*)+0x5e>
c00164bc:	83 fa 64             	cmp    edx,0x64
c00164bf:	0f 84 8b 01 00 00    	je     c0016650 <Vm::faultHandler(regs*)+0x237>
c00164c5:	0f 87 92 01 00 00    	ja     c001665d <Vm::faultHandler(regs*)+0x244>
c00164cb:	83 fa 3e             	cmp    edx,0x3e
c00164ce:	0f 85 01 06 00 00    	jne    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c00164d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00164d7:	be 01 00 00 00       	mov    esi,0x1
c00164dc:	eb db                	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c00164de:	83 fa 6d             	cmp    edx,0x6d
c00164e1:	0f 84 34 03 00 00    	je     c001681b <Vm::faultHandler(regs*)+0x402>
c00164e7:	77 17                	ja     c0016500 <Vm::faultHandler(regs*)+0xe7>
c00164e9:	83 fa 67             	cmp    edx,0x67
c00164ec:	0f 84 92 01 00 00    	je     c0016684 <Vm::faultHandler(regs*)+0x26b>
c00164f2:	83 fa 6c             	cmp    edx,0x6c
c00164f5:	0f 84 b1 02 00 00    	je     c00167ac <Vm::faultHandler(regs*)+0x393>
c00164fb:	e9 d5 05 00 00       	jmp    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c0016500:	83 fa 6f             	cmp    edx,0x6f
c0016503:	0f 84 3d 04 00 00    	je     c0016946 <Vm::faultHandler(regs*)+0x52d>
c0016509:	0f 82 9f 03 00 00    	jb     c00168ae <Vm::faultHandler(regs*)+0x495>
c001650f:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016515:	0f 84 76 01 00 00    	je     c0016691 <Vm::faultHandler(regs*)+0x278>
c001651b:	e9 b5 05 00 00       	jmp    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c0016520:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016526:	0f 84 51 05 00 00    	je     c0016a7d <Vm::faultHandler(regs*)+0x664>
c001652c:	0f 87 a9 00 00 00    	ja     c00165db <Vm::faultHandler(regs*)+0x1c2>
c0016532:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016538:	0f 84 d0 04 00 00    	je     c0016a0e <Vm::faultHandler(regs*)+0x5f5>
c001653e:	77 78                	ja     c00165b8 <Vm::faultHandler(regs*)+0x19f>
c0016540:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016546:	0f 84 0e 02 00 00    	je     c001675a <Vm::faultHandler(regs*)+0x341>
c001654c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016552:	0f 85 7d 05 00 00    	jne    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c0016558:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001655c:	89 d1                	mov    ecx,edx
c001655e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016561:	c1 e1 08             	shl    ecx,0x8
c0016564:	09 ca                	or     edx,ecx
c0016566:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016569:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001656d:	89 d1                	mov    ecx,edx
c001656f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016573:	c1 e1 08             	shl    ecx,0x8
c0016576:	09 ca                	or     edx,ecx
c0016578:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001657b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001657f:	89 d1                	mov    ecx,edx
c0016581:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016585:	c1 e1 08             	shl    ecx,0x8
c0016588:	09 ca                	or     edx,ecx
c001658a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016590:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016593:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016597:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001659d:	d1 e8                	shr    eax,1
c001659f:	83 e0 01             	and    eax,0x1
c00165a2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00165a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00165a8:	83 c0 06             	add    eax,0x6
c00165ab:	25 ff ff 00 00       	and    eax,0xffff
c00165b0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00165b3:	e9 19 05 00 00       	jmp    c0016ad1 <Vm::faultHandler(regs*)+0x6b8>
c00165b8:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00165be:	0f 84 8f 04 00 00    	je     c0016a53 <Vm::faultHandler(regs*)+0x63a>
c00165c4:	0f 82 60 04 00 00    	jb     c0016a2a <Vm::faultHandler(regs*)+0x611>
c00165ca:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00165d0:	0f 84 94 04 00 00    	je     c0016a6a <Vm::faultHandler(regs*)+0x651>
c00165d6:	e9 fa 04 00 00       	jmp    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c00165db:	81 fa ef 00 00 00    	cmp    edx,0xef
c00165e1:	0f 84 d7 04 00 00    	je     c0016abe <Vm::faultHandler(regs*)+0x6a5>
c00165e7:	77 2e                	ja     c0016617 <Vm::faultHandler(regs*)+0x1fe>
c00165e9:	81 fa ed 00 00 00    	cmp    edx,0xed
c00165ef:	0f 84 a4 04 00 00    	je     c0016a99 <Vm::faultHandler(regs*)+0x680>
c00165f5:	81 fa ee 00 00 00    	cmp    edx,0xee
c00165fb:	0f 85 d4 04 00 00    	jne    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c0016601:	50                   	push   eax
c0016602:	50                   	push   eax
c0016603:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016607:	50                   	push   eax
c0016608:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001660c:	50                   	push   eax
c001660d:	e8 2e f8 ff ff       	call   c0015e40 <Vm::outbv(unsigned short, unsigned char)>
c0016612:	e9 9f 04 00 00       	jmp    c0016ab6 <Vm::faultHandler(regs*)+0x69d>
c0016617:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001661d:	0f 84 6d 01 00 00    	je     c0016790 <Vm::faultHandler(regs*)+0x377>
c0016623:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016629:	0f 84 6f 01 00 00    	je     c001679e <Vm::faultHandler(regs*)+0x385>
c001662f:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016635:	0f 85 9a 04 00 00    	jne    c0016ad5 <Vm::faultHandler(regs*)+0x6bc>
c001663b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001663e:	e9 76 fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c0016643:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016646:	be 02 00 00 00       	mov    esi,0x2
c001664b:	e9 69 fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c0016650:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016653:	be 03 00 00 00       	mov    esi,0x3
c0016658:	e9 5c fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c001665d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016660:	be 04 00 00 00       	mov    esi,0x4
c0016665:	e9 4f fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c001666a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001666d:	be 05 00 00 00       	mov    esi,0x5
c0016672:	e9 42 fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c0016677:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001667a:	bd 01 00 00 00       	mov    ebp,0x1
c001667f:	e9 35 fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c0016684:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016687:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001668c:	e9 28 fe ff ff       	jmp    c00164b9 <Vm::faultHandler(regs*)+0xa0>
c0016691:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016694:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016698:	83 e5 01             	and    ebp,0x1
c001669b:	74 30                	je     c00166cd <Vm::faultHandler(regs*)+0x2b4>
c001669d:	83 e9 04             	sub    ecx,0x4
c00166a0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00166a6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166ac:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166af:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166b8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166bc:	0f 84 0c 04 00 00    	je     c0016ace <Vm::faultHandler(regs*)+0x6b5>
c00166c2:	80 ce 02             	or     dh,0x2
c00166c5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00166c8:	e9 01 04 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c00166cd:	83 e9 02             	sub    ecx,0x2
c00166d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00166d6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00166d9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00166e3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00166e7:	74 05                	je     c00166ee <Vm::faultHandler(regs*)+0x2d5>
c00166e9:	80 ce 02             	or     dh,0x2
c00166ec:	eb 03                	jmp    c00166f1 <Vm::faultHandler(regs*)+0x2d8>
c00166ee:	80 e6 fd             	and    dh,0xfd
c00166f1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00166f5:	e9 d4 03 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c00166fa:	83 e5 01             	and    ebp,0x1
c00166fd:	74 2a                	je     c0016729 <Vm::faultHandler(regs*)+0x310>
c00166ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0016701:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016707:	81 ca 00 02 02 00    	or     edx,0x20200
c001670d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016710:	8b 00                	mov    eax,DWORD PTR [eax]
c0016712:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016718:	c1 e8 09             	shr    eax,0x9
c001671b:	83 e0 01             	and    eax,0x1
c001671e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016721:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016724:	83 c0 04             	add    eax,0x4
c0016727:	eb 24                	jmp    c001674d <Vm::faultHandler(regs*)+0x334>
c0016729:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001672c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016732:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016735:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016738:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001673e:	c1 e8 09             	shr    eax,0x9
c0016741:	83 e0 01             	and    eax,0x1
c0016744:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016747:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001674a:	83 c0 02             	add    eax,0x2
c001674d:	25 ff ff 00 00       	and    eax,0xffff
c0016752:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016755:	e9 74 03 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c001675a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001675e:	3d ee 00 00 00       	cmp    eax,0xee
c0016763:	75 10                	jne    c0016775 <Vm::faultHandler(regs*)+0x35c>
c0016765:	83 ec 0c             	sub    esp,0xc
c0016768:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001676b:	e8 70 f7 ff ff       	call   c0015ee0 <Vm::mainloop3(unsigned long)>
c0016770:	e9 44 03 00 00       	jmp    c0016ab9 <Vm::faultHandler(regs*)+0x6a0>
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001677c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016780:	51                   	push   ecx
c0016781:	50                   	push   eax
c0016782:	53                   	push   ebx
c0016783:	e8 84 fb ff ff       	call   c001630c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016788:	83 c4 20             	add    esp,0x20
c001678b:	e9 41 03 00 00       	jmp    c0016ad1 <Vm::faultHandler(regs*)+0x6b8>
c0016790:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016795:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016799:	e9 30 03 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c001679e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00167a7:	e9 22 03 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c00167ac:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167af:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167b4:	74 2b                	je     c00167e1 <Vm::faultHandler(regs*)+0x3c8>
c00167b6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00167bd:	76 22                	jbe    c00167e1 <Vm::faultHandler(regs*)+0x3c8>
c00167bf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167c3:	50                   	push   eax
c00167c4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167c8:	50                   	push   eax
c00167c9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167cd:	50                   	push   eax
c00167ce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167d2:	50                   	push   eax
c00167d3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167d7:	50                   	push   eax
c00167d8:	6a 6c                	push   0x6c
c00167da:	6a 6c                	push   0x6c
c00167dc:	e9 bd 01 00 00       	jmp    c001699e <Vm::faultHandler(regs*)+0x585>
c00167e1:	83 ec 0c             	sub    esp,0xc
c00167e4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00167e8:	0f b7 f6             	movzx  esi,si
c00167eb:	50                   	push   eax
c00167ec:	e8 3c f6 ff ff       	call   c0015e2d <Vm::inbv(unsigned short)>
c00167f1:	83 c4 0c             	add    esp,0xc
c00167f4:	0f b6 c0             	movzx  eax,al
c00167f7:	50                   	push   eax
c00167f8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00167fc:	50                   	push   eax
c00167fd:	56                   	push   esi
c00167fe:	e8 d6 fb ff ff       	call   c00163d9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016809:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001680d:	74 03                	je     c0016812 <Vm::faultHandler(regs*)+0x3f9>
c001680f:	48                   	dec    eax
c0016810:	eb 01                	jmp    c0016813 <Vm::faultHandler(regs*)+0x3fa>
c0016812:	40                   	inc    eax
c0016813:	0f b7 c0             	movzx  eax,ax
c0016816:	e9 8b 00 00 00       	jmp    c00168a6 <Vm::faultHandler(regs*)+0x48d>
c001681b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001681e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016821:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016826:	74 29                	je     c0016851 <Vm::faultHandler(regs*)+0x438>
c0016828:	3d ff ff 00 00       	cmp    eax,0xffff
c001682d:	76 22                	jbe    c0016851 <Vm::faultHandler(regs*)+0x438>
c001682f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016833:	50                   	push   eax
c0016834:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016838:	50                   	push   eax
c0016839:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001683d:	50                   	push   eax
c001683e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016842:	50                   	push   eax
c0016843:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016847:	50                   	push   eax
c0016848:	6a 6d                	push   0x6d
c001684a:	6a 6d                	push   0x6d
c001684c:	e9 4d 01 00 00       	jmp    c001699e <Vm::faultHandler(regs*)+0x585>
c0016851:	0f b7 c8             	movzx  ecx,ax
c0016854:	0f b7 f6             	movzx  esi,si
c0016857:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001685a:	83 e5 01             	and    ebp,0x1
c001685d:	74 20                	je     c001687f <Vm::faultHandler(regs*)+0x466>
c001685f:	ed                   	in     eax,dx
c0016860:	55                   	push   ebp
c0016861:	50                   	push   eax
c0016862:	51                   	push   ecx
c0016863:	56                   	push   esi
c0016864:	e8 9b fb ff ff       	call   c0016404 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001686f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016873:	74 05                	je     c001687a <Vm::faultHandler(regs*)+0x461>
c0016875:	83 e8 04             	sub    eax,0x4
c0016878:	eb 27                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x488>
c001687a:	83 c0 04             	add    eax,0x4
c001687d:	eb 22                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x488>
c001687f:	66 ed                	in     ax,dx
c0016881:	0f b7 c0             	movzx  eax,ax
c0016884:	57                   	push   edi
c0016885:	50                   	push   eax
c0016886:	51                   	push   ecx
c0016887:	56                   	push   esi
c0016888:	e8 61 fb ff ff       	call   c00163ee <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016893:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016897:	74 05                	je     c001689e <Vm::faultHandler(regs*)+0x485>
c0016899:	83 e8 02             	sub    eax,0x2
c001689c:	eb 03                	jmp    c00168a1 <Vm::faultHandler(regs*)+0x488>
c001689e:	83 c0 02             	add    eax,0x2
c00168a1:	25 ff ff 00 00       	and    eax,0xffff
c00168a6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00168a9:	e9 20 02 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c00168ae:	8d 46 ff             	lea    eax,[esi-0x1]
c00168b1:	0f b6 f0             	movzx  esi,al
c00168b4:	83 fe 05             	cmp    esi,0x5
c00168b7:	77 23                	ja     c00168dc <Vm::faultHandler(regs*)+0x4c3>
c00168b9:	ff 24 b5 fc 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd304]
c00168c0:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00168c5:	eb 15                	jmp    c00168dc <Vm::faultHandler(regs*)+0x4c3>
c00168c7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00168cb:	eb 0f                	jmp    c00168dc <Vm::faultHandler(regs*)+0x4c3>
c00168cd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00168d1:	eb 09                	jmp    c00168dc <Vm::faultHandler(regs*)+0x4c3>
c00168d3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00168d7:	eb 03                	jmp    c00168dc <Vm::faultHandler(regs*)+0x4c3>
c00168d9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00168dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168df:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168e4:	74 29                	je     c001690f <Vm::faultHandler(regs*)+0x4f6>
c00168e6:	3d ff ff 00 00       	cmp    eax,0xffff
c00168eb:	76 22                	jbe    c001690f <Vm::faultHandler(regs*)+0x4f6>
c00168ed:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168f1:	50                   	push   eax
c00168f2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168f6:	50                   	push   eax
c00168f7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168fb:	50                   	push   eax
c00168fc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016900:	50                   	push   eax
c0016901:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016905:	50                   	push   eax
c0016906:	6a 6e                	push   0x6e
c0016908:	6a 6e                	push   0x6e
c001690a:	e9 8f 00 00 00       	jmp    c001699e <Vm::faultHandler(regs*)+0x585>
c001690f:	0f b7 c0             	movzx  eax,ax
c0016912:	52                   	push   edx
c0016913:	52                   	push   edx
c0016914:	50                   	push   eax
c0016915:	57                   	push   edi
c0016916:	e8 8a fa ff ff       	call   c00163a5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001691b:	59                   	pop    ecx
c001691c:	0f b6 c0             	movzx  eax,al
c001691f:	5e                   	pop    esi
c0016920:	50                   	push   eax
c0016921:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016925:	50                   	push   eax
c0016926:	e8 15 f5 ff ff       	call   c0015e40 <Vm::outbv(unsigned short, unsigned char)>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016931:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016935:	74 03                	je     c001693a <Vm::faultHandler(regs*)+0x521>
c0016937:	48                   	dec    eax
c0016938:	eb 01                	jmp    c001693b <Vm::faultHandler(regs*)+0x522>
c001693a:	40                   	inc    eax
c001693b:	0f b7 c0             	movzx  eax,ax
c001693e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016941:	e9 88 01 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c0016946:	8d 46 ff             	lea    eax,[esi-0x1]
c0016949:	0f b6 f0             	movzx  esi,al
c001694c:	83 fe 05             	cmp    esi,0x5
c001694f:	77 1e                	ja     c001696f <Vm::faultHandler(regs*)+0x556>
c0016951:	ff 24 b5 14 2d 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd2ec]
c0016958:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001695c:	eb 11                	jmp    c001696f <Vm::faultHandler(regs*)+0x556>
c001695e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016961:	eb 0c                	jmp    c001696f <Vm::faultHandler(regs*)+0x556>
c0016963:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016966:	eb 07                	jmp    c001696f <Vm::faultHandler(regs*)+0x556>
c0016968:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001696b:	eb 02                	jmp    c001696f <Vm::faultHandler(regs*)+0x556>
c001696d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001696f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016972:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016977:	74 37                	je     c00169b0 <Vm::faultHandler(regs*)+0x597>
c0016979:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001697f:	76 2f                	jbe    c00169b0 <Vm::faultHandler(regs*)+0x597>
c0016981:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016985:	50                   	push   eax
c0016986:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001698a:	50                   	push   eax
c001698b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001698f:	50                   	push   eax
c0016990:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016994:	50                   	push   eax
c0016995:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016999:	50                   	push   eax
c001699a:	6a 6f                	push   0x6f
c001699c:	6a 6f                	push   0x6f
c001699e:	68 9f 2c 02 c0       	push   0xc0022c9f
c00169a3:	e8 bc 05 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00169a8:	83 c4 20             	add    esp,0x20
c00169ab:	e9 83 01 00 00       	jmp    c0016b33 <Vm::faultHandler(regs*)+0x71a>
c00169b0:	0f b7 d7             	movzx  edx,di
c00169b3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00169b6:	0f b7 c6             	movzx  eax,si
c00169b9:	81 e1 00 04 00 00    	and    ecx,0x400
c00169bf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00169c2:	83 e5 01             	and    ebp,0x1
c00169c5:	74 1d                	je     c00169e4 <Vm::faultHandler(regs*)+0x5cb>
c00169c7:	55                   	push   ebp
c00169c8:	55                   	push   ebp
c00169c9:	50                   	push   eax
c00169ca:	52                   	push   edx
c00169cb:	e8 f8 f9 ff ff       	call   c00163c8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00169d0:	83 c4 10             	add    esp,0x10
c00169d3:	89 fa                	mov    edx,edi
c00169d5:	ef                   	out    dx,eax
c00169d6:	85 c9                	test   ecx,ecx
c00169d8:	74 05                	je     c00169df <Vm::faultHandler(regs*)+0x5c6>
c00169da:	83 ee 04             	sub    esi,0x4
c00169dd:	eb 21                	jmp    c0016a00 <Vm::faultHandler(regs*)+0x5e7>
c00169df:	83 c6 04             	add    esi,0x4
c00169e2:	eb 1c                	jmp    c0016a00 <Vm::faultHandler(regs*)+0x5e7>
c00169e4:	55                   	push   ebp
c00169e5:	55                   	push   ebp
c00169e6:	50                   	push   eax
c00169e7:	52                   	push   edx
c00169e8:	e8 c9 f9 ff ff       	call   c00163b6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00169ed:	83 c4 10             	add    esp,0x10
c00169f0:	89 fa                	mov    edx,edi
c00169f2:	66 ef                	out    dx,ax
c00169f4:	85 c9                	test   ecx,ecx
c00169f6:	74 05                	je     c00169fd <Vm::faultHandler(regs*)+0x5e4>
c00169f8:	83 ee 02             	sub    esi,0x2
c00169fb:	eb 03                	jmp    c0016a00 <Vm::faultHandler(regs*)+0x5e7>
c00169fd:	83 c6 02             	add    esi,0x2
c0016a00:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016a06:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016a09:	e9 c0 00 00 00       	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c0016a0e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a15:	83 ec 0c             	sub    esp,0xc
c0016a18:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a1c:	50                   	push   eax
c0016a1d:	e8 0b f4 ff ff       	call   c0015e2d <Vm::inbv(unsigned short)>
c0016a22:	0f b6 c0             	movzx  eax,al
c0016a25:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a28:	eb 3a                	jmp    c0016a64 <Vm::faultHandler(regs*)+0x64b>
c0016a2a:	83 e5 01             	and    ebp,0x1
c0016a2d:	74 07                	je     c0016a36 <Vm::faultHandler(regs*)+0x61d>
c0016a2f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a33:	ed                   	in     eax,dx
c0016a34:	eb 14                	jmp    c0016a4a <Vm::faultHandler(regs*)+0x631>
c0016a36:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016a39:	66 31 f6             	xor    si,si
c0016a3c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016a3f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a43:	66 ed                	in     ax,dx
c0016a45:	0f b7 c0             	movzx  eax,ax
c0016a48:	09 f0                	or     eax,esi
c0016a4a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a4d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a51:	eb 7e                	jmp    c0016ad1 <Vm::faultHandler(regs*)+0x6b8>
c0016a53:	52                   	push   edx
c0016a54:	52                   	push   edx
c0016a55:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016a59:	50                   	push   eax
c0016a5a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a5e:	50                   	push   eax
c0016a5f:	e8 dc f3 ff ff       	call   c0015e40 <Vm::outbv(unsigned short, unsigned char)>
c0016a64:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016a68:	eb 4f                	jmp    c0016ab9 <Vm::faultHandler(regs*)+0x6a0>
c0016a6a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a6d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016a71:	83 e5 01             	and    ebp,0x1
c0016a74:	74 03                	je     c0016a79 <Vm::faultHandler(regs*)+0x660>
c0016a76:	ef                   	out    dx,eax
c0016a77:	eb d4                	jmp    c0016a4d <Vm::faultHandler(regs*)+0x634>
c0016a79:	66 ef                	out    dx,ax
c0016a7b:	eb d0                	jmp    c0016a4d <Vm::faultHandler(regs*)+0x634>
c0016a7d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a84:	83 ec 0c             	sub    esp,0xc
c0016a87:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a8b:	50                   	push   eax
c0016a8c:	e8 9c f3 ff ff       	call   c0015e2d <Vm::inbv(unsigned short)>
c0016a91:	0f b6 c0             	movzx  eax,al
c0016a94:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a97:	eb 1d                	jmp    c0016ab6 <Vm::faultHandler(regs*)+0x69d>
c0016a99:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a9c:	83 e5 01             	and    ebp,0x1
c0016a9f:	74 03                	je     c0016aa4 <Vm::faultHandler(regs*)+0x68b>
c0016aa1:	ed                   	in     eax,dx
c0016aa2:	eb 0d                	jmp    c0016ab1 <Vm::faultHandler(regs*)+0x698>
c0016aa4:	66 ed                	in     ax,dx
c0016aa6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016aa9:	0f b7 c0             	movzx  eax,ax
c0016aac:	66 31 d2             	xor    dx,dx
c0016aaf:	09 d0                	or     eax,edx
c0016ab1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ab4:	eb 18                	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c0016ab6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	eb 13                	jmp    c0016ad1 <Vm::faultHandler(regs*)+0x6b8>
c0016abe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016ac1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016ac4:	83 e5 01             	and    ebp,0x1
c0016ac7:	74 03                	je     c0016acc <Vm::faultHandler(regs*)+0x6b3>
c0016ac9:	ef                   	out    dx,eax
c0016aca:	eb 02                	jmp    c0016ace <Vm::faultHandler(regs*)+0x6b5>
c0016acc:	66 ef                	out    dx,ax
c0016ace:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ad1:	b0 01                	mov    al,0x1
c0016ad3:	eb 60                	jmp    c0016b35 <Vm::faultHandler(regs*)+0x71c>
c0016ad5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ad9:	50                   	push   eax
c0016ada:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ade:	50                   	push   eax
c0016adf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016ae3:	50                   	push   eax
c0016ae4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ae8:	50                   	push   eax
c0016ae9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016aed:	50                   	push   eax
c0016aee:	52                   	push   edx
c0016aef:	52                   	push   edx
c0016af0:	68 cc 2c 02 c0       	push   0xc0022ccc
c0016af5:	e8 6a 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016afa:	83 c4 20             	add    esp,0x20
c0016afd:	83 ec 0c             	sub    esp,0xc
c0016b00:	6a 60                	push   0x60
c0016b02:	e8 26 f3 ff ff       	call   c0015e2d <Vm::inbv(unsigned short)>
c0016b07:	83 c4 10             	add    esp,0x10
c0016b0a:	0f b6 d0             	movzx  edx,al
c0016b0d:	83 fa 1c             	cmp    edx,0x1c
c0016b10:	74 05                	je     c0016b17 <Vm::faultHandler(regs*)+0x6fe>
c0016b12:	83 fa 5a             	cmp    edx,0x5a
c0016b15:	75 e6                	jne    c0016afd <Vm::faultHandler(regs*)+0x6e4>
c0016b17:	0f b6 c0             	movzx  eax,al
c0016b1a:	83 f8 1c             	cmp    eax,0x1c
c0016b1d:	74 05                	je     c0016b24 <Vm::faultHandler(regs*)+0x70b>
c0016b1f:	83 f8 5a             	cmp    eax,0x5a
c0016b22:	75 0f                	jne    c0016b33 <Vm::faultHandler(regs*)+0x71a>
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	6a 60                	push   0x60
c0016b29:	e8 ff f2 ff ff       	call   c0015e2d <Vm::inbv(unsigned short)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	eb e4                	jmp    c0016b17 <Vm::faultHandler(regs*)+0x6fe>
c0016b33:	31 c0                	xor    eax,eax
c0016b35:	83 c4 2c             	add    esp,0x2c
c0016b38:	5b                   	pop    ebx
c0016b39:	5e                   	pop    esi
c0016b3a:	5f                   	pop    edi
c0016b3b:	5d                   	pop    ebp
c0016b3c:	c3                   	ret    
c0016b3d:	90                   	nop

c0016b3e <noCopro(unsigned long)>:
c0016b3e:	c3                   	ret    
c0016b3f:	90                   	nop

c0016b40 <CPU::close(int, int, void*)>:
c0016b40:	31 c0                	xor    eax,eax
c0016b42:	c3                   	ret    

c0016b43 <x86ReadCMOS(unsigned char)>:
c0016b43:	83 ec 14             	sub    esp,0x14
c0016b46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b4a:	88 04 24             	mov    BYTE PTR [esp],al
c0016b4d:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016b52:	0f b6 c0             	movzx  eax,al
c0016b55:	85 c0                	test   eax,eax
c0016b57:	74 04                	je     c0016b5d <x86ReadCMOS(unsigned char)+0x1a>
c0016b59:	b2 00                	mov    dl,0x0
c0016b5b:	eb 02                	jmp    c0016b5f <x86ReadCMOS(unsigned char)+0x1c>
c0016b5d:	b2 80                	mov    dl,0x80
c0016b5f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016b62:	09 d0                	or     eax,edx
c0016b64:	0f b6 c0             	movzx  eax,al
c0016b67:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016b6e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016b72:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016b76:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016b7b:	ee                   	out    dx,al
c0016b7c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016b83:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016b88:	89 c2                	mov    edx,eax
c0016b8a:	ec                   	in     al,dx
c0016b8b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b8f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b93:	83 c4 14             	add    esp,0x14
c0016b96:	c3                   	ret    

c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>:
c0016b97:	83 ec 18             	sub    esp,0x18
c0016b9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba2:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016ba6:	88 04 24             	mov    BYTE PTR [esp],al
c0016ba9:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016bae:	0f b6 c0             	movzx  eax,al
c0016bb1:	85 c0                	test   eax,eax
c0016bb3:	74 04                	je     c0016bb9 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016bb5:	b2 00                	mov    dl,0x0
c0016bb7:	eb 02                	jmp    c0016bbb <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016bb9:	b2 80                	mov    dl,0x80
c0016bbb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016bbf:	09 d0                	or     eax,edx
c0016bc1:	0f b6 c0             	movzx  eax,al
c0016bc4:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016bcb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016bcf:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016bd3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016bd8:	ee                   	out    dx,al
c0016bd9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016bdd:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016be4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016be8:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016bec:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016bf1:	ee                   	out    dx,al
c0016bf2:	90                   	nop
c0016bf3:	83 c4 18             	add    esp,0x18
c0016bf6:	c3                   	ret    

c0016bf7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016bf7:	60                   	pusha  
c0016bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016c04:	9c                   	pushf  
c0016c05:	fa                   	cli    
c0016c06:	0f 09                	wbinvd 
c0016c08:	0f 30                	wrmsr  
c0016c0a:	9d                   	popf   
c0016c0b:	89 c2                	mov    edx,eax
c0016c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c11:	89 10                	mov    DWORD PTR [eax],edx
c0016c13:	61                   	popa   
c0016c14:	90                   	nop
c0016c15:	c3                   	ret    

c0016c16 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016c16:	60                   	pusha  
c0016c17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c1b:	89 c1                	mov    ecx,eax
c0016c1d:	9c                   	pushf  
c0016c1e:	fa                   	cli    
c0016c1f:	0f 09                	wbinvd 
c0016c21:	31 c0                	xor    eax,eax
c0016c23:	31 d2                	xor    edx,edx
c0016c25:	0f 32                	rdmsr  
c0016c27:	9d                   	popf   
c0016c28:	89 c2                	mov    edx,eax
c0016c2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c2e:	89 10                	mov    DWORD PTR [eax],edx
c0016c30:	61                   	popa   
c0016c31:	90                   	nop
c0016c32:	c3                   	ret    

c0016c33 <AMD_K6_writeback(int, int, int)>:
c0016c33:	83 ec 20             	sub    esp,0x20
c0016c36:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016c3b:	c1 e8 14             	shr    eax,0x14
c0016c3e:	c1 e8 02             	shr    eax,0x2
c0016c41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c45:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016c4a:	0f 85 9e 00 00 00    	jne    c0016cee <AMD_K6_writeback(int, int, int)+0xbb>
c0016c50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c58:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016c5d:	75 19                	jne    c0016c78 <AMD_K6_writeback(int, int, int)+0x45>
c0016c5f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016c64:	7f 0a                	jg     c0016c70 <AMD_K6_writeback(int, int, int)+0x3d>
c0016c66:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016c6e:	eb 08                	jmp    c0016c78 <AMD_K6_writeback(int, int, int)+0x45>
c0016c70:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016c78:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016c7d:	7c 6e                	jl     c0016ced <AMD_K6_writeback(int, int, int)+0xba>
c0016c7f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016c84:	7e 09                	jle    c0016c8f <AMD_K6_writeback(int, int, int)+0x5c>
c0016c86:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016c8b:	74 36                	je     c0016cc3 <AMD_K6_writeback(int, int, int)+0x90>
c0016c8d:	eb 5e                	jmp    c0016ced <AMD_K6_writeback(int, int, int)+0xba>
c0016c8f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c93:	50                   	push   eax
c0016c94:	68 82 00 00 c0       	push   0xc0000082
c0016c99:	e8 78 ff ff ff       	call   c0016c16 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c9e:	83 c4 08             	add    esp,0x8
c0016ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ca5:	01 c0                	add    eax,eax
c0016ca7:	83 e0 7f             	and    eax,0x7f
c0016caa:	89 c2                	mov    edx,eax
c0016cac:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cb0:	50                   	push   eax
c0016cb1:	6a 00                	push   0x0
c0016cb3:	52                   	push   edx
c0016cb4:	68 82 00 00 c0       	push   0xc0000082
c0016cb9:	e8 39 ff ff ff       	call   c0016bf7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	eb 2b                	jmp    c0016cee <AMD_K6_writeback(int, int, int)+0xbb>
c0016cc3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cc7:	50                   	push   eax
c0016cc8:	68 82 00 00 c0       	push   0xc0000082
c0016ccd:	e8 44 ff ff ff       	call   c0016c16 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016cd2:	83 c4 08             	add    esp,0x8
c0016cd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cd9:	50                   	push   eax
c0016cda:	6a 00                	push   0x0
c0016cdc:	6a 00                	push   0x0
c0016cde:	68 82 00 00 c0       	push   0xc0000082
c0016ce3:	e8 0f ff ff ff       	call   c0016bf7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016ce8:	83 c4 10             	add    esp,0x10
c0016ceb:	eb 01                	jmp    c0016cee <AMD_K6_writeback(int, int, int)+0xbb>
c0016ced:	90                   	nop
c0016cee:	90                   	nop
c0016cef:	83 c4 20             	add    esp,0x20
c0016cf2:	c3                   	ret    

c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016cf3:	56                   	push   esi
c0016cf4:	53                   	push   ebx
c0016cf5:	a1 40 45 02 c0       	mov    eax,ds:0xc0024540
c0016cfa:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016cfe:	75 32                	jne    c0016d32 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016d00:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016d06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0a:	89 10                	mov    DWORD PTR [eax],edx
c0016d0c:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016d12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d16:	89 10                	mov    DWORD PTR [eax],edx
c0016d18:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016d1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d22:	89 10                	mov    DWORD PTR [eax],edx
c0016d24:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016d2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2e:	89 10                	mov    DWORD PTR [eax],edx
c0016d30:	eb 5c                	jmp    c0016d8e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016d32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d36:	ba 00 00 00 00       	mov    edx,0x0
c0016d3b:	89 d1                	mov    ecx,edx
c0016d3d:	0f a2                	cpuid  
c0016d3f:	89 c6                	mov    esi,eax
c0016d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d45:	89 30                	mov    DWORD PTR [eax],esi
c0016d47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d4b:	89 18                	mov    DWORD PTR [eax],ebx
c0016d4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d51:	89 08                	mov    DWORD PTR [eax],ecx
c0016d53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d57:	89 10                	mov    DWORD PTR [eax],edx
c0016d59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d5d:	a3 40 45 02 c0       	mov    ds:0xc0024540,eax
c0016d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d66:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d68:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016d6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d71:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d73:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016d78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d7e:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016d83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d87:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d89:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016d8e:	5b                   	pop    ebx
c0016d8f:	5e                   	pop    esi
c0016d90:	c3                   	ret    

c0016d91 <cpuidCheckEDX(unsigned int)>:
c0016d91:	83 ec 10             	sub    esp,0x10
c0016d94:	89 e0                	mov    eax,esp
c0016d96:	50                   	push   eax
c0016d97:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d9b:	50                   	push   eax
c0016d9c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016da0:	50                   	push   eax
c0016da1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016da5:	50                   	push   eax
c0016da6:	6a 01                	push   0x1
c0016da8:	e8 46 ff ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dad:	83 c4 14             	add    esp,0x14
c0016db0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016db3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016db7:	0f 95 c0             	setne  al
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	c3                   	ret    

c0016dbe <cpuidCheckECX(unsigned int)>:
c0016dbe:	83 ec 10             	sub    esp,0x10
c0016dc1:	89 e0                	mov    eax,esp
c0016dc3:	50                   	push   eax
c0016dc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dc8:	50                   	push   eax
c0016dc9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016dcd:	50                   	push   eax
c0016dce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016dd2:	50                   	push   eax
c0016dd3:	6a 01                	push   0x1
c0016dd5:	e8 19 ff ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dda:	83 c4 14             	add    esp,0x14
c0016ddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016de5:	0f 95 c0             	setne  al
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	c3                   	ret    

c0016dec <cpuidCheckExtendedEBX(unsigned int)>:
c0016dec:	83 ec 10             	sub    esp,0x10
c0016def:	89 e0                	mov    eax,esp
c0016df1:	50                   	push   eax
c0016df2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016df6:	50                   	push   eax
c0016df7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016dfb:	50                   	push   eax
c0016dfc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e00:	50                   	push   eax
c0016e01:	6a 07                	push   0x7
c0016e03:	e8 eb fe ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e08:	83 c4 14             	add    esp,0x14
c0016e0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e0f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e13:	0f 95 c0             	setne  al
c0016e16:	83 c4 10             	add    esp,0x10
c0016e19:	c3                   	ret    

c0016e1a <cpuidCheckExtendedECX(unsigned int)>:
c0016e1a:	83 ec 10             	sub    esp,0x10
c0016e1d:	89 e0                	mov    eax,esp
c0016e1f:	50                   	push   eax
c0016e20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e24:	50                   	push   eax
c0016e25:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e29:	50                   	push   eax
c0016e2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e2e:	50                   	push   eax
c0016e2f:	6a 07                	push   0x7
c0016e31:	e8 bd fe ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016e36:	83 c4 14             	add    esp,0x14
c0016e39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016e41:	0f 95 c0             	setne  al
c0016e44:	83 c4 10             	add    esp,0x10
c0016e47:	c3                   	ret    

c0016e48 <HalDetectFeatures()>:
c0016e48:	57                   	push   edi
c0016e49:	56                   	push   esi
c0016e4a:	53                   	push   ebx
c0016e4b:	81 ec 90 00 00 00    	sub    esp,0x90
c0016e51:	83 ec 04             	sub    esp,0x4
c0016e54:	6a 08                	push   0x8
c0016e56:	6a 00                	push   0x0
c0016e58:	68 8c c7 02 c0       	push   0xc002c78c
c0016e5d:	e8 8e 96 fe ff       	call   c00004f0 <memset>
c0016e62:	83 c4 10             	add    esp,0x10
c0016e65:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e6a:	83 c8 04             	or     eax,0x4
c0016e6d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e72:	e8 82 93 fe ff       	call   c00001f9 <detectCPUID>
c0016e77:	85 c0                	test   eax,eax
c0016e79:	0f 95 c0             	setne  al
c0016e7c:	83 e0 01             	and    eax,0x1
c0016e7f:	83 e0 01             	and    eax,0x1
c0016e82:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016e85:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e8a:	83 e0 fd             	and    eax,0xfffffffd
c0016e8d:	88 c2                	mov    dl,al
c0016e8f:	88 c8                	mov    al,cl
c0016e91:	09 d0                	or     eax,edx
c0016e93:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e98:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e9d:	83 e0 fb             	and    eax,0xfffffffb
c0016ea0:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ea5:	83 ec 0c             	sub    esp,0xc
c0016ea8:	68 2c 2d 02 c0       	push   0xc0022d2c
c0016ead:	e8 b2 00 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016eba:	83 e0 02             	and    eax,0x2
c0016ebd:	0f b6 c0             	movzx  eax,al
c0016ec0:	85 c0                	test   eax,eax
c0016ec2:	0f 84 7f 02 00 00    	je     c0017147 <HalDetectFeatures()+0x2ff>
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	6a 20                	push   0x20
c0016ecd:	e8 bf fe ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0016ed2:	83 c4 10             	add    esp,0x10
c0016ed5:	83 e0 01             	and    eax,0x1
c0016ed8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016edf:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee4:	83 e0 f7             	and    eax,0xfffffff7
c0016ee7:	88 c2                	mov    dl,al
c0016ee9:	88 c8                	mov    al,cl
c0016eeb:	09 d0                	or     eax,edx
c0016eed:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ef2:	83 ec 0c             	sub    esp,0xc
c0016ef5:	68 00 00 00 04       	push   0x4000000
c0016efa:	e8 92 fe ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0016eff:	83 c4 10             	add    esp,0x10
c0016f02:	89 c1                	mov    ecx,eax
c0016f04:	83 e1 01             	and    ecx,0x1
c0016f07:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f0c:	83 e0 fe             	and    eax,0xfffffffe
c0016f0f:	88 c2                	mov    dl,al
c0016f11:	88 c8                	mov    al,cl
c0016f13:	09 d0                	or     eax,edx
c0016f15:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f1a:	83 ec 0c             	sub    esp,0xc
c0016f1d:	68 80 00 00 00       	push   0x80
c0016f22:	e8 6a fe ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	89 c1                	mov    ecx,eax
c0016f2c:	c1 e1 07             	shl    ecx,0x7
c0016f2f:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f34:	83 e0 7f             	and    eax,0x7f
c0016f37:	88 c2                	mov    dl,al
c0016f39:	88 c8                	mov    al,cl
c0016f3b:	09 d0                	or     eax,edx
c0016f3d:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	68 00 00 80 00       	push   0x800000
c0016f4a:	e8 42 fe ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0016f4f:	83 c4 10             	add    esp,0x10
c0016f52:	83 e0 01             	and    eax,0x1
c0016f55:	89 c1                	mov    ecx,eax
c0016f57:	c1 e1 05             	shl    ecx,0x5
c0016f5a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f5f:	83 e0 df             	and    eax,0xffffffdf
c0016f62:	88 c2                	mov    dl,al
c0016f64:	88 c8                	mov    al,cl
c0016f66:	09 d0                	or     eax,edx
c0016f68:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f6d:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f72:	83 e0 01             	and    eax,0x1
c0016f75:	75 0c                	jne    c0016f83 <HalDetectFeatures()+0x13b>
c0016f77:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f7c:	25 00 04 00 00       	and    eax,0x400
c0016f81:	74 0f                	je     c0016f92 <HalDetectFeatures()+0x14a>
c0016f83:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f88:	83 e0 fe             	and    eax,0xfffffffe
c0016f8b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f90:	eb 28                	jmp    c0016fba <HalDetectFeatures()+0x172>
c0016f92:	83 ec 0c             	sub    esp,0xc
c0016f95:	68 00 02 00 00       	push   0x200
c0016f9a:	e8 f2 fd ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0016f9f:	83 c4 10             	add    esp,0x10
c0016fa2:	89 c1                	mov    ecx,eax
c0016fa4:	83 e1 01             	and    ecx,0x1
c0016fa7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fac:	83 e0 fe             	and    eax,0xfffffffe
c0016faf:	88 c2                	mov    dl,al
c0016fb1:	88 c8                	mov    al,cl
c0016fb3:	09 d0                	or     eax,edx
c0016fb5:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fba:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fbf:	83 e0 01             	and    eax,0x1
c0016fc2:	0f b6 c0             	movzx  eax,al
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	74 1c                	je     c0016fe5 <HalDetectFeatures()+0x19d>
c0016fc9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fce:	83 e0 08             	and    eax,0x8
c0016fd1:	0f b6 c0             	movzx  eax,al
c0016fd4:	85 c0                	test   eax,eax
c0016fd6:	75 0d                	jne    c0016fe5 <HalDetectFeatures()+0x19d>
c0016fd8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016fdd:	83 e0 fe             	and    eax,0xfffffffe
c0016fe0:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016fe5:	83 ec 0c             	sub    esp,0xc
c0016fe8:	68 3e 2d 02 c0       	push   0xc0022d3e
c0016fed:	e8 72 ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016ff2:	83 c4 10             	add    esp,0x10
c0016ff5:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ffa:	83 e0 fe             	and    eax,0xfffffffe
c0016ffd:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017002:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001700a:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017012:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001701a:	85 c0                	test   eax,eax
c001701c:	0f 84 ab 00 00 00    	je     c00170cd <HalDetectFeatures()+0x285>
c0017022:	83 ec 0c             	sub    esp,0xc
c0017025:	6a 01                	push   0x1
c0017027:	e8 92 fd ff ff       	call   c0016dbe <cpuidCheckECX(unsigned int)>
c001702c:	83 c4 10             	add    esp,0x10
c001702f:	83 e0 01             	and    eax,0x1
c0017032:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017035:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c001703a:	83 e0 fd             	and    eax,0xfffffffd
c001703d:	88 c2                	mov    dl,al
c001703f:	88 c8                	mov    al,cl
c0017041:	09 d0                	or     eax,edx
c0017043:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	68 00 02 00 00       	push   0x200
c0017050:	e8 69 fd ff ff       	call   c0016dbe <cpuidCheckECX(unsigned int)>
c0017055:	83 c4 10             	add    esp,0x10
c0017058:	83 e0 01             	and    eax,0x1
c001705b:	89 c1                	mov    ecx,eax
c001705d:	c1 e1 04             	shl    ecx,0x4
c0017060:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017065:	83 e0 ef             	and    eax,0xffffffef
c0017068:	88 c2                	mov    dl,al
c001706a:	88 c8                	mov    al,cl
c001706c:	09 d0                	or     eax,edx
c001706e:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017073:	83 ec 0c             	sub    esp,0xc
c0017076:	68 00 00 08 00       	push   0x80000
c001707b:	e8 3e fd ff ff       	call   c0016dbe <cpuidCheckECX(unsigned int)>
c0017080:	83 c4 10             	add    esp,0x10
c0017083:	83 e0 01             	and    eax,0x1
c0017086:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001708d:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017092:	83 e0 fb             	and    eax,0xfffffffb
c0017095:	88 c2                	mov    dl,al
c0017097:	88 c8                	mov    al,cl
c0017099:	09 d0                	or     eax,edx
c001709b:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c00170a0:	83 ec 0c             	sub    esp,0xc
c00170a3:	68 00 00 10 00       	push   0x100000
c00170a8:	e8 11 fd ff ff       	call   c0016dbe <cpuidCheckECX(unsigned int)>
c00170ad:	83 c4 10             	add    esp,0x10
c00170b0:	83 e0 01             	and    eax,0x1
c00170b3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170ba:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c00170bf:	83 e0 f7             	and    eax,0xfffffff7
c00170c2:	88 c2                	mov    dl,al
c00170c4:	88 c8                	mov    al,cl
c00170c6:	09 d0                	or     eax,edx
c00170c8:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170d4:	50                   	push   eax
c00170d5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00170d9:	50                   	push   eax
c00170da:	8d 44 24 34          	lea    eax,[esp+0x34]
c00170de:	50                   	push   eax
c00170df:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00170e3:	50                   	push   eax
c00170e4:	68 00 00 00 80       	push   0x80000000
c00170e9:	e8 05 fc ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170ee:	83 c4 20             	add    esp,0x20
c00170f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f5:	3d 00 00 00 80       	cmp    eax,0x80000000
c00170fa:	76 4b                	jbe    c0017147 <HalDetectFeatures()+0x2ff>
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017103:	50                   	push   eax
c0017104:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017108:	50                   	push   eax
c0017109:	8d 44 24 34          	lea    eax,[esp+0x34]
c001710d:	50                   	push   eax
c001710e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017112:	50                   	push   eax
c0017113:	68 01 00 00 80       	push   0x80000001
c0017118:	e8 d6 fb ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001711d:	83 c4 20             	add    esp,0x20
c0017120:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017125:	83 e0 bf             	and    eax,0xffffffbf
c0017128:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001712d:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017132:	83 e0 fd             	and    eax,0xfffffffd
c0017135:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001713a:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001713f:	83 e0 fe             	and    eax,0xfffffffe
c0017142:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017147:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c001714c:	25 00 04 00 00       	and    eax,0x400
c0017151:	74 0d                	je     c0017160 <HalDetectFeatures()+0x318>
c0017153:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017158:	83 e0 fb             	and    eax,0xfffffffb
c001715b:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017160:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c0017167:	83 ec 04             	sub    esp,0x4
c001716a:	6a 0d                	push   0xd
c001716c:	6a 00                	push   0x0
c001716e:	68 70 c7 02 c0       	push   0xc002c770
c0017173:	e8 78 93 fe ff       	call   c00004f0 <memset>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017180:	83 e0 02             	and    eax,0x2
c0017183:	0f b6 c0             	movzx  eax,al
c0017186:	85 c0                	test   eax,eax
c0017188:	0f 84 16 08 00 00    	je     c00179a4 <HalDetectFeatures()+0xb5c>
c001718e:	83 ec 0c             	sub    esp,0xc
c0017191:	6a 10                	push   0x10
c0017193:	e8 f9 fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	83 e0 01             	and    eax,0x1
c001719e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00171a5:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171aa:	83 e0 f7             	and    eax,0xfffffff7
c00171ad:	88 c2                	mov    dl,al
c00171af:	88 c8                	mov    al,cl
c00171b1:	09 d0                	or     eax,edx
c00171b3:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	6a 40                	push   0x40
c00171bd:	e8 cf fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c00171c2:	83 c4 10             	add    esp,0x10
c00171c5:	83 e0 01             	and    eax,0x1
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	c1 e1 04             	shl    ecx,0x4
c00171cd:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171d2:	83 e0 ef             	and    eax,0xffffffef
c00171d5:	88 c2                	mov    dl,al
c00171d7:	88 c8                	mov    al,cl
c00171d9:	09 d0                	or     eax,edx
c00171db:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171e0:	83 ec 0c             	sub    esp,0xc
c00171e3:	6a 08                	push   0x8
c00171e5:	e8 a7 fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c00171ea:	83 c4 10             	add    esp,0x10
c00171ed:	83 e0 01             	and    eax,0x1
c00171f0:	89 c1                	mov    ecx,eax
c00171f2:	c1 e1 05             	shl    ecx,0x5
c00171f5:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171fa:	83 e0 df             	and    eax,0xffffffdf
c00171fd:	88 c2                	mov    dl,al
c00171ff:	88 c8                	mov    al,cl
c0017201:	09 d0                	or     eax,edx
c0017203:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017208:	83 ec 0c             	sub    esp,0xc
c001720b:	68 00 20 00 00       	push   0x2000
c0017210:	e8 7c fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0017215:	83 c4 10             	add    esp,0x10
c0017218:	83 e0 01             	and    eax,0x1
c001721b:	89 c1                	mov    ecx,eax
c001721d:	c1 e1 06             	shl    ecx,0x6
c0017220:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017225:	83 e0 bf             	and    eax,0xffffffbf
c0017228:	88 c2                	mov    dl,al
c001722a:	88 c8                	mov    al,cl
c001722c:	09 d0                	or     eax,edx
c001722e:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017233:	83 ec 0c             	sub    esp,0xc
c0017236:	68 00 00 01 00       	push   0x10000
c001723b:	e8 51 fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0017240:	83 c4 10             	add    esp,0x10
c0017243:	89 c1                	mov    ecx,eax
c0017245:	c1 e1 07             	shl    ecx,0x7
c0017248:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001724d:	83 e0 7f             	and    eax,0x7f
c0017250:	88 c2                	mov    dl,al
c0017252:	88 c8                	mov    al,cl
c0017254:	09 d0                	or     eax,edx
c0017256:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001725b:	83 ec 0c             	sub    esp,0xc
c001725e:	6a 01                	push   0x1
c0017260:	e8 2c fb ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	83 e0 01             	and    eax,0x1
c001726b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017272:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017277:	83 e0 f7             	and    eax,0xfffffff7
c001727a:	88 c2                	mov    dl,al
c001727c:	88 c8                	mov    al,cl
c001727e:	09 d0                	or     eax,edx
c0017280:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017285:	83 ec 0c             	sub    esp,0xc
c0017288:	68 00 08 00 00       	push   0x800
c001728d:	e8 ff fa ff ff       	call   c0016d91 <cpuidCheckEDX(unsigned int)>
c0017292:	83 c4 10             	add    esp,0x10
c0017295:	89 c1                	mov    ecx,eax
c0017297:	83 e1 01             	and    ecx,0x1
c001729a:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001729f:	83 e0 fe             	and    eax,0xfffffffe
c00172a2:	88 c2                	mov    dl,al
c00172a4:	88 c8                	mov    al,cl
c00172a6:	09 d0                	or     eax,edx
c00172a8:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00172ad:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172b2:	83 e0 40             	and    eax,0x40
c00172b5:	0f b6 c0             	movzx  eax,al
c00172b8:	85 c0                	test   eax,eax
c00172ba:	74 0a                	je     c00172c6 <HalDetectFeatures()+0x47e>
c00172bc:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00172c6:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00172cb:	83 e0 80             	and    eax,0xffffff80
c00172ce:	0f b6 c0             	movzx  eax,al
c00172d1:	85 c0                	test   eax,eax
c00172d3:	74 0a                	je     c00172df <HalDetectFeatures()+0x497>
c00172d5:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c00172df:	83 ec 0c             	sub    esp,0xc
c00172e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172e6:	50                   	push   eax
c00172e7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00172eb:	50                   	push   eax
c00172ec:	8d 44 24 24          	lea    eax,[esp+0x24]
c00172f0:	50                   	push   eax
c00172f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00172f5:	50                   	push   eax
c00172f6:	6a 00                	push   0x0
c00172f8:	e8 f6 f9 ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00172fd:	83 c4 20             	add    esp,0x20
c0017300:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c0017308:	8d 44 24 10          	lea    eax,[esp+0x10]
c001730c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017310:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017318:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001731c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017320:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017324:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017328:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001732c:	89 c6                	mov    esi,eax
c001732e:	89 d7                	mov    edi,edx
c0017330:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017332:	89 c8                	mov    eax,ecx
c0017334:	89 fa                	mov    edx,edi
c0017336:	89 f3                	mov    ebx,esi
c0017338:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001733c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017340:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017344:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c0017349:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001734d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017351:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0017355:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c001735d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0017361:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0017365:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017369:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001736d:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0017371:	89 c6                	mov    esi,eax
c0017373:	89 d7                	mov    edi,edx
c0017375:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017377:	89 c8                	mov    eax,ecx
c0017379:	89 fa                	mov    edx,edi
c001737b:	89 f3                	mov    ebx,esi
c001737d:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017381:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017385:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017389:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c001738e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017395:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017399:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c001739d:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00173a5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00173ac:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00173b0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00173b4:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00173bb:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00173bf:	89 c6                	mov    esi,eax
c00173c1:	89 d7                	mov    edi,edx
c00173c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c5:	89 c8                	mov    eax,ecx
c00173c7:	89 fa                	mov    edx,edi
c00173c9:	89 f3                	mov    ebx,esi
c00173cb:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00173cf:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00173d3:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00173d7:	83 ec 08             	sub    esp,0x8
c00173da:	68 50 2d 02 c0       	push   0xc0022d50
c00173df:	68 70 c7 02 c0       	push   0xc002c770
c00173e4:	e8 67 93 fe ff       	call   c0000750 <strcmp>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	85 c0                	test   eax,eax
c00173ee:	74 19                	je     c0017409 <HalDetectFeatures()+0x5c1>
c00173f0:	83 ec 08             	sub    esp,0x8
c00173f3:	68 5d 2d 02 c0       	push   0xc0022d5d
c00173f8:	68 70 c7 02 c0       	push   0xc002c770
c00173fd:	e8 4e 93 fe ff       	call   c0000750 <strcmp>
c0017402:	83 c4 10             	add    esp,0x10
c0017405:	85 c0                	test   eax,eax
c0017407:	75 04                	jne    c001740d <HalDetectFeatures()+0x5c5>
c0017409:	b0 01                	mov    al,0x1
c001740b:	eb 02                	jmp    c001740f <HalDetectFeatures()+0x5c7>
c001740d:	b0 00                	mov    al,0x0
c001740f:	0f b6 c0             	movzx  eax,al
c0017412:	85 c0                	test   eax,eax
c0017414:	74 0f                	je     c0017425 <HalDetectFeatures()+0x5dd>
c0017416:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c0017420:	e9 0d 03 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017425:	83 ec 08             	sub    esp,0x8
c0017428:	68 6a 2d 02 c0       	push   0xc0022d6a
c001742d:	68 70 c7 02 c0       	push   0xc002c770
c0017432:	e8 19 93 fe ff       	call   c0000750 <strcmp>
c0017437:	83 c4 10             	add    esp,0x10
c001743a:	85 c0                	test   eax,eax
c001743c:	74 19                	je     c0017457 <HalDetectFeatures()+0x60f>
c001743e:	83 ec 08             	sub    esp,0x8
c0017441:	68 77 2d 02 c0       	push   0xc0022d77
c0017446:	68 70 c7 02 c0       	push   0xc002c770
c001744b:	e8 00 93 fe ff       	call   c0000750 <strcmp>
c0017450:	83 c4 10             	add    esp,0x10
c0017453:	85 c0                	test   eax,eax
c0017455:	75 04                	jne    c001745b <HalDetectFeatures()+0x613>
c0017457:	b0 01                	mov    al,0x1
c0017459:	eb 02                	jmp    c001745d <HalDetectFeatures()+0x615>
c001745b:	b0 00                	mov    al,0x0
c001745d:	0f b6 c0             	movzx  eax,al
c0017460:	85 c0                	test   eax,eax
c0017462:	74 0f                	je     c0017473 <HalDetectFeatures()+0x62b>
c0017464:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c001746e:	e9 bf 02 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017473:	83 ec 08             	sub    esp,0x8
c0017476:	68 84 2d 02 c0       	push   0xc0022d84
c001747b:	68 70 c7 02 c0       	push   0xc002c770
c0017480:	e8 cb 92 fe ff       	call   c0000750 <strcmp>
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	85 c0                	test   eax,eax
c001748a:	74 19                	je     c00174a5 <HalDetectFeatures()+0x65d>
c001748c:	83 ec 08             	sub    esp,0x8
c001748f:	68 91 2d 02 c0       	push   0xc0022d91
c0017494:	68 70 c7 02 c0       	push   0xc002c770
c0017499:	e8 b2 92 fe ff       	call   c0000750 <strcmp>
c001749e:	83 c4 10             	add    esp,0x10
c00174a1:	85 c0                	test   eax,eax
c00174a3:	75 04                	jne    c00174a9 <HalDetectFeatures()+0x661>
c00174a5:	b0 01                	mov    al,0x1
c00174a7:	eb 02                	jmp    c00174ab <HalDetectFeatures()+0x663>
c00174a9:	b0 00                	mov    al,0x0
c00174ab:	0f b6 c0             	movzx  eax,al
c00174ae:	85 c0                	test   eax,eax
c00174b0:	74 0f                	je     c00174c1 <HalDetectFeatures()+0x679>
c00174b2:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00174bc:	e9 71 02 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00174c1:	83 ec 08             	sub    esp,0x8
c00174c4:	68 9e 2d 02 c0       	push   0xc0022d9e
c00174c9:	68 70 c7 02 c0       	push   0xc002c770
c00174ce:	e8 7d 92 fe ff       	call   c0000750 <strcmp>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	85 c0                	test   eax,eax
c00174d8:	0f 94 c0             	sete   al
c00174db:	0f b6 c0             	movzx  eax,al
c00174de:	85 c0                	test   eax,eax
c00174e0:	74 0f                	je     c00174f1 <HalDetectFeatures()+0x6a9>
c00174e2:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00174ec:	e9 41 02 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00174f1:	83 ec 08             	sub    esp,0x8
c00174f4:	68 ab 2d 02 c0       	push   0xc0022dab
c00174f9:	68 70 c7 02 c0       	push   0xc002c770
c00174fe:	e8 4d 92 fe ff       	call   c0000750 <strcmp>
c0017503:	83 c4 10             	add    esp,0x10
c0017506:	85 c0                	test   eax,eax
c0017508:	0f 94 c0             	sete   al
c001750b:	0f b6 c0             	movzx  eax,al
c001750e:	85 c0                	test   eax,eax
c0017510:	74 0f                	je     c0017521 <HalDetectFeatures()+0x6d9>
c0017512:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c001751c:	e9 11 02 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017521:	83 ec 08             	sub    esp,0x8
c0017524:	68 6a 2d 02 c0       	push   0xc0022d6a
c0017529:	68 70 c7 02 c0       	push   0xc002c770
c001752e:	e8 1d 92 fe ff       	call   c0000750 <strcmp>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	85 c0                	test   eax,eax
c0017538:	0f 94 c0             	sete   al
c001753b:	0f b6 c0             	movzx  eax,al
c001753e:	85 c0                	test   eax,eax
c0017540:	74 0f                	je     c0017551 <HalDetectFeatures()+0x709>
c0017542:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c001754c:	e9 e1 01 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017551:	83 ec 08             	sub    esp,0x8
c0017554:	68 b8 2d 02 c0       	push   0xc0022db8
c0017559:	68 70 c7 02 c0       	push   0xc002c770
c001755e:	e8 ed 91 fe ff       	call   c0000750 <strcmp>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	85 c0                	test   eax,eax
c0017568:	0f 94 c0             	sete   al
c001756b:	0f b6 c0             	movzx  eax,al
c001756e:	85 c0                	test   eax,eax
c0017570:	74 0f                	je     c0017581 <HalDetectFeatures()+0x739>
c0017572:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c001757c:	e9 b1 01 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017581:	83 ec 08             	sub    esp,0x8
c0017584:	68 c5 2d 02 c0       	push   0xc0022dc5
c0017589:	68 70 c7 02 c0       	push   0xc002c770
c001758e:	e8 bd 91 fe ff       	call   c0000750 <strcmp>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	85 c0                	test   eax,eax
c0017598:	0f 94 c0             	sete   al
c001759b:	0f b6 c0             	movzx  eax,al
c001759e:	85 c0                	test   eax,eax
c00175a0:	74 0f                	je     c00175b1 <HalDetectFeatures()+0x769>
c00175a2:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c00175ac:	e9 81 01 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00175b1:	83 ec 08             	sub    esp,0x8
c00175b4:	68 d2 2d 02 c0       	push   0xc0022dd2
c00175b9:	68 70 c7 02 c0       	push   0xc002c770
c00175be:	e8 8d 91 fe ff       	call   c0000750 <strcmp>
c00175c3:	83 c4 10             	add    esp,0x10
c00175c6:	85 c0                	test   eax,eax
c00175c8:	0f 94 c0             	sete   al
c00175cb:	0f b6 c0             	movzx  eax,al
c00175ce:	85 c0                	test   eax,eax
c00175d0:	74 0f                	je     c00175e1 <HalDetectFeatures()+0x799>
c00175d2:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c00175dc:	e9 51 01 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00175e1:	83 ec 08             	sub    esp,0x8
c00175e4:	68 df 2d 02 c0       	push   0xc0022ddf
c00175e9:	68 70 c7 02 c0       	push   0xc002c770
c00175ee:	e8 5d 91 fe ff       	call   c0000750 <strcmp>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	85 c0                	test   eax,eax
c00175f8:	0f 94 c0             	sete   al
c00175fb:	0f b6 c0             	movzx  eax,al
c00175fe:	85 c0                	test   eax,eax
c0017600:	74 0f                	je     c0017611 <HalDetectFeatures()+0x7c9>
c0017602:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c001760c:	e9 21 01 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017611:	83 ec 08             	sub    esp,0x8
c0017614:	68 ec 2d 02 c0       	push   0xc0022dec
c0017619:	68 70 c7 02 c0       	push   0xc002c770
c001761e:	e8 2d 91 fe ff       	call   c0000750 <strcmp>
c0017623:	83 c4 10             	add    esp,0x10
c0017626:	85 c0                	test   eax,eax
c0017628:	0f 94 c0             	sete   al
c001762b:	0f b6 c0             	movzx  eax,al
c001762e:	85 c0                	test   eax,eax
c0017630:	74 0f                	je     c0017641 <HalDetectFeatures()+0x7f9>
c0017632:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c001763c:	e9 f1 00 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017641:	83 ec 08             	sub    esp,0x8
c0017644:	68 f9 2d 02 c0       	push   0xc0022df9
c0017649:	68 70 c7 02 c0       	push   0xc002c770
c001764e:	e8 fd 90 fe ff       	call   c0000750 <strcmp>
c0017653:	83 c4 10             	add    esp,0x10
c0017656:	85 c0                	test   eax,eax
c0017658:	0f 94 c0             	sete   al
c001765b:	0f b6 c0             	movzx  eax,al
c001765e:	85 c0                	test   eax,eax
c0017660:	74 0f                	je     c0017671 <HalDetectFeatures()+0x829>
c0017662:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c001766c:	e9 c1 00 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017671:	83 ec 08             	sub    esp,0x8
c0017674:	68 06 2e 02 c0       	push   0xc0022e06
c0017679:	68 70 c7 02 c0       	push   0xc002c770
c001767e:	e8 cd 90 fe ff       	call   c0000750 <strcmp>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	85 c0                	test   eax,eax
c0017688:	0f 94 c0             	sete   al
c001768b:	0f b6 c0             	movzx  eax,al
c001768e:	85 c0                	test   eax,eax
c0017690:	74 0f                	je     c00176a1 <HalDetectFeatures()+0x859>
c0017692:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001769c:	e9 91 00 00 00       	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00176a1:	83 ec 08             	sub    esp,0x8
c00176a4:	68 13 2e 02 c0       	push   0xc0022e13
c00176a9:	68 70 c7 02 c0       	push   0xc002c770
c00176ae:	e8 9d 90 fe ff       	call   c0000750 <strcmp>
c00176b3:	83 c4 10             	add    esp,0x10
c00176b6:	85 c0                	test   eax,eax
c00176b8:	0f 94 c0             	sete   al
c00176bb:	0f b6 c0             	movzx  eax,al
c00176be:	85 c0                	test   eax,eax
c00176c0:	74 0c                	je     c00176ce <HalDetectFeatures()+0x886>
c00176c2:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176cc:	eb 64                	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00176ce:	83 ec 08             	sub    esp,0x8
c00176d1:	68 20 2e 02 c0       	push   0xc0022e20
c00176d6:	68 70 c7 02 c0       	push   0xc002c770
c00176db:	e8 70 90 fe ff       	call   c0000750 <strcmp>
c00176e0:	83 c4 10             	add    esp,0x10
c00176e3:	85 c0                	test   eax,eax
c00176e5:	0f 94 c0             	sete   al
c00176e8:	0f b6 c0             	movzx  eax,al
c00176eb:	85 c0                	test   eax,eax
c00176ed:	74 0c                	je     c00176fb <HalDetectFeatures()+0x8b3>
c00176ef:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176f9:	eb 37                	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c00176fb:	83 ec 08             	sub    esp,0x8
c00176fe:	68 2d 2e 02 c0       	push   0xc0022e2d
c0017703:	68 70 c7 02 c0       	push   0xc002c770
c0017708:	e8 43 90 fe ff       	call   c0000750 <strcmp>
c001770d:	83 c4 10             	add    esp,0x10
c0017710:	85 c0                	test   eax,eax
c0017712:	0f 94 c0             	sete   al
c0017715:	0f b6 c0             	movzx  eax,al
c0017718:	85 c0                	test   eax,eax
c001771a:	74 0c                	je     c0017728 <HalDetectFeatures()+0x8e0>
c001771c:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017726:	eb 0a                	jmp    c0017732 <HalDetectFeatures()+0x8ea>
c0017728:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c0017732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017736:	83 f8 06             	cmp    eax,0x6
c0017739:	0f 86 cc 00 00 00    	jbe    c001780b <HalDetectFeatures()+0x9c3>
c001773f:	83 ec 0c             	sub    esp,0xc
c0017742:	68 80 00 00 00       	push   0x80
c0017747:	e8 a0 f6 ff ff       	call   c0016dec <cpuidCheckExtendedEBX(unsigned int)>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	89 c1                	mov    ecx,eax
c0017751:	83 e1 01             	and    ecx,0x1
c0017754:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017759:	83 e0 fe             	and    eax,0xfffffffe
c001775c:	88 c2                	mov    dl,al
c001775e:	88 c8                	mov    al,cl
c0017760:	09 d0                	or     eax,edx
c0017762:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017767:	83 ec 0c             	sub    esp,0xc
c001776a:	68 00 00 10 00       	push   0x100000
c001776f:	e8 78 f6 ff ff       	call   c0016dec <cpuidCheckExtendedEBX(unsigned int)>
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	83 e0 01             	and    eax,0x1
c001777a:	89 c1                	mov    ecx,eax
c001777c:	c1 e1 06             	shl    ecx,0x6
c001777f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017784:	83 e0 bf             	and    eax,0xffffffbf
c0017787:	88 c2                	mov    dl,al
c0017789:	88 c8                	mov    al,cl
c001778b:	09 d0                	or     eax,edx
c001778d:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017792:	83 ec 0c             	sub    esp,0xc
c0017795:	68 00 00 04 00       	push   0x40000
c001779a:	e8 4d f6 ff ff       	call   c0016dec <cpuidCheckExtendedEBX(unsigned int)>
c001779f:	83 c4 10             	add    esp,0x10
c00177a2:	83 e0 01             	and    eax,0x1
c00177a5:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00177a8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177ad:	83 e0 fd             	and    eax,0xfffffffd
c00177b0:	88 c2                	mov    dl,al
c00177b2:	88 c8                	mov    al,cl
c00177b4:	09 d0                	or     eax,edx
c00177b6:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177bb:	83 ec 0c             	sub    esp,0xc
c00177be:	6a 04                	push   0x4
c00177c0:	e8 55 f6 ff ff       	call   c0016e1a <cpuidCheckExtendedECX(unsigned int)>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	83 e0 01             	and    eax,0x1
c00177cb:	89 c1                	mov    ecx,eax
c00177cd:	c1 e1 05             	shl    ecx,0x5
c00177d0:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00177d5:	83 e0 df             	and    eax,0xffffffdf
c00177d8:	88 c2                	mov    dl,al
c00177da:	88 c8                	mov    al,cl
c00177dc:	09 d0                	or     eax,edx
c00177de:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	6a 20                	push   0x20
c00177e8:	e8 2d f6 ff ff       	call   c0016e1a <cpuidCheckExtendedECX(unsigned int)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	83 e0 01             	and    eax,0x1
c00177f3:	89 c1                	mov    ecx,eax
c00177f5:	c1 e1 04             	shl    ecx,0x4
c00177f8:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00177fd:	83 e0 ef             	and    eax,0xffffffef
c0017800:	88 c2                	mov    dl,al
c0017802:	88 c8                	mov    al,cl
c0017804:	09 d0                	or     eax,edx
c0017806:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017812:	50                   	push   eax
c0017813:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017817:	50                   	push   eax
c0017818:	8d 44 24 24          	lea    eax,[esp+0x24]
c001781c:	50                   	push   eax
c001781d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017821:	50                   	push   eax
c0017822:	6a 01                	push   0x1
c0017824:	e8 ca f4 ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017829:	83 c4 20             	add    esp,0x20
c001782c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017830:	83 e0 0f             	and    eax,0xf
c0017833:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c0017838:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001783c:	c1 e8 04             	shr    eax,0x4
c001783f:	83 e0 0f             	and    eax,0xf
c0017842:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017847:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001784b:	c1 e8 08             	shr    eax,0x8
c001784e:	83 e0 0f             	and    eax,0xf
c0017851:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017856:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001785a:	c1 e8 0c             	shr    eax,0xc
c001785d:	83 e0 03             	and    eax,0x3
c0017860:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c0017865:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001786a:	0f b6 c0             	movzx  eax,al
c001786d:	83 f8 06             	cmp    eax,0x6
c0017870:	74 0d                	je     c001787f <HalDetectFeatures()+0xa37>
c0017872:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017877:	0f b6 c0             	movzx  eax,al
c001787a:	83 f8 0f             	cmp    eax,0xf
c001787d:	75 18                	jne    c0017897 <HalDetectFeatures()+0xa4f>
c001787f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017883:	c1 e8 10             	shr    eax,0x10
c0017886:	c1 e0 04             	shl    eax,0x4
c0017889:	88 c2                	mov    dl,al
c001788b:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c0017890:	09 d0                	or     eax,edx
c0017892:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017897:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c001789c:	0f b6 c0             	movzx  eax,al
c001789f:	83 f8 0f             	cmp    eax,0xf
c00178a2:	75 15                	jne    c00178b9 <HalDetectFeatures()+0xa71>
c00178a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178a8:	c1 e8 14             	shr    eax,0x14
c00178ab:	88 c2                	mov    dl,al
c00178ad:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00178b2:	01 d0                	add    eax,edx
c00178b4:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00178b9:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00178c1:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00178c9:	85 c0                	test   eax,eax
c00178cb:	74 2d                	je     c00178fa <HalDetectFeatures()+0xab2>
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	68 00 00 00 40       	push   0x40000000
c00178d5:	e8 e4 f4 ff ff       	call   c0016dbe <cpuidCheckECX(unsigned int)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	83 e0 01             	and    eax,0x1
c00178e0:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00178e7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00178ec:	83 e0 fb             	and    eax,0xfffffffb
c00178ef:	88 c2                	mov    dl,al
c00178f1:	88 c8                	mov    al,cl
c00178f3:	09 d0                	or     eax,edx
c00178f5:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00178fa:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178ff:	83 c8 04             	or     eax,0x4
c0017902:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017907:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001790c:	83 c8 08             	or     eax,0x8
c001790f:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017914:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017919:	83 c8 10             	or     eax,0x10
c001791c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017921:	83 ec 0c             	sub    esp,0xc
c0017924:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017928:	50                   	push   eax
c0017929:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001792d:	50                   	push   eax
c001792e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017932:	50                   	push   eax
c0017933:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017937:	50                   	push   eax
c0017938:	68 00 00 00 80       	push   0x80000000
c001793d:	e8 b1 f3 ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017942:	83 c4 20             	add    esp,0x20
c0017945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017949:	3d 00 00 00 80       	cmp    eax,0x80000000
c001794e:	0f 86 96 01 00 00    	jbe    c0017aea <HalDetectFeatures()+0xca2>
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	8d 44 24 14          	lea    eax,[esp+0x14]
c001795b:	50                   	push   eax
c001795c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017960:	50                   	push   eax
c0017961:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017965:	50                   	push   eax
c0017966:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001796a:	50                   	push   eax
c001796b:	68 01 00 00 80       	push   0x80000001
c0017970:	e8 7e f3 ff ff       	call   c0016cf3 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017975:	83 c4 20             	add    esp,0x20
c0017978:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001797d:	83 e0 7f             	and    eax,0x7f
c0017980:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017985:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001798a:	83 e0 fb             	and    eax,0xfffffffb
c001798d:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017992:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017997:	83 e0 fd             	and    eax,0xfffffffd
c001799a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001799f:	e9 46 01 00 00       	jmp    c0017aea <HalDetectFeatures()+0xca2>
c00179a4:	83 ec 08             	sub    esp,0x8
c00179a7:	68 9e 2d 02 c0       	push   0xc0022d9e
c00179ac:	68 70 c7 02 c0       	push   0xc002c770
c00179b1:	e8 8a 8c fe ff       	call   c0000640 <strcpy>
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00179c3:	e8 fb 87 fe ff       	call   c00001c3 <is486>
c00179c8:	85 c0                	test   eax,eax
c00179ca:	0f 95 c0             	setne  al
c00179cd:	0f b6 c0             	movzx  eax,al
c00179d0:	85 c0                	test   eax,eax
c00179d2:	0f 84 8d 00 00 00    	je     c0017a65 <HalDetectFeatures()+0xc1d>
c00179d8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179dd:	83 c8 04             	or     eax,0x4
c00179e0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179e5:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ea:	83 c8 08             	or     eax,0x8
c00179ed:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179f2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179f7:	83 c8 10             	or     eax,0x10
c00179fa:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179ff:	0f 20 c0             	mov    eax,cr0
c0017a02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0a:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017a11:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a18:	83 e0 04             	and    eax,0x4
c0017a1b:	74 1e                	je     c0017a3b <HalDetectFeatures()+0xbf3>
c0017a1d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017a24:	83 e0 10             	and    eax,0x10
c0017a27:	75 12                	jne    c0017a3b <HalDetectFeatures()+0xbf3>
c0017a29:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a2e:	83 e0 f7             	and    eax,0xfffffff7
c0017a31:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a36:	e9 af 00 00 00       	jmp    c0017aea <HalDetectFeatures()+0xca2>
c0017a3b:	e8 5e 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a40:	83 e0 01             	and    eax,0x1
c0017a43:	83 e0 01             	and    eax,0x1
c0017a46:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a4d:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a52:	83 e0 f7             	and    eax,0xfffffff7
c0017a55:	88 c2                	mov    dl,al
c0017a57:	88 c8                	mov    al,cl
c0017a59:	09 d0                	or     eax,edx
c0017a5b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a60:	e9 85 00 00 00       	jmp    c0017aea <HalDetectFeatures()+0xca2>
c0017a65:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a6a:	83 e0 fb             	and    eax,0xfffffffb
c0017a6d:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a72:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a77:	83 e0 f7             	and    eax,0xfffffff7
c0017a7a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a7f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a84:	83 e0 ef             	and    eax,0xffffffef
c0017a87:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a8c:	0f 20 c0             	mov    eax,cr0
c0017a8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a97:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017a9e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017aa5:	83 e0 04             	and    eax,0x4
c0017aa8:	74 1b                	je     c0017ac5 <HalDetectFeatures()+0xc7d>
c0017aaa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017ab1:	83 e0 10             	and    eax,0x10
c0017ab4:	75 0f                	jne    c0017ac5 <HalDetectFeatures()+0xc7d>
c0017ab6:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017abb:	83 e0 f7             	and    eax,0xfffffff7
c0017abe:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017ac3:	eb 25                	jmp    c0017aea <HalDetectFeatures()+0xca2>
c0017ac5:	e8 d4 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017aca:	83 e0 01             	and    eax,0x1
c0017acd:	83 e0 01             	and    eax,0x1
c0017ad0:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017ad7:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017adc:	83 e0 f7             	and    eax,0xfffffff7
c0017adf:	88 c2                	mov    dl,al
c0017ae1:	88 c8                	mov    al,cl
c0017ae3:	09 d0                	or     eax,edx
c0017ae5:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017aea:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017aef:	83 e0 08             	and    eax,0x8
c0017af2:	0f b6 c0             	movzx  eax,al
c0017af5:	85 c0                	test   eax,eax
c0017af7:	75 25                	jne    c0017b1e <HalDetectFeatures()+0xcd6>
c0017af9:	e8 a0 86 fe ff       	call   c000019e <hasLegacyFPU>
c0017afe:	83 e0 01             	and    eax,0x1
c0017b01:	83 e0 01             	and    eax,0x1
c0017b04:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017b0b:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b10:	83 e0 f7             	and    eax,0xfffffff7
c0017b13:	88 c2                	mov    dl,al
c0017b15:	88 c8                	mov    al,cl
c0017b17:	09 d0                	or     eax,edx
c0017b19:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017b1e:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017b23:	83 e0 08             	and    eax,0x8
c0017b26:	0f b6 c0             	movzx  eax,al
c0017b29:	85 c0                	test   eax,eax
c0017b2b:	74 0d                	je     c0017b3a <HalDetectFeatures()+0xcf2>
c0017b2d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b32:	83 c8 10             	or     eax,0x10
c0017b35:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b3a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b3f:	83 e0 10             	and    eax,0x10
c0017b42:	0f b6 c0             	movzx  eax,al
c0017b45:	85 c0                	test   eax,eax
c0017b47:	75 23                	jne    c0017b6c <HalDetectFeatures()+0xd24>
c0017b49:	e8 78 7c 00 00       	call   c001f7c6 <x87Detect>
c0017b4e:	83 e0 01             	and    eax,0x1
c0017b51:	83 e0 01             	and    eax,0x1
c0017b54:	89 c1                	mov    ecx,eax
c0017b56:	c1 e1 04             	shl    ecx,0x4
c0017b59:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b5e:	83 e0 ef             	and    eax,0xffffffef
c0017b61:	88 c2                	mov    dl,al
c0017b63:	88 c8                	mov    al,cl
c0017b65:	09 d0                	or     eax,edx
c0017b67:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b6c:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b71:	83 e0 01             	and    eax,0x1
c0017b74:	0f b6 c0             	movzx  eax,al
c0017b77:	85 c0                	test   eax,eax
c0017b79:	75 2d                	jne    c0017ba8 <HalDetectFeatures()+0xd60>
c0017b7b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b80:	83 e0 02             	and    eax,0x2
c0017b83:	0f b6 c0             	movzx  eax,al
c0017b86:	85 c0                	test   eax,eax
c0017b88:	75 1e                	jne    c0017ba8 <HalDetectFeatures()+0xd60>
c0017b8a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b8f:	83 e0 04             	and    eax,0x4
c0017b92:	0f b6 c0             	movzx  eax,al
c0017b95:	85 c0                	test   eax,eax
c0017b97:	75 0f                	jne    c0017ba8 <HalDetectFeatures()+0xd60>
c0017b99:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b9e:	83 e0 08             	and    eax,0x8
c0017ba1:	0f b6 c0             	movzx  eax,al
c0017ba4:	85 c0                	test   eax,eax
c0017ba6:	74 0d                	je     c0017bb5 <HalDetectFeatures()+0xd6d>
c0017ba8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bad:	83 c8 80             	or     eax,0xffffff80
c0017bb0:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017bb5:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bba:	83 e0 10             	and    eax,0x10
c0017bbd:	0f b6 c0             	movzx  eax,al
c0017bc0:	85 c0                	test   eax,eax
c0017bc2:	74 2f                	je     c0017bf3 <HalDetectFeatures()+0xdab>
c0017bc4:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bc9:	83 e0 80             	and    eax,0xffffff80
c0017bcc:	0f b6 c0             	movzx  eax,al
c0017bcf:	85 c0                	test   eax,eax
c0017bd1:	75 20                	jne    c0017bf3 <HalDetectFeatures()+0xdab>
c0017bd3:	e8 a8 7b 00 00       	call   c001f780 <sseDetect>
c0017bd8:	83 e0 01             	and    eax,0x1
c0017bdb:	89 c1                	mov    ecx,eax
c0017bdd:	c1 e1 07             	shl    ecx,0x7
c0017be0:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017be5:	83 e0 7f             	and    eax,0x7f
c0017be8:	88 c2                	mov    dl,al
c0017bea:	88 c8                	mov    al,cl
c0017bec:	09 d0                	or     eax,edx
c0017bee:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017bf3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bf8:	83 e0 80             	and    eax,0xffffff80
c0017bfb:	0f b6 c0             	movzx  eax,al
c0017bfe:	85 c0                	test   eax,eax
c0017c00:	74 1c                	je     c0017c1e <HalDetectFeatures()+0xdd6>
c0017c02:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017c07:	83 e0 20             	and    eax,0x20
c0017c0a:	0f b6 c0             	movzx  eax,al
c0017c0d:	85 c0                	test   eax,eax
c0017c0f:	75 0d                	jne    c0017c1e <HalDetectFeatures()+0xdd6>
c0017c11:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017c16:	83 e0 df             	and    eax,0xffffffdf
c0017c19:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017c1e:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017c25:	90                   	nop
c0017c26:	81 c4 90 00 00 00    	add    esp,0x90
c0017c2c:	5b                   	pop    ebx
c0017c2d:	5e                   	pop    esi
c0017c2e:	5f                   	pop    edi
c0017c2f:	c3                   	ret    

c0017c30 <HalEnableNMI()>:
c0017c30:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017c37:	6a 10                	push   0x10
c0017c39:	e8 05 ef ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c0017c3e:	83 c4 04             	add    esp,0x4
c0017c41:	90                   	nop
c0017c42:	c3                   	ret    

c0017c43 <HalDisableNMI()>:
c0017c43:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017c4a:	6a 10                	push   0x10
c0017c4c:	e8 f2 ee ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c0017c51:	83 c4 04             	add    esp,0x4
c0017c54:	90                   	nop
c0017c55:	c3                   	ret    

c0017c56 <HalGetNMIState()>:
c0017c56:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017c5b:	c3                   	ret    

c0017c5c <x86rdmsr(unsigned int)>:
c0017c5c:	83 ec 1c             	sub    esp,0x1c
c0017c5f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c64:	83 e0 08             	and    eax,0x8
c0017c67:	0f b6 c0             	movzx  eax,al
c0017c6a:	85 c0                	test   eax,eax
c0017c6c:	75 10                	jne    c0017c7e <x86rdmsr(unsigned int)+0x22>
c0017c6e:	83 ec 0c             	sub    esp,0xc
c0017c71:	68 39 2e 02 c0       	push   0xc0022e39
c0017c76:	e8 47 70 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0017c7b:	83 c4 10             	add    esp,0x10
c0017c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c82:	89 c1                	mov    ecx,eax
c0017c84:	0f 32                	rdmsr  
c0017c86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c96:	83 c4 1c             	add    esp,0x1c
c0017c99:	c3                   	ret    

c0017c9a <x86wrmsr(unsigned int, unsigned long long)>:
c0017c9a:	83 ec 1c             	sub    esp,0x1c
c0017c9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ca5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cad:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017cb2:	83 e0 08             	and    eax,0x8
c0017cb5:	0f b6 c0             	movzx  eax,al
c0017cb8:	85 c0                	test   eax,eax
c0017cba:	75 10                	jne    c0017ccc <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017cbc:	83 ec 0c             	sub    esp,0xc
c0017cbf:	68 3f 2e 02 c0       	push   0xc0022e3f
c0017cc4:	e8 f9 6f ff ff       	call   c000ecc2 <KePanic(char const*)>
c0017cc9:	83 c4 10             	add    esp,0x10
c0017ccc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017cd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cd8:	0f 30                	wrmsr  
c0017cda:	90                   	nop
c0017cdb:	83 c4 1c             	add    esp,0x1c
c0017cde:	c3                   	ret    

c0017cdf <HalHandleGeneralProtectionFault(void*, void*)>:
c0017cdf:	83 ec 0c             	sub    esp,0xc
c0017ce2:	83 ec 0c             	sub    esp,0xc
c0017ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ce9:	e8 2b e7 ff ff       	call   c0016419 <Vm::faultHandler(regs*)>
c0017cee:	83 c4 10             	add    esp,0x10
c0017cf1:	83 c4 0c             	add    esp,0xc
c0017cf4:	c3                   	ret    

c0017cf5 <HalFindRSDP()>:
c0017cf5:	83 ec 1c             	sub    esp,0x1c
c0017cf8:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017cfd:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017d02:	7e 0c                	jle    c0017d10 <HalFindRSDP()+0x1b>
c0017d04:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017d09:	25 00 04 00 00       	and    eax,0x400
c0017d0e:	74 0d                	je     c0017d1d <HalFindRSDP()+0x28>
c0017d10:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d15:	83 e0 fb             	and    eax,0xfffffffb
c0017d18:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d1d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d22:	83 e0 04             	and    eax,0x4
c0017d25:	0f b6 c0             	movzx  eax,al
c0017d28:	85 c0                	test   eax,eax
c0017d2a:	75 07                	jne    c0017d33 <HalFindRSDP()+0x3e>
c0017d2c:	b8 00 00 00 00       	mov    eax,0x0
c0017d31:	eb 53                	jmp    c0017d86 <HalFindRSDP()+0x91>
c0017d33:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017d3b:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017d43:	77 2f                	ja     c0017d74 <HalFindRSDP()+0x7f>
c0017d45:	83 ec 04             	sub    esp,0x4
c0017d48:	6a 08                	push   0x8
c0017d4a:	68 45 2e 02 c0       	push   0xc0022e45
c0017d4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d53:	e8 28 86 fe ff       	call   c0000380 <memcmp>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	85 c0                	test   eax,eax
c0017d5d:	0f 94 c0             	sete   al
c0017d60:	0f b6 c0             	movzx  eax,al
c0017d63:	85 c0                	test   eax,eax
c0017d65:	74 06                	je     c0017d6d <HalFindRSDP()+0x78>
c0017d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d6b:	eb 19                	jmp    c0017d86 <HalFindRSDP()+0x91>
c0017d6d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017d72:	eb c7                	jmp    c0017d3b <HalFindRSDP()+0x46>
c0017d74:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017d79:	83 e0 fb             	and    eax,0xfffffffb
c0017d7c:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d81:	b8 00 00 00 00       	mov    eax,0x0
c0017d86:	83 c4 1c             	add    esp,0x1c
c0017d89:	c3                   	ret    

c0017d8a <HalHandlePageFault(void*, void*)>:
c0017d8a:	83 ec 1c             	sub    esp,0x1c
c0017d8d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d92:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d97:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d9d:	0f 20 d2             	mov    edx,cr2
c0017da0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017da8:	83 ec 08             	sub    esp,0x8
c0017dab:	52                   	push   edx
c0017dac:	50                   	push   eax
c0017dad:	e8 5e af ff ff       	call   c0012d10 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	83 c4 1c             	add    esp,0x1c
c0017db8:	c3                   	ret    

c0017db9 <HalHandleOpcodeFault(void*, void*)>:
c0017db9:	83 ec 1c             	sub    esp,0x1c
c0017dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dc4:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017dc9:	0f b6 c0             	movzx  eax,al
c0017dcc:	85 c0                	test   eax,eax
c0017dce:	74 25                	je     c0017df5 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017dd0:	83 ec 0c             	sub    esp,0xc
c0017dd3:	68 3c 30 02 c0       	push   0xc002303c
c0017dd8:	e8 87 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017de7:	8d 50 19             	lea    edx,[eax+0x19]
c0017dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017df1:	b0 01                	mov    al,0x1
c0017df3:	eb 02                	jmp    c0017df7 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017df5:	b0 00                	mov    al,0x0
c0017df7:	83 c4 1c             	add    esp,0x1c
c0017dfa:	c3                   	ret    

c0017dfb <HalDisplayDebugInfo(void*)>:
c0017dfb:	83 ec 2c             	sub    esp,0x2c
c0017dfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e06:	0f 20 c0             	mov    eax,cr0
c0017e09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e0d:	0f 20 d0             	mov    eax,cr2
c0017e10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e14:	0f 20 d8             	mov    eax,cr3
c0017e17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e1b:	0f 20 e0             	mov    eax,cr4
c0017e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017e29:	83 ec 08             	sub    esp,0x8
c0017e2c:	50                   	push   eax
c0017e2d:	68 5d 2e 02 c0       	push   0xc0022e5d
c0017e32:	e8 2d f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e37:	83 c4 10             	add    esp,0x10
c0017e3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e3e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017e41:	83 ec 08             	sub    esp,0x8
c0017e44:	50                   	push   eax
c0017e45:	68 4e 2e 02 c0       	push   0xc0022e4e
c0017e4a:	e8 15 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e56:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017e59:	83 ec 08             	sub    esp,0x8
c0017e5c:	50                   	push   eax
c0017e5d:	68 59 2e 02 c0       	push   0xc0022e59
c0017e62:	e8 fd f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e71:	83 ec 08             	sub    esp,0x8
c0017e74:	50                   	push   eax
c0017e75:	68 68 2e 02 c0       	push   0xc0022e68
c0017e7a:	e8 e5 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e86:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017e89:	83 ec 08             	sub    esp,0x8
c0017e8c:	50                   	push   eax
c0017e8d:	68 73 2e 02 c0       	push   0xc0022e73
c0017e92:	e8 cd f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ea1:	68 7e 2e 02 c0       	push   0xc0022e7e
c0017ea6:	e8 b9 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017eab:	83 c4 10             	add    esp,0x10
c0017eae:	83 ec 08             	sub    esp,0x8
c0017eb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017eb5:	68 89 2e 02 c0       	push   0xc0022e89
c0017eba:	e8 a5 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ec6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ec9:	c1 e0 05             	shl    eax,0x5
c0017ecc:	8d 90 a0 42 02 c0    	lea    edx,[eax-0x3ffdbd60]
c0017ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ed6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017ed9:	83 ec 04             	sub    esp,0x4
c0017edc:	52                   	push   edx
c0017edd:	50                   	push   eax
c0017ede:	68 94 2e 02 c0       	push   0xc0022e94
c0017ee3:	e8 7c f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ef0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ef6:	83 ec 0c             	sub    esp,0xc
c0017ef9:	50                   	push   eax
c0017efa:	e8 fa 91 ff ff       	call   c00110f9 <setActiveTerminal(VgaText*)>
c0017eff:	83 c4 10             	add    esp,0x10
c0017f02:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f0d:	83 ec 08             	sub    esp,0x8
c0017f10:	68 a3 2e 02 c0       	push   0xc0022ea3
c0017f15:	50                   	push   eax
c0017f16:	e8 2b 95 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f2d:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017f30:	83 ec 08             	sub    esp,0x8
c0017f33:	52                   	push   edx
c0017f34:	50                   	push   eax
c0017f35:	e8 c6 94 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f48:	83 ec 08             	sub    esp,0x8
c0017f4b:	68 b1 2e 02 c0       	push   0xc0022eb1
c0017f50:	50                   	push   eax
c0017f51:	e8 f0 94 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f64:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017f69:	8b 12                	mov    edx,DWORD PTR [edx]
c0017f6b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f6e:	83 c2 0c             	add    edx,0xc
c0017f71:	83 ec 08             	sub    esp,0x8
c0017f74:	52                   	push   edx
c0017f75:	50                   	push   eax
c0017f76:	e8 cb 94 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0017f7b:	83 c4 10             	add    esp,0x10
c0017f7e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f89:	83 ec 08             	sub    esp,0x8
c0017f8c:	68 ba 2e 02 c0       	push   0xc0022eba
c0017f91:	50                   	push   eax
c0017f92:	e8 af 94 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f9f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fa5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fa9:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017fac:	83 ec 08             	sub    esp,0x8
c0017faf:	52                   	push   edx
c0017fb0:	50                   	push   eax
c0017fb1:	e8 4a 94 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0017fb6:	83 c4 10             	add    esp,0x10
c0017fb9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fc4:	83 ec 08             	sub    esp,0x8
c0017fc7:	68 c2 2e 02 c0       	push   0xc0022ec2
c0017fcc:	50                   	push   eax
c0017fcd:	e8 74 94 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0017fd2:	83 c4 10             	add    esp,0x10
c0017fd5:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fe4:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017fe7:	83 ec 08             	sub    esp,0x8
c0017fea:	52                   	push   edx
c0017feb:	50                   	push   eax
c0017fec:	e8 0f 94 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ff9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fff:	83 ec 08             	sub    esp,0x8
c0018002:	68 ca 2e 02 c0       	push   0xc0022eca
c0018007:	50                   	push   eax
c0018008:	e8 39 94 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018015:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001801b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001801f:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018022:	83 ec 08             	sub    esp,0x8
c0018025:	52                   	push   edx
c0018026:	50                   	push   eax
c0018027:	e8 d4 93 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c001802c:	83 c4 10             	add    esp,0x10
c001802f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018034:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001803a:	83 ec 08             	sub    esp,0x8
c001803d:	68 d2 2e 02 c0       	push   0xc0022ed2
c0018042:	50                   	push   eax
c0018043:	e8 fe 93 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018048:	83 c4 10             	add    esp,0x10
c001804b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018050:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001805a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001805d:	83 ec 08             	sub    esp,0x8
c0018060:	52                   	push   edx
c0018061:	50                   	push   eax
c0018062:	e8 99 93 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0018067:	83 c4 10             	add    esp,0x10
c001806a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001806f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018075:	83 ec 08             	sub    esp,0x8
c0018078:	68 da 2e 02 c0       	push   0xc0022eda
c001807d:	50                   	push   eax
c001807e:	e8 c3 93 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018083:	83 c4 10             	add    esp,0x10
c0018086:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001808b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018091:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018095:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018098:	83 ec 08             	sub    esp,0x8
c001809b:	52                   	push   edx
c001809c:	50                   	push   eax
c001809d:	e8 5e 93 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180b0:	83 ec 08             	sub    esp,0x8
c00180b3:	68 e2 2e 02 c0       	push   0xc0022ee2
c00180b8:	50                   	push   eax
c00180b9:	e8 88 93 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00180be:	83 c4 10             	add    esp,0x10
c00180c1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180d0:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00180d3:	83 ec 08             	sub    esp,0x8
c00180d6:	52                   	push   edx
c00180d7:	50                   	push   eax
c00180d8:	e8 23 93 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c00180dd:	83 c4 10             	add    esp,0x10
c00180e0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180eb:	83 ec 08             	sub    esp,0x8
c00180ee:	68 ea 2e 02 c0       	push   0xc0022eea
c00180f3:	50                   	push   eax
c00180f4:	e8 4d 93 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00180f9:	83 c4 10             	add    esp,0x10
c00180fc:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018101:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018107:	83 ec 08             	sub    esp,0x8
c001810a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001810e:	50                   	push   eax
c001810f:	e8 ec 92 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001811c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018122:	83 ec 08             	sub    esp,0x8
c0018125:	68 f3 2e 02 c0       	push   0xc0022ef3
c001812a:	50                   	push   eax
c001812b:	e8 16 93 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018130:	83 c4 10             	add    esp,0x10
c0018133:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018138:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001813e:	83 ec 08             	sub    esp,0x8
c0018141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018145:	50                   	push   eax
c0018146:	e8 b5 92 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c001814b:	83 c4 10             	add    esp,0x10
c001814e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018153:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018159:	83 ec 08             	sub    esp,0x8
c001815c:	68 fb 2e 02 c0       	push   0xc0022efb
c0018161:	50                   	push   eax
c0018162:	e8 df 92 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018167:	83 c4 10             	add    esp,0x10
c001816a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001816f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018175:	83 ec 08             	sub    esp,0x8
c0018178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001817c:	50                   	push   eax
c001817d:	e8 7e 92 ff ff       	call   c0011400 <VgaText::putx(unsigned int)>
c0018182:	83 c4 10             	add    esp,0x10
c0018185:	fa                   	cli    
c0018186:	f4                   	hlt    
c0018187:	eb fe                	jmp    c0018187 <HalDisplayDebugInfo(void*)+0x38c>

c0018189 <HalReceivedNMI()>:
c0018189:	83 ec 1c             	sub    esp,0x1c
c001818c:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018193:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018197:	89 c2                	mov    edx,eax
c0018199:	ec                   	in     al,dx
c001819a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001819e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00181a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181a6:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00181ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181b1:	89 c2                	mov    edx,eax
c00181b3:	ec                   	in     al,dx
c00181b4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00181b8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00181bc:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181c0:	83 ec 0c             	sub    esp,0xc
c00181c3:	68 03 2f 02 c0       	push   0xc0022f03
c00181c8:	e8 97 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181cd:	83 c4 10             	add    esp,0x10
c00181d0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00181d5:	83 e0 10             	and    eax,0x10
c00181d8:	74 10                	je     c00181ea <HalReceivedNMI()+0x61>
c00181da:	83 ec 0c             	sub    esp,0xc
c00181dd:	68 14 2f 02 c0       	push   0xc0022f14
c00181e2:	e8 db 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00181ef:	83 e0 40             	and    eax,0x40
c00181f2:	74 10                	je     c0018204 <HalReceivedNMI()+0x7b>
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	68 21 2f 02 c0       	push   0xc0022f21
c00181fc:	e8 c1 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018201:	83 c4 10             	add    esp,0x10
c0018204:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018208:	0f be c0             	movsx  eax,al
c001820b:	85 c0                	test   eax,eax
c001820d:	79 10                	jns    c001821f <HalReceivedNMI()+0x96>
c001820f:	83 ec 0c             	sub    esp,0xc
c0018212:	68 2b 2f 02 c0       	push   0xc0022f2b
c0018217:	e8 a6 6a ff ff       	call   c000ecc2 <KePanic(char const*)>
c001821c:	83 c4 10             	add    esp,0x10
c001821f:	90                   	nop
c0018220:	83 c4 1c             	add    esp,0x1c
c0018223:	c3                   	ret    

c0018224 <HalSystemIdle()>:
c0018224:	56                   	push   esi
c0018225:	53                   	push   ebx
c0018226:	83 ec 14             	sub    esp,0x14
c0018229:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001822e:	83 e0 10             	and    eax,0x10
c0018231:	0f b6 c0             	movzx  eax,al
c0018234:	85 c0                	test   eax,eax
c0018236:	74 43                	je     c001827b <HalSystemIdle()+0x57>
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	68 e1 00 00 00       	push   0xe1
c0018240:	e8 17 fa ff ff       	call   c0017c5c <x86rdmsr(unsigned int)>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001824c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018254:	83 e0 02             	and    eax,0x2
c0018257:	89 c3                	mov    ebx,eax
c0018259:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825d:	83 e0 00             	and    eax,0x0
c0018260:	89 c6                	mov    esi,eax
c0018262:	83 ec 04             	sub    esp,0x4
c0018265:	56                   	push   esi
c0018266:	53                   	push   ebx
c0018267:	68 e1 00 00 00       	push   0xe1
c001826c:	e8 29 fa ff ff       	call   c0017c9a <x86wrmsr(unsigned int, unsigned long long)>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	e8 1b 7f fe ff       	call   c0000194 <doTPAUSE>
c0018279:	eb 01                	jmp    c001827c <HalSystemIdle()+0x58>
c001827b:	f4                   	hlt    
c001827c:	90                   	nop
c001827d:	83 c4 14             	add    esp,0x14
c0018280:	5b                   	pop    ebx
c0018281:	5e                   	pop    esi
c0018282:	c3                   	ret    

c0018283 <i386SaveCoprocessor(void*)>:
c0018283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018287:	83 c0 3f             	add    eax,0x3f
c001828a:	83 e0 c0             	and    eax,0xffffffc0
c001828d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018291:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c0018297 <i386LoadCoprocessor(void*)>:
c0018297:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001829b:	83 c0 3f             	add    eax,0x3f
c001829e:	83 e0 c0             	and    eax,0xffffffc0
c00182a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182a5:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c00182ab <x87EmulHandler(regs*, void*)>:
c00182ab:	53                   	push   ebx
c00182ac:	83 ec 08             	sub    esp,0x8
c00182af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182b4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00182b8:	74 10                	je     c00182ca <x87EmulHandler(regs*, void*)+0x1f>
c00182ba:	83 ec 0c             	sub    esp,0xc
c00182bd:	68 38 2f 02 c0       	push   0xc0022f38
c00182c2:	e8 fb 69 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	0f 20 c0             	mov    eax,cr0
c00182cd:	a8 08                	test   al,0x8
c00182cf:	74 59                	je     c001832a <x87EmulHandler(regs*, void*)+0x7f>
c00182d1:	0f 06                	clts   
c00182d3:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c00182d8:	85 c0                	test   eax,eax
c00182da:	74 0e                	je     c00182ea <x87EmulHandler(regs*, void*)+0x3f>
c00182dc:	83 ec 0c             	sub    esp,0xc
c00182df:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00182e2:	e8 9c ff ff ff       	call   c0018283 <i386SaveCoprocessor(void*)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00182f0:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00182f4:	75 12                	jne    c0018308 <x87EmulHandler(regs*, void*)+0x5d>
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	68 40 02 00 00       	push   0x240
c00182fe:	e8 78 66 ff ff       	call   c000e97b <malloc>
c0018303:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018306:	eb 10                	jmp    c0018318 <x87EmulHandler(regs*, void*)+0x6d>
c0018308:	83 ec 0c             	sub    esp,0xc
c001830b:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018310:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018313:	e8 7f ff ff ff       	call   c0018297 <i386LoadCoprocessor(void*)>
c0018318:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c0018325:	83 c4 08             	add    esp,0x8
c0018328:	5b                   	pop    ebx
c0018329:	c3                   	ret    
c001832a:	83 ec 0c             	sub    esp,0xc
c001832d:	68 4c 2f 02 c0       	push   0xc0022f4c
c0018332:	e8 2d ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018337:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001833f:	83 c4 18             	add    esp,0x18
c0018342:	5b                   	pop    ebx
c0018343:	e9 18 da ff ff       	jmp    c0015d60 <Thr::terminateFromIRQ(int)>

c0018348 <HalInitialiseCoprocessor()>:
c0018348:	83 ec 10             	sub    esp,0x10
c001834b:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018355:	6a 00                	push   0x0
c0018357:	68 ab 82 01 c0       	push   0xc00182ab
c001835c:	6a 07                	push   0x7
c001835e:	e8 9e 06 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018363:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018368:	83 c4 10             	add    esp,0x10
c001836b:	a8 80                	test   al,0x80
c001836d:	74 1c                	je     c001838b <HalInitialiseCoprocessor()+0x43>
c001836f:	c7 05 50 c7 02 c0 98 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f798
c0018379:	c7 05 4c c7 02 c0 a0 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f7a0
c0018383:	83 c4 0c             	add    esp,0xc
c0018386:	e9 1d 74 00 00       	jmp    c001f7a8 <sseInit>
c001838b:	a8 10                	test   al,0x10
c001838d:	74 1c                	je     c00183ab <HalInitialiseCoprocessor()+0x63>
c001838f:	c7 05 50 c7 02 c0 e7 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f7e7
c0018399:	c7 05 4c c7 02 c0 ee f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f7ee
c00183a3:	83 c4 0c             	add    esp,0xc
c00183a6:	e9 4a 74 00 00       	jmp    c001f7f5 <x87Init>
c00183ab:	c7 05 50 c7 02 c0 3e 6b 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016b3e
c00183b5:	c7 05 4c c7 02 c0 3e 6b 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016b3e
c00183bf:	0f 20 c0             	mov    eax,cr0
c00183c2:	83 c8 04             	or     eax,0x4
c00183c5:	0f 22 c0             	mov    cr0,eax
c00183c8:	83 c4 0c             	add    esp,0xc
c00183cb:	c3                   	ret    

c00183cc <HalPanic(char const*)>:
c00183cc:	53                   	push   ebx
c00183cd:	83 ec 10             	sub    esp,0x10
c00183d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00183d4:	fa                   	cli    
c00183d5:	53                   	push   ebx
c00183d6:	68 62 2f 02 c0       	push   0xc0022f62
c00183db:	e8 84 eb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00183e0:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	85 c0                	test   eax,eax
c00183ea:	74 09                	je     c00183f5 <HalPanic(char const*)+0x29>
c00183ec:	83 ec 0c             	sub    esp,0xc
c00183ef:	53                   	push   ebx
c00183f0:	ff d0                	call   eax
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00183fa:	85 c0                	test   eax,eax
c00183fc:	0f 84 dc 00 00 00    	je     c00184de <HalPanic(char const*)+0x112>
c0018402:	52                   	push   edx
c0018403:	6a 01                	push   0x1
c0018405:	6a 0f                	push   0xf
c0018407:	50                   	push   eax
c0018408:	e8 47 8b ff ff       	call   c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001840d:	59                   	pop    ecx
c001840e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018414:	e8 2b 8d ff ff       	call   c0011144 <VgaText::clearScreen()>
c0018419:	58                   	pop    eax
c001841a:	5a                   	pop    edx
c001841b:	68 bf 23 02 c0       	push   0xc00223bf
c0018420:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018426:	e8 61 8b ff ff       	call   c0010f8c <VgaText::setTitle(char*)>
c001842b:	83 c4 0c             	add    esp,0xc
c001842e:	6a 01                	push   0x1
c0018430:	6a 0f                	push   0xf
c0018432:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018438:	e8 17 8b ff ff       	call   c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001843d:	59                   	pop    ecx
c001843e:	58                   	pop    eax
c001843f:	68 7b 2f 02 c0       	push   0xc0022f7b
c0018444:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001844a:	e8 f7 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001844f:	83 c4 0c             	add    esp,0xc
c0018452:	6a 0f                	push   0xf
c0018454:	6a 01                	push   0x1
c0018456:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001845c:	e8 f3 8a ff ff       	call   c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018461:	58                   	pop    eax
c0018462:	5a                   	pop    edx
c0018463:	68 84 2f 02 c0       	push   0xc0022f84
c0018468:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001846e:	e8 d3 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018473:	83 c4 0c             	add    esp,0xc
c0018476:	6a 01                	push   0x1
c0018478:	6a 0f                	push   0xf
c001847a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018480:	e8 cf 8a ff ff       	call   c0010f54 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018485:	59                   	pop    ecx
c0018486:	58                   	pop    eax
c0018487:	68 c8 2f 02 c0       	push   0xc0022fc8
c001848c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018492:	e8 af 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c0018497:	58                   	pop    eax
c0018498:	5a                   	pop    edx
c0018499:	68 91 2f 02 c0       	push   0xc0022f91
c001849e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184a4:	e8 9d 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00184a9:	59                   	pop    ecx
c00184aa:	58                   	pop    eax
c00184ab:	68 cb 2f 02 c0       	push   0xc0022fcb
c00184b0:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184b6:	e8 8b 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00184bb:	58                   	pop    eax
c00184bc:	5a                   	pop    edx
c00184bd:	53                   	push   ebx
c00184be:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184c4:	e8 7d 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00184c9:	59                   	pop    ecx
c00184ca:	5b                   	pop    ebx
c00184cb:	68 c8 2f 02 c0       	push   0xc0022fc8
c00184d0:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00184d6:	e8 6b 8f ff ff       	call   c0011446 <VgaText::puts(char const*)>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	eb fe                	jmp    c00184de <HalPanic(char const*)+0x112>

c00184e0 <HalQueryPerformanceCounter()>:
c00184e0:	31 c0                	xor    eax,eax
c00184e2:	31 d2                	xor    edx,edx
c00184e4:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00184eb:	75 02                	jne    c00184ef <HalQueryPerformanceCounter()+0xf>
c00184ed:	0f 31                	rdtsc  
c00184ef:	c3                   	ret    

c00184f0 <HalInitialise()>:
c00184f0:	53                   	push   ebx
c00184f1:	83 ec 08             	sub    esp,0x8
c00184f4:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c00184fb:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018500:	83 e0 fe             	and    eax,0xfffffffe
c0018503:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0018508:	e8 d3 07 00 00       	call   c0018ce0 <picOpen()>
c001850d:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c0018514:	74 0a                	je     c0018520 <HalInitialise()+0x30>
c0018516:	e8 15 07 00 00       	call   c0018c30 <picDisable()>
c001851b:	e8 56 68 00 00       	call   c001ed76 <apicOpen()>
c0018520:	bb 0f 00 00 00       	mov    ebx,0xf
c0018525:	50                   	push   eax
c0018526:	6a 00                	push   0x0
c0018528:	68 28 e0 00 c0       	push   0xc000e028
c001852d:	6a 00                	push   0x0
c001852f:	e8 cd 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018534:	83 c4 0c             	add    esp,0xc
c0018537:	6a 00                	push   0x0
c0018539:	68 28 e0 00 c0       	push   0xc000e028
c001853e:	6a 01                	push   0x1
c0018540:	e8 bc 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018545:	83 c4 0c             	add    esp,0xc
c0018548:	6a 00                	push   0x0
c001854a:	68 18 e0 00 c0       	push   0xc000e018
c001854f:	6a 02                	push   0x2
c0018551:	e8 ab 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018556:	83 c4 0c             	add    esp,0xc
c0018559:	6a 00                	push   0x0
c001855b:	68 28 e0 00 c0       	push   0xc000e028
c0018560:	6a 03                	push   0x3
c0018562:	e8 9a 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018567:	83 c4 0c             	add    esp,0xc
c001856a:	6a 00                	push   0x0
c001856c:	68 28 e0 00 c0       	push   0xc000e028
c0018571:	6a 04                	push   0x4
c0018573:	e8 89 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018578:	83 c4 0c             	add    esp,0xc
c001857b:	6a 00                	push   0x0
c001857d:	68 28 e0 00 c0       	push   0xc000e028
c0018582:	6a 05                	push   0x5
c0018584:	e8 78 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018589:	83 c4 0c             	add    esp,0xc
c001858c:	6a 00                	push   0x0
c001858e:	68 5c e0 00 c0       	push   0xc000e05c
c0018593:	6a 06                	push   0x6
c0018595:	e8 67 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001859a:	83 c4 0c             	add    esp,0xc
c001859d:	6a 00                	push   0x0
c001859f:	68 b0 e0 00 c0       	push   0xc000e0b0
c00185a4:	6a 08                	push   0x8
c00185a6:	e8 56 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185ab:	83 c4 0c             	add    esp,0xc
c00185ae:	6a 00                	push   0x0
c00185b0:	68 28 e0 00 c0       	push   0xc000e028
c00185b5:	6a 09                	push   0x9
c00185b7:	e8 45 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185bc:	83 c4 0c             	add    esp,0xc
c00185bf:	6a 00                	push   0x0
c00185c1:	68 28 e0 00 c0       	push   0xc000e028
c00185c6:	6a 0a                	push   0xa
c00185c8:	e8 34 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185cd:	83 c4 0c             	add    esp,0xc
c00185d0:	6a 00                	push   0x0
c00185d2:	68 28 e0 00 c0       	push   0xc000e028
c00185d7:	6a 0b                	push   0xb
c00185d9:	e8 23 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185de:	83 c4 0c             	add    esp,0xc
c00185e1:	6a 00                	push   0x0
c00185e3:	68 70 df 00 c0       	push   0xc000df70
c00185e8:	6a 0d                	push   0xd
c00185ea:	e8 12 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185ef:	83 c4 0c             	add    esp,0xc
c00185f2:	6a 00                	push   0x0
c00185f4:	68 c4 df 00 c0       	push   0xc000dfc4
c00185f9:	6a 0e                	push   0xe
c00185fb:	e8 01 04 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018600:	83 c4 10             	add    esp,0x10
c0018603:	50                   	push   eax
c0018604:	6a 00                	push   0x0
c0018606:	68 28 e0 00 c0       	push   0xc000e028
c001860b:	53                   	push   ebx
c001860c:	43                   	inc    ebx
c001860d:	e8 ef 03 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	83 fb 1e             	cmp    ebx,0x1e
c0018618:	75 e9                	jne    c0018603 <HalInitialise()+0x113>
c001861a:	50                   	push   eax
c001861b:	6a 00                	push   0x0
c001861d:	68 e0 0d 01 c0       	push   0xc0010de0
c0018622:	6a 60                	push   0x60
c0018624:	e8 d8 03 00 00       	call   c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018629:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001862e:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018638:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001863f:	e8 37 63 ff ff       	call   c000e97b <malloc>
c0018644:	89 04 24             	mov    DWORD PTR [esp],eax
c0018647:	89 c3                	mov    ebx,eax
c0018649:	e8 00 0e 00 00       	call   c001944e <RTC::RTC()>
c001864e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018658:	5a                   	pop    edx
c0018659:	59                   	pop    ecx
c001865a:	53                   	push   ebx
c001865b:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0018661:	e8 dc 09 ff ff       	call   c0009042 <Device::addChild(Device*)>
c0018666:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018668:	6a 00                	push   0x0
c001866a:	6a 00                	push   0x0
c001866c:	6a 00                	push   0x0
c001866e:	53                   	push   ebx
c001866f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018672:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018677:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001867d:	83 c4 28             	add    esp,0x28
c0018680:	5b                   	pop    ebx
c0018681:	c3                   	ret    

c0018682 <HalMakeBeep(int)>:
c0018682:	53                   	push   ebx
c0018683:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018687:	85 db                	test   ebx,ebx
c0018689:	75 07                	jne    c0018692 <HalMakeBeep(int)+0x10>
c001868b:	e4 61                	in     al,0x61
c001868d:	83 e0 fc             	and    eax,0xfffffffc
c0018690:	eb 26                	jmp    c00186b8 <HalMakeBeep(int)+0x36>
c0018692:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018697:	99                   	cdq    
c0018698:	f7 fb                	idiv   ebx
c001869a:	89 c1                	mov    ecx,eax
c001869c:	b0 b6                	mov    al,0xb6
c001869e:	e6 43                	out    0x43,al
c00186a0:	88 c8                	mov    al,cl
c00186a2:	e6 42                	out    0x42,al
c00186a4:	89 c8                	mov    eax,ecx
c00186a6:	c1 e8 08             	shr    eax,0x8
c00186a9:	e6 42                	out    0x42,al
c00186ab:	e4 61                	in     al,0x61
c00186ad:	89 c2                	mov    edx,eax
c00186af:	83 ca 03             	or     edx,0x3
c00186b2:	38 d0                	cmp    al,dl
c00186b4:	74 04                	je     c00186ba <HalMakeBeep(int)+0x38>
c00186b6:	88 d0                	mov    al,dl
c00186b8:	e6 61                	out    0x61,al
c00186ba:	5b                   	pop    ebx
c00186bb:	c3                   	ret    

c00186bc <HalGetRand()>:
c00186bc:	31 c0                	xor    eax,eax
c00186be:	c3                   	ret    

c00186bf <HalEndOfInterrupt(int)>:
c00186bf:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00186c6:	74 1d                	je     c00186e5 <HalEndOfInterrupt(int)+0x26>
c00186c8:	83 ec 18             	sub    esp,0x18
c00186cb:	6a 1b                	push   0x1b
c00186cd:	e8 8a f5 ff ff       	call   c0017c5c <x86rdmsr(unsigned int)>
c00186d2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00186d7:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00186e1:	83 c4 1c             	add    esp,0x1c
c00186e4:	c3                   	ret    
c00186e5:	e9 7a 07 00 00       	jmp    c0018e64 <picEOI(int)>

c00186ea <HalRestart()>:
c00186ea:	c3                   	ret    

c00186eb <HalShutdown()>:
c00186eb:	c3                   	ret    

c00186ec <HalSleep()>:
c00186ec:	c3                   	ret    
c00186ed:	90                   	nop

c00186ee <CPU::CPU()>:
c00186ee:	83 ec 0c             	sub    esp,0xc
c00186f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f5:	83 ec 08             	sub    esp,0x8
c00186f8:	68 8d 2d 02 c0       	push   0xc0022d8d
c00186fd:	50                   	push   eax
c00186fe:	e8 a1 0a ff ff       	call   c00091a4 <Device::Device(char const*)>
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	ba 68 30 02 c0       	mov    edx,0xc0023068
c001870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001870f:	89 10                	mov    DWORD PTR [eax],edx
c0018711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018715:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001871f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018723:	05 64 01 00 00       	add    eax,0x164
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	50                   	push   eax
c001872c:	e8 d3 59 ff ff       	call   c000e104 <GDT::GDT()>
c0018731:	83 c4 10             	add    esp,0x10
c0018734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018738:	05 68 09 00 00       	add    eax,0x968
c001873d:	83 ec 0c             	sub    esp,0xc
c0018740:	50                   	push   eax
c0018741:	e8 12 5c ff ff       	call   c000e358 <IDT::IDT()>
c0018746:	83 c4 10             	add    esp,0x10
c0018749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001874d:	05 68 11 00 00       	add    eax,0x1168
c0018752:	83 ec 0c             	sub    esp,0xc
c0018755:	50                   	push   eax
c0018756:	e8 89 91 ff ff       	call   c00118e4 <TSS::TSS()>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018762:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001876c:	90                   	nop
c001876d:	83 c4 0c             	add    esp,0xc
c0018770:	c3                   	ret    
c0018771:	90                   	nop

c0018772 <CPU::setupSMEP()>:
c0018772:	0f 20 e0             	mov    eax,cr4
c0018775:	0d 00 00 10 00       	or     eax,0x100000
c001877a:	0f 22 e0             	mov    cr4,eax
c001877d:	c3                   	ret    

c001877e <CPU::setupUMIP()>:
c001877e:	0f 20 e0             	mov    eax,cr4
c0018781:	80 cc 08             	or     ah,0x8
c0018784:	0f 22 e0             	mov    cr4,eax
c0018787:	c3                   	ret    

c0018788 <CPU::setupTSC()>:
c0018788:	0f 20 e0             	mov    eax,cr4
c001878b:	83 c8 04             	or     eax,0x4
c001878e:	0f 22 e0             	mov    cr4,eax
c0018791:	c3                   	ret    

c0018792 <CPU::setupLargePages()>:
c0018792:	0f 20 e0             	mov    eax,cr4
c0018795:	83 c8 10             	or     eax,0x10
c0018798:	0f 22 e0             	mov    cr4,eax
c001879b:	c3                   	ret    

c001879c <CPU::setupPAT()>:
c001879c:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c00187a3:	74 28                	je     c00187cd <CPU::setupPAT()+0x31>
c00187a5:	53                   	push   ebx
c00187a6:	83 ec 14             	sub    esp,0x14
c00187a9:	68 77 02 00 00       	push   0x277
c00187ae:	e8 a9 f4 ff ff       	call   c0017c5c <x86rdmsr(unsigned int)>
c00187b3:	83 c4 0c             	add    esp,0xc
c00187b6:	83 e2 f8             	and    edx,0xfffffff8
c00187b9:	83 ca 01             	or     edx,0x1
c00187bc:	52                   	push   edx
c00187bd:	50                   	push   eax
c00187be:	68 77 02 00 00       	push   0x277
c00187c3:	e8 d2 f4 ff ff       	call   c0017c9a <x86wrmsr(unsigned int, unsigned long long)>
c00187c8:	83 c4 18             	add    esp,0x18
c00187cb:	5b                   	pop    ebx
c00187cc:	c3                   	ret    
c00187cd:	c3                   	ret    

c00187ce <CPU::setupMTRR()>:
c00187ce:	c3                   	ret    
c00187cf:	90                   	nop

c00187d0 <CPU::setupGlobalPages()>:
c00187d0:	0f 20 e0             	mov    eax,cr4
c00187d3:	0c 80                	or     al,0x80
c00187d5:	0f 22 e0             	mov    cr4,eax
c00187d8:	c3                   	ret    
c00187d9:	90                   	nop

c00187da <CPU::allowUsermodeDataAccess()>:
c00187da:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00187e1:	74 03                	je     c00187e6 <CPU::allowUsermodeDataAccess()+0xc>
c00187e3:	0f 01 cb             	stac   
c00187e6:	c3                   	ret    
c00187e7:	90                   	nop

c00187e8 <CPU::prohibitUsermodeDataAccess()>:
c00187e8:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00187ef:	74 03                	je     c00187f4 <CPU::prohibitUsermodeDataAccess()+0xc>
c00187f1:	0f 01 ca             	clac   
c00187f4:	c3                   	ret    
c00187f5:	90                   	nop

c00187f6 <CPU::setupSMAP()>:
c00187f6:	0f 20 e0             	mov    eax,cr4
c00187f9:	0d 00 00 20 00       	or     eax,0x200000
c00187fe:	0f 22 e0             	mov    cr4,eax
c0018801:	eb e5                	jmp    c00187e8 <CPU::prohibitUsermodeDataAccess()>
c0018803:	90                   	nop

c0018804 <CPU::setupFeatures()>:
c0018804:	53                   	push   ebx
c0018805:	83 ec 08             	sub    esp,0x8
c0018808:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001880c:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018813:	74 18                	je     c001882d <CPU::setupFeatures()+0x29>
c0018815:	83 ec 0c             	sub    esp,0xc
c0018818:	68 d6 2f 02 c0       	push   0xc0022fd6
c001881d:	e8 42 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018822:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018825:	e8 54 ff ff ff       	call   c001877e <CPU::setupUMIP()>
c001882a:	83 c4 10             	add    esp,0x10
c001882d:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c0018834:	74 18                	je     c001884e <CPU::setupFeatures()+0x4a>
c0018836:	83 ec 0c             	sub    esp,0xc
c0018839:	68 e0 2f 02 c0       	push   0xc0022fe0
c001883e:	e8 21 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018843:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018846:	e8 3d ff ff ff       	call   c0018788 <CPU::setupTSC()>
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c0018855:	74 18                	je     c001886f <CPU::setupFeatures()+0x6b>
c0018857:	83 ec 0c             	sub    esp,0xc
c001885a:	68 e9 2f 02 c0       	push   0xc0022fe9
c001885f:	e8 00 e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018864:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018867:	e8 26 ff ff ff       	call   c0018792 <CPU::setupLargePages()>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c0018876:	74 18                	je     c0018890 <CPU::setupFeatures()+0x8c>
c0018878:	83 ec 0c             	sub    esp,0xc
c001887b:	68 f2 2f 02 c0       	push   0xc0022ff2
c0018880:	e8 df e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018885:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018888:	e8 43 ff ff ff       	call   c00187d0 <CPU::setupGlobalPages()>
c001888d:	83 c4 10             	add    esp,0x10
c0018890:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c0018897:	74 18                	je     c00188b1 <CPU::setupFeatures()+0xad>
c0018899:	83 ec 0c             	sub    esp,0xc
c001889c:	68 04 30 02 c0       	push   0xc0023004
c00188a1:	e8 be e6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00188a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00188a9:	e8 ee fe ff ff       	call   c001879c <CPU::setupPAT()>
c00188ae:	83 c4 10             	add    esp,0x10
c00188b1:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00188b8:	74 11                	je     c00188cb <CPU::setupFeatures()+0xc7>
c00188ba:	c7 44 24 10 0d 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc002300d
c00188c2:	83 c4 08             	add    esp,0x8
c00188c5:	5b                   	pop    ebx
c00188c6:	e9 99 e6 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c00188cb:	83 c4 08             	add    esp,0x8
c00188ce:	5b                   	pop    ebx
c00188cf:	c3                   	ret    

c00188d0 <CPU::open(int, int, void*)>:
c00188d0:	55                   	push   ebp
c00188d1:	57                   	push   edi
c00188d2:	56                   	push   esi
c00188d3:	53                   	push   ebx
c00188d4:	83 ec 18             	sub    esp,0x18
c00188d7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00188db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188df:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00188e3:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00188e9:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00188ef:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00188f5:	50                   	push   eax
c00188f6:	e8 6b 58 ff ff       	call   c000e166 <GDT::setup()>
c00188fb:	83 c4 0c             	add    esp,0xc
c00188fe:	6a 00                	push   0x0
c0018900:	68 ef be ad de       	push   0xdeadbeef
c0018905:	55                   	push   ebp
c0018906:	e8 1d 90 ff ff       	call   c0011928 <TSS::setup(unsigned long, unsigned long)>
c001890b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001890e:	e8 f5 8f ff ff       	call   c0011908 <TSS::flush()>
c0018913:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018919:	89 04 24             	mov    DWORD PTR [esp],eax
c001891c:	e8 ad 5a ff ff       	call   c000e3ce <IDT::setup()>
c0018921:	b8 00 04 00 00       	mov    eax,0x400
c0018926:	0f 23 f8             	mov    dr7,eax
c0018929:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018933:	e8 7e 65 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c0018938:	83 c4 10             	add    esp,0x10
c001893b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018941:	85 f6                	test   esi,esi
c0018943:	89 38                	mov    DWORD PTR [eax],edi
c0018945:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001894b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001894e:	74 10                	je     c0018960 <CPU::open(int, int, void*)+0x90>
c0018950:	50                   	push   eax
c0018951:	50                   	push   eax
c0018952:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018958:	56                   	push   esi
c0018959:	e8 72 99 ff ff       	call   c00122d0 <VAS::setCPUSpecific(unsigned long)>
c001895e:	eb 0d                	jmp    c001896d <CPU::open(int, int, void*)+0x9d>
c0018960:	83 ec 0c             	sub    esp,0xc
c0018963:	68 17 30 02 c0       	push   0xc0023017
c0018968:	e8 55 63 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001896d:	83 c4 10             	add    esp,0x10
c0018970:	83 ec 0c             	sub    esp,0xc
c0018973:	68 25 30 02 c0       	push   0xc0023025
c0018978:	e8 c3 3c ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001897d:	e8 6e fb ff ff       	call   c00184f0 <HalInitialise()>
c0018982:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0018987:	83 e0 10             	and    eax,0x10
c001898a:	83 f8 01             	cmp    eax,0x1
c001898d:	19 c0                	sbb    eax,eax
c001898f:	83 e0 46             	and    eax,0x46
c0018992:	83 c0 1e             	add    eax,0x1e
c0018995:	89 04 24             	mov    DWORD PTR [esp],eax
c0018998:	e8 74 1d ff ff       	call   c000a711 <setupTimer(int)>
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00189a6:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c00189ad:	74 0c                	je     c00189bb <CPU::open(int, int, void*)+0xeb>
c00189af:	83 ec 0c             	sub    esp,0xc
c00189b2:	53                   	push   ebx
c00189b3:	e8 4c fe ff ff       	call   c0018804 <CPU::setupFeatures()>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	83 c4 0c             	add    esp,0xc
c00189be:	31 c0                	xor    eax,eax
c00189c0:	5b                   	pop    ebx
c00189c1:	5e                   	pop    esi
c00189c2:	5f                   	pop    edi
c00189c3:	5d                   	pop    ebp
c00189c4:	c3                   	ret    

c00189c5 <convertLegacyIRQNumber(int)>:
c00189c5:	83 ec 0c             	sub    esp,0xc
c00189c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189cc:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00189d3:	74 0c                	je     c00189e1 <convertLegacyIRQNumber(int)+0x1c>
c00189d5:	83 f8 0f             	cmp    eax,0xf
c00189d8:	7f 0b                	jg     c00189e5 <convertLegacyIRQNumber(int)+0x20>
c00189da:	0f b6 80 28 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4d8]
c00189e1:	83 c4 0c             	add    esp,0xc
c00189e4:	c3                   	ret    
c00189e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00189e9:	83 ec 0c             	sub    esp,0xc
c00189ec:	68 8c 30 02 c0       	push   0xc002308c
c00189f1:	e8 cc 62 ff ff       	call   c000ecc2 <KePanic(char const*)>
c00189f6:	83 c4 10             	add    esp,0x10
c00189f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189fd:	83 c4 0c             	add    esp,0xc
c0018a00:	c3                   	ret    

c0018a01 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018a01:	56                   	push   esi
c0018a02:	31 c0                	xor    eax,eax
c0018a04:	53                   	push   ebx
c0018a05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a0d:	89 ca                	mov    edx,ecx
c0018a0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018a13:	c1 e2 04             	shl    edx,0x4
c0018a16:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018a1e:	74 17                	je     c0018a37 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018a20:	83 c0 01             	add    eax,0x1
c0018a23:	83 f8 04             	cmp    eax,0x4
c0018a26:	75 ee                	jne    c0018a16 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018a28:	c7 44 24 0c ed 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc00230ed
c0018a30:	5b                   	pop    ebx
c0018a31:	5e                   	pop    esi
c0018a32:	e9 8b 62 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c0018a37:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018a3a:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c0018a41:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018a48:	5b                   	pop    ebx
c0018a49:	5e                   	pop    esi
c0018a4a:	c3                   	ret    

c0018a4b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018a4b:	57                   	push   edi
c0018a4c:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018a53:	56                   	push   esi
c0018a54:	53                   	push   ebx
c0018a55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a5d:	74 54                	je     c0018ab3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0018a5f:	89 c7                	mov    edi,eax
c0018a61:	84 c0                	test   al,al
c0018a63:	74 1d                	je     c0018a82 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018a65:	83 fe 0f             	cmp    esi,0xf
c0018a68:	0f 8f d5 00 00 00    	jg     c0018b43 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0018a6e:	0f b6 b6 28 3b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc4d8]
c0018a75:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c0018a7d:	d1 ef                	shr    edi,1
c0018a7f:	83 e7 01             	and    edi,0x1
c0018a82:	83 ec 08             	sub    esp,0x8
c0018a85:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a8a:	31 db                	xor    ebx,ebx
c0018a8c:	50                   	push   eax
c0018a8d:	68 fa 30 02 c0       	push   0xc00230fa
c0018a92:	e8 cd e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a97:	83 c4 10             	add    esp,0x10
c0018a9a:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a9f:	85 c0                	test   eax,eax
c0018aa1:	7f 55                	jg     c0018af8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018aa3:	83 ec 0c             	sub    esp,0xc
c0018aa6:	68 11 31 02 c0       	push   0xc0023111
c0018aab:	e8 12 62 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018ab0:	83 c4 10             	add    esp,0x10
c0018ab3:	8d 7e 20             	lea    edi,[esi+0x20]
c0018ab6:	89 f8                	mov    eax,edi
c0018ab8:	31 d2                	xor    edx,edx
c0018aba:	c1 e0 04             	shl    eax,0x4
c0018abd:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018ac4:	85 c9                	test   ecx,ecx
c0018ac6:	0f 84 8e 00 00 00    	je     c0018b5a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018acc:	83 c2 01             	add    edx,0x1
c0018acf:	83 fa 04             	cmp    edx,0x4
c0018ad2:	75 e9                	jne    c0018abd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018ad4:	83 ec 0c             	sub    esp,0xc
c0018ad7:	68 c8 30 02 c0       	push   0xc00230c8
c0018adc:	e8 e1 61 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018ae9:	5b                   	pop    ebx
c0018aea:	5e                   	pop    esi
c0018aeb:	5f                   	pop    edi
c0018aec:	c3                   	ret    
c0018aed:	83 c3 01             	add    ebx,0x1
c0018af0:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018af6:	7e ab                	jle    c0018aa3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018af8:	83 ec 08             	sub    esp,0x8
c0018afb:	8b 04 9d 00 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f00]
c0018b02:	56                   	push   esi
c0018b03:	50                   	push   eax
c0018b04:	e8 f9 63 00 00       	call   c001ef02 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	84 c0                	test   al,al
c0018b0e:	74 dd                	je     c0018aed <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018b10:	83 ec 04             	sub    esp,0x4
c0018b13:	89 f8                	mov    eax,edi
c0018b15:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018b1c:	0f b6 f8             	movzx  edi,al
c0018b1f:	57                   	push   edi
c0018b20:	8d 7e 20             	lea    edi,[esi+0x20]
c0018b23:	6a 00                	push   0x0
c0018b25:	89 f8                	mov    eax,edi
c0018b27:	0f b6 c0             	movzx  eax,al
c0018b2a:	50                   	push   eax
c0018b2b:	89 f0                	mov    eax,esi
c0018b2d:	6a 00                	push   0x0
c0018b2f:	0f b6 c0             	movzx  eax,al
c0018b32:	6a 00                	push   0x0
c0018b34:	50                   	push   eax
c0018b35:	53                   	push   ebx
c0018b36:	e8 33 65 00 00       	call   c001f06e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018b3b:	83 c4 20             	add    esp,0x20
c0018b3e:	e9 73 ff ff ff       	jmp    c0018ab6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018b43:	83 ec 0c             	sub    esp,0xc
c0018b46:	31 ff                	xor    edi,edi
c0018b48:	68 8c 30 02 c0       	push   0xc002308c
c0018b4d:	e8 70 61 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018b52:	83 c4 10             	add    esp,0x10
c0018b55:	e9 28 ff ff ff       	jmp    c0018a82 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018b5a:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018b5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b61:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018b68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b6c:	5b                   	pop    ebx
c0018b6d:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018b74:	89 f0                	mov    eax,esi
c0018b76:	5e                   	pop    esi
c0018b77:	5f                   	pop    edi
c0018b78:	c3                   	ret    

c0018b79 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018b79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018b81:	c1 e0 04             	shl    eax,0x4
c0018b84:	8d 50 10             	lea    edx,[eax+0x10]
c0018b87:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018b8d:	74 08                	je     c0018b97 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018b8f:	83 c0 04             	add    eax,0x4
c0018b92:	39 d0                	cmp    eax,edx
c0018b94:	75 f1                	jne    c0018b87 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018b96:	c3                   	ret    
c0018b97:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018ba1:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018bab:	eb e2                	jmp    c0018b8f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018bad <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018bad:	53                   	push   ebx
c0018bae:	83 ec 08             	sub    esp,0x8
c0018bb1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018bb5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018bba:	74 09                	je     c0018bc5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018bbc:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018bc3:	75 37                	jne    c0018bfc <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018bc9:	83 c0 20             	add    eax,0x20
c0018bcc:	c1 e0 04             	shl    eax,0x4
c0018bcf:	8d 50 10             	lea    edx,[eax+0x10]
c0018bd2:	39 98 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ebx
c0018bd8:	74 0c                	je     c0018be6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018bda:	83 c0 04             	add    eax,0x4
c0018bdd:	39 d0                	cmp    eax,edx
c0018bdf:	75 f1                	jne    c0018bd2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018be1:	83 c4 08             	add    esp,0x8
c0018be4:	5b                   	pop    ebx
c0018be5:	c3                   	ret    
c0018be6:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018bf0:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018bfa:	eb de                	jmp    c0018bda <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018bfc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018c01:	7f 11                	jg     c0018c14 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c07:	0f b6 80 28 3b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc4d8]
c0018c0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c12:	eb b1                	jmp    c0018bc5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018c14:	83 ec 0c             	sub    esp,0xc
c0018c17:	68 1e 31 02 c0       	push   0xc002311e
c0018c1c:	e8 a1 60 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0018c21:	83 c4 10             	add    esp,0x10
c0018c24:	eb 9f                	jmp    c0018bc5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018c26:	66 90                	xchg   ax,ax

c0018c28 <picIoWait()>:
c0018c28:	eb 00                	jmp    c0018c2a <picIoWait()+0x2>
c0018c2a:	eb 00                	jmp    c0018c2c <picIoWait()+0x4>
c0018c2c:	90                   	nop
c0018c2d:	c3                   	ret    
c0018c2e:	66 90                	xchg   ax,ax

c0018c30 <picDisable()>:
c0018c30:	83 ec 10             	sub    esp,0x10
c0018c33:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018c3a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018c3f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c43:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018c48:	ee                   	out    dx,al
c0018c49:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018c50:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018c55:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c59:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018c5e:	ee                   	out    dx,al
c0018c5f:	90                   	nop
c0018c60:	83 c4 10             	add    esp,0x10
c0018c63:	c3                   	ret    

c0018c64 <picGetIRQReg(int)>:
c0018c64:	83 ec 10             	sub    esp,0x10
c0018c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c6b:	0f b6 c0             	movzx  eax,al
c0018c6e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018c75:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018c79:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018c7d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018c82:	ee                   	out    dx,al
c0018c83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c87:	0f b6 c0             	movzx  eax,al
c0018c8a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018c91:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018c95:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018c99:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018c9e:	ee                   	out    dx,al
c0018c9f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018ca6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018cab:	89 c2                	mov    edx,eax
c0018cad:	ec                   	in     al,dx
c0018cae:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018cb2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018cb6:	0f b6 c0             	movzx  eax,al
c0018cb9:	c1 e0 08             	shl    eax,0x8
c0018cbc:	89 c1                	mov    ecx,eax
c0018cbe:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018cc5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018cca:	89 c2                	mov    edx,eax
c0018ccc:	ec                   	in     al,dx
c0018ccd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018cd1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018cd5:	0f b6 c0             	movzx  eax,al
c0018cd8:	09 c8                	or     eax,ecx
c0018cda:	83 c4 10             	add    esp,0x10
c0018cdd:	c3                   	ret    
c0018cde:	66 90                	xchg   ax,ax

c0018ce0 <picOpen()>:
c0018ce0:	83 ec 50             	sub    esp,0x50
c0018ce3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018cea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018cef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cf7:	ee                   	out    dx,al
c0018cf8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018cff:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d04:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018d0c:	ee                   	out    dx,al
c0018d0d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018d15:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018d1d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018d24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d28:	89 c2                	mov    edx,eax
c0018d2a:	ec                   	in     al,dx
c0018d2b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018d2f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018d33:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018d37:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018d3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d42:	89 c2                	mov    edx,eax
c0018d44:	ec                   	in     al,dx
c0018d45:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018d49:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018d4d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018d51:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018d58:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018d5d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018d61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d65:	ee                   	out    dx,al
c0018d66:	e8 bd fe ff ff       	call   c0018c28 <picIoWait()>
c0018d6b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018d72:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018d77:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018d7b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d7f:	ee                   	out    dx,al
c0018d80:	e8 a3 fe ff ff       	call   c0018c28 <picIoWait()>
c0018d85:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018d89:	0f b6 c0             	movzx  eax,al
c0018d8c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018d93:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018d97:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018d9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d9f:	ee                   	out    dx,al
c0018da0:	e8 83 fe ff ff       	call   c0018c28 <picIoWait()>
c0018da5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018da9:	0f b6 c0             	movzx  eax,al
c0018dac:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018db3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018db7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018dbb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018dbf:	ee                   	out    dx,al
c0018dc0:	e8 63 fe ff ff       	call   c0018c28 <picIoWait()>
c0018dc5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018dcc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018dd1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018dd5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018dd9:	ee                   	out    dx,al
c0018dda:	e8 49 fe ff ff       	call   c0018c28 <picIoWait()>
c0018ddf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018de6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018deb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018def:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018df3:	ee                   	out    dx,al
c0018df4:	e8 2f fe ff ff       	call   c0018c28 <picIoWait()>
c0018df9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018e00:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018e05:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018e09:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018e0d:	ee                   	out    dx,al
c0018e0e:	e8 15 fe ff ff       	call   c0018c28 <picIoWait()>
c0018e13:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018e1a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018e1f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018e23:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e27:	ee                   	out    dx,al
c0018e28:	e8 fb fd ff ff       	call   c0018c28 <picIoWait()>
c0018e2d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018e32:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018e39:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018e3d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018e41:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018e45:	ee                   	out    dx,al
c0018e46:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018e4b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018e52:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e56:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018e5a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018e5e:	ee                   	out    dx,al
c0018e5f:	90                   	nop
c0018e60:	83 c4 50             	add    esp,0x50
c0018e63:	c3                   	ret    

c0018e64 <picEOI(int)>:
c0018e64:	83 ec 10             	sub    esp,0x10
c0018e67:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e6c:	75 1e                	jne    c0018e8c <picEOI(int)+0x28>
c0018e6e:	6a 0b                	push   0xb
c0018e70:	e8 ef fd ff ff       	call   c0018c64 <picGetIRQReg(int)>
c0018e75:	83 c4 04             	add    esp,0x4
c0018e78:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018e7d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018e82:	25 80 00 00 00       	and    eax,0x80
c0018e87:	74 73                	je     c0018efc <picEOI(int)+0x98>
c0018e89:	8d 76 00             	lea    esi,[esi+0x0]
c0018e8c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018e91:	75 31                	jne    c0018ec4 <picEOI(int)+0x60>
c0018e93:	6a 0b                	push   0xb
c0018e95:	e8 ca fd ff ff       	call   c0018c64 <picGetIRQReg(int)>
c0018e9a:	83 c4 04             	add    esp,0x4
c0018e9d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018ea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ea6:	98                   	cwde   
c0018ea7:	85 c0                	test   eax,eax
c0018ea9:	78 19                	js     c0018ec4 <picEOI(int)+0x60>
c0018eab:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018eb2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018eb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ebb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018ec0:	ee                   	out    dx,al
c0018ec1:	eb 3d                	jmp    c0018f00 <picEOI(int)+0x9c>
c0018ec3:	90                   	nop
c0018ec4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018ec9:	7e 19                	jle    c0018ee4 <picEOI(int)+0x80>
c0018ecb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018ed2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018ed7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018edb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018ee0:	ee                   	out    dx,al
c0018ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018eeb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018ef0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018ef4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018ef9:	ee                   	out    dx,al
c0018efa:	eb 04                	jmp    c0018f00 <picEOI(int)+0x9c>
c0018efc:	90                   	nop
c0018efd:	8d 76 00             	lea    esi,[esi+0x0]
c0018f00:	83 c4 10             	add    esp,0x10
c0018f03:	c3                   	ret    

c0018f04 <RTC::open(int, int, void*)>:
c0018f04:	31 c0                	xor    eax,eax
c0018f06:	c3                   	ret    
c0018f07:	90                   	nop

c0018f08 <RTC::close(int, int, void*)>:
c0018f08:	31 c0                	xor    eax,eax
c0018f0a:	c3                   	ret    
c0018f0b:	90                   	nop

c0018f0c <RTC::timeInSecondsUTC()>:
c0018f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f10:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018f16:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018f1c:	c3                   	ret    
c0018f1d:	90                   	nop

c0018f1e <RTC::timeInDatetimeUTC()>:
c0018f1e:	53                   	push   ebx
c0018f1f:	83 ec 14             	sub    esp,0x14
c0018f22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018f2c:	50                   	push   eax
c0018f2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018f30:	83 c4 0c             	add    esp,0xc
c0018f33:	52                   	push   edx
c0018f34:	50                   	push   eax
c0018f35:	53                   	push   ebx
c0018f36:	e8 7b fe fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018f3b:	89 d8                	mov    eax,ebx
c0018f3d:	83 c4 14             	add    esp,0x14
c0018f40:	5b                   	pop    ebx
c0018f41:	c2 04 00             	ret    0x4

c0018f44 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018f44:	56                   	push   esi
c0018f45:	53                   	push   ebx
c0018f46:	83 ec 14             	sub    esp,0x14
c0018f49:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018f4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f4f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018f52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f56:	52                   	push   edx
c0018f57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018f5f:	50                   	push   eax
c0018f60:	e8 51 fe fe ff       	call   c0008db6 <KeSecondsToDatetime(unsigned long long)>
c0018f65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f69:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018f71:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018f75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018f79:	89 f0                	mov    eax,esi
c0018f7b:	83 c4 20             	add    esp,0x20
c0018f7e:	5b                   	pop    ebx
c0018f7f:	5e                   	pop    esi
c0018f80:	ff e0                	jmp    eax

c0018f82 <RTC::~RTC()>:
c0018f82:	83 ec 0c             	sub    esp,0xc
c0018f85:	ba 48 31 02 c0       	mov    edx,0xc0023148
c0018f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f8e:	89 10                	mov    DWORD PTR [eax],edx
c0018f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f94:	83 ec 0c             	sub    esp,0xc
c0018f97:	50                   	push   eax
c0018f98:	e8 ab fb fe ff       	call   c0008b48 <Clock::~Clock()>
c0018f9d:	83 c4 10             	add    esp,0x10
c0018fa0:	90                   	nop
c0018fa1:	83 c4 0c             	add    esp,0xc
c0018fa4:	c3                   	ret    
c0018fa5:	90                   	nop

c0018fa6 <RTC::~RTC()>:
c0018fa6:	83 ec 0c             	sub    esp,0xc
c0018fa9:	83 ec 0c             	sub    esp,0xc
c0018fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fb0:	e8 cd ff ff ff       	call   c0018f82 <RTC::~RTC()>
c0018fb5:	83 c4 10             	add    esp,0x10
c0018fb8:	83 ec 08             	sub    esp,0x8
c0018fbb:	68 60 01 00 00       	push   0x160
c0018fc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fc4:	e8 37 37 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0018fc9:	83 c4 10             	add    esp,0x10
c0018fcc:	83 c4 0c             	add    esp,0xc
c0018fcf:	c3                   	ret    

c0018fd0 <RTC::get_update_in_progress_flag()>:
c0018fd0:	83 ec 18             	sub    esp,0x18
c0018fd3:	6a 0a                	push   0xa
c0018fd5:	e8 69 db ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c0018fda:	83 c4 1c             	add    esp,0x1c
c0018fdd:	0f b6 c0             	movzx  eax,al
c0018fe0:	c1 e8 07             	shr    eax,0x7
c0018fe3:	c3                   	ret    

c0018fe4 <RTC::completeRTCRefresh()>:
c0018fe4:	55                   	push   ebp
c0018fe5:	57                   	push   edi
c0018fe6:	56                   	push   esi
c0018fe7:	53                   	push   ebx
c0018fe8:	83 ec 3c             	sub    esp,0x3c
c0018feb:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018ff1:	83 ec 0c             	sub    esp,0xc
c0018ff4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018ff8:	e8 d3 ff ff ff       	call   c0018fd0 <RTC::get_update_in_progress_flag()>
c0018ffd:	83 c4 10             	add    esp,0x10
c0019000:	84 c0                	test   al,al
c0019002:	74 0e                	je     c0019012 <RTC::completeRTCRefresh()+0x2e>
c0019004:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001900a:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0019010:	73 df                	jae    c0018ff1 <RTC::completeRTCRefresh()+0xd>
c0019012:	83 ec 0c             	sub    esp,0xc
c0019015:	6a 00                	push   0x0
c0019017:	e8 27 db ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001901c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019023:	89 c5                	mov    ebp,eax
c0019025:	e8 19 db ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001902a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019031:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019035:	e8 09 db ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001903a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019041:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019045:	e8 f9 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001904a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019051:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019055:	e8 e9 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001905a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019061:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019065:	e8 d9 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001906a:	0f b6 c0             	movzx  eax,al
c001906d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019071:	83 c4 10             	add    esp,0x10
c0019074:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c001907a:	83 ec 0c             	sub    esp,0xc
c001907d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019081:	e8 4a ff ff ff       	call   c0018fd0 <RTC::get_update_in_progress_flag()>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	84 c0                	test   al,al
c001908b:	74 0e                	je     c001909b <RTC::completeRTCRefresh()+0xb7>
c001908d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019093:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0019099:	73 df                	jae    c001907a <RTC::completeRTCRefresh()+0x96>
c001909b:	83 ec 0c             	sub    esp,0xc
c001909e:	6a 00                	push   0x0
c00190a0:	e8 9e da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190a5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00190ac:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00190b0:	e8 8e da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190b5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00190bc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00190c0:	e8 7e da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190c5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00190cc:	88 c3                	mov    bl,al
c00190ce:	e8 70 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190d3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00190da:	89 c6                	mov    esi,eax
c00190dc:	e8 62 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190e1:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00190e8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00190ec:	e8 52 da ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00190f1:	89 e9                	mov    ecx,ebp
c00190f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00190f7:	0f b6 f8             	movzx  edi,al
c00190fa:	83 c4 10             	add    esp,0x10
c00190fd:	0f b6 eb             	movzx  ebp,bl
c0019100:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019109:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001910e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019112:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019116:	0f 94 c0             	sete   al
c0019119:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001911d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0019121:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019126:	0f 94 c2             	sete   dl
c0019129:	21 d0                	and    eax,edx
c001912b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001912f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019133:	0f 94 c2             	sete   dl
c0019136:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001913a:	21 c2                	and    edx,eax
c001913c:	89 f0                	mov    eax,esi
c001913e:	0f b6 c0             	movzx  eax,al
c0019141:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019145:	89 f0                	mov    eax,esi
c0019147:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001914b:	0f 94 c0             	sete   al
c001914e:	21 d0                	and    eax,edx
c0019150:	31 d2                	xor    edx,edx
c0019152:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019156:	0f 94 c2             	sete   dl
c0019159:	85 c2                	test   edx,eax
c001915b:	75 27                	jne    c0019184 <RTC::completeRTCRefresh()+0x1a0>
c001915d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019161:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019165:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019169:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001916d:	89 f0                	mov    eax,esi
c001916f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0019173:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019177:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001917b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001917f:	e9 f0 fe ff ff       	jmp    c0019074 <RTC::completeRTCRefresh()+0x90>
c0019184:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c0019188:	75 d3                	jne    c001915d <RTC::completeRTCRefresh()+0x179>
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	6a 0b                	push   0xb
c001918f:	e8 af d9 ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c0019194:	83 c4 10             	add    esp,0x10
c0019197:	a8 04                	test   al,0x4
c0019199:	75 7a                	jne    c0019215 <RTC::completeRTCRefresh()+0x231>
c001919b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001919f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00191a3:	83 e1 0f             	and    ecx,0xf
c00191a6:	c1 ea 04             	shr    edx,0x4
c00191a9:	83 e6 0f             	and    esi,0xf
c00191ac:	6b d2 0a             	imul   edx,edx,0xa
c00191af:	c1 ef 04             	shr    edi,0x4
c00191b2:	01 d1                	add    ecx,edx
c00191b4:	6b ff 0a             	imul   edi,edi,0xa
c00191b7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00191bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00191bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00191c3:	c1 ea 04             	shr    edx,0x4
c00191c6:	83 e1 0f             	and    ecx,0xf
c00191c9:	6b d2 0a             	imul   edx,edx,0xa
c00191cc:	01 d1                	add    ecx,edx
c00191ce:	89 ea                	mov    edx,ebp
c00191d0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00191d4:	c1 ea 04             	shr    edx,0x4
c00191d7:	89 d9                	mov    ecx,ebx
c00191d9:	83 e2 07             	and    edx,0x7
c00191dc:	83 e1 0f             	and    ecx,0xf
c00191df:	6b d2 0a             	imul   edx,edx,0xa
c00191e2:	83 e3 80             	and    ebx,0xffffff80
c00191e5:	01 d1                	add    ecx,edx
c00191e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00191eb:	09 cb                	or     ebx,ecx
c00191ed:	c1 ea 04             	shr    edx,0x4
c00191f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00191f4:	6b d2 0a             	imul   edx,edx,0xa
c00191f7:	83 e1 0f             	and    ecx,0xf
c00191fa:	01 d6                	add    esi,edx
c00191fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019200:	c1 ea 04             	shr    edx,0x4
c0019203:	6b d2 0a             	imul   edx,edx,0xa
c0019206:	01 d1                	add    ecx,edx
c0019208:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001920c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019210:	83 e2 0f             	and    edx,0xf
c0019213:	01 d7                	add    edi,edx
c0019215:	a8 02                	test   al,0x2
c0019217:	75 15                	jne    c001922e <RTC::completeRTCRefresh()+0x24a>
c0019219:	f6 c3 80             	test   bl,0x80
c001921c:	74 10                	je     c001922e <RTC::completeRTCRefresh()+0x24a>
c001921e:	83 e3 7f             	and    ebx,0x7f
c0019221:	b9 18 00 00 00       	mov    ecx,0x18
c0019226:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019229:	99                   	cdq    
c001922a:	f7 f9                	idiv   ecx
c001922c:	88 d3                	mov    bl,dl
c001922e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019234:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001923a:	77 06                	ja     c0019242 <RTC::completeRTCRefresh()+0x25e>
c001923c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019247:	31 c9                	xor    ecx,ecx
c0019249:	c1 e0 10             	shl    eax,0x10
c001924c:	89 cf                	mov    edi,ecx
c001924e:	c1 e5 10             	shl    ebp,0x10
c0019251:	31 d2                	xor    edx,edx
c0019253:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019259:	09 c7                	or     edi,eax
c001925b:	89 f0                	mov    eax,esi
c001925d:	89 f9                	mov    ecx,edi
c001925f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019263:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019267:	88 c2                	mov    dl,al
c0019269:	88 d9                	mov    cl,bl
c001926b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001926f:	0f b7 c2             	movzx  eax,dx
c0019272:	09 e8                	or     eax,ebp
c0019274:	89 c2                	mov    edx,eax
c0019276:	50                   	push   eax
c0019277:	50                   	push   eax
c0019278:	51                   	push   ecx
c0019279:	52                   	push   edx
c001927a:	e8 b8 f9 fe ff       	call   c0008c37 <KeDatetimeToSeconds(datetime_t)>
c001927f:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019283:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019289:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001928f:	83 c4 4c             	add    esp,0x4c
c0019292:	5b                   	pop    ebx
c0019293:	5e                   	pop    esi
c0019294:	5f                   	pop    edi
c0019295:	5d                   	pop    ebp
c0019296:	c3                   	ret    
c0019297:	90                   	nop

c0019298 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019298:	55                   	push   ebp
c0019299:	57                   	push   edi
c001929a:	56                   	push   esi
c001929b:	53                   	push   ebx
c001929c:	83 ec 34             	sub    esp,0x34
c001929f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00192a3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00192a7:	6a 00                	push   0x0
c00192a9:	89 fb                	mov    ebx,edi
c00192ab:	6a 00                	push   0x0
c00192ad:	e8 e5 d8 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00192b2:	5d                   	pop    ebp
c00192b3:	58                   	pop    eax
c00192b4:	6a 00                	push   0x0
c00192b6:	6a 02                	push   0x2
c00192b8:	e8 da d8 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00192bd:	31 d2                	xor    edx,edx
c00192bf:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00192c6:	89 f9                	mov    ecx,edi
c00192c8:	89 f8                	mov    eax,edi
c00192ca:	c1 e9 10             	shr    ecx,0x10
c00192cd:	0f b6 c4             	movzx  eax,ah
c00192d0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00192d4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00192d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192dc:	b9 64 00 00 00       	mov    ecx,0x64
c00192e1:	89 f0                	mov    eax,esi
c00192e3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00192e7:	89 f0                	mov    eax,esi
c00192e9:	0f b6 c4             	movzx  eax,ah
c00192ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00192f0:	89 f0                	mov    eax,esi
c00192f2:	c1 e8 10             	shr    eax,0x10
c00192f5:	f7 f1                	div    ecx
c00192f7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00192fb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00192ff:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019303:	e8 3b d8 ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c0019308:	83 c4 10             	add    esp,0x10
c001930b:	89 c5                	mov    ebp,eax
c001930d:	a8 04                	test   al,0x4
c001930f:	75 6e                	jne    c001937f <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019311:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019315:	31 d2                	xor    edx,edx
c0019317:	0f b6 c1             	movzx  eax,cl
c001931a:	b9 0a 00 00 00       	mov    ecx,0xa
c001931f:	f7 f1                	div    ecx
c0019321:	c1 e0 04             	shl    eax,0x4
c0019324:	09 d0                	or     eax,edx
c0019326:	31 d2                	xor    edx,edx
c0019328:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001932c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019331:	f7 f1                	div    ecx
c0019333:	c1 e0 04             	shl    eax,0x4
c0019336:	09 d0                	or     eax,edx
c0019338:	31 d2                	xor    edx,edx
c001933a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001933e:	0f b6 c3             	movzx  eax,bl
c0019341:	f7 f1                	div    ecx
c0019343:	c1 e0 04             	shl    eax,0x4
c0019346:	09 d0                	or     eax,edx
c0019348:	31 d2                	xor    edx,edx
c001934a:	89 c3                	mov    ebx,eax
c001934c:	89 f0                	mov    eax,esi
c001934e:	0f b6 c0             	movzx  eax,al
c0019351:	f7 f1                	div    ecx
c0019353:	c1 e0 04             	shl    eax,0x4
c0019356:	09 d0                	or     eax,edx
c0019358:	31 d2                	xor    edx,edx
c001935a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001935e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019363:	f7 f1                	div    ecx
c0019365:	c1 e0 04             	shl    eax,0x4
c0019368:	09 d0                	or     eax,edx
c001936a:	31 d2                	xor    edx,edx
c001936c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019370:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019374:	f7 f1                	div    ecx
c0019376:	c1 e0 04             	shl    eax,0x4
c0019379:	09 d0                	or     eax,edx
c001937b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001937f:	83 e5 02             	and    ebp,0x2
c0019382:	75 1e                	jne    c00193a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019384:	0f b6 c3             	movzx  eax,bl
c0019387:	83 f8 0b             	cmp    eax,0xb
c001938a:	76 10                	jbe    c001939c <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001938c:	8d 53 f4             	lea    edx,[ebx-0xc]
c001938f:	88 d3                	mov    bl,dl
c0019391:	84 d2                	test   dl,dl
c0019393:	75 02                	jne    c0019397 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c0019395:	b3 0c                	mov    bl,0xc
c0019397:	83 cb 80             	or     ebx,0xffffff80
c001939a:	eb 06                	jmp    c00193a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001939c:	85 c0                	test   eax,eax
c001939e:	75 02                	jne    c00193a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00193a0:	b3 0c                	mov    bl,0xc
c00193a2:	0f b6 db             	movzx  ebx,bl
c00193a5:	50                   	push   eax
c00193a6:	50                   	push   eax
c00193a7:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00193ac:	52                   	push   edx
c00193ad:	6a 00                	push   0x0
c00193af:	e8 e3 d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193b4:	5a                   	pop    edx
c00193b5:	59                   	pop    ecx
c00193b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193bb:	50                   	push   eax
c00193bc:	6a 02                	push   0x2
c00193be:	e8 d4 d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193c3:	5e                   	pop    esi
c00193c4:	5f                   	pop    edi
c00193c5:	53                   	push   ebx
c00193c6:	6a 04                	push   0x4
c00193c8:	e8 ca d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193cd:	5d                   	pop    ebp
c00193ce:	58                   	pop    eax
c00193cf:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00193d4:	52                   	push   edx
c00193d5:	6a 07                	push   0x7
c00193d7:	e8 bb d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193dc:	58                   	pop    eax
c00193dd:	5a                   	pop    edx
c00193de:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00193e3:	50                   	push   eax
c00193e4:	6a 08                	push   0x8
c00193e6:	e8 ac d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193eb:	59                   	pop    ecx
c00193ec:	5b                   	pop    ebx
c00193ed:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00193f2:	55                   	push   ebp
c00193f3:	6a 09                	push   0x9
c00193f5:	e8 9d d7 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00193fa:	5e                   	pop    esi
c00193fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00193ff:	e8 e0 fb ff ff       	call   c0018fe4 <RTC::completeRTCRefresh()>
c0019404:	83 c4 3c             	add    esp,0x3c
c0019407:	b0 01                	mov    al,0x1
c0019409:	5b                   	pop    ebx
c001940a:	5e                   	pop    esi
c001940b:	5f                   	pop    edi
c001940c:	5d                   	pop    ebp
c001940d:	c3                   	ret    

c001940e <rtcIRQHandler(regs*, void*)>:
c001940e:	53                   	push   ebx
c001940f:	83 ec 14             	sub    esp,0x14
c0019412:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019416:	6a 0c                	push   0xc
c0019418:	e8 26 d7 ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	a8 80                	test   al,0x80
c0019422:	74 24                	je     c0019448 <rtcIRQHandler(regs*, void*)+0x3a>
c0019424:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001942b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019432:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019439:	75 0d                	jne    c0019448 <rtcIRQHandler(regs*, void*)+0x3a>
c001943b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001943f:	83 c4 08             	add    esp,0x8
c0019442:	5b                   	pop    ebx
c0019443:	e9 9c fb ff ff       	jmp    c0018fe4 <RTC::completeRTCRefresh()>
c0019448:	83 c4 08             	add    esp,0x8
c001944b:	5b                   	pop    ebx
c001944c:	c3                   	ret    
c001944d:	90                   	nop

c001944e <RTC::RTC()>:
c001944e:	83 ec 1c             	sub    esp,0x1c
c0019451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019455:	83 ec 08             	sub    esp,0x8
c0019458:	68 2b 31 02 c0       	push   0xc002312b
c001945d:	50                   	push   eax
c001945e:	e8 af f6 fe ff       	call   c0008b12 <Clock::Clock(char const*)>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	ba 48 31 02 c0       	mov    edx,0xc0023148
c001946b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001946f:	89 10                	mov    DWORD PTR [eax],edx
c0019471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019475:	83 ec 0c             	sub    esp,0xc
c0019478:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001947c:	6a 01                	push   0x1
c001947e:	68 0e 94 01 c0       	push   0xc001940e
c0019483:	6a 08                	push   0x8
c0019485:	50                   	push   eax
c0019486:	e8 63 fb fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001948b:	83 c4 20             	add    esp,0x20
c001948e:	89 c2                	mov    edx,eax
c0019490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019494:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001949a:	fa                   	cli    
c001949b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00194a0:	83 c0 01             	add    eax,0x1
c00194a3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00194a8:	83 ec 0c             	sub    esp,0xc
c00194ab:	6a 0b                	push   0xb
c00194ad:	e8 91 d6 ff ff       	call   c0016b43 <x86ReadCMOS(unsigned char)>
c00194b2:	83 c4 10             	add    esp,0x10
c00194b5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00194b9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00194bd:	83 c8 10             	or     eax,0x10
c00194c0:	0f b6 c0             	movzx  eax,al
c00194c3:	83 ec 08             	sub    esp,0x8
c00194c6:	50                   	push   eax
c00194c7:	6a 0b                	push   0xb
c00194c9:	e8 c9 d6 ff ff       	call   c0016b97 <x86WriteCMOS(unsigned char, unsigned char)>
c00194ce:	83 c4 10             	add    esp,0x10
c00194d1:	83 ec 0c             	sub    esp,0xc
c00194d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194d8:	e8 07 fb ff ff       	call   c0018fe4 <RTC::completeRTCRefresh()>
c00194dd:	83 c4 10             	add    esp,0x10
c00194e0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00194e8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00194ed:	85 c0                	test   eax,eax
c00194ef:	75 01                	jne    c00194f2 <RTC::RTC()+0xa4>
c00194f1:	fb                   	sti    
c00194f2:	90                   	nop
c00194f3:	83 c4 1c             	add    esp,0x1c
c00194f6:	c3                   	ret    
c00194f7:	90                   	nop

c00194f8 <HalConsoleScroll(int, int)>:
c00194f8:	83 ec 10             	sub    esp,0x10
c00194fb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0019503:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001950b:	90                   	nop
c001950c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019511:	0f 8f e1 00 00 00    	jg     c00195f8 <HalConsoleScroll(int, int)+0x100>
c0019517:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001951f:	90                   	nop
c0019520:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019528:	0f 8f be 00 00 00    	jg     c00195ec <HalConsoleScroll(int, int)+0xf4>
c001952e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019532:	89 d0                	mov    eax,edx
c0019534:	c1 e0 02             	shl    eax,0x2
c0019537:	01 d0                	add    eax,edx
c0019539:	c1 e0 05             	shl    eax,0x5
c001953c:	89 c2                	mov    edx,eax
c001953e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019542:	01 d0                	add    eax,edx
c0019544:	89 c2                	mov    edx,eax
c0019546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001954a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001954d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019551:	89 d0                	mov    eax,edx
c0019553:	c1 e0 02             	shl    eax,0x2
c0019556:	01 d0                	add    eax,edx
c0019558:	c1 e0 05             	shl    eax,0x5
c001955b:	89 c2                	mov    edx,eax
c001955d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019561:	01 d0                	add    eax,edx
c0019563:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001956d:	01 c2                	add    edx,eax
c001956f:	8a 01                	mov    al,BYTE PTR [ecx]
c0019571:	88 02                	mov    BYTE PTR [edx],al
c0019573:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019578:	75 66                	jne    c00195e0 <HalConsoleScroll(int, int)+0xe8>
c001957a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001957e:	83 e0 01             	and    eax,0x1
c0019581:	74 39                	je     c00195bc <HalConsoleScroll(int, int)+0xc4>
c0019583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019587:	83 e0 0f             	and    eax,0xf
c001958a:	88 c2                	mov    dl,al
c001958c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019590:	c1 e0 04             	shl    eax,0x4
c0019593:	09 d0                	or     eax,edx
c0019595:	88 c1                	mov    cl,al
c0019597:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001959b:	89 d0                	mov    eax,edx
c001959d:	c1 e0 02             	shl    eax,0x2
c00195a0:	01 d0                	add    eax,edx
c00195a2:	c1 e0 05             	shl    eax,0x5
c00195a5:	89 c2                	mov    edx,eax
c00195a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195ab:	01 d0                	add    eax,edx
c00195ad:	89 c2                	mov    edx,eax
c00195af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195b3:	01 d0                	add    eax,edx
c00195b5:	88 ca                	mov    dl,cl
c00195b7:	88 10                	mov    BYTE PTR [eax],dl
c00195b9:	eb 25                	jmp    c00195e0 <HalConsoleScroll(int, int)+0xe8>
c00195bb:	90                   	nop
c00195bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195c0:	89 d0                	mov    eax,edx
c00195c2:	c1 e0 02             	shl    eax,0x2
c00195c5:	01 d0                	add    eax,edx
c00195c7:	c1 e0 05             	shl    eax,0x5
c00195ca:	89 c2                	mov    edx,eax
c00195cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195d0:	01 d0                	add    eax,edx
c00195d2:	89 c2                	mov    edx,eax
c00195d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195d8:	01 d0                	add    eax,edx
c00195da:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00195dd:	8d 76 00             	lea    esi,[esi+0x0]
c00195e0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00195e5:	e9 36 ff ff ff       	jmp    c0019520 <HalConsoleScroll(int, int)+0x28>
c00195ea:	66 90                	xchg   ax,ax
c00195ec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00195f1:	e9 16 ff ff ff       	jmp    c001950c <HalConsoleScroll(int, int)+0x14>
c00195f6:	66 90                	xchg   ax,ax
c00195f8:	90                   	nop
c00195f9:	83 c4 10             	add    esp,0x10
c00195fc:	c3                   	ret    
c00195fd:	8d 76 00             	lea    esi,[esi+0x0]

c0019600 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019600:	83 ec 14             	sub    esp,0x14
c0019603:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019607:	88 04 24             	mov    BYTE PTR [esp],al
c001960a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001960d:	0f b6 c0             	movzx  eax,al
c0019610:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019614:	89 d1                	mov    ecx,edx
c0019616:	83 e1 0f             	and    ecx,0xf
c0019619:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001961d:	c1 e2 04             	shl    edx,0x4
c0019620:	0f b6 d2             	movzx  edx,dl
c0019623:	09 ca                	or     edx,ecx
c0019625:	c1 e2 08             	shl    edx,0x8
c0019628:	09 d0                	or     eax,edx
c001962a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001962f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019637:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001963b:	89 d0                	mov    eax,edx
c001963d:	c1 e0 02             	shl    eax,0x2
c0019640:	01 d0                	add    eax,edx
c0019642:	c1 e0 04             	shl    eax,0x4
c0019645:	89 c2                	mov    edx,eax
c0019647:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001964b:	01 d0                	add    eax,edx
c001964d:	01 c0                	add    eax,eax
c001964f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019653:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019657:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001965c:	66 89 02             	mov    WORD PTR [edx],ax
c001965f:	90                   	nop
c0019660:	83 c4 14             	add    esp,0x14
c0019663:	c3                   	ret    

c0019664 <HalConsoleCursorUpdate(int, int)>:
c0019664:	83 ec 20             	sub    esp,0x20
c0019667:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001966b:	89 c2                	mov    edx,eax
c001966d:	c1 e2 02             	shl    edx,0x2
c0019670:	01 d0                	add    eax,edx
c0019672:	c1 e0 04             	shl    eax,0x4
c0019675:	89 c2                	mov    edx,eax
c0019677:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001967b:	01 d0                	add    eax,edx
c001967d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019682:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019689:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001968e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019692:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019696:	ee                   	out    dx,al
c0019697:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001969c:	0f b6 c0             	movzx  eax,al
c001969f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00196a6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00196aa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00196ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196b2:	ee                   	out    dx,al
c00196b3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00196ba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00196bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00196c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00196c7:	ee                   	out    dx,al
c00196c8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00196cd:	c1 e8 08             	shr    eax,0x8
c00196d0:	0f b6 c0             	movzx  eax,al
c00196d3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00196da:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00196de:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00196e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e6:	ee                   	out    dx,al
c00196e7:	90                   	nop
c00196e8:	83 c4 20             	add    esp,0x20
c00196eb:	c3                   	ret    

c00196ec <FAT::getName()>:
c00196ec:	b8 7c 31 02 c0       	mov    eax,0xc002317c
c00196f1:	c3                   	ret    
c00196f2:	66 90                	xchg   ax,ax

c00196f4 <FAT::tell(void*, unsigned long long*)>:
c00196f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196f9:	75 09                	jne    c0019704 <FAT::tell(void*, unsigned long long*)+0x10>
c00196fb:	b8 04 00 00 00       	mov    eax,0x4
c0019700:	c3                   	ret    
c0019701:	8d 76 00             	lea    esi,[esi+0x0]
c0019704:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019709:	75 09                	jne    c0019714 <FAT::tell(void*, unsigned long long*)+0x20>
c001970b:	b8 04 00 00 00       	mov    eax,0x4
c0019710:	c3                   	ret    
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019718:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001971b:	ba 00 00 00 00       	mov    edx,0x0
c0019720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019724:	89 01                	mov    DWORD PTR [ecx],eax
c0019726:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019729:	b8 00 00 00 00       	mov    eax,0x0
c001972e:	c3                   	ret    
c001972f:	90                   	nop

c0019730 <FAT::stat(void*, unsigned long long*)>:
c0019730:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019735:	75 09                	jne    c0019740 <FAT::stat(void*, unsigned long long*)+0x10>
c0019737:	b8 04 00 00 00       	mov    eax,0x4
c001973c:	c3                   	ret    
c001973d:	8d 76 00             	lea    esi,[esi+0x0]
c0019740:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019745:	75 09                	jne    c0019750 <FAT::stat(void*, unsigned long long*)+0x20>
c0019747:	b8 04 00 00 00       	mov    eax,0x4
c001974c:	c3                   	ret    
c001974d:	8d 76 00             	lea    esi,[esi+0x0]
c0019750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019754:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019757:	ba 00 00 00 00       	mov    edx,0x0
c001975c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019760:	89 01                	mov    DWORD PTR [ecx],eax
c0019762:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019765:	b8 00 00 00 00       	mov    eax,0x0
c001976a:	c3                   	ret    
c001976b:	90                   	nop

c001976c <FAT::~FAT()>:
c001976c:	83 ec 0c             	sub    esp,0xc
c001976f:	ba c8 31 02 c0       	mov    edx,0xc00231c8
c0019774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019778:	89 10                	mov    DWORD PTR [eax],edx
c001977a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001977e:	83 ec 0c             	sub    esp,0xc
c0019781:	50                   	push   eax
c0019782:	e8 0d e6 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0019787:	83 c4 10             	add    esp,0x10
c001978a:	90                   	nop
c001978b:	83 c4 0c             	add    esp,0xc
c001978e:	c3                   	ret    
c001978f:	90                   	nop

c0019790 <FAT::~FAT()>:
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	83 ec 0c             	sub    esp,0xc
c0019796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001979a:	e8 cd ff ff ff       	call   c001976c <FAT::~FAT()>
c001979f:	83 c4 10             	add    esp,0x10
c00197a2:	83 ec 08             	sub    esp,0x8
c00197a5:	6a 08                	push   0x8
c00197a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197ab:	e8 50 2f ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00197b0:	83 c4 10             	add    esp,0x10
c00197b3:	83 c4 0c             	add    esp,0xc
c00197b6:	c3                   	ret    
c00197b7:	90                   	nop

c00197b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00197b8:	83 ec 1c             	sub    esp,0x1c
c00197bb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00197c2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00197c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197cb:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197d2:	83 f8 ff             	cmp    eax,0xffffffff
c00197d5:	75 35                	jne    c001980c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00197d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00197db:	88 c2                	mov    dl,al
c00197dd:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197e2:	01 d0                	add    eax,edx
c00197e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197e8:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197f2:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197f9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019802:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019809:	eb 19                	jmp    c0019824 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001980b:	90                   	nop
c001980c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019810:	88 c2                	mov    dl,al
c0019812:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019816:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001981d:	01 d0                	add    eax,edx
c001981f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019823:	90                   	nop
c0019824:	83 ec 04             	sub    esp,0x4
c0019827:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001982b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001982f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019833:	50                   	push   eax
c0019834:	e8 7f b9 fe ff       	call   c00051b8 <f_getlabel>
c0019839:	83 c4 10             	add    esp,0x10
c001983c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019840:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019845:	75 09                	jne    c0019850 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019847:	b8 00 00 00 00       	mov    eax,0x0
c001984c:	eb 0a                	jmp    c0019858 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001984e:	66 90                	xchg   ax,ax
c0019850:	b8 01 00 00 00       	mov    eax,0x1
c0019855:	8d 76 00             	lea    esi,[esi+0x0]
c0019858:	83 c4 1c             	add    esp,0x1c
c001985b:	c3                   	ret    

c001985c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001985c:	57                   	push   edi
c001985d:	83 ec 58             	sub    esp,0x58
c0019860:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019868:	8d 54 24 10          	lea    edx,[esp+0x10]
c001986c:	b8 00 00 00 00       	mov    eax,0x0
c0019871:	b9 0f 00 00 00       	mov    ecx,0xf
c0019876:	fc                   	cld    
c0019877:	89 d7                	mov    edi,edx
c0019879:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001987b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001987f:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019886:	83 f8 ff             	cmp    eax,0xffffffff
c0019889:	75 35                	jne    c00198c0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001988b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001988f:	88 c2                	mov    dl,al
c0019891:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019896:	01 d0                	add    eax,edx
c0019898:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001989c:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00198a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198a6:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00198ad:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00198b2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00198b6:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00198bd:	eb 19                	jmp    c00198d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00198bf:	90                   	nop
c00198c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00198c4:	88 c2                	mov    dl,al
c00198c6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00198ca:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00198d1:	01 d0                	add    eax,edx
c00198d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00198d7:	90                   	nop
c00198d8:	83 ec 08             	sub    esp,0x8
c00198db:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00198df:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198e3:	50                   	push   eax
c00198e4:	e8 57 6f fe ff       	call   c0000840 <strcat>
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	83 ec 0c             	sub    esp,0xc
c00198ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198f3:	50                   	push   eax
c00198f4:	e8 10 ba fe ff       	call   c0005309 <f_setlabel>
c00198f9:	83 c4 10             	add    esp,0x10
c00198fc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019900:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019905:	75 09                	jne    c0019910 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019907:	b8 00 00 00 00       	mov    eax,0x0
c001990c:	eb 0a                	jmp    c0019918 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001990e:	66 90                	xchg   ax,ax
c0019910:	b8 01 00 00 00       	mov    eax,0x1
c0019915:	8d 76 00             	lea    esi,[esi+0x0]
c0019918:	83 c4 58             	add    esp,0x58
c001991b:	5f                   	pop    edi
c001991c:	c3                   	ret    
c001991d:	90                   	nop
c001991e:	66 90                	xchg   ax,ax

c0019920 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019920:	83 ec 2c             	sub    esp,0x2c
c0019923:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001992b:	83 ec 08             	sub    esp,0x8
c001992e:	68 a0 31 02 c0       	push   0xc00231a0
c0019933:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019937:	e8 14 6e fe ff       	call   c0000750 <strcmp>
c001993c:	83 c4 10             	add    esp,0x10
c001993f:	85 c0                	test   eax,eax
c0019941:	0f 94 c0             	sete   al
c0019944:	0f b6 c0             	movzx  eax,al
c0019947:	85 c0                	test   eax,eax
c0019949:	74 0d                	je     c0019958 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001994b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019953:	e9 c0 00 00 00       	jmp    c0019a18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019958:	83 ec 08             	sub    esp,0x8
c001995b:	68 92 31 02 c0       	push   0xc0023192
c0019960:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019964:	e8 e7 6d fe ff       	call   c0000750 <strcmp>
c0019969:	83 c4 10             	add    esp,0x10
c001996c:	85 c0                	test   eax,eax
c001996e:	0f 94 c0             	sete   al
c0019971:	0f b6 c0             	movzx  eax,al
c0019974:	85 c0                	test   eax,eax
c0019976:	74 10                	je     c0019988 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019978:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019980:	e9 93 00 00 00       	jmp    c0019a18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019985:	8d 76 00             	lea    esi,[esi+0x0]
c0019988:	83 ec 08             	sub    esp,0x8
c001998b:	68 98 31 02 c0       	push   0xc0023198
c0019990:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019994:	e8 b7 6d fe ff       	call   c0000750 <strcmp>
c0019999:	83 c4 10             	add    esp,0x10
c001999c:	85 c0                	test   eax,eax
c001999e:	0f 94 c0             	sete   al
c00199a1:	0f b6 c0             	movzx  eax,al
c00199a4:	85 c0                	test   eax,eax
c00199a6:	74 0c                	je     c00199b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00199a8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00199b0:	eb 66                	jmp    c0019a18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199b2:	66 90                	xchg   ax,ax
c00199b4:	83 ec 08             	sub    esp,0x8
c00199b7:	68 fc 08 02 c0       	push   0xc00208fc
c00199bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199c0:	e8 8b 6d fe ff       	call   c0000750 <strcmp>
c00199c5:	83 c4 10             	add    esp,0x10
c00199c8:	85 c0                	test   eax,eax
c00199ca:	0f 94 c0             	sete   al
c00199cd:	0f b6 c0             	movzx  eax,al
c00199d0:	85 c0                	test   eax,eax
c00199d2:	74 0c                	je     c00199e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00199d4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00199dc:	eb 3a                	jmp    c0019a18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00199de:	66 90                	xchg   ax,ax
c00199e0:	83 ec 08             	sub    esp,0x8
c00199e3:	68 9e 31 02 c0       	push   0xc002319e
c00199e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00199ec:	e8 5f 6d fe ff       	call   c0000750 <strcmp>
c00199f1:	83 c4 10             	add    esp,0x10
c00199f4:	85 c0                	test   eax,eax
c00199f6:	0f 94 c0             	sete   al
c00199f9:	0f b6 c0             	movzx  eax,al
c00199fc:	85 c0                	test   eax,eax
c00199fe:	74 0c                	je     c0019a0c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019a00:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019a08:	eb 0e                	jmp    c0019a18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019a0a:	66 90                	xchg   ax,ax
c0019a0c:	b8 08 00 00 00       	mov    eax,0x8
c0019a11:	e9 ea 00 00 00       	jmp    c0019b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a16:	66 90                	xchg   ax,ax
c0019a18:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019a1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019a24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a28:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a2f:	83 f8 ff             	cmp    eax,0xffffffff
c0019a32:	75 34                	jne    c0019a68 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019a34:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a38:	88 c2                	mov    dl,al
c0019a3a:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a3f:	01 d0                	add    eax,edx
c0019a41:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a45:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019a4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a4f:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019a56:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a5b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019a5f:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019a66:	eb 18                	jmp    c0019a80 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019a68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019a6c:	88 c2                	mov    dl,al
c0019a6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a72:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a79:	01 d0                	add    eax,edx
c0019a7b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a7f:	90                   	nop
c0019a80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a84:	88 04 24             	mov    BYTE PTR [esp],al
c0019a87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019a8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a97:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019a9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019aa4:	83 ec 0c             	sub    esp,0xc
c0019aa7:	68 00 20 00 00       	push   0x2000
c0019aac:	e8 ca 4e ff ff       	call   c000e97b <malloc>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ab8:	68 00 20 00 00       	push   0x2000
c0019abd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ac1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ac5:	50                   	push   eax
c0019ac6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019aca:	50                   	push   eax
c0019acb:	e8 36 bb fe ff       	call   c0005606 <f_mkfs>
c0019ad0:	83 c4 10             	add    esp,0x10
c0019ad3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ad7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019adc:	75 0a                	jne    c0019ae8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019ade:	b8 00 00 00 00       	mov    eax,0x0
c0019ae3:	eb 1b                	jmp    c0019b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019aed:	75 09                	jne    c0019af8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019aef:	b8 09 00 00 00       	mov    eax,0x9
c0019af4:	eb 0a                	jmp    c0019b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019af6:	66 90                	xchg   ax,ax
c0019af8:	b8 01 00 00 00       	mov    eax,0x1
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	83 c4 2c             	add    esp,0x2c
c0019b03:	c3                   	ret    

c0019b04 <FAT::tryMount(LogicalDisk*, int)>:
c0019b04:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019b0a:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b0f:	83 f8 14             	cmp    eax,0x14
c0019b12:	75 18                	jne    c0019b2c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019b14:	83 ec 0c             	sub    esp,0xc
c0019b17:	68 a4 31 02 c0       	push   0xc00231a4
c0019b1c:	e8 a1 51 ff ff       	call   c000ecc2 <KePanic(char const*)>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	b0 00                	mov    al,0x0
c0019b26:	e9 ed 01 00 00       	jmp    c0019d18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b2b:	90                   	nop
c0019b2c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019b33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b3f:	3d 00 02 00 00       	cmp    eax,0x200
c0019b44:	74 0a                	je     c0019b50 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019b46:	b0 00                	mov    al,0x0
c0019b48:	e9 cb 01 00 00       	jmp    c0019d18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b50:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019b58:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b5f:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019b66:	83 f8 ff             	cmp    eax,0xffffffff
c0019b69:	74 09                	je     c0019b74 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019b6b:	b0 01                	mov    al,0x1
c0019b6d:	e9 a6 01 00 00       	jmp    c0019d18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b72:	66 90                	xchg   ax,ax
c0019b74:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019b7e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019b86:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019b8d:	88 c2                	mov    dl,al
c0019b8f:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b94:	01 d0                	add    eax,edx
c0019b96:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019b9d:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019ba3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019baa:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019bb1:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019bb6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019bbd:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019bc4:	83 ec 0c             	sub    esp,0xc
c0019bc7:	68 34 02 00 00       	push   0x234
c0019bcc:	e8 aa 4d ff ff       	call   c000e97b <malloc>
c0019bd1:	83 c4 10             	add    esp,0x10
c0019bd4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019bdb:	83 ec 04             	sub    esp,0x4
c0019bde:	6a 00                	push   0x0
c0019be0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019be7:	50                   	push   eax
c0019be8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019bef:	e8 ed a1 fe ff       	call   c0003de1 <f_mount>
c0019bf4:	83 c4 10             	add    esp,0x10
c0019bf7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019bfe:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019c06:	74 1c                	je     c0019c24 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019c08:	83 ec 0c             	sub    esp,0xc
c0019c0b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c12:	e8 84 4d ff ff       	call   c000e99b <rfree>
c0019c17:	83 c4 10             	add    esp,0x10
c0019c1a:	b0 00                	mov    al,0x0
c0019c1c:	e9 f7 00 00 00       	jmp    c0019d18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c21:	8d 76 00             	lea    esi,[esi+0x0]
c0019c24:	83 ec 04             	sub    esp,0x4
c0019c27:	68 00 01 00 00       	push   0x100
c0019c2c:	6a 00                	push   0x0
c0019c2e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c35:	50                   	push   eax
c0019c36:	e8 b5 68 fe ff       	call   c00004f0 <memset>
c0019c3b:	83 c4 10             	add    esp,0x10
c0019c3e:	83 ec 08             	sub    esp,0x8
c0019c41:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c48:	50                   	push   eax
c0019c49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c50:	50                   	push   eax
c0019c51:	e8 ea 6b fe ff       	call   c0000840 <strcat>
c0019c56:	83 c4 10             	add    esp,0x10
c0019c59:	83 ec 08             	sub    esp,0x8
c0019c5c:	68 b2 31 02 c0       	push   0xc00231b2
c0019c61:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019c68:	50                   	push   eax
c0019c69:	e8 d2 6b fe ff       	call   c0000840 <strcat>
c0019c6e:	83 c4 10             	add    esp,0x10
c0019c71:	83 ec 04             	sub    esp,0x4
c0019c74:	6a 01                	push   0x1
c0019c76:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019c7d:	50                   	push   eax
c0019c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c82:	50                   	push   eax
c0019c83:	e8 bb a1 fe ff       	call   c0003e43 <f_open>
c0019c88:	83 c4 10             	add    esp,0x10
c0019c8b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019c92:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019c99:	85 c0                	test   eax,eax
c0019c9b:	74 0b                	je     c0019ca8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019c9d:	78 31                	js     c0019cd0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c9f:	83 e8 04             	sub    eax,0x4
c0019ca2:	83 f8 01             	cmp    eax,0x1
c0019ca5:	77 29                	ja     c0019cd0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019ca7:	90                   	nop
c0019ca8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019cb0:	83 ec 0c             	sub    esp,0xc
c0019cb3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cb7:	50                   	push   eax
c0019cb8:	e8 55 a9 fe ff       	call   c0004612 <f_close>
c0019cbd:	83 c4 10             	add    esp,0x10
c0019cc0:	90                   	nop
c0019cc1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019cc9:	85 c0                	test   eax,eax
c0019ccb:	74 43                	je     c0019d10 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019ccd:	eb 31                	jmp    c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019ccf:	90                   	nop
c0019cd0:	83 ec 0c             	sub    esp,0xc
c0019cd3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019cda:	e8 bc 4c ff ff       	call   c000e99b <rfree>
c0019cdf:	83 c4 10             	add    esp,0x10
c0019ce2:	83 ec 04             	sub    esp,0x4
c0019ce5:	6a 00                	push   0x0
c0019ce7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019cee:	50                   	push   eax
c0019cef:	6a 00                	push   0x0
c0019cf1:	e8 eb a0 fe ff       	call   c0003de1 <f_mount>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	b0 00                	mov    al,0x0
c0019cfb:	eb 1b                	jmp    c0019d18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019d05:	83 c0 01             	add    eax,0x1
c0019d08:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d10:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019d17:	90                   	nop
c0019d18:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019d1e:	c3                   	ret    
c0019d1f:	90                   	nop

c0019d20 <FAT::allocateSwapfile(char const*, int)>:
c0019d20:	55                   	push   ebp
c0019d21:	57                   	push   edi
c0019d22:	56                   	push   esi
c0019d23:	53                   	push   ebx
c0019d24:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019d2a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019d35:	83 ec 0c             	sub    esp,0xc
c0019d38:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019d3f:	e8 37 4c ff ff       	call   c000e97b <malloc>
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	89 c7                	mov    edi,eax
c0019d49:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019d4e:	83 ec 04             	sub    esp,0x4
c0019d51:	50                   	push   eax
c0019d52:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019d59:	57                   	push   edi
c0019d5a:	e8 b3 e3 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c0019d5f:	83 c4 10             	add    esp,0x10
c0019d62:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019d69:	83 ec 04             	sub    esp,0x4
c0019d6c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019d70:	50                   	push   eax
c0019d71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d75:	50                   	push   eax
c0019d76:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d7d:	e8 b0 e6 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0019d82:	83 c4 10             	add    esp,0x10
c0019d85:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d8c:	c1 e0 14             	shl    eax,0x14
c0019d8f:	89 c7                	mov    edi,eax
c0019d91:	89 c5                	mov    ebp,eax
c0019d93:	c1 fd 1f             	sar    ebp,0x1f
c0019d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d9e:	89 f9                	mov    ecx,edi
c0019da0:	31 c1                	xor    ecx,eax
c0019da2:	89 cb                	mov    ebx,ecx
c0019da4:	89 e9                	mov    ecx,ebp
c0019da6:	31 d1                	xor    ecx,edx
c0019da8:	89 ce                	mov    esi,ecx
c0019daa:	89 f0                	mov    eax,esi
c0019dac:	09 d8                	or     eax,ebx
c0019dae:	0f 84 9c 00 00 00    	je     c0019e50 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019db4:	83 ec 0c             	sub    esp,0xc
c0019db7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dbe:	e8 3b e5 fe ff       	call   c00082fe <File::unlink()>
c0019dc3:	83 c4 10             	add    esp,0x10
c0019dc6:	83 ec 08             	sub    esp,0x8
c0019dc9:	6a 12                	push   0x12
c0019dcb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dd2:	e8 59 e3 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019dd7:	83 c4 10             	add    esp,0x10
c0019dda:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019de1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019de7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019dee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019df5:	c1 e0 14             	shl    eax,0x14
c0019df8:	83 ec 04             	sub    esp,0x4
c0019dfb:	6a 01                	push   0x1
c0019dfd:	50                   	push   eax
c0019dfe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019e05:	e8 8f b6 fe ff       	call   c0005499 <f_expand>
c0019e0a:	83 c4 10             	add    esp,0x10
c0019e0d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e16:	83 c0 10             	add    eax,0x10
c0019e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e1b:	83 ec 0c             	sub    esp,0xc
c0019e1e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e22:	52                   	push   edx
c0019e23:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019e27:	52                   	push   edx
c0019e28:	6a 00                	push   0x0
c0019e2a:	68 00 04 00 00       	push   0x400
c0019e2f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e36:	ff d0                	call   eax
c0019e38:	83 c4 20             	add    esp,0x20
c0019e3b:	83 ec 0c             	sub    esp,0xc
c0019e3e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e45:	e8 44 e3 fe ff       	call   c000818e <File::close()>
c0019e4a:	83 c4 10             	add    esp,0x10
c0019e4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e50:	83 ec 08             	sub    esp,0x8
c0019e53:	6a 01                	push   0x1
c0019e55:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e5c:	e8 cf e2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019e61:	83 c4 10             	add    esp,0x10
c0019e64:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e6d:	83 c0 0c             	add    eax,0xc
c0019e70:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e79:	52                   	push   edx
c0019e7a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019e7e:	52                   	push   edx
c0019e7f:	6a 00                	push   0x0
c0019e81:	6a 04                	push   0x4
c0019e83:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e8a:	ff d0                	call   eax
c0019e8c:	83 c4 20             	add    esp,0x20
c0019e8f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e96:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e9c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019ea3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019eaa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019ead:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019ebe:	e8 cb e2 fe ff       	call   c000818e <File::close()>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019ecd:	ba 00 00 00 00       	mov    edx,0x0
c0019ed2:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019ed8:	5b                   	pop    ebx
c0019ed9:	5e                   	pop    esi
c0019eda:	5f                   	pop    edi
c0019edb:	5d                   	pop    ebp
c0019edc:	c3                   	ret    
c0019edd:	90                   	nop
c0019ede:	66 90                	xchg   ax,ax

c0019ee0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019ee0:	57                   	push   edi
c0019ee1:	56                   	push   esi
c0019ee2:	53                   	push   ebx
c0019ee3:	81 ec 50 02 00 00    	sub    esp,0x250
c0019ee9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019ef1:	74 0d                	je     c0019f00 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019ef3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019efb:	75 0f                	jne    c0019f0c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019efd:	8d 76 00             	lea    esi,[esi+0x0]
c0019f00:	b8 04 00 00 00       	mov    eax,0x4
c0019f05:	e9 3a 01 00 00       	jmp    c001a044 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f0a:	66 90                	xchg   ax,ax
c0019f0c:	83 ec 08             	sub    esp,0x8
c0019f0f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f16:	50                   	push   eax
c0019f17:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019f1e:	e8 bc a9 fe ff       	call   c00048df <f_readdir>
c0019f23:	83 c4 10             	add    esp,0x10
c0019f26:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019f2d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019f34:	83 ec 0c             	sub    esp,0xc
c0019f37:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f3e:	83 c0 16             	add    eax,0x16
c0019f41:	50                   	push   eax
c0019f42:	e8 29 66 fe ff       	call   c0000570 <strlen>
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	ba 00 00 00 00       	mov    edx,0x0
c0019f4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f53:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019f57:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019f5e:	0f b6 c0             	movzx  eax,al
c0019f61:	83 e0 10             	and    eax,0x10
c0019f64:	74 0a                	je     c0019f70 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019f66:	b8 02 00 00 00       	mov    eax,0x2
c0019f6b:	eb 0b                	jmp    c0019f78 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f70:	b8 01 00 00 00       	mov    eax,0x1
c0019f75:	8d 76 00             	lea    esi,[esi+0x0]
c0019f78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f86:	83 c0 16             	add    eax,0x16
c0019f89:	50                   	push   eax
c0019f8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f8e:	83 c0 10             	add    eax,0x10
c0019f91:	50                   	push   eax
c0019f92:	e8 a9 66 fe ff       	call   c0000640 <strcpy>
c0019f97:	83 c4 10             	add    esp,0x10
c0019f9a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019fa1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019fa8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019fb3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019fba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019fc1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019fc8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019fcf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019fd6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019fdd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019fe4:	89 c6                	mov    esi,eax
c0019fe6:	89 d7                	mov    edi,edx
c0019fe8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fea:	89 c8                	mov    eax,ecx
c0019fec:	89 fa                	mov    edx,edi
c0019fee:	89 f3                	mov    ebx,esi
c0019ff0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019ff7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019ffe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a005:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a00c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a012:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a019:	0f be c0             	movsx  eax,al
c001a01c:	85 c0                	test   eax,eax
c001a01e:	75 08                	jne    c001a028 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a020:	b8 07 00 00 00       	mov    eax,0x7
c001a025:	eb 1d                	jmp    c001a044 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a027:	90                   	nop
c001a028:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a02f:	85 c0                	test   eax,eax
c001a031:	75 09                	jne    c001a03c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a033:	b8 00 00 00 00       	mov    eax,0x0
c001a038:	eb 0a                	jmp    c001a044 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a03a:	66 90                	xchg   ax,ax
c001a03c:	b8 01 00 00 00       	mov    eax,0x1
c001a041:	8d 76 00             	lea    esi,[esi+0x0]
c001a044:	81 c4 50 02 00 00    	add    esp,0x250
c001a04a:	5b                   	pop    ebx
c001a04b:	5e                   	pop    esi
c001a04c:	5f                   	pop    edi
c001a04d:	c3                   	ret    
c001a04e:	66 90                	xchg   ax,ax

c001a050 <FAT::read(void*, unsigned long, void*, int*)>:
c001a050:	83 ec 1c             	sub    esp,0x1c
c001a053:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a058:	74 0a                	je     c001a064 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a05a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a05f:	75 0b                	jne    c001a06c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a061:	8d 76 00             	lea    esi,[esi+0x0]
c001a064:	b8 04 00 00 00       	mov    eax,0x4
c001a069:	eb 41                	jmp    c001a0ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a06b:	90                   	nop
c001a06c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a070:	50                   	push   eax
c001a071:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a075:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a079:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a07d:	e8 84 a0 fe ff       	call   c0004106 <f_read>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a089:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a08d:	89 c2                	mov    edx,eax
c001a08f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a093:	89 10                	mov    DWORD PTR [eax],edx
c001a095:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a099:	85 c0                	test   eax,eax
c001a09b:	75 07                	jne    c001a0a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a09d:	b8 00 00 00 00       	mov    eax,0x0
c001a0a2:	eb 08                	jmp    c001a0ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a0a4:	b8 01 00 00 00       	mov    eax,0x1
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	83 c4 1c             	add    esp,0x1c
c001a0af:	c3                   	ret    

c001a0b0 <FAT::write(void*, unsigned long, void*, int*)>:
c001a0b0:	83 ec 1c             	sub    esp,0x1c
c001a0b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0b8:	74 0a                	je     c001a0c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a0ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a0bf:	75 0b                	jne    c001a0cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a0c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0c4:	b8 04 00 00 00       	mov    eax,0x4
c001a0c9:	eb 41                	jmp    c001a10c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a0cb:	90                   	nop
c001a0cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a0d0:	50                   	push   eax
c001a0d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a0d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0dd:	e8 23 a2 fe ff       	call   c0004305 <f_write>
c001a0e2:	83 c4 10             	add    esp,0x10
c001a0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0ed:	89 c2                	mov    edx,eax
c001a0ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a0f3:	89 10                	mov    DWORD PTR [eax],edx
c001a0f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0f9:	85 c0                	test   eax,eax
c001a0fb:	75 07                	jne    c001a104 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a0fd:	b8 00 00 00 00       	mov    eax,0x0
c001a102:	eb 08                	jmp    c001a10c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a104:	b8 01 00 00 00       	mov    eax,0x1
c001a109:	8d 76 00             	lea    esi,[esi+0x0]
c001a10c:	83 c4 1c             	add    esp,0x1c
c001a10f:	c3                   	ret    

c001a110 <FAT::close(void*)>:
c001a110:	83 ec 1c             	sub    esp,0x1c
c001a113:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a118:	75 0a                	jne    c001a124 <FAT::close(void*)+0x14>
c001a11a:	b8 04 00 00 00       	mov    eax,0x4
c001a11f:	eb 3f                	jmp    c001a160 <FAT::close(void*)+0x50>
c001a121:	8d 76 00             	lea    esi,[esi+0x0]
c001a124:	83 ec 0c             	sub    esp,0xc
c001a127:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a12b:	e8 e2 a4 fe ff       	call   c0004612 <f_close>
c001a130:	83 c4 10             	add    esp,0x10
c001a133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a137:	83 ec 0c             	sub    esp,0xc
c001a13a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a13e:	e8 48 48 ff ff       	call   c000e98b <free>
c001a143:	83 c4 10             	add    esp,0x10
c001a146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a14a:	85 c0                	test   eax,eax
c001a14c:	75 0a                	jne    c001a158 <FAT::close(void*)+0x48>
c001a14e:	b8 00 00 00 00       	mov    eax,0x0
c001a153:	eb 0b                	jmp    c001a160 <FAT::close(void*)+0x50>
c001a155:	8d 76 00             	lea    esi,[esi+0x0]
c001a158:	b8 01 00 00 00       	mov    eax,0x1
c001a15d:	8d 76 00             	lea    esi,[esi+0x0]
c001a160:	83 c4 1c             	add    esp,0x1c
c001a163:	c3                   	ret    

c001a164 <FAT::closeDir(void*)>:
c001a164:	83 ec 1c             	sub    esp,0x1c
c001a167:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a16c:	75 0a                	jne    c001a178 <FAT::closeDir(void*)+0x14>
c001a16e:	b8 04 00 00 00       	mov    eax,0x4
c001a173:	eb 3f                	jmp    c001a1b4 <FAT::closeDir(void*)+0x50>
c001a175:	8d 76 00             	lea    esi,[esi+0x0]
c001a178:	83 ec 0c             	sub    esp,0xc
c001a17b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a17f:	e8 39 a7 fe ff       	call   c00048bd <f_closedir>
c001a184:	83 c4 10             	add    esp,0x10
c001a187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a18b:	83 ec 0c             	sub    esp,0xc
c001a18e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a192:	e8 f4 47 ff ff       	call   c000e98b <free>
c001a197:	83 c4 10             	add    esp,0x10
c001a19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a19e:	85 c0                	test   eax,eax
c001a1a0:	75 0a                	jne    c001a1ac <FAT::closeDir(void*)+0x48>
c001a1a2:	b8 00 00 00 00       	mov    eax,0x0
c001a1a7:	eb 0b                	jmp    c001a1b4 <FAT::closeDir(void*)+0x50>
c001a1a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1ac:	b8 01 00 00 00       	mov    eax,0x1
c001a1b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b4:	83 c4 1c             	add    esp,0x1c
c001a1b7:	c3                   	ret    

c001a1b8 <FAT::truncate(void*, unsigned long long)>:
c001a1b8:	83 ec 2c             	sub    esp,0x2c
c001a1bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a1d0:	75 0a                	jne    c001a1dc <FAT::truncate(void*, unsigned long long)+0x24>
c001a1d2:	b8 04 00 00 00       	mov    eax,0x4
c001a1d7:	eb 47                	jmp    c001a220 <FAT::truncate(void*, unsigned long long)+0x68>
c001a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a1e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a1e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a1ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1f3:	83 ec 08             	sub    esp,0x8
c001a1f6:	50                   	push   eax
c001a1f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1fb:	e8 41 a4 fe ff       	call   c0004641 <f_lseek>
c001a200:	83 c4 10             	add    esp,0x10
c001a203:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a20b:	85 c0                	test   eax,eax
c001a20d:	75 09                	jne    c001a218 <FAT::truncate(void*, unsigned long long)+0x60>
c001a20f:	b8 00 00 00 00       	mov    eax,0x0
c001a214:	eb 0a                	jmp    c001a220 <FAT::truncate(void*, unsigned long long)+0x68>
c001a216:	66 90                	xchg   ax,ax
c001a218:	b8 01 00 00 00       	mov    eax,0x1
c001a21d:	8d 76 00             	lea    esi,[esi+0x0]
c001a220:	83 c4 2c             	add    esp,0x2c
c001a223:	c3                   	ret    

c001a224 <FAT::seek(void*, unsigned long long)>:
c001a224:	83 ec 2c             	sub    esp,0x2c
c001a227:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a22b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a22f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a233:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a237:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a23c:	75 0a                	jne    c001a248 <FAT::seek(void*, unsigned long long)+0x24>
c001a23e:	b8 04 00 00 00       	mov    eax,0x4
c001a243:	eb 33                	jmp    c001a278 <FAT::seek(void*, unsigned long long)+0x54>
c001a245:	8d 76 00             	lea    esi,[esi+0x0]
c001a248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a24c:	83 ec 08             	sub    esp,0x8
c001a24f:	50                   	push   eax
c001a250:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a254:	e8 e8 a3 fe ff       	call   c0004641 <f_lseek>
c001a259:	83 c4 10             	add    esp,0x10
c001a25c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a264:	85 c0                	test   eax,eax
c001a266:	75 08                	jne    c001a270 <FAT::seek(void*, unsigned long long)+0x4c>
c001a268:	b8 00 00 00 00       	mov    eax,0x0
c001a26d:	eb 09                	jmp    c001a278 <FAT::seek(void*, unsigned long long)+0x54>
c001a26f:	90                   	nop
c001a270:	b8 01 00 00 00       	mov    eax,0x1
c001a275:	8d 76 00             	lea    esi,[esi+0x0]
c001a278:	83 c4 2c             	add    esp,0x2c
c001a27b:	c3                   	ret    

c001a27c <fatWrapperReadDisk>:
c001a27c:	53                   	push   ebx
c001a27d:	83 ec 18             	sub    esp,0x18
c001a280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a284:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a288:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a28d:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a294:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a298:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a29c:	ba 00 00 00 00       	mov    edx,0x0
c001a2a1:	83 ec 0c             	sub    esp,0xc
c001a2a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2a8:	53                   	push   ebx
c001a2a9:	52                   	push   edx
c001a2aa:	50                   	push   eax
c001a2ab:	51                   	push   ecx
c001a2ac:	e8 1b fe fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001a2b1:	83 c4 20             	add    esp,0x20
c001a2b4:	83 c4 18             	add    esp,0x18
c001a2b7:	5b                   	pop    ebx
c001a2b8:	c3                   	ret    
c001a2b9:	8d 76 00             	lea    esi,[esi+0x0]

c001a2bc <fatWrapperWriteDisk>:
c001a2bc:	53                   	push   ebx
c001a2bd:	83 ec 18             	sub    esp,0x18
c001a2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2cd:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a2d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a2d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a2dc:	ba 00 00 00 00       	mov    edx,0x0
c001a2e1:	83 ec 0c             	sub    esp,0xc
c001a2e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a2e8:	53                   	push   ebx
c001a2e9:	52                   	push   edx
c001a2ea:	50                   	push   eax
c001a2eb:	51                   	push   ecx
c001a2ec:	e8 47 fe fe ff       	call   c000a138 <LogicalDisk::write(unsigned long long, int, void*)>
c001a2f1:	83 c4 20             	add    esp,0x20
c001a2f4:	83 c4 18             	add    esp,0x18
c001a2f7:	5b                   	pop    ebx
c001a2f8:	c3                   	ret    
c001a2f9:	8d 76 00             	lea    esi,[esi+0x0]

c001a2fc <fatWrapperIoctl>:
c001a2fc:	53                   	push   ebx
c001a2fd:	83 ec 28             	sub    esp,0x28
c001a300:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a304:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a308:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a30c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a310:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a315:	83 f8 02             	cmp    eax,0x2
c001a318:	75 32                	jne    c001a34c <fatWrapperIoctl+0x50>
c001a31a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a31e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a322:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a327:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a32e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a334:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a33a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a33e:	66 89 02             	mov    WORD PTR [edx],ax
c001a341:	b8 00 00 00 00       	mov    eax,0x0
c001a346:	e9 c5 00 00 00       	jmp    c001a410 <fatWrapperIoctl+0x114>
c001a34b:	90                   	nop
c001a34c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a351:	83 f8 01             	cmp    eax,0x1
c001a354:	75 6a                	jne    c001a3c0 <fatWrapperIoctl+0xc4>
c001a356:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a35a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a35e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a363:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a36a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a370:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a376:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a37c:	89 c8                	mov    eax,ecx
c001a37e:	89 da                	mov    edx,ebx
c001a380:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a384:	c1 e0 0a             	shl    eax,0xa
c001a387:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a38c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a393:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a399:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a39f:	89 cb                	mov    ebx,ecx
c001a3a1:	c1 fb 1f             	sar    ebx,0x1f
c001a3a4:	53                   	push   ebx
c001a3a5:	51                   	push   ecx
c001a3a6:	52                   	push   edx
c001a3a7:	50                   	push   eax
c001a3a8:	e8 57 57 00 00       	call   c001fb04 <__udivdi3>
c001a3ad:	83 c4 10             	add    esp,0x10
c001a3b0:	89 c2                	mov    edx,eax
c001a3b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3b6:	89 10                	mov    DWORD PTR [eax],edx
c001a3b8:	b8 00 00 00 00       	mov    eax,0x0
c001a3bd:	eb 51                	jmp    c001a410 <fatWrapperIoctl+0x114>
c001a3bf:	90                   	nop
c001a3c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3c5:	85 c0                	test   eax,eax
c001a3c7:	75 07                	jne    c001a3d0 <fatWrapperIoctl+0xd4>
c001a3c9:	b8 00 00 00 00       	mov    eax,0x0
c001a3ce:	eb 40                	jmp    c001a410 <fatWrapperIoctl+0x114>
c001a3d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3d5:	83 f8 03             	cmp    eax,0x3
c001a3d8:	75 1a                	jne    c001a3f4 <fatWrapperIoctl+0xf8>
c001a3da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3e6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a3ec:	b8 00 00 00 00       	mov    eax,0x0
c001a3f1:	eb 1d                	jmp    c001a410 <fatWrapperIoctl+0x114>
c001a3f3:	90                   	nop
c001a3f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a3f9:	83 f8 04             	cmp    eax,0x4
c001a3fc:	75 0a                	jne    c001a408 <fatWrapperIoctl+0x10c>
c001a3fe:	b8 00 00 00 00       	mov    eax,0x0
c001a403:	eb 0b                	jmp    c001a410 <fatWrapperIoctl+0x114>
c001a405:	8d 76 00             	lea    esi,[esi+0x0]
c001a408:	b8 04 00 00 00       	mov    eax,0x4
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	83 c4 28             	add    esp,0x28
c001a413:	5b                   	pop    ebx
c001a414:	c3                   	ret    
c001a415:	90                   	nop
c001a416:	66 90                	xchg   ax,ax

c001a418 <FAT::FAT()>:
c001a418:	83 ec 1c             	sub    esp,0x1c
c001a41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a41f:	83 ec 0c             	sub    esp,0xc
c001a422:	50                   	push   eax
c001a423:	e8 48 d9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a428:	83 c4 10             	add    esp,0x10
c001a42b:	ba c8 31 02 c0       	mov    edx,0xc00231c8
c001a430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a434:	89 10                	mov    DWORD PTR [eax],edx
c001a436:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a440:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a448:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a44d:	7f 19                	jg     c001a468 <FAT::FAT()+0x50>
c001a44f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a453:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a45e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a463:	eb e3                	jmp    c001a448 <FAT::FAT()+0x30>
c001a465:	8d 76 00             	lea    esi,[esi+0x0]
c001a468:	90                   	nop
c001a469:	83 c4 1c             	add    esp,0x1c
c001a46c:	c3                   	ret    
c001a46d:	90                   	nop
c001a46e:	66 90                	xchg   ax,ax

c001a470 <FAT::fixFilepath(char*)>:
c001a470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a474:	8a 00                	mov    al,BYTE PTR [eax]
c001a476:	0f be c0             	movsx  eax,al
c001a479:	83 f8 40             	cmp    eax,0x40
c001a47c:	7e 2e                	jle    c001a4ac <FAT::fixFilepath(char*)+0x3c>
c001a47e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a482:	8a 00                	mov    al,BYTE PTR [eax]
c001a484:	83 e8 41             	sub    eax,0x41
c001a487:	88 c2                	mov    dl,al
c001a489:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a48d:	88 10                	mov    BYTE PTR [eax],dl
c001a48f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a493:	8a 00                	mov    al,BYTE PTR [eax]
c001a495:	0f be c0             	movsx  eax,al
c001a498:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a49f:	83 c0 30             	add    eax,0x30
c001a4a2:	88 c2                	mov    dl,al
c001a4a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4a8:	88 10                	mov    BYTE PTR [eax],dl
c001a4aa:	66 90                	xchg   ax,ax
c001a4ac:	90                   	nop
c001a4ad:	c3                   	ret    
c001a4ae:	66 90                	xchg   ax,ax

c001a4b0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a4b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a4be:	74 0c                	je     c001a4cc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a4c0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a4c8:	75 0e                	jne    c001a4d8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a4ca:	66 90                	xchg   ax,ax
c001a4cc:	b8 04 00 00 00       	mov    eax,0x4
c001a4d1:	e9 46 01 00 00       	jmp    c001a61c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a4d6:	66 90                	xchg   ax,ax
c001a4d8:	83 ec 08             	sub    esp,0x8
c001a4db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a4e6:	50                   	push   eax
c001a4e7:	e8 54 61 fe ff       	call   c0000640 <strcpy>
c001a4ec:	83 c4 10             	add    esp,0x10
c001a4ef:	83 ec 08             	sub    esp,0x8
c001a4f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a4f6:	50                   	push   eax
c001a4f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4fe:	e8 6d ff ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a50e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a515:	83 e0 01             	and    eax,0x1
c001a518:	74 12                	je     c001a52c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a51a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a521:	83 c8 01             	or     eax,0x1
c001a524:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a52b:	90                   	nop
c001a52c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a533:	83 e0 04             	and    eax,0x4
c001a536:	74 24                	je     c001a55c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a538:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a53f:	83 c8 30             	or     eax,0x30
c001a542:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a549:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a550:	83 c8 02             	or     eax,0x2
c001a553:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a55a:	66 90                	xchg   ax,ax
c001a55c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a563:	83 e0 02             	and    eax,0x2
c001a566:	74 14                	je     c001a57c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a568:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a56f:	83 c8 02             	or     eax,0x2
c001a572:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a579:	8d 76 00             	lea    esi,[esi+0x0]
c001a57c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a583:	83 e0 08             	and    eax,0x8
c001a586:	74 14                	je     c001a59c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a588:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a58f:	83 c8 04             	or     eax,0x4
c001a592:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a599:	8d 76 00             	lea    esi,[esi+0x0]
c001a59c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a5a3:	83 e0 10             	and    eax,0x10
c001a5a6:	74 14                	je     c001a5bc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a5a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a5af:	83 c8 08             	or     eax,0x8
c001a5b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a5b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5bc:	83 ec 0c             	sub    esp,0xc
c001a5bf:	68 28 02 00 00       	push   0x228
c001a5c4:	e8 b2 43 ff ff       	call   c000e97b <malloc>
c001a5c9:	83 c4 10             	add    esp,0x10
c001a5cc:	89 c2                	mov    edx,eax
c001a5ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5d5:	89 10                	mov    DWORD PTR [eax],edx
c001a5d7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a5df:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5e8:	83 ec 04             	sub    esp,0x4
c001a5eb:	52                   	push   edx
c001a5ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a5f0:	52                   	push   edx
c001a5f1:	50                   	push   eax
c001a5f2:	e8 4c 98 fe ff       	call   c0003e43 <f_open>
c001a5f7:	83 c4 10             	add    esp,0x10
c001a5fa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a601:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a609:	74 09                	je     c001a614 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a60b:	b8 01 00 00 00       	mov    eax,0x1
c001a610:	eb 0a                	jmp    c001a61c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a612:	66 90                	xchg   ax,ax
c001a614:	b8 00 00 00 00       	mov    eax,0x0
c001a619:	8d 76 00             	lea    esi,[esi+0x0]
c001a61c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a622:	c3                   	ret    
c001a623:	90                   	nop

c001a624 <FAT::openDir(char const*, void**)>:
c001a624:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a62a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a632:	74 0c                	je     c001a640 <FAT::openDir(char const*, void**)+0x1c>
c001a634:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a63c:	75 0e                	jne    c001a64c <FAT::openDir(char const*, void**)+0x28>
c001a63e:	66 90                	xchg   ax,ax
c001a640:	b8 04 00 00 00       	mov    eax,0x4
c001a645:	e9 82 00 00 00       	jmp    c001a6cc <FAT::openDir(char const*, void**)+0xa8>
c001a64a:	66 90                	xchg   ax,ax
c001a64c:	83 ec 08             	sub    esp,0x8
c001a64f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a656:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a65a:	50                   	push   eax
c001a65b:	e8 e0 5f fe ff       	call   c0000640 <strcpy>
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	83 ec 08             	sub    esp,0x8
c001a666:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a66a:	50                   	push   eax
c001a66b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a672:	e8 f9 fd ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001a677:	83 c4 10             	add    esp,0x10
c001a67a:	83 ec 0c             	sub    esp,0xc
c001a67d:	6a 30                	push   0x30
c001a67f:	e8 f7 42 ff ff       	call   c000e97b <malloc>
c001a684:	83 c4 10             	add    esp,0x10
c001a687:	89 c2                	mov    edx,eax
c001a689:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a690:	89 10                	mov    DWORD PTR [eax],edx
c001a692:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a699:	8b 00                	mov    eax,DWORD PTR [eax]
c001a69b:	83 ec 08             	sub    esp,0x8
c001a69e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a6a2:	52                   	push   edx
c001a6a3:	50                   	push   eax
c001a6a4:	e8 49 a1 fe ff       	call   c00047f2 <f_opendir>
c001a6a9:	83 c4 10             	add    esp,0x10
c001a6ac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a6b3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a6bb:	74 07                	je     c001a6c4 <FAT::openDir(char const*, void**)+0xa0>
c001a6bd:	b8 01 00 00 00       	mov    eax,0x1
c001a6c2:	eb 08                	jmp    c001a6cc <FAT::openDir(char const*, void**)+0xa8>
c001a6c4:	b8 00 00 00 00       	mov    eax,0x0
c001a6c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6d2:	c3                   	ret    
c001a6d3:	90                   	nop

c001a6d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a6d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a6da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a6e2:	75 0c                	jne    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a6e4:	b8 04 00 00 00       	mov    eax,0x4
c001a6e9:	e9 d6 00 00 00       	jmp    c001a7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6ee:	66 90                	xchg   ax,ax
c001a6f0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a6f8:	75 0a                	jne    c001a704 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a6fa:	b8 04 00 00 00       	mov    eax,0x4
c001a6ff:	e9 c0 00 00 00       	jmp    c001a7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a704:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a70c:	75 0a                	jne    c001a718 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a70e:	b8 04 00 00 00       	mov    eax,0x4
c001a713:	e9 ac 00 00 00       	jmp    c001a7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a718:	83 ec 08             	sub    esp,0x8
c001a71b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a722:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a729:	50                   	push   eax
c001a72a:	e8 11 5f fe ff       	call   c0000640 <strcpy>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	83 ec 08             	sub    esp,0x8
c001a735:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a73c:	50                   	push   eax
c001a73d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a744:	e8 27 fd ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	83 ec 08             	sub    esp,0x8
c001a74f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a753:	50                   	push   eax
c001a754:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a75b:	50                   	push   eax
c001a75c:	e8 10 a2 fe ff       	call   c0004971 <f_stat>
c001a761:	83 c4 10             	add    esp,0x10
c001a764:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a76b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a772:	85 c0                	test   eax,eax
c001a774:	74 0a                	je     c001a780 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a776:	83 f8 04             	cmp    eax,0x4
c001a779:	74 39                	je     c001a7b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a77b:	eb 3f                	jmp    c001a7bc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a77d:	8d 76 00             	lea    esi,[esi+0x0]
c001a780:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a784:	0f b6 c0             	movzx  eax,al
c001a787:	83 e0 10             	and    eax,0x10
c001a78a:	0f 95 c2             	setne  dl
c001a78d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a794:	88 10                	mov    BYTE PTR [eax],dl
c001a796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79a:	ba 00 00 00 00       	mov    edx,0x0
c001a79f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a7a6:	89 01                	mov    DWORD PTR [ecx],eax
c001a7a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a7ab:	b8 00 00 00 00       	mov    eax,0x0
c001a7b0:	eb 12                	jmp    c001a7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a7b2:	66 90                	xchg   ax,ax
c001a7b4:	b8 02 00 00 00       	mov    eax,0x2
c001a7b9:	eb 09                	jmp    c001a7c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a7bb:	90                   	nop
c001a7bc:	b8 01 00 00 00       	mov    eax,0x1
c001a7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a7ca:	c3                   	ret    
c001a7cb:	90                   	nop

c001a7cc <FAT::unlink(char const*)>:
c001a7cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7da:	75 08                	jne    c001a7e4 <FAT::unlink(char const*)+0x18>
c001a7dc:	b8 04 00 00 00       	mov    eax,0x4
c001a7e1:	eb 61                	jmp    c001a844 <FAT::unlink(char const*)+0x78>
c001a7e3:	90                   	nop
c001a7e4:	83 ec 08             	sub    esp,0x8
c001a7e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7f2:	50                   	push   eax
c001a7f3:	e8 48 5e fe ff       	call   c0000640 <strcpy>
c001a7f8:	83 c4 10             	add    esp,0x10
c001a7fb:	83 ec 08             	sub    esp,0x8
c001a7fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a802:	50                   	push   eax
c001a803:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a80a:	e8 61 fc ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001a80f:	83 c4 10             	add    esp,0x10
c001a812:	83 ec 0c             	sub    esp,0xc
c001a815:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a819:	50                   	push   eax
c001a81a:	e8 c4 a3 fe ff       	call   c0004be3 <f_unlink>
c001a81f:	83 c4 10             	add    esp,0x10
c001a822:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a829:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a830:	85 c0                	test   eax,eax
c001a832:	75 08                	jne    c001a83c <FAT::unlink(char const*)+0x70>
c001a834:	b8 00 00 00 00       	mov    eax,0x0
c001a839:	eb 09                	jmp    c001a844 <FAT::unlink(char const*)+0x78>
c001a83b:	90                   	nop
c001a83c:	b8 01 00 00 00       	mov    eax,0x1
c001a841:	8d 76 00             	lea    esi,[esi+0x0]
c001a844:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a84a:	c3                   	ret    
c001a84b:	90                   	nop

c001a84c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a84c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a852:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a859:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a860:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a864:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a868:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a870:	75 0a                	jne    c001a87c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a872:	b8 04 00 00 00       	mov    eax,0x4
c001a877:	e9 7c 01 00 00       	jmp    c001a9f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a87c:	83 ec 08             	sub    esp,0x8
c001a87f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a886:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a88a:	50                   	push   eax
c001a88b:	e8 b0 5d fe ff       	call   c0000640 <strcpy>
c001a890:	83 c4 10             	add    esp,0x10
c001a893:	83 ec 08             	sub    esp,0x8
c001a896:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a89a:	50                   	push   eax
c001a89b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a8a2:	e8 c9 fb ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001a8a7:	83 c4 10             	add    esp,0x10
c001a8aa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a8b2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a8ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8bf:	83 e0 01             	and    eax,0x1
c001a8c2:	74 14                	je     c001a8d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a8c4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8cb:	83 c8 01             	or     eax,0x1
c001a8ce:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8dd:	83 e0 02             	and    eax,0x2
c001a8e0:	74 12                	je     c001a8f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a8e2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8e9:	83 c8 20             	or     eax,0x20
c001a8ec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8f3:	90                   	nop
c001a8f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a8f9:	83 e0 04             	and    eax,0x4
c001a8fc:	74 12                	je     c001a910 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a8fe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a905:	83 c8 04             	or     eax,0x4
c001a908:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a90f:	90                   	nop
c001a910:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a915:	83 e0 08             	and    eax,0x8
c001a918:	74 12                	je     c001a92c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a91a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a921:	83 c8 02             	or     eax,0x2
c001a924:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a92b:	90                   	nop
c001a92c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a931:	83 e0 01             	and    eax,0x1
c001a934:	74 12                	je     c001a948 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a936:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a93d:	83 c8 01             	or     eax,0x1
c001a940:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a947:	90                   	nop
c001a948:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a94d:	83 e0 02             	and    eax,0x2
c001a950:	74 12                	je     c001a964 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a952:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a959:	83 c8 20             	or     eax,0x20
c001a95c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a963:	90                   	nop
c001a964:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a969:	83 e0 04             	and    eax,0x4
c001a96c:	74 12                	je     c001a980 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a96e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a975:	83 c8 04             	or     eax,0x4
c001a978:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a97f:	90                   	nop
c001a980:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a985:	83 e0 08             	and    eax,0x8
c001a988:	74 12                	je     c001a99c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a98a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a991:	83 c8 02             	or     eax,0x2
c001a994:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a99b:	90                   	nop
c001a99c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a9a3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a9aa:	09 d0                	or     eax,edx
c001a9ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a9b3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a9bb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a9c3:	83 ec 04             	sub    esp,0x4
c001a9c6:	52                   	push   edx
c001a9c7:	50                   	push   eax
c001a9c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a9cc:	50                   	push   eax
c001a9cd:	e8 86 a6 fe ff       	call   c0005058 <f_chmod>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a9dc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a9e3:	85 c0                	test   eax,eax
c001a9e5:	75 09                	jne    c001a9f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a9e7:	b8 00 00 00 00       	mov    eax,0x0
c001a9ec:	eb 0a                	jmp    c001a9f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a9ee:	66 90                	xchg   ax,ax
c001a9f0:	b8 01 00 00 00       	mov    eax,0x1
c001a9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a9fe:	c3                   	ret    
c001a9ff:	90                   	nop

c001aa00 <FAT::rename(char const*, char const*)>:
c001aa00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aa06:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aa0e:	74 0c                	je     c001aa1c <FAT::rename(char const*, char const*)+0x1c>
c001aa10:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aa18:	75 0e                	jne    c001aa28 <FAT::rename(char const*, char const*)+0x28>
c001aa1a:	66 90                	xchg   ax,ax
c001aa1c:	b8 04 00 00 00       	mov    eax,0x4
c001aa21:	e9 9e 00 00 00       	jmp    c001aac4 <FAT::rename(char const*, char const*)+0xc4>
c001aa26:	66 90                	xchg   ax,ax
c001aa28:	83 ec 08             	sub    esp,0x8
c001aa2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa32:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa39:	50                   	push   eax
c001aa3a:	e8 01 5c fe ff       	call   c0000640 <strcpy>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	83 ec 08             	sub    esp,0x8
c001aa45:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aa4c:	50                   	push   eax
c001aa4d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa54:	e8 17 fa ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001aa59:	83 c4 10             	add    esp,0x10
c001aa5c:	83 ec 08             	sub    esp,0x8
c001aa5f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aa66:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa6a:	50                   	push   eax
c001aa6b:	e8 d0 5b fe ff       	call   c0000640 <strcpy>
c001aa70:	83 c4 10             	add    esp,0x10
c001aa73:	83 ec 08             	sub    esp,0x8
c001aa76:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa7a:	50                   	push   eax
c001aa7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa82:	e8 e9 f9 ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001aa87:	83 c4 10             	add    esp,0x10
c001aa8a:	83 ec 08             	sub    esp,0x8
c001aa8d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa91:	50                   	push   eax
c001aa92:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa99:	50                   	push   eax
c001aa9a:	e8 01 a4 fe ff       	call   c0004ea0 <f_rename>
c001aa9f:	83 c4 10             	add    esp,0x10
c001aaa2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aaa9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aab0:	85 c0                	test   eax,eax
c001aab2:	75 08                	jne    c001aabc <FAT::rename(char const*, char const*)+0xbc>
c001aab4:	b8 00 00 00 00       	mov    eax,0x0
c001aab9:	eb 09                	jmp    c001aac4 <FAT::rename(char const*, char const*)+0xc4>
c001aabb:	90                   	nop
c001aabc:	b8 01 00 00 00       	mov    eax,0x1
c001aac1:	8d 76 00             	lea    esi,[esi+0x0]
c001aac4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aaca:	c3                   	ret    
c001aacb:	90                   	nop

c001aacc <FAT::mkdir(char const*)>:
c001aacc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aad2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aada:	75 08                	jne    c001aae4 <FAT::mkdir(char const*)+0x18>
c001aadc:	b8 04 00 00 00       	mov    eax,0x4
c001aae1:	eb 61                	jmp    c001ab44 <FAT::mkdir(char const*)+0x78>
c001aae3:	90                   	nop
c001aae4:	83 ec 08             	sub    esp,0x8
c001aae7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aaee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaf2:	50                   	push   eax
c001aaf3:	e8 48 5b fe ff       	call   c0000640 <strcpy>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	83 ec 08             	sub    esp,0x8
c001aafe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab02:	50                   	push   eax
c001ab03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab0a:	e8 61 f9 ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	83 ec 0c             	sub    esp,0xc
c001ab15:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab19:	50                   	push   eax
c001ab1a:	e8 e6 a1 fe ff       	call   c0004d05 <f_mkdir>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab29:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab30:	85 c0                	test   eax,eax
c001ab32:	75 08                	jne    c001ab3c <FAT::mkdir(char const*)+0x70>
c001ab34:	b8 00 00 00 00       	mov    eax,0x0
c001ab39:	eb 09                	jmp    c001ab44 <FAT::mkdir(char const*)+0x78>
c001ab3b:	90                   	nop
c001ab3c:	b8 01 00 00 00       	mov    eax,0x1
c001ab41:	8d 76 00             	lea    esi,[esi+0x0]
c001ab44:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab4a:	c3                   	ret    
c001ab4b:	90                   	nop

c001ab4c <FAT::exists(char const*)>:
c001ab4c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ab52:	83 ec 08             	sub    esp,0x8
c001ab55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab5c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab60:	50                   	push   eax
c001ab61:	e8 da 5a fe ff       	call   c0000640 <strcpy>
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	83 ec 08             	sub    esp,0x8
c001ab6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ab70:	50                   	push   eax
c001ab71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab78:	e8 f3 f8 ff ff       	call   c001a470 <FAT::fixFilepath(char*)>
c001ab7d:	83 c4 10             	add    esp,0x10
c001ab80:	83 ec 08             	sub    esp,0x8
c001ab83:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ab8a:	50                   	push   eax
c001ab8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab8f:	50                   	push   eax
c001ab90:	e8 dc 9d fe ff       	call   c0004971 <f_stat>
c001ab95:	83 c4 10             	add    esp,0x10
c001ab98:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab9f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aba6:	85 c0                	test   eax,eax
c001aba8:	75 06                	jne    c001abb0 <FAT::exists(char const*)+0x64>
c001abaa:	b0 01                	mov    al,0x1
c001abac:	eb 06                	jmp    c001abb4 <FAT::exists(char const*)+0x68>
c001abae:	66 90                	xchg   ax,ax
c001abb0:	b0 00                	mov    al,0x0
c001abb2:	66 90                	xchg   ax,ax
c001abb4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001abba:	c3                   	ret    
c001abbb:	90                   	nop

c001abbc <isoReadDiscSectorHelper>:
c001abbc:	83 ec 2c             	sub    esp,0x2c
c001abbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001abc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abc7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001abcc:	83 e8 41             	sub    eax,0x41
c001abcf:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001abd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abda:	ba 00 00 00 00       	mov    edx,0x0
c001abdf:	83 ec 0c             	sub    esp,0xc
c001abe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001abe6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001abea:	52                   	push   edx
c001abeb:	50                   	push   eax
c001abec:	51                   	push   ecx
c001abed:	e8 da f4 fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001abf2:	83 c4 20             	add    esp,0x20
c001abf5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abf9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abfe:	74 0c                	je     c001ac0c <isoReadDiscSectorHelper+0x50>
c001ac00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac04:	c1 e0 0b             	shl    eax,0xb
c001ac07:	eb 0b                	jmp    c001ac14 <isoReadDiscSectorHelper+0x58>
c001ac09:	8d 76 00             	lea    esi,[esi+0x0]
c001ac0c:	b8 00 00 00 00       	mov    eax,0x0
c001ac11:	8d 76 00             	lea    esi,[esi+0x0]
c001ac14:	83 c4 2c             	add    esp,0x2c
c001ac17:	c3                   	ret    

c001ac18 <iso_kprintf>:
c001ac18:	83 ec 0c             	sub    esp,0xc
c001ac1b:	83 ec 08             	sub    esp,0x8
c001ac1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac22:	68 9f 2e 02 c0       	push   0xc0022e9f
c001ac27:	e8 38 c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac2c:	83 c4 10             	add    esp,0x10
c001ac2f:	90                   	nop
c001ac30:	83 c4 0c             	add    esp,0xc
c001ac33:	c3                   	ret    

c001ac34 <iso_kprintfd>:
c001ac34:	83 ec 0c             	sub    esp,0xc
c001ac37:	83 ec 08             	sub    esp,0x8
c001ac3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ac3e:	68 61 15 02 c0       	push   0xc0021561
c001ac43:	e8 1c c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ac48:	83 c4 10             	add    esp,0x10
c001ac4b:	90                   	nop
c001ac4c:	83 c4 0c             	add    esp,0xc
c001ac4f:	c3                   	ret    

c001ac50 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ac50:	b8 08 00 00 00       	mov    eax,0x8
c001ac55:	c3                   	ret    

c001ac56 <ISO9660::truncate(void*, unsigned long long)>:
c001ac56:	b8 01 00 00 00       	mov    eax,0x1
c001ac5b:	c3                   	ret    

c001ac5c <ISO9660::getName()>:
c001ac5c:	b8 2c 32 02 c0       	mov    eax,0xc002322c
c001ac61:	c3                   	ret    

c001ac62 <ISO9660::closeDir(void*)>:
c001ac62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac66:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac68:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ac6b:	90                   	nop

c001ac6c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac6c:	b8 01 00 00 00       	mov    eax,0x1
c001ac71:	c3                   	ret    

c001ac72 <ISO9660::unlink(char const*)>:
c001ac72:	b8 01 00 00 00       	mov    eax,0x1
c001ac77:	c3                   	ret    

c001ac78 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ac78:	b8 03 00 00 00       	mov    eax,0x3
c001ac7d:	c3                   	ret    

c001ac7e <ISO9660::rename(char const*, char const*)>:
c001ac7e:	b8 01 00 00 00       	mov    eax,0x1
c001ac83:	c3                   	ret    

c001ac84 <ISO9660::mkdir(char const*)>:
c001ac84:	b8 01 00 00 00       	mov    eax,0x1
c001ac89:	c3                   	ret    

c001ac8a <ISO9660::~ISO9660()>:
c001ac8a:	83 ec 0c             	sub    esp,0xc
c001ac8d:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c001ac92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac96:	89 10                	mov    DWORD PTR [eax],edx
c001ac98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	50                   	push   eax
c001aca0:	e8 ef d0 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	90                   	nop
c001aca9:	83 c4 0c             	add    esp,0xc
c001acac:	c3                   	ret    
c001acad:	90                   	nop

c001acae <ISO9660::~ISO9660()>:
c001acae:	83 ec 0c             	sub    esp,0xc
c001acb1:	83 ec 0c             	sub    esp,0xc
c001acb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acb8:	e8 cd ff ff ff       	call   c001ac8a <ISO9660::~ISO9660()>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	83 ec 08             	sub    esp,0x8
c001acc3:	6a 08                	push   0x8
c001acc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acc9:	e8 32 1a ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001acce:	83 c4 10             	add    esp,0x10
c001acd1:	83 c4 0c             	add    esp,0xc
c001acd4:	c3                   	ret    
c001acd5:	90                   	nop

c001acd6 <ISO9660::exists(char const*)>:
c001acd6:	83 ec 18             	sub    esp,0x18
c001acd9:	68 47 32 02 c0       	push   0xc0023247
c001acde:	e8 df 3f ff ff       	call   c000ecc2 <KePanic(char const*)>
c001ace3:	31 c0                	xor    eax,eax
c001ace5:	83 c4 1c             	add    esp,0x1c
c001ace8:	c3                   	ret    
c001ace9:	90                   	nop

c001acea <ISO9660::open(char const*, void**, FileOpenMode)>:
c001acea:	56                   	push   esi
c001aceb:	53                   	push   ebx
c001acec:	53                   	push   ebx
c001aced:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001acf1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001acf5:	85 db                	test   ebx,ebx
c001acf7:	0f 84 ca 00 00 00    	je     c001adc7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001acfd:	85 f6                	test   esi,esi
c001acff:	0f 84 c2 00 00 00    	je     c001adc7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ad05:	b8 03 00 00 00       	mov    eax,0x3
c001ad0a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ad0f:	0f 85 b7 00 00 00    	jne    c001adcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad15:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ad17:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad1e:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ad24:	74 1b                	je     c001ad41 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ad26:	85 c0                	test   eax,eax
c001ad28:	74 10                	je     c001ad3a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ad2a:	83 ec 0c             	sub    esp,0xc
c001ad2d:	68 65 32 02 c0       	push   0xc0023265
c001ad32:	e8 8b 3f ff ff       	call   c000ecc2 <KePanic(char const*)>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ad3c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ad41:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad44:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad4b:	85 c0                	test   eax,eax
c001ad4d:	74 09                	je     c001ad58 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ad4f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ad56:	74 48                	je     c001ada0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	68 75 32 02 c0       	push   0xc0023275
c001ad60:	e8 ff c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ad65:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ad72:	85 c0                	test   eax,eax
c001ad74:	74 17                	je     c001ad8d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001ad76:	83 ec 0c             	sub    esp,0xc
c001ad79:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ad80:	68 95 32 02 c0       	push   0xc0023295
c001ad85:	e8 da c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	83 ec 0c             	sub    esp,0xc
c001ad90:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad97:	50                   	push   eax
c001ad98:	e8 91 be fe ff       	call   c0006c2e <init_percd>
c001ad9d:	83 c4 10             	add    esp,0x10
c001ada0:	83 c3 03             	add    ebx,0x3
c001ada3:	51                   	push   ecx
c001ada4:	51                   	push   ecx
c001ada5:	6a 00                	push   0x0
c001ada7:	53                   	push   ebx
c001ada8:	e8 48 b9 fe ff       	call   c00066f5 <iso_open>
c001adad:	83 c4 10             	add    esp,0x10
c001adb0:	89 c2                	mov    edx,eax
c001adb2:	b8 01 00 00 00       	mov    eax,0x1
c001adb7:	83 fa ff             	cmp    edx,0xffffffff
c001adba:	74 10                	je     c001adcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001adbc:	83 c2 32             	add    edx,0x32
c001adbf:	31 c0                	xor    eax,eax
c001adc1:	01 d2                	add    edx,edx
c001adc3:	89 16                	mov    DWORD PTR [esi],edx
c001adc5:	eb 05                	jmp    c001adcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001adc7:	b8 04 00 00 00       	mov    eax,0x4
c001adcc:	5a                   	pop    edx
c001adcd:	5b                   	pop    ebx
c001adce:	5e                   	pop    esi
c001adcf:	c3                   	ret    

c001add0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001add0:	53                   	push   ebx
c001add1:	83 ec 08             	sub    esp,0x8
c001add4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001add8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001addc:	85 c0                	test   eax,eax
c001adde:	74 2d                	je     c001ae0d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ade0:	85 db                	test   ebx,ebx
c001ade2:	74 29                	je     c001ae0d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ade4:	b9 02 00 00 00       	mov    ecx,0x2
c001ade9:	52                   	push   edx
c001adea:	99                   	cdq    
c001adeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adef:	f7 f9                	idiv   ecx
c001adf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001adf5:	83 e8 32             	sub    eax,0x32
c001adf8:	50                   	push   eax
c001adf9:	e8 9f b9 fe ff       	call   c000679d <iso_read>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	89 03                	mov    DWORD PTR [ebx],eax
c001ae03:	09 d0                	or     eax,edx
c001ae05:	0f 94 c0             	sete   al
c001ae08:	0f b6 c0             	movzx  eax,al
c001ae0b:	eb 05                	jmp    c001ae12 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ae0d:	b8 04 00 00 00       	mov    eax,0x4
c001ae12:	83 c4 08             	add    esp,0x8
c001ae15:	5b                   	pop    ebx
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <ISO9660::seek(void*, unsigned long long)>:
c001ae18:	57                   	push   edi
c001ae19:	56                   	push   esi
c001ae1a:	b8 04 00 00 00       	mov    eax,0x4
c001ae1f:	51                   	push   ecx
c001ae20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae24:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ae28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae2c:	85 d2                	test   edx,edx
c001ae2e:	74 26                	je     c001ae56 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ae30:	6a 00                	push   0x0
c001ae32:	b9 02 00 00 00       	mov    ecx,0x2
c001ae37:	57                   	push   edi
c001ae38:	89 d0                	mov    eax,edx
c001ae3a:	56                   	push   esi
c001ae3b:	99                   	cdq    
c001ae3c:	f7 f9                	idiv   ecx
c001ae3e:	83 e8 32             	sub    eax,0x32
c001ae41:	50                   	push   eax
c001ae42:	e8 6c ba fe ff       	call   c00068b3 <iso_seek>
c001ae47:	83 c4 10             	add    esp,0x10
c001ae4a:	31 f0                	xor    eax,esi
c001ae4c:	31 fa                	xor    edx,edi
c001ae4e:	09 d0                	or     eax,edx
c001ae50:	0f 95 c0             	setne  al
c001ae53:	0f b6 c0             	movzx  eax,al
c001ae56:	5a                   	pop    edx
c001ae57:	5e                   	pop    esi
c001ae58:	5f                   	pop    edi
c001ae59:	c3                   	ret    

c001ae5a <ISO9660::tell(void*, unsigned long long*)>:
c001ae5a:	53                   	push   ebx
c001ae5b:	83 ec 08             	sub    esp,0x8
c001ae5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae62:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae66:	85 c0                	test   eax,eax
c001ae68:	74 24                	je     c001ae8e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae6a:	85 db                	test   ebx,ebx
c001ae6c:	74 20                	je     c001ae8e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	b9 02 00 00 00       	mov    ecx,0x2
c001ae76:	99                   	cdq    
c001ae77:	f7 f9                	idiv   ecx
c001ae79:	83 e8 32             	sub    eax,0x32
c001ae7c:	50                   	push   eax
c001ae7d:	e8 b5 ba fe ff       	call   c0006937 <iso_tell>
c001ae82:	83 c4 10             	add    esp,0x10
c001ae85:	89 03                	mov    DWORD PTR [ebx],eax
c001ae87:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ae8a:	31 c0                	xor    eax,eax
c001ae8c:	eb 05                	jmp    c001ae93 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ae8e:	b8 04 00 00 00       	mov    eax,0x4
c001ae93:	83 c4 08             	add    esp,0x8
c001ae96:	5b                   	pop    ebx
c001ae97:	c3                   	ret    

c001ae98 <ISO9660::stat(void*, unsigned long long*)>:
c001ae98:	53                   	push   ebx
c001ae99:	83 ec 14             	sub    esp,0x14
c001ae9c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aea0:	68 b9 32 02 c0       	push   0xc00232b9
c001aea5:	e8 ba c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001aeaa:	83 c4 10             	add    esp,0x10
c001aead:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aeb2:	74 2c                	je     c001aee0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001aeb4:	85 db                	test   ebx,ebx
c001aeb6:	74 28                	je     c001aee0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	b9 02 00 00 00       	mov    ecx,0x2
c001aec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aec4:	99                   	cdq    
c001aec5:	f7 f9                	idiv   ecx
c001aec7:	83 e8 32             	sub    eax,0x32
c001aeca:	50                   	push   eax
c001aecb:	e8 98 ba fe ff       	call   c0006968 <iso_total>
c001aed0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001aed7:	89 03                	mov    DWORD PTR [ebx],eax
c001aed9:	83 c4 10             	add    esp,0x10
c001aedc:	31 c0                	xor    eax,eax
c001aede:	eb 05                	jmp    c001aee5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001aee0:	b8 04 00 00 00       	mov    eax,0x4
c001aee5:	83 c4 08             	add    esp,0x8
c001aee8:	5b                   	pop    ebx
c001aee9:	c3                   	ret    

c001aeea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001aeea:	55                   	push   ebp
c001aeeb:	57                   	push   edi
c001aeec:	56                   	push   esi
c001aeed:	53                   	push   ebx
c001aeee:	83 ec 18             	sub    esp,0x18
c001aef1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aef5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001aef9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aefd:	68 c1 32 02 c0       	push   0xc00232c1
c001af02:	e8 5d c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	85 ff                	test   edi,edi
c001af0c:	0f 94 c0             	sete   al
c001af0f:	85 f6                	test   esi,esi
c001af11:	0f 94 c2             	sete   dl
c001af14:	09 d0                	or     eax,edx
c001af16:	a8 01                	test   al,0x1
c001af18:	0f 85 dd 00 00 00    	jne    c001affb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af1e:	85 db                	test   ebx,ebx
c001af20:	0f 84 d5 00 00 00    	je     c001affb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001af26:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001af29:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001af2f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af36:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af3d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001af3f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001af45:	74 1b                	je     c001af62 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001af47:	85 c0                	test   eax,eax
c001af49:	74 10                	je     c001af5b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001af4b:	83 ec 0c             	sub    esp,0xc
c001af4e:	68 65 32 02 c0       	push   0xc0023265
c001af53:	e8 6a 3d ff ff       	call   c000ecc2 <KePanic(char const*)>
c001af58:	83 c4 10             	add    esp,0x10
c001af5b:	8a 03                	mov    al,BYTE PTR [ebx]
c001af5d:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001af62:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af65:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af6c:	85 c0                	test   eax,eax
c001af6e:	74 09                	je     c001af79 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001af70:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001af77:	74 51                	je     c001afca <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001af79:	83 ec 0c             	sub    esp,0xc
c001af7c:	68 c9 32 02 c0       	push   0xc00232c9
c001af81:	e8 de bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af86:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001af94:	74 21                	je     c001afb7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001af96:	83 ec 0c             	sub    esp,0xc
c001af99:	68 e9 32 02 c0       	push   0xc00232e9
c001af9e:	e8 c1 bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001afa3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001afb0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001afb7:	83 ec 0c             	sub    esp,0xc
c001afba:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afc1:	50                   	push   eax
c001afc2:	e8 67 bc fe ff       	call   c0006c2e <init_percd>
c001afc7:	83 c4 10             	add    esp,0x10
c001afca:	83 c3 03             	add    ebx,0x3
c001afcd:	52                   	push   edx
c001afce:	52                   	push   edx
c001afcf:	6a 00                	push   0x0
c001afd1:	53                   	push   ebx
c001afd2:	e8 1e b7 fe ff       	call   c00066f5 <iso_open>
c001afd7:	83 c4 10             	add    esp,0x10
c001afda:	89 c5                	mov    ebp,eax
c001afdc:	83 f8 ff             	cmp    eax,0xffffffff
c001afdf:	75 21                	jne    c001b002 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001afe1:	50                   	push   eax
c001afe2:	50                   	push   eax
c001afe3:	6a 01                	push   0x1
c001afe5:	53                   	push   ebx
c001afe6:	e8 0a b7 fe ff       	call   c00066f5 <iso_open>
c001afeb:	83 c4 10             	add    esp,0x10
c001afee:	ba 02 00 00 00       	mov    edx,0x2
c001aff3:	40                   	inc    eax
c001aff4:	74 2b                	je     c001b021 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001aff6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001aff9:	eb 24                	jmp    c001b01f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001affb:	ba 04 00 00 00       	mov    edx,0x4
c001b000:	eb 1f                	jmp    c001b021 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b002:	83 ec 0c             	sub    esp,0xc
c001b005:	50                   	push   eax
c001b006:	e8 5d b9 fe ff       	call   c0006968 <iso_total>
c001b00b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b012:	89 07                	mov    DWORD PTR [edi],eax
c001b014:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b017:	e8 63 b7 fe ff       	call   c000677f <iso_close>
c001b01c:	83 c4 10             	add    esp,0x10
c001b01f:	31 d2                	xor    edx,edx
c001b021:	83 c4 0c             	add    esp,0xc
c001b024:	89 d0                	mov    eax,edx
c001b026:	5b                   	pop    ebx
c001b027:	5e                   	pop    esi
c001b028:	5f                   	pop    edi
c001b029:	5d                   	pop    ebp
c001b02a:	c3                   	ret    
c001b02b:	90                   	nop

c001b02c <ISO9660::close(void*)>:
c001b02c:	83 ec 0c             	sub    esp,0xc
c001b02f:	b8 04 00 00 00       	mov    eax,0x4
c001b034:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b038:	85 d2                	test   edx,edx
c001b03a:	74 1b                	je     c001b057 <ISO9660::close(void*)+0x2b>
c001b03c:	83 ec 0c             	sub    esp,0xc
c001b03f:	b9 02 00 00 00       	mov    ecx,0x2
c001b044:	89 d0                	mov    eax,edx
c001b046:	99                   	cdq    
c001b047:	f7 f9                	idiv   ecx
c001b049:	83 e8 32             	sub    eax,0x32
c001b04c:	50                   	push   eax
c001b04d:	e8 2d b7 fe ff       	call   c000677f <iso_close>
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	31 c0                	xor    eax,eax
c001b057:	83 c4 0c             	add    esp,0xc
c001b05a:	c3                   	ret    
c001b05b:	90                   	nop

c001b05c <ISO9660::openDir(char const*, void**)>:
c001b05c:	56                   	push   esi
c001b05d:	53                   	push   ebx
c001b05e:	50                   	push   eax
c001b05f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b063:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b067:	85 db                	test   ebx,ebx
c001b069:	0f 84 bd 00 00 00    	je     c001b12c <ISO9660::openDir(char const*, void**)+0xd0>
c001b06f:	85 f6                	test   esi,esi
c001b071:	0f 84 b5 00 00 00    	je     c001b12c <ISO9660::openDir(char const*, void**)+0xd0>
c001b077:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b079:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b080:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001b086:	74 1b                	je     c001b0a3 <ISO9660::openDir(char const*, void**)+0x47>
c001b088:	85 c0                	test   eax,eax
c001b08a:	74 10                	je     c001b09c <ISO9660::openDir(char const*, void**)+0x40>
c001b08c:	83 ec 0c             	sub    esp,0xc
c001b08f:	68 65 32 02 c0       	push   0xc0023265
c001b094:	e8 29 3c ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b099:	83 c4 10             	add    esp,0x10
c001b09c:	8a 03                	mov    al,BYTE PTR [ebx]
c001b09e:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001b0a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b0a6:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b0ad:	85 c0                	test   eax,eax
c001b0af:	74 10                	je     c001b0c1 <ISO9660::openDir(char const*, void**)+0x65>
c001b0b1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b0b8:	74 1a                	je     c001b0d4 <ISO9660::openDir(char const*, void**)+0x78>
c001b0ba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b0cb:	50                   	push   eax
c001b0cc:	e8 5d bb fe ff       	call   c0006c2e <init_percd>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	83 c3 03             	add    ebx,0x3
c001b0d7:	50                   	push   eax
c001b0d8:	50                   	push   eax
c001b0d9:	6a 01                	push   0x1
c001b0db:	53                   	push   ebx
c001b0dc:	e8 14 b6 fe ff       	call   c00066f5 <iso_open>
c001b0e1:	83 c4 10             	add    esp,0x10
c001b0e4:	89 c3                	mov    ebx,eax
c001b0e6:	83 f8 ff             	cmp    eax,0xffffffff
c001b0e9:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0ee:	75 1c                	jne    c001b10c <ISO9660::openDir(char const*, void**)+0xb0>
c001b0f0:	53                   	push   ebx
c001b0f1:	53                   	push   ebx
c001b0f2:	68 0d 33 02 c0       	push   0xc002330d
c001b0f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0fd:	e8 44 63 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001b102:	83 c4 10             	add    esp,0x10
c001b105:	b8 01 00 00 00       	mov    eax,0x1
c001b10a:	eb 25                	jmp    c001b131 <ISO9660::openDir(char const*, void**)+0xd5>
c001b10c:	01 db                	add    ebx,ebx
c001b10e:	51                   	push   ecx
c001b10f:	83 c3 65             	add    ebx,0x65
c001b112:	51                   	push   ecx
c001b113:	68 20 33 02 c0       	push   0xc0023320
c001b118:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b11e:	e8 23 63 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001b123:	89 1e                	mov    DWORD PTR [esi],ebx
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	31 c0                	xor    eax,eax
c001b12a:	eb 05                	jmp    c001b131 <ISO9660::openDir(char const*, void**)+0xd5>
c001b12c:	b8 04 00 00 00       	mov    eax,0x4
c001b131:	5a                   	pop    edx
c001b132:	5b                   	pop    ebx
c001b133:	5e                   	pop    esi
c001b134:	c3                   	ret    
c001b135:	90                   	nop

c001b136 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b136:	55                   	push   ebp
c001b137:	57                   	push   edi
c001b138:	56                   	push   esi
c001b139:	53                   	push   ebx
c001b13a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b140:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b147:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b14e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b156:	0f 84 e7 00 00 00    	je     c001b243 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b15c:	85 db                	test   ebx,ebx
c001b15e:	0f 84 df 00 00 00    	je     c001b243 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b164:	83 ec 0c             	sub    esp,0xc
c001b167:	68 33 33 02 c0       	push   0xc0023333
c001b16c:	e8 f3 bd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b171:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b178:	b9 02 00 00 00       	mov    ecx,0x2
c001b17d:	99                   	cdq    
c001b17e:	f7 f9                	idiv   ecx
c001b180:	83 e8 32             	sub    eax,0x32
c001b183:	89 04 24             	mov    DWORD PTR [esp],eax
c001b186:	e8 2f b8 fe ff       	call   c00069ba <iso_readdir>
c001b18b:	83 c4 10             	add    esp,0x10
c001b18e:	89 c6                	mov    esi,eax
c001b190:	85 c0                	test   eax,eax
c001b192:	75 37                	jne    c001b1cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b194:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b199:	56                   	push   esi
c001b19a:	56                   	push   esi
c001b19b:	68 3e 33 02 c0       	push   0xc002333e
c001b1a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b1a6:	e8 9b 62 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001b1ab:	83 c4 0c             	add    esp,0xc
c001b1ae:	68 10 01 00 00       	push   0x110
c001b1b3:	6a 00                	push   0x0
c001b1b5:	57                   	push   edi
c001b1b6:	e8 35 53 fe ff       	call   c00004f0 <memset>
c001b1bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	b8 01 00 00 00       	mov    eax,0x1
c001b1c9:	eb 7d                	jmp    c001b248 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b1cb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b1d1:	8d 68 08             	lea    ebp,[eax+0x8]
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	55                   	push   ebp
c001b1d8:	e8 93 53 fe ff       	call   c0000570 <strlen>
c001b1dd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b1e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1e9:	83 c4 10             	add    esp,0x10
c001b1ec:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b1f0:	75 0a                	jne    c001b1fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b1f2:	b8 02 00 00 00       	mov    eax,0x2
c001b1f7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b1fa:	74 05                	je     c001b201 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b1fc:	b8 01 00 00 00       	mov    eax,0x1
c001b201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b205:	50                   	push   eax
c001b206:	50                   	push   eax
c001b207:	55                   	push   ebp
c001b208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b20c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b210:	50                   	push   eax
c001b211:	e8 2a 54 fe ff       	call   c0000640 <strcpy>
c001b216:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b21d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b21f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b225:	5a                   	pop    edx
c001b226:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b22b:	59                   	pop    ecx
c001b22c:	68 51 33 02 c0       	push   0xc0023351
c001b231:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b237:	e8 0a 62 ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001b23c:	83 c4 10             	add    esp,0x10
c001b23f:	31 c0                	xor    eax,eax
c001b241:	eb 05                	jmp    c001b248 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b243:	b8 04 00 00 00       	mov    eax,0x4
c001b248:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b24e:	5b                   	pop    ebx
c001b24f:	5e                   	pop    esi
c001b250:	5f                   	pop    edi
c001b251:	5d                   	pop    ebp
c001b252:	c3                   	ret    

c001b253 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b253:	57                   	push   edi
c001b254:	56                   	push   esi
c001b255:	53                   	push   ebx
c001b256:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b25a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b25e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b262:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b268:	0f be cb             	movsx  ecx,bl
c001b26b:	75 0b                	jne    c001b278 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b26d:	0f be 05 44 45 02 c0 	movsx  eax,BYTE PTR ds:0xc0024544
c001b274:	39 c8                	cmp    eax,ecx
c001b276:	74 47                	je     c001b2bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b278:	83 ec 0c             	sub    esp,0xc
c001b27b:	31 d2                	xor    edx,edx
c001b27d:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b282:	6a 01                	push   0x1
c001b284:	52                   	push   edx
c001b285:	56                   	push   esi
c001b286:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b28d:	e8 3a ee fe ff       	call   c000a0cc <LogicalDisk::read(unsigned long long, int, void*)>
c001b292:	83 c4 20             	add    esp,0x20
c001b295:	85 c0                	test   eax,eax
c001b297:	75 0e                	jne    c001b2a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b299:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b29f:	88 1d 44 45 02 c0    	mov    BYTE PTR ds:0xc0024544,bl
c001b2a5:	eb 18                	jmp    c001b2bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b2a7:	50                   	push   eax
c001b2a8:	68 00 08 00 00       	push   0x800
c001b2ad:	6a 00                	push   0x0
c001b2af:	57                   	push   edi
c001b2b0:	e8 3b 52 fe ff       	call   c00004f0 <memset>
c001b2b5:	83 c4 10             	add    esp,0x10
c001b2b8:	b8 01 00 00 00       	mov    eax,0x1
c001b2bd:	eb 0e                	jmp    c001b2cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b2bf:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b2c4:	b9 00 08 00 00       	mov    ecx,0x800
c001b2c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2cb:	31 c0                	xor    eax,eax
c001b2cd:	5b                   	pop    ebx
c001b2ce:	5e                   	pop    esi
c001b2cf:	5f                   	pop    edi
c001b2d0:	c3                   	ret    
c001b2d1:	90                   	nop

c001b2d2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b2d2:	53                   	push   ebx
c001b2d3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b2d9:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b2e3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b2ea:	8d 58 41             	lea    ebx,[eax+0x41]
c001b2ed:	0f be db             	movsx  ebx,bl
c001b2f0:	53                   	push   ebx
c001b2f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2f5:	50                   	push   eax
c001b2f6:	6a 10                	push   0x10
c001b2f8:	e8 56 ff ff ff       	call   c001b253 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b2fd:	83 c4 10             	add    esp,0x10
c001b300:	31 d2                	xor    edx,edx
c001b302:	85 c0                	test   eax,eax
c001b304:	75 33                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b306:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b30b:	75 2c                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b30d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b312:	75 25                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b314:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b319:	75 1e                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b31b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b320:	75 17                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b322:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b327:	75 10                	jne    c001b339 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b329:	83 ec 0c             	sub    esp,0xc
c001b32c:	53                   	push   ebx
c001b32d:	e8 fc b8 fe ff       	call   c0006c2e <init_percd>
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	40                   	inc    eax
c001b336:	0f 95 c2             	setne  dl
c001b339:	88 d0                	mov    al,dl
c001b33b:	81 c4 08 08 00 00    	add    esp,0x808
c001b341:	5b                   	pop    ebx
c001b342:	c3                   	ret    
c001b343:	90                   	nop

c001b344 <ISO9660::ISO9660()>:
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34b:	83 ec 0c             	sub    esp,0xc
c001b34e:	50                   	push   eax
c001b34f:	e8 1c ca fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	ba 6c 33 02 c0       	mov    edx,0xc002336c
c001b35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b360:	89 10                	mov    DWORD PTR [eax],edx
c001b362:	e8 d9 b9 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b367:	90                   	nop
c001b368:	83 c4 0c             	add    esp,0xc
c001b36b:	c3                   	ret    

c001b36c <SoundCard::beginPlayback()>:
c001b36c:	c7 44 24 04 d0 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233d0
c001b374:	e9 49 39 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001b379:	90                   	nop

c001b37a <SoundCard::stopPlayback()>:
c001b37a:	c7 44 24 04 d0 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233d0
c001b382:	e9 3b 39 ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001b387:	90                   	nop

c001b388 <SoundCard::SoundCard(char const*)>:
c001b388:	83 ec 1c             	sub    esp,0x1c
c001b38b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b38f:	83 ec 08             	sub    esp,0x8
c001b392:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b396:	50                   	push   eax
c001b397:	e8 08 de fe ff       	call   c00091a4 <Device::Device(char const*)>
c001b39c:	83 c4 10             	add    esp,0x10
c001b39f:	ba 1c 34 02 c0       	mov    edx,0xc002341c
c001b3a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a8:	89 10                	mov    DWORD PTR [eax],edx
c001b3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3ae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3b9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b3c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3c7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3d5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b3df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3e3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b3ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3f5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b3fa:	7f 1a                	jg     c001b416 <SoundCard::SoundCard(char const*)+0x8e>
c001b3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b404:	83 c2 54             	add    edx,0x54
c001b407:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b40f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b414:	eb df                	jmp    c001b3f5 <SoundCard::SoundCard(char const*)+0x6d>
c001b416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b421:	90                   	nop
c001b422:	83 c4 1c             	add    esp,0x1c
c001b425:	c3                   	ret    

c001b426 <SoundCard::~SoundCard()>:
c001b426:	83 ec 0c             	sub    esp,0xc
c001b429:	ba 1c 34 02 c0       	mov    edx,0xc002341c
c001b42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b432:	89 10                	mov    DWORD PTR [eax],edx
c001b434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	50                   	push   eax
c001b43c:	e8 03 db fe ff       	call   c0008f44 <Device::~Device()>
c001b441:	83 c4 10             	add    esp,0x10
c001b444:	90                   	nop
c001b445:	83 c4 0c             	add    esp,0xc
c001b448:	c3                   	ret    
c001b449:	90                   	nop

c001b44a <SoundCard::~SoundCard()>:
c001b44a:	83 ec 0c             	sub    esp,0xc
c001b44d:	83 ec 0c             	sub    esp,0xc
c001b450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b454:	e8 cd ff ff ff       	call   c001b426 <SoundCard::~SoundCard()>
c001b459:	83 c4 10             	add    esp,0x10
c001b45c:	83 ec 08             	sub    esp,0x8
c001b45f:	68 e8 01 00 00       	push   0x1e8
c001b464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b468:	e8 93 12 ff ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	83 c4 0c             	add    esp,0xc
c001b473:	c3                   	ret    

c001b474 <SoundCard::configureRates(int, int, int)>:
c001b474:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b478:	31 c0                	xor    eax,eax
c001b47a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b481:	75 20                	jne    c001b4a3 <SoundCard::configureRates(int, int, int)+0x2f>
c001b483:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b487:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b491:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b49b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b4a1:	b0 01                	mov    al,0x1
c001b4a3:	c3                   	ret    

c001b4a4 <SoundCard::getSamples16(int, short*)>:
c001b4a4:	55                   	push   ebp
c001b4a5:	57                   	push   edi
c001b4a6:	31 ff                	xor    edi,edi
c001b4a8:	56                   	push   esi
c001b4a9:	53                   	push   ebx
c001b4aa:	31 db                	xor    ebx,ebx
c001b4ac:	83 ec 10             	sub    esp,0x10
c001b4af:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b4b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b4b7:	8d 04 36             	lea    eax,[esi+esi*1]
c001b4ba:	50                   	push   eax
c001b4bb:	6a 00                	push   0x0
c001b4bd:	55                   	push   ebp
c001b4be:	e8 2d 50 fe ff       	call   c00004f0 <memset>
c001b4c3:	83 c4 10             	add    esp,0x10
c001b4c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ca:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b4d1:	85 c0                	test   eax,eax
c001b4d3:	74 1b                	je     c001b4f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4d5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b4d9:	75 15                	jne    c001b4f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b4df:	55                   	push   ebp
c001b4e0:	56                   	push   esi
c001b4e1:	50                   	push   eax
c001b4e2:	e8 f1 02 00 00       	call   c001b7d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b4e7:	83 c4 10             	add    esp,0x10
c001b4ea:	39 c7                	cmp    edi,eax
c001b4ec:	7d 02                	jge    c001b4f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b4ee:	89 c7                	mov    edi,eax
c001b4f0:	43                   	inc    ebx
c001b4f1:	83 fb 20             	cmp    ebx,0x20
c001b4f4:	75 d0                	jne    c001b4c6 <SoundCard::getSamples16(int, short*)+0x22>
c001b4f6:	83 c4 0c             	add    esp,0xc
c001b4f9:	89 f8                	mov    eax,edi
c001b4fb:	5b                   	pop    ebx
c001b4fc:	5e                   	pop    esi
c001b4fd:	5f                   	pop    edi
c001b4fe:	5d                   	pop    ebp
c001b4ff:	c3                   	ret    

c001b500 <SoundCard::getSamples32(int, int*)>:
c001b500:	55                   	push   ebp
c001b501:	57                   	push   edi
c001b502:	31 ff                	xor    edi,edi
c001b504:	56                   	push   esi
c001b505:	31 f6                	xor    esi,esi
c001b507:	53                   	push   ebx
c001b508:	83 ec 10             	sub    esp,0x10
c001b50b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b50f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b513:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b517:	c1 e0 02             	shl    eax,0x2
c001b51a:	50                   	push   eax
c001b51b:	6a 00                	push   0x0
c001b51d:	55                   	push   ebp
c001b51e:	e8 cd 4f fe ff       	call   c00004f0 <memset>
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b52d:	85 c0                	test   eax,eax
c001b52f:	74 1b                	je     c001b54c <SoundCard::getSamples32(int, int*)+0x4c>
c001b531:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b535:	75 15                	jne    c001b54c <SoundCard::getSamples32(int, int*)+0x4c>
c001b537:	53                   	push   ebx
c001b538:	55                   	push   ebp
c001b539:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b53d:	50                   	push   eax
c001b53e:	e8 61 03 00 00       	call   c001b8a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	39 c6                	cmp    esi,eax
c001b548:	7d 02                	jge    c001b54c <SoundCard::getSamples32(int, int*)+0x4c>
c001b54a:	89 c6                	mov    esi,eax
c001b54c:	47                   	inc    edi
c001b54d:	83 ff 20             	cmp    edi,0x20
c001b550:	75 d4                	jne    c001b526 <SoundCard::getSamples32(int, int*)+0x26>
c001b552:	85 f6                	test   esi,esi
c001b554:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b55b:	75 0f                	jne    c001b56c <SoundCard::getSamples32(int, int*)+0x6c>
c001b55d:	85 c0                	test   eax,eax
c001b55f:	74 1b                	je     c001b57c <SoundCard::getSamples32(int, int*)+0x7c>
c001b561:	83 ec 0c             	sub    esp,0xc
c001b564:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b566:	53                   	push   ebx
c001b567:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b56a:	eb 0d                	jmp    c001b579 <SoundCard::getSamples32(int, int*)+0x79>
c001b56c:	85 c0                	test   eax,eax
c001b56e:	75 0c                	jne    c001b57c <SoundCard::getSamples32(int, int*)+0x7c>
c001b570:	83 ec 0c             	sub    esp,0xc
c001b573:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b575:	53                   	push   ebx
c001b576:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b579:	83 c4 10             	add    esp,0x10
c001b57c:	83 c4 0c             	add    esp,0xc
c001b57f:	89 f0                	mov    eax,esi
c001b581:	5b                   	pop    ebx
c001b582:	5e                   	pop    esi
c001b583:	5f                   	pop    edi
c001b584:	5d                   	pop    ebp
c001b585:	c3                   	ret    

c001b586 <SoundCard::addChannel(SoundPort*)>:
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	31 c0                	xor    eax,eax
c001b58b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b58f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b597:	74 1b                	je     c001b5b4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b599:	40                   	inc    eax
c001b59a:	83 f8 20             	cmp    eax,0x20
c001b59d:	75 f0                	jne    c001b58f <SoundCard::addChannel(SoundPort*)+0x9>
c001b59f:	83 ec 0c             	sub    esp,0xc
c001b5a2:	68 f5 33 02 c0       	push   0xc00233f5
c001b5a7:	e8 16 37 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b5ac:	83 c4 10             	add    esp,0x10
c001b5af:	83 c8 ff             	or     eax,0xffffffff
c001b5b2:	eb 0b                	jmp    c001b5bf <SoundCard::addChannel(SoundPort*)+0x39>
c001b5b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b5b8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b5bf:	83 c4 0c             	add    esp,0xc
c001b5c2:	c3                   	ret    
c001b5c3:	90                   	nop

c001b5c4 <SoundCard::removeChannel(int)>:
c001b5c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b5cc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b5d7:	c3                   	ret    

c001b5d8 <SoundPort::SoundPort(int, int, int, int)>:
c001b5d8:	83 ec 0c             	sub    esp,0xc
c001b5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5df:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ea:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5f6:	89 10                	mov    DWORD PTR [eax],edx
c001b5f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b600:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b607:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b60b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b60e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b613:	75 13                	jne    c001b628 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b619:	8b 00                	mov    eax,DWORD PTR [eax]
c001b61b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b620:	01 c0                	add    eax,eax
c001b622:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b626:	66 90                	xchg   ax,ax
c001b628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b630:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b637:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b642:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b645:	c1 e0 02             	shl    eax,0x2
c001b648:	83 ec 0c             	sub    esp,0xc
c001b64b:	50                   	push   eax
c001b64c:	e8 2a 33 ff ff       	call   c000e97b <malloc>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	89 c2                	mov    edx,eax
c001b656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b65a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b65d:	90                   	nop
c001b65e:	83 c4 0c             	add    esp,0xc
c001b661:	c3                   	ret    
c001b662:	66 90                	xchg   ax,ax

c001b664 <SoundPort::~SoundPort()>:
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b66e:	85 c0                	test   eax,eax
c001b670:	74 1e                	je     c001b690 <SoundPort::~SoundPort()+0x2c>
c001b672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b676:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b679:	83 ec 0c             	sub    esp,0xc
c001b67c:	50                   	push   eax
c001b67d:	e8 09 33 ff ff       	call   c000e98b <free>
c001b682:	83 c4 10             	add    esp,0x10
c001b685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b689:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b690:	90                   	nop
c001b691:	83 c4 0c             	add    esp,0xc
c001b694:	c3                   	ret    
c001b695:	90                   	nop
c001b696:	66 90                	xchg   ax,ax

c001b698 <SoundPort::unpause()>:
c001b698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b69c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b6a0:	c3                   	ret    
c001b6a1:	90                   	nop
c001b6a2:	66 90                	xchg   ax,ax

c001b6a4 <SoundPort::pause()>:
c001b6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6a8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b6ac:	c3                   	ret    
c001b6ad:	90                   	nop
c001b6ae:	66 90                	xchg   ax,ax

c001b6b0 <SoundPort::getBufferUsed()>:
c001b6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b6b7:	c3                   	ret    

c001b6b8 <SoundPort::getBufferSize()>:
c001b6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b6bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b6bf:	c3                   	ret    

c001b6c0 <SoundPort::buffer16(short*, int)>:
c001b6c0:	55                   	push   ebp
c001b6c1:	57                   	push   edi
c001b6c2:	56                   	push   esi
c001b6c3:	53                   	push   ebx
c001b6c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b6c8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b6cc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b6cf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b6d2:	74 68                	je     c001b73c <SoundPort::buffer16(short*, int)+0x7c>
c001b6d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b6d8:	85 c9                	test   ecx,ecx
c001b6da:	7e 60                	jle    c001b73c <SoundPort::buffer16(short*, int)+0x7c>
c001b6dc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b6e0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6e3:	c1 e1 0f             	shl    ecx,0xf
c001b6e6:	8d 70 01             	lea    esi,[eax+0x1]
c001b6e9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b6ec:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b6ef:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6f2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6f5:	74 4d                	je     c001b744 <SoundPort::buffer16(short*, int)+0x84>
c001b6f7:	31 f6                	xor    esi,esi
c001b6f9:	eb 21                	jmp    c001b71c <SoundPort::buffer16(short*, int)+0x5c>
c001b6fb:	90                   	nop
c001b6fc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b701:	8d 79 01             	lea    edi,[ecx+0x1]
c001b704:	c1 e3 0f             	shl    ebx,0xf
c001b707:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b70a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b70d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b710:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b713:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b716:	74 1c                	je     c001b734 <SoundPort::buffer16(short*, int)+0x74>
c001b718:	89 c6                	mov    esi,eax
c001b71a:	66 90                	xchg   ax,ax
c001b71c:	8d 46 01             	lea    eax,[esi+0x1]
c001b71f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b723:	75 d7                	jne    c001b6fc <SoundPort::buffer16(short*, int)+0x3c>
c001b725:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b729:	8d 76 00             	lea    esi,[esi+0x0]
c001b72c:	5b                   	pop    ebx
c001b72d:	5e                   	pop    esi
c001b72e:	5f                   	pop    edi
c001b72f:	5d                   	pop    ebp
c001b730:	c3                   	ret    
c001b731:	8d 76 00             	lea    esi,[esi+0x0]
c001b734:	5b                   	pop    ebx
c001b735:	8d 46 02             	lea    eax,[esi+0x2]
c001b738:	5e                   	pop    esi
c001b739:	5f                   	pop    edi
c001b73a:	5d                   	pop    ebp
c001b73b:	c3                   	ret    
c001b73c:	5b                   	pop    ebx
c001b73d:	31 c0                	xor    eax,eax
c001b73f:	5e                   	pop    esi
c001b740:	5f                   	pop    edi
c001b741:	5d                   	pop    ebp
c001b742:	c3                   	ret    
c001b743:	90                   	nop
c001b744:	b8 01 00 00 00       	mov    eax,0x1
c001b749:	eb e1                	jmp    c001b72c <SoundPort::buffer16(short*, int)+0x6c>
c001b74b:	90                   	nop

c001b74c <SoundPort::buffer32(int*, int)>:
c001b74c:	55                   	push   ebp
c001b74d:	57                   	push   edi
c001b74e:	56                   	push   esi
c001b74f:	53                   	push   ebx
c001b750:	83 ec 04             	sub    esp,0x4
c001b753:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b75b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b75e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b762:	89 04 24             	mov    DWORD PTR [esp],eax
c001b765:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b768:	74 5a                	je     c001b7c4 <SoundPort::buffer32(int*, int)+0x78>
c001b76a:	85 c0                	test   eax,eax
c001b76c:	7e 56                	jle    c001b7c4 <SoundPort::buffer32(int*, int)+0x78>
c001b76e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b771:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b774:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b777:	8b 37                	mov    esi,DWORD PTR [edi]
c001b779:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b77c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b77f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b782:	74 4c                	je     c001b7d0 <SoundPort::buffer32(int*, int)+0x84>
c001b784:	31 f6                	xor    esi,esi
c001b786:	eb 1c                	jmp    c001b7a4 <SoundPort::buffer32(int*, int)+0x58>
c001b788:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b78b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b78e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b791:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b794:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b798:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b79b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b79e:	74 18                	je     c001b7b8 <SoundPort::buffer32(int*, int)+0x6c>
c001b7a0:	89 de                	mov    esi,ebx
c001b7a2:	66 90                	xchg   ax,ax
c001b7a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b7a7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b7aa:	75 dc                	jne    c001b788 <SoundPort::buffer32(int*, int)+0x3c>
c001b7ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b7af:	90                   	nop
c001b7b0:	83 c4 04             	add    esp,0x4
c001b7b3:	5b                   	pop    ebx
c001b7b4:	5e                   	pop    esi
c001b7b5:	5f                   	pop    edi
c001b7b6:	5d                   	pop    ebp
c001b7b7:	c3                   	ret    
c001b7b8:	83 c4 04             	add    esp,0x4
c001b7bb:	8d 46 02             	lea    eax,[esi+0x2]
c001b7be:	5b                   	pop    ebx
c001b7bf:	5e                   	pop    esi
c001b7c0:	5f                   	pop    edi
c001b7c1:	5d                   	pop    ebp
c001b7c2:	c3                   	ret    
c001b7c3:	90                   	nop
c001b7c4:	83 c4 04             	add    esp,0x4
c001b7c7:	31 c0                	xor    eax,eax
c001b7c9:	5b                   	pop    ebx
c001b7ca:	5e                   	pop    esi
c001b7cb:	5f                   	pop    edi
c001b7cc:	5d                   	pop    ebp
c001b7cd:	c3                   	ret    
c001b7ce:	66 90                	xchg   ax,ax
c001b7d0:	b8 01 00 00 00       	mov    eax,0x1
c001b7d5:	eb d9                	jmp    c001b7b0 <SoundPort::buffer32(int*, int)+0x64>
c001b7d7:	90                   	nop

c001b7d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b7d8:	57                   	push   edi
c001b7d9:	56                   	push   esi
c001b7da:	53                   	push   ebx
c001b7db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b7e3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b7e9:	39 03                	cmp    DWORD PTR [ebx],eax
c001b7eb:	74 13                	je     c001b800 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	68 48 34 02 c0       	push   0xc0023448
c001b7f5:	e8 c8 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b7fa:	83 c4 10             	add    esp,0x10
c001b7fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b800:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b806:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b809:	74 11                	je     c001b81c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b80b:	83 ec 0c             	sub    esp,0xc
c001b80e:	68 87 34 02 c0       	push   0xc0023487
c001b813:	e8 aa 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b818:	83 c4 10             	add    esp,0x10
c001b81b:	90                   	nop
c001b81c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b822:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b825:	74 11                	je     c001b838 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b827:	83 ec 0c             	sub    esp,0xc
c001b82a:	68 87 34 02 c0       	push   0xc0023487
c001b82f:	e8 8e 34 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b834:	83 c4 10             	add    esp,0x10
c001b837:	90                   	nop
c001b838:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b83b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b83f:	7e 07                	jle    c001b848 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b841:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b845:	8d 76 00             	lea    esi,[esi+0x0]
c001b848:	85 f6                	test   esi,esi
c001b84a:	7e 2c                	jle    c001b878 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b850:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b853:	31 c9                	xor    ecx,ecx
c001b855:	01 d7                	add    edi,edx
c001b857:	90                   	nop
c001b858:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b85b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b85e:	85 c0                	test   eax,eax
c001b860:	79 06                	jns    c001b868 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b862:	05 ff 7f 00 00       	add    eax,0x7fff
c001b867:	90                   	nop
c001b868:	c1 f8 0f             	sar    eax,0xf
c001b86b:	83 c1 04             	add    ecx,0x4
c001b86e:	66 01 02             	add    WORD PTR [edx],ax
c001b871:	83 c2 02             	add    edx,0x2
c001b874:	39 d7                	cmp    edi,edx
c001b876:	75 e0                	jne    c001b858 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b878:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b87b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b87e:	83 ec 04             	sub    esp,0x4
c001b881:	29 f0                	sub    eax,esi
c001b883:	c1 e0 02             	shl    eax,0x2
c001b886:	50                   	push   eax
c001b887:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b88a:	50                   	push   eax
c001b88b:	52                   	push   edx
c001b88c:	e8 3f 4b fe ff       	call   c00003d0 <memmove>
c001b891:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b894:	83 c4 10             	add    esp,0x10
c001b897:	29 f0                	sub    eax,esi
c001b899:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b89c:	89 f0                	mov    eax,esi
c001b89e:	5b                   	pop    ebx
c001b89f:	5e                   	pop    esi
c001b8a0:	5f                   	pop    edi
c001b8a1:	c3                   	ret    
c001b8a2:	66 90                	xchg   ax,ax

c001b8a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b8a4:	57                   	push   edi
c001b8a5:	56                   	push   esi
c001b8a6:	53                   	push   ebx
c001b8a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8ab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b8b3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b8b9:	39 06                	cmp    DWORD PTR [esi],eax
c001b8bb:	74 13                	je     c001b8d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b8bd:	83 ec 0c             	sub    esp,0xc
c001b8c0:	68 68 34 02 c0       	push   0xc0023468
c001b8c5:	e8 f8 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b8ca:	83 c4 10             	add    esp,0x10
c001b8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b8d6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b8d9:	74 11                	je     c001b8ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b8db:	83 ec 0c             	sub    esp,0xc
c001b8de:	68 a3 34 02 c0       	push   0xc00234a3
c001b8e3:	e8 da 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b8e8:	83 c4 10             	add    esp,0x10
c001b8eb:	90                   	nop
c001b8ec:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b8f2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b8f5:	74 11                	je     c001b908 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	68 a3 34 02 c0       	push   0xc00234a3
c001b8ff:	e8 be 33 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	90                   	nop
c001b908:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b90b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b90f:	7e 07                	jle    c001b918 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b911:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b915:	8d 76 00             	lea    esi,[esi+0x0]
c001b918:	85 ff                	test   edi,edi
c001b91a:	7e 1c                	jle    c001b938 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b91c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b923:	31 c0                	xor    eax,eax
c001b925:	8d 76 00             	lea    esi,[esi+0x0]
c001b928:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b92b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b92e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b931:	83 c0 04             	add    eax,0x4
c001b934:	39 c1                	cmp    ecx,eax
c001b936:	75 f0                	jne    c001b928 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b938:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b93b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b93e:	83 ec 04             	sub    esp,0x4
c001b941:	29 f8                	sub    eax,edi
c001b943:	c1 e0 02             	shl    eax,0x2
c001b946:	50                   	push   eax
c001b947:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b94a:	50                   	push   eax
c001b94b:	52                   	push   edx
c001b94c:	e8 7f 4a fe ff       	call   c00003d0 <memmove>
c001b951:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b954:	83 c4 10             	add    esp,0x10
c001b957:	29 f8                	sub    eax,edi
c001b959:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b95c:	89 f8                	mov    eax,edi
c001b95e:	5b                   	pop    ebx
c001b95f:	5e                   	pop    esi
c001b960:	5f                   	pop    edi
c001b961:	c3                   	ret    

c001b962 <PCI::open(int, int, void*)>:
c001b962:	83 ec 18             	sub    esp,0x18
c001b965:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b969:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b96d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b973:	8b 10                	mov    edx,DWORD PTR [eax]
c001b975:	50                   	push   eax
c001b976:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b979:	31 c0                	xor    eax,eax
c001b97b:	83 c4 1c             	add    esp,0x1c
c001b97e:	c3                   	ret    
c001b97f:	90                   	nop

c001b980 <PCI::close(int, int, void*)>:
c001b980:	31 c0                	xor    eax,eax
c001b982:	c3                   	ret    
c001b983:	90                   	nop

c001b984 <PCI::PCI()>:
c001b984:	83 ec 0c             	sub    esp,0xc
c001b987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b98b:	83 ec 08             	sub    esp,0x8
c001b98e:	68 bf 34 02 c0       	push   0xc00234bf
c001b993:	50                   	push   eax
c001b994:	e8 53 cf fe ff       	call   c00088ec <Bus::Bus(char const*)>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	ba cc 35 02 c0       	mov    edx,0xc00235cc
c001b9a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a5:	89 10                	mov    DWORD PTR [eax],edx
c001b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ab:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b9:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9c8:	0f b6 d0             	movzx  edx,al
c001b9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9e0:	0f b6 d0             	movzx  edx,al
c001b9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9e7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b9f6:	8d 50 01             	lea    edx,[eax+0x1]
c001b9f9:	88 d1                	mov    cl,dl
c001b9fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9ff:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ba05:	0f b6 d0             	movzx  edx,al
c001ba08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba10:	83 c9 c0             	or     ecx,0xffffffc0
c001ba13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba17:	90                   	nop
c001ba18:	83 c4 0c             	add    esp,0xc
c001ba1b:	c3                   	ret    

c001ba1c <PCI::readBAR8(unsigned int, int)>:
c001ba1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba24:	f6 c2 01             	test   dl,0x1
c001ba27:	74 07                	je     c001ba30 <PCI::readBAR8(unsigned int, int)+0x14>
c001ba29:	83 e2 fc             	and    edx,0xfffffffc
c001ba2c:	01 c2                	add    edx,eax
c001ba2e:	ec                   	in     al,dx
c001ba2f:	c3                   	ret    
c001ba30:	83 e2 f0             	and    edx,0xfffffff0
c001ba33:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ba36:	c3                   	ret    
c001ba37:	90                   	nop

c001ba38 <PCI::readBAR16(unsigned int, int)>:
c001ba38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba40:	f6 c2 01             	test   dl,0x1
c001ba43:	74 08                	je     c001ba4d <PCI::readBAR16(unsigned int, int)+0x15>
c001ba45:	83 e2 fc             	and    edx,0xfffffffc
c001ba48:	01 c2                	add    edx,eax
c001ba4a:	66 ed                	in     ax,dx
c001ba4c:	c3                   	ret    
c001ba4d:	83 e2 f0             	and    edx,0xfffffff0
c001ba50:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <PCI::readBAR32(unsigned int, int)>:
c001ba56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba5e:	f6 c2 01             	test   dl,0x1
c001ba61:	74 07                	je     c001ba6a <PCI::readBAR32(unsigned int, int)+0x14>
c001ba63:	83 e2 fc             	and    edx,0xfffffffc
c001ba66:	01 c2                	add    edx,eax
c001ba68:	ed                   	in     eax,dx
c001ba69:	c3                   	ret    
c001ba6a:	83 e2 f0             	and    edx,0xfffffff0
c001ba6d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ba70:	c3                   	ret    
c001ba71:	90                   	nop

c001ba72 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ba72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba7e:	f6 c2 01             	test   dl,0x1
c001ba81:	74 07                	je     c001ba8a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ba83:	83 e2 fc             	and    edx,0xfffffffc
c001ba86:	01 ca                	add    edx,ecx
c001ba88:	ee                   	out    dx,al
c001ba89:	c3                   	ret    
c001ba8a:	83 e2 f0             	and    edx,0xfffffff0
c001ba8d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ba90:	c3                   	ret    
c001ba91:	90                   	nop

c001ba92 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ba92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba9e:	f6 c2 01             	test   dl,0x1
c001baa1:	74 08                	je     c001baab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001baa3:	83 e2 fc             	and    edx,0xfffffffc
c001baa6:	01 ca                	add    edx,ecx
c001baa8:	66 ef                	out    dx,ax
c001baaa:	c3                   	ret    
c001baab:	83 e2 f0             	and    edx,0xfffffff0
c001baae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001bab2:	c3                   	ret    
c001bab3:	90                   	nop

c001bab4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001bab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001babc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bac0:	f6 c2 01             	test   dl,0x1
c001bac3:	74 07                	je     c001bacc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001bac5:	83 e2 fc             	and    edx,0xfffffffc
c001bac8:	01 ca                	add    edx,ecx
c001baca:	ef                   	out    dx,eax
c001bacb:	c3                   	ret    
c001bacc:	83 e2 f0             	and    edx,0xfffffff0
c001bacf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001bad2:	c3                   	ret    
c001bad3:	90                   	nop

c001bad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bad4:	55                   	push   ebp
c001bad5:	57                   	push   edi
c001bad6:	56                   	push   esi
c001bad7:	53                   	push   ebx
c001bad8:	83 ec 0c             	sub    esp,0xc
c001badb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001bae0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001bae4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001bae8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001baec:	83 fe 07             	cmp    esi,0x7
c001baef:	76 10                	jbe    c001bb01 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001baf1:	83 ec 0c             	sub    esp,0xc
c001baf4:	68 c7 34 02 c0       	push   0xc00234c7
c001baf9:	e8 c4 31 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bafe:	83 c4 10             	add    esp,0x10
c001bb01:	0f b6 db             	movzx  ebx,bl
c001bb04:	83 fb 0f             	cmp    ebx,0xf
c001bb07:	76 10                	jbe    c001bb19 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	68 f7 34 02 c0       	push   0xc00234f7
c001bb11:	e8 ac 31 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bb16:	83 c4 10             	add    esp,0x10
c001bb19:	8d 04 36             	lea    eax,[esi+esi*1]
c001bb1c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb21:	83 c8 f0             	or     eax,0xfffffff0
c001bb24:	ee                   	out    dx,al
c001bb25:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bb2a:	89 e8                	mov    eax,ebp
c001bb2c:	ee                   	out    dx,al
c001bb2d:	83 c4 0c             	add    esp,0xc
c001bb30:	89 d8                	mov    eax,ebx
c001bb32:	89 f9                	mov    ecx,edi
c001bb34:	c1 e0 08             	shl    eax,0x8
c001bb37:	0f b6 d9             	movzx  ebx,cl
c001bb3a:	83 e3 fc             	and    ebx,0xfffffffc
c001bb3d:	09 d8                	or     eax,ebx
c001bb3f:	5b                   	pop    ebx
c001bb40:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bb45:	5e                   	pop    esi
c001bb46:	5f                   	pop    edi
c001bb47:	5d                   	pop    ebp
c001bb48:	c3                   	ret    
c001bb49:	90                   	nop

c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bb4a:	57                   	push   edi
c001bb4b:	56                   	push   esi
c001bb4c:	53                   	push   ebx
c001bb4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb55:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bb5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bb5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb67:	83 ff 01             	cmp    edi,0x1
c001bb6a:	75 3f                	jne    c001bbab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bb6c:	89 de                	mov    esi,ebx
c001bb6e:	0f b6 c0             	movzx  eax,al
c001bb71:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bb77:	c1 e0 10             	shl    eax,0x10
c001bb7a:	0f b6 c9             	movzx  ecx,cl
c001bb7d:	09 f0                	or     eax,esi
c001bb7f:	c1 e1 08             	shl    ecx,0x8
c001bb82:	0f b6 d2             	movzx  edx,dl
c001bb85:	09 c8                	or     eax,ecx
c001bb87:	c1 e2 0b             	shl    edx,0xb
c001bb8a:	09 d0                	or     eax,edx
c001bb8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb91:	0d 00 00 00 80       	or     eax,0x80000000
c001bb96:	ef                   	out    dx,eax
c001bb97:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb9c:	ed                   	in     eax,dx
c001bb9d:	83 e3 02             	and    ebx,0x2
c001bba0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bba7:	d3 e8                	shr    eax,cl
c001bba9:	eb 44                	jmp    c001bbef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bbab:	83 ff 02             	cmp    edi,0x2
c001bbae:	75 2d                	jne    c001bbdd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	0f b6 c9             	movzx  ecx,cl
c001bbb6:	0f b6 d2             	movzx  edx,dl
c001bbb9:	0f b6 fb             	movzx  edi,bl
c001bbbc:	0f b6 c0             	movzx  eax,al
c001bbbf:	57                   	push   edi
c001bbc0:	51                   	push   ecx
c001bbc1:	52                   	push   edx
c001bbc2:	50                   	push   eax
c001bbc3:	56                   	push   esi
c001bbc4:	e8 0b ff ff ff       	call   c001bad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc9:	89 c2                	mov    edx,eax
c001bbcb:	ed                   	in     eax,dx
c001bbcc:	83 e3 02             	and    ebx,0x2
c001bbcf:	83 c4 20             	add    esp,0x20
c001bbd2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bbd9:	d3 e8                	shr    eax,cl
c001bbdb:	eb 12                	jmp    c001bbef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bbdd:	83 ec 0c             	sub    esp,0xc
c001bbe0:	68 27 35 02 c0       	push   0xc0023527
c001bbe5:	e8 d8 30 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001bbea:	83 c4 10             	add    esp,0x10
c001bbed:	31 c0                	xor    eax,eax
c001bbef:	5b                   	pop    ebx
c001bbf0:	5e                   	pop    esi
c001bbf1:	5f                   	pop    edi
c001bbf2:	c3                   	ret    
c001bbf3:	90                   	nop

c001bbf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bbf4:	83 ec 18             	sub    esp,0x18
c001bbf7:	6a 00                	push   0x0
c001bbf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbfe:	50                   	push   eax
c001bbff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc04:	50                   	push   eax
c001bc05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc0a:	50                   	push   eax
c001bc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc0f:	e8 36 ff ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc14:	83 c4 2c             	add    esp,0x2c
c001bc17:	c3                   	ret    

c001bc18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bc18:	83 ec 18             	sub    esp,0x18
c001bc1b:	6a 0e                	push   0xe
c001bc1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc22:	50                   	push   eax
c001bc23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc28:	50                   	push   eax
c001bc29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc2e:	50                   	push   eax
c001bc2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc33:	e8 12 ff ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc38:	83 c4 2c             	add    esp,0x2c
c001bc3b:	0f b6 c0             	movzx  eax,al
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bc40:	55                   	push   ebp
c001bc41:	57                   	push   edi
c001bc42:	56                   	push   esi
c001bc43:	53                   	push   ebx
c001bc44:	83 ec 18             	sub    esp,0x18
c001bc47:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bc4c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bc51:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bc56:	6a 0a                	push   0xa
c001bc58:	56                   	push   esi
c001bc59:	55                   	push   ebp
c001bc5a:	57                   	push   edi
c001bc5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc5f:	e8 e6 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc64:	83 c4 14             	add    esp,0x14
c001bc67:	89 c3                	mov    ebx,eax
c001bc69:	6a 0a                	push   0xa
c001bc6b:	0f b6 db             	movzx  ebx,bl
c001bc6e:	56                   	push   esi
c001bc6f:	55                   	push   ebp
c001bc70:	57                   	push   edi
c001bc71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bc75:	e8 d0 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc7a:	83 c4 2c             	add    esp,0x2c
c001bc7d:	25 00 ff 00 00       	and    eax,0xff00
c001bc82:	09 d8                	or     eax,ebx
c001bc84:	5b                   	pop    ebx
c001bc85:	5e                   	pop    esi
c001bc86:	5f                   	pop    edi
c001bc87:	5d                   	pop    ebp
c001bc88:	c3                   	ret    
c001bc89:	90                   	nop

c001bc8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bc8a:	83 ec 18             	sub    esp,0x18
c001bc8d:	6a 08                	push   0x8
c001bc8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc94:	50                   	push   eax
c001bc95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc9a:	50                   	push   eax
c001bc9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bca0:	50                   	push   eax
c001bca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bca5:	e8 a0 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcaa:	83 c4 2c             	add    esp,0x2c
c001bcad:	0f b6 c4             	movzx  eax,ah
c001bcb0:	c3                   	ret    
c001bcb1:	90                   	nop

c001bcb2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bcb2:	83 ec 18             	sub    esp,0x18
c001bcb5:	6a 08                	push   0x8
c001bcb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcbc:	50                   	push   eax
c001bcbd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcc2:	50                   	push   eax
c001bcc3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcc8:	50                   	push   eax
c001bcc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bccd:	e8 78 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcd2:	83 c4 2c             	add    esp,0x2c
c001bcd5:	c3                   	ret    

c001bcd6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bcd6:	83 ec 18             	sub    esp,0x18
c001bcd9:	6a 3c                	push   0x3c
c001bcdb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bce0:	50                   	push   eax
c001bce1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bce6:	50                   	push   eax
c001bce7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bcec:	50                   	push   eax
c001bced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bcf1:	e8 54 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcf6:	83 c4 2c             	add    esp,0x2c
c001bcf9:	c3                   	ret    

c001bcfa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bcfa:	83 ec 18             	sub    esp,0x18
c001bcfd:	6a 18                	push   0x18
c001bcff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd04:	50                   	push   eax
c001bd05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd0a:	50                   	push   eax
c001bd0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd10:	50                   	push   eax
c001bd11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bd15:	e8 30 fe ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd1a:	83 c4 2c             	add    esp,0x2c
c001bd1d:	0f b6 c4             	movzx  eax,ah
c001bd20:	c3                   	ret    
c001bd21:	90                   	nop

c001bd22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd22:	55                   	push   ebp
c001bd23:	57                   	push   edi
c001bd24:	56                   	push   esi
c001bd25:	53                   	push   ebx
c001bd26:	83 ec 28             	sub    esp,0x28
c001bd29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bd2d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bd32:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bd37:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bd3c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bd43:	8d 43 12             	lea    eax,[ebx+0x12]
c001bd46:	83 c3 10             	add    ebx,0x10
c001bd49:	0f b6 c0             	movzx  eax,al
c001bd4c:	0f b6 db             	movzx  ebx,bl
c001bd4f:	50                   	push   eax
c001bd50:	51                   	push   ecx
c001bd51:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bd55:	57                   	push   edi
c001bd56:	55                   	push   ebp
c001bd57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd5b:	e8 ea fd ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd60:	83 c4 14             	add    esp,0x14
c001bd63:	89 c6                	mov    esi,eax
c001bd65:	53                   	push   ebx
c001bd66:	c1 e6 10             	shl    esi,0x10
c001bd69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bd6d:	51                   	push   ecx
c001bd6e:	57                   	push   edi
c001bd6f:	55                   	push   ebp
c001bd70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bd74:	e8 d1 fd ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd79:	83 c4 3c             	add    esp,0x3c
c001bd7c:	0f b7 c0             	movzx  eax,ax
c001bd7f:	5b                   	pop    ebx
c001bd80:	09 f0                	or     eax,esi
c001bd82:	5e                   	pop    esi
c001bd83:	5f                   	pop    edi
c001bd84:	5d                   	pop    ebp
c001bd85:	c3                   	ret    

c001bd86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bd86:	55                   	push   ebp
c001bd87:	57                   	push   edi
c001bd88:	56                   	push   esi
c001bd89:	53                   	push   ebx
c001bd8a:	83 ec 0c             	sub    esp,0xc
c001bd8d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bd91:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd95:	89 f5                	mov    ebp,esi
c001bd97:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001bd9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bda1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bda5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bda9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdad:	83 f9 01             	cmp    ecx,0x1
c001bdb0:	75 5d                	jne    c001be0f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001bdb2:	0f b6 c8             	movzx  ecx,al
c001bdb5:	0f b6 d2             	movzx  edx,dl
c001bdb8:	c1 e1 10             	shl    ecx,0x10
c001bdbb:	c1 e2 0b             	shl    edx,0xb
c001bdbe:	89 f0                	mov    eax,esi
c001bdc0:	25 fc 00 00 00       	and    eax,0xfc
c001bdc5:	09 c1                	or     ecx,eax
c001bdc7:	89 e8                	mov    eax,ebp
c001bdc9:	0f b6 c0             	movzx  eax,al
c001bdcc:	c1 e0 08             	shl    eax,0x8
c001bdcf:	09 c1                	or     ecx,eax
c001bdd1:	09 d1                	or     ecx,edx
c001bdd3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdd8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bdde:	89 c8                	mov    eax,ecx
c001bde0:	ef                   	out    dx,eax
c001bde1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bde6:	ed                   	in     eax,dx
c001bde7:	0f b7 db             	movzx  ebx,bx
c001bdea:	83 e6 02             	and    esi,0x2
c001bded:	74 0a                	je     c001bdf9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001bdef:	0f b7 d0             	movzx  edx,ax
c001bdf2:	c1 e3 10             	shl    ebx,0x10
c001bdf5:	09 d3                	or     ebx,edx
c001bdf7:	eb 05                	jmp    c001bdfe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001bdf9:	66 31 c0             	xor    ax,ax
c001bdfc:	09 c3                	or     ebx,eax
c001bdfe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001be03:	89 c8                	mov    eax,ecx
c001be05:	ef                   	out    dx,eax
c001be06:	ba fc 0c 00 00       	mov    edx,0xcfc
c001be0b:	89 d8                	mov    eax,ebx
c001be0d:	eb 41                	jmp    c001be50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001be0f:	83 f9 02             	cmp    ecx,0x2
c001be12:	75 45                	jne    c001be59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	0f b6 d2             	movzx  edx,dl
c001be1a:	89 f1                	mov    ecx,esi
c001be1c:	0f b6 c0             	movzx  eax,al
c001be1f:	0f b6 f1             	movzx  esi,cl
c001be22:	89 e9                	mov    ecx,ebp
c001be24:	56                   	push   esi
c001be25:	0f b6 c9             	movzx  ecx,cl
c001be28:	51                   	push   ecx
c001be29:	52                   	push   edx
c001be2a:	50                   	push   eax
c001be2b:	57                   	push   edi
c001be2c:	e8 a3 fc ff ff       	call   c001bad4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001be31:	89 c2                	mov    edx,eax
c001be33:	ed                   	in     eax,dx
c001be34:	83 c4 20             	add    esp,0x20
c001be37:	0f b7 db             	movzx  ebx,bx
c001be3a:	f6 c2 02             	test   dl,0x2
c001be3d:	74 0c                	je     c001be4b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001be3f:	0f b7 c8             	movzx  ecx,ax
c001be42:	89 d8                	mov    eax,ebx
c001be44:	c1 e0 10             	shl    eax,0x10
c001be47:	09 c8                	or     eax,ecx
c001be49:	eb 05                	jmp    c001be50 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001be4b:	66 31 c0             	xor    ax,ax
c001be4e:	09 d8                	or     eax,ebx
c001be50:	ef                   	out    dx,eax
c001be51:	83 c4 0c             	add    esp,0xc
c001be54:	5b                   	pop    ebx
c001be55:	5e                   	pop    esi
c001be56:	5f                   	pop    edi
c001be57:	5d                   	pop    ebp
c001be58:	c3                   	ret    
c001be59:	c7 44 24 20 27 35 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023527
c001be61:	83 c4 0c             	add    esp,0xc
c001be64:	5b                   	pop    ebx
c001be65:	5e                   	pop    esi
c001be66:	5f                   	pop    edi
c001be67:	5d                   	pop    ebp
c001be68:	e9 55 2e ff ff       	jmp    c000ecc2 <KePanic(char const*)>
c001be6d:	90                   	nop

c001be6e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001be6e:	55                   	push   ebp
c001be6f:	57                   	push   edi
c001be70:	56                   	push   esi
c001be71:	53                   	push   ebx
c001be72:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001be78:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001be7f:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001be86:	0f 85 bd 00 00 00    	jne    c001bf49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001be8c:	83 ec 0c             	sub    esp,0xc
c001be8f:	68 14 01 00 00       	push   0x114
c001be94:	e8 e2 2a ff ff       	call   c000e97b <malloc>
c001be99:	83 c4 0c             	add    esp,0xc
c001be9c:	89 c3                	mov    ebx,eax
c001be9e:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001bea4:	68 2d 35 02 c0       	push   0xc002352d
c001bea9:	50                   	push   eax
c001beaa:	e8 63 c2 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	85 db                	test   ebx,ebx
c001beb4:	0f 84 67 02 00 00    	je     c001c121 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001beba:	56                   	push   esi
c001bebb:	56                   	push   esi
c001bebc:	6a 01                	push   0x1
c001bebe:	53                   	push   ebx
c001bebf:	e8 6c c2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c001bec4:	83 c4 10             	add    esp,0x10
c001bec7:	85 c0                	test   eax,eax
c001bec9:	0f 85 52 02 00 00    	jne    c001c121 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001becf:	52                   	push   edx
c001bed0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001bed4:	50                   	push   eax
c001bed5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001bed9:	50                   	push   eax
c001beda:	53                   	push   ebx
c001bedb:	e8 52 c5 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001bee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bee4:	40                   	inc    eax
c001bee5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bee8:	e8 8e 2a ff ff       	call   c000e97b <malloc>
c001beed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001bef1:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001bef6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001befa:	59                   	pop    ecx
c001befb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001befd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001bf01:	51                   	push   ecx
c001bf02:	50                   	push   eax
c001bf03:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf07:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001bf0b:	53                   	push   ebx
c001bf0c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bf0f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001bf13:	83 c4 20             	add    esp,0x20
c001bf16:	89 c8                	mov    eax,ecx
c001bf18:	99                   	cdq    
c001bf19:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bf1d:	0f 85 fe 01 00 00    	jne    c001c121 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf23:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001bf27:	0f 85 f4 01 00 00    	jne    c001c121 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf2d:	83 ec 0c             	sub    esp,0xc
c001bf30:	53                   	push   ebx
c001bf31:	e8 58 c2 fe ff       	call   c000818e <File::close()>
c001bf36:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bf3a:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bf41:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c001bf4e:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c001bf54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001bf62:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bf69:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bf6e:	31 c9                	xor    ecx,ecx
c001bf70:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bf78:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bf7d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bf85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf89:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bf91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf95:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001bf99:	0f 8e 82 01 00 00    	jle    c001c121 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf9f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001bfa2:	d4 40                	aam    0x40
c001bfa4:	d5 39                	aad    0x39
c001bfa6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bfaa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001bfae:	d4 40                	aam    0x40
c001bfb0:	d5 39                	aad    0x39
c001bfb2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bfb6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001bfba:	d4 40                	aam    0x40
c001bfbc:	d5 39                	aad    0x39
c001bfbe:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bfc2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001bfc6:	d4 40                	aam    0x40
c001bfc8:	d5 39                	aad    0x39
c001bfca:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bfce:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001bfd2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bfd6:	3c 56                	cmp    al,0x56
c001bfd8:	74 43                	je     c001c01d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001bfda:	d4 40                	aam    0x40
c001bfdc:	d5 39                	aad    0x39
c001bfde:	8d 48 d0             	lea    ecx,[eax-0x30]
c001bfe1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001bfe5:	0f b6 c9             	movzx  ecx,cl
c001bfe8:	c1 e1 04             	shl    ecx,0x4
c001bfeb:	d4 40                	aam    0x40
c001bfed:	d5 39                	aad    0x39
c001bfef:	83 e8 30             	sub    eax,0x30
c001bff2:	0f b6 c0             	movzx  eax,al
c001bff5:	09 c1                	or     ecx,eax
c001bff7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001bffb:	c1 e1 04             	shl    ecx,0x4
c001bffe:	d4 40                	aam    0x40
c001c000:	d5 39                	aad    0x39
c001c002:	83 e8 30             	sub    eax,0x30
c001c005:	0f b6 c0             	movzx  eax,al
c001c008:	09 c1                	or     ecx,eax
c001c00a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c00e:	c1 e1 04             	shl    ecx,0x4
c001c011:	d4 40                	aam    0x40
c001c013:	d5 39                	aad    0x39
c001c015:	83 e8 30             	sub    eax,0x30
c001c018:	0f b6 c0             	movzx  eax,al
c001c01b:	09 c1                	or     ecx,eax
c001c01d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c021:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c025:	3c 58                	cmp    al,0x58
c001c027:	74 47                	je     c001c070 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c029:	d4 40                	aam    0x40
c001c02b:	d5 39                	aad    0x39
c001c02d:	8d 50 d0             	lea    edx,[eax-0x30]
c001c030:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c034:	0f b6 d2             	movzx  edx,dl
c001c037:	c1 e2 04             	shl    edx,0x4
c001c03a:	d4 40                	aam    0x40
c001c03c:	d5 39                	aad    0x39
c001c03e:	83 e8 30             	sub    eax,0x30
c001c041:	0f b6 c0             	movzx  eax,al
c001c044:	09 c2                	or     edx,eax
c001c046:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c04a:	c1 e2 04             	shl    edx,0x4
c001c04d:	d4 40                	aam    0x40
c001c04f:	d5 39                	aad    0x39
c001c051:	83 e8 30             	sub    eax,0x30
c001c054:	0f b6 c0             	movzx  eax,al
c001c057:	09 c2                	or     edx,eax
c001c059:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c05d:	c1 e2 04             	shl    edx,0x4
c001c060:	d4 40                	aam    0x40
c001c062:	d5 39                	aad    0x39
c001c064:	83 e8 30             	sub    eax,0x30
c001c067:	0f b6 c0             	movzx  eax,al
c001c06a:	09 c2                	or     edx,eax
c001c06c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c070:	83 c6 10             	add    esi,0x10
c001c073:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c077:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c07b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c07f:	83 fa 0a             	cmp    edx,0xa
c001c082:	74 0b                	je     c001c08f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c084:	47                   	inc    edi
c001c085:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c089:	75 19                	jne    c001c0a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c08b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c08f:	31 c0                	xor    eax,eax
c001c091:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c096:	0f 94 c0             	sete   al
c001c099:	01 c6                	add    esi,eax
c001c09b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c0a0:	75 0b                	jne    c001c0ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c0a2:	eb 14                	jmp    c001c0b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c0a4:	46                   	inc    esi
c001c0a5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c0a8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c0ab:	eb ca                	jmp    c001c077 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c0ad:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c0b2:	0f 85 dd fe ff ff    	jne    c001bf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c0b8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c0bd:	74 10                	je     c001c0cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c0bf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c0c4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c0c9:	0f 85 c6 fe ff ff    	jne    c001bf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c0cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c0d7:	83 e8 30             	sub    eax,0x30
c001c0da:	83 ef 30             	sub    edi,0x30
c001c0dd:	c1 e0 04             	shl    eax,0x4
c001c0e0:	09 f8                	or     eax,edi
c001c0e2:	0f b6 c0             	movzx  eax,al
c001c0e5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c0e9:	0f 85 a6 fe ff ff    	jne    c001bf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c0ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c0f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c0f7:	83 e8 30             	sub    eax,0x30
c001c0fa:	83 ef 30             	sub    edi,0x30
c001c0fd:	c1 e0 04             	shl    eax,0x4
c001c100:	09 f8                	or     eax,edi
c001c102:	0f b6 c0             	movzx  eax,al
c001c105:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c109:	0f 85 86 fe ff ff    	jne    c001bf95 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c10f:	50                   	push   eax
c001c110:	50                   	push   eax
c001c111:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c115:	50                   	push   eax
c001c116:	55                   	push   ebp
c001c117:	e8 24 45 fe ff       	call   c0000640 <strcpy>
c001c11c:	83 c4 10             	add    esp,0x10
c001c11f:	eb 06                	jmp    c001c127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c121:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c125:	31 ed                	xor    ebp,ebp
c001c127:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c12d:	89 e8                	mov    eax,ebp
c001c12f:	5b                   	pop    ebx
c001c130:	5e                   	pop    esi
c001c131:	5f                   	pop    edi
c001c132:	5d                   	pop    ebp
c001c133:	c3                   	ret    

c001c134 <PCI::checkBus(unsigned char)>:
c001c134:	56                   	push   esi
c001c135:	53                   	push   ebx
c001c136:	31 db                	xor    ebx,ebx
c001c138:	51                   	push   ecx
c001c139:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c13e:	52                   	push   edx
c001c13f:	53                   	push   ebx
c001c140:	43                   	inc    ebx
c001c141:	56                   	push   esi
c001c142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c146:	e8 6f 03 00 00       	call   c001c4ba <PCI::checkDevice(unsigned char, unsigned char)>
c001c14b:	83 c4 10             	add    esp,0x10
c001c14e:	83 fb 20             	cmp    ebx,0x20
c001c151:	75 eb                	jne    c001c13e <PCI::checkBus(unsigned char)+0xa>
c001c153:	58                   	pop    eax
c001c154:	5b                   	pop    ebx
c001c155:	5e                   	pop    esi
c001c156:	c3                   	ret    
c001c157:	90                   	nop

c001c158 <PCI::foundDevice(PCIDeviceInfo)>:
c001c158:	55                   	push   ebp
c001c159:	57                   	push   edi
c001c15a:	56                   	push   esi
c001c15b:	53                   	push   ebx
c001c15c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c162:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c16a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c171:	3d ff ff 00 00       	cmp    eax,0xffff
c001c176:	0f 84 b7 01 00 00    	je     c001c333 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c17c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c184:	66 81 fb 06 04       	cmp    bx,0x406
c001c189:	75 32                	jne    c001c1bd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c18b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c193:	50                   	push   eax
c001c194:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c19c:	50                   	push   eax
c001c19d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c1a5:	50                   	push   eax
c001c1a6:	55                   	push   ebp
c001c1a7:	e8 4e fb ff ff       	call   c001bcfa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c1ac:	59                   	pop    ecx
c001c1ad:	0f b6 c0             	movzx  eax,al
c001c1b0:	5b                   	pop    ebx
c001c1b1:	50                   	push   eax
c001c1b2:	55                   	push   ebp
c001c1b3:	e8 7c ff ff ff       	call   c001c134 <PCI::checkBus(unsigned char)>
c001c1b8:	e9 16 01 00 00       	jmp    c001c2d3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c1bd:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c1c4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c1ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c1ce:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c1d5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c1dd:	85 c0                	test   eax,eax
c001c1df:	74 36                	je     c001c217 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c1e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c1e4:	85 d2                	test   edx,edx
c001c1e6:	74 2b                	je     c001c213 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c1e8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c1ee:	31 f9                	xor    ecx,edi
c001c1f0:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c1f6:	75 1b                	jne    c001c213 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c1f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1fc:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c202:	75 0f                	jne    c001c213 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c204:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c20b:	39 f2                	cmp    edx,esi
c001c20d:	0f 84 20 01 00 00    	je     c001c333 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c213:	8b 00                	mov    eax,DWORD PTR [eax]
c001c215:	eb c6                	jmp    c001c1dd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c217:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c21b:	be 60 35 02 c0       	mov    esi,0xc0023560
c001c220:	b9 07 00 00 00       	mov    ecx,0x7
c001c225:	fc                   	cld    
c001c226:	31 d2                	xor    edx,edx
c001c228:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c22a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c231:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c235:	b9 12 00 00 00       	mov    ecx,0x12
c001c23a:	83 ec 0c             	sub    esp,0xc
c001c23d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c23f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c247:	b9 0a 00 00 00       	mov    ecx,0xa
c001c24c:	f7 f1                	div    ecx
c001c24e:	83 c0 30             	add    eax,0x30
c001c251:	83 c2 30             	add    edx,0x30
c001c254:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c258:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c25c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c264:	31 d2                	xor    edx,edx
c001c266:	f7 f1                	div    ecx
c001c268:	83 c0 30             	add    eax,0x30
c001c26b:	83 c2 30             	add    edx,0x30
c001c26e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c272:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c276:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c27a:	50                   	push   eax
c001c27b:	e8 c0 03 ff ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c280:	83 c4 10             	add    esp,0x10
c001c283:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c289:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c290:	75 46                	jne    c001c2d8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	68 64 01 00 00       	push   0x164
c001c29a:	e8 dc 26 ff ff       	call   c000e97b <malloc>
c001c29f:	89 c3                	mov    ebx,eax
c001c2a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2a4:	e8 9f 10 00 00       	call   c001d348 <SATABus::SATABus()>
c001c2a9:	58                   	pop    eax
c001c2aa:	5a                   	pop    edx
c001c2ab:	53                   	push   ebx
c001c2ac:	55                   	push   ebp
c001c2ad:	e8 90 cd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c2b2:	83 ec 1c             	sub    esp,0x1c
c001c2b5:	b9 09 00 00 00       	mov    ecx,0x9
c001c2ba:	89 e7                	mov    edi,esp
c001c2bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2be:	53                   	push   ebx
c001c2bf:	e8 c4 cc fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c2c4:	83 c4 30             	add    esp,0x30
c001c2c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2c9:	6a 00                	push   0x0
c001c2cb:	6a 00                	push   0x0
c001c2cd:	6a 00                	push   0x0
c001c2cf:	53                   	push   ebx
c001c2d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2d3:	83 c4 10             	add    esp,0x10
c001c2d6:	eb 5b                	jmp    c001c333 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c2d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c2de:	75 19                	jne    c001c2f9 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c2e0:	83 ec 0c             	sub    esp,0xc
c001c2e3:	68 70 02 00 00       	push   0x270
c001c2e8:	e8 8e 26 ff ff       	call   c000e97b <malloc>
c001c2ed:	89 c3                	mov    ebx,eax
c001c2ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2f2:	e8 93 02 00 00       	call   c001c58a <IDE::IDE()>
c001c2f7:	eb b0                	jmp    c001c2a9 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c2f9:	83 ec 0c             	sub    esp,0xc
c001c2fc:	68 58 01 00 00       	push   0x158
c001c301:	e8 75 26 ff ff       	call   c000e97b <malloc>
c001c306:	89 c3                	mov    ebx,eax
c001c308:	58                   	pop    eax
c001c309:	5a                   	pop    edx
c001c30a:	68 46 35 02 c0       	push   0xc0023546
c001c30f:	53                   	push   ebx
c001c310:	e8 e1 cf fe ff       	call   c00092f6 <DriverlessDevice::DriverlessDevice(char const*)>
c001c315:	59                   	pop    ecx
c001c316:	5f                   	pop    edi
c001c317:	53                   	push   ebx
c001c318:	55                   	push   ebp
c001c319:	e8 24 cd fe ff       	call   c0009042 <Device::addChild(Device*)>
c001c31e:	83 ec 1c             	sub    esp,0x1c
c001c321:	b9 09 00 00 00       	mov    ecx,0x9
c001c326:	89 e7                	mov    edi,esp
c001c328:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c32a:	53                   	push   ebx
c001c32b:	e8 58 cc fe ff       	call   c0008f88 <Device::preOpenPCI(PCIDeviceInfo)>
c001c330:	83 c4 30             	add    esp,0x30
c001c333:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c339:	5b                   	pop    ebx
c001c33a:	5e                   	pop    esi
c001c33b:	5f                   	pop    edi
c001c33c:	5d                   	pop    ebp
c001c33d:	c3                   	ret    

c001c33e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c33e:	55                   	push   ebp
c001c33f:	57                   	push   edi
c001c340:	56                   	push   esi
c001c341:	53                   	push   ebx
c001c342:	83 ec 68             	sub    esp,0x68
c001c345:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c349:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c350:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c354:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c35b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c360:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c364:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c36b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c374:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c379:	6a 0c                	push   0xc
c001c37b:	57                   	push   edi
c001c37c:	53                   	push   ebx
c001c37d:	56                   	push   esi
c001c37e:	55                   	push   ebp
c001c37f:	e8 c6 f7 ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c384:	83 c4 20             	add    esp,0x20
c001c387:	57                   	push   edi
c001c388:	53                   	push   ebx
c001c389:	56                   	push   esi
c001c38a:	55                   	push   ebp
c001c38b:	e8 b0 f8 ff ff       	call   c001bc40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c390:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c395:	57                   	push   edi
c001c396:	53                   	push   ebx
c001c397:	56                   	push   esi
c001c398:	55                   	push   ebp
c001c399:	e8 38 f9 ff ff       	call   c001bcd6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c39e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c3a2:	83 c4 14             	add    esp,0x14
c001c3a5:	6a 3c                	push   0x3c
c001c3a7:	57                   	push   edi
c001c3a8:	53                   	push   ebx
c001c3a9:	56                   	push   esi
c001c3aa:	55                   	push   ebp
c001c3ab:	e8 9a f7 ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3b0:	0f b6 c4             	movzx  eax,ah
c001c3b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c3b7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c3bb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c3bf:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c3c4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c3ca:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c3d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c3d4:	83 c4 20             	add    esp,0x20
c001c3d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c3dc:	74 30                	je     c001c40e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3de:	31 c0                	xor    eax,eax
c001c3e0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c3e4:	7e 28                	jle    c001c40e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c3e6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c3ee:	39 cb                	cmp    ebx,ecx
c001c3f0:	75 19                	jne    c001c40b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c3f2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c3fa:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c3fe:	75 0b                	jne    c001c40b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c400:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c407:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c40b:	40                   	inc    eax
c001c40c:	eb d2                	jmp    c001c3e0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c40e:	31 d2                	xor    edx,edx
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	57                   	push   edi
c001c414:	53                   	push   ebx
c001c415:	56                   	push   esi
c001c416:	52                   	push   edx
c001c417:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c41b:	55                   	push   ebp
c001c41c:	e8 01 f9 ff ff       	call   c001bd22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c421:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c425:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c429:	42                   	inc    edx
c001c42a:	83 c4 20             	add    esp,0x20
c001c42d:	83 fa 06             	cmp    edx,0x6
c001c430:	75 de                	jne    c001c410 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c43a:	c1 e2 08             	shl    edx,0x8
c001c43d:	83 ec 0c             	sub    esp,0xc
c001c440:	0f b6 c4             	movzx  eax,ah
c001c443:	09 d0                	or     eax,edx
c001c445:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c44a:	6a 02                	push   0x2
c001c44c:	57                   	push   edi
c001c44d:	53                   	push   ebx
c001c44e:	56                   	push   esi
c001c44f:	55                   	push   ebp
c001c450:	e8 f5 f6 ff ff       	call   c001bb4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c455:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c45a:	83 c4 20             	add    esp,0x20
c001c45d:	57                   	push   edi
c001c45e:	53                   	push   ebx
c001c45f:	56                   	push   esi
c001c460:	55                   	push   ebp
c001c461:	e8 24 f8 ff ff       	call   c001bc8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c466:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c46a:	57                   	push   edi
c001c46b:	53                   	push   ebx
c001c46c:	56                   	push   esi
c001c46d:	55                   	push   ebp
c001c46e:	e8 81 f7 ff ff       	call   c001bbf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c473:	b9 09 00 00 00       	mov    ecx,0x9
c001c478:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c47d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c481:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c485:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c489:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c48d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c491:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c495:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c499:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c49d:	83 ec 0c             	sub    esp,0xc
c001c4a0:	fc                   	cld    
c001c4a1:	89 e7                	mov    edi,esp
c001c4a3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c4a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c4a9:	55                   	push   ebp
c001c4aa:	e8 a9 fc ff ff       	call   c001c158 <PCI::foundDevice(PCIDeviceInfo)>
c001c4af:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c4b5:	5b                   	pop    ebx
c001c4b6:	5e                   	pop    esi
c001c4b7:	5f                   	pop    edi
c001c4b8:	5d                   	pop    ebp
c001c4b9:	c3                   	ret    

c001c4ba <PCI::checkDevice(unsigned char, unsigned char)>:
c001c4ba:	55                   	push   ebp
c001c4bb:	57                   	push   edi
c001c4bc:	56                   	push   esi
c001c4bd:	53                   	push   ebx
c001c4be:	83 ec 0c             	sub    esp,0xc
c001c4c1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c4c5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c4ca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c4cf:	6a 00                	push   0x0
c001c4d1:	56                   	push   esi
c001c4d2:	57                   	push   edi
c001c4d3:	55                   	push   ebp
c001c4d4:	e8 1b f7 ff ff       	call   c001bbf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4d9:	6a 00                	push   0x0
c001c4db:	56                   	push   esi
c001c4dc:	57                   	push   edi
c001c4dd:	55                   	push   ebp
c001c4de:	e8 5b fe ff ff       	call   c001c33e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c4e3:	83 c4 20             	add    esp,0x20
c001c4e6:	6a 00                	push   0x0
c001c4e8:	56                   	push   esi
c001c4e9:	57                   	push   edi
c001c4ea:	55                   	push   ebp
c001c4eb:	e8 28 f7 ff ff       	call   c001bc18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4f0:	83 c4 10             	add    esp,0x10
c001c4f3:	a8 80                	test   al,0x80
c001c4f5:	74 2d                	je     c001c524 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c4f7:	bb 01 00 00 00       	mov    ebx,0x1
c001c4fc:	53                   	push   ebx
c001c4fd:	56                   	push   esi
c001c4fe:	57                   	push   edi
c001c4ff:	55                   	push   ebp
c001c500:	e8 ef f6 ff ff       	call   c001bbf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c505:	83 c4 10             	add    esp,0x10
c001c508:	0f b7 c0             	movzx  eax,ax
c001c50b:	3d ff ff 00 00       	cmp    eax,0xffff
c001c510:	74 0c                	je     c001c51e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c512:	53                   	push   ebx
c001c513:	56                   	push   esi
c001c514:	57                   	push   edi
c001c515:	55                   	push   ebp
c001c516:	e8 23 fe ff ff       	call   c001c33e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	43                   	inc    ebx
c001c51f:	83 fb 08             	cmp    ebx,0x8
c001c522:	75 d8                	jne    c001c4fc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c524:	83 c4 0c             	add    esp,0xc
c001c527:	5b                   	pop    ebx
c001c528:	5e                   	pop    esi
c001c529:	5f                   	pop    edi
c001c52a:	5d                   	pop    ebp
c001c52b:	c3                   	ret    

c001c52c <PCI::detect()>:
c001c52c:	56                   	push   esi
c001c52d:	53                   	push   ebx
c001c52e:	53                   	push   ebx
c001c52f:	31 db                	xor    ebx,ebx
c001c531:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c535:	6a 00                	push   0x0
c001c537:	6a 00                	push   0x0
c001c539:	6a 00                	push   0x0
c001c53b:	56                   	push   esi
c001c53c:	e8 d7 f6 ff ff       	call   c001bc18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	a8 80                	test   al,0x80
c001c546:	75 21                	jne    c001c569 <PCI::detect()+0x3d>
c001c548:	51                   	push   ecx
c001c549:	51                   	push   ecx
c001c54a:	6a 00                	push   0x0
c001c54c:	56                   	push   esi
c001c54d:	e8 e2 fb ff ff       	call   c001c134 <PCI::checkBus(unsigned char)>
c001c552:	83 c4 10             	add    esp,0x10
c001c555:	eb 2a                	jmp    c001c581 <PCI::detect()+0x55>
c001c557:	52                   	push   edx
c001c558:	52                   	push   edx
c001c559:	53                   	push   ebx
c001c55a:	43                   	inc    ebx
c001c55b:	56                   	push   esi
c001c55c:	e8 d3 fb ff ff       	call   c001c134 <PCI::checkBus(unsigned char)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	83 fb 08             	cmp    ebx,0x8
c001c567:	74 18                	je     c001c581 <PCI::detect()+0x55>
c001c569:	53                   	push   ebx
c001c56a:	6a 00                	push   0x0
c001c56c:	6a 00                	push   0x0
c001c56e:	56                   	push   esi
c001c56f:	e8 80 f6 ff ff       	call   c001bbf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	0f b7 c0             	movzx  eax,ax
c001c57a:	3d ff ff 00 00       	cmp    eax,0xffff
c001c57f:	74 d6                	je     c001c557 <PCI::detect()+0x2b>
c001c581:	58                   	pop    eax
c001c582:	5b                   	pop    ebx
c001c583:	5e                   	pop    esi
c001c584:	c3                   	ret    
c001c585:	90                   	nop

c001c586 <IDE::close(int, int, void*)>:
c001c586:	83 c8 ff             	or     eax,0xffffffff
c001c589:	c3                   	ret    

c001c58a <IDE::IDE()>:
c001c58a:	83 ec 0c             	sub    esp,0xc
c001c58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c591:	83 ec 08             	sub    esp,0x8
c001c594:	68 f0 35 02 c0       	push   0xc00235f0
c001c599:	50                   	push   eax
c001c59a:	e8 fd cd fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001c59f:	83 c4 10             	add    esp,0x10
c001c5a2:	ba 04 37 02 c0       	mov    edx,0xc0023704
c001c5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ab:	89 10                	mov    DWORD PTR [eax],edx
c001c5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c5b8:	90                   	nop
c001c5b9:	83 c4 0c             	add    esp,0xc
c001c5bc:	c3                   	ret    
c001c5bd:	90                   	nop

c001c5be <IDE::prepareInterrupt(unsigned char)>:
c001c5be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c5c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5c7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c5cf:	c3                   	ret    

c001c5d0 <selectDrive(unsigned char, unsigned char)>:
c001c5d0:	c3                   	ret    
c001c5d1:	90                   	nop

c001c5d2 <IDE::getBase(unsigned char)>:
c001c5d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5db:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c5e3:	c3                   	ret    

c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c5e4:	55                   	push   ebp
c001c5e5:	57                   	push   edi
c001c5e6:	56                   	push   esi
c001c5e7:	53                   	push   ebx
c001c5e8:	83 ec 1c             	sub    esp,0x1c
c001c5eb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c5ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c5f3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c5f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c5fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5fe:	80 f9 03             	cmp    cl,0x3
c001c601:	77 4f                	ja     c001c652 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c607:	0f b6 fa             	movzx  edi,dl
c001c60a:	0f b6 db             	movzx  ebx,bl
c001c60d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c610:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c615:	80 ca 80             	or     dl,0x80
c001c618:	52                   	push   edx
c001c619:	6a 0c                	push   0xc
c001c61b:	57                   	push   edi
c001c61c:	56                   	push   esi
c001c61d:	e8 c2 ff ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c622:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c627:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c62b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c62f:	ee                   	out    dx,al
c001c630:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c635:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001c639:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c63d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c641:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c649:	83 c4 2c             	add    esp,0x2c
c001c64c:	5b                   	pop    ebx
c001c64d:	5e                   	pop    esi
c001c64e:	5f                   	pop    edi
c001c64f:	5d                   	pop    ebp
c001c650:	eb 92                	jmp    c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c652:	0f b6 cb             	movzx  ecx,bl
c001c655:	83 f9 07             	cmp    ecx,0x7
c001c658:	77 12                	ja     c001c66c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c65a:	0f b6 d2             	movzx  edx,dl
c001c65d:	0f b6 db             	movzx  ebx,bl
c001c660:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001c668:	01 da                	add    edx,ebx
c001c66a:	eb 2f                	jmp    c001c69b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c66c:	83 f9 0d             	cmp    ecx,0xd
c001c66f:	77 13                	ja     c001c684 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c671:	0f b6 d2             	movzx  edx,dl
c001c674:	0f b6 db             	movzx  ebx,bl
c001c677:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001c67e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c682:	eb 17                	jmp    c001c69b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c684:	83 f9 15             	cmp    ecx,0x15
c001c687:	77 13                	ja     c001c69c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c689:	0f b6 d2             	movzx  edx,dl
c001c68c:	0f b6 db             	movzx  ebx,bl
c001c68f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001c697:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c69b:	ee                   	out    dx,al
c001c69c:	83 c4 1c             	add    esp,0x1c
c001c69f:	5b                   	pop    ebx
c001c6a0:	5e                   	pop    esi
c001c6a1:	5f                   	pop    edi
c001c6a2:	5d                   	pop    ebp
c001c6a3:	c3                   	ret    

c001c6a4 <IDE::read(unsigned char, unsigned char)>:
c001c6a4:	55                   	push   ebp
c001c6a5:	57                   	push   edi
c001c6a6:	56                   	push   esi
c001c6a7:	53                   	push   ebx
c001c6a8:	83 ec 1c             	sub    esp,0x1c
c001c6ab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c6af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c6b3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c6b6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c6ba:	3c 03                	cmp    al,0x3
c001c6bc:	77 40                	ja     c001c6fe <IDE::read(unsigned char, unsigned char)+0x5a>
c001c6be:	0f b6 f9             	movzx  edi,cl
c001c6c1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c6c4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c6c9:	0c 80                	or     al,0x80
c001c6cb:	50                   	push   eax
c001c6cc:	6a 0c                	push   0xc
c001c6ce:	57                   	push   edi
c001c6cf:	56                   	push   esi
c001c6d0:	e8 0f ff ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6d5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c6da:	0f b6 d3             	movzx  edx,bl
c001c6dd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c6e1:	ec                   	in     al,dx
c001c6e2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c6e6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c6eb:	52                   	push   edx
c001c6ec:	6a 0c                	push   0xc
c001c6ee:	57                   	push   edi
c001c6ef:	56                   	push   esi
c001c6f0:	e8 ef fe ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6f5:	83 c4 20             	add    esp,0x20
c001c6f8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c6fc:	eb 4c                	jmp    c001c74a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c6fe:	0f b6 d3             	movzx  edx,bl
c001c701:	83 fa 07             	cmp    edx,0x7
c001c704:	77 12                	ja     c001c718 <IDE::read(unsigned char, unsigned char)+0x74>
c001c706:	0f b6 c9             	movzx  ecx,cl
c001c709:	0f b6 d3             	movzx  edx,bl
c001c70c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001c714:	01 c2                	add    edx,eax
c001c716:	eb 31                	jmp    c001c749 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c718:	83 fa 0d             	cmp    edx,0xd
c001c71b:	77 13                	ja     c001c730 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c71d:	0f b6 c9             	movzx  ecx,cl
c001c720:	0f b6 d3             	movzx  edx,bl
c001c723:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001c72a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c72e:	eb 19                	jmp    c001c749 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c730:	31 c0                	xor    eax,eax
c001c732:	83 fa 15             	cmp    edx,0x15
c001c735:	77 13                	ja     c001c74a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c737:	0f b6 c9             	movzx  ecx,cl
c001c73a:	0f b6 d3             	movzx  edx,bl
c001c73d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c745:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c749:	ec                   	in     al,dx
c001c74a:	83 c4 1c             	add    esp,0x1c
c001c74d:	5b                   	pop    ebx
c001c74e:	5e                   	pop    esi
c001c74f:	5f                   	pop    edi
c001c750:	5d                   	pop    ebp
c001c751:	c3                   	ret    

c001c752 <IDE::waitInterrupt(unsigned char)>:
c001c752:	55                   	push   ebp
c001c753:	57                   	push   edi
c001c754:	56                   	push   esi
c001c755:	53                   	push   ebx
c001c756:	31 db                	xor    ebx,ebx
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c75f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c764:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c76c:	89 e8                	mov    eax,ebp
c001c76e:	84 c0                	test   al,al
c001c770:	75 30                	jne    c001c7a2 <IDE::waitInterrupt(unsigned char)+0x50>
c001c772:	50                   	push   eax
c001c773:	6a 0c                	push   0xc
c001c775:	56                   	push   esi
c001c776:	57                   	push   edi
c001c777:	e8 28 ff ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	a8 01                	test   al,0x1
c001c781:	75 27                	jne    c001c7aa <IDE::waitInterrupt(unsigned char)+0x58>
c001c783:	f6 c3 04             	test   bl,0x4
c001c786:	75 12                	jne    c001c79a <IDE::waitInterrupt(unsigned char)+0x48>
c001c788:	83 fb 32             	cmp    ebx,0x32
c001c78b:	7e 0d                	jle    c001c79a <IDE::waitInterrupt(unsigned char)+0x48>
c001c78d:	83 ec 0c             	sub    esp,0xc
c001c790:	6a 64                	push   0x64
c001c792:	e8 f1 8e ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001c797:	83 c4 10             	add    esp,0x10
c001c79a:	83 fb 3c             	cmp    ebx,0x3c
c001c79d:	74 0b                	je     c001c7aa <IDE::waitInterrupt(unsigned char)+0x58>
c001c79f:	43                   	inc    ebx
c001c7a0:	eb c2                	jmp    c001c764 <IDE::waitInterrupt(unsigned char)+0x12>
c001c7a2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c7aa:	83 c4 0c             	add    esp,0xc
c001c7ad:	89 e8                	mov    eax,ebp
c001c7af:	5b                   	pop    ebx
c001c7b0:	5e                   	pop    esi
c001c7b1:	5f                   	pop    edi
c001c7b2:	5d                   	pop    ebp
c001c7b3:	c3                   	ret    

c001c7b4 <ideChannel0IRQHandler(regs*, void*)>:
c001c7b4:	83 ec 10             	sub    esp,0x10
c001c7b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7bb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c7c2:	6a 07                	push   0x7
c001c7c4:	6a 00                	push   0x0
c001c7c6:	50                   	push   eax
c001c7c7:	e8 d8 fe ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001c7cc:	83 c4 1c             	add    esp,0x1c
c001c7cf:	c3                   	ret    

c001c7d0 <ideChannel1IRQHandler(regs*, void*)>:
c001c7d0:	83 ec 10             	sub    esp,0x10
c001c7d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7d7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c7de:	6a 07                	push   0x7
c001c7e0:	6a 01                	push   0x1
c001c7e2:	50                   	push   eax
c001c7e3:	e8 bc fe ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001c7e8:	83 c4 1c             	add    esp,0x1c
c001c7eb:	c3                   	ret    

c001c7ec <IDE::enableIRQs(unsigned char, bool)>:
c001c7ec:	57                   	push   edi
c001c7ed:	b8 02 00 00 00       	mov    eax,0x2
c001c7f2:	56                   	push   esi
c001c7f3:	53                   	push   ebx
c001c7f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c801:	74 02                	je     c001c805 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c803:	31 c0                	xor    eax,eax
c001c805:	0f b6 db             	movzx  ebx,bl
c001c808:	bf 04 00 00 00       	mov    edi,0x4
c001c80d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c814:	50                   	push   eax
c001c815:	6a 0c                	push   0xc
c001c817:	53                   	push   ebx
c001c818:	56                   	push   esi
c001c819:	e8 c6 fd ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	50                   	push   eax
c001c822:	6a 0c                	push   0xc
c001c824:	53                   	push   ebx
c001c825:	56                   	push   esi
c001c826:	e8 79 fe ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	4f                   	dec    edi
c001c82f:	75 f0                	jne    c001c821 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c831:	5b                   	pop    ebx
c001c832:	5e                   	pop    esi
c001c833:	5f                   	pop    edi
c001c834:	c3                   	ret    
c001c835:	90                   	nop

c001c836 <IDE::open(int, int, void*)>:
c001c836:	57                   	push   edi
c001c837:	56                   	push   esi
c001c838:	53                   	push   ebx
c001c839:	83 ec 10             	sub    esp,0x10
c001c83c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c840:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c849:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c852:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c859:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c860:	0f 85 17 02 00 00    	jne    c001ca7d <IDE::open(int, int, void*)+0x247>
c001c866:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c86c:	a8 70                	test   al,0x70
c001c86e:	75 44                	jne    c001c8b4 <IDE::open(int, int, void*)+0x7e>
c001c870:	ba 20 84 00 00       	mov    edx,0x8420
c001c875:	0f a3 c2             	bt     edx,eax
c001c878:	73 3a                	jae    c001c8b4 <IDE::open(int, int, void*)+0x7e>
c001c87a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	83 e0 fc             	and    eax,0xfffffffc
c001c886:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c88d:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c893:	83 e0 fc             	and    eax,0xfffffffc
c001c896:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c89d:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c8a3:	83 e0 fc             	and    eax,0xfffffffc
c001c8a6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c8ad:	68 b5 13 02 c0       	push   0xc00213b5
c001c8b2:	eb 60                	jmp    c001c914 <IDE::open(int, int, void*)+0xde>
c001c8b4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c8be:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c8c8:	be 64 00 00 00       	mov    esi,0x64
c001c8cd:	57                   	push   edi
c001c8ce:	57                   	push   edi
c001c8cf:	68 08 36 02 c0       	push   0xc0023608
c001c8d4:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c8d8:	57                   	push   edi
c001c8d9:	e8 62 3d fe ff       	call   c0000640 <strcpy>
c001c8de:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c8e5:	31 d2                	xor    edx,edx
c001c8e7:	89 c8                	mov    eax,ecx
c001c8e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8ec:	f7 f6                	div    esi
c001c8ee:	be 0a 00 00 00       	mov    esi,0xa
c001c8f3:	83 c0 30             	add    eax,0x30
c001c8f6:	31 d2                	xor    edx,edx
c001c8f8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c8fc:	89 c8                	mov    eax,ecx
c001c8fe:	f7 f6                	div    esi
c001c900:	89 d1                	mov    ecx,edx
c001c902:	31 d2                	xor    edx,edx
c001c904:	83 c1 30             	add    ecx,0x30
c001c907:	f7 f6                	div    esi
c001c909:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c90d:	83 c2 30             	add    edx,0x30
c001c910:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c914:	e8 27 fd fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c919:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c91e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c925:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c92c:	c1 e1 10             	shl    ecx,0x10
c001c92f:	c1 e0 0b             	shl    eax,0xb
c001c932:	83 c4 10             	add    esp,0x10
c001c935:	09 c1                	or     ecx,eax
c001c937:	89 fa                	mov    edx,edi
c001c939:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c940:	c1 e0 08             	shl    eax,0x8
c001c943:	09 c1                	or     ecx,eax
c001c945:	89 c8                	mov    eax,ecx
c001c947:	0d 08 00 00 80       	or     eax,0x80000008
c001c94c:	ef                   	out    dx,eax
c001c94d:	be fc 0c 00 00       	mov    esi,0xcfc
c001c952:	89 f2                	mov    edx,esi
c001c954:	ed                   	in     eax,dx
c001c955:	c1 e8 10             	shr    eax,0x10
c001c958:	3d ff ff 00 00       	cmp    eax,0xffff
c001c95d:	0f 84 e5 00 00 00    	je     c001ca48 <IDE::open(int, int, void*)+0x212>
c001c963:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c969:	89 fa                	mov    edx,edi
c001c96b:	89 c8                	mov    eax,ecx
c001c96d:	ef                   	out    dx,eax
c001c96e:	b0 fe                	mov    al,0xfe
c001c970:	89 f2                	mov    edx,esi
c001c972:	ee                   	out    dx,al
c001c973:	89 c8                	mov    eax,ecx
c001c975:	89 fa                	mov    edx,edi
c001c977:	ef                   	out    dx,eax
c001c978:	89 f2                	mov    edx,esi
c001c97a:	ed                   	in     eax,dx
c001c97b:	3c fe                	cmp    al,0xfe
c001c97d:	0f 85 85 00 00 00    	jne    c001ca08 <IDE::open(int, int, void*)+0x1d2>
c001c983:	83 ec 0c             	sub    esp,0xc
c001c986:	68 eb 13 02 c0       	push   0xc00213eb
c001c98b:	e8 b0 fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c990:	c7 04 24 0e 36 02 c0 	mov    DWORD PTR [esp],0xc002360e
c001c997:	e8 c8 a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c99c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c9a6:	c7 04 24 0c 16 02 c0 	mov    DWORD PTR [esp],0xc002160c
c001c9ad:	e8 8e fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001c9b2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c9b9:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c9c0:	c1 e1 10             	shl    ecx,0x10
c001c9c3:	c1 e0 08             	shl    eax,0x8
c001c9c6:	89 fa                	mov    edx,edi
c001c9c8:	09 c1                	or     ecx,eax
c001c9ca:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c9d1:	c1 e0 0b             	shl    eax,0xb
c001c9d4:	09 c1                	or     ecx,eax
c001c9d6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c9dc:	89 c8                	mov    eax,ecx
c001c9de:	ef                   	out    dx,eax
c001c9df:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c9e5:	89 f2                	mov    edx,esi
c001c9e7:	ee                   	out    dx,al
c001c9e8:	89 c8                	mov    eax,ecx
c001c9ea:	89 fa                	mov    edx,edi
c001c9ec:	ef                   	out    dx,eax
c001c9ed:	89 f2                	mov    edx,esi
c001c9ef:	ed                   	in     eax,dx
c001c9f0:	0f b6 c0             	movzx  eax,al
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c9fc:	74 5a                	je     c001ca58 <IDE::open(int, int, void*)+0x222>
c001c9fe:	83 ec 0c             	sub    esp,0xc
c001ca01:	68 23 36 02 c0       	push   0xc0023623
c001ca06:	eb 48                	jmp    c001ca50 <IDE::open(int, int, void*)+0x21a>
c001ca08:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ca11:	75 2b                	jne    c001ca3e <IDE::open(int, int, void*)+0x208>
c001ca13:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ca1a:	3d 80 00 00 00       	cmp    eax,0x80
c001ca1f:	74 07                	je     c001ca28 <IDE::open(int, int, void*)+0x1f2>
c001ca21:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ca26:	75 16                	jne    c001ca3e <IDE::open(int, int, void*)+0x208>
c001ca28:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	68 de 0e 02 c0       	push   0xc0020ede
c001ca37:	e8 04 fc fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ca3c:	eb 17                	jmp    c001ca55 <IDE::open(int, int, void*)+0x21f>
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	68 2b 36 02 c0       	push   0xc002362b
c001ca46:	eb 08                	jmp    c001ca50 <IDE::open(int, int, void*)+0x21a>
c001ca48:	83 ec 0c             	sub    esp,0xc
c001ca4b:	68 5c 36 02 c0       	push   0xc002365c
c001ca50:	e8 6d 22 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001ca5f:	74 56                	je     c001cab7 <IDE::open(int, int, void*)+0x281>
c001ca61:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ca67:	83 e0 fc             	and    eax,0xfffffffc
c001ca6a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ca71:	83 c0 08             	add    eax,0x8
c001ca74:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca7b:	eb 3a                	jmp    c001cab7 <IDE::open(int, int, void*)+0x281>
c001ca7d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ca83:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca8a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca91:	05 06 02 00 00       	add    eax,0x206
c001ca96:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca9d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001caa4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001caab:	05 06 02 00 00       	add    eax,0x206
c001cab0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cab7:	83 ec 0c             	sub    esp,0xc
c001caba:	68 03 1b 02 c0       	push   0xc0021b03
c001cabf:	e8 7c fb fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cac4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	89 c2                	mov    edx,eax
c001cacf:	83 e2 0f             	and    edx,0xf
c001cad2:	83 fa 08             	cmp    edx,0x8
c001cad5:	75 0a                	jne    c001cae1 <IDE::open(int, int, void*)+0x2ab>
c001cad7:	83 e8 02             	sub    eax,0x2
c001cada:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cae1:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cae7:	89 c2                	mov    edx,eax
c001cae9:	83 e2 0f             	and    edx,0xf
c001caec:	83 fa 08             	cmp    edx,0x8
c001caef:	75 0a                	jne    c001cafb <IDE::open(int, int, void*)+0x2c5>
c001caf1:	83 e8 02             	sub    eax,0x2
c001caf4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cafb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cb02:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cb09:	89 d0                	mov    eax,edx
c001cb0b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb0e:	8d 7a 01             	lea    edi,[edx+0x1]
c001cb11:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb15:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cb19:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb1d:	83 e1 3f             	and    ecx,0x3f
c001cb20:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb24:	89 f9                	mov    ecx,edi
c001cb26:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cb2d:	0f b6 c9             	movzx  ecx,cl
c001cb30:	8d 78 02             	lea    edi,[eax+0x2]
c001cb33:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb36:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb3a:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cb3e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb42:	83 e2 3f             	and    edx,0x3f
c001cb45:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb49:	89 f9                	mov    ecx,edi
c001cb4b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cb51:	0f b6 d1             	movzx  edx,cl
c001cb54:	8d 78 03             	lea    edi,[eax+0x3]
c001cb57:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb5a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb5e:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cb62:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cb66:	83 e1 3f             	and    ecx,0x3f
c001cb69:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cb6d:	89 fa                	mov    edx,edi
c001cb6f:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cb75:	0f b6 ca             	movzx  ecx,dl
c001cb78:	8d 78 04             	lea    edi,[eax+0x4]
c001cb7b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb7e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb82:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb86:	89 fa                	mov    edx,edi
c001cb88:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb8e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb92:	83 e2 3f             	and    edx,0x3f
c001cb95:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb99:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cba0:	66 85 f6             	test   si,si
c001cba3:	74 24                	je     c001cbc9 <IDE::open(int, int, void*)+0x393>
c001cba5:	89 f9                	mov    ecx,edi
c001cba7:	83 c0 05             	add    eax,0x5
c001cbaa:	0f b6 d1             	movzx  edx,cl
c001cbad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cbb0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cbb4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cbb8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cbbe:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cbc2:	83 e0 3f             	and    eax,0x3f
c001cbc5:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cbc9:	83 ec 0c             	sub    esp,0xc
c001cbcc:	68 86 36 02 c0       	push   0xc0023686
c001cbd1:	e8 6a fa fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cbd6:	58                   	pop    eax
c001cbd7:	5a                   	pop    edx
c001cbd8:	6a 00                	push   0x0
c001cbda:	53                   	push   ebx
c001cbdb:	e8 de f9 ff ff       	call   c001c5be <IDE::prepareInterrupt(unsigned char)>
c001cbe0:	59                   	pop    ecx
c001cbe1:	5e                   	pop    esi
c001cbe2:	6a 01                	push   0x1
c001cbe4:	53                   	push   ebx
c001cbe5:	e8 d4 f9 ff ff       	call   c001c5be <IDE::prepareInterrupt(unsigned char)>
c001cbea:	c7 04 24 1f 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f1f
c001cbf1:	e8 4a fa fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cbf6:	83 c4 0c             	add    esp,0xc
c001cbf9:	6a 00                	push   0x0
c001cbfb:	6a 00                	push   0x0
c001cbfd:	53                   	push   ebx
c001cbfe:	e8 e9 fb ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001cc03:	83 c4 0c             	add    esp,0xc
c001cc06:	6a 00                	push   0x0
c001cc08:	6a 01                	push   0x1
c001cc0a:	53                   	push   ebx
c001cc0b:	e8 dc fb ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001cc10:	c7 04 24 88 36 02 c0 	mov    DWORD PTR [esp],0xc0023688
c001cc17:	e8 24 fa fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cc1c:	83 c4 10             	add    esp,0x10
c001cc1f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cc26:	74 3c                	je     c001cc64 <IDE::open(int, int, void*)+0x42e>
c001cc28:	83 ec 0c             	sub    esp,0xc
c001cc2b:	53                   	push   ebx
c001cc2c:	6a 01                	push   0x1
c001cc2e:	68 b4 c7 01 c0       	push   0xc001c7b4
c001cc33:	6a 0e                	push   0xe
c001cc35:	53                   	push   ebx
c001cc36:	e8 b3 c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc3b:	83 c4 14             	add    esp,0x14
c001cc3e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc44:	53                   	push   ebx
c001cc45:	6a 01                	push   0x1
c001cc47:	68 d0 c7 01 c0       	push   0xc001c7d0
c001cc4c:	6a 0f                	push   0xf
c001cc4e:	53                   	push   ebx
c001cc4f:	e8 9a c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc54:	83 c4 14             	add    esp,0x14
c001cc57:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cc5d:	68 12 18 02 c0       	push   0xc0021812
c001cc62:	eb 40                	jmp    c001cca4 <IDE::open(int, int, void*)+0x46e>
c001cc64:	83 ec 0c             	sub    esp,0xc
c001cc67:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cc71:	53                   	push   ebx
c001cc72:	6a 00                	push   0x0
c001cc74:	68 b4 c7 01 c0       	push   0xc001c7b4
c001cc79:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc7f:	53                   	push   ebx
c001cc80:	e8 69 c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc85:	83 c4 14             	add    esp,0x14
c001cc88:	53                   	push   ebx
c001cc89:	6a 00                	push   0x0
c001cc8b:	68 d0 c7 01 c0       	push   0xc001c7d0
c001cc90:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc96:	53                   	push   ebx
c001cc97:	e8 52 c3 fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc9c:	83 c4 14             	add    esp,0x14
c001cc9f:	68 b8 23 02 c0       	push   0xc00223b8
c001cca4:	e8 97 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cca9:	83 c4 10             	add    esp,0x10
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	68 8a 36 02 c0       	push   0xc002368a
c001ccb4:	e8 87 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ccb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccbe:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ccc1:	c7 04 24 66 27 02 c0 	mov    DWORD PTR [esp],0xc0022766
c001ccc8:	e8 73 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	6a 07                	push   0x7
c001ccd2:	6a 00                	push   0x0
c001ccd4:	53                   	push   ebx
c001ccd5:	e8 ca f9 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001ccda:	83 c4 0c             	add    esp,0xc
c001ccdd:	6a 07                	push   0x7
c001ccdf:	6a 01                	push   0x1
c001cce1:	53                   	push   ebx
c001cce2:	e8 bd f9 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cce7:	c7 04 24 c8 21 02 c0 	mov    DWORD PTR [esp],0xc00221c8
c001ccee:	e8 4d f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ccf3:	83 c4 0c             	add    esp,0xc
c001ccf6:	6a 01                	push   0x1
c001ccf8:	6a 00                	push   0x0
c001ccfa:	53                   	push   ebx
c001ccfb:	e8 ec fa ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001cd00:	83 c4 0c             	add    esp,0xc
c001cd03:	6a 01                	push   0x1
c001cd05:	6a 01                	push   0x1
c001cd07:	53                   	push   ebx
c001cd08:	e8 df fa ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001cd0d:	c7 04 24 8d 36 02 c0 	mov    DWORD PTR [esp],0xc002368d
c001cd14:	e8 27 f9 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cd19:	83 c4 20             	add    esp,0x20
c001cd1c:	31 c0                	xor    eax,eax
c001cd1e:	5b                   	pop    ebx
c001cd1f:	5e                   	pop    esi
c001cd20:	5f                   	pop    edi
c001cd21:	c3                   	ret    

c001cd22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cd22:	55                   	push   ebp
c001cd23:	57                   	push   edi
c001cd24:	56                   	push   esi
c001cd25:	53                   	push   ebx
c001cd26:	83 ec 1c             	sub    esp,0x1c
c001cd29:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cd2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd31:	8d 42 f8             	lea    eax,[edx-0x8]
c001cd34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cd38:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cd3c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cd40:	3c 03                	cmp    al,0x3
c001cd42:	77 5a                	ja     c001cd9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cd44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cd48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cd4c:	0f b6 db             	movzx  ebx,bl
c001cd4f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cd52:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd57:	0c 80                	or     al,0x80
c001cd59:	50                   	push   eax
c001cd5a:	6a 0c                	push   0xc
c001cd5c:	53                   	push   ebx
c001cd5d:	56                   	push   esi
c001cd5e:	e8 81 f8 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd63:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001cd68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd70:	0f b6 d2             	movzx  edx,dl
c001cd73:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001cd77:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd79:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd7e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cd82:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd8a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd92:	83 c4 2c             	add    esp,0x2c
c001cd95:	5b                   	pop    ebx
c001cd96:	5e                   	pop    esi
c001cd97:	5f                   	pop    edi
c001cd98:	5d                   	pop    ebp
c001cd99:	e9 46 f8 ff ff       	jmp    c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd9e:	0f b6 c2             	movzx  eax,dl
c001cda1:	83 f8 07             	cmp    eax,0x7
c001cda4:	77 12                	ja     c001cdb8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cda6:	0f b6 c2             	movzx  eax,dl
c001cda9:	0f b6 db             	movzx  ebx,bl
c001cdac:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001cdb4:	01 c2                	add    edx,eax
c001cdb6:	eb 2f                	jmp    c001cde7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cdb8:	83 f8 0d             	cmp    eax,0xd
c001cdbb:	77 13                	ja     c001cdd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001cdbd:	0f b6 db             	movzx  ebx,bl
c001cdc0:	0f b6 d2             	movzx  edx,dl
c001cdc3:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cdca:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cdce:	eb 17                	jmp    c001cde7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cdd0:	83 f8 15             	cmp    eax,0x15
c001cdd3:	77 14                	ja     c001cde9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cdd5:	0f b6 db             	movzx  ebx,bl
c001cdd8:	0f b6 d2             	movzx  edx,dl
c001cddb:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cde3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cde7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cde9:	83 c4 1c             	add    esp,0x1c
c001cdec:	5b                   	pop    ebx
c001cded:	5e                   	pop    esi
c001cdee:	5f                   	pop    edi
c001cdef:	5d                   	pop    ebp
c001cdf0:	c3                   	ret    
c001cdf1:	90                   	nop

c001cdf2 <IDE::detect()>:
c001cdf2:	55                   	push   ebp
c001cdf3:	57                   	push   edi
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	81 ec 28 02 00 00    	sub    esp,0x228
c001cdfc:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001ce03:	68 8f 36 02 c0       	push   0xc002368f
c001ce08:	e8 33 f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce0d:	83 c4 10             	add    esp,0x10
c001ce10:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ce17:	0f 85 0c 04 00 00    	jne    c001d229 <IDE::detect()+0x437>
c001ce1d:	83 ec 0c             	sub    esp,0xc
c001ce20:	31 f6                	xor    esi,esi
c001ce22:	68 92 36 02 c0       	push   0xc0023692
c001ce27:	31 ff                	xor    edi,edi
c001ce29:	e8 12 f8 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce2e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ce35:	83 c4 10             	add    esp,0x10
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	68 95 36 02 c0       	push   0xc0023695
c001ce40:	e8 fb f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce45:	83 c4 10             	add    esp,0x10
c001ce48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce50:	83 ec 0c             	sub    esp,0xc
c001ce53:	31 ed                	xor    ebp,ebp
c001ce55:	68 98 36 02 c0       	push   0xc0023698
c001ce5a:	e8 e1 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce5f:	89 f8                	mov    eax,edi
c001ce61:	c1 e0 06             	shl    eax,0x6
c001ce64:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ce6c:	c7 04 24 9b 36 02 c0 	mov    DWORD PTR [esp],0xc002369b
c001ce73:	e8 c8 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ce78:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ce7c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ce80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce84:	c1 e0 04             	shl    eax,0x4
c001ce87:	83 c8 a0             	or     eax,0xffffffa0
c001ce8a:	0f b6 c0             	movzx  eax,al
c001ce8d:	50                   	push   eax
c001ce8e:	6a 06                	push   0x6
c001ce90:	56                   	push   esi
c001ce91:	53                   	push   ebx
c001ce92:	e8 4d f7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce97:	83 c4 1c             	add    esp,0x1c
c001ce9a:	6a 0c                	push   0xc
c001ce9c:	56                   	push   esi
c001ce9d:	53                   	push   ebx
c001ce9e:	e8 01 f8 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cea3:	83 c4 0c             	add    esp,0xc
c001cea6:	6a 0c                	push   0xc
c001cea8:	56                   	push   esi
c001cea9:	53                   	push   ebx
c001ceaa:	e8 f5 f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001ceaf:	83 c4 0c             	add    esp,0xc
c001ceb2:	6a 0c                	push   0xc
c001ceb4:	56                   	push   esi
c001ceb5:	53                   	push   ebx
c001ceb6:	e8 e9 f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cebb:	83 c4 0c             	add    esp,0xc
c001cebe:	6a 0c                	push   0xc
c001cec0:	56                   	push   esi
c001cec1:	53                   	push   ebx
c001cec2:	e8 dd f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cec7:	c7 04 24 9e 36 02 c0 	mov    DWORD PTR [esp],0xc002369e
c001cece:	e8 6d f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001ced3:	68 ec 00 00 00       	push   0xec
c001ced8:	6a 07                	push   0x7
c001ceda:	56                   	push   esi
c001cedb:	53                   	push   ebx
c001cedc:	e8 03 f7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cee1:	83 c4 1c             	add    esp,0x1c
c001cee4:	6a 0c                	push   0xc
c001cee6:	56                   	push   esi
c001cee7:	53                   	push   ebx
c001cee8:	e8 b7 f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001ceed:	83 c4 0c             	add    esp,0xc
c001cef0:	6a 0c                	push   0xc
c001cef2:	56                   	push   esi
c001cef3:	53                   	push   ebx
c001cef4:	e8 ab f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cef9:	83 c4 0c             	add    esp,0xc
c001cefc:	6a 0c                	push   0xc
c001cefe:	56                   	push   esi
c001ceff:	53                   	push   ebx
c001cf00:	e8 9f f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cf05:	83 c4 0c             	add    esp,0xc
c001cf08:	6a 0c                	push   0xc
c001cf0a:	56                   	push   esi
c001cf0b:	53                   	push   ebx
c001cf0c:	e8 93 f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cf11:	c7 04 24 a1 36 02 c0 	mov    DWORD PTR [esp],0xc00236a1
c001cf18:	e8 23 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf1d:	83 c4 0c             	add    esp,0xc
c001cf20:	6a 0c                	push   0xc
c001cf22:	56                   	push   esi
c001cf23:	53                   	push   ebx
c001cf24:	e8 7b f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	84 c0                	test   al,al
c001cf2e:	75 1f                	jne    c001cf4f <IDE::detect()+0x15d>
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	68 a4 36 02 c0       	push   0xc00236a4
c001cf38:	e8 03 f7 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf3d:	e9 c3 02 00 00       	jmp    c001d205 <IDE::detect()+0x413>
c001cf42:	a8 80                	test   al,0x80
c001cf44:	74 21                	je     c001cf67 <IDE::detect()+0x175>
c001cf46:	45                   	inc    ebp
c001cf47:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001cf4d:	7f 1e                	jg     c001cf6d <IDE::detect()+0x17b>
c001cf4f:	50                   	push   eax
c001cf50:	6a 0c                	push   0xc
c001cf52:	56                   	push   esi
c001cf53:	53                   	push   ebx
c001cf54:	e8 4b f7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cf59:	83 c4 10             	add    esp,0x10
c001cf5c:	a8 01                	test   al,0x1
c001cf5e:	74 e2                	je     c001cf42 <IDE::detect()+0x150>
c001cf60:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cf65:	eb 22                	jmp    c001cf89 <IDE::detect()+0x197>
c001cf67:	a8 08                	test   al,0x8
c001cf69:	74 db                	je     c001cf46 <IDE::detect()+0x154>
c001cf6b:	eb 17                	jmp    c001cf84 <IDE::detect()+0x192>
c001cf6d:	83 ec 0c             	sub    esp,0xc
c001cf70:	6a 32                	push   0x32
c001cf72:	e8 11 87 ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001cf77:	83 c4 10             	add    esp,0x10
c001cf7a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cf80:	75 cd                	jne    c001cf4f <IDE::detect()+0x15d>
c001cf82:	eb dc                	jmp    c001cf60 <IDE::detect()+0x16e>
c001cf84:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cf89:	83 ec 0c             	sub    esp,0xc
c001cf8c:	68 a7 36 02 c0       	push   0xc00236a7
c001cf91:	e8 aa f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001cf96:	83 c4 10             	add    esp,0x10
c001cf99:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cf9e:	74 60                	je     c001d000 <IDE::detect()+0x20e>
c001cfa0:	50                   	push   eax
c001cfa1:	6a 04                	push   0x4
c001cfa3:	56                   	push   esi
c001cfa4:	53                   	push   ebx
c001cfa5:	e8 fa f6 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cfaa:	83 c4 0c             	add    esp,0xc
c001cfad:	89 c5                	mov    ebp,eax
c001cfaf:	6a 05                	push   0x5
c001cfb1:	56                   	push   esi
c001cfb2:	53                   	push   ebx
c001cfb3:	e8 ec f6 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001cfb8:	83 c4 10             	add    esp,0x10
c001cfbb:	89 e9                	mov    ecx,ebp
c001cfbd:	0f b6 c0             	movzx  eax,al
c001cfc0:	0f b6 e9             	movzx  ebp,cl
c001cfc3:	83 fd 14             	cmp    ebp,0x14
c001cfc6:	75 07                	jne    c001cfcf <IDE::detect()+0x1dd>
c001cfc8:	3d eb 00 00 00       	cmp    eax,0xeb
c001cfcd:	eb 0e                	jmp    c001cfdd <IDE::detect()+0x1eb>
c001cfcf:	3d 96 00 00 00       	cmp    eax,0x96
c001cfd4:	0f 85 2e 02 00 00    	jne    c001d208 <IDE::detect()+0x416>
c001cfda:	83 fd 69             	cmp    ebp,0x69
c001cfdd:	0f 85 25 02 00 00    	jne    c001d208 <IDE::detect()+0x416>
c001cfe3:	68 a1 00 00 00       	push   0xa1
c001cfe8:	6a 07                	push   0x7
c001cfea:	56                   	push   esi
c001cfeb:	53                   	push   ebx
c001cfec:	e8 f3 f5 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cff1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cff8:	e8 8b 86 ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001cffd:	83 c4 10             	add    esp,0x10
c001d000:	83 ec 0c             	sub    esp,0xc
c001d003:	89 fd                	mov    ebp,edi
c001d005:	68 aa 36 02 c0       	push   0xc00236aa
c001d00a:	c1 e5 06             	shl    ebp,0x6
c001d00d:	e8 2e f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d012:	01 dd                	add    ebp,ebx
c001d014:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d018:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d01f:	52                   	push   edx
c001d020:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d024:	6a 00                	push   0x0
c001d026:	56                   	push   esi
c001d027:	53                   	push   ebx
c001d028:	e8 f5 fc ff ff       	call   c001cd22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d02d:	83 c4 14             	add    esp,0x14
c001d030:	68 ae 36 02 c0       	push   0xc00236ae
c001d035:	e8 06 f6 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d03a:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001d03f:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d046:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d04d:	89 f0                	mov    eax,esi
c001d04f:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d055:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d059:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d05f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d063:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d06a:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d072:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d079:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d081:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d087:	c7 04 24 b2 36 02 c0 	mov    DWORD PTR [esp],0xc00236b2
c001d08e:	e8 ad f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d093:	83 c4 10             	add    esp,0x10
c001d096:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d09d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0a1:	74 09                	je     c001d0ac <IDE::detect()+0x2ba>
c001d0a3:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d0aa:	eb 07                	jmp    c001d0b3 <IDE::detect()+0x2c1>
c001d0ac:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d0b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d0b7:	89 f8                	mov    eax,edi
c001d0b9:	83 ec 0c             	sub    esp,0xc
c001d0bc:	c1 e0 06             	shl    eax,0x6
c001d0bf:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d0c2:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d0c8:	68 b6 36 02 c0       	push   0xc00236b6
c001d0cd:	e8 6e f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d0d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0d6:	89 e8                	mov    eax,ebp
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d0de:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d0e1:	83 c0 02             	add    eax,0x2
c001d0e4:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d0ea:	83 c2 02             	add    edx,0x2
c001d0ed:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d0f0:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d0f6:	39 d5                	cmp    ebp,edx
c001d0f8:	75 e4                	jne    c001d0de <IDE::detect()+0x2ec>
c001d0fa:	83 ec 0c             	sub    esp,0xc
c001d0fd:	89 fd                	mov    ebp,edi
c001d0ff:	c1 e5 06             	shl    ebp,0x6
c001d102:	01 dd                	add    ebp,ebx
c001d104:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d10b:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d112:	c1 e8 09             	shr    eax,0x9
c001d115:	83 e0 01             	and    eax,0x1
c001d118:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d11e:	68 ba 36 02 c0       	push   0xc00236ba
c001d123:	e8 18 f5 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d128:	83 c4 10             	add    esp,0x10
c001d12b:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d130:	75 66                	jne    c001d198 <IDE::detect()+0x3a6>
c001d132:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d139:	0f 84 b8 00 00 00    	je     c001d1f7 <IDE::detect()+0x405>
c001d13f:	83 ec 0c             	sub    esp,0xc
c001d142:	68 be 36 02 c0       	push   0xc00236be
c001d147:	e8 f4 f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d14c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d153:	e8 23 18 ff ff       	call   c000e97b <malloc>
c001d158:	89 04 24             	mov    DWORD PTR [esp],eax
c001d15b:	89 c5                	mov    ebp,eax
c001d15d:	e8 44 05 00 00       	call   c001d6a6 <ATA::ATA()>
c001d162:	c7 04 24 c2 36 02 c0 	mov    DWORD PTR [esp],0xc00236c2
c001d169:	e8 d2 f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d16e:	59                   	pop    ecx
c001d16f:	58                   	pop    eax
c001d170:	55                   	push   ebp
c001d171:	53                   	push   ebx
c001d172:	e8 cb be fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d177:	c7 04 24 c7 36 02 c0 	mov    DWORD PTR [esp],0xc00236c7
c001d17e:	e8 bd f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d186:	53                   	push   ebx
c001d187:	57                   	push   edi
c001d188:	6a 00                	push   0x0
c001d18a:	55                   	push   ebp
c001d18b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d18e:	83 c4 14             	add    esp,0x14
c001d191:	68 cc 36 02 c0       	push   0xc00236cc
c001d196:	eb 57                	jmp    c001d1ef <IDE::detect()+0x3fd>
c001d198:	83 ec 0c             	sub    esp,0xc
c001d19b:	68 d1 36 02 c0       	push   0xc00236d1
c001d1a0:	e8 9b f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d1a5:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d1ac:	e8 ca 17 ff ff       	call   c000e97b <malloc>
c001d1b1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1b4:	89 c5                	mov    ebp,eax
c001d1b6:	e8 65 0b 00 00       	call   c001dd20 <ATAPI::ATAPI()>
c001d1bb:	c7 04 24 d7 36 02 c0 	mov    DWORD PTR [esp],0xc00236d7
c001d1c2:	e8 79 f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d1c7:	58                   	pop    eax
c001d1c8:	5a                   	pop    edx
c001d1c9:	55                   	push   ebp
c001d1ca:	53                   	push   ebx
c001d1cb:	e8 72 be fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d1d0:	c7 04 24 de 36 02 c0 	mov    DWORD PTR [esp],0xc00236de
c001d1d7:	e8 64 f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d1dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1df:	53                   	push   ebx
c001d1e0:	57                   	push   edi
c001d1e1:	6a 00                	push   0x0
c001d1e3:	55                   	push   ebp
c001d1e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1e7:	83 c4 14             	add    esp,0x14
c001d1ea:	68 e5 36 02 c0       	push   0xc00236e5
c001d1ef:	e8 4c f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d1f4:	83 c4 10             	add    esp,0x10
c001d1f7:	83 ec 0c             	sub    esp,0xc
c001d1fa:	47                   	inc    edi
c001d1fb:	68 ec 36 02 c0       	push   0xc00236ec
c001d200:	e8 3b f4 fe ff       	call   c000c640 <KeSetBootMessage(char const*)>
c001d205:	83 c4 10             	add    esp,0x10
c001d208:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d20d:	74 0d                	je     c001d21c <IDE::detect()+0x42a>
c001d20f:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d217:	e9 34 fc ff ff       	jmp    c001ce50 <IDE::detect()+0x5e>
c001d21c:	4e                   	dec    esi
c001d21d:	74 0a                	je     c001d229 <IDE::detect()+0x437>
c001d21f:	be 01 00 00 00       	mov    esi,0x1
c001d224:	e9 0f fc ff ff       	jmp    c001ce38 <IDE::detect()+0x46>
c001d229:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d22f:	5b                   	pop    ebx
c001d230:	5e                   	pop    esi
c001d231:	5f                   	pop    edi
c001d232:	5d                   	pop    ebp
c001d233:	c3                   	ret    

c001d234 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d234:	55                   	push   ebp
c001d235:	57                   	push   edi
c001d236:	56                   	push   esi
c001d237:	53                   	push   ebx
c001d238:	83 ec 1c             	sub    esp,0x1c
c001d23b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d23f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d243:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d247:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d24b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d24f:	88 c3                	mov    bl,al
c001d251:	25 ff 00 00 00       	and    eax,0xff
c001d256:	0f 84 88 00 00 00    	je     c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	89 c7                	mov    edi,eax
c001d261:	68 f0 36 02 c0       	push   0xc00236f0
c001d266:	e8 f9 9c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d26b:	83 c4 10             	add    esp,0x10
c001d26e:	83 ff 01             	cmp    edi,0x1
c001d271:	74 6b                	je     c001d2de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d273:	83 ff 02             	cmp    edi,0x2
c001d276:	75 58                	jne    c001d2d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d278:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d27d:	01 ff                	add    edi,edi
c001d27f:	50                   	push   eax
c001d280:	09 fe                	or     esi,edi
c001d282:	6a 01                	push   0x1
c001d284:	89 f0                	mov    eax,esi
c001d286:	0f b6 f0             	movzx  esi,al
c001d289:	c1 e6 06             	shl    esi,0x6
c001d28c:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d294:	50                   	push   eax
c001d295:	55                   	push   ebp
c001d296:	e8 09 f4 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001d29b:	83 c4 10             	add    esp,0x10
c001d29e:	a8 01                	test   al,0x1
c001d2a0:	74 02                	je     c001d2a4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d2a2:	b3 07                	mov    bl,0x7
c001d2a4:	a8 02                	test   al,0x2
c001d2a6:	74 02                	je     c001d2aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d2a8:	b3 03                	mov    bl,0x3
c001d2aa:	a8 04                	test   al,0x4
c001d2ac:	74 02                	je     c001d2b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d2ae:	b3 14                	mov    bl,0x14
c001d2b0:	a8 08                	test   al,0x8
c001d2b2:	74 02                	je     c001d2b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d2b4:	b3 03                	mov    bl,0x3
c001d2b6:	a8 10                	test   al,0x10
c001d2b8:	74 02                	je     c001d2bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d2ba:	b3 15                	mov    bl,0x15
c001d2bc:	a8 20                	test   al,0x20
c001d2be:	74 02                	je     c001d2c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d2c0:	b3 03                	mov    bl,0x3
c001d2c2:	a8 40                	test   al,0x40
c001d2c4:	74 02                	je     c001d2c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d2c6:	b3 16                	mov    bl,0x16
c001d2c8:	a8 80                	test   al,0x80
c001d2ca:	74 18                	je     c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2cc:	b3 0d                	mov    bl,0xd
c001d2ce:	eb 14                	jmp    c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2d0:	83 ff 03             	cmp    edi,0x3
c001d2d3:	74 0d                	je     c001d2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d2d5:	83 ff 04             	cmp    edi,0x4
c001d2d8:	75 0a                	jne    c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2da:	b3 08                	mov    bl,0x8
c001d2dc:	eb 06                	jmp    c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2de:	b3 13                	mov    bl,0x13
c001d2e0:	eb 02                	jmp    c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d2e2:	b3 17                	mov    bl,0x17
c001d2e4:	83 c4 1c             	add    esp,0x1c
c001d2e7:	88 d8                	mov    al,bl
c001d2e9:	5b                   	pop    ebx
c001d2ea:	5e                   	pop    esi
c001d2eb:	5f                   	pop    edi
c001d2ec:	5d                   	pop    ebp
c001d2ed:	c3                   	ret    

c001d2ee <IDE::polling(unsigned char, unsigned int)>:
c001d2ee:	57                   	push   edi
c001d2ef:	56                   	push   esi
c001d2f0:	53                   	push   ebx
c001d2f1:	bb 04 00 00 00       	mov    ebx,0x4
c001d2f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d2fa:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d2ff:	52                   	push   edx
c001d300:	6a 0c                	push   0xc
c001d302:	56                   	push   esi
c001d303:	57                   	push   edi
c001d304:	e8 9b f3 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	4b                   	dec    ebx
c001d30d:	75 f0                	jne    c001d2ff <IDE::polling(unsigned char, unsigned int)+0x11>
c001d30f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d314:	50                   	push   eax
c001d315:	6a 0c                	push   0xc
c001d317:	56                   	push   esi
c001d318:	57                   	push   edi
c001d319:	e8 86 f3 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001d31e:	83 c4 10             	add    esp,0x10
c001d321:	a8 01                	test   al,0x1
c001d323:	75 17                	jne    c001d33c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d325:	a8 20                	test   al,0x20
c001d327:	75 0f                	jne    c001d338 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d329:	4b                   	dec    ebx
c001d32a:	74 10                	je     c001d33c <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d32c:	a8 80                	test   al,0x80
c001d32e:	75 e4                	jne    c001d314 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d330:	a8 08                	test   al,0x8
c001d332:	74 e0                	je     c001d314 <IDE::polling(unsigned char, unsigned int)+0x26>
c001d334:	31 c0                	xor    eax,eax
c001d336:	eb 06                	jmp    c001d33e <IDE::polling(unsigned char, unsigned int)+0x50>
c001d338:	b0 01                	mov    al,0x1
c001d33a:	eb 02                	jmp    c001d33e <IDE::polling(unsigned char, unsigned int)+0x50>
c001d33c:	b0 02                	mov    al,0x2
c001d33e:	5b                   	pop    ebx
c001d33f:	5e                   	pop    esi
c001d340:	5f                   	pop    edi
c001d341:	c3                   	ret    

c001d342 <SATABus::close(int, int, void*)>:
c001d342:	31 c0                	xor    eax,eax
c001d344:	c3                   	ret    
c001d345:	90                   	nop

c001d346 <SATABus::detect()>:
c001d346:	c3                   	ret    
c001d347:	90                   	nop

c001d348 <SATABus::SATABus()>:
c001d348:	83 ec 0c             	sub    esp,0xc
c001d34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34f:	83 ec 08             	sub    esp,0x8
c001d352:	68 28 37 02 c0       	push   0xc0023728
c001d357:	50                   	push   eax
c001d358:	e8 3f c0 fe ff       	call   c000939c <HardDiskController::HardDiskController(char const*)>
c001d35d:	83 c4 10             	add    esp,0x10
c001d360:	ba 54 37 02 c0       	mov    edx,0xc0023754
c001d365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d369:	89 10                	mov    DWORD PTR [eax],edx
c001d36b:	83 ec 0c             	sub    esp,0xc
c001d36e:	6a 50                	push   0x50
c001d370:	e8 10 1c ff ff       	call   c000ef85 <Phys::allocateContiguousPages(int)>
c001d375:	83 c4 10             	add    esp,0x10
c001d378:	89 c2                	mov    edx,eax
c001d37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d37e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d384:	83 ec 0c             	sub    esp,0xc
c001d387:	6a 50                	push   0x50
c001d389:	e8 a1 4c ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c001d38e:	83 c4 10             	add    esp,0x10
c001d391:	89 c2                	mov    edx,eax
c001d393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d397:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d39d:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d3a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3a6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d3ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d3b0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d3b6:	83 ec 0c             	sub    esp,0xc
c001d3b9:	6a 03                	push   0x3
c001d3bb:	6a 50                	push   0x50
c001d3bd:	51                   	push   ecx
c001d3be:	52                   	push   edx
c001d3bf:	50                   	push   eax
c001d3c0:	e8 37 55 ff ff       	call   c00128fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d3c5:	83 c4 20             	add    esp,0x20
c001d3c8:	90                   	nop
c001d3c9:	83 c4 0c             	add    esp,0xc
c001d3cc:	c3                   	ret    
c001d3cd:	90                   	nop

c001d3ce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d3ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d3d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d3d8:	09 c2                	or     edx,eax
c001d3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d3e6:	31 c0                	xor    eax,eax
c001d3e8:	c1 e9 08             	shr    ecx,0x8
c001d3eb:	83 e1 0f             	and    ecx,0xf
c001d3ee:	39 c8                	cmp    eax,ecx
c001d3f0:	74 0a                	je     c001d3fc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d3f2:	f6 c2 01             	test   dl,0x1
c001d3f5:	74 08                	je     c001d3ff <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d3f7:	d1 ea                	shr    edx,1
c001d3f9:	40                   	inc    eax
c001d3fa:	eb f2                	jmp    c001d3ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d3fc:	83 c8 ff             	or     eax,0xffffffff
c001d3ff:	c3                   	ret    

c001d400 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d404:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d407:	89 c2                	mov    edx,eax
c001d409:	c1 ea 08             	shr    edx,0x8
c001d40c:	83 e2 0f             	and    edx,0xf
c001d40f:	4a                   	dec    edx
c001d410:	75 32                	jne    c001d444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d412:	83 e0 0f             	and    eax,0xf
c001d415:	83 f8 03             	cmp    eax,0x3
c001d418:	75 2a                	jne    c001d444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d41a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d41d:	b8 02 00 00 00       	mov    eax,0x2
c001d422:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d428:	74 1c                	je     c001d446 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d42a:	b8 04 00 00 00       	mov    eax,0x4
c001d42f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d435:	74 0f                	je     c001d446 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d437:	31 c0                	xor    eax,eax
c001d439:	83 fa 03             	cmp    edx,0x3
c001d43c:	0f 94 c0             	sete   al
c001d43f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d443:	c3                   	ret    
c001d444:	31 c0                	xor    eax,eax
c001d446:	c3                   	ret    
c001d447:	90                   	nop

c001d448 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d44c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d44f:	0f ba e2 0f          	bt     edx,0xf
c001d453:	72 f7                	jb     c001d44c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d455:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d458:	83 ca 10             	or     edx,0x10
c001d45b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d45e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d461:	83 ca 01             	or     edx,0x1
c001d464:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d467:	c3                   	ret    

c001d468 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d46c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d46f:	83 e2 fe             	and    edx,0xfffffffe
c001d472:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d475:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d478:	83 e2 ef             	and    edx,0xffffffef
c001d47b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d47e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d481:	0f ba e2 0e          	bt     edx,0xe
c001d485:	72 f7                	jb     c001d47e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d487:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d48a:	0f ba e2 0f          	bt     edx,0xf
c001d48e:	72 ee                	jb     c001d47e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d490:	c3                   	ret    
c001d491:	90                   	nop

c001d492 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d492:	55                   	push   ebp
c001d493:	57                   	push   edi
c001d494:	56                   	push   esi
c001d495:	53                   	push   ebx
c001d496:	83 ec 1c             	sub    esp,0x1c
c001d499:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d49d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d4a1:	53                   	push   ebx
c001d4a2:	56                   	push   esi
c001d4a3:	e8 c0 ff ff ff       	call   c001d468 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d4a8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d4ac:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d4b2:	83 ec 0c             	sub    esp,0xc
c001d4b5:	c1 e5 0a             	shl    ebp,0xa
c001d4b8:	01 e8                	add    eax,ebp
c001d4ba:	89 03                	mov    DWORD PTR [ebx],eax
c001d4bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d4be:	68 00 04 00 00       	push   0x400
c001d4c3:	6a 00                	push   0x0
c001d4c5:	50                   	push   eax
c001d4c6:	e8 25 30 fe ff       	call   c00004f0 <memset>
c001d4cb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d4d1:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d4d5:	01 e8                	add    eax,ebp
c001d4d7:	83 c4 1c             	add    esp,0x1c
c001d4da:	89 03                	mov    DWORD PTR [ebx],eax
c001d4dc:	c1 e2 08             	shl    edx,0x8
c001d4df:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4e6:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d4ec:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d4f2:	01 f8                	add    eax,edi
c001d4f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d4f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4fa:	68 00 01 00 00       	push   0x100
c001d4ff:	6a 00                	push   0x0
c001d501:	50                   	push   eax
c001d502:	e8 e9 2f fe ff       	call   c00004f0 <memset>
c001d507:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001d50d:	01 fa                	add    edx,edi
c001d50f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d513:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d516:	c1 e7 0d             	shl    edi,0xd
c001d519:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d520:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d526:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d52c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d530:	31 ff                	xor    edi,edi
c001d532:	83 c4 10             	add    esp,0x10
c001d535:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d53b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d53f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d545:	83 c5 20             	add    ebp,0x20
c001d548:	01 f8                	add    eax,edi
c001d54a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d54d:	52                   	push   edx
c001d54e:	68 00 01 00 00       	push   0x100
c001d553:	6a 00                	push   0x0
c001d555:	50                   	push   eax
c001d556:	e8 95 2f fe ff       	call   c00004f0 <memset>
c001d55b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d55f:	83 c4 10             	add    esp,0x10
c001d562:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d568:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d56f:	01 f8                	add    eax,edi
c001d571:	81 c7 00 01 00 00    	add    edi,0x100
c001d577:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d57a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d580:	75 b3                	jne    c001d535 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001d582:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d589:	50                   	push   eax
c001d58a:	50                   	push   eax
c001d58b:	53                   	push   ebx
c001d58c:	56                   	push   esi
c001d58d:	e8 b6 fe ff ff       	call   c001d448 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d592:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d599:	83 c4 2c             	add    esp,0x2c
c001d59c:	5b                   	pop    ebx
c001d59d:	5e                   	pop    esi
c001d59e:	5f                   	pop    edi
c001d59f:	5d                   	pop    ebp
c001d5a0:	c3                   	ret    
c001d5a1:	90                   	nop

c001d5a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d5a2:	55                   	push   ebp
c001d5a3:	57                   	push   edi
c001d5a4:	56                   	push   esi
c001d5a5:	53                   	push   ebx
c001d5a6:	31 db                	xor    ebx,ebx
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d5b3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d5b6:	f7 c7 01 00 00 00    	test   edi,0x1
c001d5bc:	74 7a                	je     c001d638 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d5be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5c2:	89 d8                	mov    eax,ebx
c001d5c4:	c1 e0 07             	shl    eax,0x7
c001d5c7:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d5ce:	55                   	push   ebp
c001d5cf:	56                   	push   esi
c001d5d0:	e8 2b fe ff ff       	call   c001d400 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d5d5:	5a                   	pop    edx
c001d5d6:	83 f8 01             	cmp    eax,0x1
c001d5d9:	59                   	pop    ecx
c001d5da:	75 21                	jne    c001d5fd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d5dc:	50                   	push   eax
c001d5dd:	53                   	push   ebx
c001d5de:	55                   	push   ebp
c001d5df:	56                   	push   esi
c001d5e0:	e8 ad fe ff ff       	call   c001d492 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d5e5:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d5ec:	e8 8a 13 ff ff       	call   c000e97b <malloc>
c001d5f1:	89 c5                	mov    ebp,eax
c001d5f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5f6:	e8 f1 0d 00 00       	call   c001e3ec <SATA::SATA()>
c001d5fb:	eb 24                	jmp    c001d621 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d5fd:	83 f8 04             	cmp    eax,0x4
c001d600:	75 36                	jne    c001d638 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d602:	51                   	push   ecx
c001d603:	53                   	push   ebx
c001d604:	55                   	push   ebp
c001d605:	56                   	push   esi
c001d606:	e8 87 fe ff ff       	call   c001d492 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d60b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d612:	e8 64 13 ff ff       	call   c000e97b <malloc>
c001d617:	89 c5                	mov    ebp,eax
c001d619:	89 04 24             	mov    DWORD PTR [esp],eax
c001d61c:	e8 63 11 00 00       	call   c001e784 <SATAPI::SATAPI()>
c001d621:	58                   	pop    eax
c001d622:	5a                   	pop    edx
c001d623:	55                   	push   ebp
c001d624:	56                   	push   esi
c001d625:	e8 18 ba fe ff       	call   c0009042 <Device::addChild(Device*)>
c001d62a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d62d:	56                   	push   esi
c001d62e:	6a 00                	push   0x0
c001d630:	53                   	push   ebx
c001d631:	55                   	push   ebp
c001d632:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d635:	83 c4 20             	add    esp,0x20
c001d638:	d1 ef                	shr    edi,1
c001d63a:	43                   	inc    ebx
c001d63b:	83 fb 20             	cmp    ebx,0x20
c001d63e:	0f 85 72 ff ff ff    	jne    c001d5b6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d644:	83 c4 0c             	add    esp,0xc
c001d647:	5b                   	pop    ebx
c001d648:	5e                   	pop    esi
c001d649:	5f                   	pop    edi
c001d64a:	5d                   	pop    ebp
c001d64b:	c3                   	ret    

c001d64c <SATABus::open(int, int, void*)>:
c001d64c:	53                   	push   ebx
c001d64d:	83 ec 08             	sub    esp,0x8
c001d650:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d654:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d65a:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d660:	e8 a3 7b ff ff       	call   c0015208 <KeDisablePreemption()>
c001d665:	52                   	push   edx
c001d666:	52                   	push   edx
c001d667:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d66d:	53                   	push   ebx
c001d66e:	e8 2f ff ff ff       	call   c001d5a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d673:	e8 b8 7b ff ff       	call   c0015230 <KeRestorePreemption()>
c001d678:	31 c0                	xor    eax,eax
c001d67a:	83 c4 18             	add    esp,0x18
c001d67d:	5b                   	pop    ebx
c001d67e:	c3                   	ret    
c001d67f:	90                   	nop

c001d680 <ATA::close(int, int, void*)>:
c001d680:	83 ec 0c             	sub    esp,0xc
c001d683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d687:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d68d:	85 c0                	test   eax,eax
c001d68f:	74 0c                	je     c001d69d <ATA::close(int, int, void*)+0x1d>
c001d691:	83 ec 0c             	sub    esp,0xc
c001d694:	8b 10                	mov    edx,DWORD PTR [eax]
c001d696:	50                   	push   eax
c001d697:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	31 c0                	xor    eax,eax
c001d69f:	83 c4 0c             	add    esp,0xc
c001d6a2:	c3                   	ret    
c001d6a3:	90                   	nop

c001d6a4 <ATA::powerSaving(PowerSavingLevel)>:
c001d6a4:	c3                   	ret    
c001d6a5:	90                   	nop

c001d6a6 <ATA::ATA()>:
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ad:	83 ec 04             	sub    esp,0x4
c001d6b0:	68 00 02 00 00       	push   0x200
c001d6b5:	68 2d 38 02 c0       	push   0xc002382d
c001d6ba:	50                   	push   eax
c001d6bb:	e8 66 bd fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6c0:	83 c4 10             	add    esp,0x10
c001d6c3:	ba 94 37 02 c0       	mov    edx,0xc0023794
c001d6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6cc:	89 10                	mov    DWORD PTR [eax],edx
c001d6ce:	90                   	nop
c001d6cf:	83 c4 0c             	add    esp,0xc
c001d6d2:	c3                   	ret    
c001d6d3:	90                   	nop

c001d6d4 <ATA::flush(bool)>:
c001d6d4:	53                   	push   ebx
c001d6d5:	83 ec 08             	sub    esp,0x8
c001d6d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d6dc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d6e1:	83 f8 01             	cmp    eax,0x1
c001d6e4:	19 c0                	sbb    eax,eax
c001d6e6:	83 e0 fd             	and    eax,0xfffffffd
c001d6e9:	05 ea 00 00 00       	add    eax,0xea
c001d6ee:	50                   	push   eax
c001d6ef:	6a 07                	push   0x7
c001d6f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6f8:	50                   	push   eax
c001d6f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d6ff:	e8 e0 ee ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d704:	83 c4 0c             	add    esp,0xc
c001d707:	6a 00                	push   0x0
c001d709:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d710:	50                   	push   eax
c001d711:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d717:	e8 d2 fb ff ff       	call   c001d2ee <IDE::polling(unsigned char, unsigned int)>
c001d71c:	83 c4 18             	add    esp,0x18
c001d71f:	5b                   	pop    ebx
c001d720:	c3                   	ret    
c001d721:	90                   	nop

c001d722 <ATA::readyForCommand()>:
c001d722:	56                   	push   esi
c001d723:	53                   	push   ebx
c001d724:	53                   	push   ebx
c001d725:	31 db                	xor    ebx,ebx
c001d727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d72b:	51                   	push   ecx
c001d72c:	6a 0c                	push   0xc
c001d72e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d735:	50                   	push   eax
c001d736:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d73c:	e8 63 ef ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001d741:	83 c4 10             	add    esp,0x10
c001d744:	a8 88                	test   al,0x88
c001d746:	74 1f                	je     c001d767 <ATA::readyForCommand()+0x45>
c001d748:	43                   	inc    ebx
c001d749:	83 fb 63             	cmp    ebx,0x63
c001d74c:	7e dd                	jle    c001d72b <ATA::readyForCommand()+0x9>
c001d74e:	83 ec 0c             	sub    esp,0xc
c001d751:	6a 0a                	push   0xa
c001d753:	e8 30 7f ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001d758:	83 c4 10             	add    esp,0x10
c001d75b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d761:	75 c8                	jne    c001d72b <ATA::readyForCommand()+0x9>
c001d763:	31 c0                	xor    eax,eax
c001d765:	eb 02                	jmp    c001d769 <ATA::readyForCommand()+0x47>
c001d767:	b0 01                	mov    al,0x1
c001d769:	5a                   	pop    edx
c001d76a:	5b                   	pop    ebx
c001d76b:	5e                   	pop    esi
c001d76c:	c3                   	ret    
c001d76d:	90                   	nop

c001d76e <ATA::access(unsigned long long, int, void*, bool)>:
c001d76e:	55                   	push   ebp
c001d76f:	57                   	push   edi
c001d770:	56                   	push   esi
c001d771:	53                   	push   ebx
c001d772:	83 ec 2c             	sub    esp,0x2c
c001d775:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d779:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d77d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d781:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d785:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d789:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d78d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d791:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d797:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d79b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7a5:	c1 e0 06             	shl    eax,0x6
c001d7a8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d7b0:	74 5d                	je     c001d80f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d7b2:	89 fa                	mov    edx,edi
c001d7b4:	89 f0                	mov    eax,esi
c001d7b6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d7ba:	c1 ea 1c             	shr    edx,0x1c
c001d7bd:	89 d1                	mov    ecx,edx
c001d7bf:	09 c1                	or     ecx,eax
c001d7c1:	74 25                	je     c001d7e8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d7c3:	31 ed                	xor    ebp,ebp
c001d7c5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d7cc:	89 fa                	mov    edx,edi
c001d7ce:	89 f0                	mov    eax,esi
c001d7d0:	0f ad d0             	shrd   eax,edx,cl
c001d7d3:	d3 ea                	shr    edx,cl
c001d7d5:	f6 c1 20             	test   cl,0x20
c001d7d8:	74 02                	je     c001d7dc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d7da:	89 d0                	mov    eax,edx
c001d7dc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d7e0:	45                   	inc    ebp
c001d7e1:	83 fd 06             	cmp    ebp,0x6
c001d7e4:	75 df                	jne    c001d7c5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d7e6:	eb 76                	jmp    c001d85e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d7e8:	89 f0                	mov    eax,esi
c001d7ea:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d7ef:	89 fa                	mov    edx,edi
c001d7f1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d7f8:	0f ac d0 10          	shrd   eax,edx,0x10
c001d7fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d801:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d805:	c1 ee 18             	shr    esi,0x18
c001d808:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d80d:	eb 56                	jmp    c001d865 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d80f:	6a 00                	push   0x0
c001d811:	6a 3f                	push   0x3f
c001d813:	57                   	push   edi
c001d814:	56                   	push   esi
c001d815:	e8 ea 23 00 00       	call   c001fc04 <__umoddi3>
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	40                   	inc    eax
c001d81e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d822:	6a 00                	push   0x0
c001d824:	68 f0 03 00 00       	push   0x3f0
c001d829:	57                   	push   edi
c001d82a:	56                   	push   esi
c001d82b:	e8 d4 22 00 00       	call   c001fb04 <__udivdi3>
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d838:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d83f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d844:	6a 00                	push   0x0
c001d846:	6a 3f                	push   0x3f
c001d848:	57                   	push   edi
c001d849:	56                   	push   esi
c001d84a:	e8 b5 22 00 00       	call   c001fb04 <__udivdi3>
c001d84f:	83 c4 10             	add    esp,0x10
c001d852:	83 e0 0f             	and    eax,0xf
c001d855:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d85a:	89 c6                	mov    esi,eax
c001d85c:	eb 07                	jmp    c001d865 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d85e:	31 f6                	xor    esi,esi
c001d860:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d865:	bf 01 00 00 00       	mov    edi,0x1
c001d86a:	55                   	push   ebp
c001d86b:	6a 00                	push   0x0
c001d86d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d874:	50                   	push   eax
c001d875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d879:	e8 6e ef ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001d87e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d881:	e8 9c fe ff ff       	call   c001d722 <ATA::readyForCommand()>
c001d886:	83 c4 10             	add    esp,0x10
c001d889:	84 c0                	test   al,al
c001d88b:	0f 84 af 02 00 00    	je     c001db40 <ATA::access(unsigned long long, int, void*, bool)+0x3d2>
c001d891:	fa                   	cli    
c001d892:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d898:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d89e:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001d8a3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d8a9:	75 0a                	jne    c001d8b5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d8ab:	c1 e0 04             	shl    eax,0x4
c001d8ae:	09 c6                	or     esi,eax
c001d8b0:	83 ce a0             	or     esi,0xffffffa0
c001d8b3:	eb 08                	jmp    c001d8bd <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001d8b5:	c1 e0 04             	shl    eax,0x4
c001d8b8:	09 c6                	or     esi,eax
c001d8ba:	83 ce e0             	or     esi,0xffffffe0
c001d8bd:	89 f0                	mov    eax,esi
c001d8bf:	0f b6 d2             	movzx  edx,dl
c001d8c2:	0f b6 f0             	movzx  esi,al
c001d8c5:	56                   	push   esi
c001d8c6:	6a 06                	push   0x6
c001d8c8:	52                   	push   edx
c001d8c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8cf:	e8 10 ed ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8d4:	83 c4 10             	add    esp,0x10
c001d8d7:	6a 00                	push   0x0
c001d8d9:	6a 01                	push   0x1
c001d8db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8e2:	50                   	push   eax
c001d8e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e9:	e8 f6 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ee:	83 c4 10             	add    esp,0x10
c001d8f1:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001d8f6:	83 f8 02             	cmp    eax,0x2
c001d8f9:	75 6e                	jne    c001d969 <ATA::access(unsigned long long, int, void*, bool)+0x1fb>
c001d8fb:	6a 00                	push   0x0
c001d8fd:	6a 08                	push   0x8
c001d8ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d906:	50                   	push   eax
c001d907:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d90d:	e8 d2 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d912:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d917:	50                   	push   eax
c001d918:	6a 09                	push   0x9
c001d91a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d921:	50                   	push   eax
c001d922:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d928:	e8 b7 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d92d:	83 c4 20             	add    esp,0x20
c001d930:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d935:	50                   	push   eax
c001d936:	6a 0a                	push   0xa
c001d938:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d93f:	50                   	push   eax
c001d940:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d946:	e8 99 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d94b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d950:	50                   	push   eax
c001d951:	6a 0b                	push   0xb
c001d953:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d95a:	50                   	push   eax
c001d95b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d961:	e8 7e ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d966:	83 c4 20             	add    esp,0x20
c001d969:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d96e:	50                   	push   eax
c001d96f:	6a 02                	push   0x2
c001d971:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d978:	50                   	push   eax
c001d979:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d97f:	e8 60 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d984:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d989:	50                   	push   eax
c001d98a:	6a 03                	push   0x3
c001d98c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d993:	50                   	push   eax
c001d994:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d99a:	e8 45 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d99f:	83 c4 20             	add    esp,0x20
c001d9a2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d9a7:	50                   	push   eax
c001d9a8:	6a 04                	push   0x4
c001d9aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9b1:	50                   	push   eax
c001d9b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9b8:	e8 27 ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d9c2:	50                   	push   eax
c001d9c3:	6a 05                	push   0x5
c001d9c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9cc:	50                   	push   eax
c001d9cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9d3:	e8 0c ec ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9d8:	83 c4 20             	add    esp,0x20
c001d9db:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d9e0:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d9e5:	74 11                	je     c001d9f8 <ATA::access(unsigned long long, int, void*, bool)+0x28a>
c001d9e7:	b8 30 00 00 00       	mov    eax,0x30
c001d9ec:	83 fa 02             	cmp    edx,0x2
c001d9ef:	75 16                	jne    c001da07 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001d9f1:	b8 34 00 00 00       	mov    eax,0x34
c001d9f6:	eb 0f                	jmp    c001da07 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001d9f8:	b8 20 00 00 00       	mov    eax,0x20
c001d9fd:	83 fa 02             	cmp    edx,0x2
c001da00:	75 05                	jne    c001da07 <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001da02:	b8 24 00 00 00       	mov    eax,0x24
c001da07:	50                   	push   eax
c001da08:	6a 07                	push   0x7
c001da0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da11:	50                   	push   eax
c001da12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da18:	e8 c7 eb ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da1d:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001da24:	83 c4 10             	add    esp,0x10
c001da27:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001da2e:	75 01                	jne    c001da31 <ATA::access(unsigned long long, int, void*, bool)+0x2c3>
c001da30:	fb                   	sti    
c001da31:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001da35:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001da3a:	85 f6                	test   esi,esi
c001da3c:	0f 84 db 00 00 00    	je     c001db1d <ATA::access(unsigned long long, int, void*, bool)+0x3af>
c001da42:	57                   	push   edi
c001da43:	6a 01                	push   0x1
c001da45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da4c:	50                   	push   eax
c001da4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da53:	e8 96 f8 ff ff       	call   c001d2ee <IDE::polling(unsigned char, unsigned int)>
c001da58:	83 c4 10             	add    esp,0x10
c001da5b:	0f b6 f8             	movzx  edi,al
c001da5e:	85 ff                	test   edi,edi
c001da60:	74 21                	je     c001da83 <ATA::access(unsigned long long, int, void*, bool)+0x315>
c001da62:	57                   	push   edi
c001da63:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001da6a:	50                   	push   eax
c001da6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da72:	50                   	push   eax
c001da73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da79:	e8 b6 f7 ff ff       	call   c001d234 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da7e:	e9 ba 00 00 00       	jmp    c001db3d <ATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001da83:	85 ed                	test   ebp,ebp
c001da85:	74 49                	je     c001dad0 <ATA::access(unsigned long long, int, void*, bool)+0x362>
c001da87:	fa                   	cli    
c001da88:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da8e:	31 c9                	xor    ecx,ecx
c001da90:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001da94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001da98:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001da9c:	51                   	push   ecx
c001da9d:	51                   	push   ecx
c001da9e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001daa5:	50                   	push   eax
c001daa6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001daac:	e8 21 eb ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001dab1:	89 c2                	mov    edx,eax
c001dab3:	89 f8                	mov    eax,edi
c001dab5:	66 ef                	out    dx,ax
c001dab7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001dabb:	83 c4 10             	add    esp,0x10
c001dabe:	41                   	inc    ecx
c001dabf:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001dac5:	75 c9                	jne    c001da90 <ATA::access(unsigned long long, int, void*, bool)+0x322>
c001dac7:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001dace:	eb 35                	jmp    c001db05 <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001dad0:	fa                   	cli    
c001dad1:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001dad7:	52                   	push   edx
c001dad8:	52                   	push   edx
c001dad9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dae0:	50                   	push   eax
c001dae1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dae7:	e8 e6 ea ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001daec:	b9 00 01 00 00       	mov    ecx,0x100
c001daf1:	89 c2                	mov    edx,eax
c001daf3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001daf7:	fc                   	cld    
c001daf8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001dafb:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001db0c:	75 01                	jne    c001db0f <ATA::access(unsigned long long, int, void*, bool)+0x3a1>
c001db0e:	fb                   	sti    
c001db0f:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001db17:	4e                   	dec    esi
c001db18:	e9 1d ff ff ff       	jmp    c001da3a <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001db1d:	31 ff                	xor    edi,edi
c001db1f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001db24:	74 1a                	je     c001db40 <ATA::access(unsigned long long, int, void*, bool)+0x3d2>
c001db26:	50                   	push   eax
c001db27:	50                   	push   eax
c001db28:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001db2d:	83 f8 02             	cmp    eax,0x2
c001db30:	0f 94 c0             	sete   al
c001db33:	0f b6 c0             	movzx  eax,al
c001db36:	50                   	push   eax
c001db37:	53                   	push   ebx
c001db38:	e8 97 fb ff ff       	call   c001d6d4 <ATA::flush(bool)>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	83 c4 2c             	add    esp,0x2c
c001db43:	89 f8                	mov    eax,edi
c001db45:	5b                   	pop    ebx
c001db46:	5e                   	pop    esi
c001db47:	5f                   	pop    edi
c001db48:	5d                   	pop    ebp
c001db49:	c3                   	ret    

c001db4a <ATA::read(unsigned long long, int, void*)>:
c001db4a:	57                   	push   edi
c001db4b:	b8 04 00 00 00       	mov    eax,0x4
c001db50:	56                   	push   esi
c001db51:	53                   	push   ebx
c001db52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db5a:	8d 7a ff             	lea    edi,[edx-0x1]
c001db5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db61:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001db65:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db6b:	77 25                	ja     c001db92 <ATA::read(unsigned long long, int, void*)+0x48>
c001db6d:	b8 06 00 00 00       	mov    eax,0x6
c001db72:	85 f6                	test   esi,esi
c001db74:	74 1c                	je     c001db92 <ATA::read(unsigned long long, int, void*)+0x48>
c001db76:	50                   	push   eax
c001db77:	50                   	push   eax
c001db78:	6a 00                	push   0x0
c001db7a:	56                   	push   esi
c001db7b:	52                   	push   edx
c001db7c:	53                   	push   ebx
c001db7d:	51                   	push   ecx
c001db7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db82:	e8 e7 fb ff ff       	call   c001d76e <ATA::access(unsigned long long, int, void*, bool)>
c001db87:	83 c4 20             	add    esp,0x20
c001db8a:	85 c0                	test   eax,eax
c001db8c:	0f 95 c0             	setne  al
c001db8f:	0f b6 c0             	movzx  eax,al
c001db92:	5b                   	pop    ebx
c001db93:	5e                   	pop    esi
c001db94:	5f                   	pop    edi
c001db95:	c3                   	ret    

c001db96 <ATA::write(unsigned long long, int, void*)>:
c001db96:	57                   	push   edi
c001db97:	b8 04 00 00 00       	mov    eax,0x4
c001db9c:	56                   	push   esi
c001db9d:	53                   	push   ebx
c001db9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dba2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dba6:	8d 7a ff             	lea    edi,[edx-0x1]
c001dba9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dbad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dbb1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbb7:	77 25                	ja     c001dbde <ATA::write(unsigned long long, int, void*)+0x48>
c001dbb9:	b8 06 00 00 00       	mov    eax,0x6
c001dbbe:	85 f6                	test   esi,esi
c001dbc0:	74 1c                	je     c001dbde <ATA::write(unsigned long long, int, void*)+0x48>
c001dbc2:	50                   	push   eax
c001dbc3:	50                   	push   eax
c001dbc4:	6a 01                	push   0x1
c001dbc6:	56                   	push   esi
c001dbc7:	52                   	push   edx
c001dbc8:	53                   	push   ebx
c001dbc9:	51                   	push   ecx
c001dbca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbce:	e8 9b fb ff ff       	call   c001d76e <ATA::access(unsigned long long, int, void*, bool)>
c001dbd3:	83 c4 20             	add    esp,0x20
c001dbd6:	85 c0                	test   eax,eax
c001dbd8:	0f 95 c0             	setne  al
c001dbdb:	0f b6 c0             	movzx  eax,al
c001dbde:	5b                   	pop    ebx
c001dbdf:	5e                   	pop    esi
c001dbe0:	5f                   	pop    edi
c001dbe1:	c3                   	ret    

c001dbe2 <ATA::detectCHS()>:
c001dbe2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dbe6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001dbec:	c1 e0 06             	shl    eax,0x6
c001dbef:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001dbf5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001dbff:	c7 44 24 04 78 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023778
c001dc07:	e9 b6 10 ff ff       	jmp    c000ecc2 <KePanic(char const*)>

c001dc0c <ATA::open(int, int, void*)>:
c001dc0c:	53                   	push   ebx
c001dc0d:	83 ec 08             	sub    esp,0x8
c001dc10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dc14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc1c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dc22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dc28:	c1 e0 06             	shl    eax,0x6
c001dc2b:	01 d0                	add    eax,edx
c001dc2d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dc34:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dc3a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dc41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dc4b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dc51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dc58:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dc5f:	75 0c                	jne    c001dc6d <ATA::open(int, int, void*)+0x61>
c001dc61:	83 ec 0c             	sub    esp,0xc
c001dc64:	53                   	push   ebx
c001dc65:	e8 78 ff ff ff       	call   c001dbe2 <ATA::detectCHS()>
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dc79:	c1 e0 06             	shl    eax,0x6
c001dc7c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dc83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc8d:	d1 e8                	shr    eax,1
c001dc8f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dc95:	6a 04                	push   0x4
c001dc97:	6a 0c                	push   0xc
c001dc99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dca0:	50                   	push   eax
c001dca1:	52                   	push   edx
c001dca2:	e8 3d e9 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dca7:	90                   	nop
c001dca8:	90                   	nop
c001dca9:	6a 00                	push   0x0
c001dcab:	6a 0c                	push   0xc
c001dcad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dcb4:	50                   	push   eax
c001dcb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dcbb:	e8 24 e9 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcc0:	83 c4 14             	add    esp,0x14
c001dcc3:	53                   	push   ebx
c001dcc4:	e8 c5 b7 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001dcc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dccc:	e8 91 c6 fe ff       	call   c000a362 <createPartitionsForDisk(PhysicalDisk*)>
c001dcd1:	31 c0                	xor    eax,eax
c001dcd3:	83 c4 18             	add    esp,0x18
c001dcd6:	5b                   	pop    ebx
c001dcd7:	c3                   	ret    

c001dcd8 <combineCharAndColour(char, unsigned char)>:
c001dcd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dcdd:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dce3:	c1 e0 08             	shl    eax,0x8
c001dce6:	09 d0                	or     eax,edx
c001dce8:	c3                   	ret    

c001dce9 <combineColours(unsigned char, unsigned char)>:
c001dce9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dcee:	c1 e0 04             	shl    eax,0x4
c001dcf1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dcf5:	c3                   	ret    

c001dcf6 <ATAPI::write(unsigned long long, int, void*)>:
c001dcf6:	b8 03 00 00 00       	mov    eax,0x3
c001dcfb:	c3                   	ret    

c001dcfc <ATAPI::close(int, int, void*)>:
c001dcfc:	83 ec 0c             	sub    esp,0xc
c001dcff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd09:	85 c0                	test   eax,eax
c001dd0b:	74 0c                	je     c001dd19 <ATAPI::close(int, int, void*)+0x1d>
c001dd0d:	83 ec 0c             	sub    esp,0xc
c001dd10:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd12:	50                   	push   eax
c001dd13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd16:	83 c4 10             	add    esp,0x10
c001dd19:	31 c0                	xor    eax,eax
c001dd1b:	83 c4 0c             	add    esp,0xc
c001dd1e:	c3                   	ret    
c001dd1f:	90                   	nop

c001dd20 <ATAPI::ATAPI()>:
c001dd20:	83 ec 0c             	sub    esp,0xc
c001dd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd27:	83 ec 04             	sub    esp,0x4
c001dd2a:	68 00 08 00 00       	push   0x800
c001dd2f:	68 cd 38 02 c0       	push   0xc00238cd
c001dd34:	50                   	push   eax
c001dd35:	e8 ec b6 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd3a:	83 c4 10             	add    esp,0x10
c001dd3d:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c001dd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd46:	89 10                	mov    DWORD PTR [eax],edx
c001dd48:	90                   	nop
c001dd49:	83 c4 0c             	add    esp,0xc
c001dd4c:	c3                   	ret    
c001dd4d:	90                   	nop

c001dd4e <ATAPI::readyForCommand()>:
c001dd4e:	56                   	push   esi
c001dd4f:	53                   	push   ebx
c001dd50:	53                   	push   ebx
c001dd51:	31 db                	xor    ebx,ebx
c001dd53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd57:	51                   	push   ecx
c001dd58:	6a 0c                	push   0xc
c001dd5a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dd61:	50                   	push   eax
c001dd62:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dd68:	e8 37 e9 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	a8 88                	test   al,0x88
c001dd72:	74 25                	je     c001dd99 <ATAPI::readyForCommand()+0x4b>
c001dd74:	43                   	inc    ebx
c001dd75:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dd7b:	7e da                	jle    c001dd57 <ATAPI::readyForCommand()+0x9>
c001dd7d:	83 ec 0c             	sub    esp,0xc
c001dd80:	68 5e 01 00 00       	push   0x15e
c001dd85:	e8 fe 78 ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dd93:	75 c2                	jne    c001dd57 <ATAPI::readyForCommand()+0x9>
c001dd95:	31 c0                	xor    eax,eax
c001dd97:	eb 02                	jmp    c001dd9b <ATAPI::readyForCommand()+0x4d>
c001dd99:	b0 01                	mov    al,0x1
c001dd9b:	5a                   	pop    edx
c001dd9c:	5b                   	pop    ebx
c001dd9d:	5e                   	pop    esi
c001dd9e:	c3                   	ret    
c001dd9f:	90                   	nop

c001dda0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dda0:	55                   	push   ebp
c001dda1:	57                   	push   edi
c001dda2:	56                   	push   esi
c001dda3:	53                   	push   ebx
c001dda4:	83 ec 20             	sub    esp,0x20
c001dda7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ddab:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ddaf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ddb3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ddb7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ddbb:	6a 01                	push   0x1
c001ddbd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddc4:	50                   	push   eax
c001ddc5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddcb:	e8 1c ea ff ff       	call   c001c7ec <IDE::enableIRQs(unsigned char, bool)>
c001ddd0:	5e                   	pop    esi
c001ddd1:	58                   	pop    eax
c001ddd2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddd9:	50                   	push   eax
c001ddda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dde0:	e8 d9 e7 ff ff       	call   c001c5be <IDE::prepareInterrupt(unsigned char)>
c001dde5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dde8:	e8 61 ff ff ff       	call   c001dd4e <ATAPI::readyForCommand()>
c001dded:	83 c4 10             	add    esp,0x10
c001ddf0:	84 c0                	test   al,al
c001ddf2:	75 0a                	jne    c001ddfe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ddf4:	bb 01 00 00 00       	mov    ebx,0x1
c001ddf9:	e9 60 02 00 00       	jmp    c001e05e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001ddfe:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001de04:	c1 e0 04             	shl    eax,0x4
c001de07:	0f b6 c0             	movzx  eax,al
c001de0a:	50                   	push   eax
c001de0b:	6a 06                	push   0x6
c001de0d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de14:	50                   	push   eax
c001de15:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de1b:	e8 c4 e7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de20:	6a 00                	push   0x0
c001de22:	6a 01                	push   0x1
c001de24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de2b:	50                   	push   eax
c001de2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de32:	e8 ad e7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de37:	83 c4 20             	add    esp,0x20
c001de3a:	0f b6 c3             	movzx  eax,bl
c001de3d:	0f b6 df             	movzx  ebx,bh
c001de40:	50                   	push   eax
c001de41:	6a 04                	push   0x4
c001de43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de4a:	50                   	push   eax
c001de4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de51:	e8 8e e7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de56:	53                   	push   ebx
c001de57:	6a 05                	push   0x5
c001de59:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de60:	50                   	push   eax
c001de61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de67:	e8 78 e7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de6c:	83 c4 20             	add    esp,0x20
c001de6f:	68 a0 00 00 00       	push   0xa0
c001de74:	6a 07                	push   0x7
c001de76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de7d:	50                   	push   eax
c001de7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de84:	e8 5b e7 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de89:	83 c4 0c             	add    esp,0xc
c001de8c:	6a 01                	push   0x1
c001de8e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de95:	50                   	push   eax
c001de96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de9c:	e8 4d f4 ff ff       	call   c001d2ee <IDE::polling(unsigned char, unsigned int)>
c001dea1:	83 c4 10             	add    esp,0x10
c001dea4:	0f b6 d8             	movzx  ebx,al
c001dea7:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001dead:	85 db                	test   ebx,ebx
c001deaf:	74 20                	je     c001ded1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001deb1:	53                   	push   ebx
c001deb2:	0f b6 c0             	movzx  eax,al
c001deb5:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001debc:	52                   	push   edx
c001debd:	50                   	push   eax
c001debe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dec4:	e8 6b f3 ff ff       	call   c001d234 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dec9:	83 c4 10             	add    esp,0x10
c001decc:	e9 8d 01 00 00       	jmp    c001e05e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001ded1:	0f b6 c0             	movzx  eax,al
c001ded4:	53                   	push   ebx
c001ded5:	53                   	push   ebx
c001ded6:	50                   	push   eax
c001ded7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dedd:	e8 f0 e6 ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001dee2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dee6:	b9 06 00 00 00       	mov    ecx,0x6
c001deeb:	89 c2                	mov    edx,eax
c001deed:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001def0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001def4:	83 c4 10             	add    esp,0x10
c001def7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001defc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df00:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df06:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df0d:	85 db                	test   ebx,ebx
c001df0f:	0f 84 ec 00 00 00    	je     c001e001 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001df15:	51                   	push   ecx
c001df16:	51                   	push   ecx
c001df17:	52                   	push   edx
c001df18:	50                   	push   eax
c001df19:	e8 34 e8 ff ff       	call   c001c752 <IDE::waitInterrupt(unsigned char)>
c001df1e:	83 c4 10             	add    esp,0x10
c001df21:	84 c0                	test   al,al
c001df23:	0f 84 cb fe ff ff    	je     c001ddf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001df29:	56                   	push   esi
c001df2a:	56                   	push   esi
c001df2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df32:	50                   	push   eax
c001df33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df39:	e8 80 e6 ff ff       	call   c001c5be <IDE::prepareInterrupt(unsigned char)>
c001df3e:	83 c4 0c             	add    esp,0xc
c001df41:	6a 04                	push   0x4
c001df43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df4a:	50                   	push   eax
c001df4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df51:	e8 4e e7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001df56:	83 c4 0c             	add    esp,0xc
c001df59:	89 c6                	mov    esi,eax
c001df5b:	6a 05                	push   0x5
c001df5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df64:	50                   	push   eax
c001df65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df6b:	e8 34 e7 ff ff       	call   c001c6a4 <IDE::read(unsigned char, unsigned char)>
c001df70:	89 f1                	mov    ecx,esi
c001df72:	0f b6 c0             	movzx  eax,al
c001df75:	0f b6 f1             	movzx  esi,cl
c001df78:	c1 e0 08             	shl    eax,0x8
c001df7b:	09 c6                	or     esi,eax
c001df7d:	d1 fe                	sar    esi,1
c001df7f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001df83:	83 c4 10             	add    esp,0x10
c001df86:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001df8b:	74 41                	je     c001dfce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001df8d:	31 c9                	xor    ecx,ecx
c001df8f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df95:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df9c:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001dfa0:	75 0a                	jne    c001dfac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001dfa2:	01 c9                	add    ecx,ecx
c001dfa4:	01 cd                	add    ebp,ecx
c001dfa6:	4b                   	dec    ebx
c001dfa7:	e9 54 ff ff ff       	jmp    c001df00 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001dfac:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001dfb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfb5:	51                   	push   ecx
c001dfb6:	51                   	push   ecx
c001dfb7:	52                   	push   edx
c001dfb8:	50                   	push   eax
c001dfb9:	e8 14 e6 ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001dfbe:	89 c2                	mov    edx,eax
c001dfc0:	89 f0                	mov    eax,esi
c001dfc2:	66 ef                	out    dx,ax
c001dfc4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dfc8:	83 c4 10             	add    esp,0x10
c001dfcb:	41                   	inc    ecx
c001dfcc:	eb c1                	jmp    c001df8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001dfce:	31 f6                	xor    esi,esi
c001dfd0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dfd6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dfdd:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001dfe1:	75 06                	jne    c001dfe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001dfe3:	01 f6                	add    esi,esi
c001dfe5:	01 f5                	add    ebp,esi
c001dfe7:	eb bd                	jmp    c001dfa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001dfe9:	51                   	push   ecx
c001dfea:	51                   	push   ecx
c001dfeb:	52                   	push   edx
c001dfec:	50                   	push   eax
c001dfed:	e8 e0 e5 ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001dff2:	89 c2                	mov    edx,eax
c001dff4:	66 ed                	in     ax,dx
c001dff6:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001dffb:	83 c4 10             	add    esp,0x10
c001dffe:	46                   	inc    esi
c001dfff:	eb cf                	jmp    c001dfd0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e001:	51                   	push   ecx
c001e002:	51                   	push   ecx
c001e003:	52                   	push   edx
c001e004:	50                   	push   eax
c001e005:	e8 48 e7 ff ff       	call   c001c752 <IDE::waitInterrupt(unsigned char)>
c001e00a:	83 c4 10             	add    esp,0x10
c001e00d:	84 c0                	test   al,al
c001e00f:	0f 84 df fd ff ff    	je     c001ddf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e015:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e01a:	52                   	push   edx
c001e01b:	52                   	push   edx
c001e01c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e023:	50                   	push   eax
c001e024:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e02a:	e8 8f e5 ff ff       	call   c001c5be <IDE::prepareInterrupt(unsigned char)>
c001e02f:	83 c4 10             	add    esp,0x10
c001e032:	50                   	push   eax
c001e033:	50                   	push   eax
c001e034:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e03b:	50                   	push   eax
c001e03c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e042:	e8 8b e5 ff ff       	call   c001c5d2 <IDE::getBase(unsigned char)>
c001e047:	8d 50 07             	lea    edx,[eax+0x7]
c001e04a:	ec                   	in     al,dx
c001e04b:	83 c4 10             	add    esp,0x10
c001e04e:	a8 88                	test   al,0x88
c001e050:	74 0a                	je     c001e05c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e052:	4b                   	dec    ebx
c001e053:	75 dd                	jne    c001e032 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e055:	bb 02 00 00 00       	mov    ebx,0x2
c001e05a:	eb 02                	jmp    c001e05e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e05c:	31 db                	xor    ebx,ebx
c001e05e:	83 c4 1c             	add    esp,0x1c
c001e061:	89 d8                	mov    eax,ebx
c001e063:	5b                   	pop    ebx
c001e064:	5e                   	pop    esi
c001e065:	5f                   	pop    edi
c001e066:	5d                   	pop    ebp
c001e067:	c3                   	ret    

c001e068 <ATAPI::diskRemoved()>:
c001e068:	53                   	push   ebx
c001e069:	83 ec 14             	sub    esp,0x14
c001e06c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e070:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e077:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e07d:	e8 d0 bf fe ff       	call   c000a052 <LogicalDisk::unmount()>
c001e082:	58                   	pop    eax
c001e083:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e089:	e8 aa c9 fe ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c001e08e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e094:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e098:	83 c4 18             	add    esp,0x18
c001e09b:	5b                   	pop    ebx
c001e09c:	e9 87 c9 fe ff       	jmp    c000aa28 <VCache::invalidateReadBuffer()>
c001e0a1:	90                   	nop

c001e0a2 <ATAPI::eject()>:
c001e0a2:	57                   	push   edi
c001e0a3:	b9 03 00 00 00       	mov    ecx,0x3
c001e0a8:	53                   	push   ebx
c001e0a9:	83 ec 14             	sub    esp,0x14
c001e0ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e0b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e0b4:	fc                   	cld    
c001e0b5:	31 c0                	xor    eax,eax
c001e0b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0c3:	50                   	push   eax
c001e0c4:	50                   	push   eax
c001e0c5:	6a 00                	push   0x0
c001e0c7:	6a 00                	push   0x0
c001e0c9:	6a 00                	push   0x0
c001e0cb:	6a 02                	push   0x2
c001e0cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0d1:	50                   	push   eax
c001e0d2:	53                   	push   ebx
c001e0d3:	e8 c8 fc ff ff       	call   c001dda0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0d8:	83 c4 14             	add    esp,0x14
c001e0db:	53                   	push   ebx
c001e0dc:	e8 87 ff ff ff       	call   c001e068 <ATAPI::diskRemoved()>
c001e0e1:	83 c4 24             	add    esp,0x24
c001e0e4:	31 c0                	xor    eax,eax
c001e0e6:	5b                   	pop    ebx
c001e0e7:	5f                   	pop    edi
c001e0e8:	c3                   	ret    
c001e0e9:	90                   	nop

c001e0ea <ATAPI::diskInserted()>:
c001e0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0ee:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e0f5:	c3                   	ret    

c001e0f6 <ATAPI::detectMedia()>:
c001e0f6:	56                   	push   esi
c001e0f7:	53                   	push   ebx
c001e0f8:	83 ec 28             	sub    esp,0x28
c001e0fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e0ff:	6a 0c                	push   0xc
c001e101:	6a 00                	push   0x0
c001e103:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e107:	56                   	push   esi
c001e108:	e8 e3 23 fe ff       	call   c00004f0 <memset>
c001e10d:	58                   	pop    eax
c001e10e:	5a                   	pop    edx
c001e10f:	6a 00                	push   0x0
c001e111:	6a 00                	push   0x0
c001e113:	6a 00                	push   0x0
c001e115:	6a 00                	push   0x0
c001e117:	56                   	push   esi
c001e118:	53                   	push   ebx
c001e119:	e8 82 fc ff ff       	call   c001dda0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e11e:	83 c4 1c             	add    esp,0x1c
c001e121:	6a 0c                	push   0xc
c001e123:	6a 00                	push   0x0
c001e125:	56                   	push   esi
c001e126:	e8 c5 23 fe ff       	call   c00004f0 <memset>
c001e12b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e130:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e135:	59                   	pop    ecx
c001e136:	58                   	pop    eax
c001e137:	6a 01                	push   0x1
c001e139:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e13d:	50                   	push   eax
c001e13e:	6a 00                	push   0x0
c001e140:	6a 12                	push   0x12
c001e142:	56                   	push   esi
c001e143:	53                   	push   ebx
c001e144:	e8 57 fc ff ff       	call   c001dda0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e149:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e14d:	83 c4 20             	add    esp,0x20
c001e150:	83 e0 7f             	and    eax,0x7f
c001e153:	83 f8 70             	cmp    eax,0x70
c001e156:	74 15                	je     c001e16d <ATAPI::detectMedia()+0x77>
c001e158:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e15f:	75 0c                	jne    c001e16d <ATAPI::detectMedia()+0x77>
c001e161:	83 ec 0c             	sub    esp,0xc
c001e164:	53                   	push   ebx
c001e165:	e8 80 ff ff ff       	call   c001e0ea <ATAPI::diskInserted()>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e171:	83 e0 0f             	and    eax,0xf
c001e174:	83 f8 02             	cmp    eax,0x2
c001e177:	75 1b                	jne    c001e194 <ATAPI::detectMedia()+0x9e>
c001e179:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e17e:	75 2d                	jne    c001e1ad <ATAPI::detectMedia()+0xb7>
c001e180:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e187:	74 24                	je     c001e1ad <ATAPI::detectMedia()+0xb7>
c001e189:	83 ec 0c             	sub    esp,0xc
c001e18c:	53                   	push   ebx
c001e18d:	e8 d6 fe ff ff       	call   c001e068 <ATAPI::diskRemoved()>
c001e192:	eb 16                	jmp    c001e1aa <ATAPI::detectMedia()+0xb4>
c001e194:	85 c0                	test   eax,eax
c001e196:	75 15                	jne    c001e1ad <ATAPI::detectMedia()+0xb7>
c001e198:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e19f:	75 0c                	jne    c001e1ad <ATAPI::detectMedia()+0xb7>
c001e1a1:	83 ec 0c             	sub    esp,0xc
c001e1a4:	53                   	push   ebx
c001e1a5:	e8 40 ff ff ff       	call   c001e0ea <ATAPI::diskInserted()>
c001e1aa:	83 c4 10             	add    esp,0x10
c001e1ad:	83 c4 24             	add    esp,0x24
c001e1b0:	5b                   	pop    ebx
c001e1b1:	5e                   	pop    esi
c001e1b2:	c3                   	ret    
c001e1b3:	90                   	nop

c001e1b4 <ATAPI::open(int, int, void*)>:
c001e1b4:	56                   	push   esi
c001e1b5:	53                   	push   ebx
c001e1b6:	50                   	push   eax
c001e1b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1bf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e1c3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e1c9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e1cf:	c1 e0 06             	shl    eax,0x6
c001e1d2:	01 d0                	add    eax,edx
c001e1d4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e1db:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e1e1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e1e8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1f2:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e1f8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1ff:	6a 04                	push   0x4
c001e201:	6a 0c                	push   0xc
c001e203:	51                   	push   ecx
c001e204:	52                   	push   edx
c001e205:	e8 da e3 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e20a:	90                   	nop
c001e20b:	90                   	nop
c001e20c:	6a 00                	push   0x0
c001e20e:	6a 0c                	push   0xc
c001e210:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e217:	50                   	push   eax
c001e218:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e21e:	e8 c1 e3 ff ff       	call   c001c5e4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e223:	83 c4 14             	add    esp,0x14
c001e226:	68 78 01 00 00       	push   0x178
c001e22b:	e8 4b 07 ff ff       	call   c000e97b <malloc>
c001e230:	83 c4 0c             	add    esp,0xc
c001e233:	89 c6                	mov    esi,eax
c001e235:	6a 00                	push   0x0
c001e237:	68 ff ff ff 7f       	push   0x7fffffff
c001e23c:	6a 00                	push   0x0
c001e23e:	6a 00                	push   0x0
c001e240:	53                   	push   ebx
c001e241:	68 7f 39 02 c0       	push   0xc002397f
c001e246:	50                   	push   eax
c001e247:	e8 44 bc fe ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e24c:	83 c4 14             	add    esp,0x14
c001e24f:	56                   	push   esi
c001e250:	e8 fb bc fe ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c001e255:	5a                   	pop    edx
c001e256:	0f be c0             	movsx  eax,al
c001e259:	59                   	pop    ecx
c001e25a:	50                   	push   eax
c001e25b:	68 c4 37 02 c0       	push   0xc00237c4
c001e260:	e8 ff 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e265:	58                   	pop    eax
c001e266:	5a                   	pop    edx
c001e267:	56                   	push   esi
c001e268:	53                   	push   ebx
c001e269:	e8 d4 ad fe ff       	call   c0009042 <Device::addChild(Device*)>
c001e26e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e274:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e277:	e8 12 b2 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e27c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e283:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e286:	e8 6b fe ff ff       	call   c001e0f6 <ATAPI::detectMedia()>
c001e28b:	83 c4 14             	add    esp,0x14
c001e28e:	31 c0                	xor    eax,eax
c001e290:	5b                   	pop    ebx
c001e291:	5e                   	pop    esi
c001e292:	c3                   	ret    
c001e293:	90                   	nop

c001e294 <ATAPI::read(unsigned long long, int, void*)>:
c001e294:	55                   	push   ebp
c001e295:	57                   	push   edi
c001e296:	56                   	push   esi
c001e297:	53                   	push   ebx
c001e298:	83 ec 1c             	sub    esp,0x1c
c001e29b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e29f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e2a3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e2a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e2ae:	74 3c                	je     c001e2ec <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e2b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e2b4:	b9 03 00 00 00       	mov    ecx,0x3
c001e2b9:	fc                   	cld    
c001e2ba:	31 c0                	xor    eax,eax
c001e2bc:	0f ce                	bswap  esi
c001e2be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2c0:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e2c5:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e2c9:	89 e8                	mov    eax,ebp
c001e2cb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e2cf:	50                   	push   eax
c001e2d0:	50                   	push   eax
c001e2d1:	55                   	push   ebp
c001e2d2:	c1 e5 0b             	shl    ebp,0xb
c001e2d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e2d9:	6a 00                	push   0x0
c001e2db:	55                   	push   ebp
c001e2dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e2e0:	50                   	push   eax
c001e2e1:	53                   	push   ebx
c001e2e2:	e8 b9 fa ff ff       	call   c001dda0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e2e7:	83 c4 20             	add    esp,0x20
c001e2ea:	eb 1a                	jmp    c001e306 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e2ec:	83 ec 0c             	sub    esp,0xc
c001e2ef:	53                   	push   ebx
c001e2f0:	e8 01 fe ff ff       	call   c001e0f6 <ATAPI::detectMedia()>
c001e2f5:	83 c4 10             	add    esp,0x10
c001e2f8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e2ff:	75 af                	jne    c001e2b0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e301:	b8 02 00 00 00       	mov    eax,0x2
c001e306:	83 c4 1c             	add    esp,0x1c
c001e309:	5b                   	pop    ebx
c001e30a:	5e                   	pop    esi
c001e30b:	5f                   	pop    edi
c001e30c:	5d                   	pop    ebp
c001e30d:	c3                   	ret    

c001e30e <SATA::close(int, int, void*)>:
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e315:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e31b:	85 c0                	test   eax,eax
c001e31d:	74 0c                	je     c001e32b <SATA::close(int, int, void*)+0x1d>
c001e31f:	83 ec 0c             	sub    esp,0xc
c001e322:	8b 10                	mov    edx,DWORD PTR [eax]
c001e324:	50                   	push   eax
c001e325:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e328:	83 c4 10             	add    esp,0x10
c001e32b:	31 c0                	xor    eax,eax
c001e32d:	83 c4 0c             	add    esp,0xc
c001e330:	c3                   	ret    
c001e331:	90                   	nop

c001e332 <SATA::powerSaving(PowerSavingLevel)>:
c001e332:	c3                   	ret    
c001e333:	90                   	nop

c001e334 <SATA::open(int, int, void*)>:
c001e334:	56                   	push   esi
c001e335:	53                   	push   ebx
c001e336:	83 ec 10             	sub    esp,0x10
c001e339:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e33d:	68 0c 38 02 c0       	push   0xc002380c
c001e342:	e8 1d 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e347:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e34b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e355:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e35b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e365:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e369:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e373:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e379:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e380:	e8 31 0b ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001e385:	89 c6                	mov    esi,eax
c001e387:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e38d:	81 c6 00 10 00 00    	add    esi,0x1000
c001e393:	e8 1e 0b ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	39 c6                	cmp    esi,eax
c001e39d:	74 10                	je     c001e3af <SATA::open(int, int, void*)+0x7b>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	68 18 38 02 c0       	push   0xc0023818
c001e3a7:	e8 16 09 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	83 ec 0c             	sub    esp,0xc
c001e3b2:	6a 02                	push   0x2
c001e3b4:	e8 76 3c ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c001e3b9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e3bf:	6a 03                	push   0x3
c001e3c1:	50                   	push   eax
c001e3c2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e3c8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e3ce:	e8 3f 43 ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e3d3:	83 c4 14             	add    esp,0x14
c001e3d6:	53                   	push   ebx
c001e3d7:	e8 b2 b0 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001e3dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e3df:	e8 7e bf fe ff       	call   c000a362 <createPartitionsForDisk(PhysicalDisk*)>
c001e3e4:	83 c4 14             	add    esp,0x14
c001e3e7:	31 c0                	xor    eax,eax
c001e3e9:	5b                   	pop    ebx
c001e3ea:	5e                   	pop    esi
c001e3eb:	c3                   	ret    

c001e3ec <SATA::SATA()>:
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f3:	83 ec 04             	sub    esp,0x4
c001e3f6:	68 00 02 00 00       	push   0x200
c001e3fb:	68 2c 38 02 c0       	push   0xc002382c
c001e400:	50                   	push   eax
c001e401:	e8 20 b0 fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e406:	83 c4 10             	add    esp,0x10
c001e409:	ba 9c 38 02 c0       	mov    edx,0xc002389c
c001e40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e412:	89 10                	mov    DWORD PTR [eax],edx
c001e414:	90                   	nop
c001e415:	83 c4 0c             	add    esp,0xc
c001e418:	c3                   	ret    
c001e419:	90                   	nop

c001e41a <SATA::access(unsigned long long, int, void*, bool)>:
c001e41a:	55                   	push   ebp
c001e41b:	57                   	push   edi
c001e41c:	56                   	push   esi
c001e41d:	53                   	push   ebx
c001e41e:	83 ec 2c             	sub    esp,0x2c
c001e421:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e425:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e429:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e42d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e431:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e439:	fa                   	cli    
c001e43a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e440:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e445:	7e 10                	jle    c001e457 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001e447:	83 ec 0c             	sub    esp,0xc
c001e44a:	68 3c 38 02 c0       	push   0xc002383c
c001e44f:	e8 6e 08 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001e454:	83 c4 10             	add    esp,0x10
c001e457:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e45d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e463:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e469:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e46d:	89 d0                	mov    eax,edx
c001e46f:	c1 e0 07             	shl    eax,0x7
c001e472:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e476:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e480:	51                   	push   ecx
c001e481:	8d 42 02             	lea    eax,[edx+0x2]
c001e484:	51                   	push   ecx
c001e485:	c1 e0 07             	shl    eax,0x7
c001e488:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e48c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e490:	50                   	push   eax
c001e491:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e497:	e8 32 ef ff ff       	call   c001d3ce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e49c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e4a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4ac:	0f 84 a4 01 00 00    	je     c001e656 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001e4b2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e4b6:	c1 e0 09             	shl    eax,0x9
c001e4b9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e4be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4c2:	74 0e                	je     c001e4d2 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001e4c4:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e4ca:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e4ce:	89 c1                	mov    ecx,eax
c001e4d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e4d2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e4d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e4dc:	8d 42 02             	lea    eax,[edx+0x2]
c001e4df:	c1 e0 07             	shl    eax,0x7
c001e4e2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e4e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4e8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e4ee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e4f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4f8:	c1 e1 05             	shl    ecx,0x5
c001e4fb:	01 c8                	add    eax,ecx
c001e4fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e501:	83 e1 01             	and    ecx,0x1
c001e504:	89 ce                	mov    esi,ecx
c001e506:	8a 08                	mov    cl,BYTE PTR [eax]
c001e508:	c1 e6 06             	shl    esi,0x6
c001e50b:	83 e1 bf             	and    ecx,0xffffffbf
c001e50e:	09 f1                	or     ecx,esi
c001e510:	88 08                	mov    BYTE PTR [eax],cl
c001e512:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e514:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e51a:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e520:	89 08                	mov    DWORD PTR [eax],ecx
c001e522:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e528:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e52e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e534:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e537:	50                   	push   eax
c001e538:	68 90 00 00 00       	push   0x90
c001e53d:	6a 00                	push   0x0
c001e53f:	56                   	push   esi
c001e540:	e8 ab 1f fe ff       	call   c00004f0 <memset>
c001e545:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e54b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e551:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	48                   	dec    eax
c001e559:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e55e:	89 c1                	mov    ecx,eax
c001e560:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e566:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e56b:	09 c8                	or     eax,ecx
c001e56d:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e573:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e579:	83 c8 80             	or     eax,0xffffff80
c001e57c:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e582:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e585:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e589:	25 00 7f 00 00       	and    eax,0x7f00
c001e58e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e593:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e598:	66 89 06             	mov    WORD PTR [esi],ax
c001e59b:	b0 35                	mov    al,0x35
c001e59d:	75 02                	jne    c001e5a1 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001e59f:	b0 25                	mov    al,0x25
c001e5a1:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e5a4:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001e5a8:	89 e8                	mov    eax,ebp
c001e5aa:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e5ae:	c1 e8 10             	shr    eax,0x10
c001e5b1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e5b4:	89 e8                	mov    eax,ebp
c001e5b6:	c1 e8 18             	shr    eax,0x18
c001e5b9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e5bc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e5c0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e5c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e5c7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e5ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e5ce:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e5d2:	89 d6                	mov    esi,edx
c001e5d4:	31 c0                	xor    eax,eax
c001e5d6:	c1 e6 07             	shl    esi,0x7
c001e5d9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001e5dd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e5e3:	80 e1 88             	and    cl,0x88
c001e5e6:	74 0a                	je     c001e5f2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e5e8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5ed:	74 0a                	je     c001e5f9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e5ef:	40                   	inc    eax
c001e5f0:	eb eb                	jmp    c001e5dd <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e5f2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e5f7:	75 0a                	jne    c001e603 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e5f9:	83 ec 0c             	sub    esp,0xc
c001e5fc:	68 75 38 02 c0       	push   0xc0023875
c001e601:	eb 36                	jmp    c001e639 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001e603:	b8 01 00 00 00       	mov    eax,0x1
c001e608:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e60c:	c1 e2 07             	shl    edx,0x7
c001e60f:	d3 e0                	shl    eax,cl
c001e611:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001e615:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e61b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e621:	85 c8                	test   eax,ecx
c001e623:	74 25                	je     c001e64a <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001e625:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e62b:	0f ba e1 1e          	bt     ecx,0x1e
c001e62f:	73 ea                	jae    c001e61b <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001e631:	83 ec 0c             	sub    esp,0xc
c001e634:	68 83 38 02 c0       	push   0xc0023883
c001e639:	e8 26 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e63e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e645:	83 c4 10             	add    esp,0x10
c001e648:	eb 13                	jmp    c001e65d <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001e64a:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e650:	0f ba e0 1e          	bt     eax,0x1e
c001e654:	73 18                	jae    c001e66e <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001e656:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e65d:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001e664:	75 01                	jne    c001e667 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001e666:	fb                   	sti    
c001e667:	b8 01 00 00 00       	mov    eax,0x1
c001e66c:	eb 2c                	jmp    c001e69a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e66e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e673:	75 10                	jne    c001e685 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001e675:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e67b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e67f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e683:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e685:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e68c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e691:	85 c0                	test   eax,eax
c001e693:	75 03                	jne    c001e698 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e695:	fb                   	sti    
c001e696:	eb 02                	jmp    c001e69a <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e698:	31 c0                	xor    eax,eax
c001e69a:	83 c4 2c             	add    esp,0x2c
c001e69d:	5b                   	pop    ebx
c001e69e:	5e                   	pop    esi
c001e69f:	5f                   	pop    edi
c001e6a0:	5d                   	pop    ebp
c001e6a1:	c3                   	ret    

c001e6a2 <SATA::read(unsigned long long, int, void*)>:
c001e6a2:	57                   	push   edi
c001e6a3:	b8 04 00 00 00       	mov    eax,0x4
c001e6a8:	56                   	push   esi
c001e6a9:	53                   	push   ebx
c001e6aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6ae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e6b2:	8d 7a ff             	lea    edi,[edx-0x1]
c001e6b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e6b9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e6bd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e6c3:	77 25                	ja     c001e6ea <SATA::read(unsigned long long, int, void*)+0x48>
c001e6c5:	b8 06 00 00 00       	mov    eax,0x6
c001e6ca:	85 f6                	test   esi,esi
c001e6cc:	74 1c                	je     c001e6ea <SATA::read(unsigned long long, int, void*)+0x48>
c001e6ce:	50                   	push   eax
c001e6cf:	50                   	push   eax
c001e6d0:	6a 00                	push   0x0
c001e6d2:	56                   	push   esi
c001e6d3:	52                   	push   edx
c001e6d4:	53                   	push   ebx
c001e6d5:	51                   	push   ecx
c001e6d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e6da:	e8 3b fd ff ff       	call   c001e41a <SATA::access(unsigned long long, int, void*, bool)>
c001e6df:	83 c4 20             	add    esp,0x20
c001e6e2:	85 c0                	test   eax,eax
c001e6e4:	0f 95 c0             	setne  al
c001e6e7:	0f b6 c0             	movzx  eax,al
c001e6ea:	5b                   	pop    ebx
c001e6eb:	5e                   	pop    esi
c001e6ec:	5f                   	pop    edi
c001e6ed:	c3                   	ret    

c001e6ee <SATA::write(unsigned long long, int, void*)>:
c001e6ee:	55                   	push   ebp
c001e6ef:	b8 04 00 00 00       	mov    eax,0x4
c001e6f4:	57                   	push   edi
c001e6f5:	56                   	push   esi
c001e6f6:	53                   	push   ebx
c001e6f7:	83 ec 0c             	sub    esp,0xc
c001e6fa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e6fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e702:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e705:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e709:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e70d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e713:	77 3d                	ja     c001e752 <SATA::write(unsigned long long, int, void*)+0x64>
c001e715:	b8 06 00 00 00       	mov    eax,0x6
c001e71a:	85 ed                	test   ebp,ebp
c001e71c:	74 34                	je     c001e752 <SATA::write(unsigned long long, int, void*)+0x64>
c001e71e:	c1 e3 09             	shl    ebx,0x9
c001e721:	01 eb                	add    ebx,ebp
c001e723:	89 d6                	mov    esi,edx
c001e725:	89 cf                	mov    edi,ecx
c001e727:	83 c6 01             	add    esi,0x1
c001e72a:	83 d7 00             	adc    edi,0x0
c001e72d:	50                   	push   eax
c001e72e:	50                   	push   eax
c001e72f:	6a 01                	push   0x1
c001e731:	55                   	push   ebp
c001e732:	81 c5 00 02 00 00    	add    ebp,0x200
c001e738:	6a 01                	push   0x1
c001e73a:	51                   	push   ecx
c001e73b:	52                   	push   edx
c001e73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e740:	e8 d5 fc ff ff       	call   c001e41a <SATA::access(unsigned long long, int, void*, bool)>
c001e745:	83 c4 20             	add    esp,0x20
c001e748:	89 f2                	mov    edx,esi
c001e74a:	89 f9                	mov    ecx,edi
c001e74c:	39 dd                	cmp    ebp,ebx
c001e74e:	75 d3                	jne    c001e723 <SATA::write(unsigned long long, int, void*)+0x35>
c001e750:	31 c0                	xor    eax,eax
c001e752:	83 c4 0c             	add    esp,0xc
c001e755:	5b                   	pop    ebx
c001e756:	5e                   	pop    esi
c001e757:	5f                   	pop    edi
c001e758:	5d                   	pop    ebp
c001e759:	c3                   	ret    

c001e75a <SATAPI::write(unsigned long long, int, void*)>:
c001e75a:	b8 03 00 00 00       	mov    eax,0x3
c001e75f:	c3                   	ret    

c001e760 <SATAPI::close(int, int, void*)>:
c001e760:	83 ec 0c             	sub    esp,0xc
c001e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e767:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e76d:	85 c0                	test   eax,eax
c001e76f:	74 0c                	je     c001e77d <SATAPI::close(int, int, void*)+0x1d>
c001e771:	83 ec 0c             	sub    esp,0xc
c001e774:	8b 10                	mov    edx,DWORD PTR [eax]
c001e776:	50                   	push   eax
c001e777:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e77a:	83 c4 10             	add    esp,0x10
c001e77d:	31 c0                	xor    eax,eax
c001e77f:	83 c4 0c             	add    esp,0xc
c001e782:	c3                   	ret    
c001e783:	90                   	nop

c001e784 <SATAPI::SATAPI()>:
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78b:	83 ec 04             	sub    esp,0x4
c001e78e:	68 00 08 00 00       	push   0x800
c001e793:	68 cc 38 02 c0       	push   0xc00238cc
c001e798:	50                   	push   eax
c001e799:	e8 88 ac fe ff       	call   c0009426 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e79e:	83 c4 10             	add    esp,0x10
c001e7a1:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c001e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7aa:	89 10                	mov    DWORD PTR [eax],edx
c001e7ac:	90                   	nop
c001e7ad:	83 c4 0c             	add    esp,0xc
c001e7b0:	c3                   	ret    
c001e7b1:	90                   	nop

c001e7b2 <SATAPI::diskRemoved()>:
c001e7b2:	c3                   	ret    
c001e7b3:	90                   	nop

c001e7b4 <SATAPI::diskInserted()>:
c001e7b4:	83 ec 18             	sub    esp,0x18
c001e7b7:	68 d8 38 02 c0       	push   0xc00238d8
c001e7bc:	e8 a3 87 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c5:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e7cc:	83 c4 1c             	add    esp,0x1c
c001e7cf:	c3                   	ret    

c001e7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e7d0:	55                   	push   ebp
c001e7d1:	57                   	push   edi
c001e7d2:	56                   	push   esi
c001e7d3:	53                   	push   ebx
c001e7d4:	83 ec 34             	sub    esp,0x34
c001e7d7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e7db:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e7df:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e7e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e7e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e7eb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e7f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e7f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e7fb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e801:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e805:	83 c0 02             	add    eax,0x2
c001e808:	c1 e0 07             	shl    eax,0x7
c001e80b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e80f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e813:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e817:	c1 e0 07             	shl    eax,0x7
c001e81a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e81e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e822:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e82c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e830:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e836:	e8 93 eb ff ff       	call   c001d3ce <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e83b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	b8 01 00 00 00       	mov    eax,0x1
c001e847:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e84c:	0f 84 53 02 00 00    	je     c001eaa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e852:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e85e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e864:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e86a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e86e:	c1 e1 05             	shl    ecx,0x5
c001e871:	01 c8                	add    eax,ecx
c001e873:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e875:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e87b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e881:	89 08                	mov    DWORD PTR [eax],ecx
c001e883:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e889:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e88f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e895:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e898:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e89b:	50                   	push   eax
c001e89c:	68 90 00 00 00       	push   0x90
c001e8a1:	6a 00                	push   0x0
c001e8a3:	53                   	push   ebx
c001e8a4:	e8 47 1c fe ff       	call   c00004f0 <memset>
c001e8a9:	b9 0c 00 00 00       	mov    ecx,0xc
c001e8ae:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e8b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e8b4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e8ba:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e8be:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e8c4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e8c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e8cc:	48                   	dec    eax
c001e8cd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e8d2:	89 c1                	mov    ecx,eax
c001e8d4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e8da:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e8df:	09 c8                	or     eax,ecx
c001e8e1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e8e7:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e8ed:	83 c8 80             	or     eax,0xffffff80
c001e8f0:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e8f6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e8f9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e8fd:	25 00 7f 00 00       	and    eax,0x7f00
c001e902:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e906:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e90b:	66 89 03             	mov    WORD PTR [ebx],ax
c001e90e:	89 d0                	mov    eax,edx
c001e910:	c1 ea 18             	shr    edx,0x18
c001e913:	c1 e8 10             	shr    eax,0x10
c001e916:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e919:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e91c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e920:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e927:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e92a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e92e:	83 c4 10             	add    esp,0x10
c001e931:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e935:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e939:	31 c0                	xor    eax,eax
c001e93b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e941:	80 e1 88             	and    cl,0x88
c001e944:	74 0a                	je     c001e950 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e946:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e94b:	74 0a                	je     c001e957 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e94d:	40                   	inc    eax
c001e94e:	eb eb                	jmp    c001e93b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e950:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e955:	75 43                	jne    c001e99a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e957:	83 ec 0c             	sub    esp,0xc
c001e95a:	68 f0 38 02 c0       	push   0xc00238f0
c001e95f:	e8 00 86 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e964:	58                   	pop    eax
c001e965:	5a                   	pop    edx
c001e966:	68 05 39 02 c0       	push   0xc0023905
c001e96b:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e971:	e8 d0 2a ff ff       	call   c0011446 <VgaText::puts(char const*)>
c001e976:	59                   	pop    ecx
c001e977:	5b                   	pop    ebx
c001e978:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e97c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e982:	e8 e1 ea ff ff       	call   c001d468 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e987:	5e                   	pop    esi
c001e988:	5f                   	pop    edi
c001e989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e98d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e993:	e8 b0 ea ff ff       	call   c001d448 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e998:	eb 48                	jmp    c001e9e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e99a:	be 01 00 00 00       	mov    esi,0x1
c001e99f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e9a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e9a7:	d3 e6                	shl    esi,cl
c001e9a9:	c1 e7 07             	shl    edi,0x7
c001e9ac:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e9b2:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e9b7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e9bb:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e9c1:	85 c6                	test   esi,eax
c001e9c3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e9c9:	0f 84 a3 00 00 00    	je     c001ea72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e9cf:	0f ba e0 1e          	bt     eax,0x1e
c001e9d3:	73 1a                	jae    c001e9ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e9d5:	83 ec 0c             	sub    esp,0xc
c001e9d8:	68 17 39 02 c0       	push   0xc0023917
c001e9dd:	e8 82 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e9e2:	83 c4 10             	add    esp,0x10
c001e9e5:	b8 01 00 00 00       	mov    eax,0x1
c001e9ea:	e9 b6 00 00 00       	jmp    c001eaa5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e9ef:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e9f5:	83 f8 0d             	cmp    eax,0xd
c001e9f8:	77 0a                	ja     c001ea04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	68 c8 00 00 00       	push   0xc8
c001ea02:	eb 28                	jmp    c001ea2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ea04:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ea0a:	83 f8 0d             	cmp    eax,0xd
c001ea0d:	77 0a                	ja     c001ea19 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001ea0f:	83 ec 0c             	sub    esp,0xc
c001ea12:	68 58 02 00 00       	push   0x258
c001ea17:	eb 13                	jmp    c001ea2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ea19:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ea1f:	83 f8 06             	cmp    eax,0x6
c001ea22:	77 10                	ja     c001ea34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ea24:	83 ec 0c             	sub    esp,0xc
c001ea27:	68 dc 05 00 00       	push   0x5dc
c001ea2c:	e8 57 6c ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ea38:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ea3b:	75 06                	jne    c001ea43 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001ea3d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ea41:	74 15                	je     c001ea58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ea43:	83 fb 06             	cmp    ebx,0x6
c001ea46:	77 10                	ja     c001ea58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	68 c4 09 00 00       	push   0x9c4
c001ea50:	e8 33 6c ff ff       	call   c0015688 <milliTenthSleep(unsigned int)>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	43                   	inc    ebx
c001ea59:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ea5f:	0f 85 56 ff ff ff    	jne    c001e9bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001ea65:	83 ec 0c             	sub    esp,0xc
c001ea68:	68 2a 39 02 c0       	push   0xc002392a
c001ea6d:	e9 6b ff ff ff       	jmp    c001e9dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001ea72:	0f ba e0 1e          	bt     eax,0x1e
c001ea76:	73 0d                	jae    c001ea85 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001ea78:	83 ec 0c             	sub    esp,0xc
c001ea7b:	68 3e 39 02 c0       	push   0xc002393e
c001ea80:	e9 58 ff ff ff       	jmp    c001e9dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001ea85:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ea8a:	74 17                	je     c001eaa3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ea8c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ea91:	74 10                	je     c001eaa3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ea93:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ea99:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ea9d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001eaa1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eaa3:	31 c0                	xor    eax,eax
c001eaa5:	83 c4 2c             	add    esp,0x2c
c001eaa8:	5b                   	pop    ebx
c001eaa9:	5e                   	pop    esi
c001eaaa:	5f                   	pop    edi
c001eaab:	5d                   	pop    ebp
c001eaac:	c3                   	ret    
c001eaad:	90                   	nop

c001eaae <SATAPI::eject()>:
c001eaae:	57                   	push   edi
c001eaaf:	b9 03 00 00 00       	mov    ecx,0x3
c001eab4:	83 ec 18             	sub    esp,0x18
c001eab7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001eabb:	fc                   	cld    
c001eabc:	31 c0                	xor    eax,eax
c001eabe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eac0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001eac5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001eaca:	50                   	push   eax
c001eacb:	6a 00                	push   0x0
c001eacd:	6a 00                	push   0x0
c001eacf:	6a 00                	push   0x0
c001ead1:	6a 00                	push   0x0
c001ead3:	6a 02                	push   0x2
c001ead5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ead9:	50                   	push   eax
c001eada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eade:	e8 ed fc ff ff       	call   c001e7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001eae3:	31 c0                	xor    eax,eax
c001eae5:	83 c4 38             	add    esp,0x38
c001eae8:	5f                   	pop    edi
c001eae9:	c3                   	ret    

c001eaea <SATAPI::detectMedia()>:
c001eaea:	53                   	push   ebx
c001eaeb:	83 ec 14             	sub    esp,0x14
c001eaee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eaf2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eaf8:	e8 3b bf fe ff       	call   c000aa38 <VCache::writeWriteBuffer()>
c001eafd:	59                   	pop    ecx
c001eafe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001eb04:	e8 1f bf fe ff       	call   c000aa28 <VCache::invalidateReadBuffer()>
c001eb09:	c7 04 24 53 39 02 c0 	mov    DWORD PTR [esp],0xc0023953
c001eb10:	e8 4f 84 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb15:	83 c4 10             	add    esp,0x10
c001eb18:	31 c0                	xor    eax,eax
c001eb1a:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001eb21:	85 d2                	test   edx,edx
c001eb23:	74 0f                	je     c001eb34 <SATAPI::detectMedia()+0x4a>
c001eb25:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eb2b:	75 07                	jne    c001eb34 <SATAPI::detectMedia()+0x4a>
c001eb2d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001eb34:	40                   	inc    eax
c001eb35:	83 f8 1a             	cmp    eax,0x1a
c001eb38:	75 e0                	jne    c001eb1a <SATAPI::detectMedia()+0x30>
c001eb3a:	83 c4 08             	add    esp,0x8
c001eb3d:	5b                   	pop    ebx
c001eb3e:	c3                   	ret    
c001eb3f:	90                   	nop

c001eb40 <SATAPI::open(int, int, void*)>:
c001eb40:	56                   	push   esi
c001eb41:	53                   	push   ebx
c001eb42:	51                   	push   ecx
c001eb43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eb4b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eb55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eb5b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eb73:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eb79:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eb80:	e8 31 03 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001eb85:	89 c6                	mov    esi,eax
c001eb87:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eb8d:	81 c6 00 10 00 00    	add    esi,0x1000
c001eb93:	e8 1e 03 ff ff       	call   c000eeb6 <Phys::allocatePage()>
c001eb98:	39 c6                	cmp    esi,eax
c001eb9a:	74 10                	je     c001ebac <SATAPI::open(int, int, void*)+0x6c>
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	68 68 39 02 c0       	push   0xc0023968
c001eba4:	e8 19 01 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001eba9:	83 c4 10             	add    esp,0x10
c001ebac:	83 ec 0c             	sub    esp,0xc
c001ebaf:	6a 02                	push   0x2
c001ebb1:	e8 79 34 ff ff       	call   c001202f <Virt::allocateKernelVirtualPages(int)>
c001ebb6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ebbc:	6a 03                	push   0x3
c001ebbe:	50                   	push   eax
c001ebbf:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ebc5:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001ebcb:	e8 42 3b ff ff       	call   c0012712 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ebd0:	83 c4 14             	add    esp,0x14
c001ebd3:	68 78 01 00 00       	push   0x178
c001ebd8:	e8 9e fd fe ff       	call   c000e97b <malloc>
c001ebdd:	83 c4 0c             	add    esp,0xc
c001ebe0:	89 c6                	mov    esi,eax
c001ebe2:	6a 00                	push   0x0
c001ebe4:	68 ff ff ff 7f       	push   0x7fffffff
c001ebe9:	6a 00                	push   0x0
c001ebeb:	6a 00                	push   0x0
c001ebed:	53                   	push   ebx
c001ebee:	68 7e 39 02 c0       	push   0xc002397e
c001ebf3:	50                   	push   eax
c001ebf4:	e8 97 b2 fe ff       	call   c0009e90 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ebf9:	83 c4 14             	add    esp,0x14
c001ebfc:	56                   	push   esi
c001ebfd:	e8 4e b3 fe ff       	call   c0009f50 <LogicalDisk::assignDriveLetter()>
c001ec02:	5a                   	pop    edx
c001ec03:	0f be c0             	movsx  eax,al
c001ec06:	59                   	pop    ecx
c001ec07:	50                   	push   eax
c001ec08:	68 c4 37 02 c0       	push   0xc00237c4
c001ec0d:	e8 52 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec12:	58                   	pop    eax
c001ec13:	5a                   	pop    edx
c001ec14:	56                   	push   esi
c001ec15:	53                   	push   ebx
c001ec16:	e8 27 a4 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ec1b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ec21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec24:	e8 65 a8 fe ff       	call   c000948e <PhysicalDisk::startCache()>
c001ec29:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ec30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ec33:	e8 b2 fe ff ff       	call   c001eaea <SATAPI::detectMedia()>
c001ec38:	83 c4 14             	add    esp,0x14
c001ec3b:	31 c0                	xor    eax,eax
c001ec3d:	5b                   	pop    ebx
c001ec3e:	5e                   	pop    esi
c001ec3f:	c3                   	ret    

c001ec40 <SATAPI::read(unsigned long long, int, void*)>:
c001ec40:	57                   	push   edi
c001ec41:	56                   	push   esi
c001ec42:	53                   	push   ebx
c001ec43:	83 ec 30             	sub    esp,0x30
c001ec46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ec4a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001ec4e:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ec52:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ec56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ec5e:	83 fe 04             	cmp    esi,0x4
c001ec61:	7e 10                	jle    c001ec73 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ec63:	83 ec 0c             	sub    esp,0xc
c001ec66:	68 8c 39 02 c0       	push   0xc002398c
c001ec6b:	e8 52 00 ff ff       	call   c000ecc2 <KePanic(char const*)>
c001ec70:	83 c4 10             	add    esp,0x10
c001ec73:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ec79:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ec7f:	51                   	push   ecx
c001ec80:	50                   	push   eax
c001ec81:	83 c0 02             	add    eax,0x2
c001ec84:	c1 e0 07             	shl    eax,0x7
c001ec87:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ec8d:	50                   	push   eax
c001ec8e:	52                   	push   edx
c001ec8f:	e8 fe e7 ff ff       	call   c001d492 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ec94:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ec98:	b9 03 00 00 00       	mov    ecx,0x3
c001ec9d:	fc                   	cld    
c001ec9e:	31 c0                	xor    eax,eax
c001eca0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001eca2:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001eca7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	6a 00                	push   0x0
c001ecb1:	6a 00                	push   0x0
c001ecb3:	6a 00                	push   0x0
c001ecb5:	6a 00                	push   0x0
c001ecb7:	6a 02                	push   0x2
c001ecb9:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ecbd:	50                   	push   eax
c001ecbe:	53                   	push   ebx
c001ecbf:	e8 0c fb ff ff       	call   c001e7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ecc4:	83 c4 20             	add    esp,0x20
c001ecc7:	85 c0                	test   eax,eax
c001ecc9:	75 44                	jne    c001ed0f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001eccb:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001eccf:	b9 03 00 00 00       	mov    ecx,0x3
c001ecd4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ecd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecda:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ecdf:	0f c8                	bswap  eax
c001ece1:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ece5:	89 f0                	mov    eax,esi
c001ece7:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001eceb:	50                   	push   eax
c001ecec:	56                   	push   esi
c001eced:	c1 e6 0b             	shl    esi,0xb
c001ecf0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ecf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ecf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ecfc:	56                   	push   esi
c001ecfd:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ed01:	50                   	push   eax
c001ed02:	53                   	push   ebx
c001ed03:	e8 c8 fa ff ff       	call   c001e7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ed08:	83 c4 20             	add    esp,0x20
c001ed0b:	85 c0                	test   eax,eax
c001ed0d:	74 14                	je     c001ed23 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ed0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ed13:	83 ec 0c             	sub    esp,0xc
c001ed16:	53                   	push   ebx
c001ed17:	e8 ce fd ff ff       	call   c001eaea <SATAPI::detectMedia()>
c001ed1c:	83 c4 10             	add    esp,0x10
c001ed1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed23:	83 c4 30             	add    esp,0x30
c001ed26:	5b                   	pop    ebx
c001ed27:	5e                   	pop    esi
c001ed28:	5f                   	pop    edi
c001ed29:	c3                   	ret    

c001ed2a <IOAPIC::close(int, int, void*)>:
c001ed2a:	b8 00 00 00 00       	mov    eax,0x0
c001ed2f:	c3                   	ret    

c001ed30 <apicGetBase()>:
c001ed30:	55                   	push   ebp
c001ed31:	89 e5                	mov    ebp,esp
c001ed33:	83 ec 08             	sub    esp,0x8
c001ed36:	83 ec 0c             	sub    esp,0xc
c001ed39:	68 f0 39 02 c0       	push   0xc00239f0
c001ed3e:	e8 7f ff fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ed43:	83 c4 10             	add    esp,0x10
c001ed46:	b8 00 00 00 00       	mov    eax,0x0
c001ed4b:	c9                   	leave  
c001ed4c:	c3                   	ret    
c001ed4d:	90                   	nop

c001ed4e <IOAPIC::IOAPIC()>:
c001ed4e:	83 ec 0c             	sub    esp,0xc
c001ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed55:	83 ec 08             	sub    esp,0x8
c001ed58:	68 ff 39 02 c0       	push   0xc00239ff
c001ed5d:	50                   	push   eax
c001ed5e:	e8 41 a4 fe ff       	call   c00091a4 <Device::Device(char const*)>
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	ba 20 3a 02 c0       	mov    edx,0xc0023a20
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	89 10                	mov    DWORD PTR [eax],edx
c001ed71:	90                   	nop
c001ed72:	83 c4 0c             	add    esp,0xc
c001ed75:	c3                   	ret    

c001ed76 <apicOpen()>:
c001ed76:	55                   	push   ebp
c001ed77:	89 e5                	mov    ebp,esp
c001ed79:	53                   	push   ebx
c001ed7a:	83 ec 34             	sub    esp,0x34
c001ed7d:	83 ec 0c             	sub    esp,0xc
c001ed80:	68 07 3a 02 c0       	push   0xc0023a07
c001ed85:	e8 da 81 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ed8a:	83 c4 10             	add    esp,0x10
c001ed8d:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ed92:	83 f0 01             	xor    eax,0x1
c001ed95:	0f b6 c0             	movzx  eax,al
c001ed98:	85 c0                	test   eax,eax
c001ed9a:	0f 84 a3 00 00 00    	je     c001ee43 <apicOpen()+0xcd>
c001eda0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eda4:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001eda9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001edad:	0f b6 c0             	movzx  eax,al
c001edb0:	39 c2                	cmp    edx,eax
c001edb2:	0f 83 84 00 00 00    	jae    c001ee3c <apicOpen()+0xc6>
c001edb8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001edc5:	e8 b1 fb fe ff       	call   c000e97b <malloc>
c001edca:	83 c4 10             	add    esp,0x10
c001edcd:	89 c3                	mov    ebx,eax
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	53                   	push   ebx
c001edd3:	e8 76 ff ff ff       	call   c001ed4e <IOAPIC::IOAPIC()>
c001edd8:	83 c4 10             	add    esp,0x10
c001eddb:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001edde:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ede2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ede5:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001edec:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001edf1:	83 c0 01             	add    eax,0x1
c001edf4:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001edf9:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001edfe:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ee04:	83 ec 08             	sub    esp,0x8
c001ee07:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee0a:	50                   	push   eax
c001ee0b:	e8 32 a2 fe ff       	call   c0009042 <Device::addChild(Device*)>
c001ee10:	83 c4 10             	add    esp,0x10
c001ee13:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ee16:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee18:	83 c0 08             	add    eax,0x8
c001ee1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee1d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ee21:	6a 00                	push   0x0
c001ee23:	6a 00                	push   0x0
c001ee25:	52                   	push   edx
c001ee26:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ee29:	ff d0                	call   eax
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ee31:	83 c0 01             	add    eax,0x1
c001ee34:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ee37:	e9 68 ff ff ff       	jmp    c001eda4 <apicOpen()+0x2e>
c001ee3c:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001ee43:	e8 e8 fe ff ff       	call   c001ed30 <apicGetBase()>
c001ee48:	05 f0 00 00 00       	add    eax,0xf0
c001ee4d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee50:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ee53:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee55:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ee58:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ee5f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ee66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ee69:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ee6c:	89 10                	mov    DWORD PTR [eax],edx
c001ee6e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ee75:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001ee7a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ee7d:	7d 7c                	jge    c001eefb <apicOpen()+0x185>
c001ee7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee82:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee89:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ee8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee8f:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee96:	c1 e8 08             	shr    eax,0x8
c001ee99:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ee9d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eea0:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001eea7:	c1 e8 18             	shr    eax,0x18
c001eeaa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001eead:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001eeb1:	3d ff 00 00 00       	cmp    eax,0xff
c001eeb6:	75 3a                	jne    c001eef2 <apicOpen()+0x17c>
c001eeb8:	e8 73 fe ff ff       	call   c001ed30 <apicGetBase()>
c001eebd:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eec1:	83 fa 01             	cmp    edx,0x1
c001eec4:	75 07                	jne    c001eecd <apicOpen()+0x157>
c001eec6:	ba 60 03 00 00       	mov    edx,0x360
c001eecb:	eb 05                	jmp    c001eed2 <apicOpen()+0x15c>
c001eecd:	ba 50 03 00 00       	mov    edx,0x350
c001eed2:	01 d0                	add    eax,edx
c001eed4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eed7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eeda:	8b 00                	mov    eax,DWORD PTR [eax]
c001eedc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eedf:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eee6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eeea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eeed:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001eef0:	89 10                	mov    DWORD PTR [eax],edx
c001eef2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001eef6:	e9 7a ff ff ff       	jmp    c001ee75 <apicOpen()+0xff>
c001eefb:	90                   	nop
c001eefc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eeff:	c9                   	leave  
c001ef00:	c3                   	ret    
c001ef01:	90                   	nop

c001ef02 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ef02:	55                   	push   ebp
c001ef03:	89 e5                	mov    ebp,esp
c001ef05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef08:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef0e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef11:	72 1d                	jb     c001ef30 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef16:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ef1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef1f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ef25:	01 d0                	add    eax,edx
c001ef27:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ef2a:	73 04                	jae    c001ef30 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ef2c:	b0 01                	mov    al,0x1
c001ef2e:	eb 02                	jmp    c001ef32 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ef30:	b0 00                	mov    al,0x0
c001ef32:	5d                   	pop    ebp
c001ef33:	c3                   	ret    

c001ef34 <IOAPIC::read(int)>:
c001ef34:	55                   	push   ebp
c001ef35:	89 e5                	mov    ebp,esp
c001ef37:	83 ec 10             	sub    esp,0x10
c001ef3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ef43:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ef46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ef49:	0f b6 d0             	movzx  edx,al
c001ef4c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef4f:	89 10                	mov    DWORD PTR [eax],edx
c001ef51:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ef54:	83 c0 10             	add    eax,0x10
c001ef57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef59:	c9                   	leave  
c001ef5a:	c3                   	ret    
c001ef5b:	90                   	nop

c001ef5c <IOAPIC::open(int, int, void*)>:
c001ef5c:	55                   	push   ebp
c001ef5d:	89 e5                	mov    ebp,esp
c001ef5f:	57                   	push   edi
c001ef60:	56                   	push   esi
c001ef61:	53                   	push   ebx
c001ef62:	83 ec 04             	sub    esp,0x4
c001ef65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ef6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef7a:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001ef81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef93:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001ef9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef9d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001efa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efa6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001efac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efaf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001efb5:	0f b6 f0             	movzx  esi,al
c001efb8:	89 d0                	mov    eax,edx
c001efba:	ba 00 00 00 00       	mov    edx,0x0
c001efbf:	89 c7                	mov    edi,eax
c001efc1:	83 e7 ff             	and    edi,0xffffffff
c001efc4:	89 f9                	mov    ecx,edi
c001efc6:	0f b6 da             	movzx  ebx,dl
c001efc9:	89 c8                	mov    eax,ecx
c001efcb:	89 da                	mov    edx,ebx
c001efcd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001efd0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001efd3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001efd7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001efdb:	83 e0 00             	and    eax,0x0
c001efde:	09 d0                	or     eax,edx
c001efe0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001efe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efe7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001efed:	8d 50 01             	lea    edx,[eax+0x1]
c001eff0:	88 d1                	mov    cl,dl
c001eff2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001eff5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001effb:	0f b6 d0             	movzx  edx,al
c001effe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f001:	83 c2 08             	add    edx,0x8
c001f004:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f008:	0f b6 c9             	movzx  ecx,cl
c001f00b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f011:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f015:	6a 01                	push   0x1
c001f017:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f01a:	e8 15 ff ff ff       	call   c001ef34 <IOAPIC::read(int)>
c001f01f:	83 c4 08             	add    esp,0x8
c001f022:	c1 f8 10             	sar    eax,0x10
c001f025:	0f b6 c0             	movzx  eax,al
c001f028:	8d 50 01             	lea    edx,[eax+0x1]
c001f02b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f02e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f034:	b8 00 00 00 00       	mov    eax,0x0
c001f039:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f03c:	5b                   	pop    ebx
c001f03d:	5e                   	pop    esi
c001f03e:	5f                   	pop    edi
c001f03f:	5d                   	pop    ebp
c001f040:	c3                   	ret    
c001f041:	90                   	nop

c001f042 <IOAPIC::write(int, int)>:
c001f042:	55                   	push   ebp
c001f043:	89 e5                	mov    ebp,esp
c001f045:	83 ec 10             	sub    esp,0x10
c001f048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f04b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f051:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f054:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f057:	0f b6 d0             	movzx  edx,al
c001f05a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f05d:	89 10                	mov    DWORD PTR [eax],edx
c001f05f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f062:	8d 50 10             	lea    edx,[eax+0x10]
c001f065:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f068:	89 02                	mov    DWORD PTR [edx],eax
c001f06a:	90                   	nop
c001f06b:	c9                   	leave  
c001f06c:	c3                   	ret    
c001f06d:	90                   	nop

c001f06e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f06e:	55                   	push   ebp
c001f06f:	89 e5                	mov    ebp,esp
c001f071:	53                   	push   ebx
c001f072:	83 ec 2c             	sub    esp,0x2c
c001f075:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f078:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f07b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f07e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f081:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f084:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f087:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f08a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f08d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f090:	88 d8                	mov    al,bl
c001f092:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f095:	88 c8                	mov    al,cl
c001f097:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f09a:	88 d0                	mov    al,dl
c001f09c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f09f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0a3:	83 c0 08             	add    eax,0x8
c001f0a6:	01 c0                	add    eax,eax
c001f0a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f0ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f0af:	83 c0 08             	add    eax,0x8
c001f0b2:	01 c0                	add    eax,eax
c001f0b4:	83 c0 01             	add    eax,0x1
c001f0b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f0ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f0bd:	50                   	push   eax
c001f0be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0c1:	e8 6e fe ff ff       	call   c001ef34 <IOAPIC::read(int)>
c001f0c6:	83 c4 08             	add    esp,0x8
c001f0c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f0cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f0d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f0d6:	c1 e0 18             	shl    eax,0x18
c001f0d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f0dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f0df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f0e2:	52                   	push   edx
c001f0e3:	50                   	push   eax
c001f0e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0e7:	e8 56 ff ff ff       	call   c001f042 <IOAPIC::write(int, int)>
c001f0ec:	83 c4 0c             	add    esp,0xc
c001f0ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0f2:	50                   	push   eax
c001f0f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0f6:	e8 39 fe ff ff       	call   c001ef34 <IOAPIC::read(int)>
c001f0fb:	83 c4 08             	add    esp,0x8
c001f0fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f101:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f108:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f10f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f116:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f11a:	85 c0                	test   eax,eax
c001f11c:	74 09                	je     c001f127 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f11e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f125:	eb 07                	jmp    c001f12e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f127:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f12e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f132:	85 c0                	test   eax,eax
c001f134:	74 09                	je     c001f13f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f136:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f13d:	eb 07                	jmp    c001f146 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f13f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f146:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f14d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f151:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f154:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f157:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f15a:	52                   	push   edx
c001f15b:	50                   	push   eax
c001f15c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f15f:	e8 de fe ff ff       	call   c001f042 <IOAPIC::write(int, int)>
c001f164:	83 c4 0c             	add    esp,0xc
c001f167:	90                   	nop
c001f168:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f16b:	c9                   	leave  
c001f16c:	c3                   	ret    
c001f16d:	66 90                	xchg   ax,ax
c001f16f:	90                   	nop

c001f170 <APICTimer::close(int, int, void*)>:
c001f170:	b8 00 00 00 00       	mov    eax,0x0
c001f175:	c3                   	ret    
c001f176:	66 90                	xchg   ax,ax

c001f178 <apicTimerHandler(regs*, void*)>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f17f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f181:	b8 10 27 00 00       	mov    eax,0x2710
c001f186:	ba 00 00 00 00       	mov    edx,0x0
c001f18b:	f7 f1                	div    ecx
c001f18d:	83 ec 0c             	sub    esp,0xc
c001f190:	50                   	push   eax
c001f191:	e8 b6 b5 fe ff       	call   c000a74c <timerHandler(unsigned int)>
c001f196:	83 c4 10             	add    esp,0x10
c001f199:	90                   	nop
c001f19a:	83 c4 0c             	add    esp,0xc
c001f19d:	c3                   	ret    
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <APICTimer::open(int, int, void*)>:
c001f1a0:	83 ec 0c             	sub    esp,0xc
c001f1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1a9:	83 c0 24             	add    eax,0x24
c001f1ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1ae:	83 ec 08             	sub    esp,0x8
c001f1b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1b9:	ff d0                	call   eax
c001f1bb:	83 c4 10             	add    esp,0x10
c001f1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1d4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f1e4:	83 ec 0c             	sub    esp,0xc
c001f1e7:	51                   	push   ecx
c001f1e8:	6a 01                	push   0x1
c001f1ea:	68 78 f1 01 c0       	push   0xc001f178
c001f1ef:	52                   	push   edx
c001f1f0:	50                   	push   eax
c001f1f1:	e8 f8 9d fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f1f6:	83 c4 20             	add    esp,0x20
c001f1f9:	89 c2                	mov    edx,eax
c001f1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f205:	b8 00 00 00 00       	mov    eax,0x0
c001f20a:	83 c4 0c             	add    esp,0xc
c001f20d:	c3                   	ret    
c001f20e:	66 90                	xchg   ax,ax

c001f210 <APICTimer::write(int)>:
c001f210:	83 ec 0c             	sub    esp,0xc
c001f213:	83 ec 0c             	sub    esp,0xc
c001f216:	68 44 3a 02 c0       	push   0xc0023a44
c001f21b:	e8 a2 fa fe ff       	call   c000ecc2 <KePanic(char const*)>
c001f220:	83 c4 10             	add    esp,0x10
c001f223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f227:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f22b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f231:	90                   	nop
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    
c001f236:	66 90                	xchg   ax,ax

c001f238 <APICTimer::APICTimer()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23f:	83 ec 08             	sub    esp,0x8
c001f242:	68 54 3a 02 c0       	push   0xc0023a54
c001f247:	50                   	push   eax
c001f248:	e8 33 b4 fe ff       	call   c000a680 <Timer::Timer(char const*)>
c001f24d:	83 c4 10             	add    esp,0x10
c001f250:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c001f255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f259:	89 10                	mov    DWORD PTR [eax],edx
c001f25b:	90                   	nop
c001f25c:	83 c4 0c             	add    esp,0xc
c001f25f:	c3                   	ret    

c001f260 <PIT::write(int)>:
c001f260:	83 ec 10             	sub    esp,0x10
c001f263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f267:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f26b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f275:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f27a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f27f:	89 c2                	mov    edx,eax
c001f281:	c1 fa 1f             	sar    edx,0x1f
c001f284:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f288:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f28c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f293:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f298:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f29c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f2a1:	ee                   	out    dx,al
c001f2a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2a6:	0f b6 c0             	movzx  eax,al
c001f2a9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f2b0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f2b4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f2b8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f2bd:	ee                   	out    dx,al
c001f2be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2c2:	c1 f8 08             	sar    eax,0x8
c001f2c5:	0f b6 c0             	movzx  eax,al
c001f2c8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f2cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f2d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f2d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f2dc:	ee                   	out    dx,al
c001f2dd:	90                   	nop
c001f2de:	83 c4 10             	add    esp,0x10
c001f2e1:	c3                   	ret    
c001f2e2:	66 90                	xchg   ax,ax

c001f2e4 <pitHandler(regs*, void*)>:
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f2ed:	b8 10 27 00 00       	mov    eax,0x2710
c001f2f2:	89 c2                	mov    edx,eax
c001f2f4:	c1 fa 1f             	sar    edx,0x1f
c001f2f7:	f7 f9                	idiv   ecx
c001f2f9:	83 ec 0c             	sub    esp,0xc
c001f2fc:	50                   	push   eax
c001f2fd:	e8 4a b4 fe ff       	call   c000a74c <timerHandler(unsigned int)>
c001f302:	83 c4 10             	add    esp,0x10
c001f305:	90                   	nop
c001f306:	83 c4 0c             	add    esp,0xc
c001f309:	c3                   	ret    
c001f30a:	66 90                	xchg   ax,ax

c001f30c <PIT::open(int, int, void*)>:
c001f30c:	83 ec 0c             	sub    esp,0xc
c001f30f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f313:	8b 00                	mov    eax,DWORD PTR [eax]
c001f315:	83 c0 24             	add    eax,0x24
c001f318:	8b 00                	mov    eax,DWORD PTR [eax]
c001f31a:	83 ec 08             	sub    esp,0x8
c001f31d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f325:	ff d0                	call   eax
c001f327:	83 c4 10             	add    esp,0x10
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	6a 00                	push   0x0
c001f333:	6a 01                	push   0x1
c001f335:	68 e4 f2 01 c0       	push   0xc001f2e4
c001f33a:	6a 00                	push   0x0
c001f33c:	50                   	push   eax
c001f33d:	e8 ac 9c fe ff       	call   c0008fee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f342:	83 c4 20             	add    esp,0x20
c001f345:	89 c2                	mov    edx,eax
c001f347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f34b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f351:	b8 00 00 00 00       	mov    eax,0x0
c001f356:	83 c4 0c             	add    esp,0xc
c001f359:	c3                   	ret    
c001f35a:	66 90                	xchg   ax,ax

c001f35c <PIT::close(int, int, void*)>:
c001f35c:	83 ec 0c             	sub    esp,0xc
c001f35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f363:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f371:	6a 01                	push   0x1
c001f373:	68 e4 f2 01 c0       	push   0xc001f2e4
c001f378:	6a 00                	push   0x0
c001f37a:	50                   	push   eax
c001f37b:	e8 a4 9c fe ff       	call   c0009024 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	b8 00 00 00 00       	mov    eax,0x0
c001f388:	83 c4 0c             	add    esp,0xc
c001f38b:	c3                   	ret    

c001f38c <PIT::PIT()>:
c001f38c:	83 ec 0c             	sub    esp,0xc
c001f38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f393:	83 ec 08             	sub    esp,0x8
c001f396:	68 90 3a 02 c0       	push   0xc0023a90
c001f39b:	50                   	push   eax
c001f39c:	e8 df b2 fe ff       	call   c000a680 <Timer::Timer(char const*)>
c001f3a1:	83 c4 10             	add    esp,0x10
c001f3a4:	ba b8 3a 02 c0       	mov    edx,0xc0023ab8
c001f3a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ad:	89 10                	mov    DWORD PTR [eax],edx
c001f3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3b9:	0f b6 d0             	movzx  edx,al
c001f3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3d1:	0f b6 d0             	movzx  edx,al
c001f3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f3e7:	8d 50 01             	lea    edx,[eax+0x1]
c001f3ea:	88 d1                	mov    cl,dl
c001f3ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f3f0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f3f6:	0f b6 d0             	movzx  edx,al
c001f3f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3fd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f401:	83 e1 3f             	and    ecx,0x3f
c001f404:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f408:	90                   	nop
c001f409:	83 c4 0c             	add    esp,0xc
c001f40c:	c3                   	ret    
c001f40d:	66 90                	xchg   ax,ax
c001f40f:	90                   	nop

c001f410 <avxDetect>:
c001f410:	b8 01 00 00 00       	mov    eax,0x1
c001f415:	0f a2                	cpuid  
c001f417:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f41d:	74 15                	je     c001f434 <avxDetect.noAVX>
c001f41f:	b8 01 00 00 00       	mov    eax,0x1
c001f424:	0f a2                	cpuid  
c001f426:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f42c:	74 06                	je     c001f434 <avxDetect.noAVX>
c001f42e:	b8 01 00 00 00       	mov    eax,0x1
c001f433:	c3                   	ret    

c001f434 <avxDetect.noAVX>:
c001f434:	b8 00 00 00 00       	mov    eax,0x0
c001f439:	c3                   	ret    

c001f43a <avxSave>:
c001f43a:	53                   	push   ebx
c001f43b:	52                   	push   edx
c001f43c:	31 c0                	xor    eax,eax
c001f43e:	48                   	dec    eax
c001f43f:	89 c2                	mov    edx,eax
c001f441:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f445:	0f ae 23             	xsave  [ebx]
c001f448:	5a                   	pop    edx
c001f449:	5b                   	pop    ebx
c001f44a:	c3                   	ret    

c001f44b <avxLoad>:
c001f44b:	53                   	push   ebx
c001f44c:	52                   	push   edx
c001f44d:	31 c0                	xor    eax,eax
c001f44f:	48                   	dec    eax
c001f450:	89 c2                	mov    edx,eax
c001f452:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f456:	0f ae 2b             	xrstor [ebx]
c001f459:	5a                   	pop    edx
c001f45a:	5b                   	pop    ebx
c001f45b:	c3                   	ret    

c001f45c <avxInit>:
c001f45c:	e8 47 03 00 00       	call   c001f7a8 <sseInit>
c001f461:	50                   	push   eax
c001f462:	51                   	push   ecx
c001f463:	0f 20 e0             	mov    eax,cr4
c001f466:	0d 00 00 04 00       	or     eax,0x40000
c001f46b:	0f 22 e0             	mov    cr4,eax
c001f46e:	31 c9                	xor    ecx,ecx
c001f470:	0f 01 d0             	xgetbv 
c001f473:	0d 07 00 00 00       	or     eax,0x7
c001f478:	0f 01 d1             	xsetbv 
c001f47b:	59                   	pop    ecx
c001f47c:	58                   	pop    eax
c001f47d:	c3                   	ret    

c001f47e <avxClose>:
c001f47e:	c3                   	ret    
c001f47f:	90                   	nop

c001f480 <isr0>:
c001f480:	fa                   	cli    
c001f481:	68 00 00 00 00       	push   0x0
c001f486:	68 00 00 00 00       	push   0x0
c001f48b:	e9 56 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f490 <isr1>:
c001f490:	fa                   	cli    
c001f491:	6a 00                	push   0x0
c001f493:	6a 01                	push   0x1
c001f495:	e9 4c 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f49a <isr2>:
c001f49a:	fa                   	cli    
c001f49b:	6a 00                	push   0x0
c001f49d:	6a 02                	push   0x2
c001f49f:	e9 42 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4a4 <isr3>:
c001f4a4:	fa                   	cli    
c001f4a5:	6a 00                	push   0x0
c001f4a7:	6a 03                	push   0x3
c001f4a9:	e9 38 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4ae <isr4>:
c001f4ae:	fa                   	cli    
c001f4af:	6a 00                	push   0x0
c001f4b1:	6a 04                	push   0x4
c001f4b3:	e9 2e 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4b8 <isr5>:
c001f4b8:	fa                   	cli    
c001f4b9:	6a 00                	push   0x0
c001f4bb:	6a 05                	push   0x5
c001f4bd:	e9 24 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4c2 <isr6>:
c001f4c2:	fa                   	cli    
c001f4c3:	6a 00                	push   0x0
c001f4c5:	6a 06                	push   0x6
c001f4c7:	e9 1a 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4cc <isr7>:
c001f4cc:	fa                   	cli    
c001f4cd:	6a 00                	push   0x0
c001f4cf:	6a 07                	push   0x7
c001f4d1:	e9 10 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4d6 <isr8>:
c001f4d6:	fa                   	cli    
c001f4d7:	6a 08                	push   0x8
c001f4d9:	e9 08 01 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4de <isr9>:
c001f4de:	fa                   	cli    
c001f4df:	6a 00                	push   0x0
c001f4e1:	6a 09                	push   0x9
c001f4e3:	e9 fe 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4e8 <isr10>:
c001f4e8:	fa                   	cli    
c001f4e9:	6a 0a                	push   0xa
c001f4eb:	e9 f6 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4f0 <isr11>:
c001f4f0:	fa                   	cli    
c001f4f1:	6a 0b                	push   0xb
c001f4f3:	e9 ee 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f4f8 <isr12>:
c001f4f8:	fa                   	cli    
c001f4f9:	6a 0c                	push   0xc
c001f4fb:	e9 e6 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f500 <isr13>:
c001f500:	fa                   	cli    
c001f501:	6a 0d                	push   0xd
c001f503:	53                   	push   ebx
c001f504:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f508:	81 fb d6 f6 01 c0    	cmp    ebx,0xc001f6d6
c001f50e:	5b                   	pop    ebx
c001f50f:	0f 84 c3 01 00 00    	je     c001f6d8 <finishSignal2>
c001f515:	e9 cc 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f51a <isr14>:
c001f51a:	fa                   	cli    
c001f51b:	6a 0e                	push   0xe
c001f51d:	e9 c4 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f522 <isr15>:
c001f522:	fa                   	cli    
c001f523:	6a 00                	push   0x0
c001f525:	6a 0f                	push   0xf
c001f527:	e9 ba 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f52c <isr16>:
c001f52c:	fa                   	cli    
c001f52d:	6a 00                	push   0x0
c001f52f:	6a 10                	push   0x10
c001f531:	e9 b0 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f536 <isr17>:
c001f536:	fa                   	cli    
c001f537:	6a 00                	push   0x0
c001f539:	6a 11                	push   0x11
c001f53b:	e9 a6 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f540 <isr18>:
c001f540:	fa                   	cli    
c001f541:	6a 00                	push   0x0
c001f543:	6a 12                	push   0x12
c001f545:	e9 9c 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f54a <irq3>:
c001f54a:	fa                   	cli    
c001f54b:	6a 00                	push   0x0
c001f54d:	6a 23                	push   0x23
c001f54f:	e9 92 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f554 <irq4>:
c001f554:	fa                   	cli    
c001f555:	6a 00                	push   0x0
c001f557:	6a 24                	push   0x24
c001f559:	e9 88 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f55e <irq5>:
c001f55e:	fa                   	cli    
c001f55f:	6a 00                	push   0x0
c001f561:	6a 25                	push   0x25
c001f563:	e9 7e 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f568 <irq6>:
c001f568:	fa                   	cli    
c001f569:	6a 00                	push   0x0
c001f56b:	6a 26                	push   0x26
c001f56d:	e9 74 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f572 <irq7>:
c001f572:	fa                   	cli    
c001f573:	6a 00                	push   0x0
c001f575:	6a 27                	push   0x27
c001f577:	e9 6a 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f57c <irq8>:
c001f57c:	fa                   	cli    
c001f57d:	6a 00                	push   0x0
c001f57f:	6a 28                	push   0x28
c001f581:	e9 60 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f586 <irq9>:
c001f586:	fa                   	cli    
c001f587:	6a 00                	push   0x0
c001f589:	6a 29                	push   0x29
c001f58b:	e9 56 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f590 <irq10>:
c001f590:	fa                   	cli    
c001f591:	6a 00                	push   0x0
c001f593:	6a 2a                	push   0x2a
c001f595:	e9 4c 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f59a <irq11>:
c001f59a:	fa                   	cli    
c001f59b:	6a 00                	push   0x0
c001f59d:	6a 2b                	push   0x2b
c001f59f:	e9 42 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f5a4 <irq12>:
c001f5a4:	fa                   	cli    
c001f5a5:	6a 00                	push   0x0
c001f5a7:	6a 2c                	push   0x2c
c001f5a9:	e9 38 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f5ae <irq13>:
c001f5ae:	fa                   	cli    
c001f5af:	6a 00                	push   0x0
c001f5b1:	6a 2d                	push   0x2d
c001f5b3:	e9 2e 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f5b8 <irq14>:
c001f5b8:	fa                   	cli    
c001f5b9:	6a 00                	push   0x0
c001f5bb:	6a 2e                	push   0x2e
c001f5bd:	e9 24 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f5c2 <irq15>:
c001f5c2:	fa                   	cli    
c001f5c3:	6a 00                	push   0x0
c001f5c5:	6a 2f                	push   0x2f
c001f5c7:	e9 1a 00 00 00       	jmp    c001f5e6 <int_common_stub>

c001f5cc <irq1>:
c001f5cc:	fa                   	cli    
c001f5cd:	6a 00                	push   0x0
c001f5cf:	6a 21                	push   0x21
c001f5d1:	eb 13                	jmp    c001f5e6 <int_common_stub>

c001f5d3 <irq2>:
c001f5d3:	fa                   	cli    
c001f5d4:	6a 00                	push   0x0
c001f5d6:	6a 22                	push   0x22
c001f5d8:	eb 0c                	jmp    c001f5e6 <int_common_stub>

c001f5da <isr96>:
c001f5da:	6a 00                	push   0x0
c001f5dc:	6a 60                	push   0x60
c001f5de:	fb                   	sti    
c001f5df:	eb 37                	jmp    c001f618 <syscall_common_stub>

c001f5e1 <irq0>:
c001f5e1:	fa                   	cli    
c001f5e2:	6a 00                	push   0x0
c001f5e4:	6a 20                	push   0x20

c001f5e6 <int_common_stub>:
c001f5e6:	60                   	pusha  
c001f5e7:	1e                   	push   ds
c001f5e8:	06                   	push   es
c001f5e9:	0f a0                	push   fs
c001f5eb:	0f a8                	push   gs
c001f5ed:	66 b8 10 00          	mov    ax,0x10
c001f5f1:	66 8e d8             	mov    ds,ax
c001f5f4:	66 8e c0             	mov    es,ax
c001f5f7:	66 8e e0             	mov    fs,ax
c001f5fa:	66 8e e8             	mov    gs,ax
c001f5fd:	54                   	push   esp
c001f5fe:	fc                   	cld    
c001f5ff:	e8 ec e7 fe ff       	call   c000ddf0 <int_handler>
c001f604:	81 c4 04 00 00 00    	add    esp,0x4
c001f60a:	0f a9                	pop    gs
c001f60c:	0f a1                	pop    fs
c001f60e:	07                   	pop    es
c001f60f:	1f                   	pop    ds
c001f610:	61                   	popa   
c001f611:	81 c4 08 00 00 00    	add    esp,0x8
c001f617:	cf                   	iret   

c001f618 <syscall_common_stub>:
c001f618:	60                   	pusha  
c001f619:	1e                   	push   ds
c001f61a:	06                   	push   es
c001f61b:	0f a0                	push   fs
c001f61d:	0f a8                	push   gs
c001f61f:	66 b8 10 00          	mov    ax,0x10
c001f623:	66 8e d8             	mov    ds,ax
c001f626:	66 8e c0             	mov    es,ax
c001f629:	66 8e e0             	mov    fs,ax
c001f62c:	66 8e e8             	mov    gs,ax
c001f62f:	54                   	push   esp
c001f630:	fc                   	cld    
c001f631:	e8 ba e7 fe ff       	call   c000ddf0 <int_handler>
c001f636:	81 c4 04 00 00 00    	add    esp,0x4
c001f63c:	0f a9                	pop    gs
c001f63e:	0f a1                	pop    fs
c001f640:	07                   	pop    es
c001f641:	1f                   	pop    ds
c001f642:	e8 18 09 ff ff       	call   c000ff5f <KiCheckSignalZ>
c001f647:	3d 00 00 00 00       	cmp    eax,0x0
c001f64c:	0f 84 c0 00 00 00    	je     c001f712 <skipSignals>
c001f652:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f657:	61                   	popa   
c001f658:	53                   	push   ebx
c001f659:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f65f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f662:	5b                   	pop    ebx
c001f663:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f668:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f66b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f66e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f671:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f674:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f677:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f67a:	81 c4 08 00 00 00    	add    esp,0x8
c001f680:	5e                   	pop    esi
c001f681:	5b                   	pop    ebx
c001f682:	59                   	pop    ecx
c001f683:	5a                   	pop    edx
c001f684:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f687:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f68a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f68d:	52                   	push   edx
c001f68e:	51                   	push   ecx
c001f68f:	53                   	push   ebx
c001f690:	56                   	push   esi
c001f691:	81 ec 08 00 00 00    	sub    esp,0x8
c001f697:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f69a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f69d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f6a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f6a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f6a6:	60                   	pusha  
c001f6a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f6ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f6b0:	89 e3                	mov    ebx,esp
c001f6b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f6b5:	52                   	push   edx
c001f6b6:	68 d6 f6 01 c0       	push   0xc001f6d6
c001f6bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f6be:	89 dc                	mov    esp,ebx
c001f6c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f6c3:	68 23 00 00 00       	push   0x23
c001f6c8:	51                   	push   ecx
c001f6c9:	68 02 02 00 00       	push   0x202
c001f6ce:	68 1b 00 00 00       	push   0x1b
c001f6d3:	ff 36                	push   DWORD PTR [esi]
c001f6d5:	cf                   	iret   

c001f6d6 <finishSignal>:
c001f6d6:	cd 0f                	int    0xf

c001f6d8 <finishSignal2>:
c001f6d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f6de:	e8 f9 08 ff ff       	call   c000ffdc <KiFinishSignalZ>
c001f6e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f6e9:	68 23 00 00 00       	push   0x23
c001f6ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f6f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f6f4:	68 1b 00 00 00       	push   0x1b
c001f6f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f6fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f6ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f702:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f708:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f70b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f70e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f711:	cf                   	iret   

c001f712 <skipSignals>:
c001f712:	61                   	popa   
c001f713:	81 c4 08 00 00 00    	add    esp,0x8
c001f719:	cf                   	iret   
c001f71a:	90                   	nop
c001f71b:	90                   	nop

c001f71c <irq16>:
c001f71c:	fa                   	cli    
c001f71d:	6a 00                	push   0x0
c001f71f:	6a 30                	push   0x30
c001f721:	e9 c0 fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f726 <irq17>:
c001f726:	fa                   	cli    
c001f727:	6a 00                	push   0x0
c001f729:	6a 31                	push   0x31
c001f72b:	e9 b6 fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f730 <irq18>:
c001f730:	fa                   	cli    
c001f731:	6a 00                	push   0x0
c001f733:	6a 32                	push   0x32
c001f735:	e9 ac fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f73a <irq19>:
c001f73a:	fa                   	cli    
c001f73b:	6a 00                	push   0x0
c001f73d:	6a 33                	push   0x33
c001f73f:	e9 a2 fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f744 <irq20>:
c001f744:	fa                   	cli    
c001f745:	6a 00                	push   0x0
c001f747:	6a 34                	push   0x34
c001f749:	e9 98 fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f74e <irq21>:
c001f74e:	fa                   	cli    
c001f74f:	6a 00                	push   0x0
c001f751:	6a 35                	push   0x35
c001f753:	e9 8e fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f758 <irq22>:
c001f758:	fa                   	cli    
c001f759:	6a 00                	push   0x0
c001f75b:	6a 36                	push   0x36
c001f75d:	e9 84 fe ff ff       	jmp    c001f5e6 <int_common_stub>

c001f762 <irq23>:
c001f762:	fa                   	cli    
c001f763:	6a 00                	push   0x0
c001f765:	6a 37                	push   0x37
c001f767:	e9 7a fe ff ff       	jmp    c001f5e6 <int_common_stub>
c001f76c:	66 90                	xchg   ax,ax
c001f76e:	66 90                	xchg   ax,ax

c001f770 <i386GetRDRAND>:
c001f770:	b9 64 00 00 00       	mov    ecx,0x64

c001f775 <retry>:
c001f775:	0f c7 f0             	rdrand eax
c001f778:	72 05                	jb     c001f77f <retry.done>
c001f77a:	e2 f9                	loop   c001f775 <retry>

c001f77c <retry.fail>:
c001f77c:	31 c0                	xor    eax,eax
c001f77e:	c3                   	ret    

c001f77f <retry.done>:
c001f77f:	c3                   	ret    

c001f780 <sseDetect>:
c001f780:	b8 01 00 00 00       	mov    eax,0x1
c001f785:	0f a2                	cpuid  
c001f787:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f78d:	74 06                	je     c001f795 <sseDetect.noSSE>
c001f78f:	b8 01 00 00 00       	mov    eax,0x1
c001f794:	c3                   	ret    

c001f795 <sseDetect.noSSE>:
c001f795:	31 c0                	xor    eax,eax
c001f797:	c3                   	ret    

c001f798 <sseSave>:
c001f798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f79c:	0f ae 00             	fxsave [eax]
c001f79f:	c3                   	ret    

c001f7a0 <sseLoad>:
c001f7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a4:	0f ae 08             	fxrstor [eax]
c001f7a7:	c3                   	ret    

c001f7a8 <sseInit>:
c001f7a8:	e8 48 00 00 00       	call   c001f7f5 <x87Init>
c001f7ad:	0f 20 e0             	mov    eax,cr4
c001f7b0:	66 0d 00 06          	or     ax,0x600
c001f7b4:	0f 22 e0             	mov    cr4,eax
c001f7b7:	c3                   	ret    

c001f7b8 <sseClose>:
c001f7b8:	c3                   	ret    
c001f7b9:	66 90                	xchg   ax,ax
c001f7bb:	66 90                	xchg   ax,ax
c001f7bd:	66 90                	xchg   ax,ax
c001f7bf:	90                   	nop

c001f7c0 <value_37F>:
c001f7c0:	7f 03                	jg     c001f7c5 <value_37A+0x1>

c001f7c2 <value_37E>:
c001f7c2:	7e 03                	jle    c001f7c7 <x87Detect+0x1>

c001f7c4 <value_37A>:
c001f7c4:	7a 03                	jp     c001f7c9 <x87Detect+0x3>

c001f7c6 <x87Detect>:
c001f7c6:	53                   	push   ebx
c001f7c7:	51                   	push   ecx
c001f7c8:	52                   	push   edx
c001f7c9:	b8 01 00 00 00       	mov    eax,0x1
c001f7ce:	0f a2                	cpuid  
c001f7d0:	f7 c2 01 00 00 00    	test   edx,0x1
c001f7d6:	74 06                	je     c001f7de <x87Detect.nox87>
c001f7d8:	b8 01 00 00 00       	mov    eax,0x1
c001f7dd:	c3                   	ret    

c001f7de <x87Detect.nox87>:
c001f7de:	b8 00 00 00 00       	mov    eax,0x0
c001f7e3:	5a                   	pop    edx
c001f7e4:	59                   	pop    ecx
c001f7e5:	5b                   	pop    ebx
c001f7e6:	c3                   	ret    

c001f7e7 <x87Save>:
c001f7e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7eb:	dd 30                	fnsave [eax]
c001f7ed:	c3                   	ret    

c001f7ee <x87Load>:
c001f7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f2:	dd 20                	frstor [eax]
c001f7f4:	c3                   	ret    

c001f7f5 <x87Init>:
c001f7f5:	0f 20 c0             	mov    eax,cr0
c001f7f8:	66 25 fb ff          	and    ax,0xfffb
c001f7fc:	66 0d 22 00          	or     ax,0x22
c001f800:	0f 22 c0             	mov    cr0,eax
c001f803:	db e3                	fninit 
c001f805:	0f 06                	clts   
c001f807:	d9 2d c4 f7 01 c0    	fldcw  WORD PTR ds:0xc001f7c4
c001f80d:	c3                   	ret    

c001f80e <x87Close>:
c001f80e:	c3                   	ret    
c001f80f:	90                   	nop

c001f810 <__do_global_ctors_aux>:
c001f810:	a1 c4 07 02 c0       	mov    eax,ds:0xc00207c4
c001f815:	83 f8 ff             	cmp    eax,0xffffffff
c001f818:	74 1a                	je     c001f834 <__do_global_ctors_aux+0x24>
c001f81a:	55                   	push   ebp
c001f81b:	89 e5                	mov    ebp,esp
c001f81d:	53                   	push   ebx
c001f81e:	52                   	push   edx
c001f81f:	bb c4 07 02 c0       	mov    ebx,0xc00207c4
c001f824:	ff d0                	call   eax
c001f826:	83 eb 04             	sub    ebx,0x4
c001f829:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f82b:	83 f8 ff             	cmp    eax,0xffffffff
c001f82e:	75 f4                	jne    c001f824 <__do_global_ctors_aux+0x14>
c001f830:	58                   	pop    eax
c001f831:	5b                   	pop    ebx
c001f832:	5d                   	pop    ebp
c001f833:	c3                   	ret    
c001f834:	c3                   	ret    
c001f835:	66 90                	xchg   ax,ax
c001f837:	90                   	nop

c001f838 <__divdi3>:
c001f838:	55                   	push   ebp
c001f839:	57                   	push   edi
c001f83a:	56                   	push   esi
c001f83b:	53                   	push   ebx
c001f83c:	83 ec 1c             	sub    esp,0x1c
c001f83f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f847:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f84a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f84e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f856:	85 db                	test   ebx,ebx
c001f858:	0f 88 8e 00 00 00    	js     c001f8ec <__divdi3+0xb4>
c001f85e:	89 dd                	mov    ebp,ebx
c001f860:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f868:	89 d3                	mov    ebx,edx
c001f86a:	85 d2                	test   edx,edx
c001f86c:	79 0d                	jns    c001f87b <__divdi3+0x43>
c001f86e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f872:	f7 d8                	neg    eax
c001f874:	83 d2 00             	adc    edx,0x0
c001f877:	f7 da                	neg    edx
c001f879:	89 d3                	mov    ebx,edx
c001f87b:	89 c7                	mov    edi,eax
c001f87d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f880:	85 db                	test   ebx,ebx
c001f882:	75 48                	jne    c001f8cc <__divdi3+0x94>
c001f884:	39 ef                	cmp    edi,ebp
c001f886:	76 24                	jbe    c001f8ac <__divdi3+0x74>
c001f888:	89 ea                	mov    edx,ebp
c001f88a:	f7 f7                	div    edi
c001f88c:	89 c1                	mov    ecx,eax
c001f88e:	31 f6                	xor    esi,esi
c001f890:	89 c8                	mov    eax,ecx
c001f892:	89 f2                	mov    edx,esi
c001f894:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f898:	85 c9                	test   ecx,ecx
c001f89a:	74 07                	je     c001f8a3 <__divdi3+0x6b>
c001f89c:	f7 d8                	neg    eax
c001f89e:	83 d2 00             	adc    edx,0x0
c001f8a1:	f7 da                	neg    edx
c001f8a3:	83 c4 1c             	add    esp,0x1c
c001f8a6:	5b                   	pop    ebx
c001f8a7:	5e                   	pop    esi
c001f8a8:	5f                   	pop    edi
c001f8a9:	5d                   	pop    ebp
c001f8aa:	c3                   	ret    
c001f8ab:	90                   	nop
c001f8ac:	85 ff                	test   edi,edi
c001f8ae:	75 0b                	jne    c001f8bb <__divdi3+0x83>
c001f8b0:	b8 01 00 00 00       	mov    eax,0x1
c001f8b5:	31 d2                	xor    edx,edx
c001f8b7:	f7 f3                	div    ebx
c001f8b9:	89 c7                	mov    edi,eax
c001f8bb:	31 d2                	xor    edx,edx
c001f8bd:	89 e8                	mov    eax,ebp
c001f8bf:	f7 f7                	div    edi
c001f8c1:	89 c6                	mov    esi,eax
c001f8c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f8c6:	f7 f7                	div    edi
c001f8c8:	89 c1                	mov    ecx,eax
c001f8ca:	eb c4                	jmp    c001f890 <__divdi3+0x58>
c001f8cc:	39 eb                	cmp    ebx,ebp
c001f8ce:	77 3c                	ja     c001f90c <__divdi3+0xd4>
c001f8d0:	0f bd f3             	bsr    esi,ebx
c001f8d3:	83 f6 1f             	xor    esi,0x1f
c001f8d6:	75 40                	jne    c001f918 <__divdi3+0xe0>
c001f8d8:	39 eb                	cmp    ebx,ebp
c001f8da:	72 09                	jb     c001f8e5 <__divdi3+0xad>
c001f8dc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f8df:	0f 87 97 00 00 00    	ja     c001f97c <__divdi3+0x144>
c001f8e5:	b9 01 00 00 00       	mov    ecx,0x1
c001f8ea:	eb a4                	jmp    c001f890 <__divdi3+0x58>
c001f8ec:	f7 d9                	neg    ecx
c001f8ee:	83 d3 00             	adc    ebx,0x0
c001f8f1:	f7 db                	neg    ebx
c001f8f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f8f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f8fa:	89 dd                	mov    ebp,ebx
c001f8fc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f904:	e9 5f ff ff ff       	jmp    c001f868 <__divdi3+0x30>
c001f909:	8d 76 00             	lea    esi,[esi+0x0]
c001f90c:	31 f6                	xor    esi,esi
c001f90e:	31 c9                	xor    ecx,ecx
c001f910:	e9 7b ff ff ff       	jmp    c001f890 <__divdi3+0x58>
c001f915:	8d 76 00             	lea    esi,[esi+0x0]
c001f918:	b8 20 00 00 00       	mov    eax,0x20
c001f91d:	29 f0                	sub    eax,esi
c001f91f:	89 f1                	mov    ecx,esi
c001f921:	d3 e3                	shl    ebx,cl
c001f923:	89 fa                	mov    edx,edi
c001f925:	88 c1                	mov    cl,al
c001f927:	d3 ea                	shr    edx,cl
c001f929:	09 da                	or     edx,ebx
c001f92b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f92f:	89 f1                	mov    ecx,esi
c001f931:	d3 e7                	shl    edi,cl
c001f933:	89 eb                	mov    ebx,ebp
c001f935:	88 c1                	mov    cl,al
c001f937:	d3 eb                	shr    ebx,cl
c001f939:	89 f1                	mov    ecx,esi
c001f93b:	d3 e5                	shl    ebp,cl
c001f93d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f940:	88 c1                	mov    cl,al
c001f942:	d3 ea                	shr    edx,cl
c001f944:	09 d5                	or     ebp,edx
c001f946:	89 e8                	mov    eax,ebp
c001f948:	89 da                	mov    edx,ebx
c001f94a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f94e:	89 d3                	mov    ebx,edx
c001f950:	89 c5                	mov    ebp,eax
c001f952:	f7 e7                	mul    edi
c001f954:	39 d3                	cmp    ebx,edx
c001f956:	72 18                	jb     c001f970 <__divdi3+0x138>
c001f958:	74 0a                	je     c001f964 <__divdi3+0x12c>
c001f95a:	89 e9                	mov    ecx,ebp
c001f95c:	31 f6                	xor    esi,esi
c001f95e:	e9 2d ff ff ff       	jmp    c001f890 <__divdi3+0x58>
c001f963:	90                   	nop
c001f964:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f967:	89 f1                	mov    ecx,esi
c001f969:	d3 e7                	shl    edi,cl
c001f96b:	39 c7                	cmp    edi,eax
c001f96d:	73 eb                	jae    c001f95a <__divdi3+0x122>
c001f96f:	90                   	nop
c001f970:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f973:	31 f6                	xor    esi,esi
c001f975:	e9 16 ff ff ff       	jmp    c001f890 <__divdi3+0x58>
c001f97a:	66 90                	xchg   ax,ax
c001f97c:	31 c9                	xor    ecx,ecx
c001f97e:	e9 0d ff ff ff       	jmp    c001f890 <__divdi3+0x58>
c001f983:	90                   	nop

c001f984 <__moddi3>:
c001f984:	55                   	push   ebp
c001f985:	57                   	push   edi
c001f986:	56                   	push   esi
c001f987:	53                   	push   ebx
c001f988:	83 ec 2c             	sub    esp,0x2c
c001f98b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f98f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f993:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f997:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f99b:	85 db                	test   ebx,ebx
c001f99d:	0f 88 85 00 00 00    	js     c001fa28 <__moddi3+0xa4>
c001f9a3:	89 de                	mov    esi,ebx
c001f9a5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f9ad:	89 d7                	mov    edi,edx
c001f9af:	85 d2                	test   edx,edx
c001f9b1:	79 09                	jns    c001f9bc <__moddi3+0x38>
c001f9b3:	f7 d8                	neg    eax
c001f9b5:	83 d2 00             	adc    edx,0x0
c001f9b8:	f7 da                	neg    edx
c001f9ba:	89 d7                	mov    edi,edx
c001f9bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9c0:	89 cd                	mov    ebp,ecx
c001f9c2:	85 ff                	test   edi,edi
c001f9c4:	75 52                	jne    c001fa18 <__moddi3+0x94>
c001f9c6:	89 c3                	mov    ebx,eax
c001f9c8:	39 f0                	cmp    eax,esi
c001f9ca:	76 24                	jbe    c001f9f0 <__moddi3+0x6c>
c001f9cc:	89 c8                	mov    eax,ecx
c001f9ce:	89 f2                	mov    edx,esi
c001f9d0:	f7 f3                	div    ebx
c001f9d2:	89 d6                	mov    esi,edx
c001f9d4:	89 f0                	mov    eax,esi
c001f9d6:	31 d2                	xor    edx,edx
c001f9d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f9dc:	85 c9                	test   ecx,ecx
c001f9de:	74 07                	je     c001f9e7 <__moddi3+0x63>
c001f9e0:	f7 d8                	neg    eax
c001f9e2:	83 d2 00             	adc    edx,0x0
c001f9e5:	f7 da                	neg    edx
c001f9e7:	83 c4 2c             	add    esp,0x2c
c001f9ea:	5b                   	pop    ebx
c001f9eb:	5e                   	pop    esi
c001f9ec:	5f                   	pop    edi
c001f9ed:	5d                   	pop    ebp
c001f9ee:	c3                   	ret    
c001f9ef:	90                   	nop
c001f9f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9f4:	85 db                	test   ebx,ebx
c001f9f6:	75 0d                	jne    c001fa05 <__moddi3+0x81>
c001f9f8:	b8 01 00 00 00       	mov    eax,0x1
c001f9fd:	31 d2                	xor    edx,edx
c001f9ff:	f7 f7                	div    edi
c001fa01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa05:	89 f0                	mov    eax,esi
c001fa07:	31 d2                	xor    edx,edx
c001fa09:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa0d:	f7 f7                	div    edi
c001fa0f:	89 e8                	mov    eax,ebp
c001fa11:	f7 f7                	div    edi
c001fa13:	89 d6                	mov    esi,edx
c001fa15:	eb bd                	jmp    c001f9d4 <__moddi3+0x50>
c001fa17:	90                   	nop
c001fa18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa1c:	39 f7                	cmp    edi,esi
c001fa1e:	76 20                	jbe    c001fa40 <__moddi3+0xbc>
c001fa20:	89 c8                	mov    eax,ecx
c001fa22:	89 f2                	mov    edx,esi
c001fa24:	eb b2                	jmp    c001f9d8 <__moddi3+0x54>
c001fa26:	66 90                	xchg   ax,ax
c001fa28:	f7 d9                	neg    ecx
c001fa2a:	83 d3 00             	adc    ebx,0x0
c001fa2d:	f7 db                	neg    ebx
c001fa2f:	89 de                	mov    esi,ebx
c001fa31:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001fa39:	e9 6f ff ff ff       	jmp    c001f9ad <__moddi3+0x29>
c001fa3e:	66 90                	xchg   ax,ax
c001fa40:	0f bd c7             	bsr    eax,edi
c001fa43:	83 f0 1f             	xor    eax,0x1f
c001fa46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fa4a:	75 24                	jne    c001fa70 <__moddi3+0xec>
c001fa4c:	39 f7                	cmp    edi,esi
c001fa4e:	72 06                	jb     c001fa56 <__moddi3+0xd2>
c001fa50:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001fa54:	77 0c                	ja     c001fa62 <__moddi3+0xde>
c001fa56:	89 e9                	mov    ecx,ebp
c001fa58:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001fa5c:	19 fe                	sbb    esi,edi
c001fa5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001fa62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa66:	89 f2                	mov    edx,esi
c001fa68:	e9 6b ff ff ff       	jmp    c001f9d8 <__moddi3+0x54>
c001fa6d:	8d 76 00             	lea    esi,[esi+0x0]
c001fa70:	b8 20 00 00 00       	mov    eax,0x20
c001fa75:	89 c2                	mov    edx,eax
c001fa77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa7b:	29 da                	sub    edx,ebx
c001fa7d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fa81:	88 d9                	mov    cl,bl
c001fa83:	d3 e7                	shl    edi,cl
c001fa85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa89:	88 d1                	mov    cl,dl
c001fa8b:	d3 e8                	shr    eax,cl
c001fa8d:	09 c7                	or     edi,eax
c001fa8f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fa93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa97:	89 d8                	mov    eax,ebx
c001fa99:	88 d9                	mov    cl,bl
c001fa9b:	d3 e7                	shl    edi,cl
c001fa9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001faa1:	89 f3                	mov    ebx,esi
c001faa3:	88 d1                	mov    cl,dl
c001faa5:	d3 eb                	shr    ebx,cl
c001faa7:	89 c7                	mov    edi,eax
c001faa9:	88 c1                	mov    cl,al
c001faab:	d3 e6                	shl    esi,cl
c001faad:	89 e8                	mov    eax,ebp
c001faaf:	88 d1                	mov    cl,dl
c001fab1:	d3 e8                	shr    eax,cl
c001fab3:	09 f0                	or     eax,esi
c001fab5:	89 f9                	mov    ecx,edi
c001fab7:	d3 e5                	shl    ebp,cl
c001fab9:	89 da                	mov    edx,ebx
c001fabb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fabf:	89 d3                	mov    ebx,edx
c001fac1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fac5:	89 c6                	mov    esi,eax
c001fac7:	89 d1                	mov    ecx,edx
c001fac9:	39 d3                	cmp    ebx,edx
c001facb:	72 27                	jb     c001faf4 <__moddi3+0x170>
c001facd:	74 21                	je     c001faf0 <__moddi3+0x16c>
c001facf:	29 f5                	sub    ebp,esi
c001fad1:	19 cb                	sbb    ebx,ecx
c001fad3:	89 de                	mov    esi,ebx
c001fad5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fad9:	d3 e6                	shl    esi,cl
c001fadb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fadf:	89 f9                	mov    ecx,edi
c001fae1:	d3 ed                	shr    ebp,cl
c001fae3:	09 ee                	or     esi,ebp
c001fae5:	89 f0                	mov    eax,esi
c001fae7:	d3 eb                	shr    ebx,cl
c001fae9:	89 da                	mov    edx,ebx
c001faeb:	e9 e8 fe ff ff       	jmp    c001f9d8 <__moddi3+0x54>
c001faf0:	39 c5                	cmp    ebp,eax
c001faf2:	73 db                	jae    c001facf <__moddi3+0x14b>
c001faf4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001faf8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fafc:	89 d1                	mov    ecx,edx
c001fafe:	89 c6                	mov    esi,eax
c001fb00:	eb cd                	jmp    c001facf <__moddi3+0x14b>
c001fb02:	66 90                	xchg   ax,ax

c001fb04 <__udivdi3>:
c001fb04:	55                   	push   ebp
c001fb05:	57                   	push   edi
c001fb06:	56                   	push   esi
c001fb07:	53                   	push   ebx
c001fb08:	83 ec 1c             	sub    esp,0x1c
c001fb0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fb0f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fb13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fb17:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fb1b:	85 d2                	test   edx,edx
c001fb1d:	75 41                	jne    c001fb60 <__udivdi3+0x5c>
c001fb1f:	39 f7                	cmp    edi,esi
c001fb21:	76 15                	jbe    c001fb38 <__udivdi3+0x34>
c001fb23:	89 e8                	mov    eax,ebp
c001fb25:	89 f2                	mov    edx,esi
c001fb27:	f7 f7                	div    edi
c001fb29:	31 db                	xor    ebx,ebx
c001fb2b:	89 da                	mov    edx,ebx
c001fb2d:	83 c4 1c             	add    esp,0x1c
c001fb30:	5b                   	pop    ebx
c001fb31:	5e                   	pop    esi
c001fb32:	5f                   	pop    edi
c001fb33:	5d                   	pop    ebp
c001fb34:	c3                   	ret    
c001fb35:	8d 76 00             	lea    esi,[esi+0x0]
c001fb38:	89 f9                	mov    ecx,edi
c001fb3a:	85 ff                	test   edi,edi
c001fb3c:	75 0b                	jne    c001fb49 <__udivdi3+0x45>
c001fb3e:	b8 01 00 00 00       	mov    eax,0x1
c001fb43:	31 d2                	xor    edx,edx
c001fb45:	f7 f7                	div    edi
c001fb47:	89 c1                	mov    ecx,eax
c001fb49:	31 d2                	xor    edx,edx
c001fb4b:	89 f0                	mov    eax,esi
c001fb4d:	f7 f1                	div    ecx
c001fb4f:	89 c3                	mov    ebx,eax
c001fb51:	89 e8                	mov    eax,ebp
c001fb53:	f7 f1                	div    ecx
c001fb55:	89 da                	mov    edx,ebx
c001fb57:	83 c4 1c             	add    esp,0x1c
c001fb5a:	5b                   	pop    ebx
c001fb5b:	5e                   	pop    esi
c001fb5c:	5f                   	pop    edi
c001fb5d:	5d                   	pop    ebp
c001fb5e:	c3                   	ret    
c001fb5f:	90                   	nop
c001fb60:	39 f2                	cmp    edx,esi
c001fb62:	77 1c                	ja     c001fb80 <__udivdi3+0x7c>
c001fb64:	0f bd da             	bsr    ebx,edx
c001fb67:	83 f3 1f             	xor    ebx,0x1f
c001fb6a:	75 24                	jne    c001fb90 <__udivdi3+0x8c>
c001fb6c:	39 f2                	cmp    edx,esi
c001fb6e:	72 08                	jb     c001fb78 <__udivdi3+0x74>
c001fb70:	39 ef                	cmp    edi,ebp
c001fb72:	0f 87 84 00 00 00    	ja     c001fbfc <__udivdi3+0xf8>
c001fb78:	b8 01 00 00 00       	mov    eax,0x1
c001fb7d:	eb ac                	jmp    c001fb2b <__udivdi3+0x27>
c001fb7f:	90                   	nop
c001fb80:	31 db                	xor    ebx,ebx
c001fb82:	31 c0                	xor    eax,eax
c001fb84:	89 da                	mov    edx,ebx
c001fb86:	83 c4 1c             	add    esp,0x1c
c001fb89:	5b                   	pop    ebx
c001fb8a:	5e                   	pop    esi
c001fb8b:	5f                   	pop    edi
c001fb8c:	5d                   	pop    ebp
c001fb8d:	c3                   	ret    
c001fb8e:	66 90                	xchg   ax,ax
c001fb90:	b8 20 00 00 00       	mov    eax,0x20
c001fb95:	29 d8                	sub    eax,ebx
c001fb97:	88 d9                	mov    cl,bl
c001fb99:	d3 e2                	shl    edx,cl
c001fb9b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb9f:	89 fa                	mov    edx,edi
c001fba1:	88 c1                	mov    cl,al
c001fba3:	d3 ea                	shr    edx,cl
c001fba5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fba9:	09 d1                	or     ecx,edx
c001fbab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fbaf:	88 d9                	mov    cl,bl
c001fbb1:	d3 e7                	shl    edi,cl
c001fbb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fbb7:	89 f7                	mov    edi,esi
c001fbb9:	88 c1                	mov    cl,al
c001fbbb:	d3 ef                	shr    edi,cl
c001fbbd:	88 d9                	mov    cl,bl
c001fbbf:	d3 e6                	shl    esi,cl
c001fbc1:	89 ea                	mov    edx,ebp
c001fbc3:	88 c1                	mov    cl,al
c001fbc5:	d3 ea                	shr    edx,cl
c001fbc7:	09 d6                	or     esi,edx
c001fbc9:	89 f0                	mov    eax,esi
c001fbcb:	89 fa                	mov    edx,edi
c001fbcd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fbd1:	89 d7                	mov    edi,edx
c001fbd3:	89 c6                	mov    esi,eax
c001fbd5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fbd9:	39 d7                	cmp    edi,edx
c001fbdb:	72 13                	jb     c001fbf0 <__udivdi3+0xec>
c001fbdd:	74 09                	je     c001fbe8 <__udivdi3+0xe4>
c001fbdf:	89 f0                	mov    eax,esi
c001fbe1:	31 db                	xor    ebx,ebx
c001fbe3:	e9 43 ff ff ff       	jmp    c001fb2b <__udivdi3+0x27>
c001fbe8:	88 d9                	mov    cl,bl
c001fbea:	d3 e5                	shl    ebp,cl
c001fbec:	39 c5                	cmp    ebp,eax
c001fbee:	73 ef                	jae    c001fbdf <__udivdi3+0xdb>
c001fbf0:	8d 46 ff             	lea    eax,[esi-0x1]
c001fbf3:	31 db                	xor    ebx,ebx
c001fbf5:	e9 31 ff ff ff       	jmp    c001fb2b <__udivdi3+0x27>
c001fbfa:	66 90                	xchg   ax,ax
c001fbfc:	31 c0                	xor    eax,eax
c001fbfe:	e9 28 ff ff ff       	jmp    c001fb2b <__udivdi3+0x27>
c001fc03:	90                   	nop

c001fc04 <__umoddi3>:
c001fc04:	55                   	push   ebp
c001fc05:	57                   	push   edi
c001fc06:	56                   	push   esi
c001fc07:	53                   	push   ebx
c001fc08:	83 ec 1c             	sub    esp,0x1c
c001fc0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fc0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fc13:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fc17:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fc1b:	89 da                	mov    edx,ebx
c001fc1d:	85 c0                	test   eax,eax
c001fc1f:	75 37                	jne    c001fc58 <__umoddi3+0x54>
c001fc21:	39 df                	cmp    edi,ebx
c001fc23:	76 13                	jbe    c001fc38 <__umoddi3+0x34>
c001fc25:	89 f0                	mov    eax,esi
c001fc27:	f7 f7                	div    edi
c001fc29:	89 d0                	mov    eax,edx
c001fc2b:	31 d2                	xor    edx,edx
c001fc2d:	83 c4 1c             	add    esp,0x1c
c001fc30:	5b                   	pop    ebx
c001fc31:	5e                   	pop    esi
c001fc32:	5f                   	pop    edi
c001fc33:	5d                   	pop    ebp
c001fc34:	c3                   	ret    
c001fc35:	8d 76 00             	lea    esi,[esi+0x0]
c001fc38:	89 fd                	mov    ebp,edi
c001fc3a:	85 ff                	test   edi,edi
c001fc3c:	75 0b                	jne    c001fc49 <__umoddi3+0x45>
c001fc3e:	b8 01 00 00 00       	mov    eax,0x1
c001fc43:	31 d2                	xor    edx,edx
c001fc45:	f7 f7                	div    edi
c001fc47:	89 c5                	mov    ebp,eax
c001fc49:	89 d8                	mov    eax,ebx
c001fc4b:	31 d2                	xor    edx,edx
c001fc4d:	f7 f5                	div    ebp
c001fc4f:	89 f0                	mov    eax,esi
c001fc51:	f7 f5                	div    ebp
c001fc53:	89 d0                	mov    eax,edx
c001fc55:	eb d4                	jmp    c001fc2b <__umoddi3+0x27>
c001fc57:	90                   	nop
c001fc58:	89 f1                	mov    ecx,esi
c001fc5a:	39 d8                	cmp    eax,ebx
c001fc5c:	76 0a                	jbe    c001fc68 <__umoddi3+0x64>
c001fc5e:	89 f0                	mov    eax,esi
c001fc60:	83 c4 1c             	add    esp,0x1c
c001fc63:	5b                   	pop    ebx
c001fc64:	5e                   	pop    esi
c001fc65:	5f                   	pop    edi
c001fc66:	5d                   	pop    ebp
c001fc67:	c3                   	ret    
c001fc68:	0f bd e8             	bsr    ebp,eax
c001fc6b:	83 f5 1f             	xor    ebp,0x1f
c001fc6e:	75 1c                	jne    c001fc8c <__umoddi3+0x88>
c001fc70:	39 d8                	cmp    eax,ebx
c001fc72:	72 04                	jb     c001fc78 <__umoddi3+0x74>
c001fc74:	39 f7                	cmp    edi,esi
c001fc76:	77 08                	ja     c001fc80 <__umoddi3+0x7c>
c001fc78:	89 da                	mov    edx,ebx
c001fc7a:	29 fe                	sub    esi,edi
c001fc7c:	19 c2                	sbb    edx,eax
c001fc7e:	89 f1                	mov    ecx,esi
c001fc80:	89 c8                	mov    eax,ecx
c001fc82:	83 c4 1c             	add    esp,0x1c
c001fc85:	5b                   	pop    ebx
c001fc86:	5e                   	pop    esi
c001fc87:	5f                   	pop    edi
c001fc88:	5d                   	pop    ebp
c001fc89:	c3                   	ret    
c001fc8a:	66 90                	xchg   ax,ax
c001fc8c:	ba 20 00 00 00       	mov    edx,0x20
c001fc91:	29 ea                	sub    edx,ebp
c001fc93:	89 e9                	mov    ecx,ebp
c001fc95:	d3 e0                	shl    eax,cl
c001fc97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc9b:	89 f8                	mov    eax,edi
c001fc9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fca1:	88 d1                	mov    cl,dl
c001fca3:	d3 e8                	shr    eax,cl
c001fca5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fca9:	09 c1                	or     ecx,eax
c001fcab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fcaf:	89 e9                	mov    ecx,ebp
c001fcb1:	d3 e7                	shl    edi,cl
c001fcb3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fcb7:	89 d8                	mov    eax,ebx
c001fcb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fcbd:	88 d1                	mov    cl,dl
c001fcbf:	d3 e8                	shr    eax,cl
c001fcc1:	89 c7                	mov    edi,eax
c001fcc3:	89 e9                	mov    ecx,ebp
c001fcc5:	d3 e3                	shl    ebx,cl
c001fcc7:	89 f0                	mov    eax,esi
c001fcc9:	88 d1                	mov    cl,dl
c001fccb:	d3 e8                	shr    eax,cl
c001fccd:	09 d8                	or     eax,ebx
c001fccf:	89 e9                	mov    ecx,ebp
c001fcd1:	d3 e6                	shl    esi,cl
c001fcd3:	89 f3                	mov    ebx,esi
c001fcd5:	89 fa                	mov    edx,edi
c001fcd7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fcdb:	89 d1                	mov    ecx,edx
c001fcdd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fce1:	89 c6                	mov    esi,eax
c001fce3:	89 d7                	mov    edi,edx
c001fce5:	39 d1                	cmp    ecx,edx
c001fce7:	72 27                	jb     c001fd10 <__umoddi3+0x10c>
c001fce9:	74 21                	je     c001fd0c <__umoddi3+0x108>
c001fceb:	89 ca                	mov    edx,ecx
c001fced:	29 f3                	sub    ebx,esi
c001fcef:	19 fa                	sbb    edx,edi
c001fcf1:	89 d0                	mov    eax,edx
c001fcf3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fcf7:	d3 e0                	shl    eax,cl
c001fcf9:	89 e9                	mov    ecx,ebp
c001fcfb:	d3 eb                	shr    ebx,cl
c001fcfd:	09 d8                	or     eax,ebx
c001fcff:	d3 ea                	shr    edx,cl
c001fd01:	83 c4 1c             	add    esp,0x1c
c001fd04:	5b                   	pop    ebx
c001fd05:	5e                   	pop    esi
c001fd06:	5f                   	pop    edi
c001fd07:	5d                   	pop    ebp
c001fd08:	c3                   	ret    
c001fd09:	8d 76 00             	lea    esi,[esi+0x0]
c001fd0c:	39 c3                	cmp    ebx,eax
c001fd0e:	73 db                	jae    c001fceb <__umoddi3+0xe7>
c001fd10:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fd14:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fd18:	89 d7                	mov    edi,edx
c001fd1a:	89 c6                	mov    esi,eax
c001fd1c:	eb cd                	jmp    c001fceb <__umoddi3+0xe7>

Disassembly of section .init:

c001fd1e <_init>:
c001fd1e:	55                   	push   ebp
c001fd1f:	89 e5                	mov    ebp,esp
c001fd21:	e8 ce 03 fe ff       	call   c00000f4 <frame_dummy>
c001fd26:	e8 e5 fa ff ff       	call   c001f810 <__do_global_ctors_aux>
c001fd2b:	5d                   	pop    ebp
c001fd2c:	c3                   	ret    

Disassembly of section .fini:

c001fd2d <_fini>:
c001fd2d:	55                   	push   ebp
c001fd2e:	89 e5                	mov    ebp,esp
c001fd30:	e8 4f 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fd35:	5d                   	pop    ebp
c001fd36:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fd38 <DriverlessDevice::~DriverlessDevice()>:
c001fd38:	ba c0 16 02 c0       	mov    edx,0xc00216c0
c001fd3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd41:	89 10                	mov    DWORD PTR [eax],edx
c001fd43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd47:	50                   	push   eax
c001fd48:	e8 f7 91 fe ff       	call   c0008f44 <Device::~Device()>
c001fd4d:	83 c4 04             	add    esp,0x4
c001fd50:	90                   	nop
c001fd51:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fd52 <DriverlessDevice::~DriverlessDevice()>:
c001fd52:	83 ec 0c             	sub    esp,0xc
c001fd55:	83 ec 0c             	sub    esp,0xc
c001fd58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd5c:	e8 d7 ff ff ff       	call   c001fd38 <DriverlessDevice::~DriverlessDevice()>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	83 ec 08             	sub    esp,0x8
c001fd67:	68 58 01 00 00       	push   0x158
c001fd6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd70:	e8 8b c9 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c001fd75:	83 c4 10             	add    esp,0x10
c001fd78:	83 c4 0c             	add    esp,0xc
c001fd7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd7c <LinkedList<Device>::addElement(Device*)>:
c001fd7c:	83 ec 0c             	sub    esp,0xc
c001fd7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd84:	75 10                	jne    c001fd96 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	68 54 16 02 c0       	push   0xc0021654
c001fd8e:	e8 2f ef fe ff       	call   c000ecc2 <KePanic(char const*)>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd9c:	85 c0                	test   eax,eax
c001fd9e:	74 3a                	je     c001fdda <LinkedList<Device>::addElement(Device*)+0x5e>
c001fda0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fda7:	85 c0                	test   eax,eax
c001fda9:	74 2f                	je     c001fdda <LinkedList<Device>::addElement(Device*)+0x5e>
c001fdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdb6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdce:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fdd8:	eb 68                	jmp    c001fe42 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdde:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde0:	85 c0                	test   eax,eax
c001fde2:	75 4e                	jne    c001fe32 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fdeb:	85 c0                	test   eax,eax
c001fded:	75 43                	jne    c001fe32 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf7:	89 10                	mov    DWORD PTR [eax],edx
c001fdf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe01:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe0b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fe15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe1c:	85 c0                	test   eax,eax
c001fe1e:	74 22                	je     c001fe42 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	68 76 16 02 c0       	push   0xc0021676
c001fe28:	e8 95 ee fe ff       	call   c000ecc2 <KePanic(char const*)>
c001fe2d:	83 c4 10             	add    esp,0x10
c001fe30:	eb 10                	jmp    c001fe42 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fe32:	83 ec 0c             	sub    esp,0xc
c001fe35:	68 80 16 02 c0       	push   0xc0021680
c001fe3a:	e8 83 ee fe ff       	call   c000ecc2 <KePanic(char const*)>
c001fe3f:	83 c4 10             	add    esp,0x10
c001fe42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe49:	8d 50 01             	lea    edx,[eax+0x1]
c001fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe53:	90                   	nop
c001fe54:	83 c4 0c             	add    esp,0xc
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fe58 <LinkedList<Device>::LinkedList()>:
c001fe58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe98:	90                   	nop
c001fe99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe9c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea2:	85 c0                	test   eax,eax
c001fea4:	75 0e                	jne    c001feb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fead:	85 c0                	test   eax,eax
c001feaf:	75 03                	jne    c001feb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001feb1:	b0 01                	mov    al,0x1
c001feb3:	c3                   	ret    
c001feb4:	b0 00                	mov    al,0x0
c001feb6:	90                   	nop
c001feb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001feb8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001feb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001febc:	8b 00                	mov    eax,DWORD PTR [eax]
c001febe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fec0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec7:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec9:	85 c0                	test   eax,eax
c001fecb:	75 17                	jne    c001fee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fecd:	83 ec 0c             	sub    esp,0xc
c001fed0:	68 f0 18 02 c0       	push   0xc00218f0
c001fed5:	e8 e8 ed fe ff       	call   c000ecc2 <KePanic(char const*)>
c001feda:	83 c4 10             	add    esp,0x10
c001fedd:	e9 96 00 00 00       	jmp    c001ff78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fee2:	66 90                	xchg   ax,ax
c001fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feeb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001feee:	85 c0                	test   eax,eax
c001fef0:	0f 95 c0             	setne  al
c001fef3:	0f b6 c0             	movzx  eax,al
c001fef6:	85 c0                	test   eax,eax
c001fef8:	74 12                	je     c001ff0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	68 3b 19 02 c0       	push   0xc002193b
c001ff02:	e8 bb ed fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	66 90                	xchg   ax,ax
c001ff0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff12:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ff15:	85 c0                	test   eax,eax
c001ff17:	0f 94 c0             	sete   al
c001ff1a:	0f b6 c0             	movzx  eax,al
c001ff1d:	85 c0                	test   eax,eax
c001ff1f:	74 33                	je     c001ff54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ff21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff25:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff3d:	83 f8 01             	cmp    eax,0x1
c001ff40:	74 22                	je     c001ff64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff42:	83 ec 0c             	sub    esp,0xc
c001ff45:	68 14 19 02 c0       	push   0xc0021914
c001ff4a:	e8 73 ed fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ff4f:	83 c4 10             	add    esp,0x10
c001ff52:	eb 10                	jmp    c001ff64 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff5a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ff5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff61:	89 10                	mov    DWORD PTR [eax],edx
c001ff63:	90                   	nop
c001ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff6b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff75:	8d 76 00             	lea    esi,[esi+0x0]
c001ff78:	83 c4 0c             	add    esp,0xc
c001ff7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff84:	75 12                	jne    c001ff98 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff86:	83 ec 0c             	sub    esp,0xc
c001ff89:	68 54 16 02 c0       	push   0xc0021654
c001ff8e:	e8 2f ed fe ff       	call   c000ecc2 <KePanic(char const*)>
c001ff93:	83 c4 10             	add    esp,0x10
c001ff96:	66 90                	xchg   ax,ax
c001ff98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff9e:	85 c0                	test   eax,eax
c001ffa0:	74 36                	je     c001ffd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffa9:	85 c0                	test   eax,eax
c001ffab:	74 2b                	je     c001ffd8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ffad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffb8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ffbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ffc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffcd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffd4:	eb 6a                	jmp    c0020040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffd6:	66 90                	xchg   ax,ax
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffde:	85 c0                	test   eax,eax
c001ffe0:	75 4e                	jne    c0020030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ffe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ffe9:	85 c0                	test   eax,eax
c001ffeb:	75 43                	jne    c0020030 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ffed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fff5:	89 10                	mov    DWORD PTR [eax],edx
c001fff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ffff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020009:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020014:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020017:	85 c0                	test   eax,eax
c0020019:	74 25                	je     c0020040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002001b:	83 ec 0c             	sub    esp,0xc
c002001e:	68 76 16 02 c0       	push   0xc0021676
c0020023:	e8 9a ec fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020028:	83 c4 10             	add    esp,0x10
c002002b:	eb 13                	jmp    c0020040 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002002d:	8d 76 00             	lea    esi,[esi+0x0]
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	68 80 16 02 c0       	push   0xc0021680
c0020038:	e8 85 ec fe ff       	call   c000ecc2 <KePanic(char const*)>
c002003d:	83 c4 10             	add    esp,0x10
c0020040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020044:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020047:	8d 50 01             	lea    edx,[eax+0x1]
c002004a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002004e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020051:	90                   	nop
c0020052:	83 c4 0c             	add    esp,0xc
c0020055:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0020058 <ACPI::~ACPI()>:
c0020058:	83 ec 0c             	sub    esp,0xc
c002005b:	ba 8c 1c 02 c0       	mov    edx,0xc0021c8c
c0020060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020064:	89 10                	mov    DWORD PTR [eax],edx
c0020066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006a:	83 ec 0c             	sub    esp,0xc
c002006d:	50                   	push   eax
c002006e:	e8 d1 8e fe ff       	call   c0008f44 <Device::~Device()>
c0020073:	83 c4 10             	add    esp,0x10
c0020076:	90                   	nop
c0020077:	83 c4 0c             	add    esp,0xc
c002007a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002007c <ACPI::~ACPI()>:
c002007c:	83 ec 0c             	sub    esp,0xc
c002007f:	83 ec 0c             	sub    esp,0xc
c0020082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020086:	e8 cd ff ff ff       	call   c0020058 <ACPI::~ACPI()>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	83 ec 08             	sub    esp,0x8
c0020091:	68 64 12 00 00       	push   0x1264
c0020096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002009a:	e8 61 c6 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002009f:	83 c4 10             	add    esp,0x10
c00200a2:	83 c4 0c             	add    esp,0xc
c00200a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00200a8 <LinkedList<Device>::~LinkedList()>:
c00200a8:	90                   	nop
c00200a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00200ac <LinkedList<Device>::isEmpty()>:
c00200ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200b2:	85 c0                	test   eax,eax
c00200b4:	75 0e                	jne    c00200c4 <LinkedList<Device>::isEmpty()+0x18>
c00200b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200bd:	85 c0                	test   eax,eax
c00200bf:	75 03                	jne    c00200c4 <LinkedList<Device>::isEmpty()+0x18>
c00200c1:	b0 01                	mov    al,0x1
c00200c3:	c3                   	ret    
c00200c4:	b0 00                	mov    al,0x0
c00200c6:	90                   	nop
c00200c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00200c8 <LinkedList<Device>::getFirstElement()>:
c00200c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00200cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00200ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00200d0 <LinkedList<Device>::removeFirst()>:
c00200d0:	83 ec 0c             	sub    esp,0xc
c00200d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00200d9:	85 c0                	test   eax,eax
c00200db:	75 17                	jne    c00200f4 <LinkedList<Device>::removeFirst()+0x24>
c00200dd:	83 ec 0c             	sub    esp,0xc
c00200e0:	68 f0 18 02 c0       	push   0xc00218f0
c00200e5:	e8 d8 eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c00200ea:	83 c4 10             	add    esp,0x10
c00200ed:	e9 92 00 00 00       	jmp    c0020184 <LinkedList<Device>::removeFirst()+0xb4>
c00200f2:	66 90                	xchg   ax,ax
c00200f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00200fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020101:	85 c0                	test   eax,eax
c0020103:	74 13                	je     c0020118 <LinkedList<Device>::removeFirst()+0x48>
c0020105:	83 ec 0c             	sub    esp,0xc
c0020108:	68 3b 19 02 c0       	push   0xc002193b
c002010d:	e8 b0 eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020112:	83 c4 10             	add    esp,0x10
c0020115:	8d 76 00             	lea    esi,[esi+0x0]
c0020118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011c:	8b 00                	mov    eax,DWORD PTR [eax]
c002011e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020124:	85 c0                	test   eax,eax
c0020126:	75 34                	jne    c002015c <LinkedList<Device>::removeFirst()+0x8c>
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020136:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020141:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020144:	83 f8 01             	cmp    eax,0x1
c0020147:	74 27                	je     c0020170 <LinkedList<Device>::removeFirst()+0xa0>
c0020149:	83 ec 0c             	sub    esp,0xc
c002014c:	68 14 19 02 c0       	push   0xc0021914
c0020151:	e8 6c eb fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020156:	83 c4 10             	add    esp,0x10
c0020159:	eb 15                	jmp    c0020170 <LinkedList<Device>::removeFirst()+0xa0>
c002015b:	90                   	nop
c002015c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020160:	8b 00                	mov    eax,DWORD PTR [eax]
c0020162:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	89 10                	mov    DWORD PTR [eax],edx
c002016e:	66 90                	xchg   ax,ax
c0020170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020174:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020177:	8d 50 ff             	lea    edx,[eax-0x1]
c002017a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020181:	8d 76 00             	lea    esi,[esi+0x0]
c0020184:	83 c4 0c             	add    esp,0xc
c0020187:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020188 <Computer::~Computer()>:
c0020188:	83 ec 0c             	sub    esp,0xc
c002018b:	ba 2c 1f 02 c0       	mov    edx,0xc0021f2c
c0020190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020194:	89 10                	mov    DWORD PTR [eax],edx
c0020196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019a:	83 ec 0c             	sub    esp,0xc
c002019d:	50                   	push   eax
c002019e:	e8 a1 8d fe ff       	call   c0008f44 <Device::~Device()>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	90                   	nop
c00201a7:	83 c4 0c             	add    esp,0xc
c00201aa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00201ac <Computer::~Computer()>:
c00201ac:	83 ec 0c             	sub    esp,0xc
c00201af:	83 ec 0c             	sub    esp,0xc
c00201b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201b6:	e8 cd ff ff ff       	call   c0020188 <Computer::~Computer()>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	83 ec 08             	sub    esp,0x8
c00201c1:	68 6c 01 00 00       	push   0x16c
c00201c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ca:	e8 31 c5 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00201cf:	83 c4 10             	add    esp,0x10
c00201d2:	83 c4 0c             	add    esp,0xc
c00201d5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00201d6 <idleCommon()>:
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	fa                   	cli    
c00201da:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c00201e0:	e8 bb 52 ff ff       	call   c00154a0 <schedule()>
c00201e5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00201ec:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00201f3:	75 01                	jne    c00201f6 <idleCommon()+0x20>
c00201f5:	fb                   	sti    
c00201f6:	83 c4 0c             	add    esp,0xc
c00201f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00201fa <LinkedList<UnixFile>::~LinkedList()>:
c00201fa:	90                   	nop
c00201fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00201fc <LinkedList<UnixFile>::LinkedList()>:
c00201fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020200:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002020a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020215:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002021c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020220:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002022a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020235:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002023c:	90                   	nop
c002023d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002023e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020246:	75 10                	jne    c0020258 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0020248:	83 ec 0c             	sub    esp,0xc
c002024b:	68 54 16 02 c0       	push   0xc0021654
c0020250:	e8 6d ea fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020255:	83 c4 10             	add    esp,0x10
c0020258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025c:	8b 00                	mov    eax,DWORD PTR [eax]
c002025e:	85 c0                	test   eax,eax
c0020260:	74 34                	je     c0020296 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0020262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020269:	85 c0                	test   eax,eax
c002026b:	74 29                	je     c0020296 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002026d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020271:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020274:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020278:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002027b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020283:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002028d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020294:	eb 65                	jmp    c00202fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002029a:	8b 00                	mov    eax,DWORD PTR [eax]
c002029c:	85 c0                	test   eax,eax
c002029e:	75 4b                	jne    c00202eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202a7:	85 c0                	test   eax,eax
c00202a9:	75 40                	jne    c00202eb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00202ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202b3:	89 10                	mov    DWORD PTR [eax],edx
c00202b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00202c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00202ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202d5:	85 c0                	test   eax,eax
c00202d7:	74 22                	je     c00202fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202d9:	83 ec 0c             	sub    esp,0xc
c00202dc:	68 76 16 02 c0       	push   0xc0021676
c00202e1:	e8 dc e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00202e6:	83 c4 10             	add    esp,0x10
c00202e9:	eb 10                	jmp    c00202fb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00202eb:	83 ec 0c             	sub    esp,0xc
c00202ee:	68 80 16 02 c0       	push   0xc0021680
c00202f3:	e8 ca e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c00202f8:	83 c4 10             	add    esp,0x10
c00202fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020302:	8d 50 01             	lea    edx,[eax+0x1]
c0020305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020309:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002030c:	90                   	nop
c002030d:	83 c4 0c             	add    esp,0xc
c0020310:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020312 <LinkedList<UnixFile>::getFirstElement()>:
c0020312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020316:	8b 00                	mov    eax,DWORD PTR [eax]
c0020318:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002031a <LinkedList<UnixFile>::removeFirst()>:
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020321:	8b 00                	mov    eax,DWORD PTR [eax]
c0020323:	85 c0                	test   eax,eax
c0020325:	75 12                	jne    c0020339 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020327:	83 ec 0c             	sub    esp,0xc
c002032a:	68 f0 18 02 c0       	push   0xc00218f0
c002032f:	e8 8e e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020334:	83 c4 10             	add    esp,0x10
c0020337:	eb 7e                	jmp    c00203b7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020340:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020343:	85 c0                	test   eax,eax
c0020345:	74 10                	je     c0020357 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0020347:	83 ec 0c             	sub    esp,0xc
c002034a:	68 3b 19 02 c0       	push   0xc002193b
c002034f:	e8 6e e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020354:	83 c4 10             	add    esp,0x10
c0020357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035b:	8b 00                	mov    eax,DWORD PTR [eax]
c002035d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020360:	85 c0                	test   eax,eax
c0020362:	75 33                	jne    c0020397 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0020364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020368:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002036e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020372:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020380:	83 f8 01             	cmp    eax,0x1
c0020383:	74 21                	je     c00203a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	68 14 19 02 c0       	push   0xc0021914
c002038d:	e8 30 e9 fe ff       	call   c000ecc2 <KePanic(char const*)>
c0020392:	83 c4 10             	add    esp,0x10
c0020395:	eb 0f                	jmp    c00203a6 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002039b:	8b 00                	mov    eax,DWORD PTR [eax]
c002039d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00203a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a4:	89 10                	mov    DWORD PTR [eax],edx
c00203a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203ad:	8d 50 ff             	lea    edx,[eax-0x1]
c00203b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203b7:	83 c4 0c             	add    esp,0xc
c00203ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00203bc <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00203bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00203c4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00203c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00203cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00203cc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00203cc:	90                   	nop
c00203cd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00203d0 <ThreadControlBlock::ThreadControlBlock()>:
c00203d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203d4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00203db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203df:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00203e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ea:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00203f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203f5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00203fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020400:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020407:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002040b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002040f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020413:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020417:	90                   	nop
c0020418:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002041c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002041c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020420:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020426:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002042a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020435:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002043c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020440:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002044a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020455:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002045c:	90                   	nop
c002045d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002045e <CPU::~CPU()>:
c002045e:	83 ec 0c             	sub    esp,0xc
c0020461:	ba 68 30 02 c0       	mov    edx,0xc0023068
c0020466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046a:	89 10                	mov    DWORD PTR [eax],edx
c002046c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020470:	83 ec 0c             	sub    esp,0xc
c0020473:	50                   	push   eax
c0020474:	e8 cb 8a fe ff       	call   c0008f44 <Device::~Device()>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	90                   	nop
c002047d:	83 c4 0c             	add    esp,0xc
c0020480:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020482 <CPU::~CPU()>:
c0020482:	83 ec 0c             	sub    esp,0xc
c0020485:	83 ec 0c             	sub    esp,0xc
c0020488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002048c:	e8 cd ff ff ff       	call   c002045e <CPU::~CPU()>
c0020491:	83 c4 10             	add    esp,0x10
c0020494:	83 ec 08             	sub    esp,0x8
c0020497:	68 78 11 00 00       	push   0x1178
c002049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a0:	e8 5b c2 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	83 c4 0c             	add    esp,0xc
c00204ab:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00204ac <PCI::~PCI()>:
c00204ac:	83 ec 0c             	sub    esp,0xc
c00204af:	ba cc 35 02 c0       	mov    edx,0xc00235cc
c00204b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b8:	89 10                	mov    DWORD PTR [eax],edx
c00204ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204be:	83 ec 0c             	sub    esp,0xc
c00204c1:	50                   	push   eax
c00204c2:	e8 5d 84 fe ff       	call   c0008924 <Bus::~Bus()>
c00204c7:	83 c4 10             	add    esp,0x10
c00204ca:	90                   	nop
c00204cb:	83 c4 0c             	add    esp,0xc
c00204ce:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00204d0 <PCI::~PCI()>:
c00204d0:	83 ec 0c             	sub    esp,0xc
c00204d3:	83 ec 0c             	sub    esp,0xc
c00204d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204da:	e8 cd ff ff ff       	call   c00204ac <PCI::~PCI()>
c00204df:	83 c4 10             	add    esp,0x10
c00204e2:	83 ec 08             	sub    esp,0x8
c00204e5:	68 5c 01 00 00       	push   0x15c
c00204ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ee:	e8 0d c2 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00204f3:	83 c4 10             	add    esp,0x10
c00204f6:	83 c4 0c             	add    esp,0xc
c00204f9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00204fa <IDE::~IDE()>:
c00204fa:	83 ec 0c             	sub    esp,0xc
c00204fd:	ba 04 37 02 c0       	mov    edx,0xc0023704
c0020502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020506:	89 10                	mov    DWORD PTR [eax],edx
c0020508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002050c:	83 ec 0c             	sub    esp,0xc
c002050f:	50                   	push   eax
c0020510:	e8 bf 8e fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020515:	83 c4 10             	add    esp,0x10
c0020518:	90                   	nop
c0020519:	83 c4 0c             	add    esp,0xc
c002051c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002051e <IDE::~IDE()>:
c002051e:	83 ec 0c             	sub    esp,0xc
c0020521:	83 ec 0c             	sub    esp,0xc
c0020524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020528:	e8 cd ff ff ff       	call   c00204fa <IDE::~IDE()>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	83 ec 08             	sub    esp,0x8
c0020533:	68 70 02 00 00       	push   0x270
c0020538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002053c:	e8 bf c1 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	83 c4 0c             	add    esp,0xc
c0020547:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020548 <SATABus::~SATABus()>:
c0020548:	83 ec 0c             	sub    esp,0xc
c002054b:	ba 54 37 02 c0       	mov    edx,0xc0023754
c0020550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020554:	89 10                	mov    DWORD PTR [eax],edx
c0020556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055a:	83 ec 0c             	sub    esp,0xc
c002055d:	50                   	push   eax
c002055e:	e8 71 8e fe ff       	call   c00093d4 <HardDiskController::~HardDiskController()>
c0020563:	83 c4 10             	add    esp,0x10
c0020566:	90                   	nop
c0020567:	83 c4 0c             	add    esp,0xc
c002056a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002056c <SATABus::~SATABus()>:
c002056c:	83 ec 0c             	sub    esp,0xc
c002056f:	83 ec 0c             	sub    esp,0xc
c0020572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020576:	e8 cd ff ff ff       	call   c0020548 <SATABus::~SATABus()>
c002057b:	83 c4 10             	add    esp,0x10
c002057e:	83 ec 08             	sub    esp,0x8
c0020581:	68 64 01 00 00       	push   0x164
c0020586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002058a:	e8 71 c1 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002058f:	83 c4 10             	add    esp,0x10
c0020592:	83 c4 0c             	add    esp,0xc
c0020595:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020596 <ATA::~ATA()>:
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	ba 94 37 02 c0       	mov    edx,0xc0023794
c002059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a2:	89 10                	mov    DWORD PTR [eax],edx
c00205a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	50                   	push   eax
c00205ac:	e8 05 8f fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	90                   	nop
c00205b5:	83 c4 0c             	add    esp,0xc
c00205b8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00205ba <ATA::~ATA()>:
c00205ba:	83 ec 0c             	sub    esp,0xc
c00205bd:	83 ec 0c             	sub    esp,0xc
c00205c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c4:	e8 cd ff ff ff       	call   c0020596 <ATA::~ATA()>
c00205c9:	83 c4 10             	add    esp,0x10
c00205cc:	83 ec 08             	sub    esp,0x8
c00205cf:	68 7c 01 00 00       	push   0x17c
c00205d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d8:	e8 23 c1 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00205dd:	83 c4 10             	add    esp,0x10
c00205e0:	83 c4 0c             	add    esp,0xc
c00205e3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00205e4 <ATAPI::~ATAPI()>:
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c00205ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f0:	89 10                	mov    DWORD PTR [eax],edx
c00205f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205f6:	83 ec 0c             	sub    esp,0xc
c00205f9:	50                   	push   eax
c00205fa:	e8 b7 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c00205ff:	83 c4 10             	add    esp,0x10
c0020602:	90                   	nop
c0020603:	83 c4 0c             	add    esp,0xc
c0020606:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020608 <ATAPI::~ATAPI()>:
c0020608:	83 ec 0c             	sub    esp,0xc
c002060b:	83 ec 0c             	sub    esp,0xc
c002060e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020612:	e8 cd ff ff ff       	call   c00205e4 <ATAPI::~ATAPI()>
c0020617:	83 c4 10             	add    esp,0x10
c002061a:	83 ec 08             	sub    esp,0x8
c002061d:	68 84 01 00 00       	push   0x184
c0020622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020626:	e8 d5 c0 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c002062b:	83 c4 10             	add    esp,0x10
c002062e:	83 c4 0c             	add    esp,0xc
c0020631:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020632 <SATA::~SATA()>:
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	ba 9c 38 02 c0       	mov    edx,0xc002389c
c002063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002063e:	89 10                	mov    DWORD PTR [eax],edx
c0020640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020644:	83 ec 0c             	sub    esp,0xc
c0020647:	50                   	push   eax
c0020648:	e8 69 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002064d:	83 c4 10             	add    esp,0x10
c0020650:	90                   	nop
c0020651:	83 c4 0c             	add    esp,0xc
c0020654:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020656 <SATA::~SATA()>:
c0020656:	83 ec 0c             	sub    esp,0xc
c0020659:	83 ec 0c             	sub    esp,0xc
c002065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020660:	e8 cd ff ff ff       	call   c0020632 <SATA::~SATA()>
c0020665:	83 c4 10             	add    esp,0x10
c0020668:	83 ec 08             	sub    esp,0x8
c002066b:	68 7c 01 00 00       	push   0x17c
c0020670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020674:	e8 87 c0 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020679:	83 c4 10             	add    esp,0x10
c002067c:	83 c4 0c             	add    esp,0xc
c002067f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020680 <SATAPI::~SATAPI()>:
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c0020688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068c:	89 10                	mov    DWORD PTR [eax],edx
c002068e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	50                   	push   eax
c0020696:	e8 1b 8e fe ff       	call   c00094b6 <PhysicalDisk::~PhysicalDisk()>
c002069b:	83 c4 10             	add    esp,0x10
c002069e:	90                   	nop
c002069f:	83 c4 0c             	add    esp,0xc
c00206a2:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00206a4 <SATAPI::~SATAPI()>:
c00206a4:	83 ec 0c             	sub    esp,0xc
c00206a7:	83 ec 0c             	sub    esp,0xc
c00206aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ae:	e8 cd ff ff ff       	call   c0020680 <SATAPI::~SATAPI()>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	83 ec 08             	sub    esp,0x8
c00206b9:	68 84 01 00 00       	push   0x184
c00206be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c2:	e8 39 c0 fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00206c7:	83 c4 10             	add    esp,0x10
c00206ca:	83 c4 0c             	add    esp,0xc
c00206cd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00206ce <IOAPIC::~IOAPIC()>:
c00206ce:	83 ec 0c             	sub    esp,0xc
c00206d1:	ba 20 3a 02 c0       	mov    edx,0xc0023a20
c00206d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206da:	89 10                	mov    DWORD PTR [eax],edx
c00206dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e0:	83 ec 0c             	sub    esp,0xc
c00206e3:	50                   	push   eax
c00206e4:	e8 5b 88 fe ff       	call   c0008f44 <Device::~Device()>
c00206e9:	83 c4 10             	add    esp,0x10
c00206ec:	90                   	nop
c00206ed:	83 c4 0c             	add    esp,0xc
c00206f0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00206f2 <IOAPIC::~IOAPIC()>:
c00206f2:	83 ec 0c             	sub    esp,0xc
c00206f5:	83 ec 0c             	sub    esp,0xc
c00206f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206fc:	e8 cd ff ff ff       	call   c00206ce <IOAPIC::~IOAPIC()>
c0020701:	83 c4 10             	add    esp,0x10
c0020704:	83 ec 08             	sub    esp,0x8
c0020707:	68 68 01 00 00       	push   0x168
c002070c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020710:	e8 eb bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020715:	83 c4 10             	add    esp,0x10
c0020718:	83 c4 0c             	add    esp,0xc
c002071b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002071c <APICTimer::~APICTimer()>:
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	ba 68 3a 02 c0       	mov    edx,0xc0023a68
c0020724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020728:	89 10                	mov    DWORD PTR [eax],edx
c002072a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002072e:	83 ec 0c             	sub    esp,0xc
c0020731:	50                   	push   eax
c0020732:	e8 81 9f fe ff       	call   c000a6b8 <Timer::~Timer()>
c0020737:	83 c4 10             	add    esp,0x10
c002073a:	90                   	nop
c002073b:	83 c4 0c             	add    esp,0xc
c002073e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020740 <APICTimer::~APICTimer()>:
c0020740:	83 ec 0c             	sub    esp,0xc
c0020743:	83 ec 0c             	sub    esp,0xc
c0020746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074a:	e8 cd ff ff ff       	call   c002071c <APICTimer::~APICTimer()>
c002074f:	83 c4 10             	add    esp,0x10
c0020752:	83 ec 08             	sub    esp,0x8
c0020755:	68 60 01 00 00       	push   0x160
c002075a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002075e:	e8 9d bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	83 c4 0c             	add    esp,0xc
c0020769:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002076c <PIT::~PIT()>:
c002076c:	83 ec 0c             	sub    esp,0xc
c002076f:	ba b8 3a 02 c0       	mov    edx,0xc0023ab8
c0020774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020778:	89 10                	mov    DWORD PTR [eax],edx
c002077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002077e:	83 ec 0c             	sub    esp,0xc
c0020781:	50                   	push   eax
c0020782:	e8 31 9f fe ff       	call   c000a6b8 <Timer::~Timer()>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	90                   	nop
c002078b:	83 c4 0c             	add    esp,0xc
c002078e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020790 <PIT::~PIT()>:
c0020790:	83 ec 0c             	sub    esp,0xc
c0020793:	83 ec 0c             	sub    esp,0xc
c0020796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002079a:	e8 cd ff ff ff       	call   c002076c <PIT::~PIT()>
c002079f:	83 c4 10             	add    esp,0x10
c00207a2:	83 ec 08             	sub    esp,0x8
c00207a5:	68 5c 01 00 00       	push   0x15c
c00207aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207ae:	e8 4d bf fe ff       	call   c000c700 <operator delete(void*, unsigned long)>
c00207b3:	83 c4 10             	add    esp,0x10
c00207b6:	83 c4 0c             	add    esp,0xc
c00207b9:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9b 22 02 c0       	mov    esi,0xc002229b
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b7 22 02 c0       	mov    esi,0xc00222b7
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
