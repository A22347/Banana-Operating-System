
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6f eb 00 00       	call   c000eb8f <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 50 02 c0       	mov    eax,0xc00250a8
c0000025:	3d a8 50 02 c0       	cmp    eax,0xc00250a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 50 02 c0       	push   0xc00250a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 50 02 c0       	mov    eax,0xc00250a8
c0000051:	2d a8 50 02 c0       	sub    eax,0xc00250a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 50 02 c0       	push   0xc00250a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 30 0d 02 c0       	mov    ebx,0xc0020d30
c0000097:	81 eb 2c 0d 02 c0    	sub    ebx,0xc0020d2c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 2c 0d 02 c0       	mov    esi,0xc0020d2c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 50 02 c0       	push   0xc00250a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 a8 50 02 c0       	push   0xc00250a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 97 4c 01 00       	call   c0014f44 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 04 30 01 00       	call   c00132c9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 75 4c 01 00       	call   c0014f44 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 82 51 01 00       	call   c0015470 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 45 56 01 00       	call   c001593c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 1e e4 00 00       	jmp    c000e79d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 0d 02 c0 02 	test   BYTE PTR [edx-0x3ffdf2c0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 0d 02 c0 01 	test   BYTE PTR [edx-0x3ffdf2c0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 0d 02 c0 08 	test   BYTE PTR [edx-0x3ffdf2c0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 0d 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf2c0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 0d 02 c0 01 	test   BYTE PTR [edx-0x3ffdf2c0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000df7:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 7d da 00 00       	call   c000e8dd <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 8a d9 00 00       	call   c000e87f <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 69 d8 00 00       	call   c000e849 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 64 d8 00 00       	call   c000e87f <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 10 d7 00 00       	call   c000e849 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 f6 d6 00 00       	call   c000e849 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 cc d6 00 00       	call   c000e849 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 71 02 c0       	mov    eax,0xc0027100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c00012e5:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c0001321:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001326:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c0001334:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c0001385:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013a0:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c000145a:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c0001460:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001467:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000152d:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001533:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c000153a:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 71 02 c0       	mov    edx,0xc0027100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 44 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1bc]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 e1 85 01 00       	jmp    c001a56c <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 0b 86 01 00       	jmp    c001a5ac <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 2c 86 01 00       	jmp    c001a5ec <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 a0 0f 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf060]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 a0 0f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf060]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 40 3c 02 c0       	mov    edx,0xc0023c40
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 5c 0e 02 c0       	mov    edx,0xc0020e5c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 62 0e 02 c0       	mov    eax,0xc0020e62
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 20 0f 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf0e0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 6b 0e 02 c0       	mov    eax,0xc0020e6b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 a0 0f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf060]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 f0 0e 02 c0       	mov    eax,0xc0020ef0
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb e0 0e 02 c0       	mov    ebx,0xc0020ee0
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 c0 0e 02 c0       	mov    eax,0xc0020ec0
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 d0 0e 02 c0       	mov    eax,0xc0020ed0
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 72 0e 02 c0       	mov    edx,0xc0020e72
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 7e 0e 02 c0       	mov    edx,0xc0020e7e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 92 0e 02 c0       	mov    edx,0xc0020e92
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 48 8b 00 00       	call   c000e95f <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 40 8b 00 00       	call   c000e96f <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c c0 12 02 c0 	mov    DWORD PTR [esp+0xc],0xc00212c0
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 c0 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc00212c0
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 c0 10 02 c0       	mov    eax,0xc00210c0
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 00 10 02 c0       	mov    eax,0xc0021000
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 c0 0f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf040]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 c0 13 02 c0       	push   0xc00213c0
c0006303:	e8 00 4c 01 00       	call   c001af08 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 ce 13 02 c0       	push   0xc00213ce
c000633b:	e8 c8 4b 01 00       	call   c001af08 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 31 4b 01 00       	call   c001aeac <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 70 02 c0       	mov    eax,0xc0027080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 70 02 c0       	mov    eax,0xc0027020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 7e 02 c0    	mov    ebp,DWORD PTR ds:0xc0027eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 dd 13 02 c0       	push   0xc00213dd
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c0006746:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000674c:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c0006768:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067e1:	8b 8d 4c 75 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd8ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068d9:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c0006917:	05 40 75 02 c0       	add    eax,0xc0027540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069d6:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 e0 13 02 c0       	push   0xc00213e0
c00069fa:	e8 09 45 01 00       	call   c001af08 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 1d 45 01 00       	call   c001af24 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 e5 13 02 c0 	mov    DWORD PTR [esp],0xc00213e5
c0006a14:	e8 ef 44 01 00       	call   c001af08 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a20:	e8 ff 44 01 00       	call   c001af24 <iso_kprintfd>
c0006a25:	c7 04 24 eb 13 02 c0 	mov    DWORD PTR [esp],0xc00213eb
c0006a2c:	e8 d7 44 01 00       	call   c001af08 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a38:	e8 e7 44 01 00       	call   c001af24 <iso_kprintfd>
c0006a3d:	c7 04 24 f1 13 02 c0 	mov    DWORD PTR [esp],0xc00213f1
c0006a44:	e8 bf 44 01 00       	call   c001af08 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a50:	e8 cf 44 01 00       	call   c001af24 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006ab6:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 75 02 c0    	lea    ebp,[eax-0x3ffd8aa8]
c0006b12:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 75 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd8aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 dd 13 02 c0       	push   0xc00213dd
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006bee:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006bf4:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 75 02 c0       	add    eax,0xc0027550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 fa 13 02 c0       	push   0xc00213fa
c0006c19:	e8 ea 42 01 00       	call   c001af08 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c4e:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 05 14 02 c0       	push   0xc0021405
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 0c 14 02 c0       	push   0xc002140c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006cec:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d0f:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 13 14 02 c0       	push   0xc0021413
c0006d30:	e8 d3 41 01 00       	call   c001af08 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 1e 14 02 c0       	push   0xc002141e
c0006d4b:	e8 b8 41 01 00       	call   c001af08 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 75 02 c0       	push   0xc0027540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d75:	e8 e5 7b 00 00       	call   c000e95f <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d86:	e8 d4 7b 00 00       	call   c000e95f <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 bf 7b 00 00       	call   c000e95f <malloc>
c0006da0:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 a6 7b 00 00       	call   c000e95f <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006de6:	e8 84 7b 00 00       	call   c000e96f <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 76 7b 00 00       	call   c000e96f <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 5c 7b 00 00       	call   c000e96f <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 47 7b 00 00       	call   c000e96f <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e35:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 30 14 02 c0       	mov    esi,0xc0021430
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 2f 14 02 c0       	mov    al,ds:0xc002142f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 cd 02 c0 10 	test   BYTE PTR ds:0xc002cd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 40 14 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdebc0]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 90 15 02 c0       	push   0xc0021590
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 a4 15 02 c0       	push   0xc00215a4
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 ae 15 02 c0       	push   0xc00215ae
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 b8 15 02 c0       	push   0xc00215b8
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 fc 16 02 c0       	push   0xc00216fc
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 c2 15 02 c0       	push   0xc00215c2
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 1c 17 02 c0       	push   0xc002171c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 d7 15 02 c0       	push   0xc00215d7
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 f1 15 02 c0       	push   0xc00215f1
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 60 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb9a0]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 44 17 02 c0       	push   0xc0021744
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 fc 16 02 c0       	push   0xc00216fc
c00071d4:	e8 cd 7a 00 00       	call   c000eca6 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 8c 17 02 c0       	push   0xc002178c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 8c 17 02 c0       	push   0xc002178c
c0007203:	e8 9e 7a 00 00       	call   c000eca6 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 fc 15 02 c0       	push   0xc00215fc
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 fc 15 02 c0       	push   0xc00215fc
c000722f:	e8 72 7a 00 00       	call   c000eca6 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 19 16 02 c0       	push   0xc0021619
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 19 16 02 c0       	push   0xc0021619
c000725b:	e8 46 7a 00 00       	call   c000eca6 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 ac 17 02 c0       	push   0xc00217ac
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 ac 17 02 c0       	push   0xc00217ac
c0007287:	e8 1a 7a 00 00       	call   c000eca6 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 d0 17 02 c0       	push   0xc00217d0
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 d0 17 02 c0       	push   0xc00217d0
c00072b3:	e8 ee 79 00 00       	call   c000eca6 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 35 16 02 c0       	push   0xc0021635
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 35 16 02 c0       	push   0xc0021635
c00072df:	e8 c2 79 00 00       	call   c000eca6 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 51 16 02 c0       	push   0xc0021651
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 51 16 02 c0       	push   0xc0021651
c000730b:	e8 96 79 00 00       	call   c000eca6 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 f0 17 02 c0       	push   0xc00217f0
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 f0 17 02 c0       	push   0xc00217f0
c0007337:	e8 6a 79 00 00       	call   c000eca6 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 14 18 02 c0       	push   0xc0021814
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 14 18 02 c0       	push   0xc0021814
c0007363:	e8 3e 79 00 00       	call   c000eca6 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 95 75 00 00       	call   c000e95f <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00073d5:	68 33 18 02 c0       	push   0xc0021833
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 51 18 02 c0       	push   0xc0021851
c00073ef:	e8 b2 78 00 00       	call   c000eca6 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 6b 18 02 c0       	push   0xc002186b
c0007410:	e8 91 78 00 00       	call   c000eca6 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 85 18 02 c0       	push   0xc0021885
c0007457:	e8 4a 78 00 00       	call   c000eca6 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 9f 18 02 c0       	push   0xc002189f
c0007487:	e8 1a 78 00 00       	call   c000eca6 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 78 62 00 00       	call   c000d751 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 a7 81 00 00       	call   c000f69a <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 b9 18 02 c0       	push   0xc00218b9
c000752c:	e8 75 77 00 00       	call   c000eca6 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 83 02 c0       	push   0xc0028300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 2d 4f 00 00       	call   c000c53e <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 42 73 00 00       	call   c000e95f <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007628:	68 33 18 02 c0       	push   0xc0021833
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 c2 18 02 c0       	push   0xc00218c2
c0007642:	e8 5f 76 00 00       	call   c000eca6 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 df 18 02 c0       	push   0xc00218df
c0007673:	e8 2e 76 00 00       	call   c000eca6 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 fc 18 02 c0       	push   0xc00218fc
c00076ad:	e8 f4 75 00 00       	call   c000eca6 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007790:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 b3 71 00 00       	call   c000e95f <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00077b7:	68 33 18 02 c0       	push   0xc0021833
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 17 19 02 c0       	push   0xc0021917
c00077d1:	e8 d0 74 00 00       	call   c000eca6 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 32 19 02 c0       	push   0xc0021932
c0007804:	e8 9d 74 00 00       	call   c000eca6 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 8c 70 00 00       	call   c000e95f <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 02 6f 00 00       	call   c000e95f <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 4d 19 02 c0       	mov    esi,0xc002194d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 37 a1 00 00       	call   c0011e26 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 a9 49 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 e9 a0 00 00       	call   c0011e26 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 5b 49 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba b8 19 02 c0       	mov    edx,0xc00219b8
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 05 49 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 65 6b 00 00       	call   c000e95f <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 06 29 01 00       	call   c001a708 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 51 6b 00 00       	call   c000e95f <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 1e 38 01 00       	call   c001b634 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 e2 34 02 c0       	push   0xc00234e2
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 56 19 02 c0       	push   0xc0021956
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 71 19 02 c0       	push   0xc0021971
c000801f:	e8 82 6c 00 00       	call   c000eca6 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 f2 9b 00 00       	call   c0011c40 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 24 1a 02 c0       	mov    edx,0xc0021a24
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 97 19 02 c0       	push   0xc0021997
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 cc 1e 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 c7 1a 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 e7 63 00 00       	call   c000e95f <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 1c 96 00 00       	call   c0011c40 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 24 19 00 00       	call   c0009ff6 <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 a4 08 00 00       	call   c00091c4 <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 05 06 00 00       	call   c0008f64 <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 39 3d 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00089a0:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 56 cf 00 00       	call   c001590c <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 b1 ff 00 00       	call   c0018973 <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 02 ce 00 00       	jmp    c00157d4 <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 8b ff 00 00       	call   c0018973 <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 0f cf 00 00       	call   c001590c <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 64 ff 00 00       	jmp    c0018973 <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0008a20:	e8 9f ca 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadClockSettings()>:
c0008a2c:	57                   	push   edi
c0008a2d:	56                   	push   esi
c0008a2e:	53                   	push   ebx
c0008a2f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a35:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a3a:	68 80 1a 02 c0       	push   0xc0021a80
c0008a3f:	e8 d4 3c 00 00       	call   c000c718 <CmOpen(char const*)>
c0008a44:	59                   	pop    ecx
c0008a45:	89 c3                	mov    ebx,eax
c0008a47:	5e                   	pop    esi
c0008a48:	68 a5 1a 02 c0       	push   0xc0021aa5
c0008a4d:	50                   	push   eax
c0008a4e:	e8 c5 48 00 00       	call   c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a53:	5f                   	pop    edi
c0008a54:	89 c6                	mov    esi,eax
c0008a56:	5a                   	pop    edx
c0008a57:	50                   	push   eax
c0008a58:	68 ba 1a 02 c0       	push   0xc0021aba
c0008a5d:	e8 02 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	85 f6                	test   esi,esi
c0008a67:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a6b:	7e 0c                	jle    c0008a79 <KeLoadClockSettings()+0x4d>
c0008a6d:	52                   	push   edx
c0008a6e:	57                   	push   edi
c0008a6f:	56                   	push   esi
c0008a70:	53                   	push   ebx
c0008a71:	e8 12 3e 00 00       	call   c000c888 <CmGetString(Reghive_Tag*, int, char*)>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	83 ec 0c             	sub    esp,0xc
c0008a7c:	53                   	push   ebx
c0008a7d:	e8 b4 3d 00 00       	call   c000c836 <CmClose(Reghive_Tag*)>
c0008a82:	83 c4 0c             	add    esp,0xc
c0008a85:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a8a:	50                   	push   eax
c0008a8b:	57                   	push   edi
c0008a8c:	68 c8 1a 02 c0       	push   0xc0021ac8
c0008a91:	e8 ce e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a96:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a9a:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa1:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	a8 fd                	test   al,0xfd
c0008aa9:	75 50                	jne    c0008afb <KeLoadClockSettings()+0xcf>
c0008aab:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008ab0:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab5:	83 fb 2e             	cmp    ebx,0x2e
c0008ab8:	75 07                	jne    c0008ac1 <KeLoadClockSettings()+0x95>
c0008aba:	b0 01                	mov    al,0x1
c0008abc:	83 fa 35             	cmp    edx,0x35
c0008abf:	74 0f                	je     c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac1:	31 c0                	xor    eax,eax
c0008ac3:	83 fa 2e             	cmp    edx,0x2e
c0008ac6:	75 08                	jne    c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008acd:	0f 94 c0             	sete   al
c0008ad0:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ada:	83 e8 30             	sub    eax,0x30
c0008add:	83 fa 2e             	cmp    edx,0x2e
c0008ae0:	75 07                	jne    c0008ae9 <KeLoadClockSettings()+0xbd>
c0008ae2:	6b c0 0a             	imul   eax,eax,0xa
c0008ae5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	80 f9 2d             	cmp    cl,0x2d
c0008af1:	75 19                	jne    c0008b0c <KeLoadClockSettings()+0xe0>
c0008af3:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af9:	eb 11                	jmp    c0008b0c <KeLoadClockSettings()+0xe0>
c0008afb:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008b02:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b0c:	50                   	push   eax
c0008b0d:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b14:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b17:	50                   	push   eax
c0008b18:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1e:	68 df 1a 02 c0       	push   0xc0021adf
c0008b23:	e8 3c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b28:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	c3                   	ret    

c0008b32 <Clock::Clock(char const*)>:
c0008b32:	83 ec 0c             	sub    esp,0xc
c0008b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b39:	83 ec 08             	sub    esp,0x8
c0008b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b40:	50                   	push   eax
c0008b41:	e8 7e 06 00 00       	call   c00091c4 <Device::Device(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	ba f8 1a 02 c0       	mov    edx,0xc0021af8
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	ba f8 1a 02 c0       	mov    edx,0xc0021af8
c0008b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b74:	89 10                	mov    DWORD PTR [eax],edx
c0008b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	50                   	push   eax
c0008b7e:	e8 e1 03 00 00       	call   c0008f64 <Device::~Device()>
c0008b83:	83 c4 10             	add    esp,0x10
c0008b86:	90                   	nop
c0008b87:	83 c4 0c             	add    esp,0xc
c0008b8a:	c3                   	ret    
c0008b8b:	90                   	nop

c0008b8c <Clock::~Clock()>:
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b96:	e8 cd ff ff ff       	call   c0008b68 <Clock::~Clock()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 08             	sub    esp,0x8
c0008ba1:	68 58 01 00 00       	push   0x158
c0008ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008baa:	e8 15 3b 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 c4 0c             	add    esp,0xc
c0008bb5:	c3                   	ret    

c0008bb6 <Clock::timeInSecondsLocal()>:
c0008bb6:	53                   	push   ebx
c0008bb7:	83 ec 14             	sub    esp,0x14
c0008bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bc0:	50                   	push   eax
c0008bc1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc4:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bcb:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bd1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd7:	89 cb                	mov    ebx,ecx
c0008bd9:	c1 fb 1f             	sar    ebx,0x1f
c0008bdc:	01 c8                	add    eax,ecx
c0008bde:	11 da                	adc    edx,ebx
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	31 c9                	xor    ecx,ecx
c0008be5:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bec:	74 05                	je     c0008bf3 <Clock::timeInSecondsLocal()+0x3d>
c0008bee:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf3:	31 db                	xor    ebx,ebx
c0008bf5:	01 c8                	add    eax,ecx
c0008bf7:	11 da                	adc    edx,ebx
c0008bf9:	83 c4 08             	add    esp,0x8
c0008bfc:	5b                   	pop    ebx
c0008bfd:	c3                   	ret    

c0008bfe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfe:	57                   	push   edi
c0008bff:	56                   	push   esi
c0008c00:	53                   	push   ebx
c0008c01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c12:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c19:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c25:	99                   	cdq    
c0008c26:	29 c6                	sub    esi,eax
c0008c28:	19 d7                	sbb    edi,edx
c0008c2a:	89 f0                	mov    eax,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	31 f6                	xor    esi,esi
c0008c30:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c37:	74 05                	je     c0008c3e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c39:	be 08 07 00 00       	mov    esi,0x708
c0008c3e:	31 ff                	xor    edi,edi
c0008c40:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c44:	29 f0                	sub    eax,esi
c0008c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c4a:	19 fa                	sbb    edx,edi
c0008c4c:	89 d8                	mov    eax,ebx
c0008c4e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	ff e0                	jmp    eax

c0008c57 <KeDatetimeToSeconds(datetime_t)>:
c0008c57:	55                   	push   ebp
c0008c58:	57                   	push   edi
c0008c59:	56                   	push   esi
c0008c5a:	53                   	push   ebx
c0008c5b:	83 ec 0c             	sub    esp,0xc
c0008c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c66:	89 d6                	mov    esi,edx
c0008c68:	0f b6 c7             	movzx  eax,bh
c0008c6b:	c1 ee 10             	shr    esi,0x10
c0008c6e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c71:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c77:	0f b6 ce             	movzx  ecx,dh
c0008c7a:	89 df                	mov    edi,ebx
c0008c7c:	49                   	dec    ecx
c0008c7d:	c1 ef 10             	shr    edi,0x10
c0008c80:	0f b6 db             	movzx  ebx,bl
c0008c83:	89 f8                	mov    eax,edi
c0008c85:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c8b:	0f b6 f8             	movzx  edi,al
c0008c8e:	0f b6 d2             	movzx  edx,dl
c0008c91:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c95:	01 d8                	add    eax,ebx
c0008c97:	0f b7 de             	movzx  ebx,si
c0008c9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9d:	c1 f8 1f             	sar    eax,0x1f
c0008ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca4:	0f b6 c1             	movzx  eax,cl
c0008ca7:	8b 0c 85 40 1b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde4c0]
c0008cae:	83 f8 01             	cmp    eax,0x1
c0008cb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008cb5:	76 27                	jbe    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cb7:	83 e6 03             	and    esi,0x3
c0008cba:	75 22                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbc:	31 d2                	xor    edx,edx
c0008cbe:	be 64 00 00 00       	mov    esi,0x64
c0008cc3:	89 d8                	mov    eax,ebx
c0008cc5:	f7 f6                	div    esi
c0008cc7:	85 d2                	test   edx,edx
c0008cc9:	75 12                	jne    c0008cdd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd1:	be 90 01 00 00       	mov    esi,0x190
c0008cd6:	99                   	cdq    
c0008cd7:	f7 fe                	idiv   esi
c0008cd9:	85 d2                	test   edx,edx
c0008cdb:	75 01                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cdd:	41                   	inc    ecx
c0008cde:	83 fb 46             	cmp    ebx,0x46
c0008ce1:	76 48                	jbe    c0008d2b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008ce3:	be 46 00 00 00       	mov    esi,0x46
c0008ce8:	bf 64 00 00 00       	mov    edi,0x64
c0008ced:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cf7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfd:	75 23                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cff:	89 f0                	mov    eax,esi
c0008d01:	99                   	cdq    
c0008d02:	f7 ff                	idiv   edi
c0008d04:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d09:	85 d2                	test   edx,edx
c0008d0b:	75 15                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008d0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d13:	99                   	cdq    
c0008d14:	f7 fd                	idiv   ebp
c0008d16:	83 fa 01             	cmp    edx,0x1
c0008d19:	19 c0                	sbb    eax,eax
c0008d1b:	f7 d0                	not    eax
c0008d1d:	05 6e 01 00 00       	add    eax,0x16e
c0008d22:	01 c1                	add    ecx,eax
c0008d24:	46                   	inc    esi
c0008d25:	39 de                	cmp    esi,ebx
c0008d27:	7c c9                	jl     c0008cf2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d29:	eb 34                	jmp    c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2b:	74 32                	je     c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2d:	b8 45 00 00 00       	mov    eax,0x45
c0008d32:	89 c2                	mov    edx,eax
c0008d34:	83 e2 03             	and    edx,0x3
c0008d37:	39 d8                	cmp    eax,ebx
c0008d39:	7e 0f                	jle    c0008d4a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d3b:	83 fa 01             	cmp    edx,0x1
c0008d3e:	19 d2                	sbb    edx,edx
c0008d40:	48                   	dec    eax
c0008d41:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d48:	eb e8                	jmp    c0008d32 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d4a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d4f:	85 d2                	test   edx,edx
c0008d51:	75 0a                	jne    c0008d5d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d53:	83 fb 01             	cmp    ebx,0x1
c0008d56:	19 c0                	sbb    eax,eax
c0008d58:	05 6e 01 00 00       	add    eax,0x16e
c0008d5d:	29 c1                	sub    ecx,eax
c0008d5f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d64:	f7 e9                	imul   ecx
c0008d66:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d6d:	83 c4 0c             	add    esp,0xc
c0008d70:	5b                   	pop    ebx
c0008d71:	5e                   	pop    esi
c0008d72:	5f                   	pop    edi
c0008d73:	5d                   	pop    ebp
c0008d74:	c3                   	ret    
c0008d75:	90                   	nop

c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d76:	57                   	push   edi
c0008d77:	56                   	push   esi
c0008d78:	53                   	push   ebx
c0008d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d7f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d8a:	e8 c8 fe ff ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c0008d8f:	59                   	pop    ecx
c0008d90:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008d97:	5b                   	pop    ebx
c0008d98:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008d9e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008da4:	89 cb                	mov    ebx,ecx
c0008da6:	c1 fb 1f             	sar    ebx,0x1f
c0008da9:	29 c8                	sub    eax,ecx
c0008dab:	19 da                	sbb    edx,ebx
c0008dad:	31 c9                	xor    ecx,ecx
c0008daf:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db6:	74 05                	je     c0008dbd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008db8:	b9 08 07 00 00       	mov    ecx,0x708
c0008dbd:	31 db                	xor    ebx,ebx
c0008dbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008dc3:	29 c8                	sub    eax,ecx
c0008dc5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dc9:	19 da                	sbb    edx,ebx
c0008dcb:	89 f8                	mov    eax,edi
c0008dcd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dd1:	5b                   	pop    ebx
c0008dd2:	5e                   	pop    esi
c0008dd3:	5f                   	pop    edi
c0008dd4:	ff e0                	jmp    eax

c0008dd6 <KeSecondsToDatetime(unsigned long long)>:
c0008dd6:	55                   	push   ebp
c0008dd7:	57                   	push   edi
c0008dd8:	56                   	push   esi
c0008dd9:	53                   	push   ebx
c0008dda:	83 ec 1c             	sub    esp,0x1c
c0008ddd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008de1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008de5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008de9:	6a 00                	push   0x0
c0008deb:	68 80 51 01 00       	push   0x15180
c0008df0:	55                   	push   ebp
c0008df1:	57                   	push   edi
c0008df2:	e8 6d 72 01 00       	call   c0020064 <__udivdi3>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e04:	6a 00                	push   0x0
c0008e06:	68 80 51 01 00       	push   0x15180
c0008e0b:	55                   	push   ebp
c0008e0c:	57                   	push   edi
c0008e0d:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e12:	e8 4d 73 01 00       	call   c0020164 <__umoddi3>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	99                   	cdq    
c0008e1b:	f7 ff                	idiv   edi
c0008e1d:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e22:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e25:	89 d0                	mov    eax,edx
c0008e27:	99                   	cdq    
c0008e28:	f7 ff                	idiv   edi
c0008e2a:	85 db                	test   ebx,ebx
c0008e2c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e2f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e32:	79 11                	jns    c0008e45 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e38:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e3e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e43:	eb 07                	jmp    c0008e4c <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e45:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e4a:	89 d8                	mov    eax,ebx
c0008e4c:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e51:	99                   	cdq    
c0008e52:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e57:	f7 f9                	idiv   ecx
c0008e59:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e62:	31 d2                	xor    edx,edx
c0008e64:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e6c:	01 c3                	add    ebx,eax
c0008e6e:	89 d8                	mov    eax,ebx
c0008e70:	f7 f1                	div    ecx
c0008e72:	31 d2                	xor    edx,edx
c0008e74:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	f7 f7                	div    edi
c0008e7b:	31 d2                	xor    edx,edx
c0008e7d:	29 c1                	sub    ecx,eax
c0008e7f:	89 d8                	mov    eax,ebx
c0008e81:	f7 f5                	div    ebp
c0008e83:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e88:	29 c1                	sub    ecx,eax
c0008e8a:	31 d2                	xor    edx,edx
c0008e8c:	89 c8                	mov    eax,ecx
c0008e8e:	f7 f5                	div    ebp
c0008e90:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e99:	31 d2                	xor    edx,edx
c0008e9b:	89 c8                	mov    eax,ecx
c0008e9d:	f7 f5                	div    ebp
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	01 c3                	add    ebx,eax
c0008ea3:	89 c8                	mov    eax,ecx
c0008ea5:	f7 f7                	div    edi
c0008ea7:	bf 99 00 00 00       	mov    edi,0x99
c0008eac:	29 c3                	sub    ebx,eax
c0008eae:	31 d2                	xor    edx,edx
c0008eb0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008eb8:	29 c3                	sub    ebx,eax
c0008eba:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ebd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ec0:	bb 05 00 00 00       	mov    ebx,0x5
c0008ec5:	83 c1 02             	add    ecx,0x2
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f7                	div    edi
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	89 c7                	mov    edi,eax
c0008ed0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008ed6:	83 c0 02             	add    eax,0x2
c0008ed9:	f7 f3                	div    ebx
c0008edb:	89 eb                	mov    ebx,ebp
c0008edd:	29 c3                	sub    ebx,eax
c0008edf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ee5:	88 1e                	mov    BYTE PTR [esi],bl
c0008ee7:	19 c0                	sbb    eax,eax
c0008ee9:	31 d2                	xor    edx,edx
c0008eeb:	83 e0 0c             	and    eax,0xc
c0008eee:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ef2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008efa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008efe:	83 f9 01             	cmp    ecx,0x1
c0008f01:	0f 96 c2             	setbe  dl
c0008f04:	41                   	inc    ecx
c0008f05:	01 d0                	add    eax,edx
c0008f07:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008f0a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f0e:	83 c4 1c             	add    esp,0x1c
c0008f11:	89 f0                	mov    eax,esi
c0008f13:	5b                   	pop    ebx
c0008f14:	5e                   	pop    esi
c0008f15:	5f                   	pop    edi
c0008f16:	5d                   	pop    ebp
c0008f17:	c2 04 00             	ret    0x4

c0008f1a <Clock::timeInDatetimeLocal()>:
c0008f1a:	53                   	push   ebx
c0008f1b:	83 ec 14             	sub    esp,0x14
c0008f1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f26:	e8 8b fc ff ff       	call   c0008bb6 <Clock::timeInSecondsLocal()>
c0008f2b:	83 c4 0c             	add    esp,0xc
c0008f2e:	52                   	push   edx
c0008f2f:	50                   	push   eax
c0008f30:	53                   	push   ebx
c0008f31:	e8 a0 fe ff ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c0008f36:	89 d8                	mov    eax,ebx
c0008f38:	83 c4 14             	add    esp,0x14
c0008f3b:	5b                   	pop    ebx
c0008f3c:	c2 04 00             	ret    0x4
c0008f3f:	90                   	nop

c0008f40 <Device::hibernate()>:
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <Device::wake()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <Device::detect()>:
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop

c0008f46 <Device::disableLegacy()>:
c0008f46:	c3                   	ret    
c0008f47:	90                   	nop

c0008f48 <Device::powerSaving(PowerSavingLevel)>:
c0008f48:	c3                   	ret    
c0008f49:	90                   	nop

c0008f4a <DriverlessDevice::close(int, int, void*)>:
c0008f4a:	31 c0                	xor    eax,eax
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <DriverlessDevice::detect()>:
c0008f4e:	c3                   	ret    
c0008f4f:	90                   	nop

c0008f50 <DriverlessDevice::open(int, int, void*)>:
c0008f50:	83 ec 18             	sub    esp,0x18
c0008f53:	68 70 1b 02 c0       	push   0xc0021b70
c0008f58:	e8 49 5d 00 00       	call   c000eca6 <KePanic(char const*)>
c0008f5d:	83 c8 ff             	or     eax,0xffffffff
c0008f60:	83 c4 1c             	add    esp,0x1c
c0008f63:	c3                   	ret    

c0008f64 <Device::~Device()>:
c0008f64:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c0008f69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f6d:	89 10                	mov    DWORD PTR [eax],edx
c0008f6f:	90                   	nop
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::~Device()>:
c0008f72:	83 ec 0c             	sub    esp,0xc
c0008f75:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f79:	e8 e6 ff ff ff       	call   c0008f64 <Device::~Device()>
c0008f7e:	83 c4 04             	add    esp,0x4
c0008f81:	83 ec 08             	sub    esp,0x8
c0008f84:	68 58 01 00 00       	push   0x158
c0008f89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f8d:	e8 32 37 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	83 c4 0c             	add    esp,0xc
c0008f98:	c3                   	ret    
c0008f99:	90                   	nop

c0008f9a <Device::findAndLoadDriver()>:
c0008f9a:	c7 44 24 04 8e 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8e
c0008fa2:	e9 bd df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008fa7:	90                   	nop

c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fa8:	57                   	push   edi
c0008fa9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fae:	56                   	push   esi
c0008faf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fb3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fb7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fc1:	81 c7 18 01 00 00    	add    edi,0x118
c0008fc7:	fc                   	cld    
c0008fc8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fca:	5e                   	pop    esi
c0008fcb:	5f                   	pop    edi
c0008fcc:	c3                   	ret    
c0008fcd:	90                   	nop

c0008fce <Device::preOpenACPI(void*, char*, char*)>:
c0008fce:	57                   	push   edi
c0008fcf:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fd4:	56                   	push   esi
c0008fd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fdd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fe7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fed:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008ff3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008ff9:	b9 0e 00 00 00       	mov    ecx,0xe
c0008ffe:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009004:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009008:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000900a:	5e                   	pop    esi
c000900b:	5f                   	pop    edi
c000900c:	c3                   	ret    
c000900d:	90                   	nop

c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000900e:	53                   	push   ebx
c000900f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009013:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000901b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000901f:	0f b6 c0             	movzx  eax,al
c0009022:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000902e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009032:	5b                   	pop    ebx
c0009033:	e9 03 fd 00 00       	jmp    c0018d3b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009038 <Device::getParent()>:
c0009038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000903c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009042:	c3                   	ret    
c0009043:	90                   	nop

c0009044 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009048:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000904c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009051:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009055:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009059:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000905d:	e9 3b fe 00 00       	jmp    c0018e9d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009062 <Device::addChild(Device*)>:
c0009062:	53                   	push   ebx
c0009063:	83 ec 08             	sub    esp,0x8
c0009066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000906a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000906e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009074:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000907a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000907c:	85 d2                	test   edx,edx
c000907e:	74 04                	je     c0009084 <Device::addChild(Device*)+0x22>
c0009080:	89 d3                	mov    ebx,edx
c0009082:	eb f6                	jmp    c000907a <Device::addChild(Device*)+0x18>
c0009084:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	6a 08                	push   0x8
c000908c:	e8 ce 58 00 00       	call   c000e95f <malloc>
c0009091:	89 03                	mov    DWORD PTR [ebx],eax
c0009093:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009099:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090a0:	83 c4 18             	add    esp,0x18
c00090a3:	5b                   	pop    ebx
c00090a4:	c3                   	ret    
c00090a5:	90                   	nop

c00090a6 <Device::removeAllChildren()>:
c00090a6:	56                   	push   esi
c00090a7:	53                   	push   ebx
c00090a8:	52                   	push   edx
c00090a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090b6:	74 17                	je     c00090cf <Device::removeAllChildren()+0x29>
c00090b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090bb:	85 c0                	test   eax,eax
c00090bd:	74 0c                	je     c00090cb <Device::removeAllChildren()+0x25>
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090c4:	50                   	push   eax
c00090c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090cd:	eb e4                	jmp    c00090b3 <Device::removeAllChildren()+0xd>
c00090cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090e8:	58                   	pop    eax
c00090e9:	5b                   	pop    ebx
c00090ea:	5e                   	pop    esi
c00090eb:	c3                   	ret    

c00090ec <Device::hibernateAll()>:
c00090ec:	53                   	push   ebx
c00090ed:	83 ec 14             	sub    esp,0x14
c00090f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090f6:	53                   	push   ebx
c00090f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009100:	83 c4 10             	add    esp,0x10
c0009103:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009106:	74 0f                	je     c0009117 <Device::hibernateAll()+0x2b>
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000910e:	e8 d9 ff ff ff       	call   c00090ec <Device::hibernateAll()>
c0009113:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009115:	eb e9                	jmp    c0009100 <Device::hibernateAll()+0x14>
c0009117:	83 c4 08             	add    esp,0x8
c000911a:	5b                   	pop    ebx
c000911b:	c3                   	ret    

c000911c <Device::wakeAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::wakeAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::wakeAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::wakeAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::detectAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::detectAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::detectAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::detectAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::disableLegacyAll()>:
c000917c:	c3                   	ret    
c000917d:	90                   	nop

c000917e <Device::loadDriversForAll()>:
c000917e:	c3                   	ret    
c000917f:	90                   	nop

c0009180 <Device::powerSavingAll(PowerSavingLevel)>:
c0009180:	56                   	push   esi
c0009181:	53                   	push   ebx
c0009182:	83 ec 0c             	sub    esp,0xc
c0009185:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009189:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000918d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000918f:	56                   	push   esi
c0009190:	53                   	push   ebx
c0009191:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009194:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000919a:	83 c4 10             	add    esp,0x10
c000919d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091a0:	74 0f                	je     c00091b1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091a2:	52                   	push   edx
c00091a3:	52                   	push   edx
c00091a4:	56                   	push   esi
c00091a5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091a8:	e8 d3 ff ff ff       	call   c0009180 <Device::powerSavingAll(PowerSavingLevel)>
c00091ad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091af:	eb e9                	jmp    c000919a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091b1:	58                   	pop    eax
c00091b2:	5b                   	pop    ebx
c00091b3:	5e                   	pop    esi
c00091b4:	c3                   	ret    
c00091b5:	90                   	nop

c00091b6 <Device::setName(char const*)>:
c00091b6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091be:	e9 7d 74 ff ff       	jmp    c0000640 <strcpy>
c00091c3:	90                   	nop

c00091c4 <Device::Device(char const*)>:
c00091c4:	83 ec 1c             	sub    esp,0x1c
c00091c7:	ba 14 1c 02 c0       	mov    edx,0xc0021c14
c00091cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d0:	89 10                	mov    DWORD PTR [eax],edx
c00091d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091f2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000920a:	83 ec 08             	sub    esp,0x8
c000920d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009215:	e8 9c ff ff ff       	call   c00091b6 <Device::setName(char const*)>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009225:	83 ec 0c             	sub    esp,0xc
c0009228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922c:	e8 2e 57 00 00       	call   c000e95f <malloc>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009241:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009245:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000924b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009255:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000926c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009270:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009294:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000929e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ba:	90                   	nop
c00092bb:	83 c4 1c             	add    esp,0x1c
c00092be:	c3                   	ret    
c00092bf:	90                   	nop

c00092c0 <Device::getName()>:
c00092c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092c4:	05 d0 00 00 00       	add    eax,0xd0
c00092c9:	c3                   	ret    

c00092ca <Device::closeAll()>:
c00092ca:	53                   	push   ebx
c00092cb:	83 ec 08             	sub    esp,0x8
c00092ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092d2:	53                   	push   ebx
c00092d3:	e8 e8 ff ff ff       	call   c00092c0 <Device::getName()>
c00092d8:	52                   	push   edx
c00092d9:	50                   	push   eax
c00092da:	68 c8 1b 02 c0       	push   0xc0021bc8
c00092df:	e8 80 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092e6:	6a 00                	push   0x0
c00092e8:	6a 00                	push   0x0
c00092ea:	6a 00                	push   0x0
c00092ec:	53                   	push   ebx
c00092ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092f6:	83 c4 20             	add    esp,0x20
c00092f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092fc:	74 12                	je     c0009310 <Device::closeAll()+0x46>
c00092fe:	83 ec 0c             	sub    esp,0xc
c0009301:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009304:	e8 c1 ff ff ff       	call   c00092ca <Device::closeAll()>
c0009309:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000930b:	83 c4 10             	add    esp,0x10
c000930e:	eb e9                	jmp    c00092f9 <Device::closeAll()+0x2f>
c0009310:	83 c4 08             	add    esp,0x8
c0009313:	5b                   	pop    ebx
c0009314:	c3                   	ret    
c0009315:	90                   	nop

c0009316 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009316:	83 ec 0c             	sub    esp,0xc
c0009319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931d:	83 ec 08             	sub    esp,0x8
c0009320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009324:	50                   	push   eax
c0009325:	e8 9a fe ff ff       	call   c00091c4 <Device::Device(char const*)>
c000932a:	83 c4 10             	add    esp,0x10
c000932d:	ba 40 1c 02 c0       	mov    edx,0xc0021c40
c0009332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009336:	89 10                	mov    DWORD PTR [eax],edx
c0009338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000933c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009346:	90                   	nop
c0009347:	83 c4 0c             	add    esp,0xc
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000934c:	57                   	push   edi
c000934d:	56                   	push   esi
c000934e:	53                   	push   ebx
c000934f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009357:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000935b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009361:	75 0c                	jne    c000936f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009363:	52                   	push   edx
c0009364:	52                   	push   edx
c0009365:	53                   	push   ebx
c0009366:	56                   	push   esi
c0009367:	e8 70 6f 01 00       	call   c00202dc <LinkedList<Device>::addElement(Device*)>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009375:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009378:	74 12                	je     c000938c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000937a:	50                   	push   eax
c000937b:	57                   	push   edi
c000937c:	56                   	push   esi
c000937d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009380:	e8 c7 ff ff ff       	call   c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009385:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009387:	83 c4 10             	add    esp,0x10
c000938a:	eb e9                	jmp    c0009375 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000938c:	5b                   	pop    ebx
c000938d:	5e                   	pop    esi
c000938e:	5f                   	pop    edi
c000938f:	c3                   	ret    

c0009390 <getDevicesOfType(DeviceType)>:
c0009390:	53                   	push   ebx
c0009391:	83 ec 14             	sub    esp,0x14
c0009394:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009398:	53                   	push   ebx
c0009399:	e8 1a 70 01 00       	call   c00203b8 <LinkedList<Device>::LinkedList()>
c000939e:	83 c4 0c             	add    esp,0xc
c00093a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a5:	53                   	push   ebx
c00093a6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093ac:	e8 9b ff ff ff       	call   c000934c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b1:	89 d8                	mov    eax,ebx
c00093b3:	83 c4 18             	add    esp,0x18
c00093b6:	5b                   	pop    ebx
c00093b7:	c2 04 00             	ret    0x4
c00093ba:	66 90                	xchg   ax,ax

c00093bc <HardDiskController::HardDiskController(char const*)>:
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c3:	83 ec 08             	sub    esp,0x8
c00093c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ca:	50                   	push   eax
c00093cb:	e8 f4 fd ff ff       	call   c00091c4 <Device::Device(char const*)>
c00093d0:	83 c4 10             	add    esp,0x10
c00093d3:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c00093d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093dc:	89 10                	mov    DWORD PTR [eax],edx
c00093de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093ec:	90                   	nop
c00093ed:	83 c4 0c             	add    esp,0xc
c00093f0:	c3                   	ret    
c00093f1:	90                   	nop
c00093f2:	66 90                	xchg   ax,ax

c00093f4 <HardDiskController::~HardDiskController()>:
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	ba 6c 1c 02 c0       	mov    edx,0xc0021c6c
c00093fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009400:	89 10                	mov    DWORD PTR [eax],edx
c0009402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009406:	83 ec 0c             	sub    esp,0xc
c0009409:	50                   	push   eax
c000940a:	e8 55 fb ff ff       	call   c0008f64 <Device::~Device()>
c000940f:	83 c4 10             	add    esp,0x10
c0009412:	90                   	nop
c0009413:	83 c4 0c             	add    esp,0xc
c0009416:	c3                   	ret    
c0009417:	90                   	nop

c0009418 <HardDiskController::~HardDiskController()>:
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	83 ec 0c             	sub    esp,0xc
c000941e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009422:	e8 cd ff ff ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0009427:	83 c4 10             	add    esp,0x10
c000942a:	83 ec 08             	sub    esp,0x8
c000942d:	68 58 01 00 00       	push   0x158
c0009432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009436:	e8 89 32 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000943b:	83 c4 10             	add    esp,0x10
c000943e:	83 c4 0c             	add    esp,0xc
c0009441:	c3                   	ret    

c0009442 <PhysicalDisk::eject()>:
c0009442:	83 c8 ff             	or     eax,0xffffffff
c0009445:	c3                   	ret    

c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009446:	83 ec 0c             	sub    esp,0xc
c0009449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944d:	83 ec 08             	sub    esp,0x8
c0009450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009454:	50                   	push   eax
c0009455:	e8 6a fd ff ff       	call   c00091c4 <Device::Device(char const*)>
c000945a:	83 c4 10             	add    esp,0x10
c000945d:	ba 98 1c 02 c0       	mov    edx,0xc0021c98
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	89 10                	mov    DWORD PTR [eax],edx
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009477:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000948c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009490:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009494:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000949a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094a8:	90                   	nop
c00094a9:	83 c4 0c             	add    esp,0xc
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop

c00094ae <PhysicalDisk::startCache()>:
c00094ae:	56                   	push   esi
c00094af:	53                   	push   ebx
c00094b0:	83 ec 10             	sub    esp,0x10
c00094b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094b7:	6a 44                	push   0x44
c00094b9:	e8 a1 54 00 00       	call   c000e95f <malloc>
c00094be:	89 c6                	mov    esi,eax
c00094c0:	58                   	pop    eax
c00094c1:	5a                   	pop    edx
c00094c2:	53                   	push   ebx
c00094c3:	56                   	push   esi
c00094c4:	e8 8f 13 00 00       	call   c000a858 <VCache::VCache(PhysicalDisk*)>
c00094c9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094cf:	83 c4 14             	add    esp,0x14
c00094d2:	5b                   	pop    ebx
c00094d3:	5e                   	pop    esi
c00094d4:	c3                   	ret    
c00094d5:	90                   	nop

c00094d6 <PhysicalDisk::~PhysicalDisk()>:
c00094d6:	83 ec 0c             	sub    esp,0xc
c00094d9:	ba 98 1c 02 c0       	mov    edx,0xc0021c98
c00094de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e2:	89 10                	mov    DWORD PTR [eax],edx
c00094e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094e8:	83 ec 0c             	sub    esp,0xc
c00094eb:	50                   	push   eax
c00094ec:	e8 73 fa ff ff       	call   c0008f64 <Device::~Device()>
c00094f1:	83 c4 10             	add    esp,0x10
c00094f4:	90                   	nop
c00094f5:	83 c4 0c             	add    esp,0xc
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop

c00094fa <PhysicalDisk::~PhysicalDisk()>:
c00094fa:	83 ec 0c             	sub    esp,0xc
c00094fd:	83 ec 0c             	sub    esp,0xc
c0009500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009504:	e8 cd ff ff ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0009509:	83 c4 10             	add    esp,0x10
c000950c:	83 ec 08             	sub    esp,0x8
c000950f:	68 6c 01 00 00       	push   0x16c
c0009514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009518:	e8 a7 31 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000951d:	83 c4 10             	add    esp,0x10
c0009520:	83 c4 0c             	add    esp,0xc
c0009523:	c3                   	ret    

c0009524 <startGUI(void*)>:
c0009524:	55                   	push   ebp
c0009525:	89 e5                	mov    ebp,esp
c0009527:	53                   	push   ebx
c0009528:	83 ec 04             	sub    esp,0x4
c000952b:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009533:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009538:	85 c0                	test   eax,eax
c000953a:	75 01                	jne    c000953d <startGUI(void*)+0x19>
c000953c:	fb                   	sti    
c000953d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009543:	83 ec 08             	sub    esp,0x8
c0009546:	6a 01                	push   0x1
c0009548:	68 c8 1c 02 c0       	push   0xc0021cc8
c000954d:	e8 de b6 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c0009552:	83 c4 10             	add    esp,0x10
c0009555:	83 ec 08             	sub    esp,0x8
c0009558:	53                   	push   ebx
c0009559:	50                   	push   eax
c000955a:	e8 23 b9 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c000955f:	83 c4 10             	add    esp,0x10
c0009562:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009568:	83 ec 08             	sub    esp,0x8
c000956b:	6a 01                	push   0x1
c000956d:	68 e2 1c 02 c0       	push   0xc0021ce2
c0009572:	e8 b9 b6 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	83 ec 08             	sub    esp,0x8
c000957d:	53                   	push   ebx
c000957e:	50                   	push   eax
c000957f:	e8 fe b8 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c0009584:	83 c4 10             	add    esp,0x10
c0009587:	eb fe                	jmp    c0009587 <startGUI(void*)+0x63>

c0009589 <startGUIVESA(void*)>:
c0009589:	55                   	push   ebp
c000958a:	89 e5                	mov    ebp,esp
c000958c:	53                   	push   ebx
c000958d:	83 ec 04             	sub    esp,0x4
c0009590:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009598:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000959d:	85 c0                	test   eax,eax
c000959f:	75 01                	jne    c00095a2 <startGUIVESA(void*)+0x19>
c00095a1:	fb                   	sti    
c00095a2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095a8:	83 ec 08             	sub    esp,0x8
c00095ab:	6a 01                	push   0x1
c00095ad:	68 00 1d 02 c0       	push   0xc0021d00
c00095b2:	e8 79 b6 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c00095b7:	83 c4 10             	add    esp,0x10
c00095ba:	83 ec 08             	sub    esp,0x8
c00095bd:	53                   	push   ebx
c00095be:	50                   	push   eax
c00095bf:	e8 be b8 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c00095c4:	83 c4 10             	add    esp,0x10
c00095c7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095cd:	83 ec 08             	sub    esp,0x8
c00095d0:	6a 01                	push   0x1
c00095d2:	68 e2 1c 02 c0       	push   0xc0021ce2
c00095d7:	e8 54 b6 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c00095dc:	83 c4 10             	add    esp,0x10
c00095df:	83 ec 08             	sub    esp,0x8
c00095e2:	53                   	push   ebx
c00095e3:	50                   	push   eax
c00095e4:	e8 99 b8 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c00095e9:	83 c4 10             	add    esp,0x10
c00095ec:	eb fe                	jmp    c00095ec <startGUIVESA(void*)+0x63>

c00095ee <sendKeyToTerminal(unsigned char)>:
c00095ee:	55                   	push   ebp
c00095ef:	89 e5                	mov    ebp,esp
c00095f1:	83 ec 28             	sub    esp,0x28
c00095f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095fa:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00095ff:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009603:	83 ec 08             	sub    esp,0x8
c0009606:	52                   	push   edx
c0009607:	50                   	push   eax
c0009608:	e8 a7 81 00 00       	call   c00117b4 <VgaText::receiveKey(unsigned char)>
c000960d:	83 c4 10             	add    esp,0x10
c0009610:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009614:	83 f8 0a             	cmp    eax,0xa
c0009617:	74 16                	je     c000962f <sendKeyToTerminal(unsigned char)+0x41>
c0009619:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000961d:	83 f8 03             	cmp    eax,0x3
c0009620:	74 0d                	je     c000962f <sendKeyToTerminal(unsigned char)+0x41>
c0009622:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009626:	83 f8 1c             	cmp    eax,0x1c
c0009629:	0f 85 92 00 00 00    	jne    c00096c1 <sendKeyToTerminal(unsigned char)+0xd3>
c000962f:	fa                   	cli    
c0009630:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009635:	83 c0 01             	add    eax,0x1
c0009638:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000963d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009642:	83 c0 01             	add    eax,0x1
c0009645:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000964a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000964f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009652:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000965c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009660:	74 1f                	je     c0009681 <sendKeyToTerminal(unsigned char)+0x93>
c0009662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009665:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009668:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000966b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000966e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009671:	83 ec 0c             	sub    esp,0xc
c0009674:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009677:	e8 b8 c3 00 00       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c000967c:	83 c4 10             	add    esp,0x10
c000967f:	eb db                	jmp    c000965c <sendKeyToTerminal(unsigned char)+0x6e>
c0009681:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009686:	83 e8 01             	sub    eax,0x1
c0009689:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000968e:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0009693:	85 c0                	test   eax,eax
c0009695:	75 18                	jne    c00096af <sendKeyToTerminal(unsigned char)+0xc1>
c0009697:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000969c:	85 c0                	test   eax,eax
c000969e:	74 0f                	je     c00096af <sendKeyToTerminal(unsigned char)+0xc1>
c00096a0:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c00096aa:	e8 65 c0 00 00       	call   c0015714 <schedule()>
c00096af:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00096b7:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00096bc:	85 c0                	test   eax,eax
c00096be:	75 01                	jne    c00096c1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096c0:	fb                   	sti    
c00096c1:	90                   	nop
c00096c2:	c9                   	leave  
c00096c3:	c3                   	ret    

c00096c4 <sendKeyboardToken(KeyboardToken)>:
c00096c4:	55                   	push   ebp
c00096c5:	89 e5                	mov    ebp,esp
c00096c7:	83 ec 18             	sub    esp,0x18
c00096ca:	e8 07 5f 00 00       	call   c000f5d6 <KeUserIOReceived()>
c00096cf:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096d5:	0f b7 c0             	movzx  eax,ax
c00096d8:	83 f2 01             	xor    edx,0x1
c00096db:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c00096e1:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c00096e6:	85 c0                	test   eax,eax
c00096e8:	74 24                	je     c000970e <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ea:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c00096f0:	83 ec 04             	sub    esp,0x4
c00096f3:	68 40 a3 02 c0       	push   0xc002a340
c00096f8:	83 ec 08             	sub    esp,0x8
c00096fb:	89 e2                	mov    edx,esp
c00096fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009700:	89 02                	mov    DWORD PTR [edx],eax
c0009702:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009705:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009709:	ff d1                	call   ecx
c000970b:	83 c4 10             	add    esp,0x10
c000970e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009712:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009715:	0f b6 c0             	movzx  eax,al
c0009718:	85 c0                	test   eax,eax
c000971a:	0f 84 da 00 00 00    	je     c00097fa <sendKeyboardToken(KeyboardToken)+0x136>
c0009720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009723:	0f b7 c0             	movzx  eax,ax
c0009726:	3d 18 03 00 00       	cmp    eax,0x318
c000972b:	75 06                	jne    c0009733 <sendKeyboardToken(KeyboardToken)+0x6f>
c000972d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009736:	0f b7 c0             	movzx  eax,ax
c0009739:	3d 19 03 00 00       	cmp    eax,0x319
c000973e:	75 06                	jne    c0009746 <sendKeyboardToken(KeyboardToken)+0x82>
c0009740:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009749:	0f b7 c0             	movzx  eax,ax
c000974c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009751:	75 06                	jne    c0009759 <sendKeyboardToken(KeyboardToken)+0x95>
c0009753:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975c:	0f b7 c0             	movzx  eax,ax
c000975f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009764:	75 06                	jne    c000976c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009766:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000976c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000976f:	0f b7 c0             	movzx  eax,ax
c0009772:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009777:	75 06                	jne    c000977f <sendKeyboardToken(KeyboardToken)+0xbb>
c0009779:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000977f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009782:	0f b7 c0             	movzx  eax,ax
c0009785:	3d 1d 03 00 00       	cmp    eax,0x31d
c000978a:	75 06                	jne    c0009792 <sendKeyboardToken(KeyboardToken)+0xce>
c000978c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009795:	0f b7 c0             	movzx  eax,ax
c0009798:	3d 1e 03 00 00       	cmp    eax,0x31e
c000979d:	75 06                	jne    c00097a5 <sendKeyboardToken(KeyboardToken)+0xe1>
c000979f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097a8:	0f b7 c0             	movzx  eax,ax
c00097ab:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097b0:	75 06                	jne    c00097b8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097b2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097bb:	0f b7 c0             	movzx  eax,ax
c00097be:	3d 20 03 00 00       	cmp    eax,0x320
c00097c3:	75 06                	jne    c00097cb <sendKeyboardToken(KeyboardToken)+0x107>
c00097c5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ce:	0f b7 c0             	movzx  eax,ax
c00097d1:	3d 21 03 00 00       	cmp    eax,0x321
c00097d6:	75 06                	jne    c00097de <sendKeyboardToken(KeyboardToken)+0x11a>
c00097d8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e1:	0f b7 c0             	movzx  eax,ax
c00097e4:	3d 22 03 00 00       	cmp    eax,0x322
c00097e9:	0f 85 f1 00 00 00    	jne    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097ef:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097f5:	e9 e6 00 00 00       	jmp    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fd:	0f b7 c0             	movzx  eax,ax
c0009800:	3d 18 03 00 00       	cmp    eax,0x318
c0009805:	75 0a                	jne    c0009811 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009807:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000980d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009814:	0f b7 c0             	movzx  eax,ax
c0009817:	3d 19 03 00 00       	cmp    eax,0x319
c000981c:	75 0a                	jne    c0009828 <sendKeyboardToken(KeyboardToken)+0x164>
c000981e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009824:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982b:	0f b7 c0             	movzx  eax,ax
c000982e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009833:	75 0a                	jne    c000983f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009835:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000983b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000983f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009842:	0f b7 c0             	movzx  eax,ax
c0009845:	3d 1b 03 00 00       	cmp    eax,0x31b
c000984a:	75 0a                	jne    c0009856 <sendKeyboardToken(KeyboardToken)+0x192>
c000984c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009852:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009856:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009859:	0f b7 c0             	movzx  eax,ax
c000985c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009861:	75 0a                	jne    c000986d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009863:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009869:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009870:	0f b7 c0             	movzx  eax,ax
c0009873:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009878:	75 0a                	jne    c0009884 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000987a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009880:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009887:	0f b7 c0             	movzx  eax,ax
c000988a:	3d 1e 03 00 00       	cmp    eax,0x31e
c000988f:	75 0a                	jne    c000989b <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009891:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009897:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	0f b7 c0             	movzx  eax,ax
c00098a1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098a6:	75 0a                	jne    c00098b2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098a8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b5:	0f b7 c0             	movzx  eax,ax
c00098b8:	3d 20 03 00 00       	cmp    eax,0x320
c00098bd:	75 0a                	jne    c00098c9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098bf:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098cc:	0f b7 c0             	movzx  eax,ax
c00098cf:	3d 21 03 00 00       	cmp    eax,0x321
c00098d4:	75 0a                	jne    c00098e0 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098d6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e3:	0f b7 c0             	movzx  eax,ax
c00098e6:	3d 00 02 00 00       	cmp    eax,0x200
c00098eb:	75 2f                	jne    c000991c <sendKeyboardToken(KeyboardToken)+0x258>
c00098ed:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c00098f2:	83 f0 01             	xor    eax,0x1
c00098f5:	0f b6 c0             	movzx  eax,al
c00098f8:	85 c0                	test   eax,eax
c00098fa:	74 20                	je     c000991c <sendKeyboardToken(KeyboardToken)+0x258>
c00098fc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0009901:	6a 01                	push   0x1
c0009903:	6a 00                	push   0x0
c0009905:	68 24 95 00 c0       	push   0xc0009524
c000990a:	50                   	push   eax
c000990b:	e8 b4 bb 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c0009910:	83 c4 10             	add    esp,0x10
c0009913:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000991a:	eb 3a                	jmp    c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c000991c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000991f:	0f b7 c0             	movzx  eax,ax
c0009922:	3d 01 02 00 00       	cmp    eax,0x201
c0009927:	75 2d                	jne    c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c0009929:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000992e:	83 f0 01             	xor    eax,0x1
c0009931:	0f b6 c0             	movzx  eax,al
c0009934:	85 c0                	test   eax,eax
c0009936:	74 1e                	je     c0009956 <sendKeyboardToken(KeyboardToken)+0x292>
c0009938:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000993d:	6a 01                	push   0x1
c000993f:	6a 00                	push   0x0
c0009941:	68 89 95 00 c0       	push   0xc0009589
c0009946:	50                   	push   eax
c0009947:	e8 78 bb 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c000994c:	83 c4 10             	add    esp,0x10
c000994f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009959:	0f b7 c0             	movzx  eax,ax
c000995c:	3d 25 03 00 00       	cmp    eax,0x325
c0009961:	75 06                	jne    c0009969 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009963:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996c:	0f b7 c0             	movzx  eax,ax
c000996f:	3d 24 03 00 00       	cmp    eax,0x324
c0009974:	75 06                	jne    c000997c <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009976:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000997c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000997f:	0f b7 c0             	movzx  eax,ax
c0009982:	3d 23 03 00 00       	cmp    eax,0x323
c0009987:	75 06                	jne    c000998f <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009989:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000998f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009992:	0f b7 c0             	movzx  eax,ax
c0009995:	3d 26 03 00 00       	cmp    eax,0x326
c000999a:	75 06                	jne    c00099a2 <sendKeyboardToken(KeyboardToken)+0x2de>
c000999c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a5:	0f b7 c0             	movzx  eax,ax
c00099a8:	3d 27 03 00 00       	cmp    eax,0x327
c00099ad:	75 06                	jne    c00099b5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099af:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099b8:	0f b7 c0             	movzx  eax,ax
c00099bb:	3d 22 03 00 00       	cmp    eax,0x322
c00099c0:	75 06                	jne    c00099c8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099c2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099c8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099cc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099cf:	83 f0 01             	xor    eax,0x1
c00099d2:	0f b6 c0             	movzx  eax,al
c00099d5:	85 c0                	test   eax,eax
c00099d7:	74 7c                	je     c0009a55 <sendKeyboardToken(KeyboardToken)+0x391>
c00099d9:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c00099de:	0f b6 c0             	movzx  eax,al
c00099e1:	85 c0                	test   eax,eax
c00099e3:	74 43                	je     c0009a28 <sendKeyboardToken(KeyboardToken)+0x364>
c00099e5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099e9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099ed:	85 c0                	test   eax,eax
c00099ef:	74 2b                	je     c0009a1c <sendKeyboardToken(KeyboardToken)+0x358>
c00099f1:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c00099f7:	89 d0                	mov    eax,edx
c00099f9:	c1 e0 02             	shl    eax,0x2
c00099fc:	01 d0                	add    eax,edx
c00099fe:	01 c0                	add    eax,eax
c0009a00:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a08:	0f b7 c0             	movzx  eax,ax
c0009a0b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a0e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a13:	01 d0                	add    eax,edx
c0009a15:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a1a:	eb 71                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a1c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a26:	eb 65                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a28:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a2d:	85 c0                	test   eax,eax
c0009a2f:	74 18                	je     c0009a49 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a31:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a36:	0f b6 c0             	movzx  eax,al
c0009a39:	83 ec 0c             	sub    esp,0xc
c0009a3c:	50                   	push   eax
c0009a3d:	e8 ac fb ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009a42:	83 c4 10             	add    esp,0x10
c0009a45:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a49:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a53:	eb 38                	jmp    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a58:	0f b7 c0             	movzx  eax,ax
c0009a5b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a60:	75 2b                	jne    c0009a8d <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a62:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a67:	85 c0                	test   eax,eax
c0009a69:	74 18                	je     c0009a83 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a6b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a70:	0f b6 c0             	movzx  eax,al
c0009a73:	83 ec 0c             	sub    esp,0xc
c0009a76:	50                   	push   eax
c0009a77:	e8 72 fb ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a83:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a8d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a90:	83 f0 01             	xor    eax,0x1
c0009a93:	0f b6 c0             	movzx  eax,al
c0009a96:	85 c0                	test   eax,eax
c0009a98:	74 5a                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a9d:	83 f0 01             	xor    eax,0x1
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	85 c0                	test   eax,eax
c0009aa5:	74 4d                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009aac:	83 f0 01             	xor    eax,0x1
c0009aaf:	0f b6 c0             	movzx  eax,al
c0009ab2:	85 c0                	test   eax,eax
c0009ab4:	74 3e                	je     c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab9:	0f b7 c0             	movzx  eax,ax
c0009abc:	83 f8 1f             	cmp    eax,0x1f
c0009abf:	76 0b                	jbe    c0009acc <sendKeyboardToken(KeyboardToken)+0x408>
c0009ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac4:	0f b7 c0             	movzx  eax,ax
c0009ac7:	83 f8 7e             	cmp    eax,0x7e
c0009aca:	76 16                	jbe    c0009ae2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009acf:	0f b7 c0             	movzx  eax,ax
c0009ad2:	83 f8 0a             	cmp    eax,0xa
c0009ad5:	74 0b                	je     c0009ae2 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ada:	0f b7 c0             	movzx  eax,ax
c0009add:	83 f8 08             	cmp    eax,0x8
c0009ae0:	75 12                	jne    c0009af4 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae5:	0f b6 c0             	movzx  eax,al
c0009ae8:	83 ec 0c             	sub    esp,0xc
c0009aeb:	50                   	push   eax
c0009aec:	e8 fd fa ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009af1:	83 c4 10             	add    esp,0x10
c0009af4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009af7:	83 f0 01             	xor    eax,0x1
c0009afa:	0f b6 c0             	movzx  eax,al
c0009afd:	85 c0                	test   eax,eax
c0009aff:	74 5d                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b01:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b04:	83 f0 01             	xor    eax,0x1
c0009b07:	0f b6 c0             	movzx  eax,al
c0009b0a:	85 c0                	test   eax,eax
c0009b0c:	74 50                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b0e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b13:	0f b6 c0             	movzx  eax,al
c0009b16:	85 c0                	test   eax,eax
c0009b18:	74 44                	je     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1d:	0f b7 c0             	movzx  eax,ax
c0009b20:	83 f8 3f             	cmp    eax,0x3f
c0009b23:	76 39                	jbe    c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b28:	0f b7 c0             	movzx  eax,ax
c0009b2b:	83 f8 7f             	cmp    eax,0x7f
c0009b2e:	77 2e                	ja     c0009b5e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b33:	88 c2                	mov    dl,al
c0009b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b38:	0f b7 c0             	movzx  eax,ax
c0009b3b:	83 f8 5f             	cmp    eax,0x5f
c0009b3e:	76 04                	jbe    c0009b44 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b40:	b0 20                	mov    al,0x20
c0009b42:	eb 02                	jmp    c0009b46 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b44:	b0 00                	mov    al,0x0
c0009b46:	89 d1                	mov    ecx,edx
c0009b48:	29 c1                	sub    ecx,eax
c0009b4a:	89 c8                	mov    eax,ecx
c0009b4c:	83 e8 40             	sub    eax,0x40
c0009b4f:	0f b6 c0             	movzx  eax,al
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	50                   	push   eax
c0009b56:	e8 93 fa ff ff       	call   c00095ee <sendKeyToTerminal(unsigned char)>
c0009b5b:	83 c4 10             	add    esp,0x10
c0009b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b61:	0f b7 c0             	movzx  eax,ax
c0009b64:	3d 00 03 00 00       	cmp    eax,0x300
c0009b69:	75 12                	jne    c0009b7d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b6b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b6e:	83 f0 01             	xor    eax,0x1
c0009b71:	0f b6 c0             	movzx  eax,al
c0009b74:	85 c0                	test   eax,eax
c0009b76:	74 05                	je     c0009b7d <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b78:	e8 84 73 00 00       	call   c0010f01 <doTerminalCycle()>
c0009b7d:	90                   	nop
c0009b7e:	c9                   	leave  
c0009b7f:	c3                   	ret    

c0009b80 <clearInternalKeybuffer(VgaText*)>:
c0009b80:	55                   	push   ebp
c0009b81:	89 e5                	mov    ebp,esp
c0009b83:	83 ec 08             	sub    esp,0x8
c0009b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b89:	05 02 01 00 00       	add    eax,0x102
c0009b8e:	83 ec 0c             	sub    esp,0xc
c0009b91:	50                   	push   eax
c0009b92:	e8 d9 69 ff ff       	call   c0000570 <strlen>
c0009b97:	83 c4 10             	add    esp,0x10
c0009b9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b9d:	81 c2 02 01 00 00    	add    edx,0x102
c0009ba3:	83 ec 04             	sub    esp,0x4
c0009ba6:	50                   	push   eax
c0009ba7:	6a 00                	push   0x0
c0009ba9:	52                   	push   edx
c0009baa:	e8 41 69 ff ff       	call   c00004f0 <memset>
c0009baf:	83 c4 10             	add    esp,0x10
c0009bb2:	90                   	nop
c0009bb3:	c9                   	leave  
c0009bb4:	c3                   	ret    

c0009bb5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009bb5:	55                   	push   ebp
c0009bb6:	89 e5                	mov    ebp,esp
c0009bb8:	83 ec 18             	sub    esp,0x18
c0009bbb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bc0:	85 c0                	test   eax,eax
c0009bc2:	74 2a                	je     c0009bee <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bc4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bca:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009bd0:	83 ec 04             	sub    esp,0x4
c0009bd3:	68 40 a3 02 c0       	push   0xc002a340
c0009bd8:	83 ec 08             	sub    esp,0x8
c0009bdb:	89 e2                	mov    edx,esp
c0009bdd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009be0:	89 02                	mov    DWORD PTR [edx],eax
c0009be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009be5:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009be9:	ff d1                	call   ecx
c0009beb:	83 c4 10             	add    esp,0x10
c0009bee:	fb                   	sti    
c0009bef:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bfa:	0f 84 08 01 00 00    	je     c0009d08 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c03:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c09:	0f be c0             	movsx  eax,al
c0009c0c:	85 c0                	test   eax,eax
c0009c0e:	75 27                	jne    c0009c37 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c10:	fa                   	cli    
c0009c11:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c16:	83 c0 01             	add    eax,0x1
c0009c19:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0009c1e:	e8 f1 ba 00 00       	call   c0015714 <schedule()>
c0009c23:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0009c2b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0009c30:	85 c0                	test   eax,eax
c0009c32:	75 cc                	jne    c0009c00 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c34:	fb                   	sti    
c0009c35:	eb c9                	jmp    c0009c00 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c3a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c3d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c43:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c49:	88 10                	mov    BYTE PTR [eax],dl
c0009c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c4e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c54:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c57:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c5b:	83 f8 03             	cmp    eax,0x3
c0009c5e:	75 1e                	jne    c0009c7e <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c60:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c6a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c70:	83 ec 08             	sub    esp,0x8
c0009c73:	6a 02                	push   0x2
c0009c75:	50                   	push   eax
c0009c76:	e8 74 61 00 00       	call   c000fdef <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c7b:	83 c4 10             	add    esp,0x10
c0009c7e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c82:	83 f8 1c             	cmp    eax,0x1c
c0009c85:	75 1e                	jne    c0009ca5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009c87:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c91:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c97:	83 ec 08             	sub    esp,0x8
c0009c9a:	6a 09                	push   0x9
c0009c9c:	50                   	push   eax
c0009c9d:	e8 4d 61 00 00       	call   c000fdef <KeRaiseSignal(SigHandlerBlock*, int)>
c0009ca2:	83 c4 10             	add    esp,0x10
c0009ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ca8:	05 02 01 00 00       	add    eax,0x102
c0009cad:	83 ec 0c             	sub    esp,0xc
c0009cb0:	50                   	push   eax
c0009cb1:	e8 ba 68 ff ff       	call   c0000570 <strlen>
c0009cb6:	83 c4 10             	add    esp,0x10
c0009cb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cbc:	81 c2 02 01 00 00    	add    edx,0x102
c0009cc2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cc5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cce:	83 ec 04             	sub    esp,0x4
c0009cd1:	50                   	push   eax
c0009cd2:	51                   	push   ecx
c0009cd3:	52                   	push   edx
c0009cd4:	e8 f7 66 ff ff       	call   c00003d0 <memmove>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ce0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009ce4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009ce8:	83 f8 0a             	cmp    eax,0xa
c0009ceb:	74 16                	je     c0009d03 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009ced:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf1:	83 f8 03             	cmp    eax,0x3
c0009cf4:	74 0d                	je     c0009d03 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009cf6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfa:	83 f8 1c             	cmp    eax,0x1c
c0009cfd:	0f 85 f3 fe ff ff    	jne    c0009bf6 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d06:	eb 03                	jmp    c0009d0b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d0b:	c9                   	leave  
c0009d0c:	c3                   	ret    
c0009d0d:	90                   	nop

c0009d0e <Keyboard::Keyboard(char const*)>:
c0009d0e:	83 ec 0c             	sub    esp,0xc
c0009d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d15:	83 ec 08             	sub    esp,0x8
c0009d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d1c:	50                   	push   eax
c0009d1d:	e8 a2 f4 ff ff       	call   c00091c4 <Device::Device(char const*)>
c0009d22:	83 c4 10             	add    esp,0x10
c0009d25:	ba 24 1d 02 c0       	mov    edx,0xc0021d24
c0009d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2e:	89 10                	mov    DWORD PTR [eax],edx
c0009d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d34:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d3e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d45:	90                   	nop
c0009d46:	83 c4 0c             	add    esp,0xc
c0009d49:	c3                   	ret    

c0009d4a <Keyboard::~Keyboard()>:
c0009d4a:	83 ec 0c             	sub    esp,0xc
c0009d4d:	ba 24 1d 02 c0       	mov    edx,0xc0021d24
c0009d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d56:	89 10                	mov    DWORD PTR [eax],edx
c0009d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5c:	83 ec 0c             	sub    esp,0xc
c0009d5f:	50                   	push   eax
c0009d60:	e8 ff f1 ff ff       	call   c0008f64 <Device::~Device()>
c0009d65:	83 c4 10             	add    esp,0x10
c0009d68:	90                   	nop
c0009d69:	83 c4 0c             	add    esp,0xc
c0009d6c:	c3                   	ret    
c0009d6d:	90                   	nop

c0009d6e <Keyboard::~Keyboard()>:
c0009d6e:	83 ec 0c             	sub    esp,0xc
c0009d71:	83 ec 0c             	sub    esp,0xc
c0009d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d78:	e8 cd ff ff ff       	call   c0009d4a <Keyboard::~Keyboard()>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	83 ec 08             	sub    esp,0x8
c0009d83:	68 5c 01 00 00       	push   0x15c
c0009d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8c:	e8 33 29 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	83 c4 0c             	add    esp,0xc
c0009d97:	c3                   	ret    

c0009d98 <LogicalDisk::close(int, int, void*)>:
c0009d98:	83 c8 ff             	or     eax,0xffffffff
c0009d9b:	c3                   	ret    

c0009d9c <LogicalDisk::~LogicalDisk()>:
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	ba 9c 1d 02 c0       	mov    edx,0xc0021d9c
c0009da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009da8:	89 10                	mov    DWORD PTR [eax],edx
c0009daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dae:	83 ec 0c             	sub    esp,0xc
c0009db1:	50                   	push   eax
c0009db2:	e8 ad f1 ff ff       	call   c0008f64 <Device::~Device()>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	90                   	nop
c0009dbb:	83 c4 0c             	add    esp,0xc
c0009dbe:	c3                   	ret    
c0009dbf:	90                   	nop

c0009dc0 <LogicalDisk::~LogicalDisk()>:
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	83 ec 0c             	sub    esp,0xc
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 cd ff ff ff       	call   c0009d9c <LogicalDisk::~LogicalDisk()>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 ec 08             	sub    esp,0x8
c0009dd5:	68 78 01 00 00       	push   0x178
c0009dda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dde:	e8 e1 28 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0009de3:	83 c4 10             	add    esp,0x10
c0009de6:	83 c4 0c             	add    esp,0xc
c0009de9:	c3                   	ret    

c0009dea <LogicalDisk::open(int, int, void*)>:
c0009dea:	83 ec 18             	sub    esp,0x18
c0009ded:	68 50 1d 02 c0       	push   0xc0021d50
c0009df2:	e8 af 4e 00 00       	call   c000eca6 <KePanic(char const*)>
c0009df7:	83 c8 ff             	or     eax,0xffffffff
c0009dfa:	83 c4 1c             	add    esp,0x1c
c0009dfd:	c3                   	ret    

c0009dfe <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009dfe:	53                   	push   ebx
c0009dff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e0b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e11:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e17:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e1d:	77 10                	ja     c0009e2f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e1f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e25:	89 d3                	mov    ebx,edx
c0009e27:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e2d:	72 05                	jb     c0009e34 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e2f:	83 c8 ff             	or     eax,0xffffffff
c0009e32:	89 c2                	mov    edx,eax
c0009e34:	5b                   	pop    ebx
c0009e35:	c3                   	ret    

c0009e36 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e36:	56                   	push   esi
c0009e37:	83 c8 ff             	or     eax,0xffffffff
c0009e3a:	53                   	push   ebx
c0009e3b:	89 c2                	mov    edx,eax
c0009e3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e41:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e49:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e4f:	77 27                	ja     c0009e78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e51:	89 d8                	mov    eax,ebx
c0009e53:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e59:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e64:	89 c2                	mov    edx,eax
c0009e66:	73 10                	jae    c0009e78 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e68:	89 c8                	mov    eax,ecx
c0009e6a:	89 da                	mov    edx,ebx
c0009e6c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e72:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e78:	5b                   	pop    ebx
c0009e79:	5e                   	pop    esi
c0009e7a:	c3                   	ret    
c0009e7b:	90                   	nop

c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e7c:	83 ec 1c             	sub    esp,0x1c
c0009e7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e93:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea2:	83 ec 08             	sub    esp,0x8
c0009ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ea9:	50                   	push   eax
c0009eaa:	e8 15 f3 ff ff       	call   c00091c4 <Device::Device(char const*)>
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	ba 9c 1d 02 c0       	mov    edx,0xc0021d9c
c0009eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ebb:	89 10                	mov    DWORD PTR [eax],edx
c0009ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ecc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009eec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009ef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ef4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ef8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009efe:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f0f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f15:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f23:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f2d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f37:	90                   	nop
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	c3                   	ret    

c0009f3c <LogicalDisk::assignDriveLetter()>:
c0009f3c:	55                   	push   ebp
c0009f3d:	57                   	push   edi
c0009f3e:	56                   	push   esi
c0009f3f:	53                   	push   ebx
c0009f40:	83 ec 14             	sub    esp,0x14
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f4d:	b0 41                	mov    al,0x41
c0009f4f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f55:	84 d2                	test   dl,dl
c0009f57:	75 02                	jne    c0009f5b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f59:	b0 43                	mov    al,0x43
c0009f5b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f61:	0f b6 ca             	movzx  ecx,dl
c0009f64:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f68:	0f be e8             	movsx  ebp,al
c0009f6b:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009f71:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f75:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f79:	3c 43                	cmp    al,0x43
c0009f7b:	75 10                	jne    c0009f8d <LogicalDisk::assignDriveLetter()+0x51>
c0009f7d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f84:	75 5a                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f86:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009f8b:	75 53                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f8d:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009f90:	ba 01 00 00 00       	mov    edx,0x1
c0009f95:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f98:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009f9b:	d3 e2                	shl    edx,cl
c0009f9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa1:	89 d7                	mov    edi,edx
c0009fa3:	89 d6                	mov    esi,edx
c0009fa5:	c1 ff 1f             	sar    edi,0x1f
c0009fa8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fac:	21 f9                	and    ecx,edi
c0009fae:	09 d1                	or     ecx,edx
c0009fb0:	75 2e                	jne    c0009fe0 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fba:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fc0:	09 f2                	or     edx,esi
c0009fc2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fc5:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009fcb:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c0009fd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fd6:	09 fa                	or     edx,edi
c0009fd8:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c0009fde:	eb 0d                	jmp    c0009fed <LogicalDisk::assignDriveLetter()+0xb1>
c0009fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0009fe3:	45                   	inc    ebp
c0009fe4:	88 d0                	mov    al,dl
c0009fe6:	80 fa 5b             	cmp    dl,0x5b
c0009fe9:	75 8e                	jne    c0009f79 <LogicalDisk::assignDriveLetter()+0x3d>
c0009feb:	31 c0                	xor    eax,eax
c0009fed:	83 c4 14             	add    esp,0x14
c0009ff0:	5b                   	pop    ebx
c0009ff1:	5e                   	pop    esi
c0009ff2:	5f                   	pop    edi
c0009ff3:	5d                   	pop    ebp
c0009ff4:	c3                   	ret    
c0009ff5:	90                   	nop

c0009ff6 <LogicalDisk::mount()>:
c0009ff6:	56                   	push   esi
c0009ff7:	53                   	push   ebx
c0009ff8:	53                   	push   ebx
c0009ff9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009ffd:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a003:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a00d:	85 db                	test   ebx,ebx
c000a00f:	74 27                	je     c000a038 <LogicalDisk::mount()+0x42>
c000a011:	51                   	push   ecx
c000a012:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a019:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a01b:	83 e8 41             	sub    eax,0x41
c000a01e:	50                   	push   eax
c000a01f:	56                   	push   esi
c000a020:	53                   	push   ebx
c000a021:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a024:	83 c4 10             	add    esp,0x10
c000a027:	84 c0                	test   al,al
c000a029:	74 08                	je     c000a033 <LogicalDisk::mount()+0x3d>
c000a02b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a031:	eb 07                	jmp    c000a03a <LogicalDisk::mount()+0x44>
c000a033:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a036:	eb d5                	jmp    c000a00d <LogicalDisk::mount()+0x17>
c000a038:	31 c0                	xor    eax,eax
c000a03a:	5a                   	pop    edx
c000a03b:	5b                   	pop    ebx
c000a03c:	5e                   	pop    esi
c000a03d:	c3                   	ret    

c000a03e <LogicalDisk::unmount()>:
c000a03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a042:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a04c:	c3                   	ret    
c000a04d:	90                   	nop

c000a04e <LogicalDisk::eject()>:
c000a04e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a052:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a058:	8b 10                	mov    edx,DWORD PTR [eax]
c000a05a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a05e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a061:	90                   	nop

c000a062 <LogicalDisk::unassignDriveLetter()>:
c000a062:	57                   	push   edi
c000a063:	56                   	push   esi
c000a064:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a068:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a06f:	85 c9                	test   ecx,ecx
c000a071:	75 0f                	jne    c000a082 <LogicalDisk::unassignDriveLetter()+0x20>
c000a073:	c7 44 24 0c 74 1d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021d74
c000a07b:	5e                   	pop    esi
c000a07c:	5f                   	pop    edi
c000a07d:	e9 24 4c 00 00       	jmp    c000eca6 <KePanic(char const*)>
c000a082:	83 e9 41             	sub    ecx,0x41
c000a085:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a08c:	b8 01 00 00 00       	mov    eax,0x1
c000a091:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a09c:	d3 e0                	shl    eax,cl
c000a09e:	89 c7                	mov    edi,eax
c000a0a0:	f7 d0                	not    eax
c000a0a2:	c1 ff 1f             	sar    edi,0x1f
c000a0a5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0ab:	89 fe                	mov    esi,edi
c000a0ad:	f7 d6                	not    esi
c000a0af:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0b5:	5e                   	pop    esi
c000a0b6:	5f                   	pop    edi
c000a0b7:	c3                   	ret    

c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0b8:	57                   	push   edi
c000a0b9:	56                   	push   esi
c000a0ba:	53                   	push   ebx
c000a0bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0d1:	77 41                	ja     c000a114 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0d3:	99                   	cdq    
c000a0d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0da:	01 c8                	add    eax,ecx
c000a0dc:	11 da                	adc    edx,ebx
c000a0de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0e4:	19 d7                	sbb    edi,edx
c000a0e6:	72 33                	jb     c000a11b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a0e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a0ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a0f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a0f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a0fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a102:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a108:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a10c:	5b                   	pop    ebx
c000a10d:	5e                   	pop    esi
c000a10e:	5f                   	pop    edi
c000a10f:	e9 92 0a 00 00       	jmp    c000aba6 <VCache::read(unsigned long long, int, void*)>
c000a114:	b8 05 00 00 00       	mov    eax,0x5
c000a119:	eb 05                	jmp    c000a120 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a11b:	b8 07 00 00 00       	mov    eax,0x7
c000a120:	5b                   	pop    ebx
c000a121:	5e                   	pop    esi
c000a122:	5f                   	pop    edi
c000a123:	c3                   	ret    

c000a124 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a124:	57                   	push   edi
c000a125:	56                   	push   esi
c000a126:	53                   	push   ebx
c000a127:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a12b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a12f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a133:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a137:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a13d:	77 41                	ja     c000a180 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a13f:	99                   	cdq    
c000a140:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a146:	01 c8                	add    eax,ecx
c000a148:	11 da                	adc    edx,ebx
c000a14a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a150:	19 d7                	sbb    edi,edx
c000a152:	72 33                	jb     c000a187 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a154:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a15a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a160:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a164:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a168:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a16e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a174:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a178:	5b                   	pop    ebx
c000a179:	5e                   	pop    esi
c000a17a:	5f                   	pop    edi
c000a17b:	e9 24 09 00 00       	jmp    c000aaa4 <VCache::write(unsigned long long, int, void*)>
c000a180:	b8 05 00 00 00       	mov    eax,0x5
c000a185:	eb 05                	jmp    c000a18c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a187:	b8 07 00 00 00       	mov    eax,0x7
c000a18c:	5b                   	pop    ebx
c000a18d:	5e                   	pop    esi
c000a18e:	5f                   	pop    edi
c000a18f:	c3                   	ret    

c000a190 <Mouse::Mouse(char const*)>:
c000a190:	83 ec 0c             	sub    esp,0xc
c000a193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a197:	83 ec 08             	sub    esp,0x8
c000a19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19e:	50                   	push   eax
c000a19f:	e8 20 f0 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a1a4:	83 c4 10             	add    esp,0x10
c000a1a7:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c000a1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b0:	89 10                	mov    DWORD PTR [eax],edx
c000a1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1b6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1c0:	90                   	nop
c000a1c1:	83 c4 0c             	add    esp,0xc
c000a1c4:	c3                   	ret    
c000a1c5:	90                   	nop
c000a1c6:	66 90                	xchg   ax,ax

c000a1c8 <Mouse::~Mouse()>:
c000a1c8:	83 ec 0c             	sub    esp,0xc
c000a1cb:	ba c8 1d 02 c0       	mov    edx,0xc0021dc8
c000a1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1da:	83 ec 0c             	sub    esp,0xc
c000a1dd:	50                   	push   eax
c000a1de:	e8 81 ed ff ff       	call   c0008f64 <Device::~Device()>
c000a1e3:	83 c4 10             	add    esp,0x10
c000a1e6:	90                   	nop
c000a1e7:	83 c4 0c             	add    esp,0xc
c000a1ea:	c3                   	ret    
c000a1eb:	90                   	nop

c000a1ec <Mouse::~Mouse()>:
c000a1ec:	83 ec 0c             	sub    esp,0xc
c000a1ef:	83 ec 0c             	sub    esp,0xc
c000a1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1f6:	e8 cd ff ff ff       	call   c000a1c8 <Mouse::~Mouse()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	83 ec 08             	sub    esp,0x8
c000a201:	68 58 01 00 00       	push   0x158
c000a206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20a:	e8 b5 24 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000a20f:	83 c4 10             	add    esp,0x10
c000a212:	83 c4 0c             	add    esp,0xc
c000a215:	c3                   	ret    

c000a216 <NIC::getMAC()>:
c000a216:	31 c0                	xor    eax,eax
c000a218:	31 d2                	xor    edx,edx
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <NIC::write(int, unsigned char*, int*)>:
c000a21c:	b8 01 00 00 00       	mov    eax,0x1
c000a221:	c3                   	ret    

c000a222 <NIC::NIC(char const*)>:
c000a222:	83 ec 0c             	sub    esp,0xc
c000a225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a229:	83 ec 08             	sub    esp,0x8
c000a22c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a230:	50                   	push   eax
c000a231:	e8 8e ef ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a236:	83 c4 10             	add    esp,0x10
c000a239:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000a23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a242:	89 10                	mov    DWORD PTR [eax],edx
c000a244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a248:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a252:	90                   	nop
c000a253:	83 c4 0c             	add    esp,0xc
c000a256:	c3                   	ret    
c000a257:	90                   	nop

c000a258 <NIC::~NIC()>:
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	ba f4 1d 02 c0       	mov    edx,0xc0021df4
c000a260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a264:	89 10                	mov    DWORD PTR [eax],edx
c000a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26a:	83 ec 0c             	sub    esp,0xc
c000a26d:	50                   	push   eax
c000a26e:	e8 f1 ec ff ff       	call   c0008f64 <Device::~Device()>
c000a273:	83 c4 10             	add    esp,0x10
c000a276:	90                   	nop
c000a277:	83 c4 0c             	add    esp,0xc
c000a27a:	c3                   	ret    
c000a27b:	90                   	nop

c000a27c <NIC::~NIC()>:
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	83 ec 0c             	sub    esp,0xc
c000a282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a286:	e8 cd ff ff ff       	call   c000a258 <NIC::~NIC()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	83 ec 08             	sub    esp,0x8
c000a291:	68 58 01 00 00       	push   0x158
c000a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29a:	e8 25 24 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000a29f:	83 c4 10             	add    esp,0x10
c000a2a2:	83 c4 0c             	add    esp,0xc
c000a2a5:	c3                   	ret    

c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2a6:	55                   	push   ebp
c000a2a7:	57                   	push   edi
c000a2a8:	56                   	push   esi
c000a2a9:	53                   	push   ebx
c000a2aa:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2b0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2b7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2be:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2c5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2d0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2d4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2db:	e8 e0 ef ff ff       	call   c00092c0 <Device::getName()>
c000a2e0:	5a                   	pop    edx
c000a2e1:	59                   	pop    ecx
c000a2e2:	50                   	push   eax
c000a2e3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2e7:	55                   	push   ebp
c000a2e8:	e8 53 63 ff ff       	call   c0000640 <strcpy>
c000a2ed:	5b                   	pop    ebx
c000a2ee:	58                   	pop    eax
c000a2ef:	68 20 1e 02 c0       	push   0xc0021e20
c000a2f4:	55                   	push   ebp
c000a2f5:	e8 46 65 ff ff       	call   c0000840 <strcat>
c000a2fa:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a301:	e8 59 46 00 00       	call   c000e95f <malloc>
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	89 c3                	mov    ebx,eax
c000a30b:	57                   	push   edi
c000a30c:	56                   	push   esi
c000a30d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a311:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a315:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a31c:	55                   	push   ebp
c000a31d:	50                   	push   eax
c000a31e:	e8 59 fb ff ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a323:	83 c4 14             	add    esp,0x14
c000a326:	53                   	push   ebx
c000a327:	e8 10 fc ff ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c000a32c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a32f:	e8 c2 fc ff ff       	call   c0009ff6 <LogicalDisk::mount()>
c000a334:	58                   	pop    eax
c000a335:	5a                   	pop    edx
c000a336:	53                   	push   ebx
c000a337:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a33e:	e8 1f ed ff ff       	call   c0009062 <Device::addChild(Device*)>
c000a343:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a349:	5b                   	pop    ebx
c000a34a:	5e                   	pop    esi
c000a34b:	5f                   	pop    edi
c000a34c:	5d                   	pop    ebp
c000a34d:	c3                   	ret    

c000a34e <createPartitionsForDisk(PhysicalDisk*)>:
c000a34e:	55                   	push   ebp
c000a34f:	57                   	push   edi
c000a350:	56                   	push   esi
c000a351:	53                   	push   ebx
c000a352:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a358:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a35f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a365:	3d 00 02 00 00       	cmp    eax,0x200
c000a36a:	74 27                	je     c000a393 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a36c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a372:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a378:	83 ec 10             	sub    esp,0x10
c000a37b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a37f:	99                   	cdq    
c000a380:	c1 e6 0a             	shl    esi,0xa
c000a383:	52                   	push   edx
c000a384:	89 fd                	mov    ebp,edi
c000a386:	50                   	push   eax
c000a387:	55                   	push   ebp
c000a388:	56                   	push   esi
c000a389:	e8 d6 5c 01 00       	call   c0020064 <__udivdi3>
c000a38e:	e9 b9 00 00 00       	jmp    c000a44c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a393:	83 ec 0c             	sub    esp,0xc
c000a396:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a398:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a39c:	56                   	push   esi
c000a39d:	6a 01                	push   0x1
c000a39f:	6a 00                	push   0x0
c000a3a1:	6a 00                	push   0x0
c000a3a3:	53                   	push   ebx
c000a3a4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3a7:	83 c4 20             	add    esp,0x20
c000a3aa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3b2:	75 0a                	jne    c000a3be <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3b4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3bc:	74 2c                	je     c000a3ea <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3be:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3c4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3d0:	83 ec 10             	sub    esp,0x10
c000a3d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3d7:	89 f7                	mov    edi,esi
c000a3d9:	c1 e0 0a             	shl    eax,0xa
c000a3dc:	c1 ff 1f             	sar    edi,0x1f
c000a3df:	57                   	push   edi
c000a3e0:	56                   	push   esi
c000a3e1:	52                   	push   edx
c000a3e2:	50                   	push   eax
c000a3e3:	e8 7c 5c 01 00       	call   c0020064 <__udivdi3>
c000a3e8:	eb 62                	jmp    c000a44c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ea:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a3f1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a3f8:	89 cf                	mov    edi,ecx
c000a3fa:	83 e2 7f             	and    edx,0x7f
c000a3fd:	83 e7 7f             	and    edi,0x7f
c000a400:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a407:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a40a:	83 e0 7f             	and    eax,0x7f
c000a40d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a410:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a417:	83 e0 7f             	and    eax,0x7f
c000a41a:	01 d0                	add    eax,edx
c000a41c:	89 c5                	mov    ebp,eax
c000a41e:	84 c0                	test   al,al
c000a420:	74 41                	je     c000a463 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a422:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a428:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a42e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a434:	83 ec 10             	sub    esp,0x10
c000a437:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a43b:	89 f7                	mov    edi,esi
c000a43d:	c1 e0 0a             	shl    eax,0xa
c000a440:	c1 ff 1f             	sar    edi,0x1f
c000a443:	57                   	push   edi
c000a444:	56                   	push   esi
c000a445:	52                   	push   edx
c000a446:	50                   	push   eax
c000a447:	e8 18 5c 01 00       	call   c0020064 <__udivdi3>
c000a44c:	83 c4 14             	add    esp,0x14
c000a44f:	52                   	push   edx
c000a450:	50                   	push   eax
c000a451:	6a 00                	push   0x0
c000a453:	6a 00                	push   0x0
c000a455:	53                   	push   ebx
c000a456:	e8 4b fe ff ff       	call   c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a45b:	83 c4 20             	add    esp,0x20
c000a45e:	e9 73 01 00 00       	jmp    c000a5d6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a463:	89 f0                	mov    eax,esi
c000a465:	31 c9                	xor    ecx,ecx
c000a467:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a46e:	75 02                	jne    c000a472 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a470:	89 cd                	mov    ebp,ecx
c000a472:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a479:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a480:	c1 e2 08             	shl    edx,0x8
c000a483:	c1 e6 10             	shl    esi,0x10
c000a486:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a48e:	09 f2                	or     edx,esi
c000a490:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a498:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a49f:	83 c0 10             	add    eax,0x10
c000a4a2:	09 f2                	or     edx,esi
c000a4a4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4ab:	c1 e6 18             	shl    esi,0x18
c000a4ae:	09 f2                	or     edx,esi
c000a4b0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4b7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4bb:	c1 e6 10             	shl    esi,0x10
c000a4be:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4c5:	c1 e2 08             	shl    edx,0x8
c000a4c8:	09 f2                	or     edx,esi
c000a4ca:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4d1:	09 f2                	or     edx,esi
c000a4d3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4da:	c1 e6 18             	shl    esi,0x18
c000a4dd:	09 f2                	or     edx,esi
c000a4df:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4e3:	41                   	inc    ecx
c000a4e4:	83 f9 04             	cmp    ecx,0x4
c000a4e7:	0f 85 7a ff ff ff    	jne    c000a467 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f1:	83 f0 01             	xor    eax,0x1
c000a4f4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a4f8:	75 4f                	jne    c000a549 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4fe:	83 f0 01             	xor    eax,0x1
c000a501:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a505:	75 42                	jne    c000a549 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a507:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a50f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a517:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a51d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a523:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a529:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a52d:	89 f7                	mov    edi,esi
c000a52f:	c1 e0 0a             	shl    eax,0xa
c000a532:	c1 ff 1f             	sar    edi,0x1f
c000a535:	57                   	push   edi
c000a536:	56                   	push   esi
c000a537:	52                   	push   edx
c000a538:	50                   	push   eax
c000a539:	e8 26 5b 01 00       	call   c0020064 <__udivdi3>
c000a53e:	83 c4 10             	add    esp,0x10
c000a541:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a545:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a549:	89 e8                	mov    eax,ebp
c000a54b:	0f b6 e8             	movzx  ebp,al
c000a54e:	85 ed                	test   ebp,ebp
c000a550:	74 50                	je     c000a5a2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a556:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a55a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a55e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a562:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a566:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a56a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a56e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a57a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a57e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a582:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a586:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a58a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a58e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a592:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a596:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a59a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a59e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5a2:	31 ed                	xor    ebp,ebp
c000a5a4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5a8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5ac:	89 f8                	mov    eax,edi
c000a5ae:	09 f0                	or     eax,esi
c000a5b0:	74 1e                	je     c000a5d0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5b2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5b6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ba:	89 d1                	mov    ecx,edx
c000a5bc:	09 c1                	or     ecx,eax
c000a5be:	74 10                	je     c000a5d0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5c0:	83 ec 0c             	sub    esp,0xc
c000a5c3:	57                   	push   edi
c000a5c4:	56                   	push   esi
c000a5c5:	52                   	push   edx
c000a5c6:	50                   	push   eax
c000a5c7:	53                   	push   ebx
c000a5c8:	e8 d9 fc ff ff       	call   c000a2a6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5cd:	83 c4 20             	add    esp,0x20
c000a5d0:	45                   	inc    ebp
c000a5d1:	83 fd 04             	cmp    ebp,0x4
c000a5d4:	75 ce                	jne    c000a5a4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5d6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5dc:	5b                   	pop    ebx
c000a5dd:	5e                   	pop    esi
c000a5de:	5f                   	pop    edi
c000a5df:	5d                   	pop    ebp
c000a5e0:	c3                   	ret    
c000a5e1:	66 90                	xchg   ax,ax
c000a5e3:	90                   	nop

c000a5e4 <Serial::Serial(char const*)>:
c000a5e4:	83 ec 0c             	sub    esp,0xc
c000a5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a5eb:	83 ec 08             	sub    esp,0x8
c000a5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a5f2:	50                   	push   eax
c000a5f3:	e8 cc eb ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a5f8:	83 c4 10             	add    esp,0x10
c000a5fb:	ba 34 1e 02 c0       	mov    edx,0xc0021e34
c000a600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a604:	89 10                	mov    DWORD PTR [eax],edx
c000a606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a614:	90                   	nop
c000a615:	83 c4 0c             	add    esp,0xc
c000a618:	c3                   	ret    
c000a619:	90                   	nop
c000a61a:	66 90                	xchg   ax,ax

c000a61c <Serial::~Serial()>:
c000a61c:	83 ec 0c             	sub    esp,0xc
c000a61f:	ba 34 1e 02 c0       	mov    edx,0xc0021e34
c000a624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a628:	89 10                	mov    DWORD PTR [eax],edx
c000a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62e:	83 ec 0c             	sub    esp,0xc
c000a631:	50                   	push   eax
c000a632:	e8 2d e9 ff ff       	call   c0008f64 <Device::~Device()>
c000a637:	83 c4 10             	add    esp,0x10
c000a63a:	90                   	nop
c000a63b:	83 c4 0c             	add    esp,0xc
c000a63e:	c3                   	ret    
c000a63f:	90                   	nop

c000a640 <Serial::~Serial()>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	83 ec 0c             	sub    esp,0xc
c000a646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64a:	e8 cd ff ff ff       	call   c000a61c <Serial::~Serial()>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	83 ec 08             	sub    esp,0x8
c000a655:	68 58 01 00 00       	push   0x158
c000a65a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65e:	e8 61 20 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000a663:	83 c4 10             	add    esp,0x10
c000a666:	83 c4 0c             	add    esp,0xc
c000a669:	c3                   	ret    
c000a66a:	66 90                	xchg   ax,ax

c000a66c <Timer::Timer(char const*)>:
c000a66c:	83 ec 0c             	sub    esp,0xc
c000a66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a673:	83 ec 08             	sub    esp,0x8
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	50                   	push   eax
c000a67b:	e8 44 eb ff ff       	call   c00091c4 <Device::Device(char const*)>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000a688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68c:	89 10                	mov    DWORD PTR [eax],edx
c000a68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a692:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a69c:	90                   	nop
c000a69d:	83 c4 0c             	add    esp,0xc
c000a6a0:	c3                   	ret    
c000a6a1:	90                   	nop
c000a6a2:	66 90                	xchg   ax,ax

c000a6a4 <Timer::~Timer()>:
c000a6a4:	83 ec 0c             	sub    esp,0xc
c000a6a7:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000a6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b0:	89 10                	mov    DWORD PTR [eax],edx
c000a6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b6:	83 ec 0c             	sub    esp,0xc
c000a6b9:	50                   	push   eax
c000a6ba:	e8 a5 e8 ff ff       	call   c0008f64 <Device::~Device()>
c000a6bf:	83 c4 10             	add    esp,0x10
c000a6c2:	90                   	nop
c000a6c3:	83 c4 0c             	add    esp,0xc
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Timer::~Timer()>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	83 ec 0c             	sub    esp,0xc
c000a6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d2:	e8 cd ff ff ff       	call   c000a6a4 <Timer::~Timer()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	83 ec 08             	sub    esp,0x8
c000a6dd:	68 5c 01 00 00       	push   0x15c
c000a6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6e6:	e8 d9 1f 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000a6eb:	83 c4 10             	add    esp,0x10
c000a6ee:	83 c4 0c             	add    esp,0xc
c000a6f1:	c3                   	ret    

c000a6f2 <Timer::read()>:
c000a6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a6fc:	c3                   	ret    

c000a6fd <setupTimer(int)>:
c000a6fd:	53                   	push   ebx
c000a6fe:	83 ec 14             	sub    esp,0x14
c000a701:	68 5c 01 00 00       	push   0x15c
c000a706:	e8 54 42 00 00       	call   c000e95f <malloc>
c000a70b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a70e:	89 c3                	mov    ebx,eax
c000a710:	e8 cf 51 01 00       	call   c001f8e4 <PIT::PIT()>
c000a715:	58                   	pop    eax
c000a716:	5a                   	pop    edx
c000a717:	53                   	push   ebx
c000a718:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a71e:	e8 3f e9 ff ff       	call   c0009062 <Device::addChild(Device*)>
c000a723:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a725:	6a 00                	push   0x0
c000a727:	6a 00                	push   0x0
c000a729:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a72d:	53                   	push   ebx
c000a72e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a731:	89 d8                	mov    eax,ebx
c000a733:	83 c4 28             	add    esp,0x28
c000a736:	5b                   	pop    ebx
c000a737:	c3                   	ret    

c000a738 <timerHandler(unsigned int)>:
c000a738:	57                   	push   edi
c000a739:	56                   	push   esi
c000a73a:	53                   	push   ebx
c000a73b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a73f:	01 3d ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,edi
c000a745:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a74c:	0f 84 02 01 00 00    	je     c000a854 <timerHandler(unsigned int)+0x11c>
c000a752:	fa                   	cli    
c000a753:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000a759:	83 ec 0c             	sub    esp,0xc
c000a75c:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a761:	e8 96 5c 01 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a766:	83 c4 10             	add    esp,0x10
c000a769:	84 c0                	test   al,al
c000a76b:	0f 85 9f 00 00 00    	jne    c000a810 <timerHandler(unsigned int)+0xd8>
c000a771:	83 ec 0c             	sub    esp,0xc
c000a774:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a779:	e8 9a 5c 01 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a77e:	83 c4 10             	add    esp,0x10
c000a781:	89 c6                	mov    esi,eax
c000a783:	90                   	nop
c000a784:	83 ec 0c             	sub    esp,0xc
c000a787:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a78c:	e8 87 5c 01 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a791:	c7 04 24 c0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6c0
c000a798:	89 c3                	mov    ebx,eax
c000a79a:	e8 81 5c 01 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a79f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7a2:	83 c4 10             	add    esp,0x10
c000a7a5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7ab:	77 23                	ja     c000a7d0 <timerHandler(unsigned int)+0x98>
c000a7ad:	83 ec 0c             	sub    esp,0xc
c000a7b0:	53                   	push   ebx
c000a7b1:	e8 7e b2 00 00       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c000a7b6:	83 c4 10             	add    esp,0x10
c000a7b9:	39 de                	cmp    esi,ebx
c000a7bb:	75 27                	jne    c000a7e4 <timerHandler(unsigned int)+0xac>
c000a7bd:	83 ec 0c             	sub    esp,0xc
c000a7c0:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7c5:	e8 4e 5c 01 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ca:	89 c6                	mov    esi,eax
c000a7cc:	eb 12                	jmp    c000a7e0 <timerHandler(unsigned int)+0xa8>
c000a7ce:	66 90                	xchg   ax,ax
c000a7d0:	50                   	push   eax
c000a7d1:	50                   	push   eax
c000a7d2:	53                   	push   ebx
c000a7d3:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7d8:	e8 ff 5c 01 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	83 c4 10             	add    esp,0x10
c000a7e3:	90                   	nop
c000a7e4:	83 ec 0c             	sub    esp,0xc
c000a7e7:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a7ec:	e8 0b 5c 01 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	84 c0                	test   al,al
c000a7f6:	75 18                	jne    c000a810 <timerHandler(unsigned int)+0xd8>
c000a7f8:	83 ec 0c             	sub    esp,0xc
c000a7fb:	68 c0 d6 02 c0       	push   0xc002d6c0
c000a800:	e8 13 5c 01 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a805:	83 c4 10             	add    esp,0x10
c000a808:	39 f0                	cmp    eax,esi
c000a80a:	0f 85 74 ff ff ff    	jne    c000a784 <timerHandler(unsigned int)+0x4c>
c000a810:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a816:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a819:	85 c0                	test   eax,eax
c000a81b:	74 23                	je     c000a840 <timerHandler(unsigned int)+0x108>
c000a81d:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a824:	74 1a                	je     c000a840 <timerHandler(unsigned int)+0x108>
c000a826:	29 f8                	sub    eax,edi
c000a828:	8b 0d ec a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a7ec
c000a82e:	89 42 34             	mov    DWORD PTR [edx+0x34],eax
c000a831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a836:	39 48 34             	cmp    DWORD PTR [eax+0x34],ecx
c000a839:	77 05                	ja     c000a840 <timerHandler(unsigned int)+0x108>
c000a83b:	e8 d4 ae 00 00       	call   c0015714 <schedule()>
c000a840:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000a847:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000a84e:	75 04                	jne    c000a854 <timerHandler(unsigned int)+0x11c>
c000a850:	fb                   	sti    
c000a851:	8d 76 00             	lea    esi,[esi+0x0]
c000a854:	5b                   	pop    ebx
c000a855:	5e                   	pop    esi
c000a856:	5f                   	pop    edi
c000a857:	c3                   	ret    

c000a858 <VCache::VCache(PhysicalDisk*)>:
c000a858:	53                   	push   ebx
c000a859:	83 ec 18             	sub    esp,0x18
c000a85c:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c000a861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a865:	89 10                	mov    DWORD PTR [eax],edx
c000a867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a876:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a881:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a888:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a893:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a89a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8a5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a8bf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ca:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a8ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a8e9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a8f1:	83 ec 0c             	sub    esp,0xc
c000a8f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8f8:	e8 62 40 00 00       	call   c000e95f <malloc>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	89 c3                	mov    ebx,eax
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	53                   	push   ebx
c000a906:	e8 81 43 00 00       	call   c000ec8c <Mutex::Mutex()>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a912:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a919:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a91d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a924:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a92b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a92f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a939:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a93c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a940:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a94c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a950:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a953:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a95e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a962:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a968:	05 00 01 00 00       	add    eax,0x100
c000a96d:	c1 e0 04             	shl    eax,0x4
c000a970:	83 ec 0c             	sub    esp,0xc
c000a973:	50                   	push   eax
c000a974:	e8 e6 3f 00 00       	call   c000e95f <malloc>
c000a979:	83 c4 10             	add    esp,0x10
c000a97c:	89 c2                	mov    edx,eax
c000a97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a982:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a989:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a994:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a998:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a99c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9a2:	89 d0                	mov    eax,edx
c000a9a4:	c1 e0 02             	shl    eax,0x2
c000a9a7:	01 d0                	add    eax,edx
c000a9a9:	c1 e0 04             	shl    eax,0x4
c000a9ac:	83 ec 0c             	sub    esp,0xc
c000a9af:	50                   	push   eax
c000a9b0:	e8 aa 3f 00 00       	call   c000e95f <malloc>
c000a9b5:	83 c4 10             	add    esp,0x10
c000a9b8:	89 c2                	mov    edx,eax
c000a9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9be:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a9c1:	90                   	nop
c000a9c2:	83 c4 18             	add    esp,0x18
c000a9c5:	5b                   	pop    ebx
c000a9c6:	c3                   	ret    
c000a9c7:	90                   	nop

c000a9c8 <VCache::invalidateReadBuffer()>:
c000a9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9cc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000a9d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a9d6:	c3                   	ret    
c000a9d7:	90                   	nop

c000a9d8 <VCache::writeWriteBuffer()>:
c000a9d8:	53                   	push   ebx
c000a9d9:	83 ec 08             	sub    esp,0x8
c000a9dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a9e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000a9e4:	74 1e                	je     c000aa04 <VCache::writeWriteBuffer()+0x2c>
c000a9e6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9ee:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000a9f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000a9f4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000a9f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000a9fa:	50                   	push   eax
c000a9fb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000a9fe:	83 c4 20             	add    esp,0x20
c000aa01:	8d 76 00             	lea    esi,[esi+0x0]
c000aa04:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa0b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa12:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa16:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa1d:	83 c4 08             	add    esp,0x8
c000aa20:	5b                   	pop    ebx
c000aa21:	c3                   	ret    
c000aa22:	66 90                	xchg   ax,ax

c000aa24 <VCache::~VCache()>:
c000aa24:	83 ec 0c             	sub    esp,0xc
c000aa27:	ba 3c 1f 02 c0       	mov    edx,0xc0021f3c
c000aa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa30:	89 10                	mov    DWORD PTR [eax],edx
c000aa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa36:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa39:	0f b6 c0             	movzx  eax,al
c000aa3c:	85 c0                	test   eax,eax
c000aa3e:	74 10                	je     c000aa50 <VCache::~VCache()+0x2c>
c000aa40:	83 ec 0c             	sub    esp,0xc
c000aa43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa47:	e8 8c ff ff ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c000aa4c:	83 c4 10             	add    esp,0x10
c000aa4f:	90                   	nop
c000aa50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa57:	83 ec 0c             	sub    esp,0xc
c000aa5a:	50                   	push   eax
c000aa5b:	e8 0f 3f 00 00       	call   c000e96f <free>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aa6a:	83 ec 0c             	sub    esp,0xc
c000aa6d:	50                   	push   eax
c000aa6e:	e8 fc 3e 00 00       	call   c000e96f <free>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	90                   	nop
c000aa77:	83 c4 0c             	add    esp,0xc
c000aa7a:	c3                   	ret    
c000aa7b:	90                   	nop

c000aa7c <VCache::~VCache()>:
c000aa7c:	83 ec 0c             	sub    esp,0xc
c000aa7f:	83 ec 0c             	sub    esp,0xc
c000aa82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa86:	e8 99 ff ff ff       	call   c000aa24 <VCache::~VCache()>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	83 ec 08             	sub    esp,0x8
c000aa91:	6a 44                	push   0x44
c000aa93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa97:	e8 28 1c 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000aa9c:	83 c4 10             	add    esp,0x10
c000aa9f:	83 c4 0c             	add    esp,0xc
c000aaa2:	c3                   	ret    
c000aaa3:	90                   	nop

c000aaa4 <VCache::write(unsigned long long, int, void*)>:
c000aaa4:	55                   	push   ebp
c000aaa5:	57                   	push   edi
c000aaa6:	56                   	push   esi
c000aaa7:	53                   	push   ebx
c000aaa8:	83 ec 0c             	sub    esp,0xc
c000aaab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aaaf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000aab3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000aab7:	e8 c0 a9 00 00       	call   c001547c <KeDisablePreemption()>
c000aabc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000aac0:	74 0e                	je     c000aad0 <VCache::write(unsigned long long, int, void*)+0x2c>
c000aac2:	83 ec 0c             	sub    esp,0xc
c000aac5:	53                   	push   ebx
c000aac6:	e8 fd fe ff ff       	call   c000a9c8 <VCache::invalidateReadBuffer()>
c000aacb:	83 c4 10             	add    esp,0x10
c000aace:	66 90                	xchg   ax,ax
c000aad0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aad4:	74 5e                	je     c000ab34 <VCache::write(unsigned long long, int, void*)+0x90>
c000aad6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000aad9:	89 e8                	mov    eax,ebp
c000aadb:	99                   	cdq    
c000aadc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000aadf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000aae2:	89 c1                	mov    ecx,eax
c000aae4:	89 d0                	mov    eax,edx
c000aae6:	31 f1                	xor    ecx,esi
c000aae8:	31 f8                	xor    eax,edi
c000aaea:	09 c1                	or     ecx,eax
c000aaec:	75 3a                	jne    c000ab28 <VCache::write(unsigned long long, int, void*)+0x84>
c000aaee:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000aaf3:	75 33                	jne    c000ab28 <VCache::write(unsigned long long, int, void*)+0x84>
c000aaf5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aaf8:	89 ef                	mov    edi,ebp
c000aafa:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab00:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ab04:	0f af f9             	imul   edi,ecx
c000ab07:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab0f:	40                   	inc    eax
c000ab10:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab13:	83 f8 50             	cmp    eax,0x50
c000ab16:	75 7c                	jne    c000ab94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	53                   	push   ebx
c000ab1c:	e8 b7 fe ff ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	eb 6e                	jmp    c000ab94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ab26:	66 90                	xchg   ax,ax
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	53                   	push   ebx
c000ab2c:	e8 a7 fe ff ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab37:	83 7c 24 2c 4f       	cmp    DWORD PTR [esp+0x2c],0x4f
c000ab3c:	7f 22                	jg     c000ab60 <VCache::write(unsigned long long, int, void*)+0xbc>
c000ab3e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000ab41:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000ab44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ab48:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000ab4c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab4f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000ab52:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab58:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ab5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab5e:	eb 34                	jmp    c000ab94 <VCache::write(unsigned long long, int, void*)+0xf0>
c000ab60:	83 ec 0c             	sub    esp,0xc
c000ab63:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ab69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ab6d:	57                   	push   edi
c000ab6e:	56                   	push   esi
c000ab6f:	50                   	push   eax
c000ab70:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ab73:	83 c4 20             	add    esp,0x20
c000ab76:	89 c3                	mov    ebx,eax
c000ab78:	e8 27 a9 00 00       	call   c00154a4 <KeRestorePreemption()>
c000ab7d:	85 db                	test   ebx,ebx
c000ab7f:	74 1b                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ab81:	83 ec 0c             	sub    esp,0xc
c000ab84:	68 f4 1e 02 c0       	push   0xc0021ef4
c000ab89:	e8 d6 c3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ab8e:	83 c4 10             	add    esp,0x10
c000ab91:	eb 09                	jmp    c000ab9c <VCache::write(unsigned long long, int, void*)+0xf8>
c000ab93:	90                   	nop
c000ab94:	e8 0b a9 00 00       	call   c00154a4 <KeRestorePreemption()>
c000ab99:	31 db                	xor    ebx,ebx
c000ab9b:	90                   	nop
c000ab9c:	83 c4 0c             	add    esp,0xc
c000ab9f:	89 d8                	mov    eax,ebx
c000aba1:	5b                   	pop    ebx
c000aba2:	5e                   	pop    esi
c000aba3:	5f                   	pop    edi
c000aba4:	5d                   	pop    ebp
c000aba5:	c3                   	ret    

c000aba6 <VCache::read(unsigned long long, int, void*)>:
c000aba6:	55                   	push   ebp
c000aba7:	57                   	push   edi
c000aba8:	56                   	push   esi
c000aba9:	53                   	push   ebx
c000abaa:	83 ec 1c             	sub    esp,0x1c
c000abad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000abb1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000abb5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000abb9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000abbd:	e8 ba a8 00 00       	call   c001547c <KeDisablePreemption()>
c000abc2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000abc6:	74 0c                	je     c000abd4 <VCache::read(unsigned long long, int, void*)+0x2e>
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	53                   	push   ebx
c000abcc:	e8 07 fe ff ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c000abd1:	83 c4 10             	add    esp,0x10
c000abd4:	83 fd 01             	cmp    ebp,0x1
c000abd7:	0f 85 af 00 00 00    	jne    c000ac8c <VCache::read(unsigned long long, int, void*)+0xe6>
c000abdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000abe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abe4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000abeb:	0f 85 9b 00 00 00    	jne    c000ac8c <VCache::read(unsigned long long, int, void*)+0xe6>
c000abf1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000abf4:	89 e9                	mov    ecx,ebp
c000abf6:	f7 d9                	neg    ecx
c000abf8:	89 c8                	mov    eax,ecx
c000abfa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abfe:	c1 f8 1f             	sar    eax,0x1f
c000ac01:	21 f1                	and    ecx,esi
c000ac03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac07:	89 c8                	mov    eax,ecx
c000ac09:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac0d:	21 f9                	and    ecx,edi
c000ac0f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac13:	89 ca                	mov    edx,ecx
c000ac15:	74 0d                	je     c000ac24 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ac17:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac1a:	75 08                	jne    c000ac24 <VCache::read(unsigned long long, int, void*)+0x7e>
c000ac1c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ac1f:	74 47                	je     c000ac68 <VCache::read(unsigned long long, int, void*)+0xc2>
c000ac21:	8d 76 00             	lea    esi,[esi+0x0]
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ac2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ac32:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ac35:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000ac37:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ac3a:	55                   	push   ebp
c000ac3b:	52                   	push   edx
c000ac3c:	50                   	push   eax
c000ac3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ac41:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000ac44:	83 c4 20             	add    esp,0x20
c000ac47:	85 c0                	test   eax,eax
c000ac49:	74 1d                	je     c000ac68 <VCache::read(unsigned long long, int, void*)+0xc2>
c000ac4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 0c 1f 02 c0       	push   0xc0021f0c
c000ac57:	e8 08 c3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ac5c:	e8 43 a8 00 00       	call   c00154a4 <KeRestorePreemption()>
c000ac61:	83 c4 10             	add    esp,0x10
c000ac64:	eb 4e                	jmp    c000acb4 <VCache::read(unsigned long long, int, void*)+0x10e>
c000ac66:	66 90                	xchg   ax,ax
c000ac68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac6b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ac6f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac78:	48                   	dec    eax
c000ac79:	21 c6                	and    esi,eax
c000ac7b:	0f af f1             	imul   esi,ecx
c000ac7e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac83:	e8 1c a8 00 00       	call   c00154a4 <KeRestorePreemption()>
c000ac88:	31 c0                	xor    eax,eax
c000ac8a:	eb 2c                	jmp    c000acb8 <VCache::read(unsigned long long, int, void*)+0x112>
c000ac8c:	83 ec 0c             	sub    esp,0xc
c000ac8f:	53                   	push   ebx
c000ac90:	e8 33 fd ff ff       	call   c000a9c8 <VCache::invalidateReadBuffer()>
c000ac95:	5a                   	pop    edx
c000ac96:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac99:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac9f:	55                   	push   ebp
c000aca0:	57                   	push   edi
c000aca1:	56                   	push   esi
c000aca2:	50                   	push   eax
c000aca3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000aca6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000acaa:	83 c4 20             	add    esp,0x20
c000acad:	e8 f2 a7 00 00       	call   c00154a4 <KeRestorePreemption()>
c000acb2:	66 90                	xchg   ax,ax
c000acb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acb8:	83 c4 1c             	add    esp,0x1c
c000acbb:	5b                   	pop    ebx
c000acbc:	5e                   	pop    esi
c000acbd:	5f                   	pop    edi
c000acbe:	5d                   	pop    ebp
c000acbf:	c3                   	ret    

c000acc0 <Video::putrect(int, int, int, int, unsigned int)>:
c000acc0:	55                   	push   ebp
c000acc1:	57                   	push   edi
c000acc2:	56                   	push   esi
c000acc3:	53                   	push   ebx
c000acc4:	83 ec 1c             	sub    esp,0x1c
c000acc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000accb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000accf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000acd3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000acd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000acdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000acdf:	01 df                	add    edi,ebx
c000ace1:	39 fb                	cmp    ebx,edi
c000ace3:	7d 1f                	jge    c000ad04 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ace5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ace9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000aced:	7d 12                	jge    c000ad01 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000acef:	8b 16                	mov    edx,DWORD PTR [esi]
c000acf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf5:	53                   	push   ebx
c000acf6:	55                   	push   ebp
c000acf7:	45                   	inc    ebp
c000acf8:	56                   	push   esi
c000acf9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	eb e8                	jmp    c000ace9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad01:	43                   	inc    ebx
c000ad02:	eb dd                	jmp    c000ace1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad04:	83 c4 1c             	add    esp,0x1c
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	5f                   	pop    edi
c000ad0a:	5d                   	pop    ebp
c000ad0b:	c3                   	ret    

c000ad0c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad0c:	55                   	push   ebp
c000ad0d:	57                   	push   edi
c000ad0e:	31 ff                	xor    edi,edi
c000ad10:	56                   	push   esi
c000ad11:	53                   	push   ebx
c000ad12:	83 ec 1c             	sub    esp,0x1c
c000ad15:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad1d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad24:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad2d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad35:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad38:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad3c:	01 f9                	add    ecx,edi
c000ad3e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad42:	7d 2f                	jge    c000ad73 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad44:	31 f6                	xor    esi,esi
c000ad46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad4a:	01 f2                	add    edx,esi
c000ad4c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad50:	7d 1a                	jge    c000ad6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad52:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad55:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad58:	46                   	inc    esi
c000ad59:	51                   	push   ecx
c000ad5a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad5e:	52                   	push   edx
c000ad5f:	55                   	push   ebp
c000ad60:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad63:	83 c4 10             	add    esp,0x10
c000ad66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ad6a:	eb da                	jmp    c000ad46 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ad6c:	47                   	inc    edi
c000ad6d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ad71:	eb c5                	jmp    c000ad38 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	5e                   	pop    esi
c000ad78:	5f                   	pop    edi
c000ad79:	5d                   	pop    ebp
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <Video::blit(unsigned int*, int, int, int, int)>:
c000ad7c:	55                   	push   ebp
c000ad7d:	57                   	push   edi
c000ad7e:	56                   	push   esi
c000ad7f:	53                   	push   ebx
c000ad80:	83 ec 1c             	sub    esp,0x1c
c000ad83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ad87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad8b:	85 c0                	test   eax,eax
c000ad8d:	79 02                	jns    c000ad91 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000ad8f:	31 c0                	xor    eax,eax
c000ad91:	c1 e0 02             	shl    eax,0x2
c000ad94:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ad98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ada0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ada4:	39 d8                	cmp    eax,ebx
c000ada6:	7e 49                	jle    c000adf1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ada8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adae:	7c 41                	jl     c000adf1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adb0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adb4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000adb8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000adbc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000adc0:	39 f9                	cmp    ecx,edi
c000adc2:	7e 22                	jle    c000ade6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000adc4:	83 c5 04             	add    ebp,0x4
c000adc7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000adcd:	7c 14                	jl     c000ade3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000adcf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000add1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000add4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000add8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000addc:	56                   	push   esi
c000addd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ade0:	83 c4 10             	add    esp,0x10
c000ade3:	47                   	inc    edi
c000ade4:	eb d2                	jmp    c000adb8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ade6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000adea:	43                   	inc    ebx
c000adeb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000adef:	eb ab                	jmp    c000ad9c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000adf1:	83 c4 1c             	add    esp,0x1c
c000adf4:	5b                   	pop    ebx
c000adf5:	5e                   	pop    esi
c000adf6:	5f                   	pop    edi
c000adf7:	5d                   	pop    ebp
c000adf8:	c3                   	ret    
c000adf9:	90                   	nop

c000adfa <Video::clearScreen(unsigned int)>:
c000adfa:	57                   	push   edi
c000adfb:	56                   	push   esi
c000adfc:	53                   	push   ebx
c000adfd:	31 db                	xor    ebx,ebx
c000adff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae03:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae09:	7e 1f                	jle    c000ae2a <Video::clearScreen(unsigned int)+0x30>
c000ae0b:	31 ff                	xor    edi,edi
c000ae0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae13:	7e 12                	jle    c000ae27 <Video::clearScreen(unsigned int)+0x2d>
c000ae15:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1b:	53                   	push   ebx
c000ae1c:	57                   	push   edi
c000ae1d:	47                   	inc    edi
c000ae1e:	56                   	push   esi
c000ae1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae22:	83 c4 10             	add    esp,0x10
c000ae25:	eb e6                	jmp    c000ae0d <Video::clearScreen(unsigned int)+0x13>
c000ae27:	43                   	inc    ebx
c000ae28:	eb d9                	jmp    c000ae03 <Video::clearScreen(unsigned int)+0x9>
c000ae2a:	5b                   	pop    ebx
c000ae2b:	5e                   	pop    esi
c000ae2c:	5f                   	pop    edi
c000ae2d:	c3                   	ret    

c000ae2e <Video::putpixel(int, int, unsigned int)>:
c000ae2e:	c7 44 24 04 44 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f44
c000ae36:	e9 6b 3e 00 00       	jmp    c000eca6 <KePanic(char const*)>
c000ae3b:	90                   	nop

c000ae3c <Video::readPixelApprox(int, int)>:
c000ae3c:	83 ec 18             	sub    esp,0x18
c000ae3f:	68 65 1f 02 c0       	push   0xc0021f65
c000ae44:	e8 5d 3e 00 00       	call   c000eca6 <KePanic(char const*)>
c000ae49:	31 c0                	xor    eax,eax
c000ae4b:	83 c4 1c             	add    esp,0x1c
c000ae4e:	c3                   	ret    
c000ae4f:	90                   	nop

c000ae50 <Video::Video(char const*)>:
c000ae50:	83 ec 0c             	sub    esp,0xc
c000ae53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae57:	83 ec 08             	sub    esp,0x8
c000ae5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae5e:	50                   	push   eax
c000ae5f:	e8 60 e3 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000ae64:	83 c4 10             	add    esp,0x10
c000ae67:	ba 08 20 02 c0       	mov    edx,0xc0022008
c000ae6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae70:	89 10                	mov    DWORD PTR [eax],edx
c000ae72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae76:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ae80:	90                   	nop
c000ae81:	83 c4 0c             	add    esp,0xc
c000ae84:	c3                   	ret    
c000ae85:	90                   	nop

c000ae86 <Video::~Video()>:
c000ae86:	83 ec 0c             	sub    esp,0xc
c000ae89:	ba 08 20 02 c0       	mov    edx,0xc0022008
c000ae8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae92:	89 10                	mov    DWORD PTR [eax],edx
c000ae94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	50                   	push   eax
c000ae9c:	e8 c3 e0 ff ff       	call   c0008f64 <Device::~Device()>
c000aea1:	83 c4 10             	add    esp,0x10
c000aea4:	90                   	nop
c000aea5:	83 c4 0c             	add    esp,0xc
c000aea8:	c3                   	ret    
c000aea9:	90                   	nop

c000aeaa <Video::~Video()>:
c000aeaa:	83 ec 0c             	sub    esp,0xc
c000aead:	83 ec 0c             	sub    esp,0xc
c000aeb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb4:	e8 cd ff ff ff       	call   c000ae86 <Video::~Video()>
c000aeb9:	83 c4 10             	add    esp,0x10
c000aebc:	83 ec 08             	sub    esp,0x8
c000aebf:	68 64 01 00 00       	push   0x164
c000aec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aec8:	e8 f7 17 00 00       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	83 c4 0c             	add    esp,0xc
c000aed3:	c3                   	ret    

c000aed4 <Video::isMonochrome()>:
c000aed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aed8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000aede:	c3                   	ret    
c000aedf:	90                   	nop

c000aee0 <Video::getWidth()>:
c000aee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aee4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aeea:	c3                   	ret    
c000aeeb:	90                   	nop

c000aeec <Video::getHeight()>:
c000aeec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aef0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000aef6:	c3                   	ret    
c000aef7:	90                   	nop

c000aef8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000aef8:	55                   	push   ebp
c000aef9:	57                   	push   edi
c000aefa:	56                   	push   esi
c000aefb:	53                   	push   ebx
c000aefc:	83 ec 2c             	sub    esp,0x2c
c000aeff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af03:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af07:	83 f8 01             	cmp    eax,0x1
c000af0a:	19 c9                	sbb    ecx,ecx
c000af0c:	31 db                	xor    ebx,ebx
c000af0e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af12:	89 cd                	mov    ebp,ecx
c000af14:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af1c:	f7 d5                	not    ebp
c000af1e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000af24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af28:	01 d8                	add    eax,ebx
c000af2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af2e:	56                   	push   esi
c000af2f:	e8 b8 ff ff ff       	call   c000aeec <Video::getHeight()>
c000af34:	59                   	pop    ecx
c000af35:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af39:	7e 70                	jle    c000afab <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000af43:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af4e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af59:	89 f8                	mov    eax,edi
c000af5b:	83 c0 20             	add    eax,0x20
c000af5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af62:	56                   	push   esi
c000af63:	e8 78 ff ff ff       	call   c000aee0 <Video::getWidth()>
c000af68:	5a                   	pop    edx
c000af69:	39 c7                	cmp    edi,eax
c000af6b:	7d 34                	jge    c000afa1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000af6d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000af72:	74 05                	je     c000af79 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000af74:	8b 06                	mov    eax,DWORD PTR [esi]
c000af76:	55                   	push   ebp
c000af77:	eb 0d                	jmp    c000af86 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000af79:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000af7e:	74 12                	je     c000af92 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000af80:	8b 06                	mov    eax,DWORD PTR [esi]
c000af82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af8a:	57                   	push   edi
c000af8b:	56                   	push   esi
c000af8c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000af96:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000af9a:	47                   	inc    edi
c000af9b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000af9f:	75 c1                	jne    c000af62 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afa1:	43                   	inc    ebx
c000afa2:	83 fb 20             	cmp    ebx,0x20
c000afa5:	0f 85 79 ff ff ff    	jne    c000af24 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afab:	83 c4 2c             	add    esp,0x2c
c000afae:	5b                   	pop    ebx
c000afaf:	5e                   	pop    esi
c000afb0:	5f                   	pop    edi
c000afb1:	5d                   	pop    ebp
c000afb2:	c3                   	ret    
c000afb3:	90                   	nop

c000afb4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000afb4:	55                   	push   ebp
c000afb5:	57                   	push   edi
c000afb6:	56                   	push   esi
c000afb7:	53                   	push   ebx
c000afb8:	83 ec 48             	sub    esp,0x48
c000afbb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000afbf:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000afc3:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000afc7:	c1 e0 08             	shl    eax,0x8
c000afca:	01 d0                	add    eax,edx
c000afcc:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000afd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000afd4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000afd8:	c1 e0 08             	shl    eax,0x8
c000afdb:	01 d0                	add    eax,edx
c000afdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afe5:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000afea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000afee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000aff2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000aff9:	50                   	push   eax
c000affa:	e8 60 39 00 00       	call   c000e95f <malloc>
c000afff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b003:	83 c4 10             	add    esp,0x10
c000b006:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b00b:	75 10                	jne    c000b01d <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b00d:	83 ec 0c             	sub    esp,0xc
c000b010:	68 90 1f 02 c0       	push   0xc0021f90
c000b015:	e8 8c 3c 00 00       	call   c000eca6 <KePanic(char const*)>
c000b01a:	83 c4 10             	add    esp,0x10
c000b01d:	51                   	push   ecx
c000b01e:	51                   	push   ecx
c000b01f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b023:	50                   	push   eax
c000b024:	68 a0 1f 02 c0       	push   0xc0021fa0
c000b029:	e8 36 bf ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b02e:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b031:	83 e0 20             	and    eax,0x20
c000b034:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b038:	85 c0                	test   eax,eax
c000b03a:	5e                   	pop    esi
c000b03b:	0f 94 c0             	sete   al
c000b03e:	5f                   	pop    edi
c000b03f:	0f b6 c0             	movzx  eax,al
c000b042:	be 12 00 00 00       	mov    esi,0x12
c000b047:	50                   	push   eax
c000b048:	68 aa 1f 02 c0       	push   0xc0021faa
c000b04d:	e8 12 bf ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b052:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	89 d0                	mov    eax,edx
c000b05b:	85 d2                	test   edx,edx
c000b05d:	74 11                	je     c000b070 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b05f:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b063:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b067:	c1 fe 03             	sar    esi,0x3
c000b06a:	0f af f1             	imul   esi,ecx
c000b06d:	83 c6 12             	add    esi,0x12
c000b070:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b075:	74 07                	je     c000b07e <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b077:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b07c:	75 12                	jne    c000b090 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b07e:	83 ec 0c             	sub    esp,0xc
c000b081:	68 b8 1f 02 c0       	push   0xc0021fb8
c000b086:	e8 d9 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b08b:	e9 a0 02 00 00       	jmp    c000b330 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b090:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b094:	83 f9 02             	cmp    ecx,0x2
c000b097:	74 0e                	je     c000b0a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b099:	83 f9 0a             	cmp    ecx,0xa
c000b09c:	0f 84 c8 00 00 00    	je     c000b16a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b0a2:	e9 72 02 00 00       	jmp    c000b319 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b0a7:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0ac:	75 0e                	jne    c000b0bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0ae:	84 c0                	test   al,al
c000b0b0:	75 0a                	jne    c000b0bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0b5:	83 e8 18             	sub    eax,0x18
c000b0b8:	a8 f7                	test   al,0xf7
c000b0ba:	74 0d                	je     c000b0c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b0bc:	83 ec 0c             	sub    esp,0xc
c000b0bf:	68 cd 1f 02 c0       	push   0xc0021fcd
c000b0c4:	e9 58 02 00 00       	jmp    c000b321 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b0c9:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b0ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b0d6:	31 c0                	xor    eax,eax
c000b0d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b0dc:	89 c7                	mov    edi,eax
c000b0de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b0e6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0eb:	75 15                	jne    c000b102 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b0ed:	99                   	cdq    
c000b0ee:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b0f2:	85 d2                	test   edx,edx
c000b0f4:	75 0c                	jne    c000b102 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b0f6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b0fa:	29 c7                	sub    edi,eax
c000b0fc:	4f                   	dec    edi
c000b0fd:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b102:	31 d2                	xor    edx,edx
c000b104:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b108:	75 08                	jne    c000b112 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b10a:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b10f:	c1 e2 18             	shl    edx,0x18
c000b112:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b117:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b11b:	c1 e1 10             	shl    ecx,0x10
c000b11e:	8d 47 01             	lea    eax,[edi+0x1]
c000b121:	89 cd                	mov    ebp,ecx
c000b123:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b128:	c1 e1 08             	shl    ecx,0x8
c000b12b:	09 e9                	or     ecx,ebp
c000b12d:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b131:	09 e9                	or     ecx,ebp
c000b133:	09 d1                	or     ecx,edx
c000b135:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b139:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b13c:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b140:	c1 fa 03             	sar    edx,0x3
c000b143:	01 d6                	add    esi,edx
c000b145:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b149:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b14d:	7e 04                	jle    c000b153 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b14f:	89 c7                	mov    edi,eax
c000b151:	eb 93                	jmp    c000b0e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b153:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b15b:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b15f:	0f 8f 77 ff ff ff    	jg     c000b0dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b165:	e9 d3 01 00 00       	jmp    c000b33d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b16a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b16f:	75 0e                	jne    c000b17f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b171:	85 d2                	test   edx,edx
c000b173:	75 0a                	jne    c000b17f <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b175:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b178:	83 e8 18             	sub    eax,0x18
c000b17b:	a8 f7                	test   al,0xf7
c000b17d:	74 0d                	je     c000b18c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b17f:	83 ec 0c             	sub    esp,0xc
c000b182:	68 db 1f 02 c0       	push   0xc0021fdb
c000b187:	e9 95 01 00 00       	jmp    c000b321 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b194:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b19c:	31 c9                	xor    ecx,ecx
c000b19e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b1a2:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b1a6:	0f 8e 91 01 00 00    	jle    c000b33d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1ac:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b1b0:	0f 8d 87 01 00 00    	jge    c000b33d <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1b6:	8d 46 01             	lea    eax,[esi+0x1]
c000b1b9:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b1bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1c1:	83 fd 7f             	cmp    ebp,0x7f
c000b1c4:	89 e8                	mov    eax,ebp
c000b1c6:	0f 8e 9d 00 00 00    	jle    c000b269 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b1cc:	83 e0 7f             	and    eax,0x7f
c000b1cf:	31 d2                	xor    edx,edx
c000b1d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b1d5:	40                   	inc    eax
c000b1d6:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b1da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1de:	75 0a                	jne    c000b1ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b1e0:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b1e5:	89 ea                	mov    edx,ebp
c000b1e7:	c1 e2 18             	shl    edx,0x18
c000b1ea:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b1ef:	c1 e0 10             	shl    eax,0x10
c000b1f2:	89 c7                	mov    edi,eax
c000b1f4:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b1f9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b1fd:	c1 e0 08             	shl    eax,0x8
c000b200:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b204:	09 f8                	or     eax,edi
c000b206:	31 f6                	xor    esi,esi
c000b208:	09 c5                	or     ebp,eax
c000b20a:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b20f:	09 d5                	or     ebp,edx
c000b211:	85 ff                	test   edi,edi
c000b213:	75 1d                	jne    c000b232 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b215:	89 c8                	mov    eax,ecx
c000b217:	99                   	cdq    
c000b218:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b21c:	85 d2                	test   edx,edx
c000b21e:	75 12                	jne    c000b232 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b220:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b224:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b228:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b22c:	49                   	dec    ecx
c000b22d:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b236:	8d 51 01             	lea    edx,[ecx+0x1]
c000b239:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b23c:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b240:	8d 46 01             	lea    eax,[esi+0x1]
c000b243:	7e 06                	jle    c000b24b <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b245:	89 c6                	mov    esi,eax
c000b247:	89 d1                	mov    ecx,edx
c000b249:	eb c6                	jmp    c000b211 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b24b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b24f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b253:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b257:	c1 f8 03             	sar    eax,0x3
c000b25a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b25e:	89 d1                	mov    ecx,edx
c000b260:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b264:	e9 35 ff ff ff       	jmp    c000b19e <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b269:	8d 45 01             	lea    eax,[ebp+0x1]
c000b26c:	31 f6                	xor    esi,esi
c000b26e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b272:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b277:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b27b:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b280:	75 1d                	jne    c000b29f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b282:	89 c8                	mov    eax,ecx
c000b284:	99                   	cdq    
c000b285:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b289:	85 d2                	test   edx,edx
c000b28b:	75 12                	jne    c000b29f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b28d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b291:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b295:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b299:	49                   	dec    ecx
c000b29a:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b29f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2a7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2ab:	75 10                	jne    c000b2bd <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b2ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2b1:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b2b6:	c1 e7 18             	shl    edi,0x18
c000b2b9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b2bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2c1:	8d 51 01             	lea    edx,[ecx+0x1]
c000b2c4:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b2c9:	c1 e0 10             	shl    eax,0x10
c000b2cc:	89 c7                	mov    edi,eax
c000b2ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2d2:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b2d7:	c1 e0 08             	shl    eax,0x8
c000b2da:	09 f8                	or     eax,edi
c000b2dc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b2e0:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b2e4:	09 f8                	or     eax,edi
c000b2e6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b2ea:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b2ee:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b2f1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2f5:	c1 f8 03             	sar    eax,0x3
c000b2f8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b2fc:	8d 46 01             	lea    eax,[esi+0x1]
c000b2ff:	39 f5                	cmp    ebp,esi
c000b301:	7e 09                	jle    c000b30c <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b303:	89 c6                	mov    esi,eax
c000b305:	89 d1                	mov    ecx,edx
c000b307:	e9 6f ff ff ff       	jmp    c000b27b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b30c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b310:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b314:	e9 45 ff ff ff       	jmp    c000b25e <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b319:	52                   	push   edx
c000b31a:	52                   	push   edx
c000b31b:	51                   	push   ecx
c000b31c:	68 ea 1f 02 c0       	push   0xc0021fea
c000b321:	e8 3e bc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b326:	58                   	pop    eax
c000b327:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b32b:	e8 3f 36 00 00       	call   c000e96f <free>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b33b:	eb 14                	jmp    c000b351 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b33d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b341:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b345:	89 18                	mov    DWORD PTR [eax],ebx
c000b347:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b34b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b34f:	89 18                	mov    DWORD PTR [eax],ebx
c000b351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b355:	83 c4 3c             	add    esp,0x3c
c000b358:	5b                   	pop    ebx
c000b359:	5e                   	pop    esi
c000b35a:	5f                   	pop    edi
c000b35b:	5d                   	pop    ebp
c000b35c:	c3                   	ret    
c000b35d:	90                   	nop

c000b35e <Video::putTGA(int, int, unsigned char*, int)>:
c000b35e:	55                   	push   ebp
c000b35f:	57                   	push   edi
c000b360:	56                   	push   esi
c000b361:	53                   	push   ebx
c000b362:	83 ec 28             	sub    esp,0x28
c000b365:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b369:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b36d:	50                   	push   eax
c000b36e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b372:	50                   	push   eax
c000b373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b37b:	57                   	push   edi
c000b37c:	e8 33 fc ff ff       	call   c000afb4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b381:	83 c4 20             	add    esp,0x20
c000b384:	85 c0                	test   eax,eax
c000b386:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b38a:	74 3a                	je     c000b3c6 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b38c:	89 c6                	mov    esi,eax
c000b38e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b392:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b396:	39 d8                	cmp    eax,ebx
c000b398:	7e 2c                	jle    c000b3c6 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b39a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b39e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3a2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3a6:	39 e8                	cmp    eax,ebp
c000b3a8:	7e 19                	jle    c000b3c3 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b3aa:	83 c6 04             	add    esi,0x4
c000b3ad:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3b0:	85 c0                	test   eax,eax
c000b3b2:	79 0c                	jns    c000b3c0 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b3b4:	8b 17                	mov    edx,DWORD PTR [edi]
c000b3b6:	50                   	push   eax
c000b3b7:	53                   	push   ebx
c000b3b8:	55                   	push   ebp
c000b3b9:	57                   	push   edi
c000b3ba:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3bd:	83 c4 10             	add    esp,0x10
c000b3c0:	45                   	inc    ebp
c000b3c1:	eb db                	jmp    c000b39e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b3c3:	43                   	inc    ebx
c000b3c4:	eb c8                	jmp    c000b38e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b3c6:	83 c4 1c             	add    esp,0x1c
c000b3c9:	5b                   	pop    ebx
c000b3ca:	5e                   	pop    esi
c000b3cb:	5f                   	pop    edi
c000b3cc:	5d                   	pop    ebp
c000b3cd:	c3                   	ret    
c000b3ce:	66 90                	xchg   ax,ax

c000b3d0 <ACPI::close(int, int, void*)>:
c000b3d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b3d5:	c3                   	ret    
c000b3d6:	66 90                	xchg   ax,ax

c000b3d8 <loadACPITables(unsigned char*)>:
c000b3d8:	57                   	push   edi
c000b3d9:	56                   	push   esi
c000b3da:	53                   	push   ebx
c000b3db:	83 ec 60             	sub    esp,0x60
c000b3de:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b3e3:	0f 84 43 02 00 00    	je     c000b62c <loadACPITables(unsigned char*)+0x254>
c000b3e9:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b3ee:	0f b6 c0             	movzx  eax,al
c000b3f1:	85 c0                	test   eax,eax
c000b3f3:	74 7b                	je     c000b470 <loadACPITables(unsigned char*)+0x98>
c000b3f5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b3f9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b3fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b401:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b404:	83 e8 24             	sub    eax,0x24
c000b407:	c1 e8 03             	shr    eax,0x3
c000b40a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b40e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b416:	66 90                	xchg   ax,ax
c000b418:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b41c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b420:	0f 8d ba 00 00 00    	jge    c000b4e0 <loadACPITables(unsigned char*)+0x108>
c000b426:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b42a:	83 c0 24             	add    eax,0x24
c000b42d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b431:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b435:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b439:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b43d:	c1 e0 03             	shl    eax,0x3
c000b440:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b444:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b448:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b44b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b44d:	89 c1                	mov    ecx,eax
c000b44f:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b454:	8d 50 01             	lea    edx,[eax+0x1]
c000b457:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b45d:	89 ca                	mov    edx,ecx
c000b45f:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b466:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b46b:	eb ab                	jmp    c000b418 <loadACPITables(unsigned char*)+0x40>
c000b46d:	8d 76 00             	lea    esi,[esi+0x0]
c000b470:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b474:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b47c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b47f:	83 e8 24             	sub    eax,0x24
c000b482:	c1 e8 02             	shr    eax,0x2
c000b485:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b489:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b491:	8d 76 00             	lea    esi,[esi+0x0]
c000b494:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b498:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b49c:	7d 42                	jge    c000b4e0 <loadACPITables(unsigned char*)+0x108>
c000b49e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4a2:	83 c0 24             	add    eax,0x24
c000b4a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4b1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4b5:	c1 e0 02             	shl    eax,0x2
c000b4b8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b4bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b4c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b4c2:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4c7:	8d 50 01             	lea    edx,[eax+0x1]
c000b4ca:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b4d0:	89 ca                	mov    edx,ecx
c000b4d2:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b4d9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b4de:	eb b4                	jmp    c000b494 <loadACPITables(unsigned char*)+0xbc>
c000b4e0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b4e8:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b4ed:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b4f1:	0f 8d 39 01 00 00    	jge    c000b630 <loadACPITables(unsigned char*)+0x258>
c000b4f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b4fb:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b502:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b506:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b50a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b50e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b512:	25 ff 0f 00 00       	and    eax,0xfff
c000b517:	89 c6                	mov    esi,eax
c000b519:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b51f:	83 ec 0c             	sub    esp,0xc
c000b522:	6a 01                	push   0x1
c000b524:	e8 b0 6b 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c000b529:	83 c4 10             	add    esp,0x10
c000b52c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b530:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b536:	83 ec 0c             	sub    esp,0xc
c000b539:	6a 01                	push   0x1
c000b53b:	6a 01                	push   0x1
c000b53d:	50                   	push   eax
c000b53e:	52                   	push   edx
c000b53f:	53                   	push   ebx
c000b540:	e8 61 74 00 00       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b545:	83 c4 20             	add    esp,0x20
c000b548:	09 f0                	or     eax,esi
c000b54a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b54e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b552:	c1 e0 03             	shl    eax,0x3
c000b555:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b55a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b566:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b56e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b57a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b57e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b582:	89 c6                	mov    esi,eax
c000b584:	89 d7                	mov    edi,edx
c000b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b588:	89 c8                	mov    eax,ecx
c000b58a:	89 fa                	mov    edx,edi
c000b58c:	89 f3                	mov    ebx,esi
c000b58e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b592:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b596:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b59a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5a9:	05 00 10 00 00       	add    eax,0x1000
c000b5ae:	c1 e8 0c             	shr    eax,0xc
c000b5b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b5bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c1:	25 ff 0f 00 00       	and    eax,0xfff
c000b5c6:	89 c6                	mov    esi,eax
c000b5c8:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b5ce:	83 ec 0c             	sub    esp,0xc
c000b5d1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b5d5:	e8 ff 6a 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c000b5da:	83 c4 10             	add    esp,0x10
c000b5dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b5e1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b5e7:	83 ec 0c             	sub    esp,0xc
c000b5ea:	6a 01                	push   0x1
c000b5ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b5f0:	50                   	push   eax
c000b5f1:	52                   	push   edx
c000b5f2:	53                   	push   ebx
c000b5f3:	e8 ae 73 00 00       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b5f8:	83 c4 20             	add    esp,0x20
c000b5fb:	09 f0                	or     eax,esi
c000b5fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	50                   	push   eax
c000b609:	e8 d3 6d 00 00       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c000b60e:	83 c4 10             	add    esp,0x10
c000b611:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b615:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b619:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b620:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b625:	e9 be fe ff ff       	jmp    c000b4e8 <loadACPITables(unsigned char*)+0x110>
c000b62a:	66 90                	xchg   ax,ax
c000b62c:	90                   	nop
c000b62d:	8d 76 00             	lea    esi,[esi+0x0]
c000b630:	83 c4 60             	add    esp,0x60
c000b633:	5b                   	pop    ebx
c000b634:	5e                   	pop    esi
c000b635:	5f                   	pop    edi
c000b636:	c3                   	ret    
c000b637:	90                   	nop

c000b638 <findRSDT(unsigned char*)>:
c000b638:	57                   	push   edi
c000b639:	56                   	push   esi
c000b63a:	53                   	push   ebx
c000b63b:	83 ec 50             	sub    esp,0x50
c000b63e:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b643:	85 c0                	test   eax,eax
c000b645:	75 0d                	jne    c000b654 <findRSDT(unsigned char*)+0x1c>
c000b647:	b8 00 00 00 00       	mov    eax,0x0
c000b64c:	e9 2b 01 00 00       	jmp    c000b77c <findRSDT(unsigned char*)+0x144>
c000b651:	8d 76 00             	lea    esi,[esi+0x0]
c000b654:	89 e0                	mov    eax,esp
c000b656:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b65a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b65e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b662:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b66a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b66e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b676:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b67a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b67e:	89 c6                	mov    esi,eax
c000b680:	89 d7                	mov    edi,edx
c000b682:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b684:	89 c8                	mov    eax,ecx
c000b686:	89 fa                	mov    edx,edi
c000b688:	89 f3                	mov    ebx,esi
c000b68a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b68e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b692:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b696:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b69a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b69e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b6be:	25 ff 0f 00 00       	and    eax,0xfff
c000b6c3:	89 c6                	mov    esi,eax
c000b6c5:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b6cb:	83 ec 0c             	sub    esp,0xc
c000b6ce:	6a 02                	push   0x2
c000b6d0:	e8 04 6a 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c000b6d5:	83 c4 10             	add    esp,0x10
c000b6d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b6dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b6e2:	83 ec 0c             	sub    esp,0xc
c000b6e5:	6a 01                	push   0x1
c000b6e7:	6a 02                	push   0x2
c000b6e9:	50                   	push   eax
c000b6ea:	52                   	push   edx
c000b6eb:	53                   	push   ebx
c000b6ec:	e8 b5 72 00 00       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b6f1:	83 c4 20             	add    esp,0x20
c000b6f4:	09 f0                	or     eax,esi
c000b6f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b6fe:	25 ff 0f 00 00       	and    eax,0xfff
c000b703:	89 c6                	mov    esi,eax
c000b705:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c000b70b:	83 ec 0c             	sub    esp,0xc
c000b70e:	6a 02                	push   0x2
c000b710:	e8 c4 69 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c000b715:	83 c4 10             	add    esp,0x10
c000b718:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b71c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b722:	83 ec 0c             	sub    esp,0xc
c000b725:	6a 01                	push   0x1
c000b727:	6a 02                	push   0x2
c000b729:	50                   	push   eax
c000b72a:	52                   	push   edx
c000b72b:	53                   	push   ebx
c000b72c:	e8 75 72 00 00       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b731:	83 c4 20             	add    esp,0x20
c000b734:	09 f0                	or     eax,esi
c000b736:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b73a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b73f:	85 c0                	test   eax,eax
c000b741:	75 11                	jne    c000b754 <findRSDT(unsigned char*)+0x11c>
c000b743:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b74e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b752:	eb 24                	jmp    c000b778 <findRSDT(unsigned char*)+0x140>
c000b754:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b759:	83 f8 02             	cmp    eax,0x2
c000b75c:	75 12                	jne    c000b770 <findRSDT(unsigned char*)+0x138>
c000b75e:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b765:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b769:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b76d:	eb 09                	jmp    c000b778 <findRSDT(unsigned char*)+0x140>
c000b76f:	90                   	nop
c000b770:	b8 00 00 00 00       	mov    eax,0x0
c000b775:	eb 05                	jmp    c000b77c <findRSDT(unsigned char*)+0x144>
c000b777:	90                   	nop
c000b778:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b77c:	83 c4 50             	add    esp,0x50
c000b77f:	5b                   	pop    ebx
c000b780:	5e                   	pop    esi
c000b781:	5f                   	pop    edi
c000b782:	c3                   	ret    
c000b783:	90                   	nop

c000b784 <findDataTable(unsigned char*, char*)>:
c000b784:	83 ec 1c             	sub    esp,0x1c
c000b787:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b78c:	75 0a                	jne    c000b798 <findDataTable(unsigned char*, char*)+0x14>
c000b78e:	b8 00 00 00 00       	mov    eax,0x0
c000b793:	eb 5f                	jmp    c000b7f4 <findDataTable(unsigned char*, char*)+0x70>
c000b795:	8d 76 00             	lea    esi,[esi+0x0]
c000b798:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7a0:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b7a5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7a9:	7d 41                	jge    c000b7ec <findDataTable(unsigned char*, char*)+0x68>
c000b7ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7af:	c1 e0 03             	shl    eax,0x3
c000b7b2:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b7b7:	83 ec 04             	sub    esp,0x4
c000b7ba:	6a 04                	push   0x4
c000b7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b7c0:	50                   	push   eax
c000b7c1:	e8 ba 4b ff ff       	call   c0000380 <memcmp>
c000b7c6:	83 c4 10             	add    esp,0x10
c000b7c9:	85 c0                	test   eax,eax
c000b7cb:	0f 94 c0             	sete   al
c000b7ce:	0f b6 c0             	movzx  eax,al
c000b7d1:	85 c0                	test   eax,eax
c000b7d3:	74 0f                	je     c000b7e4 <findDataTable(unsigned char*, char*)+0x60>
c000b7d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7d9:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b7e0:	eb 12                	jmp    c000b7f4 <findDataTable(unsigned char*, char*)+0x70>
c000b7e2:	66 90                	xchg   ax,ax
c000b7e4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b7e9:	eb b5                	jmp    c000b7a0 <findDataTable(unsigned char*, char*)+0x1c>
c000b7eb:	90                   	nop
c000b7ec:	b8 00 00 00 00       	mov    eax,0x0
c000b7f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7f4:	83 c4 1c             	add    esp,0x1c
c000b7f7:	c3                   	ret    

c000b7f8 <scanMADT()>:
c000b7f8:	53                   	push   ebx
c000b7f9:	83 ec 38             	sub    esp,0x38
c000b7fc:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b806:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b810:	e8 53 c7 00 00       	call   c0017f68 <HalFindRSDP()>
c000b815:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b81a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b81f:	85 c0                	test   eax,eax
c000b821:	0f 84 11 04 00 00    	je     c000bc38 <scanMADT()+0x440>
c000b827:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b82c:	83 ec 0c             	sub    esp,0xc
c000b82f:	50                   	push   eax
c000b830:	e8 03 fe ff ff       	call   c000b638 <findRSDT(unsigned char*)>
c000b835:	83 c4 10             	add    esp,0x10
c000b838:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000b83d:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b842:	85 c0                	test   eax,eax
c000b844:	0f 84 f2 03 00 00    	je     c000bc3c <scanMADT()+0x444>
c000b84a:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b84f:	83 ec 0c             	sub    esp,0xc
c000b852:	50                   	push   eax
c000b853:	e8 80 fb ff ff       	call   c000b3d8 <loadACPITables(unsigned char*)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000b860:	83 ec 08             	sub    esp,0x8
c000b863:	68 4c 20 02 c0       	push   0xc002204c
c000b868:	50                   	push   eax
c000b869:	e8 16 ff ff ff       	call   c000b784 <findDataTable(unsigned char*, char*)>
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b875:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b87a:	0f 84 c0 03 00 00    	je     c000bc40 <scanMADT()+0x448>
c000b880:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b888:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b88c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b88f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b893:	0f 87 af 03 00 00    	ja     c000bc48 <scanMADT()+0x450>
c000b899:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8a1:	0f 87 a1 03 00 00    	ja     c000bc48 <scanMADT()+0x450>
c000b8a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000b8b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8c2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b8c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ca:	8d 50 01             	lea    edx,[eax+0x1]
c000b8cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b8d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b8d9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b8dd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b8e2:	83 f8 02             	cmp    eax,0x2
c000b8e5:	0f 86 59 03 00 00    	jbe    c000bc44 <scanMADT()+0x44c>
c000b8eb:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b8f0:	85 c0                	test   eax,eax
c000b8f2:	75 58                	jne    c000b94c <scanMADT()+0x154>
c000b8f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8f8:	8d 50 01             	lea    edx,[eax+0x1]
c000b8fb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8ff:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b905:	0f b6 d2             	movzx  edx,dl
c000b908:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b90c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b910:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000b916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b91a:	8d 50 01             	lea    edx,[eax+0x1]
c000b91d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b921:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000b927:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b92a:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000b930:	0f b6 d2             	movzx  edx,dl
c000b933:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b937:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b93b:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000b941:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b946:	e9 d9 02 00 00       	jmp    c000bc24 <scanMADT()+0x42c>
c000b94b:	90                   	nop
c000b94c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b951:	83 f8 01             	cmp    eax,0x1
c000b954:	0f 85 1a 01 00 00    	jne    c000ba74 <scanMADT()+0x27c>
c000b95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b95e:	8d 50 01             	lea    edx,[eax+0x1]
c000b961:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b965:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000b96b:	0f b6 d2             	movzx  edx,dl
c000b96e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b972:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b976:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000b97c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b981:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b985:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b989:	01 d0                	add    eax,edx
c000b98b:	83 c0 2c             	add    eax,0x2c
c000b98e:	8a 00                	mov    al,BYTE PTR [eax]
c000b990:	0f b6 d0             	movzx  edx,al
c000b993:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b997:	8d 48 01             	lea    ecx,[eax+0x1]
c000b99a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b99e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9a2:	0f b6 c0             	movzx  eax,al
c000b9a5:	c1 e0 08             	shl    eax,0x8
c000b9a8:	89 d1                	mov    ecx,edx
c000b9aa:	09 c1                	or     ecx,eax
c000b9ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9b0:	8d 50 02             	lea    edx,[eax+0x2]
c000b9b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9b7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9bb:	0f b6 c0             	movzx  eax,al
c000b9be:	c1 e0 10             	shl    eax,0x10
c000b9c1:	09 c1                	or     ecx,eax
c000b9c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9c7:	8d 50 03             	lea    edx,[eax+0x3]
c000b9ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9ce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9d2:	0f b6 c0             	movzx  eax,al
c000b9d5:	c1 e0 18             	shl    eax,0x18
c000b9d8:	09 c1                	or     ecx,eax
c000b9da:	89 ca                	mov    edx,ecx
c000b9dc:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000b9e1:	0f b6 c0             	movzx  eax,al
c000b9e4:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000b9eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b9f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9f8:	01 d0                	add    eax,edx
c000b9fa:	83 c0 2c             	add    eax,0x2c
c000b9fd:	8a 00                	mov    al,BYTE PTR [eax]
c000b9ff:	0f b6 d0             	movzx  edx,al
c000ba02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba06:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba0d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba11:	0f b6 c0             	movzx  eax,al
c000ba14:	c1 e0 08             	shl    eax,0x8
c000ba17:	89 d1                	mov    ecx,edx
c000ba19:	09 c1                	or     ecx,eax
c000ba1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba1f:	8d 50 02             	lea    edx,[eax+0x2]
c000ba22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba2a:	0f b6 c0             	movzx  eax,al
c000ba2d:	c1 e0 10             	shl    eax,0x10
c000ba30:	09 c1                	or     ecx,eax
c000ba32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba36:	8d 50 03             	lea    edx,[eax+0x3]
c000ba39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba3d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba41:	0f b6 c0             	movzx  eax,al
c000ba44:	c1 e0 18             	shl    eax,0x18
c000ba47:	09 c1                	or     ecx,eax
c000ba49:	89 ca                	mov    edx,ecx
c000ba4b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba50:	0f b6 c0             	movzx  eax,al
c000ba53:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000ba5a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba5f:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000ba64:	83 c0 01             	add    eax,0x1
c000ba67:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000ba6c:	e9 b3 01 00 00       	jmp    c000bc24 <scanMADT()+0x42c>
c000ba71:	8d 76 00             	lea    esi,[esi+0x0]
c000ba74:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ba79:	83 f8 02             	cmp    eax,0x2
c000ba7c:	0f 85 ea 00 00 00    	jne    c000bb6c <scanMADT()+0x374>
c000ba82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba86:	8d 50 01             	lea    edx,[eax+0x1]
c000ba89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba91:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ba95:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000ba99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba9d:	8d 50 01             	lea    edx,[eax+0x1]
c000baa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baa8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bab0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bab8:	01 d0                	add    eax,edx
c000baba:	83 c0 2c             	add    eax,0x2c
c000babd:	8a 00                	mov    al,BYTE PTR [eax]
c000babf:	0f b6 d0             	movzx  edx,al
c000bac2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bac6:	8d 48 01             	lea    ecx,[eax+0x1]
c000bac9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bacd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bad1:	0f b6 c0             	movzx  eax,al
c000bad4:	c1 e0 08             	shl    eax,0x8
c000bad7:	89 d1                	mov    ecx,edx
c000bad9:	09 c1                	or     ecx,eax
c000badb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000badf:	8d 50 02             	lea    edx,[eax+0x2]
c000bae2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bae6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000baea:	0f b6 c0             	movzx  eax,al
c000baed:	c1 e0 10             	shl    eax,0x10
c000baf0:	09 c1                	or     ecx,eax
c000baf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf6:	8d 50 03             	lea    edx,[eax+0x3]
c000baf9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bafd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb01:	0f b6 c0             	movzx  eax,al
c000bb04:	c1 e0 18             	shl    eax,0x18
c000bb07:	09 c8                	or     eax,ecx
c000bb09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb0d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb1a:	01 d0                	add    eax,edx
c000bb1c:	83 c0 2c             	add    eax,0x2c
c000bb1f:	8a 00                	mov    al,BYTE PTR [eax]
c000bb21:	0f b6 c0             	movzx  eax,al
c000bb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bb28:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb2f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bb33:	0f b6 d2             	movzx  edx,dl
c000bb36:	c1 e2 08             	shl    edx,0x8
c000bb39:	09 d0                	or     eax,edx
c000bb3b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb40:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb45:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb4e:	88 90 88 46 02 c0    	mov    BYTE PTR [eax-0x3ffdb978],dl
c000bb54:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bb59:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bb5e:	66 89 84 12 c0 aa 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5540],ax
c000bb66:	e9 b9 00 00 00       	jmp    c000bc24 <scanMADT()+0x42c>
c000bb6b:	90                   	nop
c000bb6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb71:	83 f8 04             	cmp    eax,0x4
c000bb74:	0f 85 9a 00 00 00    	jne    c000bc14 <scanMADT()+0x41c>
c000bb7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb7e:	8d 50 01             	lea    edx,[eax+0x1]
c000bb81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb89:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bb8d:	0f b6 c0             	movzx  eax,al
c000bb90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb9c:	01 d0                	add    eax,edx
c000bb9e:	83 c0 2c             	add    eax,0x2c
c000bba1:	8a 00                	mov    al,BYTE PTR [eax]
c000bba3:	0f b6 d0             	movzx  edx,al
c000bba6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbaa:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbb1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbb5:	0f b6 c0             	movzx  eax,al
c000bbb8:	c1 e0 08             	shl    eax,0x8
c000bbbb:	09 d0                	or     eax,edx
c000bbbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bbc1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bbc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbca:	8d 50 01             	lea    edx,[eax+0x1]
c000bbcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbd9:	0f b6 c0             	movzx  eax,al
c000bbdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe4:	c1 e0 08             	shl    eax,0x8
c000bbe7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bbeb:	89 c1                	mov    ecx,eax
c000bbed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbf1:	c1 e0 18             	shl    eax,0x18
c000bbf4:	89 c3                	mov    ebx,eax
c000bbf6:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bbfb:	8d 50 01             	lea    edx,[eax+0x1]
c000bbfe:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bc04:	09 d9                	or     ecx,ebx
c000bc06:	89 ca                	mov    edx,ecx
c000bc08:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bc0f:	eb 13                	jmp    c000bc24 <scanMADT()+0x42c>
c000bc11:	8d 76 00             	lea    esi,[esi+0x0]
c000bc14:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc19:	83 f8 05             	cmp    eax,0x5
c000bc1c:	75 06                	jne    c000bc24 <scanMADT()+0x42c>
c000bc1e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc23:	90                   	nop
c000bc24:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2d:	01 d0                	add    eax,edx
c000bc2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc33:	e9 50 fc ff ff       	jmp    c000b888 <scanMADT()+0x90>
c000bc38:	90                   	nop
c000bc39:	eb 0d                	jmp    c000bc48 <scanMADT()+0x450>
c000bc3b:	90                   	nop
c000bc3c:	90                   	nop
c000bc3d:	eb 09                	jmp    c000bc48 <scanMADT()+0x450>
c000bc3f:	90                   	nop
c000bc40:	90                   	nop
c000bc41:	eb 05                	jmp    c000bc48 <scanMADT()+0x450>
c000bc43:	90                   	nop
c000bc44:	90                   	nop
c000bc45:	8d 76 00             	lea    esi,[esi+0x0]
c000bc48:	83 c4 38             	add    esp,0x38
c000bc4b:	5b                   	pop    ebx
c000bc4c:	c3                   	ret    
c000bc4d:	90                   	nop
c000bc4e:	66 90                	xchg   ax,ax

c000bc50 <ACPI::ACPI()>:
c000bc50:	83 ec 0c             	sub    esp,0xc
c000bc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc57:	83 ec 08             	sub    esp,0x8
c000bc5a:	68 51 20 02 c0       	push   0xc0022051
c000bc5f:	50                   	push   eax
c000bc60:	e8 5f d5 ff ff       	call   c00091c4 <Device::Device(char const*)>
c000bc65:	83 c4 10             	add    esp,0x10
c000bc68:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c000bc6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc71:	89 10                	mov    DWORD PTR [eax],edx
c000bc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc77:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc90:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bc9a:	e8 59 fb ff ff       	call   c000b7f8 <scanMADT()>
c000bc9f:	90                   	nop
c000bca0:	83 c4 0c             	add    esp,0xc
c000bca3:	c3                   	ret    

c000bca4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bca4:	83 ec 2c             	sub    esp,0x2c
c000bca7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bcab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcaf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcb3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bcb7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bcbc:	88 d0                	mov    al,dl
c000bcbe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bcc2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bcc7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bccf:	90                   	nop
c000bcd0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bcd4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bcda:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bcde:	0f 8d b0 00 00 00    	jge    c000bd94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bce4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bce8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcec:	83 c2 2a             	add    edx,0x2a
c000bcef:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bcf3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bcf8:	0f b7 c0             	movzx  eax,ax
c000bcfb:	39 c2                	cmp    edx,eax
c000bcfd:	0f 85 85 00 00 00    	jne    c000bd88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd0b:	83 c2 2a             	add    edx,0x2a
c000bd0e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd12:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd17:	0f b6 c0             	movzx  eax,al
c000bd1a:	39 c2                	cmp    edx,eax
c000bd1c:	75 6a                	jne    c000bd88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd1e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd23:	85 c0                	test   eax,eax
c000bd25:	74 3d                	je     c000bd64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd2f:	83 c2 2a             	add    edx,0x2a
c000bd32:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd3d:	39 c2                	cmp    edx,eax
c000bd3f:	74 13                	je     c000bd54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd41:	83 ec 0c             	sub    esp,0xc
c000bd44:	68 cc 21 02 c0       	push   0xc00221cc
c000bd49:	e8 58 2f 00 00       	call   c000eca6 <KePanic(char const*)>
c000bd4e:	83 c4 10             	add    esp,0x10
c000bd51:	8d 76 00             	lea    esi,[esi+0x0]
c000bd54:	83 ec 0c             	sub    esp,0xc
c000bd57:	68 56 20 02 c0       	push   0xc0022056
c000bd5c:	e8 45 2f 00 00       	call   c000eca6 <KePanic(char const*)>
c000bd61:	83 c4 10             	add    esp,0x10
c000bd64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bd68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd70:	83 c2 2a             	add    edx,0x2a
c000bd73:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bd77:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd79:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bd7c:	89 01                	mov    DWORD PTR [ecx],eax
c000bd7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bd81:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bd86:	66 90                	xchg   ax,ax
c000bd88:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bd8d:	e9 3e ff ff ff       	jmp    c000bcd0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bd92:	66 90                	xchg   ax,ax
c000bd94:	90                   	nop
c000bd95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd99:	83 c4 2c             	add    esp,0x2c
c000bd9c:	c2 04 00             	ret    0x4
c000bd9f:	90                   	nop

c000bda0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bda0:	83 ec 1c             	sub    esp,0x1c
c000bda3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bda7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdb4:	88 c8                	mov    al,cl
c000bdb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdba:	88 d0                	mov    al,dl
c000bdbc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bdc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bdca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bdd1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000bdd5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000bdd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bddd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bde3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bde7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000bdea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bdee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000bdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdf7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bdfd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be01:	83 c0 01             	add    eax,0x1
c000be04:	88 c1                	mov    cl,al
c000be06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0a:	83 c2 2a             	add    edx,0x2a
c000be0d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be15:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be26:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be34:	8d 50 01             	lea    edx,[eax+0x1]
c000be37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be45:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be4b:	3d 00 02 00 00       	cmp    eax,0x200
c000be50:	75 12                	jne    c000be64 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be52:	83 ec 0c             	sub    esp,0xc
c000be55:	68 65 20 02 c0       	push   0xc0022065
c000be5a:	e8 47 2e 00 00       	call   c000eca6 <KePanic(char const*)>
c000be5f:	83 c4 10             	add    esp,0x10
c000be62:	66 90                	xchg   ax,ax
c000be64:	90                   	nop
c000be65:	83 c4 1c             	add    esp,0x1c
c000be68:	c3                   	ret    
c000be69:	90                   	nop
c000be6a:	66 90                	xchg   ax,ax

c000be6c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000be6c:	b8 00 00 00 00       	mov    eax,0x0
c000be71:	c3                   	ret    
c000be72:	66 90                	xchg   ax,ax

c000be74 <ACPI::detectPCI()>:
c000be74:	53                   	push   ebx
c000be75:	83 ec 28             	sub    esp,0x28
c000be78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000be7d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000be82:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000be87:	83 ec 08             	sub    esp,0x8
c000be8a:	68 82 20 02 c0       	push   0xc0022082
c000be8f:	50                   	push   eax
c000be90:	e8 ef f8 ff ff       	call   c000b784 <findDataTable(unsigned char*, char*)>
c000be95:	83 c4 10             	add    esp,0x10
c000be98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bea1:	74 0d                	je     c000beb0 <ACPI::detectPCI()+0x3c>
c000bea3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bea8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bead:	8d 76 00             	lea    esi,[esi+0x0]
c000beb0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000beb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bebc:	8a 00                	mov    al,BYTE PTR [eax]
c000bebe:	0f b6 c0             	movzx  eax,al
c000bec1:	83 f8 01             	cmp    eax,0x1
c000bec4:	75 0e                	jne    c000bed4 <ACPI::detectPCI()+0x60>
c000bec6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000becb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bed0:	eb 2e                	jmp    c000bf00 <ACPI::detectPCI()+0x8c>
c000bed2:	66 90                	xchg   ax,ax
c000bed4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bed8:	8a 00                	mov    al,BYTE PTR [eax]
c000beda:	0f b6 c0             	movzx  eax,al
c000bedd:	83 f8 02             	cmp    eax,0x2
c000bee0:	75 1e                	jne    c000bf00 <ACPI::detectPCI()+0x8c>
c000bee2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bee7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000beec:	85 c0                	test   eax,eax
c000beee:	74 10                	je     c000bf00 <ACPI::detectPCI()+0x8c>
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	68 fc 21 02 c0       	push   0xc00221fc
c000bef8:	e8 a9 2d 00 00       	call   c000eca6 <KePanic(char const*)>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf04:	83 f0 01             	xor    eax,0x1
c000bf07:	0f b6 c0             	movzx  eax,al
c000bf0a:	85 c0                	test   eax,eax
c000bf0c:	74 46                	je     c000bf54 <ACPI::detectPCI()+0xe0>
c000bf0e:	e8 1d 42 ff ff       	call   c0000130 <manualPCIProbe>
c000bf13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf17:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf1c:	75 0e                	jne    c000bf2c <ACPI::detectPCI()+0xb8>
c000bf1e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf23:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf28:	eb 2a                	jmp    c000bf54 <ACPI::detectPCI()+0xe0>
c000bf2a:	66 90                	xchg   ax,ax
c000bf2c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf31:	75 21                	jne    c000bf54 <ACPI::detectPCI()+0xe0>
c000bf33:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf38:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf3d:	85 c0                	test   eax,eax
c000bf3f:	74 13                	je     c000bf54 <ACPI::detectPCI()+0xe0>
c000bf41:	83 ec 0c             	sub    esp,0xc
c000bf44:	68 fc 21 02 c0       	push   0xc00221fc
c000bf49:	e8 58 2d 00 00       	call   c000eca6 <KePanic(char const*)>
c000bf4e:	83 c4 10             	add    esp,0x10
c000bf51:	8d 76 00             	lea    esi,[esi+0x0]
c000bf54:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf59:	85 c0                	test   eax,eax
c000bf5b:	0f 84 87 00 00 00    	je     c000bfe8 <ACPI::detectPCI()+0x174>
c000bf61:	83 ec 0c             	sub    esp,0xc
c000bf64:	68 87 20 02 c0       	push   0xc0022087
c000bf69:	e8 96 06 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000bf6e:	83 c4 10             	add    esp,0x10
c000bf71:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bf79:	83 ec 0c             	sub    esp,0xc
c000bf7c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf80:	e8 da 29 00 00       	call   c000e95f <malloc>
c000bf85:	83 c4 10             	add    esp,0x10
c000bf88:	89 c3                	mov    ebx,eax
c000bf8a:	83 ec 0c             	sub    esp,0xc
c000bf8d:	53                   	push   ebx
c000bf8e:	e8 7d fd 00 00       	call   c001bd10 <PCI::PCI()>
c000bf93:	83 c4 10             	add    esp,0x10
c000bf96:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bf9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf9e:	83 ec 08             	sub    esp,0x8
c000bfa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa5:	50                   	push   eax
c000bfa6:	e8 b7 d0 ff ff       	call   c0009062 <Device::addChild(Device*)>
c000bfab:	83 c4 10             	add    esp,0x10
c000bfae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfb4:	83 c0 08             	add    eax,0x8
c000bfb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfb9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000bfbe:	85 d2                	test   edx,edx
c000bfc0:	74 0a                	je     c000bfcc <ACPI::detectPCI()+0x158>
c000bfc2:	ba 01 00 00 00       	mov    edx,0x1
c000bfc7:	eb 0b                	jmp    c000bfd4 <ACPI::detectPCI()+0x160>
c000bfc9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfcc:	ba 02 00 00 00       	mov    edx,0x2
c000bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfd4:	6a 00                	push   0x0
c000bfd6:	6a 00                	push   0x0
c000bfd8:	52                   	push   edx
c000bfd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfdd:	ff d0                	call   eax
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	e9 91 00 00 00       	jmp    c000c078 <ACPI::detectPCI()+0x204>
c000bfe7:	90                   	nop
c000bfe8:	83 ec 0c             	sub    esp,0xc
c000bfeb:	68 9f 20 02 c0       	push   0xc002209f
c000bff0:	e8 0f 06 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000bff5:	83 c4 10             	add    esp,0x10
c000bff8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000bfff:	83 ec 0c             	sub    esp,0xc
c000c002:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c006:	e8 54 29 00 00       	call   c000e95f <malloc>
c000c00b:	83 c4 10             	add    esp,0x10
c000c00e:	89 c3                	mov    ebx,eax
c000c010:	83 ec 0c             	sub    esp,0xc
c000c013:	53                   	push   ebx
c000c014:	e8 fd 08 01 00       	call   c001c916 <IDE::IDE()>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c024:	83 ec 08             	sub    esp,0x8
c000c027:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c02b:	50                   	push   eax
c000c02c:	e8 31 d0 ff ff       	call   c0009062 <Device::addChild(Device*)>
c000c031:	83 c4 10             	add    esp,0x10
c000c034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c038:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c046:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c04f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c053:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c05c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c060:	8b 00                	mov    eax,DWORD PTR [eax]
c000c062:	83 c0 08             	add    eax,0x8
c000c065:	8b 00                	mov    eax,DWORD PTR [eax]
c000c067:	6a 00                	push   0x0
c000c069:	6a 00                	push   0x0
c000c06b:	6a 00                	push   0x0
c000c06d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c071:	ff d0                	call   eax
c000c073:	83 c4 10             	add    esp,0x10
c000c076:	66 90                	xchg   ax,ax
c000c078:	90                   	nop
c000c079:	83 c4 28             	add    esp,0x28
c000c07c:	5b                   	pop    ebx
c000c07d:	c3                   	ret    
c000c07e:	66 90                	xchg   ax,ax

c000c080 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	83 ec 0c             	sub    esp,0xc
c000c086:	68 b4 20 02 c0       	push   0xc00220b4
c000c08b:	e8 16 2c 00 00       	call   c000eca6 <KePanic(char const*)>
c000c090:	83 c4 10             	add    esp,0x10
c000c093:	90                   	nop
c000c094:	83 c4 0c             	add    esp,0xc
c000c097:	c3                   	ret    

c000c098 <ACPI::open(int, int, void*)>:
c000c098:	57                   	push   edi
c000c099:	56                   	push   esi
c000c09a:	53                   	push   ebx
c000c09b:	81 ec 70 01 00 00    	sub    esp,0x170
c000c0a1:	83 ec 0c             	sub    esp,0xc
c000c0a4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c0ab:	e8 c4 fd ff ff       	call   c000be74 <ACPI::detectPCI()>
c000c0b0:	83 c4 10             	add    esp,0x10
c000c0b3:	83 ec 0c             	sub    esp,0xc
c000c0b6:	68 24 22 02 c0       	push   0xc0022224
c000c0bb:	e8 44 05 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	b8 4c 05 00 00       	mov    eax,0x54c
c000c0c8:	8a 00                	mov    al,BYTE PTR [eax]
c000c0ca:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c0d1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c0d9:	83 f8 01             	cmp    eax,0x1
c000c0dc:	75 12                	jne    c000c0f0 <ACPI::open(int, int, void*)+0x58>
c000c0de:	83 ec 0c             	sub    esp,0xc
c000c0e1:	68 c5 20 02 c0       	push   0xc00220c5
c000c0e6:	e8 cb 80 00 00       	call   c00141b6 <Thr::loadKernelSymbolTable(char const*)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	eb 34                	jmp    c000c124 <ACPI::open(int, int, void*)+0x8c>
c000c0f0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c0f8:	3d bb 00 00 00       	cmp    eax,0xbb
c000c0fd:	75 15                	jne    c000c114 <ACPI::open(int, int, void*)+0x7c>
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	68 e3 20 02 c0       	push   0xc00220e3
c000c107:	e8 aa 80 00 00       	call   c00141b6 <Thr::loadKernelSymbolTable(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	eb 13                	jmp    c000c124 <ACPI::open(int, int, void*)+0x8c>
c000c111:	8d 76 00             	lea    esi,[esi+0x0]
c000c114:	83 ec 0c             	sub    esp,0xc
c000c117:	68 01 21 02 c0       	push   0xc0022101
c000c11c:	e8 85 2b 00 00       	call   c000eca6 <KePanic(char const*)>
c000c121:	83 c4 10             	add    esp,0x10
c000c124:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c12c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c137:	83 ec 0c             	sub    esp,0xc
c000c13a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c141:	e8 19 28 00 00       	call   c000e95f <malloc>
c000c146:	83 c4 10             	add    esp,0x10
c000c149:	89 c3                	mov    ebx,eax
c000c14b:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c150:	83 ec 04             	sub    esp,0x4
c000c153:	50                   	push   eax
c000c154:	68 1b 21 02 c0       	push   0xc002211b
c000c159:	53                   	push   ebx
c000c15a:	e8 d3 bf ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c169:	83 ec 08             	sub    esp,0x8
c000c16c:	6a 01                	push   0x1
c000c16e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c175:	e8 d6 bf ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c184:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c18c:	75 16                	jne    c000c1a4 <ACPI::open(int, int, void*)+0x10c>
c000c18e:	83 ec 0c             	sub    esp,0xc
c000c191:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c198:	e8 11 c0 ff ff       	call   c00081ae <File::close()>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	eb 0a                	jmp    c000c1ac <ACPI::open(int, int, void*)+0x114>
c000c1a2:	66 90                	xchg   ax,ax
c000c1a4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c1ac:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c1b4:	74 1e                	je     c000c1d4 <ACPI::open(int, int, void*)+0x13c>
c000c1b6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c1bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1bf:	83 c0 08             	add    eax,0x8
c000c1c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1ce:	ff d0                	call   eax
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	90                   	nop
c000c1d4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c1db:	83 f0 01             	xor    eax,0x1
c000c1de:	0f b6 c0             	movzx  eax,al
c000c1e1:	85 c0                	test   eax,eax
c000c1e3:	74 2f                	je     c000c214 <ACPI::open(int, int, void*)+0x17c>
c000c1e5:	83 ec 0c             	sub    esp,0xc
c000c1e8:	68 39 21 02 c0       	push   0xc0022139
c000c1ed:	e8 12 04 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000c1f2:	83 c4 10             	add    esp,0x10
c000c1f5:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c200:	83 ec 0c             	sub    esp,0xc
c000c203:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c20a:	e8 f9 60 00 00       	call   c0012308 <Virt::setupPageSwapping(int)>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	66 90                	xchg   ax,ax
c000c214:	83 ec 0c             	sub    esp,0xc
c000c217:	68 54 21 02 c0       	push   0xc0022154
c000c21c:	e8 e3 03 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c22b:	83 ec 08             	sub    esp,0x8
c000c22e:	6a 13                	push   0x13
c000c230:	50                   	push   eax
c000c231:	e8 5a d1 ff ff       	call   c0009390 <getDevicesOfType(DeviceType)>
c000c236:	83 c4 0c             	add    esp,0xc
c000c239:	8d 76 00             	lea    esi,[esi+0x0]
c000c23c:	83 ec 0c             	sub    esp,0xc
c000c23f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c246:	50                   	push   eax
c000c247:	e8 c0 43 01 00       	call   c002060c <LinkedList<Device>::isEmpty()>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	83 f0 01             	xor    eax,0x1
c000c252:	0f b6 c0             	movzx  eax,al
c000c255:	85 c0                	test   eax,eax
c000c257:	0f 84 47 01 00 00    	je     c000c3a4 <ACPI::open(int, int, void*)+0x30c>
c000c25d:	83 ec 0c             	sub    esp,0xc
c000c260:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c267:	50                   	push   eax
c000c268:	e8 bb 43 01 00       	call   c0020628 <LinkedList<Device>::getFirstElement()>
c000c26d:	83 c4 10             	add    esp,0x10
c000c270:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c281:	50                   	push   eax
c000c282:	e8 a9 43 01 00       	call   c0020630 <LinkedList<Device>::removeFirst()>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c291:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c298:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c29f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c2a3:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c2a9:	ba 09 00 00 00       	mov    edx,0x9
c000c2ae:	fc                   	cld    
c000c2af:	89 c7                	mov    edi,eax
c000c2b1:	89 de                	mov    esi,ebx
c000c2b3:	89 d1                	mov    ecx,edx
c000c2b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2b7:	83 ec 08             	sub    esp,0x8
c000c2ba:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c2be:	50                   	push   eax
c000c2bf:	83 ec 24             	sub    esp,0x24
c000c2c2:	89 e0                	mov    eax,esp
c000c2c4:	89 c3                	mov    ebx,eax
c000c2c6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c2ca:	ba 09 00 00 00       	mov    edx,0x9
c000c2cf:	89 df                	mov    edi,ebx
c000c2d1:	89 c6                	mov    esi,eax
c000c2d3:	89 d1                	mov    ecx,edx
c000c2d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2d7:	e8 1e ff 00 00       	call   c001c1fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2dc:	83 c4 30             	add    esp,0x30
c000c2df:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c2e6:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c2ee:	0f 84 48 ff ff ff    	je     c000c23c <ACPI::open(int, int, void*)+0x1a4>
c000c2f4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c2ff:	83 ec 0c             	sub    esp,0xc
c000c302:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c309:	e8 51 26 00 00       	call   c000e95f <malloc>
c000c30e:	83 c4 10             	add    esp,0x10
c000c311:	89 c3                	mov    ebx,eax
c000c313:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c318:	83 ec 04             	sub    esp,0x4
c000c31b:	50                   	push   eax
c000c31c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c323:	53                   	push   ebx
c000c324:	e8 09 be ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c329:	83 c4 10             	add    esp,0x10
c000c32c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c333:	83 ec 0c             	sub    esp,0xc
c000c336:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c33d:	e8 d2 c0 ff ff       	call   c0008414 <File::exists()>
c000c342:	83 c4 10             	add    esp,0x10
c000c345:	0f b6 c0             	movzx  eax,al
c000c348:	85 c0                	test   eax,eax
c000c34a:	74 28                	je     c000c374 <ACPI::open(int, int, void*)+0x2dc>
c000c34c:	83 ec 08             	sub    esp,0x8
c000c34f:	6a 01                	push   0x1
c000c351:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c358:	e8 d3 88 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c000c35d:	83 c4 10             	add    esp,0x10
c000c360:	83 ec 08             	sub    esp,0x8
c000c363:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c36a:	50                   	push   eax
c000c36b:	e8 12 8b 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	90                   	nop
c000c374:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c37c:	0f 84 ba fe ff ff    	je     c000c23c <ACPI::open(int, int, void*)+0x1a4>
c000c382:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c389:	8b 00                	mov    eax,DWORD PTR [eax]
c000c38b:	83 c0 08             	add    eax,0x8
c000c38e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c39a:	ff d0                	call   eax
c000c39c:	83 c4 10             	add    esp,0x10
c000c39f:	e9 98 fe ff ff       	jmp    c000c23c <ACPI::open(int, int, void*)+0x1a4>
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c3ae:	50                   	push   eax
c000c3af:	e8 54 42 01 00       	call   c0020608 <LinkedList<Device>::~LinkedList()>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c3bd:	83 ec 08             	sub    esp,0x8
c000c3c0:	6a 01                	push   0x1
c000c3c2:	68 6e 21 02 c0       	push   0xc002216e
c000c3c7:	e8 64 88 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c000c3cc:	83 c4 10             	add    esp,0x10
c000c3cf:	83 ec 08             	sub    esp,0x8
c000c3d2:	53                   	push   ebx
c000c3d3:	50                   	push   eax
c000c3d4:	e8 a9 8a 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c3e1:	85 c0                	test   eax,eax
c000c3e3:	0f 84 27 01 00 00    	je     c000c510 <ACPI::open(int, int, void*)+0x478>
c000c3e9:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 84 1a 01 00 00    	je     c000c510 <ACPI::open(int, int, void*)+0x478>
c000c3f6:	83 ec 0c             	sub    esp,0xc
c000c3f9:	68 8b 21 02 c0       	push   0xc002218b
c000c3fe:	e8 01 02 00 00       	call   c000c604 <KeSetBootMessage(char const*)>
c000c403:	83 c4 10             	add    esp,0x10
c000c406:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c41b:	e8 3f 25 00 00       	call   c000e95f <malloc>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c3                	mov    ebx,eax
c000c425:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000c42a:	83 ec 04             	sub    esp,0x4
c000c42d:	50                   	push   eax
c000c42e:	68 a8 21 02 c0       	push   0xc00221a8
c000c433:	53                   	push   ebx
c000c434:	e8 f9 bc ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c439:	83 c4 10             	add    esp,0x10
c000c43c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c443:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c44b:	74 1f                	je     c000c46c <ACPI::open(int, int, void*)+0x3d4>
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c457:	e8 b8 bf ff ff       	call   c0008414 <File::exists()>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	0f b6 c0             	movzx  eax,al
c000c462:	85 c0                	test   eax,eax
c000c464:	74 06                	je     c000c46c <ACPI::open(int, int, void*)+0x3d4>
c000c466:	b0 01                	mov    al,0x1
c000c468:	eb 06                	jmp    c000c470 <ACPI::open(int, int, void*)+0x3d8>
c000c46a:	66 90                	xchg   ax,ax
c000c46c:	b0 00                	mov    al,0x0
c000c46e:	66 90                	xchg   ax,ax
c000c470:	0f b6 c0             	movzx  eax,al
c000c473:	85 c0                	test   eax,eax
c000c475:	74 25                	je     c000c49c <ACPI::open(int, int, void*)+0x404>
c000c477:	83 ec 08             	sub    esp,0x8
c000c47a:	6a 01                	push   0x1
c000c47c:	68 a8 21 02 c0       	push   0xc00221a8
c000c481:	e8 aa 87 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	83 ec 08             	sub    esp,0x8
c000c48c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c493:	50                   	push   eax
c000c494:	e8 e9 89 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c000c499:	83 c4 10             	add    esp,0x10
c000c49c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4a4:	74 2a                	je     c000c4d0 <ACPI::open(int, int, void*)+0x438>
c000c4a6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4ae:	74 20                	je     c000c4d0 <ACPI::open(int, int, void*)+0x438>
c000c4b0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c4b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4b9:	83 c0 08             	add    eax,0x8
c000c4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4be:	83 ec 0c             	sub    esp,0xc
c000c4c1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c4c8:	ff d0                	call   eax
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c4d0:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c4d5:	83 ec 08             	sub    esp,0x8
c000c4d8:	68 c5 21 02 c0       	push   0xc00221c5
c000c4dd:	50                   	push   eax
c000c4de:	e8 a1 f2 ff ff       	call   c000b784 <findDataTable(unsigned char*, char*)>
c000c4e3:	83 c4 10             	add    esp,0x10
c000c4e6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c4ed:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c4f5:	74 19                	je     c000c510 <ACPI::open(int, int, void*)+0x478>
c000c4f7:	83 ec 08             	sub    esp,0x8
c000c4fa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c501:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c508:	e8 73 fb ff ff       	call   c000c080 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c50d:	83 c4 10             	add    esp,0x10
c000c510:	b8 00 00 00 00       	mov    eax,0x0
c000c515:	81 c4 70 01 00 00    	add    esp,0x170
c000c51b:	5b                   	pop    ebx
c000c51c:	5e                   	pop    esi
c000c51d:	5f                   	pop    edi
c000c51e:	c3                   	ret    

c000c51f <KeInitialiseAtexit()>:
c000c51f:	83 ec 10             	sub    esp,0x10
c000c522:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c52c:	6a 60                	push   0x60
c000c52e:	6a 00                	push   0x0
c000c530:	68 00 ad 02 c0       	push   0xc002ad00
c000c535:	e8 b6 3f ff ff       	call   c00004f0 <memset>
c000c53a:	83 c4 1c             	add    esp,0x1c
c000c53d:	c3                   	ret    

c000c53e <KeRegisterAtexit(void (*)(void*), void*)>:
c000c53e:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c543:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c547:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c54e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c552:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c559:	40                   	inc    eax
c000c55a:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c55f:	83 f8 17             	cmp    eax,0x17
c000c562:	7e 0d                	jle    c000c571 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c564:	c7 44 24 04 70 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022270
c000c56c:	e9 35 27 00 00       	jmp    c000eca6 <KePanic(char const*)>
c000c571:	c3                   	ret    

c000c572 <KeExecuteAtexit()>:
c000c572:	53                   	push   ebx
c000c573:	31 db                	xor    ebx,ebx
c000c575:	83 ec 08             	sub    esp,0x8
c000c578:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c57e:	7e 50                	jle    c000c5d0 <KeExecuteAtexit()+0x5e>
c000c580:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c587:	85 c0                	test   eax,eax
c000c589:	74 42                	je     c000c5cd <KeExecuteAtexit()+0x5b>
c000c58b:	51                   	push   ecx
c000c58c:	50                   	push   eax
c000c58d:	53                   	push   ebx
c000c58e:	68 89 22 02 c0       	push   0xc0022289
c000c593:	e8 cc a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c598:	58                   	pop    eax
c000c599:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c5a0:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c5a7:	c7 04 24 ab 22 02 c0 	mov    DWORD PTR [esp],0xc00222ab
c000c5ae:	e8 b1 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5b3:	c7 04 24 3b 26 02 c0 	mov    DWORD PTR [esp],0xc002263b
c000c5ba:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c5c5:	e8 9a a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5ca:	83 c4 10             	add    esp,0x10
c000c5cd:	43                   	inc    ebx
c000c5ce:	eb a8                	jmp    c000c578 <KeExecuteAtexit()+0x6>
c000c5d0:	83 c4 08             	add    esp,0x8
c000c5d3:	5b                   	pop    ebx
c000c5d4:	c3                   	ret    

c000c5d5 <KeDisplaySplashScreen()>:
c000c5d5:	53                   	push   ebx
c000c5d6:	bb 01 00 00 00       	mov    ebx,0x1
c000c5db:	83 ec 08             	sub    esp,0x8
c000c5de:	43                   	inc    ebx
c000c5df:	0f be 83 ae 22 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffddd52]
c000c5e6:	85 c0                	test   eax,eax
c000c5e8:	74 15                	je     c000c5ff <KeDisplaySplashScreen()+0x2a>
c000c5ea:	83 ec 0c             	sub    esp,0xc
c000c5ed:	6a 01                	push   0x1
c000c5ef:	53                   	push   ebx
c000c5f0:	6a 00                	push   0x0
c000c5f2:	6a 0f                	push   0xf
c000c5f4:	50                   	push   eax
c000c5f5:	e8 f6 d2 00 00       	call   c00198f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c5fa:	83 c4 20             	add    esp,0x20
c000c5fd:	eb df                	jmp    c000c5de <KeDisplaySplashScreen()+0x9>
c000c5ff:	83 c4 08             	add    esp,0x8
c000c602:	5b                   	pop    ebx
c000c603:	c3                   	ret    

c000c604 <KeSetBootMessage(char const*)>:
c000c604:	57                   	push   edi
c000c605:	56                   	push   esi
c000c606:	53                   	push   ebx
c000c607:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c60d:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c614:	68 9e 00 00 00       	push   0x9e
c000c619:	6a 00                	push   0x0
c000c61b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c61f:	56                   	push   esi
c000c620:	e8 cb 3e ff ff       	call   c00004f0 <memset>
c000c625:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c628:	e8 43 3f ff ff       	call   c0000570 <strlen>
c000c62d:	ba 50 00 00 00       	mov    edx,0x50
c000c632:	83 c4 10             	add    esp,0x10
c000c635:	29 c2                	sub    edx,eax
c000c637:	31 c9                	xor    ecx,ecx
c000c639:	83 e2 fe             	and    edx,0xfffffffe
c000c63c:	01 f2                	add    edx,esi
c000c63e:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c643:	84 c0                	test   al,al
c000c645:	74 0a                	je     c000c651 <KeSetBootMessage(char const*)+0x4d>
c000c647:	80 cc 07             	or     ah,0x7
c000c64a:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c64e:	41                   	inc    ecx
c000c64f:	eb ed                	jmp    c000c63e <KeSetBootMessage(char const*)+0x3a>
c000c651:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c656:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c65b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c65d:	50                   	push   eax
c000c65e:	50                   	push   eax
c000c65f:	53                   	push   ebx
c000c660:	68 c3 22 02 c0       	push   0xc00222c3
c000c665:	e8 fa a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c66a:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c670:	5b                   	pop    ebx
c000c671:	5e                   	pop    esi
c000c672:	5f                   	pop    edi
c000c673:	c3                   	ret    

c000c674 <__cxa_atexit>:
c000c674:	31 c0                	xor    eax,eax
c000c676:	c3                   	ret    

c000c677 <__cxa_finalize>:
c000c677:	c3                   	ret    

c000c678 <__stack_chk_fail>:
c000c678:	55                   	push   ebp
c000c679:	89 e5                	mov    ebp,esp
c000c67b:	83 ec 10             	sub    esp,0x10
c000c67e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c681:	68 d1 22 02 c0       	push   0xc00222d1
c000c686:	e8 d9 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c68b:	58                   	pop    eax
c000c68c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c68f:	5a                   	pop    edx
c000c690:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c693:	68 d1 22 02 c0       	push   0xc00222d1
c000c698:	e8 c7 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c69d:	c7 04 24 d9 22 02 c0 	mov    DWORD PTR [esp],0xc00222d9
c000c6a4:	e8 fd 25 00 00       	call   c000eca6 <KePanic(char const*)>
c000c6a9:	83 c4 10             	add    esp,0x10
c000c6ac:	c9                   	leave  
c000c6ad:	c3                   	ret    

c000c6ae <__cxa_pure_virtual>:
c000c6ae:	83 ec 18             	sub    esp,0x18
c000c6b1:	68 f1 22 02 c0       	push   0xc00222f1
c000c6b6:	e8 eb 25 00 00       	call   c000eca6 <KePanic(char const*)>
c000c6bb:	83 c4 1c             	add    esp,0x1c
c000c6be:	c3                   	ret    

c000c6bf <operator new[](unsigned long)>:
c000c6bf:	e9 9b 22 00 00       	jmp    c000e95f <malloc>

c000c6c4 <operator delete(void*, unsigned long)>:
c000c6c4:	e9 b6 22 00 00       	jmp    c000e97f <rfree>

c000c6c9 <operator delete[](void*)>:
c000c6c9:	e9 b1 22 00 00       	jmp    c000e97f <rfree>

c000c6ce <operator delete[](void*, unsigned long)>:
c000c6ce:	e9 ac 22 00 00       	jmp    c000e97f <rfree>
c000c6d3:	90                   	nop

c000c6d4 <CUnlockScheduler>:
c000c6d4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000c6dc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c6e1:	85 c0                	test   eax,eax
c000c6e3:	75 03                	jne    c000c6e8 <CUnlockScheduler+0x14>
c000c6e5:	fb                   	sti    
c000c6e6:	66 90                	xchg   ax,ax
c000c6e8:	90                   	nop
c000c6e9:	c3                   	ret    
c000c6ea:	66 90                	xchg   ax,ax

c000c6ec <CLockScheduler>:
c000c6ec:	fa                   	cli    
c000c6ed:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000c6f2:	83 c0 01             	add    eax,0x1
c000c6f5:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000c6fa:	90                   	nop
c000c6fb:	c3                   	ret    

c000c6fc <CPrintf>:
c000c6fc:	83 ec 0c             	sub    esp,0xc
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c706:	68 04 23 02 c0       	push   0xc0022304
c000c70b:	e8 54 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c710:	83 c4 10             	add    esp,0x10
c000c713:	90                   	nop
c000c714:	83 c4 0c             	add    esp,0xc
c000c717:	c3                   	ret    

c000c718 <CmOpen(char const*)>:
c000c718:	57                   	push   edi
c000c719:	56                   	push   esi
c000c71a:	53                   	push   ebx
c000c71b:	83 ec 1c             	sub    esp,0x1c
c000c71e:	6a 30                	push   0x30
c000c720:	e8 3a 22 00 00       	call   c000e95f <malloc>
c000c725:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c72c:	89 c3                	mov    ebx,eax
c000c72e:	e8 2c 22 00 00       	call   c000e95f <malloc>
c000c733:	83 c4 0c             	add    esp,0xc
c000c736:	89 c6                	mov    esi,eax
c000c738:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000c73e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c742:	50                   	push   eax
c000c743:	e8 ea b9 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c748:	83 c4 0c             	add    esp,0xc
c000c74b:	89 33                	mov    DWORD PTR [ebx],esi
c000c74d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c751:	50                   	push   eax
c000c752:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c756:	50                   	push   eax
c000c757:	56                   	push   esi
c000c758:	e8 f5 bc ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000c75d:	5a                   	pop    edx
c000c75e:	59                   	pop    ecx
c000c75f:	6a 01                	push   0x1
c000c761:	ff 33                	push   DWORD PTR [ebx]
c000c763:	e8 e8 b9 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c768:	5e                   	pop    esi
c000c769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c76d:	e8 ed 21 00 00       	call   c000e95f <malloc>
c000c772:	5a                   	pop    edx
c000c773:	89 c7                	mov    edi,eax
c000c775:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c779:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c77b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c77d:	56                   	push   esi
c000c77e:	57                   	push   edi
c000c77f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c783:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c787:	50                   	push   eax
c000c788:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c78b:	83 c4 14             	add    esp,0x14
c000c78e:	ff 33                	push   DWORD PTR [ebx]
c000c790:	e8 19 ba ff ff       	call   c00081ae <File::close()>
c000c795:	59                   	pop    ecx
c000c796:	58                   	pop    eax
c000c797:	6a 13                	push   0x13
c000c799:	ff 33                	push   DWORD PTR [ebx]
c000c79b:	e8 b0 b9 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c7a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7a4:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7a7:	57                   	push   edi
c000c7a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7b0:	50                   	push   eax
c000c7b1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c7b4:	83 c4 14             	add    esp,0x14
c000c7b7:	57                   	push   edi
c000c7b8:	e8 b2 21 00 00       	call   c000e96f <free>
c000c7bd:	83 c4 10             	add    esp,0x10
c000c7c0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c3:	75 10                	jne    c000c7d5 <CmOpen(char const*)+0xbd>
c000c7c5:	83 ec 0c             	sub    esp,0xc
c000c7c8:	68 07 23 02 c0       	push   0xc0022307
c000c7cd:	e8 d4 24 00 00       	call   c000eca6 <KePanic(char const*)>
c000c7d2:	83 c4 10             	add    esp,0x10
c000c7d5:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c7d8:	50                   	push   eax
c000c7d9:	6a 00                	push   0x0
c000c7db:	6a 00                	push   0x0
c000c7dd:	ff 33                	push   DWORD PTR [ebx]
c000c7df:	e8 2a ba ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c7e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7e8:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7eb:	57                   	push   edi
c000c7ec:	6a 00                	push   0x0
c000c7ee:	6a 2b                	push   0x2b
c000c7f0:	50                   	push   eax
c000c7f1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7f4:	83 c4 1c             	add    esp,0x1c
c000c7f7:	6a 00                	push   0x0
c000c7f9:	6a 00                	push   0x0
c000c7fb:	ff 33                	push   DWORD PTR [ebx]
c000c7fd:	e8 0c ba ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c802:	83 c4 0c             	add    esp,0xc
c000c805:	6a 08                	push   0x8
c000c807:	68 18 23 02 c0       	push   0xc0022318
c000c80c:	57                   	push   edi
c000c80d:	e8 6e 3b ff ff       	call   c0000380 <memcmp>
c000c812:	83 c4 10             	add    esp,0x10
c000c815:	85 c0                	test   eax,eax
c000c817:	74 10                	je     c000c829 <CmOpen(char const*)+0x111>
c000c819:	83 ec 0c             	sub    esp,0xc
c000c81c:	68 21 23 02 c0       	push   0xc0022321
c000c821:	e8 80 24 00 00       	call   c000eca6 <KePanic(char const*)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c82d:	89 d8                	mov    eax,ebx
c000c82f:	83 c4 10             	add    esp,0x10
c000c832:	5b                   	pop    ebx
c000c833:	5e                   	pop    esi
c000c834:	5f                   	pop    edi
c000c835:	c3                   	ret    

c000c836 <CmClose(Reghive_Tag*)>:
c000c836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c83a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c83e:	74 0b                	je     c000c84b <CmClose(Reghive_Tag*)+0x15>
c000c840:	8b 00                	mov    eax,DWORD PTR [eax]
c000c842:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c846:	e9 63 b9 ff ff       	jmp    c00081ae <File::close()>
c000c84b:	c3                   	ret    

c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c84c:	53                   	push   ebx
c000c84d:	83 ec 18             	sub    esp,0x18
c000c850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c854:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c858:	74 29                	je     c000c883 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c85a:	50                   	push   eax
c000c85b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c860:	99                   	cdq    
c000c861:	52                   	push   edx
c000c862:	50                   	push   eax
c000c863:	ff 33                	push   DWORD PTR [ebx]
c000c865:	e8 a4 b9 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c86a:	5a                   	pop    edx
c000c86b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c86d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c871:	8b 10                	mov    edx,DWORD PTR [eax]
c000c873:	51                   	push   ecx
c000c874:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c878:	6a 00                	push   0x0
c000c87a:	6a 2b                	push   0x2b
c000c87c:	50                   	push   eax
c000c87d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c880:	83 c4 20             	add    esp,0x20
c000c883:	83 c4 18             	add    esp,0x18
c000c886:	5b                   	pop    ebx
c000c887:	c3                   	ret    

c000c888 <CmGetString(Reghive_Tag*, int, char*)>:
c000c888:	55                   	push   ebp
c000c889:	57                   	push   edi
c000c88a:	56                   	push   esi
c000c88b:	53                   	push   ebx
c000c88c:	31 db                	xor    ebx,ebx
c000c88e:	83 ec 70             	sub    esp,0x70
c000c891:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c898:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c89c:	50                   	push   eax
c000c89d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c8a4:	55                   	push   ebp
c000c8a5:	e8 a2 ff ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8aa:	83 c4 10             	add    esp,0x10
c000c8ad:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c8b2:	c1 e0 08             	shl    eax,0x8
c000c8b5:	89 c2                	mov    edx,eax
c000c8b7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c8bc:	09 d0                	or     eax,edx
c000c8be:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c8c3:	c1 e0 08             	shl    eax,0x8
c000c8c6:	09 d0                	or     eax,edx
c000c8c8:	74 25                	je     c000c8ef <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c8ca:	6b fb 0d             	imul   edi,ebx,0xd
c000c8cd:	52                   	push   edx
c000c8ce:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c8d2:	52                   	push   edx
c000c8d3:	50                   	push   eax
c000c8d4:	55                   	push   ebp
c000c8d5:	e8 72 ff ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8da:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c8de:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c8e5:	b9 27 00 00 00       	mov    ecx,0x27
c000c8ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	83 c3 03             	add    ebx,0x3
c000c8f2:	83 fb 15             	cmp    ebx,0x15
c000c8f5:	75 b6                	jne    c000c8ad <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c8f7:	83 c4 6c             	add    esp,0x6c
c000c8fa:	5b                   	pop    ebx
c000c8fb:	5e                   	pop    esi
c000c8fc:	5f                   	pop    edi
c000c8fd:	5d                   	pop    ebp
c000c8fe:	c3                   	ret    

c000c8ff <CmEnterDirectory(Reghive_Tag*, int)>:
c000c8ff:	83 ec 40             	sub    esp,0x40
c000c902:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c906:	50                   	push   eax
c000c907:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c90b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c90f:	e8 38 ff ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	83 c8 ff             	or     eax,0xffffffff
c000c91a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c91f:	75 19                	jne    c000c93a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c921:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c926:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c92b:	c1 e0 08             	shl    eax,0x8
c000c92e:	09 c2                	or     edx,eax
c000c930:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c935:	c1 e0 10             	shl    eax,0x10
c000c938:	09 d0                	or     eax,edx
c000c93a:	83 c4 3c             	add    esp,0x3c
c000c93d:	c3                   	ret    

c000c93e <CmGetNext(Reghive_Tag*, int)>:
c000c93e:	83 ec 40             	sub    esp,0x40
c000c941:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c945:	50                   	push   eax
c000c946:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c94a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c94e:	e8 f9 fe ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c953:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c958:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c95d:	c1 e0 08             	shl    eax,0x8
c000c960:	09 c2                	or     edx,eax
c000c962:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c967:	83 c4 4c             	add    esp,0x4c
c000c96a:	c1 e0 10             	shl    eax,0x10
c000c96d:	09 d0                	or     eax,edx
c000c96f:	c3                   	ret    

c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c970:	53                   	push   ebx
c000c971:	83 ec 18             	sub    esp,0x18
c000c974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c978:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c97c:	74 29                	je     c000c9a7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c97e:	50                   	push   eax
c000c97f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c984:	99                   	cdq    
c000c985:	52                   	push   edx
c000c986:	50                   	push   eax
c000c987:	ff 33                	push   DWORD PTR [ebx]
c000c989:	e8 80 b8 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000c98e:	5a                   	pop    edx
c000c98f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c991:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c995:	8b 10                	mov    edx,DWORD PTR [eax]
c000c997:	51                   	push   ecx
c000c998:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c99c:	6a 00                	push   0x0
c000c99e:	6a 2b                	push   0x2b
c000c9a0:	50                   	push   eax
c000c9a1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9a4:	83 c4 20             	add    esp,0x20
c000c9a7:	83 c4 18             	add    esp,0x18
c000c9aa:	5b                   	pop    ebx
c000c9ab:	c3                   	ret    

c000c9ac <CmFreeExtent(Reghive_Tag*, int)>:
c000c9ac:	53                   	push   ebx
c000c9ad:	83 ec 3c             	sub    esp,0x3c
c000c9b0:	6a 2b                	push   0x2b
c000c9b2:	6a 00                	push   0x0
c000c9b4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c9b8:	53                   	push   ebx
c000c9b9:	e8 32 3b ff ff       	call   c00004f0 <memset>
c000c9be:	83 c4 0c             	add    esp,0xc
c000c9c1:	53                   	push   ebx
c000c9c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9c6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9ca:	e8 a1 ff ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c9cf:	83 c4 48             	add    esp,0x48
c000c9d2:	5b                   	pop    ebx
c000c9d3:	c3                   	ret    

c000c9d4 <CmUpdateHeader(Reghive_Tag*)>:
c000c9d4:	83 ec 0c             	sub    esp,0xc
c000c9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9db:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c9df:	74 10                	je     c000c9f1 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c9e1:	52                   	push   edx
c000c9e2:	8d 50 05             	lea    edx,[eax+0x5]
c000c9e5:	52                   	push   edx
c000c9e6:	6a 00                	push   0x0
c000c9e8:	50                   	push   eax
c000c9e9:	e8 82 ff ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c9ee:	83 c4 10             	add    esp,0x10
c000c9f1:	83 c4 0c             	add    esp,0xc
c000c9f4:	c3                   	ret    

c000c9f5 <CmExpand(Reghive_Tag*, int)>:
c000c9f5:	57                   	push   edi
c000c9f6:	56                   	push   esi
c000c9f7:	83 ce ff             	or     esi,0xffffffff
c000c9fa:	53                   	push   ebx
c000c9fb:	83 ec 30             	sub    esp,0x30
c000c9fe:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca02:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca06:	74 5f                	je     c000ca67 <CmExpand(Reghive_Tag*, int)+0x72>
c000ca08:	31 d2                	xor    edx,edx
c000ca0a:	31 f6                	xor    esi,esi
c000ca0c:	50                   	push   eax
c000ca0d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ca11:	52                   	push   edx
c000ca12:	50                   	push   eax
c000ca13:	ff 33                	push   DWORD PTR [ebx]
c000ca15:	e8 f4 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ca1a:	83 c4 0c             	add    esp,0xc
c000ca1d:	6a 2b                	push   0x2b
c000ca1f:	6a 00                	push   0x0
c000ca21:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000ca25:	57                   	push   edi
c000ca26:	e8 c5 3a ff ff       	call   c00004f0 <memset>
c000ca2b:	83 c4 10             	add    esp,0x10
c000ca2e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ca32:	7d 1b                	jge    c000ca4f <CmExpand(Reghive_Tag*, int)+0x5a>
c000ca34:	83 ec 0c             	sub    esp,0xc
c000ca37:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca39:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca3d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca3f:	46                   	inc    esi
c000ca40:	51                   	push   ecx
c000ca41:	57                   	push   edi
c000ca42:	6a 00                	push   0x0
c000ca44:	6a 2b                	push   0x2b
c000ca46:	50                   	push   eax
c000ca47:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca4a:	83 c4 20             	add    esp,0x20
c000ca4d:	eb df                	jmp    c000ca2e <CmExpand(Reghive_Tag*, int)+0x39>
c000ca4f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ca53:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000ca56:	83 ec 0c             	sub    esp,0xc
c000ca59:	01 f2                	add    edx,esi
c000ca5b:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000ca5e:	53                   	push   ebx
c000ca5f:	e8 70 ff ff ff       	call   c000c9d4 <CmUpdateHeader(Reghive_Tag*)>
c000ca64:	83 c4 10             	add    esp,0x10
c000ca67:	83 c4 30             	add    esp,0x30
c000ca6a:	89 f0                	mov    eax,esi
c000ca6c:	5b                   	pop    ebx
c000ca6d:	5e                   	pop    esi
c000ca6e:	5f                   	pop    edi
c000ca6f:	c3                   	ret    

c000ca70 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 cb ff             	or     ebx,0xffffffff
c000ca77:	83 ec 1c             	sub    esp,0x1c
c000ca7a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca7e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca82:	74 68                	je     c000caec <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca84:	be 2b 00 00 00       	mov    esi,0x2b
c000ca89:	51                   	push   ecx
c000ca8a:	31 ff                	xor    edi,edi
c000ca8c:	6a 00                	push   0x0
c000ca8e:	31 db                	xor    ebx,ebx
c000ca90:	6a 00                	push   0x0
c000ca92:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca95:	e8 74 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000ca9a:	83 c4 10             	add    esp,0x10
c000ca9d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000caa0:	76 3b                	jbe    c000cadd <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000caa8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000caac:	8b 10                	mov    edx,DWORD PTR [eax]
c000caae:	51                   	push   ecx
c000caaf:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cab3:	51                   	push   ecx
c000cab4:	6a 00                	push   0x0
c000cab6:	6a 01                	push   0x1
c000cab8:	50                   	push   eax
c000cab9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cabc:	83 c4 20             	add    esp,0x20
c000cabf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cac4:	74 26                	je     c000caec <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cac6:	43                   	inc    ebx
c000cac7:	52                   	push   edx
c000cac8:	57                   	push   edi
c000cac9:	56                   	push   esi
c000caca:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cacd:	e8 3c b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cad2:	83 c6 2b             	add    esi,0x2b
c000cad5:	83 d7 00             	adc    edi,0x0
c000cad8:	83 c4 10             	add    esp,0x10
c000cadb:	eb c0                	jmp    c000ca9d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cadd:	50                   	push   eax
c000cade:	50                   	push   eax
c000cadf:	6a 40                	push   0x40
c000cae1:	55                   	push   ebp
c000cae2:	e8 0e ff ff ff       	call   c000c9f5 <CmExpand(Reghive_Tag*, int)>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	89 c3                	mov    ebx,eax
c000caec:	83 c4 1c             	add    esp,0x1c
c000caef:	89 d8                	mov    eax,ebx
c000caf1:	5b                   	pop    ebx
c000caf2:	5e                   	pop    esi
c000caf3:	5f                   	pop    edi
c000caf4:	5d                   	pop    ebp
c000caf5:	c3                   	ret    

c000caf6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000caf6:	55                   	push   ebp
c000caf7:	57                   	push   edi
c000caf8:	56                   	push   esi
c000caf9:	53                   	push   ebx
c000cafa:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb00:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb07:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb0e:	e8 5d ff ff ff       	call   c000ca70 <CmFindUnusedExtent(Reghive_Tag*)>
c000cb13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	6a 2b                	push   0x2b
c000cb1c:	6a 00                	push   0x0
c000cb1e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb22:	55                   	push   ebp
c000cb23:	e8 c8 39 ff ff       	call   c00004f0 <memset>
c000cb28:	83 c4 10             	add    esp,0x10
c000cb2b:	85 db                	test   ebx,ebx
c000cb2d:	74 12                	je     c000cb41 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb2f:	51                   	push   ecx
c000cb30:	55                   	push   ebp
c000cb31:	53                   	push   ebx
c000cb32:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb39:	e8 0e fd ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb3e:	83 c4 10             	add    esp,0x10
c000cb41:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb45:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb4c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb53:	85 db                	test   ebx,ebx
c000cb55:	74 49                	je     c000cba0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb57:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cb5c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cb61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb65:	c1 e0 08             	shl    eax,0x8
c000cb68:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb6e:	09 c8                	or     eax,ecx
c000cb70:	74 11                	je     c000cb83 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb72:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb76:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb7a:	c1 e8 10             	shr    eax,0x10
c000cb7d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb81:	eb 0f                	jmp    c000cb92 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb83:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb88:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb8d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb92:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb96:	c1 ea 08             	shr    edx,0x8
c000cb99:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb9e:	eb 0f                	jmp    c000cbaf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cba0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cba5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbaa:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbaf:	52                   	push   edx
c000cbb0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cbb4:	50                   	push   eax
c000cbb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbb9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbc0:	e8 ab fd ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	85 db                	test   ebx,ebx
c000cbca:	74 12                	je     c000cbde <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cbcc:	50                   	push   eax
c000cbcd:	55                   	push   ebp
c000cbce:	53                   	push   ebx
c000cbcf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbd6:	e8 95 fd ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cbe2:	83 c4 7c             	add    esp,0x7c
c000cbe5:	5b                   	pop    ebx
c000cbe6:	5e                   	pop    esi
c000cbe7:	5f                   	pop    edi
c000cbe8:	5d                   	pop    ebp
c000cbe9:	c3                   	ret    

c000cbea <CmSetString(Reghive_Tag*, int, char const*)>:
c000cbea:	55                   	push   ebp
c000cbeb:	57                   	push   edi
c000cbec:	56                   	push   esi
c000cbed:	53                   	push   ebx
c000cbee:	bb 27 00 00 00       	mov    ebx,0x27
c000cbf3:	81 ec 88 00 00 00    	sub    esp,0x88
c000cbf9:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc00:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc07:	e8 64 39 ff ff       	call   c0000570 <strlen>
c000cc0c:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc0f:	89 c8                	mov    eax,ecx
c000cc11:	99                   	cdq    
c000cc12:	f7 fb                	idiv   ebx
c000cc14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc18:	83 c4 10             	add    esp,0x10
c000cc1b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc21:	7e 10                	jle    c000cc33 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc23:	83 ec 0c             	sub    esp,0xc
c000cc26:	68 32 23 02 c0       	push   0xc0022332
c000cc2b:	e8 76 20 00 00       	call   c000eca6 <KePanic(char const*)>
c000cc30:	83 c4 10             	add    esp,0x10
c000cc33:	31 ff                	xor    edi,edi
c000cc35:	50                   	push   eax
c000cc36:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc3a:	53                   	push   ebx
c000cc3b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc42:	56                   	push   esi
c000cc43:	e8 04 fc ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc48:	83 c4 10             	add    esp,0x10
c000cc4b:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cc4f:	89 d0                	mov    eax,edx
c000cc51:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cc55:	c1 e0 08             	shl    eax,0x8
c000cc58:	09 c2                	or     edx,eax
c000cc5a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cc5e:	c1 e2 08             	shl    edx,0x8
c000cc61:	09 c2                	or     edx,eax
c000cc63:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000cc67:	7e 76                	jle    c000ccdf <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000cc69:	85 d2                	test   edx,edx
c000cc6b:	75 25                	jne    c000cc92 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc6d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc72:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc76:	50                   	push   eax
c000cc77:	6a 00                	push   0x0
c000cc79:	6a 00                	push   0x0
c000cc7b:	56                   	push   esi
c000cc7c:	e8 75 fe ff ff       	call   c000caf6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc81:	83 c4 10             	add    esp,0x10
c000cc84:	89 c2                	mov    edx,eax
c000cc86:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc89:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc8c:	c1 f8 10             	sar    eax,0x10
c000cc8f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc92:	55                   	push   ebp
c000cc93:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000cc97:	55                   	push   ebp
c000cc98:	52                   	push   edx
c000cc99:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cc9d:	56                   	push   esi
c000cc9e:	e8 a9 fb ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cca3:	83 c4 0c             	add    esp,0xc
c000cca6:	6a 27                	push   0x27
c000cca8:	6a 00                	push   0x0
c000ccaa:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccae:	51                   	push   ecx
c000ccaf:	e8 3c 38 ff ff       	call   c00004f0 <memset>
c000ccb4:	83 c4 0c             	add    esp,0xc
c000ccb7:	6b c7 27             	imul   eax,edi,0x27
c000ccba:	6a 27                	push   0x27
c000ccbc:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000ccc3:	50                   	push   eax
c000ccc4:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccc8:	51                   	push   ecx
c000ccc9:	e8 b2 39 ff ff       	call   c0000680 <strncpy>
c000ccce:	83 c4 0c             	add    esp,0xc
c000ccd1:	55                   	push   ebp
c000ccd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ccd6:	52                   	push   edx
c000ccd7:	56                   	push   esi
c000ccd8:	e8 93 fc ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccdd:	eb 19                	jmp    c000ccf8 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000ccdf:	85 d2                	test   edx,edx
c000cce1:	74 18                	je     c000ccfb <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cce3:	51                   	push   ecx
c000cce4:	51                   	push   ecx
c000cce5:	52                   	push   edx
c000cce6:	56                   	push   esi
c000cce7:	e8 c0 fc ff ff       	call   c000c9ac <CmFreeExtent(Reghive_Tag*, int)>
c000ccec:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000ccf0:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000ccf4:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000ccf8:	83 c4 10             	add    esp,0x10
c000ccfb:	47                   	inc    edi
c000ccfc:	83 c3 03             	add    ebx,0x3
c000ccff:	83 ff 07             	cmp    edi,0x7
c000cd02:	0f 85 43 ff ff ff    	jne    c000cc4b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd08:	50                   	push   eax
c000cd09:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd0d:	50                   	push   eax
c000cd0e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd15:	56                   	push   esi
c000cd16:	e8 55 fc ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd1b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd21:	5b                   	pop    ebx
c000cd22:	5e                   	pop    esi
c000cd23:	5f                   	pop    edi
c000cd24:	5d                   	pop    ebp
c000cd25:	c3                   	ret    

c000cd26 <CmGetMatch(char*, char*, bool, bool*)>:
c000cd26:	56                   	push   esi
c000cd27:	53                   	push   ebx
c000cd28:	50                   	push   eax
c000cd29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd2d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd32:	74 25                	je     c000cd59 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd34:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd37:	31 db                	xor    ebx,ebx
c000cd39:	50                   	push   eax
c000cd3a:	50                   	push   eax
c000cd3b:	8d 04 9d a0 46 02 c0 	lea    eax,[ebx*4-0x3ffdb960]
c000cd42:	50                   	push   eax
c000cd43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd47:	e8 04 3a ff ff       	call   c0000750 <strcmp>
c000cd4c:	83 c4 10             	add    esp,0x10
c000cd4f:	85 c0                	test   eax,eax
c000cd51:	74 2e                	je     c000cd81 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd53:	43                   	inc    ebx
c000cd54:	83 fb 3f             	cmp    ebx,0x3f
c000cd57:	75 e0                	jne    c000cd39 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cd59:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd5c:	31 db                	xor    ebx,ebx
c000cd5e:	8d 04 9d a0 46 02 c0 	lea    eax,[ebx*4-0x3ffdb960]
c000cd65:	51                   	push   ecx
c000cd66:	51                   	push   ecx
c000cd67:	50                   	push   eax
c000cd68:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd6c:	e8 df 39 ff ff       	call   c0000750 <strcmp>
c000cd71:	83 c4 10             	add    esp,0x10
c000cd74:	85 c0                	test   eax,eax
c000cd76:	74 09                	je     c000cd81 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd78:	43                   	inc    ebx
c000cd79:	83 fb 3f             	cmp    ebx,0x3f
c000cd7c:	75 e0                	jne    c000cd5e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd7e:	83 cb ff             	or     ebx,0xffffffff
c000cd81:	89 d8                	mov    eax,ebx
c000cd83:	5a                   	pop    edx
c000cd84:	5b                   	pop    ebx
c000cd85:	5e                   	pop    esi
c000cd86:	c3                   	ret    

c000cd87 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd87:	55                   	push   ebp
c000cd88:	31 c0                	xor    eax,eax
c000cd8a:	57                   	push   edi
c000cd8b:	56                   	push   esi
c000cd8c:	53                   	push   ebx
c000cd8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd91:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd95:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd97:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd9b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cda2:	83 fd 1f             	cmp    ebp,0x1f
c000cda5:	7f 0b                	jg     c000cdb2 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cda7:	0f b6 c2             	movzx  eax,dl
c000cdaa:	d3 e0                	shl    eax,cl
c000cdac:	09 07                	or     DWORD PTR [edi],eax
c000cdae:	b0 01                	mov    al,0x1
c000cdb0:	01 33                	add    DWORD PTR [ebx],esi
c000cdb2:	5b                   	pop    ebx
c000cdb3:	5e                   	pop    esi
c000cdb4:	5f                   	pop    edi
c000cdb5:	5d                   	pop    ebp
c000cdb6:	c3                   	ret    

c000cdb7 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cdb7:	57                   	push   edi
c000cdb8:	56                   	push   esi
c000cdb9:	53                   	push   ebx
c000cdba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cdbe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cdc2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cdc6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cdca:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cdcc:	7c 17                	jl     c000cde5 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cdce:	8b 17                	mov    edx,DWORD PTR [edi]
c000cdd0:	b8 01 00 00 00       	mov    eax,0x1
c000cdd5:	d3 e0                	shl    eax,cl
c000cdd7:	48                   	dec    eax
c000cdd8:	21 d0                	and    eax,edx
c000cdda:	d3 ea                	shr    edx,cl
c000cddc:	89 17                	mov    DWORD PTR [edi],edx
c000cdde:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cde0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cde3:	eb 05                	jmp    c000cdea <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cde5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cde8:	31 c0                	xor    eax,eax
c000cdea:	5b                   	pop    ebx
c000cdeb:	5e                   	pop    esi
c000cdec:	5f                   	pop    edi
c000cded:	c3                   	ret    

c000cdee <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cdee:	83 ec 40             	sub    esp,0x40
c000cdf1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cdf5:	50                   	push   eax
c000cdf6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cdfa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cdfe:	e8 49 fa ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce03:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce07:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce0b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce0f:	89 10                	mov    DWORD PTR [eax],edx
c000ce11:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ce14:	83 c4 4c             	add    esp,0x4c
c000ce17:	c3                   	ret    

c000ce18 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000ce18:	55                   	push   ebp
c000ce19:	57                   	push   edi
c000ce1a:	56                   	push   esi
c000ce1b:	53                   	push   ebx
c000ce1c:	83 ec 40             	sub    esp,0x40
c000ce1f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce23:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce27:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce2b:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce2f:	53                   	push   ebx
c000ce30:	56                   	push   esi
c000ce31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce35:	e8 12 fa ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce3a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce3e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce42:	83 c4 0c             	add    esp,0xc
c000ce45:	53                   	push   ebx
c000ce46:	56                   	push   esi
c000ce47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce4b:	e8 20 fb ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce50:	83 c4 4c             	add    esp,0x4c
c000ce53:	5b                   	pop    ebx
c000ce54:	5e                   	pop    esi
c000ce55:	5f                   	pop    edi
c000ce56:	5d                   	pop    ebp
c000ce57:	c3                   	ret    

c000ce58 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000ce58:	55                   	push   ebp
c000ce59:	57                   	push   edi
c000ce5a:	56                   	push   esi
c000ce5b:	31 f6                	xor    esi,esi
c000ce5d:	53                   	push   ebx
c000ce5e:	31 db                	xor    ebx,ebx
c000ce60:	83 ec 40             	sub    esp,0x40
c000ce63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ce6b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce73:	6a 12                	push   0x12
c000ce75:	68 ee 00 00 00       	push   0xee
c000ce7a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce7e:	e8 6d 36 ff ff       	call   c00004f0 <memset>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce8a:	6a 08                	push   0x8
c000ce8c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce90:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce94:	50                   	push   eax
c000ce95:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce99:	55                   	push   ebp
c000ce9a:	57                   	push   edi
c000ce9b:	e8 e7 fe ff ff       	call   c000cd87 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cea0:	83 c4 10             	add    esp,0x10
c000cea3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cea7:	50                   	push   eax
c000cea8:	6a 06                	push   0x6
c000ceaa:	55                   	push   ebp
c000ceab:	57                   	push   edi
c000ceac:	e8 06 ff ff ff       	call   c000cdb7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ceb9:	74 07                	je     c000cec2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cebb:	46                   	inc    esi
c000cebc:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cec0:	eb e1                	jmp    c000cea3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cec2:	43                   	inc    ebx
c000cec3:	83 fb 12             	cmp    ebx,0x12
c000cec6:	75 c2                	jne    c000ce8a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cec8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cecc:	31 db                	xor    ebx,ebx
c000cece:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ced1:	50                   	push   eax
c000ced2:	50                   	push   eax
c000ced3:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000ced8:	43                   	inc    ebx
c000ced9:	8d 04 85 a0 46 02 c0 	lea    eax,[eax*4-0x3ffdb960]
c000cee0:	50                   	push   eax
c000cee1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cee5:	e8 56 39 ff ff       	call   c0000840 <strcat>
c000ceea:	83 c4 10             	add    esp,0x10
c000ceed:	83 fb 18             	cmp    ebx,0x18
c000cef0:	75 df                	jne    c000ced1 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cef2:	83 c4 3c             	add    esp,0x3c
c000cef5:	31 c0                	xor    eax,eax
c000cef7:	5b                   	pop    ebx
c000cef8:	5e                   	pop    esi
c000cef9:	5f                   	pop    edi
c000cefa:	5d                   	pop    ebp
c000cefb:	c3                   	ret    

c000cefc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cefc:	83 ec 40             	sub    esp,0x40
c000ceff:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf03:	50                   	push   eax
c000cf04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf0c:	e8 3b f9 ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf11:	58                   	pop    eax
c000cf12:	5a                   	pop    edx
c000cf13:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cf17:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cf1b:	50                   	push   eax
c000cf1c:	e8 37 ff ff ff       	call   c000ce58 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf21:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf26:	83 c4 4c             	add    esp,0x4c
c000cf29:	c3                   	ret    

c000cf2a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf2a:	55                   	push   ebp
c000cf2b:	57                   	push   edi
c000cf2c:	56                   	push   esi
c000cf2d:	53                   	push   ebx
c000cf2e:	31 db                	xor    ebx,ebx
c000cf30:	83 ec 70             	sub    esp,0x70
c000cf33:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf3a:	6a 30                	push   0x30
c000cf3c:	6a 00                	push   0x0
c000cf3e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf42:	56                   	push   esi
c000cf43:	e8 a8 35 ff ff       	call   c00004f0 <memset>
c000cf48:	83 c4 10             	add    esp,0x10
c000cf4b:	83 ec 0c             	sub    esp,0xc
c000cf4e:	57                   	push   edi
c000cf4f:	e8 1c 36 ff ff       	call   c0000570 <strlen>
c000cf54:	83 c4 10             	add    esp,0x10
c000cf57:	39 d8                	cmp    eax,ebx
c000cf59:	76 16                	jbe    c000cf71 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cf5b:	83 ec 0c             	sub    esp,0xc
c000cf5e:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cf62:	50                   	push   eax
c000cf63:	e8 c8 39 ff ff       	call   c0000930 <toupper>
c000cf68:	83 c4 10             	add    esp,0x10
c000cf6b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf6e:	43                   	inc    ebx
c000cf6f:	eb da                	jmp    c000cf4b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf71:	31 f6                	xor    esi,esi
c000cf73:	52                   	push   edx
c000cf74:	31 ff                	xor    edi,edi
c000cf76:	6a 18                	push   0x18
c000cf78:	6a 3f                	push   0x3f
c000cf7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf7e:	50                   	push   eax
c000cf7f:	e8 6c 35 ff ff       	call   c00004f0 <memset>
c000cf84:	83 c4 10             	add    esp,0x10
c000cf87:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000cf8b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000cf8f:	84 c0                	test   al,al
c000cf91:	0f 84 b0 00 00 00    	je     c000d047 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000cf97:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf9b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000cfa0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000cfa4:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000cfa9:	8d 6e 01             	lea    ebp,[esi+0x1]
c000cfac:	83 ec 0c             	sub    esp,0xc
c000cfaf:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cfb3:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cfb7:	53                   	push   ebx
c000cfb8:	e8 b3 35 ff ff       	call   c0000570 <strlen>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	85 c0                	test   eax,eax
c000cfc2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cfc6:	74 0b                	je     c000cfd3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cfc8:	50                   	push   eax
c000cfc9:	6a 01                	push   0x1
c000cfcb:	53                   	push   ebx
c000cfcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cfd0:	50                   	push   eax
c000cfd1:	eb 0a                	jmp    c000cfdd <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cfd3:	50                   	push   eax
c000cfd4:	6a 00                	push   0x0
c000cfd6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cfda:	50                   	push   eax
c000cfdb:	6a 00                	push   0x0
c000cfdd:	e8 44 fd ff ff       	call   c000cd26 <CmGetMatch(char*, char*, bool, bool*)>
c000cfe2:	83 c4 10             	add    esp,0x10
c000cfe5:	83 f8 ff             	cmp    eax,0xffffffff
c000cfe8:	75 1a                	jne    c000d004 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cfea:	83 ec 0c             	sub    esp,0xc
c000cfed:	68 47 23 02 c0       	push   0xc0022347
c000cff2:	e8 af 1c 00 00       	call   c000eca6 <KePanic(char const*)>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	b8 02 00 00 00       	mov    eax,0x2
c000cfff:	e9 bc 00 00 00       	jmp    c000d0c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d004:	83 ff 18             	cmp    edi,0x18
c000d007:	75 1a                	jne    c000d023 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d009:	83 ec 0c             	sub    esp,0xc
c000d00c:	68 5c 23 02 c0       	push   0xc002235c
c000d011:	e8 90 1c 00 00       	call   c000eca6 <KePanic(char const*)>
c000d016:	83 c4 10             	add    esp,0x10
c000d019:	b8 01 00 00 00       	mov    eax,0x1
c000d01e:	e9 9d 00 00 00       	jmp    c000d0c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d023:	47                   	inc    edi
c000d024:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d029:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d02d:	74 02                	je     c000d031 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d02f:	89 ee                	mov    esi,ebp
c000d031:	83 ec 0c             	sub    esp,0xc
c000d034:	53                   	push   ebx
c000d035:	e8 36 35 ff ff       	call   c0000570 <strlen>
c000d03a:	83 c4 10             	add    esp,0x10
c000d03d:	85 c0                	test   eax,eax
c000d03f:	74 06                	je     c000d047 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d041:	46                   	inc    esi
c000d042:	e9 40 ff ff ff       	jmp    c000cf87 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d047:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d04f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d057:	31 f6                	xor    esi,esi
c000d059:	50                   	push   eax
c000d05a:	31 ff                	xor    edi,edi
c000d05c:	6a 12                	push   0x12
c000d05e:	68 ee 00 00 00       	push   0xee
c000d063:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d06a:	e8 81 34 ff ff       	call   c00004f0 <memset>
c000d06f:	83 c4 10             	add    esp,0x10
c000d072:	83 fe 17             	cmp    esi,0x17
c000d075:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d079:	7e 26                	jle    c000d0a1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d07b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d07f:	50                   	push   eax
c000d080:	6a 08                	push   0x8
c000d082:	55                   	push   ebp
c000d083:	53                   	push   ebx
c000d084:	e8 2e fd ff ff       	call   c000cdb7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000d089:	83 c4 10             	add    esp,0x10
c000d08c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d091:	74 26                	je     c000d0b9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d093:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d09a:	4e                   	dec    esi
c000d09b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d09e:	47                   	inc    edi
c000d09f:	eb 1c                	jmp    c000d0bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0a1:	6a 06                	push   0x6
c000d0a3:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d0a8:	50                   	push   eax
c000d0a9:	55                   	push   ebp
c000d0aa:	53                   	push   ebx
c000d0ab:	e8 d7 fc ff ff       	call   c000cd87 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0b0:	83 c4 10             	add    esp,0x10
c000d0b3:	84 c0                	test   al,al
c000d0b5:	75 06                	jne    c000d0bd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0b7:	eb c2                	jmp    c000d07b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d0b9:	31 c0                	xor    eax,eax
c000d0bb:	eb 03                	jmp    c000d0c0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d0bd:	46                   	inc    esi
c000d0be:	eb b2                	jmp    c000d072 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d0c0:	83 c4 6c             	add    esp,0x6c
c000d0c3:	5b                   	pop    ebx
c000d0c4:	5e                   	pop    esi
c000d0c5:	5f                   	pop    edi
c000d0c6:	5d                   	pop    ebp
c000d0c7:	c3                   	ret    

c000d0c8 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d0c8:	53                   	push   ebx
c000d0c9:	83 ec 3c             	sub    esp,0x3c
c000d0cc:	6a 2b                	push   0x2b
c000d0ce:	6a 00                	push   0x0
c000d0d0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d0d4:	53                   	push   ebx
c000d0d5:	e8 16 34 ff ff       	call   c00004f0 <memset>
c000d0da:	58                   	pop    eax
c000d0db:	5a                   	pop    edx
c000d0dc:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d0e0:	50                   	push   eax
c000d0e1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d0e5:	e8 40 fe ff ff       	call   c000cf2a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0ea:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d0ef:	83 c4 0c             	add    esp,0xc
c000d0f2:	6a 15                	push   0x15
c000d0f4:	6a 00                	push   0x0
c000d0f6:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d0fa:	50                   	push   eax
c000d0fb:	e8 f0 33 ff ff       	call   c00004f0 <memset>
c000d100:	53                   	push   ebx
c000d101:	6a 00                	push   0x0
c000d103:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d107:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d10b:	e8 e6 f9 ff ff       	call   c000caf6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d110:	83 c4 58             	add    esp,0x58
c000d113:	5b                   	pop    ebx
c000d114:	c3                   	ret    

c000d115 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d115:	56                   	push   esi
c000d116:	53                   	push   ebx
c000d117:	83 ec 48             	sub    esp,0x48
c000d11a:	6a 12                	push   0x12
c000d11c:	68 ff 00 00 00       	push   0xff
c000d121:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d125:	56                   	push   esi
c000d126:	e8 c5 33 ff ff       	call   c00004f0 <memset>
c000d12b:	5a                   	pop    edx
c000d12c:	59                   	pop    ecx
c000d12d:	56                   	push   esi
c000d12e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d132:	e8 f3 fd ff ff       	call   c000cf2a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d137:	83 c4 10             	add    esp,0x10
c000d13a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d13e:	85 db                	test   ebx,ebx
c000d140:	74 42                	je     c000d184 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d142:	50                   	push   eax
c000d143:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d147:	50                   	push   eax
c000d148:	53                   	push   ebx
c000d149:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d14d:	e8 fa f6 ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d152:	83 c4 0c             	add    esp,0xc
c000d155:	6a 12                	push   0x12
c000d157:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d15b:	50                   	push   eax
c000d15c:	56                   	push   esi
c000d15d:	e8 1e 32 ff ff       	call   c0000380 <memcmp>
c000d162:	83 c4 10             	add    esp,0x10
c000d165:	85 c0                	test   eax,eax
c000d167:	74 1e                	je     c000d187 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d169:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d16e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d173:	c1 e3 08             	shl    ebx,0x8
c000d176:	09 d8                	or     eax,ebx
c000d178:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d17d:	c1 e3 10             	shl    ebx,0x10
c000d180:	09 c3                	or     ebx,eax
c000d182:	eb ba                	jmp    c000d13e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d184:	83 cb ff             	or     ebx,0xffffffff
c000d187:	89 d8                	mov    eax,ebx
c000d189:	83 c4 44             	add    esp,0x44
c000d18c:	5b                   	pop    ebx
c000d18d:	5e                   	pop    esi
c000d18e:	c3                   	ret    

c000d18f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d18f:	57                   	push   edi
c000d190:	56                   	push   esi
c000d191:	53                   	push   ebx
c000d192:	83 ec 34             	sub    esp,0x34
c000d195:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d199:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d19d:	6a 2b                	push   0x2b
c000d19f:	6a 00                	push   0x0
c000d1a1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d1a5:	53                   	push   ebx
c000d1a6:	e8 45 33 ff ff       	call   c00004f0 <memset>
c000d1ab:	58                   	pop    eax
c000d1ac:	5a                   	pop    edx
c000d1ad:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1b1:	50                   	push   eax
c000d1b2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1b6:	e8 6f fd ff ff       	call   c000cf2a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1bb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d1bf:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d1c3:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d1c7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d1cb:	53                   	push   ebx
c000d1cc:	6a 00                	push   0x0
c000d1ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d1d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d1d6:	e8 1b f9 ff ff       	call   c000caf6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1db:	83 c4 50             	add    esp,0x50
c000d1de:	5b                   	pop    ebx
c000d1df:	5e                   	pop    esi
c000d1e0:	5f                   	pop    edi
c000d1e1:	c3                   	ret    

c000d1e2 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d1e2:	55                   	push   ebp
c000d1e3:	57                   	push   edi
c000d1e4:	56                   	push   esi
c000d1e5:	53                   	push   ebx
c000d1e6:	83 ec 40             	sub    esp,0x40
c000d1e9:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d1ed:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d1f1:	6a 2b                	push   0x2b
c000d1f3:	6a 00                	push   0x0
c000d1f5:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d1f9:	56                   	push   esi
c000d1fa:	e8 f1 32 ff ff       	call   c00004f0 <memset>
c000d1ff:	5f                   	pop    edi
c000d200:	89 ef                	mov    edi,ebp
c000d202:	58                   	pop    eax
c000d203:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d207:	50                   	push   eax
c000d208:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d20c:	e8 19 fd ff ff       	call   c000cf2a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d211:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d216:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d21b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d220:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d225:	83 c4 10             	add    esp,0x10
c000d228:	85 ed                	test   ebp,ebp
c000d22a:	74 14                	je     c000d240 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d22c:	51                   	push   ecx
c000d22d:	51                   	push   ecx
c000d22e:	57                   	push   edi
c000d22f:	53                   	push   ebx
c000d230:	e8 09 f7 ff ff       	call   c000c93e <CmGetNext(Reghive_Tag*, int)>
c000d235:	83 c4 10             	add    esp,0x10
c000d238:	85 c0                	test   eax,eax
c000d23a:	74 04                	je     c000d240 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d23c:	89 c7                	mov    edi,eax
c000d23e:	eb e8                	jmp    c000d228 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d240:	56                   	push   esi
c000d241:	6a 00                	push   0x0
c000d243:	57                   	push   edi
c000d244:	53                   	push   ebx
c000d245:	e8 ac f8 ff ff       	call   c000caf6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d24a:	83 c4 0c             	add    esp,0xc
c000d24d:	89 c7                	mov    edi,eax
c000d24f:	56                   	push   esi
c000d250:	50                   	push   eax
c000d251:	53                   	push   ebx
c000d252:	e8 f5 f5 ff ff       	call   c000c84c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d257:	58                   	pop    eax
c000d258:	5a                   	pop    edx
c000d259:	6a 6c                	push   0x6c
c000d25b:	6a 00                	push   0x0
c000d25d:	6a 00                	push   0x0
c000d25f:	68 6d 23 02 c0       	push   0xc002236d
c000d264:	57                   	push   edi
c000d265:	53                   	push   ebx
c000d266:	e8 24 ff ff ff       	call   c000d18f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d26b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d26f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d273:	c1 e8 10             	shr    eax,0x10
c000d276:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d27a:	83 c4 1c             	add    esp,0x1c
c000d27d:	56                   	push   esi
c000d27e:	57                   	push   edi
c000d27f:	53                   	push   ebx
c000d280:	e8 eb f6 ff ff       	call   c000c970 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d285:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d28a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d28f:	c1 e0 08             	shl    eax,0x8
c000d292:	09 c2                	or     edx,eax
c000d294:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d299:	83 c4 4c             	add    esp,0x4c
c000d29c:	c1 e0 10             	shl    eax,0x10
c000d29f:	5b                   	pop    ebx
c000d2a0:	09 d0                	or     eax,edx
c000d2a2:	5e                   	pop    esi
c000d2a3:	5f                   	pop    edi
c000d2a4:	5d                   	pop    ebp
c000d2a5:	c3                   	ret    

c000d2a6 <zStrtok(char*, char const*)>:
c000d2a6:	55                   	push   ebp
c000d2a7:	57                   	push   edi
c000d2a8:	56                   	push   esi
c000d2a9:	53                   	push   ebx
c000d2aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2b2:	85 db                	test   ebx,ebx
c000d2b4:	74 2f                	je     c000d2e5 <zStrtok(char*, char const*)+0x3f>
c000d2b6:	85 c0                	test   eax,eax
c000d2b8:	75 09                	jne    c000d2c3 <zStrtok(char*, char const*)+0x1d>
c000d2ba:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d2bf:	85 c0                	test   eax,eax
c000d2c1:	74 50                	je     c000d313 <zStrtok(char*, char const*)+0x6d>
c000d2c3:	31 c9                	xor    ecx,ecx
c000d2c5:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d2c9:	74 03                	je     c000d2ce <zStrtok(char*, char const*)+0x28>
c000d2cb:	41                   	inc    ecx
c000d2cc:	eb f7                	jmp    c000d2c5 <zStrtok(char*, char const*)+0x1f>
c000d2ce:	31 d2                	xor    edx,edx
c000d2d0:	39 ca                	cmp    edx,ecx
c000d2d2:	74 15                	je     c000d2e9 <zStrtok(char*, char const*)+0x43>
c000d2d4:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d2d8:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d2db:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d2de:	39 ee                	cmp    esi,ebp
c000d2e0:	74 13                	je     c000d2f5 <zStrtok(char*, char const*)+0x4f>
c000d2e2:	42                   	inc    edx
c000d2e3:	eb eb                	jmp    c000d2d0 <zStrtok(char*, char const*)+0x2a>
c000d2e5:	31 c0                	xor    eax,eax
c000d2e7:	eb 2a                	jmp    c000d313 <zStrtok(char*, char const*)+0x6d>
c000d2e9:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d2f3:	eb 1e                	jmp    c000d313 <zStrtok(char*, char const*)+0x6d>
c000d2f5:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d2f8:	39 ce                	cmp    esi,ecx
c000d2fa:	75 0a                	jne    c000d306 <zStrtok(char*, char const*)+0x60>
c000d2fc:	40                   	inc    eax
c000d2fd:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d302:	89 d8                	mov    eax,ebx
c000d304:	eb 0d                	jmp    c000d313 <zStrtok(char*, char const*)+0x6d>
c000d306:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d30a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d30d:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d313:	5b                   	pop    ebx
c000d314:	5e                   	pop    esi
c000d315:	5f                   	pop    edi
c000d316:	5d                   	pop    ebp
c000d317:	c3                   	ret    

c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d318:	57                   	push   edi
c000d319:	56                   	push   esi
c000d31a:	53                   	push   ebx
c000d31b:	81 ec 08 01 00 00    	sub    esp,0x108
c000d321:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d328:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d32f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d333:	53                   	push   ebx
c000d334:	e8 07 33 ff ff       	call   c0000640 <strcpy>
c000d339:	59                   	pop    ecx
c000d33a:	5e                   	pop    esi
c000d33b:	68 e2 34 02 c0       	push   0xc00234e2
c000d340:	53                   	push   ebx
c000d341:	bb 01 00 00 00       	mov    ebx,0x1
c000d346:	e8 5b ff ff ff       	call   c000d2a6 <zStrtok(char*, char const*)>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	85 c0                	test   eax,eax
c000d350:	74 3b                	je     c000d38d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d352:	52                   	push   edx
c000d353:	50                   	push   eax
c000d354:	6a 01                	push   0x1
c000d356:	57                   	push   edi
c000d357:	e8 b9 fd ff ff       	call   c000d115 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d35c:	59                   	pop    ecx
c000d35d:	89 c3                	mov    ebx,eax
c000d35f:	5e                   	pop    esi
c000d360:	68 e2 34 02 c0       	push   0xc00234e2
c000d365:	6a 00                	push   0x0
c000d367:	e8 3a ff ff ff       	call   c000d2a6 <zStrtok(char*, char const*)>
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	89 c6                	mov    esi,eax
c000d371:	85 c0                	test   eax,eax
c000d373:	74 18                	je     c000d38d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d375:	52                   	push   edx
c000d376:	52                   	push   edx
c000d377:	53                   	push   ebx
c000d378:	57                   	push   edi
c000d379:	e8 81 f5 ff ff       	call   c000c8ff <CmEnterDirectory(Reghive_Tag*, int)>
c000d37e:	83 c4 10             	add    esp,0x10
c000d381:	89 c3                	mov    ebx,eax
c000d383:	83 f8 ff             	cmp    eax,0xffffffff
c000d386:	74 05                	je     c000d38d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d388:	50                   	push   eax
c000d389:	56                   	push   esi
c000d38a:	53                   	push   ebx
c000d38b:	eb c9                	jmp    c000d356 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d38d:	81 c4 00 01 00 00    	add    esp,0x100
c000d393:	89 d8                	mov    eax,ebx
c000d395:	5b                   	pop    ebx
c000d396:	5e                   	pop    esi
c000d397:	5f                   	pop    edi
c000d398:	c3                   	ret    

c000d399 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d399:	55                   	push   ebp
c000d39a:	57                   	push   edi
c000d39b:	56                   	push   esi
c000d39c:	53                   	push   ebx
c000d39d:	83 ec 5c             	sub    esp,0x5c
c000d3a0:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d3a4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d3a8:	85 db                	test   ebx,ebx
c000d3aa:	0f 8e 84 00 00 00    	jle    c000d434 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d3b0:	31 ed                	xor    ebp,ebp
c000d3b2:	57                   	push   edi
c000d3b3:	6a 32                	push   0x32
c000d3b5:	6a 00                	push   0x0
c000d3b7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d3bb:	57                   	push   edi
c000d3bc:	e8 2f 31 ff ff       	call   c00004f0 <memset>
c000d3c1:	83 c4 0c             	add    esp,0xc
c000d3c4:	57                   	push   edi
c000d3c5:	53                   	push   ebx
c000d3c6:	56                   	push   esi
c000d3c7:	e8 30 fb ff ff       	call   c000cefc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d3cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d3d7:	7d 13                	jge    c000d3ec <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d3d9:	83 ec 0c             	sub    esp,0xc
c000d3dc:	45                   	inc    ebp
c000d3dd:	68 f0 39 02 c0       	push   0xc00239f0
c000d3e2:	e8 7d 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	eb e7                	jmp    c000d3d3 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d3ec:	51                   	push   ecx
c000d3ed:	57                   	push   edi
c000d3ee:	53                   	push   ebx
c000d3ef:	68 73 23 02 c0       	push   0xc0022373
c000d3f4:	e8 6b 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d401:	75 1e                	jne    c000d421 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d403:	52                   	push   edx
c000d404:	52                   	push   edx
c000d405:	53                   	push   ebx
c000d406:	56                   	push   esi
c000d407:	e8 f3 f4 ff ff       	call   c000c8ff <CmEnterDirectory(Reghive_Tag*, int)>
c000d40c:	83 c4 0c             	add    esp,0xc
c000d40f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d413:	8d 51 04             	lea    edx,[ecx+0x4]
c000d416:	52                   	push   edx
c000d417:	50                   	push   eax
c000d418:	56                   	push   esi
c000d419:	e8 7b ff ff ff       	call   c000d399 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d41e:	83 c4 10             	add    esp,0x10
c000d421:	50                   	push   eax
c000d422:	50                   	push   eax
c000d423:	53                   	push   ebx
c000d424:	56                   	push   esi
c000d425:	e8 14 f5 ff ff       	call   c000c93e <CmGetNext(Reghive_Tag*, int)>
c000d42a:	83 c4 10             	add    esp,0x10
c000d42d:	89 c3                	mov    ebx,eax
c000d42f:	e9 74 ff ff ff       	jmp    c000d3a8 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d434:	83 c4 5c             	add    esp,0x5c
c000d437:	5b                   	pop    ebx
c000d438:	5e                   	pop    esi
c000d439:	5f                   	pop    edi
c000d43a:	5d                   	pop    ebp
c000d43b:	c3                   	ret    

c000d43c <CmSplitFinalSlashInPlace(char*)>:
c000d43c:	53                   	push   ebx
c000d43d:	83 ec 14             	sub    esp,0x14
c000d440:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d444:	53                   	push   ebx
c000d445:	e8 26 31 ff ff       	call   c0000570 <strlen>
c000d44a:	83 c4 10             	add    esp,0x10
c000d44d:	48                   	dec    eax
c000d44e:	85 c0                	test   eax,eax
c000d450:	74 15                	je     c000d467 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d452:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d455:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d459:	75 09                	jne    c000d464 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d45b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d45e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d462:	eb 05                	jmp    c000d469 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d464:	48                   	dec    eax
c000d465:	eb e7                	jmp    c000d44e <CmSplitFinalSlashInPlace(char*)+0x12>
c000d467:	31 c0                	xor    eax,eax
c000d469:	83 c4 08             	add    esp,0x8
c000d46c:	5b                   	pop    ebx
c000d46d:	c3                   	ret    
c000d46e:	66 90                	xchg   ax,ax

c000d470 <Krnl::handlePowerButton()>:
c000d470:	83 ec 0c             	sub    esp,0xc
c000d473:	e8 69 21 00 00       	call   c000f5e1 <KeHandlePowerButton()>
c000d478:	90                   	nop
c000d479:	83 c4 0c             	add    esp,0xc
c000d47c:	c3                   	ret    
c000d47d:	8d 76 00             	lea    esi,[esi+0x0]

c000d480 <Krnl::handleSleepButton()>:
c000d480:	83 ec 0c             	sub    esp,0xc
c000d483:	e8 71 21 00 00       	call   c000f5f9 <KeHandleSleepButton()>
c000d488:	90                   	nop
c000d489:	83 c4 0c             	add    esp,0xc
c000d48c:	c3                   	ret    
c000d48d:	90                   	nop

c000d48e <Computer::close(int, int, void*)>:
c000d48e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d493:	c3                   	ret    

c000d494 <Computer::open(int, int, void*)>:
c000d494:	56                   	push   esi
c000d495:	53                   	push   ebx
c000d496:	83 ec 04             	sub    esp,0x4
c000d499:	f6 05 90 cd 02 c0 04 	test   BYTE PTR ds:0xc002cd90,0x4
c000d4a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4a4:	0f 94 05 80 4d 02 c0 	sete   BYTE PTR ds:0xc0024d80
c000d4ab:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d4b1:	74 10                	je     c000d4c3 <Computer::open(int, int, void*)+0x2f>
c000d4b3:	83 ec 0c             	sub    esp,0xc
c000d4b6:	68 80 23 02 c0       	push   0xc0022380
c000d4bb:	e8 e6 17 00 00       	call   c000eca6 <KePanic(char const*)>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	83 ec 0c             	sub    esp,0xc
c000d4c6:	68 38 24 02 c0       	push   0xc0022438
c000d4cb:	e8 34 f1 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d4d0:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d4d7:	e8 83 14 00 00       	call   c000e95f <malloc>
c000d4dc:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4df:	89 c6                	mov    esi,eax
c000d4e1:	e8 6a e7 ff ff       	call   c000bc50 <ACPI::ACPI()>
c000d4e6:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d4ec:	58                   	pop    eax
c000d4ed:	5a                   	pop    edx
c000d4ee:	56                   	push   esi
c000d4ef:	53                   	push   ebx
c000d4f0:	e8 6d bb ff ff       	call   c0009062 <Device::addChild(Device*)>
c000d4f5:	c7 04 24 50 24 02 c0 	mov    DWORD PTR [esp],0xc0022450
c000d4fc:	e8 03 f1 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d501:	e8 9d a9 00 00       	call   c0017ea3 <HalEnableNMI()>
c000d506:	e8 cd 9b 00 00       	call   c00170d8 <HalDetectFeatures()>
c000d50b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d512:	e8 48 14 00 00       	call   c000e95f <malloc>
c000d517:	89 04 24             	mov    DWORD PTR [esp],eax
c000d51a:	89 c6                	mov    esi,eax
c000d51c:	e8 bd b4 00 00       	call   c00189de <CPU::CPU()>
c000d521:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d527:	59                   	pop    ecx
c000d528:	58                   	pop    eax
c000d529:	56                   	push   esi
c000d52a:	53                   	push   ebx
c000d52b:	e8 32 bb ff ff       	call   c0009062 <Device::addChild(Device*)>
c000d530:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d534:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d53a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d53c:	51                   	push   ecx
c000d53d:	6a 00                	push   0x0
c000d53f:	6a 00                	push   0x0
c000d541:	50                   	push   eax
c000d542:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d545:	83 c4 14             	add    esp,0x14
c000d548:	68 ac 23 02 c0       	push   0xc00223ac
c000d54d:	e8 b2 f0 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d552:	e8 e2 b0 00 00       	call   c0018639 <HalInitialiseCoprocessor()>
c000d557:	c7 04 24 6a 24 02 c0 	mov    DWORD PTR [esp],0xc002246a
c000d55e:	e8 a1 f0 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d563:	c7 04 24 7a d5 00 c0 	mov    DWORD PTR [esp],0xc000d57a
c000d56a:	e8 81 80 00 00       	call   c00155f0 <setupMultitasking(void (*)())>
c000d56f:	83 c4 14             	add    esp,0x14
c000d572:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d577:	5b                   	pop    ebx
c000d578:	5e                   	pop    esi
c000d579:	c3                   	ret    

c000d57a <KeFirstTask()>:
c000d57a:	53                   	push   ebx
c000d57b:	83 ec 14             	sub    esp,0x14
c000d57e:	fb                   	sti    
c000d57f:	68 85 24 02 c0       	push   0xc0022485
c000d584:	e8 7b f0 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d589:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d590:	e8 ca 13 00 00       	call   c000e95f <malloc>
c000d595:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d59c:	89 c3                	mov    ebx,eax
c000d59e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c000d5a3:	50                   	push   eax
c000d5a4:	68 9e 24 02 c0       	push   0xc002249e
c000d5a9:	6a 01                	push   0x1
c000d5ab:	53                   	push   ebx
c000d5ac:	e8 eb 7c 00 00       	call   c001529c <Process::Process(bool, char const*, Process*, char**)>
c000d5b1:	83 c4 20             	add    esp,0x20
c000d5b4:	68 ff 00 00 00       	push   0xff
c000d5b9:	6a 00                	push   0x0
c000d5bb:	68 89 e2 00 c0       	push   0xc000e289
c000d5c0:	53                   	push   ebx
c000d5c1:	e8 fe 7e 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c000d5c6:	8b 15 d8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d8
c000d5cc:	6a 7a                	push   0x7a
c000d5ce:	6a 00                	push   0x0
c000d5d0:	68 bc 5d 01 c0       	push   0xc0015dbc
c000d5d5:	52                   	push   edx
c000d5d6:	e8 e9 7e 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c000d5db:	83 c4 14             	add    esp,0x14
c000d5de:	a3 90 d6 02 c0       	mov    ds:0xc002d690,eax
c000d5e3:	68 d0 23 02 c0       	push   0xc00223d0
c000d5e8:	e8 17 f0 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d5ed:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d5f4:	e8 0c 21 00 00       	call   c000f705 <KeInitRand()>
c000d5f9:	e8 98 8b 00 00       	call   c0016196 <Vm::initialise8086()>
c000d5fe:	e8 ed a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d603:	c7 04 24 54 21 02 c0 	mov    DWORD PTR [esp],0xc0022154
c000d60a:	e8 f5 ef ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d60f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d614:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d61a:	8b 10                	mov    edx,DWORD PTR [eax]
c000d61c:	6a 00                	push   0x0
c000d61e:	6a 00                	push   0x0
c000d620:	6a 00                	push   0x0
c000d622:	50                   	push   eax
c000d623:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d626:	83 c4 14             	add    esp,0x14
c000d629:	68 d0 23 02 c0       	push   0xc00223d0
c000d62e:	e8 d1 ef ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d633:	e8 9d 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d638:	e8 f5 05 00 00       	call   c000dc32 <KeLoadSystemEnv()>
c000d63d:	e8 cf 1f 00 00       	call   c000f611 <KeSetupPowerManager()>
c000d642:	c7 04 24 f4 23 02 c0 	mov    DWORD PTR [esp],0xc00223f4
c000d649:	e8 b6 ef ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d64e:	59                   	pop    ecx
c000d64f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d654:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d65a:	53                   	push   ebx
c000d65b:	e8 1e bb ff ff       	call   c000917e <Device::loadDriversForAll()>
c000d660:	c7 04 24 ab 24 02 c0 	mov    DWORD PTR [esp],0xc00224ab
c000d667:	e8 98 ef ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c000d66c:	58                   	pop    eax
c000d66d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d673:	5a                   	pop    edx
c000d674:	6a 01                	push   0x1
c000d676:	68 bc 24 02 c0       	push   0xc00224bc
c000d67b:	e8 b0 75 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c000d680:	59                   	pop    ecx
c000d681:	5a                   	pop    edx
c000d682:	53                   	push   ebx
c000d683:	50                   	push   eax
c000d684:	e8 f9 77 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	83 ec 0c             	sub    esp,0xc
c000d68f:	6a 02                	push   0x2
c000d691:	e8 3e 81 00 00       	call   c00157d4 <blockTask(TaskState)>
c000d696:	83 c4 10             	add    esp,0x10
c000d699:	eb f1                	jmp    c000d68c <KeFirstTask()+0x112>
c000d69b:	90                   	nop

c000d69c <Computer::Computer()>:
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a3:	83 ec 08             	sub    esp,0x8
c000d6a6:	68 d8 24 02 c0       	push   0xc00224d8
c000d6ab:	50                   	push   eax
c000d6ac:	e8 13 bb ff ff       	call   c00091c4 <Device::Device(char const*)>
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c000d6b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6bd:	89 10                	mov    DWORD PTR [eax],edx
c000d6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d6db:	90                   	nop
c000d6dc:	83 c4 0c             	add    esp,0xc
c000d6df:	c3                   	ret    

c000d6e0 <KePrepareShutdown()>:
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	e8 8a ee ff ff       	call   c000c572 <KeExecuteAtexit()>
c000d6e8:	83 ec 0c             	sub    esp,0xc
c000d6eb:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d6f0:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d6f6:	50                   	push   eax
c000d6f7:	e8 ce bb ff ff       	call   c00092ca <Device::closeAll()>
c000d6fc:	83 c4 1c             	add    esp,0x1c
c000d6ff:	c3                   	ret    

c000d700 <KeShutdown()>:
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	e8 d8 ff ff ff       	call   c000d6e0 <KePrepareShutdown()>
c000d708:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d70d:	85 c0                	test   eax,eax
c000d70f:	74 02                	je     c000d713 <KeShutdown()+0x13>
c000d711:	ff d0                	call   eax
c000d713:	83 ec 0c             	sub    esp,0xc
c000d716:	68 14 24 02 c0       	push   0xc0022414
c000d71b:	e8 86 15 00 00       	call   c000eca6 <KePanic(char const*)>
c000d720:	83 c4 1c             	add    esp,0x1c
c000d723:	c3                   	ret    

c000d724 <KeSleep()>:
c000d724:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d729:	85 c0                	test   eax,eax
c000d72b:	74 02                	je     c000d72f <KeSleep()+0xb>
c000d72d:	ff e0                	jmp    eax
c000d72f:	c3                   	ret    

c000d730 <KeRestart()>:
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	e8 a8 ff ff ff       	call   c000d6e0 <KePrepareShutdown()>
c000d738:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000d73d:	85 c0                	test   eax,eax
c000d73f:	74 02                	je     c000d743 <KeRestart()+0x13>
c000d741:	ff d0                	call   eax
c000d743:	e4 64                	in     al,0x64
c000d745:	a8 02                	test   al,0x2
c000d747:	75 fa                	jne    c000d743 <KeRestart()+0x13>
c000d749:	b0 fe                	mov    al,0xfe
c000d74b:	e6 64                	out    0x64,al
c000d74d:	83 c4 0c             	add    esp,0xc
c000d750:	c3                   	ret    

c000d751 <KeCalculateCRC32(unsigned char*, int)>:
c000d751:	53                   	push   ebx
c000d752:	83 c8 ff             	or     eax,0xffffffff
c000d755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d759:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d75d:	01 cb                	add    ebx,ecx
c000d75f:	39 d9                	cmp    ecx,ebx
c000d761:	74 15                	je     c000d778 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d763:	41                   	inc    ecx
c000d764:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d767:	31 c2                	xor    edx,eax
c000d769:	c1 e8 08             	shr    eax,0x8
c000d76c:	0f b6 d2             	movzx  edx,dl
c000d76f:	33 04 95 a0 47 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdb860]
c000d776:	eb e7                	jmp    c000d75f <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d778:	f7 d0                	not    eax
c000d77a:	5b                   	pop    ebx
c000d77b:	c3                   	ret    

c000d77c <EnvVarContainer::getEnv(char const*)>:
c000d77c:	57                   	push   edi
c000d77d:	56                   	push   esi
c000d77e:	53                   	push   ebx
c000d77f:	31 db                	xor    ebx,ebx
c000d781:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d785:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d787:	7e 2b                	jle    c000d7b4 <EnvVarContainer::getEnv(char const*)+0x38>
c000d789:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d790:	50                   	push   eax
c000d791:	50                   	push   eax
c000d792:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d795:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d79c:	e8 af 2f ff ff       	call   c0000750 <strcmp>
c000d7a1:	83 c4 10             	add    esp,0x10
c000d7a4:	85 c0                	test   eax,eax
c000d7a6:	75 09                	jne    c000d7b1 <EnvVarContainer::getEnv(char const*)+0x35>
c000d7a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7ab:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d7af:	eb 05                	jmp    c000d7b6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000d7b1:	43                   	inc    ebx
c000d7b2:	eb d1                	jmp    c000d785 <EnvVarContainer::getEnv(char const*)+0x9>
c000d7b4:	31 c0                	xor    eax,eax
c000d7b6:	5b                   	pop    ebx
c000d7b7:	5e                   	pop    esi
c000d7b8:	5f                   	pop    edi
c000d7b9:	c3                   	ret    

c000d7ba <EnvVarContainer::setEnv(char const*, char const*)>:
c000d7ba:	55                   	push   ebp
c000d7bb:	57                   	push   edi
c000d7bc:	56                   	push   esi
c000d7bd:	53                   	push   ebx
c000d7be:	83 ec 28             	sub    esp,0x28
c000d7c1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7c5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d7c9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d7cd:	56                   	push   esi
c000d7ce:	e8 9d 2d ff ff       	call   c0000570 <strlen>
c000d7d3:	40                   	inc    eax
c000d7d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7d7:	e8 83 11 00 00       	call   c000e95f <malloc>
c000d7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d7e3:	e8 88 2d ff ff       	call   c0000570 <strlen>
c000d7e8:	40                   	inc    eax
c000d7e9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7ec:	e8 6e 11 00 00       	call   c000e95f <malloc>
c000d7f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7f8:	e8 73 2d ff ff       	call   c0000570 <strlen>
c000d7fd:	83 c4 0c             	add    esp,0xc
c000d800:	40                   	inc    eax
c000d801:	50                   	push   eax
c000d802:	6a 00                	push   0x0
c000d804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d808:	e8 e3 2c ff ff       	call   c00004f0 <memset>
c000d80d:	89 34 24             	mov    DWORD PTR [esp],esi
c000d810:	e8 5b 2d ff ff       	call   c0000570 <strlen>
c000d815:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d819:	8d 48 01             	lea    ecx,[eax+0x1]
c000d81c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d81e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d821:	89 de                	mov    esi,ebx
c000d823:	e8 48 2d ff ff       	call   c0000570 <strlen>
c000d828:	83 c4 0c             	add    esp,0xc
c000d82b:	40                   	inc    eax
c000d82c:	50                   	push   eax
c000d82d:	6a 00                	push   0x0
c000d82f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d833:	e8 b8 2c ff ff       	call   c00004f0 <memset>
c000d838:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d83b:	e8 30 2d ff ff       	call   c0000570 <strlen>
c000d840:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d844:	8d 48 01             	lea    ecx,[eax+0x1]
c000d847:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d849:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d84c:	40                   	inc    eax
c000d84d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d850:	c1 e0 03             	shl    eax,0x3
c000d853:	5a                   	pop    edx
c000d854:	59                   	pop    ecx
c000d855:	50                   	push   eax
c000d856:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d859:	e8 ed 10 00 00       	call   c000e94b <realloc>
c000d85e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d862:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d865:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d868:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d86c:	b9 08 00 00 00       	mov    ecx,0x8
c000d871:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d873:	83 c4 2c             	add    esp,0x2c
c000d876:	5b                   	pop    ebx
c000d877:	5e                   	pop    esi
c000d878:	5f                   	pop    edi
c000d879:	5d                   	pop    ebp
c000d87a:	c3                   	ret    
c000d87b:	90                   	nop

c000d87c <EnvVarContainer::deleteEnv(char const*)>:
c000d87c:	c3                   	ret    
c000d87d:	90                   	nop

c000d87e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d87e:	55                   	push   ebp
c000d87f:	57                   	push   edi
c000d880:	56                   	push   esi
c000d881:	53                   	push   ebx
c000d882:	81 ec 38 01 00 00    	sub    esp,0x138
c000d888:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d88f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d896:	68 14 01 00 00       	push   0x114
c000d89b:	e8 bf 10 00 00       	call   c000e95f <malloc>
c000d8a0:	83 c4 0c             	add    esp,0xc
c000d8a3:	89 c3                	mov    ebx,eax
c000d8a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d8a8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d8af:	50                   	push   eax
c000d8b0:	e8 7d a8 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d8b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8b8:	e8 57 ab ff ff       	call   c0008414 <File::exists()>
c000d8bd:	83 c4 10             	add    esp,0x10
c000d8c0:	84 c0                	test   al,al
c000d8c2:	75 31                	jne    c000d8f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d8c4:	50                   	push   eax
c000d8c5:	50                   	push   eax
c000d8c6:	6a 12                	push   0x12
c000d8c8:	53                   	push   ebx
c000d8c9:	e8 82 a8 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d8ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8d0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d8d3:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8d6:	e8 95 2c ff ff       	call   c0000570 <strlen>
c000d8db:	5a                   	pop    edx
c000d8dc:	31 d2                	xor    edx,edx
c000d8de:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d8e2:	51                   	push   ecx
c000d8e3:	56                   	push   esi
c000d8e4:	52                   	push   edx
c000d8e5:	50                   	push   eax
c000d8e6:	53                   	push   ebx
c000d8e7:	ff d7                	call   edi
c000d8e9:	83 c4 14             	add    esp,0x14
c000d8ec:	53                   	push   ebx
c000d8ed:	e8 bc a8 ff ff       	call   c00081ae <File::close()>
c000d8f2:	83 c4 10             	add    esp,0x10
c000d8f5:	56                   	push   esi
c000d8f6:	31 f6                	xor    esi,esi
c000d8f8:	68 00 01 00 00       	push   0x100
c000d8fd:	6a 00                	push   0x0
c000d8ff:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d903:	50                   	push   eax
c000d904:	e8 e7 2b ff ff       	call   c00004f0 <memset>
c000d909:	5f                   	pop    edi
c000d90a:	58                   	pop    eax
c000d90b:	6a 01                	push   0x1
c000d90d:	53                   	push   ebx
c000d90e:	e8 3d a8 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d913:	83 c4 10             	add    esp,0x10
c000d916:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d91e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d926:	83 ec 0c             	sub    esp,0xc
c000d929:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d92b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d92f:	51                   	push   ecx
c000d930:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d934:	52                   	push   edx
c000d935:	6a 00                	push   0x0
c000d937:	6a 01                	push   0x1
c000d939:	53                   	push   ebx
c000d93a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d93d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d942:	83 c4 20             	add    esp,0x20
c000d945:	89 c2                	mov    edx,eax
c000d947:	85 c0                	test   eax,eax
c000d949:	0f 84 36 01 00 00    	je     c000da85 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d94f:	83 f8 0d             	cmp    eax,0xd
c000d952:	0f 84 22 01 00 00    	je     c000da7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d958:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d95d:	0f 84 f0 00 00 00    	je     c000da53 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d963:	83 f8 0a             	cmp    eax,0xa
c000d966:	74 13                	je     c000d97b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d968:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d96d:	74 0c                	je     c000d97b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d96f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d975:	0f 8e f6 00 00 00    	jle    c000da71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d97b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d97f:	83 ec 0c             	sub    esp,0xc
c000d982:	8d 78 01             	lea    edi,[eax+0x1]
c000d985:	57                   	push   edi
c000d986:	e8 d4 0f 00 00       	call   c000e95f <malloc>
c000d98b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d98f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d993:	8d 56 04             	lea    edx,[esi+0x4]
c000d996:	89 14 24             	mov    DWORD PTR [esp],edx
c000d999:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d99d:	e8 bd 0f 00 00       	call   c000e95f <malloc>
c000d9a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d9a6:	83 c4 0c             	add    esp,0xc
c000d9a9:	57                   	push   edi
c000d9aa:	6a 00                	push   0x0
c000d9ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9b0:	e8 3b 2b ff ff       	call   c00004f0 <memset>
c000d9b5:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d9b9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d9bd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9c3:	83 c4 0c             	add    esp,0xc
c000d9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9ca:	52                   	push   edx
c000d9cb:	6a 00                	push   0x0
c000d9cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9d1:	e8 1a 2b ff ff       	call   c00004f0 <memset>
c000d9d6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d9da:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d9de:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9e1:	e8 8a 2b ff ff       	call   c0000570 <strlen>
c000d9e6:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d9ea:	89 c1                	mov    ecx,eax
c000d9ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d9f1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d9f4:	40                   	inc    eax
c000d9f5:	83 c4 10             	add    esp,0x10
c000d9f8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d9fb:	85 d2                	test   edx,edx
c000d9fd:	75 0c                	jne    c000da0b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d9ff:	83 ec 0c             	sub    esp,0xc
c000da02:	6a 08                	push   0x8
c000da04:	e8 56 0f 00 00       	call   c000e95f <malloc>
c000da09:	eb 0c                	jmp    c000da17 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da0b:	c1 e0 03             	shl    eax,0x3
c000da0e:	51                   	push   ecx
c000da0f:	51                   	push   ecx
c000da10:	50                   	push   eax
c000da11:	52                   	push   edx
c000da12:	e8 34 0f 00 00       	call   c000e94b <realloc>
c000da17:	83 c4 10             	add    esp,0x10
c000da1a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da1d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da20:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da23:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da27:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da2b:	b9 08 00 00 00       	mov    ecx,0x8
c000da30:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da32:	31 f6                	xor    esi,esi
c000da34:	50                   	push   eax
c000da35:	68 00 01 00 00       	push   0x100
c000da3a:	6a 00                	push   0x0
c000da3c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da40:	50                   	push   eax
c000da41:	e8 aa 2a ff ff       	call   c00004f0 <memset>
c000da46:	83 c4 10             	add    esp,0x10
c000da49:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da51:	eb 27                	jmp    c000da7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da53:	83 f8 3d             	cmp    eax,0x3d
c000da56:	74 1e                	je     c000da76 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000da58:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000da5e:	7f 07                	jg     c000da67 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000da60:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000da64:	46                   	inc    esi
c000da65:	eb 13                	jmp    c000da7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da67:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da6f:	eb 09                	jmp    c000da7a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da71:	83 f8 3d             	cmp    eax,0x3d
c000da74:	75 ea                	jne    c000da60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da76:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da7a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da7f:	0f 85 99 fe ff ff    	jne    c000d91e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da85:	83 ec 0c             	sub    esp,0xc
c000da88:	53                   	push   ebx
c000da89:	e8 20 a7 ff ff       	call   c00081ae <File::close()>
c000da8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da96:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da9c:	5b                   	pop    ebx
c000da9d:	5e                   	pop    esi
c000da9e:	5f                   	pop    edi
c000da9f:	5d                   	pop    ebp
c000daa0:	c3                   	ret    
c000daa1:	90                   	nop

c000daa2 <EnvVarContainer::__loadSystem()>:
c000daa2:	83 ec 10             	sub    esp,0x10
c000daa5:	68 a0 4b 02 c0       	push   0xc0024ba0
c000daaa:	68 10 25 02 c0       	push   0xc0022510
c000daaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab3:	e8 c6 fd ff ff       	call   c000d87e <EnvVarContainer::loadFrom(char const*, char const*)>
c000dab8:	83 c4 1c             	add    esp,0x1c
c000dabb:	c3                   	ret    

c000dabc <EnvVarContainer::__loadUser()>:
c000dabc:	c3                   	ret    
c000dabd:	90                   	nop

c000dabe <EnvVarContainer::EnvVarContainer(Process*)>:
c000dabe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dacc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dad0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dade:	90                   	nop
c000dadf:	c3                   	ret    

c000dae0 <EnvVarContainer::~EnvVarContainer()>:
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daea:	85 c0                	test   eax,eax
c000daec:	74 1d                	je     c000db0b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000daf4:	85 c0                	test   eax,eax
c000daf6:	74 13                	je     c000db0b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000daf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daff:	83 ec 0c             	sub    esp,0xc
c000db02:	50                   	push   eax
c000db03:	e8 67 0e 00 00       	call   c000e96f <free>
c000db08:	83 c4 10             	add    esp,0x10
c000db0b:	90                   	nop
c000db0c:	83 c4 0c             	add    esp,0xc
c000db0f:	c3                   	ret    

c000db10 <KeGetEnv(Process*, char const*)>:
c000db10:	53                   	push   ebx
c000db11:	83 ec 08             	sub    esp,0x8
c000db14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db1c:	39 05 d8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6d8,eax
c000db22:	74 04                	je     c000db28 <KeGetEnv(Process*, char const*)+0x18>
c000db24:	85 c0                	test   eax,eax
c000db26:	75 0b                	jne    c000db33 <KeGetEnv(Process*, char const*)+0x23>
c000db28:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000db2d:	85 c0                	test   eax,eax
c000db2f:	75 19                	jne    c000db4a <KeGetEnv(Process*, char const*)+0x3a>
c000db31:	eb 27                	jmp    c000db5a <KeGetEnv(Process*, char const*)+0x4a>
c000db33:	52                   	push   edx
c000db34:	52                   	push   edx
c000db35:	53                   	push   ebx
c000db36:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db3c:	e8 3b fc ff ff       	call   c000d77c <EnvVarContainer::getEnv(char const*)>
c000db41:	83 c4 10             	add    esp,0x10
c000db44:	85 c0                	test   eax,eax
c000db46:	75 28                	jne    c000db70 <KeGetEnv(Process*, char const*)+0x60>
c000db48:	eb de                	jmp    c000db28 <KeGetEnv(Process*, char const*)+0x18>
c000db4a:	52                   	push   edx
c000db4b:	52                   	push   edx
c000db4c:	53                   	push   ebx
c000db4d:	50                   	push   eax
c000db4e:	e8 29 fc ff ff       	call   c000d77c <EnvVarContainer::getEnv(char const*)>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	85 c0                	test   eax,eax
c000db58:	75 16                	jne    c000db70 <KeGetEnv(Process*, char const*)+0x60>
c000db5a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000db5e:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000db63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db67:	83 c4 08             	add    esp,0x8
c000db6a:	5b                   	pop    ebx
c000db6b:	e9 0c fc ff ff       	jmp    c000d77c <EnvVarContainer::getEnv(char const*)>
c000db70:	83 c4 08             	add    esp,0x8
c000db73:	5b                   	pop    ebx
c000db74:	c3                   	ret    

c000db75 <KeSetEnvSystem(char const*, char const*)>:
c000db75:	83 ec 10             	sub    esp,0x10
c000db78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db80:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000db86:	e8 2f fc ff ff       	call   c000d7ba <EnvVarContainer::setEnv(char const*, char const*)>
c000db8b:	83 c4 1c             	add    esp,0x1c
c000db8e:	c3                   	ret    

c000db8f <KeSetEnvUser(char const*, char const*)>:
c000db8f:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000db94:	85 c0                	test   eax,eax
c000db96:	74 15                	je     c000dbad <KeSetEnvUser(char const*, char const*)+0x1e>
c000db98:	83 ec 10             	sub    esp,0x10
c000db9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dba3:	50                   	push   eax
c000dba4:	e8 11 fc ff ff       	call   c000d7ba <EnvVarContainer::setEnv(char const*, char const*)>
c000dba9:	83 c4 1c             	add    esp,0x1c
c000dbac:	c3                   	ret    
c000dbad:	c3                   	ret    

c000dbae <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbb2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dbb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dbbc:	e9 f9 fb ff ff       	jmp    c000d7ba <EnvVarContainer::setEnv(char const*, char const*)>

c000dbc1 <KeDeleteEnvSystem(char const*)>:
c000dbc1:	c3                   	ret    

c000dbc2 <KeDeleteEnvUser(char const*)>:
c000dbc2:	c3                   	ret    

c000dbc3 <KeDeleteEnvProcess(Process*, char const*)>:
c000dbc3:	c3                   	ret    

c000dbc4 <KeNewProcessEnv(Process*)>:
c000dbc4:	83 ec 28             	sub    esp,0x28
c000dbc7:	6a 0c                	push   0xc
c000dbc9:	e8 91 0d 00 00       	call   c000e95f <malloc>
c000dbce:	5a                   	pop    edx
c000dbcf:	59                   	pop    ecx
c000dbd0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dbd4:	50                   	push   eax
c000dbd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dbd9:	e8 e0 fe ff ff       	call   c000dabe <EnvVarContainer::EnvVarContainer(Process*)>
c000dbde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbe2:	83 c4 2c             	add    esp,0x2c
c000dbe5:	c3                   	ret    

c000dbe6 <KeCopyProcessEnv(Process*, Process*)>:
c000dbe6:	57                   	push   edi
c000dbe7:	56                   	push   esi
c000dbe8:	53                   	push   ebx
c000dbe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbed:	83 ec 0c             	sub    esp,0xc
c000dbf0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dbf6:	6a 0c                	push   0xc
c000dbf8:	e8 62 0d 00 00       	call   c000e95f <malloc>
c000dbfd:	89 c3                	mov    ebx,eax
c000dbff:	58                   	pop    eax
c000dc00:	5a                   	pop    edx
c000dc01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc05:	53                   	push   ebx
c000dc06:	e8 b3 fe ff ff       	call   c000dabe <EnvVarContainer::EnvVarContainer(Process*)>
c000dc0b:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc0d:	89 03                	mov    DWORD PTR [ebx],eax
c000dc0f:	c1 e0 03             	shl    eax,0x3
c000dc12:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc15:	e8 45 0d 00 00       	call   c000e95f <malloc>
c000dc1a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc1d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc1f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc22:	c1 e1 03             	shl    ecx,0x3
c000dc25:	89 c7                	mov    edi,eax
c000dc27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc29:	83 c4 10             	add    esp,0x10
c000dc2c:	89 d8                	mov    eax,ebx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	c3                   	ret    

c000dc32 <KeLoadSystemEnv()>:
c000dc32:	53                   	push   ebx
c000dc33:	83 ec 14             	sub    esp,0x14
c000dc36:	6a 0c                	push   0xc
c000dc38:	e8 22 0d 00 00       	call   c000e95f <malloc>
c000dc3d:	89 c3                	mov    ebx,eax
c000dc3f:	58                   	pop    eax
c000dc40:	5a                   	pop    edx
c000dc41:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dc47:	53                   	push   ebx
c000dc48:	e8 71 fe ff ff       	call   c000dabe <EnvVarContainer::EnvVarContainer(Process*)>
c000dc4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc50:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000dc56:	e8 47 fe ff ff       	call   c000daa2 <EnvVarContainer::__loadSystem()>
c000dc5b:	83 c4 18             	add    esp,0x18
c000dc5e:	5b                   	pop    ebx
c000dc5f:	c3                   	ret    

c000dc60 <KeLoadUserEnv()>:
c000dc60:	53                   	push   ebx
c000dc61:	83 ec 14             	sub    esp,0x14
c000dc64:	6a 0c                	push   0xc
c000dc66:	e8 f4 0c 00 00       	call   c000e95f <malloc>
c000dc6b:	89 c3                	mov    ebx,eax
c000dc6d:	58                   	pop    eax
c000dc6e:	5a                   	pop    edx
c000dc6f:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000dc75:	53                   	push   ebx
c000dc76:	e8 43 fe ff ff       	call   c000dabe <EnvVarContainer::EnvVarContainer(Process*)>
c000dc7b:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000dc81:	83 c4 18             	add    esp,0x18
c000dc84:	5b                   	pop    ebx
c000dc85:	c3                   	ret    

c000dc86 <KeFlushEnv()>:
c000dc86:	c3                   	ret    

c000dc87 <KeGetProcessTotalEnvCount(Process*)>:
c000dc87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc8b:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000dc91:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc97:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000dc9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc9e:	03 01                	add    eax,DWORD PTR [ecx]
c000dca0:	85 d2                	test   edx,edx
c000dca2:	74 02                	je     c000dca6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dca4:	03 02                	add    eax,DWORD PTR [edx]
c000dca6:	c3                   	ret    

c000dca7 <KeGetProcessEnvPair(Process*, int)>:
c000dca7:	57                   	push   edi
c000dca8:	56                   	push   esi
c000dca9:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000dcaf:	53                   	push   ebx
c000dcb0:	85 f6                	test   esi,esi
c000dcb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dcba:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dcc4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcc6:	75 16                	jne    c000dcde <KeGetProcessEnvPair(Process*, int)+0x37>
c000dcc8:	39 c2                	cmp    edx,eax
c000dcca:	7c 16                	jl     c000dce2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dccc:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000dcd2:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dcd4:	01 c6                	add    esi,eax
c000dcd6:	39 d6                	cmp    esi,edx
c000dcd8:	7e 3c                	jle    c000dd16 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dcda:	29 c2                	sub    edx,eax
c000dcdc:	eb 04                	jmp    c000dce2 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dcde:	39 c2                	cmp    edx,eax
c000dce0:	7d 05                	jge    c000dce7 <KeGetProcessEnvPair(Process*, int)+0x40>
c000dce2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dce5:	eb 20                	jmp    c000dd07 <KeGetProcessEnvPair(Process*, int)+0x60>
c000dce7:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dce9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dcec:	39 d1                	cmp    ecx,edx
c000dcee:	7e 04                	jle    c000dcf4 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dcf0:	29 c2                	sub    edx,eax
c000dcf2:	eb 10                	jmp    c000dd04 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dcf4:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000dcfa:	03 0e                	add    ecx,DWORD PTR [esi]
c000dcfc:	39 d1                	cmp    ecx,edx
c000dcfe:	7e 16                	jle    c000dd16 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd00:	29 c2                	sub    edx,eax
c000dd02:	29 fa                	sub    edx,edi
c000dd04:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd07:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd0a:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd0c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd0f:	89 03                	mov    DWORD PTR [ebx],eax
c000dd11:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dd14:	eb 1d                	jmp    c000dd33 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dd16:	83 ec 0c             	sub    esp,0xc
c000dd19:	68 32 25 02 c0       	push   0xc0022532
c000dd1e:	e8 83 0f 00 00       	call   c000eca6 <KePanic(char const*)>
c000dd23:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd29:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	89 d8                	mov    eax,ebx
c000dd35:	5b                   	pop    ebx
c000dd36:	5e                   	pop    esi
c000dd37:	5f                   	pop    edi
c000dd38:	c2 04 00             	ret    0x4
c000dd3b:	90                   	nop

c000dd3c <KeSetupInterrupts()>:
c000dd3c:	83 ec 10             	sub    esp,0x10
c000dd3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd47:	90                   	nop
c000dd48:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd50:	7f 5a                	jg     c000ddac <KeSetupInterrupts()+0x70>
c000dd52:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd5a:	66 90                	xchg   ax,ax
c000dd5c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dd61:	7f 41                	jg     c000dda4 <KeSetupInterrupts()+0x68>
c000dd63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd72:	01 d0                	add    eax,edx
c000dd74:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000dd7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd83:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd8e:	01 d0                	add    eax,edx
c000dd90:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd9b:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dda0:	eb ba                	jmp    c000dd5c <KeSetupInterrupts()+0x20>
c000dda2:	66 90                	xchg   ax,ax
c000dda4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dda9:	eb 9d                	jmp    c000dd48 <KeSetupInterrupts()+0xc>
c000ddab:	90                   	nop
c000ddac:	90                   	nop
c000ddad:	83 c4 10             	add    esp,0x10
c000ddb0:	c3                   	ret    
c000ddb1:	8d 76 00             	lea    esi,[esi+0x0]

c000ddb4 <int_handler>:
c000ddb4:	83 ec 2c             	sub    esp,0x2c
c000ddb7:	90                   	nop
c000ddb8:	a0 94 cd 02 c0       	mov    al,ds:0xc002cd94
c000ddbd:	0f b6 c0             	movzx  eax,al
c000ddc0:	85 c0                	test   eax,eax
c000ddc2:	74 04                	je     c000ddc8 <int_handler+0x14>
c000ddc4:	fa                   	cli    
c000ddc5:	f4                   	hlt    
c000ddc6:	eb f0                	jmp    c000ddb8 <int_handler+0x4>
c000ddc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddcc:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ddcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ddd3:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ddd8:	7e 1a                	jle    c000ddf4 <int_handler+0x40>
c000ddda:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dddf:	7f 13                	jg     c000ddf4 <int_handler+0x40>
c000dde1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dde5:	83 e8 20             	sub    eax,0x20
c000dde8:	83 ec 0c             	sub    esp,0xc
c000ddeb:	50                   	push   eax
c000ddec:	e8 bf ab 00 00       	call   c00189b0 <HalEndOfInterrupt(int)>
c000ddf1:	83 c4 10             	add    esp,0x10
c000ddf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ddf8:	c1 e0 04             	shl    eax,0x4
c000ddfb:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000de00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de08:	c1 e0 04             	shl    eax,0x4
c000de0b:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000de10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de1c:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de21:	0f 8f ad 00 00 00    	jg     c000ded4 <int_handler+0x120>
c000de27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de36:	01 d0                	add    eax,edx
c000de38:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3a:	85 c0                	test   eax,eax
c000de3c:	0f 84 86 00 00 00    	je     c000dec8 <int_handler+0x114>
c000de42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de46:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de49:	83 f8 60             	cmp    eax,0x60
c000de4c:	75 46                	jne    c000de94 <int_handler+0xe0>
c000de4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de52:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de5d:	01 d0                	add    eax,edx
c000de5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de65:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de70:	01 ca                	add    edx,ecx
c000de72:	8b 12                	mov    edx,DWORD PTR [edx]
c000de74:	83 ec 08             	sub    esp,0x8
c000de77:	52                   	push   edx
c000de78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de7c:	ff d0                	call   eax
c000de7e:	83 c4 10             	add    esp,0x10
c000de81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de91:	eb 5d                	jmp    c000def0 <int_handler+0x13c>
c000de93:	90                   	nop
c000de94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de98:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dea3:	01 d0                	add    eax,edx
c000dea5:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000deb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb6:	01 ca                	add    edx,ecx
c000deb8:	8b 12                	mov    edx,DWORD PTR [edx]
c000deba:	83 ec 08             	sub    esp,0x8
c000debd:	52                   	push   edx
c000debe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dec2:	ff d0                	call   eax
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	90                   	nop
c000dec8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000decd:	e9 4a ff ff ff       	jmp    c000de1c <int_handler+0x68>
c000ded2:	66 90                	xchg   ax,ax
c000ded4:	83 ec 0c             	sub    esp,0xc
c000ded7:	68 4c 25 02 c0       	push   0xc002254c
c000dedc:	e8 83 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000dee1:	83 c4 10             	add    esp,0x10
c000dee4:	b8 00 00 00 00       	mov    eax,0x0
c000dee9:	ba 00 00 00 00       	mov    edx,0x0
c000deee:	66 90                	xchg   ax,ax
c000def0:	83 c4 2c             	add    esp,0x2c
c000def3:	c3                   	ret    

c000def4 <KeDisplayProgramFault(char const*)>:
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	83 ec 0c             	sub    esp,0xc
c000defa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defe:	e8 61 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df03:	83 c4 10             	add    esp,0x10
c000df06:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000df0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df16:	85 c0                	test   eax,eax
c000df18:	74 22                	je     c000df3c <KeDisplayProgramFault(char const*)+0x48>
c000df1a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000df21:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df2a:	6a 04                	push   0x4
c000df2c:	6a 0f                	push   0xf
c000df2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df32:	50                   	push   eax
c000df33:	e8 de 35 00 00       	call   c0011516 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df38:	83 c4 10             	add    esp,0x10
c000df3b:	90                   	nop
c000df3c:	90                   	nop
c000df3d:	83 c4 0c             	add    esp,0xc
c000df40:	c3                   	ret    
c000df41:	8d 76 00             	lea    esi,[esi+0x0]

c000df44 <KeGeneralProtectionFault(void*, void*)>:
c000df44:	83 ec 0c             	sub    esp,0xc
c000df47:	83 ec 08             	sub    esp,0x8
c000df4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df52:	e8 fb 9f 00 00       	call   c0017f52 <HalHandleGeneralProtectionFault(void*, void*)>
c000df57:	83 c4 10             	add    esp,0x10
c000df5a:	0f b6 c0             	movzx  eax,al
c000df5d:	85 c0                	test   eax,eax
c000df5f:	75 2f                	jne    c000df90 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000df61:	83 ec 0c             	sub    esp,0xc
c000df64:	68 4f 25 02 c0       	push   0xc002254f
c000df69:	e8 86 ff ff ff       	call   c000def4 <KeDisplayProgramFault(char const*)>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	83 ec 0c             	sub    esp,0xc
c000df74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df78:	e8 6f a1 00 00       	call   c00180ec <HalDisplayDebugInfo(void*)>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	6a 00                	push   0x0
c000df85:	e8 66 80 00 00       	call   c0015ff0 <Thr::terminateFromIRQ(int)>
c000df8a:	83 c4 10             	add    esp,0x10
c000df8d:	eb 05                	jmp    c000df94 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df8f:	90                   	nop
c000df90:	90                   	nop
c000df91:	8d 76 00             	lea    esi,[esi+0x0]
c000df94:	83 c4 0c             	add    esp,0xc
c000df97:	c3                   	ret    

c000df98 <KePageFault(void*, void*)>:
c000df98:	83 ec 0c             	sub    esp,0xc
c000df9b:	83 ec 0c             	sub    esp,0xc
c000df9e:	68 68 25 02 c0       	push   0xc0022568
c000dfa3:	e8 bc 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	83 ec 08             	sub    esp,0x8
c000dfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	e8 42 a0 00 00       	call   c0017ffd <HalHandlePageFault(void*, void*)>
c000dfbb:	83 c4 10             	add    esp,0x10
c000dfbe:	0f b6 c0             	movzx  eax,al
c000dfc1:	85 c0                	test   eax,eax
c000dfc3:	75 2f                	jne    c000dff4 <KePageFault(void*, void*)+0x5c>
c000dfc5:	83 ec 0c             	sub    esp,0xc
c000dfc8:	68 75 25 02 c0       	push   0xc0022575
c000dfcd:	e8 22 ff ff ff       	call   c000def4 <KeDisplayProgramFault(char const*)>
c000dfd2:	83 c4 10             	add    esp,0x10
c000dfd5:	83 ec 0c             	sub    esp,0xc
c000dfd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfdc:	e8 0b a1 00 00       	call   c00180ec <HalDisplayDebugInfo(void*)>
c000dfe1:	83 c4 10             	add    esp,0x10
c000dfe4:	83 ec 0c             	sub    esp,0xc
c000dfe7:	6a 00                	push   0x0
c000dfe9:	e8 02 80 00 00       	call   c0015ff0 <Thr::terminateFromIRQ(int)>
c000dfee:	83 c4 10             	add    esp,0x10
c000dff1:	eb 05                	jmp    c000dff8 <KePageFault(void*, void*)+0x60>
c000dff3:	90                   	nop
c000dff4:	90                   	nop
c000dff5:	8d 76 00             	lea    esi,[esi+0x0]
c000dff8:	83 c4 0c             	add    esp,0xc
c000dffb:	c3                   	ret    

c000dffc <KeNonMaskableInterrupt(void*, void*)>:
c000dffc:	83 ec 0c             	sub    esp,0xc
c000dfff:	e8 76 a4 00 00       	call   c001847a <HalReceivedNMI()>
c000e004:	90                   	nop
c000e005:	83 c4 0c             	add    esp,0xc
c000e008:	c3                   	ret    
c000e009:	8d 76 00             	lea    esi,[esi+0x0]

c000e00c <KeOtherFault(void*, void*)>:
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	83 ec 0c             	sub    esp,0xc
c000e012:	68 80 25 02 c0       	push   0xc0022580
c000e017:	e8 d8 fe ff ff       	call   c000def4 <KeDisplayProgramFault(char const*)>
c000e01c:	83 c4 10             	add    esp,0x10
c000e01f:	83 ec 0c             	sub    esp,0xc
c000e022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e026:	e8 c1 a0 00 00       	call   c00180ec <HalDisplayDebugInfo(void*)>
c000e02b:	83 c4 10             	add    esp,0x10
c000e02e:	83 ec 0c             	sub    esp,0xc
c000e031:	6a 00                	push   0x0
c000e033:	e8 b8 7f 00 00       	call   c0015ff0 <Thr::terminateFromIRQ(int)>
c000e038:	83 c4 10             	add    esp,0x10
c000e03b:	90                   	nop
c000e03c:	83 c4 0c             	add    esp,0xc
c000e03f:	c3                   	ret    

c000e040 <KeOpcodeFault(void*, void*)>:
c000e040:	55                   	push   ebp
c000e041:	89 e5                	mov    ebp,esp
c000e043:	83 ec 08             	sub    esp,0x8
c000e046:	83 ec 08             	sub    esp,0x8
c000e049:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e04c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e04f:	e8 56 a0 00 00       	call   c00180aa <HalHandleOpcodeFault(void*, void*)>
c000e054:	83 c4 10             	add    esp,0x10
c000e057:	0f b6 c0             	movzx  eax,al
c000e05a:	85 c0                	test   eax,eax
c000e05c:	75 2e                	jne    c000e08c <KeOpcodeFault(void*, void*)+0x4c>
c000e05e:	83 ec 0c             	sub    esp,0xc
c000e061:	68 a8 25 02 c0       	push   0xc00225a8
c000e066:	e8 89 fe ff ff       	call   c000def4 <KeDisplayProgramFault(char const*)>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	83 ec 0c             	sub    esp,0xc
c000e071:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e074:	e8 73 a0 00 00       	call   c00180ec <HalDisplayDebugInfo(void*)>
c000e079:	83 c4 10             	add    esp,0x10
c000e07c:	83 ec 0c             	sub    esp,0xc
c000e07f:	6a 00                	push   0x0
c000e081:	e8 6a 7f 00 00       	call   c0015ff0 <Thr::terminateFromIRQ(int)>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	eb 05                	jmp    c000e090 <KeOpcodeFault(void*, void*)+0x50>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	8d 76 00             	lea    esi,[esi+0x0]
c000e090:	c9                   	leave  
c000e091:	c3                   	ret    
c000e092:	66 90                	xchg   ax,ax

c000e094 <KeDoubleFault(void*, void*)>:
c000e094:	55                   	push   ebp
c000e095:	89 e5                	mov    ebp,esp
c000e097:	83 ec 08             	sub    esp,0x8
c000e09a:	83 ec 0c             	sub    esp,0xc
c000e09d:	68 b5 25 02 c0       	push   0xc00225b5
c000e0a2:	e8 ff 0b 00 00       	call   c000eca6 <KePanic(char const*)>
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	90                   	nop
c000e0ab:	c9                   	leave  
c000e0ac:	c3                   	ret    
c000e0ad:	90                   	nop

c000e0ae <GDTEntry::setBase(unsigned int)>:
c000e0ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0b6:	89 c1                	mov    ecx,eax
c000e0b8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e0bc:	c1 e9 10             	shr    ecx,0x10
c000e0bf:	c1 e8 18             	shr    eax,0x18
c000e0c2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e0c5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e0c8:	c3                   	ret    
c000e0c9:	90                   	nop

c000e0ca <GDTEntry::setLimit(unsigned int)>:
c000e0ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0d2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e0d5:	66 89 01             	mov    WORD PTR [ecx],ax
c000e0d8:	83 e2 f0             	and    edx,0xfffffff0
c000e0db:	c1 e8 10             	shr    eax,0x10
c000e0de:	83 e0 0f             	and    eax,0xf
c000e0e1:	09 d0                	or     eax,edx
c000e0e3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e0e6:	c3                   	ret    
c000e0e7:	90                   	nop

c000e0e8 <GDT::GDT()>:
c000e0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e0fc:	90                   	nop
c000e0fd:	c3                   	ret    

c000e0fe <GDT::addEntry(GDTEntry)>:
c000e0fe:	53                   	push   ebx
c000e0ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e103:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e107:	8b 02                	mov    eax,DWORD PTR [edx]
c000e109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e10d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e111:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e115:	8d 48 01             	lea    ecx,[eax+0x1]
c000e118:	c1 e0 03             	shl    eax,0x3
c000e11b:	89 0a                	mov    DWORD PTR [edx],ecx
c000e11d:	5b                   	pop    ebx
c000e11e:	c3                   	ret    
c000e11f:	90                   	nop

c000e120 <GDT::getNumberOfEntries()>:
c000e120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e124:	8b 00                	mov    eax,DWORD PTR [eax]
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <GDT::flush()>:
c000e128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e12c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e12e:	83 c0 04             	add    eax,0x4
c000e131:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e138:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e13d:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e144:	e9 11 22 ff ff       	jmp    c000035a <loadGDT>
c000e149:	90                   	nop

c000e14a <GDT::setup()>:
c000e14a:	57                   	push   edi
c000e14b:	56                   	push   esi
c000e14c:	53                   	push   ebx
c000e14d:	83 ec 30             	sub    esp,0x30
c000e150:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e154:	6a 00                	push   0x0
c000e156:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e15a:	56                   	push   esi
c000e15b:	e8 4e ff ff ff       	call   c000e0ae <GDTEntry::setBase(unsigned int)>
c000e160:	6a 00                	push   0x0
c000e162:	56                   	push   esi
c000e163:	e8 62 ff ff ff       	call   c000e0ca <GDTEntry::setLimit(unsigned int)>
c000e168:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e170:	6a 00                	push   0x0
c000e172:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e176:	56                   	push   esi
c000e177:	e8 32 ff ff ff       	call   c000e0ae <GDTEntry::setBase(unsigned int)>
c000e17c:	68 ff ff ff 00       	push   0xffffff
c000e181:	56                   	push   esi
c000e182:	e8 43 ff ff ff       	call   c000e0ca <GDTEntry::setLimit(unsigned int)>
c000e187:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e18b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e18f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e193:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e197:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e19c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1a9:	89 f8                	mov    eax,edi
c000e1ab:	89 fa                	mov    edx,edi
c000e1ad:	80 e4 f7             	and    ah,0xf7
c000e1b0:	80 ce 60             	or     dh,0x60
c000e1b3:	89 c7                	mov    edi,eax
c000e1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1b9:	80 cc 60             	or     ah,0x60
c000e1bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e1c0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e1c4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e1c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1d0:	83 c4 20             	add    esp,0x20
c000e1d3:	6a 00                	push   0x0
c000e1d5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e1d9:	50                   	push   eax
c000e1da:	e8 cf fe ff ff       	call   c000e0ae <GDTEntry::setBase(unsigned int)>
c000e1df:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e1e3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e1e7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e1eb:	83 e0 3f             	and    eax,0x3f
c000e1ee:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e1f2:	6a 00                	push   0x0
c000e1f4:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e1f8:	50                   	push   eax
c000e1f9:	e8 b0 fe ff ff       	call   c000e0ae <GDTEntry::setBase(unsigned int)>
c000e1fe:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e202:	83 e0 3f             	and    eax,0x3f
c000e205:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e209:	83 c4 0c             	add    esp,0xc
c000e20c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e210:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e214:	53                   	push   ebx
c000e215:	e8 e4 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e21a:	83 c4 0c             	add    esp,0xc
c000e21d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e221:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e225:	53                   	push   ebx
c000e226:	e8 d3 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e22b:	83 c4 0c             	add    esp,0xc
c000e22e:	57                   	push   edi
c000e22f:	56                   	push   esi
c000e230:	53                   	push   ebx
c000e231:	e8 c8 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e236:	83 c4 0c             	add    esp,0xc
c000e239:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e23d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e241:	53                   	push   ebx
c000e242:	e8 b7 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e247:	83 c4 0c             	add    esp,0xc
c000e24a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e24e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e252:	53                   	push   ebx
c000e253:	e8 a6 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e258:	83 c4 0c             	add    esp,0xc
c000e25b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e25f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e263:	53                   	push   ebx
c000e264:	e8 95 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e269:	83 c4 0c             	add    esp,0xc
c000e26c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e270:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e274:	53                   	push   ebx
c000e275:	e8 84 fe ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c000e27a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e27d:	e8 a6 fe ff ff       	call   c000e128 <GDT::flush()>
c000e282:	83 c4 40             	add    esp,0x40
c000e285:	5b                   	pop    ebx
c000e286:	5e                   	pop    esi
c000e287:	5f                   	pop    edi
c000e288:	c3                   	ret    

c000e289 <idleFunction(void*)>:
c000e289:	83 ec 0c             	sub    esp,0xc
c000e28c:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e293:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e29a:	75 01                	jne    c000e29d <idleFunction(void*)+0x14>
c000e29c:	fb                   	sti    
c000e29d:	e8 73 a2 00 00       	call   c0018515 <HalSystemIdle()>
c000e2a2:	e8 8f 24 01 00       	call   c0020736 <idleCommon()>
c000e2a7:	eb f4                	jmp    c000e29d <idleFunction(void*)+0x14>
c000e2a9:	66 90                	xchg   ax,ax
c000e2ab:	90                   	nop

c000e2ac <IDTEntry::IDTEntry(bool)>:
c000e2ac:	53                   	push   ebx
c000e2ad:	83 ec 04             	sub    esp,0x4
c000e2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b4:	88 04 24             	mov    BYTE PTR [esp],al
c000e2b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2bb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e2c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e2c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2cd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2d0:	83 e2 f0             	and    edx,0xfffffff0
c000e2d3:	83 ca 0e             	or     edx,0xe
c000e2d6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2dd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2e0:	83 e2 ef             	and    edx,0xffffffef
c000e2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2e6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e2ea:	85 c0                	test   eax,eax
c000e2ec:	74 06                	je     c000e2f4 <IDTEntry::IDTEntry(bool)+0x48>
c000e2ee:	b2 03                	mov    dl,0x3
c000e2f0:	eb 06                	jmp    c000e2f8 <IDTEntry::IDTEntry(bool)+0x4c>
c000e2f2:	66 90                	xchg   ax,ax
c000e2f4:	b2 00                	mov    dl,0x0
c000e2f6:	66 90                	xchg   ax,ax
c000e2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2fc:	83 e2 03             	and    edx,0x3
c000e2ff:	89 d3                	mov    ebx,edx
c000e301:	c1 e3 05             	shl    ebx,0x5
c000e304:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e307:	83 e2 9f             	and    edx,0xffffff9f
c000e30a:	88 d1                	mov    cl,dl
c000e30c:	88 da                	mov    dl,bl
c000e30e:	09 ca                	or     edx,ecx
c000e310:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e317:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e31a:	83 ca 80             	or     edx,0xffffff80
c000e31d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e320:	90                   	nop
c000e321:	83 c4 04             	add    esp,0x4
c000e324:	5b                   	pop    ebx
c000e325:	c3                   	ret    

c000e326 <IDTEntry::setOffset(unsigned int)>:
c000e326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e32a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e32e:	66 89 02             	mov    WORD PTR [edx],ax
c000e331:	c1 e8 10             	shr    eax,0x10
c000e334:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e338:	c3                   	ret    
c000e339:	90                   	nop
c000e33a:	66 90                	xchg   ax,ax

c000e33c <IDT::IDT()>:
c000e33c:	90                   	nop
c000e33d:	c3                   	ret    

c000e33e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e342:	83 c0 30             	add    eax,0x30
c000e345:	c3                   	ret    

c000e346 <IDT::addEntry(IDTEntry, int)>:
c000e346:	53                   	push   ebx
c000e347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e34b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e34f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e353:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e357:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e35a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e35e:	5b                   	pop    ebx
c000e35f:	c3                   	ret    

c000e360 <IDT::addEntry(int, void (*)(), bool)>:
c000e360:	53                   	push   ebx
c000e361:	83 ec 10             	sub    esp,0x10
c000e364:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e369:	50                   	push   eax
c000e36a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e36e:	53                   	push   ebx
c000e36f:	e8 38 ff ff ff       	call   c000e2ac <IDTEntry::IDTEntry(bool)>
c000e374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e378:	53                   	push   ebx
c000e379:	e8 a8 ff ff ff       	call   c000e326 <IDTEntry::setOffset(unsigned int)>
c000e37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e382:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e386:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e38e:	e8 b3 ff ff ff       	call   c000e346 <IDT::addEntry(IDTEntry, int)>
c000e393:	83 c4 30             	add    esp,0x30
c000e396:	5b                   	pop    ebx
c000e397:	c3                   	ret    

c000e398 <IDT::flush()>:
c000e398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e39c:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e3a5:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e3aa:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e3b1:	c3                   	ret    

c000e3b2 <IDT::setup()>:
c000e3b2:	57                   	push   edi
c000e3b3:	56                   	push   esi
c000e3b4:	53                   	push   ebx
c000e3b5:	83 ec 10             	sub    esp,0x10
c000e3b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3bc:	6a 00                	push   0x0
c000e3be:	68 e0 f9 01 c0       	push   0xc001f9e0
c000e3c3:	6a 00                	push   0x0
c000e3c5:	53                   	push   ebx
c000e3c6:	e8 95 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e3cb:	6a 00                	push   0x0
c000e3cd:	68 f0 f9 01 c0       	push   0xc001f9f0
c000e3d2:	6a 01                	push   0x1
c000e3d4:	53                   	push   ebx
c000e3d5:	e8 86 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e3da:	83 c4 20             	add    esp,0x20
c000e3dd:	6a 00                	push   0x0
c000e3df:	68 fa f9 01 c0       	push   0xc001f9fa
c000e3e4:	6a 02                	push   0x2
c000e3e6:	53                   	push   ebx
c000e3e7:	e8 74 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e3ec:	6a 00                	push   0x0
c000e3ee:	68 04 fa 01 c0       	push   0xc001fa04
c000e3f3:	6a 03                	push   0x3
c000e3f5:	53                   	push   ebx
c000e3f6:	e8 65 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e3fb:	83 c4 20             	add    esp,0x20
c000e3fe:	6a 00                	push   0x0
c000e400:	68 0e fa 01 c0       	push   0xc001fa0e
c000e405:	6a 04                	push   0x4
c000e407:	53                   	push   ebx
c000e408:	e8 53 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e40d:	6a 00                	push   0x0
c000e40f:	68 18 fa 01 c0       	push   0xc001fa18
c000e414:	6a 05                	push   0x5
c000e416:	53                   	push   ebx
c000e417:	e8 44 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e41c:	83 c4 20             	add    esp,0x20
c000e41f:	6a 00                	push   0x0
c000e421:	68 22 fa 01 c0       	push   0xc001fa22
c000e426:	6a 06                	push   0x6
c000e428:	53                   	push   ebx
c000e429:	e8 32 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e42e:	6a 00                	push   0x0
c000e430:	68 2c fa 01 c0       	push   0xc001fa2c
c000e435:	6a 07                	push   0x7
c000e437:	53                   	push   ebx
c000e438:	e8 23 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e43d:	83 c4 20             	add    esp,0x20
c000e440:	6a 00                	push   0x0
c000e442:	68 36 fa 01 c0       	push   0xc001fa36
c000e447:	6a 08                	push   0x8
c000e449:	53                   	push   ebx
c000e44a:	e8 11 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e44f:	6a 00                	push   0x0
c000e451:	68 3e fa 01 c0       	push   0xc001fa3e
c000e456:	6a 09                	push   0x9
c000e458:	53                   	push   ebx
c000e459:	e8 02 ff ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e45e:	83 c4 20             	add    esp,0x20
c000e461:	6a 00                	push   0x0
c000e463:	68 48 fa 01 c0       	push   0xc001fa48
c000e468:	6a 0a                	push   0xa
c000e46a:	53                   	push   ebx
c000e46b:	e8 f0 fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e470:	6a 00                	push   0x0
c000e472:	68 50 fa 01 c0       	push   0xc001fa50
c000e477:	6a 0b                	push   0xb
c000e479:	53                   	push   ebx
c000e47a:	e8 e1 fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e47f:	83 c4 20             	add    esp,0x20
c000e482:	6a 00                	push   0x0
c000e484:	68 58 fa 01 c0       	push   0xc001fa58
c000e489:	6a 0c                	push   0xc
c000e48b:	53                   	push   ebx
c000e48c:	e8 cf fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e491:	6a 00                	push   0x0
c000e493:	68 60 fa 01 c0       	push   0xc001fa60
c000e498:	6a 0d                	push   0xd
c000e49a:	53                   	push   ebx
c000e49b:	e8 c0 fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4a0:	83 c4 20             	add    esp,0x20
c000e4a3:	6a 00                	push   0x0
c000e4a5:	68 7a fa 01 c0       	push   0xc001fa7a
c000e4aa:	6a 0e                	push   0xe
c000e4ac:	53                   	push   ebx
c000e4ad:	e8 ae fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4b2:	6a 00                	push   0x0
c000e4b4:	68 82 fa 01 c0       	push   0xc001fa82
c000e4b9:	6a 0f                	push   0xf
c000e4bb:	53                   	push   ebx
c000e4bc:	e8 9f fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4c1:	83 c4 20             	add    esp,0x20
c000e4c4:	6a 00                	push   0x0
c000e4c6:	68 8c fa 01 c0       	push   0xc001fa8c
c000e4cb:	6a 10                	push   0x10
c000e4cd:	53                   	push   ebx
c000e4ce:	e8 8d fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4d3:	6a 00                	push   0x0
c000e4d5:	68 96 fa 01 c0       	push   0xc001fa96
c000e4da:	6a 11                	push   0x11
c000e4dc:	53                   	push   ebx
c000e4dd:	e8 7e fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4e2:	83 c4 20             	add    esp,0x20
c000e4e5:	6a 00                	push   0x0
c000e4e7:	68 a0 fa 01 c0       	push   0xc001faa0
c000e4ec:	6a 12                	push   0x12
c000e4ee:	53                   	push   ebx
c000e4ef:	e8 6c fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e4f4:	6a 01                	push   0x1
c000e4f6:	68 3a fb 01 c0       	push   0xc001fb3a
c000e4fb:	6a 60                	push   0x60
c000e4fd:	53                   	push   ebx
c000e4fe:	e8 5d fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e503:	83 c4 20             	add    esp,0x20
c000e506:	6a 00                	push   0x0
c000e508:	68 41 fb 01 c0       	push   0xc001fb41
c000e50d:	6a 20                	push   0x20
c000e50f:	53                   	push   ebx
c000e510:	e8 4b fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e515:	6a 00                	push   0x0
c000e517:	68 2c fb 01 c0       	push   0xc001fb2c
c000e51c:	6a 21                	push   0x21
c000e51e:	53                   	push   ebx
c000e51f:	e8 3c fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e524:	83 c4 20             	add    esp,0x20
c000e527:	6a 00                	push   0x0
c000e529:	68 33 fb 01 c0       	push   0xc001fb33
c000e52e:	6a 22                	push   0x22
c000e530:	53                   	push   ebx
c000e531:	e8 2a fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e536:	6a 00                	push   0x0
c000e538:	68 aa fa 01 c0       	push   0xc001faaa
c000e53d:	6a 23                	push   0x23
c000e53f:	53                   	push   ebx
c000e540:	e8 1b fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e545:	83 c4 20             	add    esp,0x20
c000e548:	6a 00                	push   0x0
c000e54a:	68 b4 fa 01 c0       	push   0xc001fab4
c000e54f:	6a 24                	push   0x24
c000e551:	53                   	push   ebx
c000e552:	e8 09 fe ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e557:	6a 00                	push   0x0
c000e559:	68 be fa 01 c0       	push   0xc001fabe
c000e55e:	6a 25                	push   0x25
c000e560:	53                   	push   ebx
c000e561:	e8 fa fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e566:	83 c4 20             	add    esp,0x20
c000e569:	6a 00                	push   0x0
c000e56b:	68 c8 fa 01 c0       	push   0xc001fac8
c000e570:	6a 26                	push   0x26
c000e572:	53                   	push   ebx
c000e573:	e8 e8 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e578:	6a 00                	push   0x0
c000e57a:	68 d2 fa 01 c0       	push   0xc001fad2
c000e57f:	6a 27                	push   0x27
c000e581:	53                   	push   ebx
c000e582:	e8 d9 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e587:	83 c4 20             	add    esp,0x20
c000e58a:	6a 00                	push   0x0
c000e58c:	68 dc fa 01 c0       	push   0xc001fadc
c000e591:	6a 28                	push   0x28
c000e593:	53                   	push   ebx
c000e594:	e8 c7 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e599:	6a 00                	push   0x0
c000e59b:	68 e6 fa 01 c0       	push   0xc001fae6
c000e5a0:	6a 29                	push   0x29
c000e5a2:	53                   	push   ebx
c000e5a3:	e8 b8 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5a8:	83 c4 20             	add    esp,0x20
c000e5ab:	6a 00                	push   0x0
c000e5ad:	68 f0 fa 01 c0       	push   0xc001faf0
c000e5b2:	6a 2a                	push   0x2a
c000e5b4:	53                   	push   ebx
c000e5b5:	e8 a6 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5ba:	6a 00                	push   0x0
c000e5bc:	68 fa fa 01 c0       	push   0xc001fafa
c000e5c1:	6a 2b                	push   0x2b
c000e5c3:	53                   	push   ebx
c000e5c4:	e8 97 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5c9:	83 c4 20             	add    esp,0x20
c000e5cc:	6a 00                	push   0x0
c000e5ce:	68 04 fb 01 c0       	push   0xc001fb04
c000e5d3:	6a 2c                	push   0x2c
c000e5d5:	53                   	push   ebx
c000e5d6:	e8 85 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5db:	6a 00                	push   0x0
c000e5dd:	68 0e fb 01 c0       	push   0xc001fb0e
c000e5e2:	6a 2d                	push   0x2d
c000e5e4:	53                   	push   ebx
c000e5e5:	e8 76 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5ea:	83 c4 20             	add    esp,0x20
c000e5ed:	6a 00                	push   0x0
c000e5ef:	68 18 fb 01 c0       	push   0xc001fb18
c000e5f4:	6a 2e                	push   0x2e
c000e5f6:	53                   	push   ebx
c000e5f7:	e8 64 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e5fc:	6a 00                	push   0x0
c000e5fe:	68 22 fb 01 c0       	push   0xc001fb22
c000e603:	6a 2f                	push   0x2f
c000e605:	53                   	push   ebx
c000e606:	e8 55 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e60b:	83 c4 20             	add    esp,0x20
c000e60e:	6a 00                	push   0x0
c000e610:	68 7c fc 01 c0       	push   0xc001fc7c
c000e615:	6a 30                	push   0x30
c000e617:	53                   	push   ebx
c000e618:	e8 43 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e61d:	6a 00                	push   0x0
c000e61f:	68 86 fc 01 c0       	push   0xc001fc86
c000e624:	6a 31                	push   0x31
c000e626:	53                   	push   ebx
c000e627:	e8 34 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e62c:	83 c4 20             	add    esp,0x20
c000e62f:	6a 00                	push   0x0
c000e631:	68 90 fc 01 c0       	push   0xc001fc90
c000e636:	6a 32                	push   0x32
c000e638:	53                   	push   ebx
c000e639:	e8 22 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e63e:	6a 00                	push   0x0
c000e640:	68 9a fc 01 c0       	push   0xc001fc9a
c000e645:	6a 33                	push   0x33
c000e647:	53                   	push   ebx
c000e648:	e8 13 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e64d:	83 c4 20             	add    esp,0x20
c000e650:	6a 00                	push   0x0
c000e652:	68 a4 fc 01 c0       	push   0xc001fca4
c000e657:	6a 34                	push   0x34
c000e659:	53                   	push   ebx
c000e65a:	e8 01 fd ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e65f:	6a 00                	push   0x0
c000e661:	68 ae fc 01 c0       	push   0xc001fcae
c000e666:	6a 35                	push   0x35
c000e668:	53                   	push   ebx
c000e669:	e8 f2 fc ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e66e:	83 c4 20             	add    esp,0x20
c000e671:	6a 00                	push   0x0
c000e673:	68 b8 fc 01 c0       	push   0xc001fcb8
c000e678:	6a 36                	push   0x36
c000e67a:	53                   	push   ebx
c000e67b:	e8 e0 fc ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e680:	6a 00                	push   0x0
c000e682:	68 c2 fc 01 c0       	push   0xc001fcc2
c000e687:	6a 37                	push   0x37
c000e689:	53                   	push   ebx
c000e68a:	e8 d1 fc ff ff       	call   c000e360 <IDT::addEntry(int, void (*)(), bool)>
c000e68f:	83 c4 1c             	add    esp,0x1c
c000e692:	6a 03                	push   0x3
c000e694:	6a 02                	push   0x2
c000e696:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e69c:	e8 1f 42 00 00       	call   c00128c0 <VAS::allocatePages(int, int)>
c000e6a1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6a8:	89 c6                	mov    esi,eax
c000e6aa:	e8 b0 02 00 00       	call   c000e95f <malloc>
c000e6af:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6b5:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6b8:	89 c7                	mov    edi,eax
c000e6ba:	e8 85 32 00 00       	call   c0011944 <TSS::TSS()>
c000e6bf:	83 c4 0c             	add    esp,0xc
c000e6c2:	68 36 fa 01 c0       	push   0xc001fa36
c000e6c7:	56                   	push   esi
c000e6c8:	57                   	push   edi
c000e6c9:	e8 ba 32 00 00       	call   c0011988 <TSS::setup(unsigned long, unsigned long)>
c000e6ce:	89 c6                	mov    esi,eax
c000e6d0:	58                   	pop    eax
c000e6d1:	5a                   	pop    edx
c000e6d2:	6a 00                	push   0x0
c000e6d4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e6d8:	50                   	push   eax
c000e6d9:	e8 ce fb ff ff       	call   c000e2ac <IDTEntry::IDTEntry(bool)>
c000e6de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6e2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e6e7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e6ee:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e6f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6f8:	80 ce 05             	or     dh,0x5
c000e6fb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e6fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e706:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e709:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e70c:	e8 87 fc ff ff       	call   c000e398 <IDT::flush()>
c000e711:	83 c4 20             	add    esp,0x20
c000e714:	5b                   	pop    ebx
c000e715:	5e                   	pop    esi
c000e716:	5f                   	pop    edi
c000e717:	c3                   	ret    

c000e718 <CPU::current()>:
c000e718:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e71d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e723:	c3                   	ret    

c000e724 <operator new(unsigned long)>:
c000e724:	e9 36 02 00 00       	jmp    c000e95f <malloc>

c000e729 <operator delete(void*)>:
c000e729:	e9 51 02 00 00       	jmp    c000e97f <rfree>

c000e72e <disableIRQs()>:
c000e72e:	fa                   	cli    
c000e72f:	c3                   	ret    

c000e730 <enableIRQs()>:
c000e730:	fb                   	sti    
c000e731:	c3                   	ret    

c000e732 <lockScheduler()>:
c000e732:	fa                   	cli    
c000e733:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e739:	c3                   	ret    

c000e73a <unlockScheduler()>:
c000e73a:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e741:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e748:	75 01                	jne    c000e74b <unlockScheduler()+0x11>
c000e74a:	fb                   	sti    
c000e74b:	c3                   	ret    

c000e74c <lockStuff()>:
c000e74c:	fa                   	cli    
c000e74d:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000e753:	ff 05 ac d6 02 c0    	inc    DWORD PTR ds:0xc002d6ac
c000e759:	c3                   	ret    

c000e75a <unlockStuff()>:
c000e75a:	83 ec 0c             	sub    esp,0xc
c000e75d:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000e762:	48                   	dec    eax
c000e763:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000e768:	75 18                	jne    c000e782 <unlockStuff()+0x28>
c000e76a:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c000e771:	74 0f                	je     c000e782 <unlockStuff()+0x28>
c000e773:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000e77d:	e8 92 6f 00 00       	call   c0015714 <schedule()>
c000e782:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000e789:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e790:	75 01                	jne    c000e793 <unlockStuff()+0x39>
c000e792:	fb                   	sti    
c000e793:	83 c4 0c             	add    esp,0xc
c000e796:	c3                   	ret    

c000e797 <Virt::getAKernelVAS()>:
c000e797:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c000e79c:	c3                   	ret    

c000e79d <__not_memcpy>:
c000e79d:	57                   	push   edi
c000e79e:	56                   	push   esi
c000e79f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7ab:	89 c7                	mov    edi,eax
c000e7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7af:	5e                   	pop    esi
c000e7b0:	5f                   	pop    edi
c000e7b1:	c3                   	ret    

c000e7b2 <sbrk>:
c000e7b2:	55                   	push   ebp
c000e7b3:	57                   	push   edi
c000e7b4:	56                   	push   esi
c000e7b5:	53                   	push   ebx
c000e7b6:	83 ec 1c             	sub    esp,0x1c
c000e7b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7bd:	85 c0                	test   eax,eax
c000e7bf:	74 61                	je     c000e822 <sbrk+0x70>
c000e7c1:	78 66                	js     c000e829 <sbrk+0x77>
c000e7c3:	8b 15 f0 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf0
c000e7c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e7cd:	05 ff 0f 00 00       	add    eax,0xfff
c000e7d2:	89 c5                	mov    ebp,eax
c000e7d4:	78 6b                	js     c000e841 <sbrk+0x8f>
c000e7d6:	c1 fd 0c             	sar    ebp,0xc
c000e7d9:	bb 00 00 00 00       	mov    ebx,0x0
c000e7de:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e7e4:	8b 3d f0 4b 02 c0    	mov    edi,DWORD PTR ds:0xc0024bf0
c000e7ea:	e8 ab 06 00 00       	call   c000ee9a <Phys::allocatePage()>
c000e7ef:	68 01 04 00 00       	push   0x401
c000e7f4:	57                   	push   edi
c000e7f5:	50                   	push   eax
c000e7f6:	56                   	push   esi
c000e7f7:	e8 c0 3f 00 00       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000e7fc:	81 05 f0 4b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024bf0,0x1000
c000e806:	83 c3 01             	add    ebx,0x1
c000e809:	83 c4 10             	add    esp,0x10
c000e80c:	39 dd                	cmp    ebp,ebx
c000e80e:	75 ce                	jne    c000e7de <sbrk+0x2c>
c000e810:	0f 20 d8             	mov    eax,cr3
c000e813:	0f 22 d8             	mov    cr3,eax
c000e816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e81a:	83 c4 1c             	add    esp,0x1c
c000e81d:	5b                   	pop    ebx
c000e81e:	5e                   	pop    esi
c000e81f:	5f                   	pop    edi
c000e820:	5d                   	pop    ebp
c000e821:	c3                   	ret    
c000e822:	a1 f0 4b 02 c0       	mov    eax,ds:0xc0024bf0
c000e827:	eb f1                	jmp    c000e81a <sbrk+0x68>
c000e829:	83 ec 08             	sub    esp,0x8
c000e82c:	50                   	push   eax
c000e82d:	68 c4 25 02 c0       	push   0xc00225c4
c000e832:	e8 2d 87 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e83f:	eb d9                	jmp    c000e81a <sbrk+0x68>
c000e841:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e847:	eb 8d                	jmp    c000e7d6 <sbrk+0x24>

c000e849 <sbrk_thunk>:
c000e849:	83 ec 0c             	sub    esp,0xc
c000e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e850:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e855:	7f 10                	jg     c000e867 <sbrk_thunk+0x1e>
c000e857:	83 ec 0c             	sub    esp,0xc
c000e85a:	50                   	push   eax
c000e85b:	e8 52 ff ff ff       	call   c000e7b2 <sbrk>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	83 c4 0c             	add    esp,0xc
c000e866:	c3                   	ret    
c000e867:	83 ec 08             	sub    esp,0x8
c000e86a:	50                   	push   eax
c000e86b:	68 f4 25 02 c0       	push   0xc00225f4
c000e870:	e8 ef 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e875:	83 c4 10             	add    esp,0x10
c000e878:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e87d:	eb e4                	jmp    c000e863 <sbrk_thunk+0x1a>

c000e87f <mmap>:
c000e87f:	55                   	push   ebp
c000e880:	57                   	push   edi
c000e881:	56                   	push   esi
c000e882:	53                   	push   ebx
c000e883:	83 ec 18             	sub    esp,0x18
c000e886:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88a:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e890:	89 fb                	mov    ebx,edi
c000e892:	c1 eb 0c             	shr    ebx,0xc
c000e895:	53                   	push   ebx
c000e896:	e8 3e 38 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c000e89b:	89 c5                	mov    ebp,eax
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	85 db                	test   ebx,ebx
c000e8a2:	7e 2f                	jle    c000e8d3 <mmap+0x54>
c000e8a4:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8aa:	01 c7                	add    edi,eax
c000e8ac:	89 c3                	mov    ebx,eax
c000e8ae:	8b 35 d0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ced0
c000e8b4:	e8 e1 05 00 00       	call   c000ee9a <Phys::allocatePage()>
c000e8b9:	68 01 04 00 00       	push   0x401
c000e8be:	53                   	push   ebx
c000e8bf:	50                   	push   eax
c000e8c0:	56                   	push   esi
c000e8c1:	e8 f6 3e 00 00       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e8cc:	83 c4 10             	add    esp,0x10
c000e8cf:	39 fb                	cmp    ebx,edi
c000e8d1:	75 db                	jne    c000e8ae <mmap+0x2f>
c000e8d3:	89 e8                	mov    eax,ebp
c000e8d5:	83 c4 0c             	add    esp,0xc
c000e8d8:	5b                   	pop    ebx
c000e8d9:	5e                   	pop    esi
c000e8da:	5f                   	pop    edi
c000e8db:	5d                   	pop    ebp
c000e8dc:	c3                   	ret    

c000e8dd <munmap>:
c000e8dd:	83 ec 18             	sub    esp,0x18
c000e8e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e4:	e8 f8 3a 00 00       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e9:	b8 00 00 00 00       	mov    eax,0x0
c000e8ee:	83 c4 1c             	add    esp,0x1c
c000e8f1:	c3                   	ret    

c000e8f2 <liballoc_lock()>:
c000e8f2:	fa                   	cli    
c000e8f3:	83 05 b0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6b0,0x1
c000e8fa:	b8 00 00 00 00       	mov    eax,0x0
c000e8ff:	c3                   	ret    

c000e900 <liballoc_unlock()>:
c000e900:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000e908:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000e90f:	75 01                	jne    c000e912 <liballoc_unlock()+0x12>
c000e911:	fb                   	sti    
c000e912:	b8 00 00 00 00       	mov    eax,0x0
c000e917:	c3                   	ret    

c000e918 <liballoc_alloc(int)>:
c000e918:	83 ec 10             	sub    esp,0x10
c000e91b:	6a 01                	push   0x1
c000e91d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e921:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e927:	e8 94 3f 00 00       	call   c00128c0 <VAS::allocatePages(int, int)>
c000e92c:	83 c4 1c             	add    esp,0x1c
c000e92f:	c3                   	ret    

c000e930 <liballoc_free(void*, int)>:
c000e930:	83 ec 14             	sub    esp,0x14
c000e933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e937:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c000e93d:	e8 dc 3b 00 00       	call   c001251e <VAS::freeAllocatedPages(unsigned long)>
c000e942:	b8 00 00 00 00       	mov    eax,0x0
c000e947:	83 c4 1c             	add    esp,0x1c
c000e94a:	c3                   	ret    

c000e94b <realloc>:
c000e94b:	83 ec 14             	sub    esp,0x14
c000e94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e956:	e8 fc 2d ff ff       	call   c0001757 <dlrealloc>
c000e95b:	83 c4 1c             	add    esp,0x1c
c000e95e:	c3                   	ret    

c000e95f <malloc>:
c000e95f:	83 ec 18             	sub    esp,0x18
c000e962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e966:	e8 af 28 ff ff       	call   c000121a <dlmalloc>
c000e96b:	83 c4 1c             	add    esp,0x1c
c000e96e:	c3                   	ret    

c000e96f <free>:
c000e96f:	83 ec 18             	sub    esp,0x18
c000e972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e976:	e8 d8 23 ff ff       	call   c0000d53 <dlfree>
c000e97b:	83 c4 1c             	add    esp,0x1c
c000e97e:	c3                   	ret    

c000e97f <rfree>:
c000e97f:	83 ec 18             	sub    esp,0x18
c000e982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e986:	e8 c8 23 ff ff       	call   c0000d53 <dlfree>
c000e98b:	83 c4 1c             	add    esp,0x1c
c000e98e:	c3                   	ret    

c000e98f <calloc>:
c000e98f:	56                   	push   esi
c000e990:	53                   	push   ebx
c000e991:	83 ec 10             	sub    esp,0x10
c000e994:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e998:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e99d:	53                   	push   ebx
c000e99e:	e8 bc ff ff ff       	call   c000e95f <malloc>
c000e9a3:	89 c6                	mov    esi,eax
c000e9a5:	83 c4 0c             	add    esp,0xc
c000e9a8:	53                   	push   ebx
c000e9a9:	6a 00                	push   0x0
c000e9ab:	50                   	push   eax
c000e9ac:	e8 3f 1b ff ff       	call   c00004f0 <memset>
c000e9b1:	89 f0                	mov    eax,esi
c000e9b3:	83 c4 14             	add    esp,0x14
c000e9b6:	5b                   	pop    ebx
c000e9b7:	5e                   	pop    esi
c000e9b8:	c3                   	ret    
c000e9b9:	66 90                	xchg   ax,ax
c000e9bb:	90                   	nop

c000e9bc <KeMailboxTryPost(Mailbox*, void*)>:
c000e9bc:	83 ec 10             	sub    esp,0x10
c000e9bf:	fa                   	cli    
c000e9c0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000e9c5:	83 c0 01             	add    eax,0x1
c000e9c8:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000e9cd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9d9:	85 c0                	test   eax,eax
c000e9db:	75 23                	jne    c000ea00 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e9dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9e5:	89 10                	mov    DWORD PTR [eax],edx
c000e9e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9ee:	8d 50 01             	lea    edx,[eax+0x1]
c000e9f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9f8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9fd:	8d 76 00             	lea    esi,[esi+0x0]
c000ea00:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ea08:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea0d:	85 c0                	test   eax,eax
c000ea0f:	75 03                	jne    c000ea14 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000ea11:	fb                   	sti    
c000ea12:	66 90                	xchg   ax,ax
c000ea14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea18:	83 c4 10             	add    esp,0x10
c000ea1b:	c3                   	ret    

c000ea1c <KeMailboxTryGet(Mailbox*, void**)>:
c000ea1c:	83 ec 10             	sub    esp,0x10
c000ea1f:	fa                   	cli    
c000ea20:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea25:	83 c0 01             	add    eax,0x1
c000ea28:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000ea2d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea39:	83 f8 01             	cmp    eax,0x1
c000ea3c:	75 22                	jne    c000ea60 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea42:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea48:	89 10                	mov    DWORD PTR [eax],edx
c000ea4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea51:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea58:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea5b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea60:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000ea68:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000ea6d:	85 c0                	test   eax,eax
c000ea6f:	75 03                	jne    c000ea74 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000ea71:	fb                   	sti    
c000ea72:	66 90                	xchg   ax,ax
c000ea74:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea78:	83 c4 10             	add    esp,0x10
c000ea7b:	c3                   	ret    

c000ea7c <KeMailboxCreate()>:
c000ea7c:	83 ec 1c             	sub    esp,0x1c
c000ea7f:	83 ec 0c             	sub    esp,0xc
c000ea82:	6a 08                	push   0x8
c000ea84:	e8 d6 fe ff ff       	call   c000e95f <malloc>
c000ea89:	83 c4 10             	add    esp,0x10
c000ea8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eaa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eaa9:	83 c4 1c             	add    esp,0x1c
c000eaac:	c3                   	ret    
c000eaad:	8d 76 00             	lea    esi,[esi+0x0]

c000eab0 <KeMailboxPost(Mailbox*, void*)>:
c000eab0:	83 ec 1c             	sub    esp,0x1c
c000eab3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eabc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eac0:	e8 f7 fe ff ff       	call   c000e9bc <KeMailboxTryPost(Mailbox*, void*)>
c000eac5:	83 c4 08             	add    esp,0x8
c000eac8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eacc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ead0:	83 f0 01             	xor    eax,0x1
c000ead3:	0f b6 c0             	movzx  eax,al
c000ead6:	85 c0                	test   eax,eax
c000ead8:	74 26                	je     c000eb00 <KeMailboxPost(Mailbox*, void*)+0x50>
c000eada:	fa                   	cli    
c000eadb:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eae0:	83 c0 01             	add    eax,0x1
c000eae3:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eae8:	e8 27 6c 00 00       	call   c0015714 <schedule()>
c000eaed:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eaf5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eafa:	85 c0                	test   eax,eax
c000eafc:	75 02                	jne    c000eb00 <KeMailboxPost(Mailbox*, void*)+0x50>
c000eafe:	fb                   	sti    
c000eaff:	90                   	nop
c000eb00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb05:	85 c0                	test   eax,eax
c000eb07:	75 03                	jne    c000eb0c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000eb09:	eb ad                	jmp    c000eab8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb0b:	90                   	nop
c000eb0c:	90                   	nop
c000eb0d:	83 c4 1c             	add    esp,0x1c
c000eb10:	c3                   	ret    
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]

c000eb14 <KeMailboxGet(Mailbox*, void**)>:
c000eb14:	83 ec 1c             	sub    esp,0x1c
c000eb17:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb24:	e8 f3 fe ff ff       	call   c000ea1c <KeMailboxTryGet(Mailbox*, void**)>
c000eb29:	83 c4 08             	add    esp,0x8
c000eb2c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb30:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb34:	83 f0 01             	xor    eax,0x1
c000eb37:	0f b6 c0             	movzx  eax,al
c000eb3a:	85 c0                	test   eax,eax
c000eb3c:	74 26                	je     c000eb64 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb3e:	fa                   	cli    
c000eb3f:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb44:	83 c0 01             	add    eax,0x1
c000eb47:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000eb4c:	e8 c3 6b 00 00       	call   c0015714 <schedule()>
c000eb51:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000eb59:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000eb5e:	85 c0                	test   eax,eax
c000eb60:	75 02                	jne    c000eb64 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eb62:	fb                   	sti    
c000eb63:	90                   	nop
c000eb64:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb69:	85 c0                	test   eax,eax
c000eb6b:	75 03                	jne    c000eb70 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eb6d:	eb ad                	jmp    c000eb1c <KeMailboxGet(Mailbox*, void**)+0x8>
c000eb6f:	90                   	nop
c000eb70:	90                   	nop
c000eb71:	83 c4 1c             	add    esp,0x1c
c000eb74:	c3                   	ret    
c000eb75:	8d 76 00             	lea    esi,[esi+0x0]

c000eb78 <KeMailboxDestroy(Mailbox*)>:
c000eb78:	83 ec 0c             	sub    esp,0xc
c000eb7b:	83 ec 0c             	sub    esp,0xc
c000eb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb82:	e8 e8 fd ff ff       	call   c000e96f <free>
c000eb87:	83 c4 10             	add    esp,0x10
c000eb8a:	90                   	nop
c000eb8b:	83 c4 0c             	add    esp,0xc
c000eb8e:	c3                   	ret    

c000eb8f <KeEntryPoint>:
c000eb8f:	57                   	push   edi
c000eb90:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb95:	56                   	push   esi
c000eb96:	89 fa                	mov    edx,edi
c000eb98:	53                   	push   ebx
c000eb99:	31 f6                	xor    esi,esi
c000eb9b:	83 ec 2c             	sub    esp,0x2c
c000eb9e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eba3:	a3 90 cd 02 c0       	mov    ds:0xc002cd90,eax
c000eba8:	89 f0                	mov    eax,esi
c000ebaa:	ee                   	out    dx,al
c000ebab:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebb0:	b0 80                	mov    al,0x80
c000ebb2:	89 da                	mov    edx,ebx
c000ebb4:	ee                   	out    dx,al
c000ebb5:	b1 03                	mov    cl,0x3
c000ebb7:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebbc:	88 c8                	mov    al,cl
c000ebbe:	ee                   	out    dx,al
c000ebbf:	89 f0                	mov    eax,esi
c000ebc1:	89 fa                	mov    edx,edi
c000ebc3:	ee                   	out    dx,al
c000ebc4:	88 c8                	mov    al,cl
c000ebc6:	89 da                	mov    edx,ebx
c000ebc8:	ee                   	out    dx,al
c000ebc9:	b0 c7                	mov    al,0xc7
c000ebcb:	ba fa 03 00 00       	mov    edx,0x3fa
c000ebd0:	ee                   	out    dx,al
c000ebd1:	b0 0b                	mov    al,0xb
c000ebd3:	ba fc 03 00 00       	mov    edx,0x3fc
c000ebd8:	ee                   	out    dx,al
c000ebd9:	68 03 26 02 c0       	push   0xc0022603
c000ebde:	e8 81 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebe3:	e8 ed d9 ff ff       	call   c000c5d5 <KeDisplaySplashScreen()>
c000ebe8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ebed:	05 ff 0f 00 00       	add    eax,0xfff
c000ebf2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ebf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebfa:	e8 2c 04 00 00       	call   c000f02b <Phys::physicalMemorySetup(unsigned int)>
c000ebff:	e8 b3 36 00 00       	call   c00122b7 <Virt::virtualMemorySetup()>
c000ec04:	e8 16 d9 ff ff       	call   c000c51f <KeInitialiseAtexit()>
c000ec09:	c7 04 24 1a 26 02 c0 	mov    DWORD PTR [esp],0xc002261a
c000ec10:	e8 4f 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec15:	58                   	pop    eax
c000ec16:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec1a:	53                   	push   ebx
c000ec1b:	e8 7e 39 00 00       	call   c001259e <VAS::VAS()>
c000ec20:	c7 04 24 2a 26 02 c0 	mov    DWORD PTR [esp],0xc002262a
c000ec27:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c000ec2d:	e8 32 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec32:	e8 47 16 01 00       	call   c002027e <_init>
c000ec37:	c7 04 24 3e 26 02 c0 	mov    DWORD PTR [esp],0xc002263e
c000ec3e:	e8 21 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec43:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec4a:	e8 10 fd ff ff       	call   c000e95f <malloc>
c000ec4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec52:	89 c6                	mov    esi,eax
c000ec54:	e8 43 ea ff ff       	call   c000d69c <Computer::Computer()>
c000ec59:	5a                   	pop    edx
c000ec5a:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000ec60:	59                   	pop    ecx
c000ec61:	56                   	push   esi
c000ec62:	68 4d 26 02 c0       	push   0xc002264d
c000ec67:	e8 f8 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec6c:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	53                   	push   ebx
c000ec74:	6a 00                	push   0x0
c000ec76:	6a 00                	push   0x0
c000ec78:	50                   	push   eax
c000ec79:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7c:	83 c4 14             	add    esp,0x14
c000ec7f:	53                   	push   ebx
c000ec80:	e8 cf 39 00 00       	call   c0012654 <VAS::~VAS()>
c000ec85:	83 c4 30             	add    esp,0x30
c000ec88:	5b                   	pop    ebx
c000ec89:	5e                   	pop    esi
c000ec8a:	5f                   	pop    edi
c000ec8b:	c3                   	ret    

c000ec8c <Mutex::Mutex()>:
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec93:	83 ec 08             	sub    esp,0x8
c000ec96:	6a 01                	push   0x1
c000ec98:	50                   	push   eax
c000ec99:	e8 56 0c 00 00       	call   c000f8f4 <Semaphore::Semaphore(int)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	90                   	nop
c000eca2:	83 c4 0c             	add    esp,0xc
c000eca5:	c3                   	ret    

c000eca6 <KePanic(char const*)>:
c000eca6:	c6 05 94 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd94,0x1
c000ecad:	e9 0b 9a 00 00       	jmp    c00186bd <HalPanic(char const*)>

c000ecb2 <Phys::allocateDMA(unsigned long)>:
c000ecb2:	55                   	push   ebp
c000ecb3:	31 ed                	xor    ebp,ebp
c000ecb5:	57                   	push   edi
c000ecb6:	56                   	push   esi
c000ecb7:	53                   	push   ebx
c000ecb8:	31 db                	xor    ebx,ebx
c000ecba:	83 ec 1c             	sub    esp,0x1c
c000ecbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ecc9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000eccf:	31 c0                	xor    eax,eax
c000ecd1:	c1 ef 0c             	shr    edi,0xc
c000ecd4:	eb 1b                	jmp    c000ecf1 <Phys::allocateDMA(unsigned long)+0x3f>
c000ecd6:	85 c0                	test   eax,eax
c000ecd8:	75 06                	jne    c000ece0 <Phys::allocateDMA(unsigned long)+0x2e>
c000ecda:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ecde:	89 dd                	mov    ebp,ebx
c000ece0:	8d 70 01             	lea    esi,[eax+0x1]
c000ece3:	39 f7                	cmp    edi,esi
c000ece5:	74 37                	je     c000ed1e <Phys::allocateDMA(unsigned long)+0x6c>
c000ece7:	89 f0                	mov    eax,esi
c000ece9:	83 c3 01             	add    ebx,0x1
c000ecec:	83 fb 0f             	cmp    ebx,0xf
c000ecef:	7f 13                	jg     c000ed04 <Phys::allocateDMA(unsigned long)+0x52>
c000ecf1:	80 bb b0 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd3250],0x0
c000ecf8:	74 dc                	je     c000ecd6 <Phys::allocateDMA(unsigned long)+0x24>
c000ecfa:	31 c0                	xor    eax,eax
c000ecfc:	83 c3 01             	add    ebx,0x1
c000ecff:	83 fb 0f             	cmp    ebx,0xf
c000ed02:	7e ed                	jle    c000ecf1 <Phys::allocateDMA(unsigned long)+0x3f>
c000ed04:	83 ec 0c             	sub    esp,0xc
c000ed07:	68 64 26 02 c0       	push   0xc0022664
c000ed0c:	e8 95 ff ff ff       	call   c000eca6 <KePanic(char const*)>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	31 c0                	xor    eax,eax
c000ed16:	83 c4 1c             	add    esp,0x1c
c000ed19:	5b                   	pop    ebx
c000ed1a:	5e                   	pop    esi
c000ed1b:	5f                   	pop    edi
c000ed1c:	5d                   	pop    ebp
c000ed1d:	c3                   	ret    
c000ed1e:	89 e9                	mov    ecx,ebp
c000ed20:	c1 f9 04             	sar    ecx,0x4
c000ed23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed27:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ed2b:	89 ca                	mov    edx,ecx
c000ed2d:	83 ea 01             	sub    edx,0x1
c000ed30:	79 03                	jns    c000ed35 <Phys::allocateDMA(unsigned long)+0x83>
c000ed32:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed35:	c1 fa 04             	sar    edx,0x4
c000ed38:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ed3c:	74 08                	je     c000ed46 <Phys::allocateDMA(unsigned long)+0x94>
c000ed3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed42:	31 c0                	xor    eax,eax
c000ed44:	eb b6                	jmp    c000ecfc <Phys::allocateDMA(unsigned long)+0x4a>
c000ed46:	85 f6                	test   esi,esi
c000ed48:	74 17                	je     c000ed61 <Phys::allocateDMA(unsigned long)+0xaf>
c000ed4a:	8d 95 b0 cd 02 c0    	lea    edx,[ebp-0x3ffd3250]
c000ed50:	8d 84 05 b1 cd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd324f]
c000ed57:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed5a:	83 c2 01             	add    edx,0x1
c000ed5d:	39 d0                	cmp    eax,edx
c000ed5f:	75 f6                	jne    c000ed57 <Phys::allocateDMA(unsigned long)+0xa5>
c000ed61:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ed66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed6a:	01 f8                	add    eax,edi
c000ed6c:	85 d2                	test   edx,edx
c000ed6e:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ed73:	74 17                	je     c000ed8c <Phys::allocateDMA(unsigned long)+0xda>
c000ed75:	83 ec 0c             	sub    esp,0xc
c000ed78:	68 64 26 02 c0       	push   0xc0022664
c000ed7d:	e8 24 ff ff ff       	call   c000eca6 <KePanic(char const*)>
c000ed82:	83 c4 10             	add    esp,0x10
c000ed85:	89 f0                	mov    eax,esi
c000ed87:	e9 5d ff ff ff       	jmp    c000ece9 <Phys::allocateDMA(unsigned long)+0x37>
c000ed8c:	c1 e5 0c             	shl    ebp,0xc
c000ed8f:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000ed95:	e9 7c ff ff ff       	jmp    c000ed16 <Phys::allocateDMA(unsigned long)+0x64>

c000ed9a <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed9e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000eda4:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000eda9:	c1 ea 0c             	shr    edx,0xc
c000edac:	29 d0                	sub    eax,edx
c000edae:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000edb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edb7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000edbc:	c1 e8 0c             	shr    eax,0xc
c000edbf:	85 d2                	test   edx,edx
c000edc1:	74 11                	je     c000edd4 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000edc3:	05 b0 cd 02 c0       	add    eax,0xc002cdb0
c000edc8:	01 c2                	add    edx,eax
c000edca:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000edcd:	83 c0 01             	add    eax,0x1
c000edd0:	39 d0                	cmp    eax,edx
c000edd2:	75 f6                	jne    c000edca <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000edd4:	c3                   	ret    

c000edd5 <Phys::setPageState(unsigned long, bool)>:
c000edd5:	57                   	push   edi
c000edd6:	56                   	push   esi
c000edd7:	8b 35 f4 4b 02 c0    	mov    esi,DWORD PTR ds:0xc0024bf4
c000eddd:	53                   	push   ebx
c000edde:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ede3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ede7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000edeb:	0f b6 c0             	movzx  eax,al
c000edee:	89 ca                	mov    edx,ecx
c000edf0:	83 e1 07             	and    ecx,0x7
c000edf3:	c1 ea 03             	shr    edx,0x3
c000edf6:	d3 c3                	rol    ebx,cl
c000edf8:	01 d6                	add    esi,edx
c000edfa:	d3 e0                	shl    eax,cl
c000edfc:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000edff:	21 fb                	and    ebx,edi
c000ee01:	88 1e                	mov    BYTE PTR [esi],bl
c000ee03:	8b 1d f4 4b 02 c0    	mov    ebx,DWORD PTR ds:0xc0024bf4
c000ee09:	01 da                	add    edx,ebx
c000ee0b:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee0d:	09 c8                	or     eax,ecx
c000ee0f:	88 02                	mov    BYTE PTR [edx],al
c000ee11:	5b                   	pop    ebx
c000ee12:	5e                   	pop    esi
c000ee13:	5f                   	pop    edi
c000ee14:	c3                   	ret    

c000ee15 <Phys::getPageState(unsigned long)>:
c000ee15:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee19:	8b 15 f4 4b 02 c0    	mov    edx,DWORD PTR ds:0xc0024bf4
c000ee1f:	89 c8                	mov    eax,ecx
c000ee21:	83 e1 07             	and    ecx,0x7
c000ee24:	c1 e8 03             	shr    eax,0x3
c000ee27:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee2b:	d3 f8                	sar    eax,cl
c000ee2d:	83 e0 01             	and    eax,0x1
c000ee30:	c3                   	ret    

c000ee31 <Phys::freePage(unsigned long)>:
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 08             	sub    esp,0x8
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee45:	76 41                	jbe    c000ee88 <Phys::freePage(unsigned long)+0x57>
c000ee47:	c1 e8 0c             	shr    eax,0xc
c000ee4a:	50                   	push   eax
c000ee4b:	89 c3                	mov    ebx,eax
c000ee4d:	e8 c3 ff ff ff       	call   c000ee15 <Phys::getPageState(unsigned long)>
c000ee52:	5a                   	pop    edx
c000ee53:	84 c0                	test   al,al
c000ee55:	74 20                	je     c000ee77 <Phys::freePage(unsigned long)+0x46>
c000ee57:	83 ec 08             	sub    esp,0x8
c000ee5a:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000ee5f:	6a 00                	push   0x0
c000ee61:	83 e8 01             	sub    eax,0x1
c000ee64:	53                   	push   ebx
c000ee65:	a3 a8 cd 02 c0       	mov    ds:0xc002cda8,eax
c000ee6a:	e8 66 ff ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000ee6f:	83 c4 10             	add    esp,0x10
c000ee72:	83 c4 08             	add    esp,0x8
c000ee75:	5b                   	pop    ebx
c000ee76:	c3                   	ret    
c000ee77:	c7 44 24 10 69 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022769
c000ee7f:	83 c4 08             	add    esp,0x8
c000ee82:	5b                   	pop    ebx
c000ee83:	e9 1e fe ff ff       	jmp    c000eca6 <KePanic(char const*)>
c000ee88:	68 00 10 00 00       	push   0x1000
c000ee8d:	50                   	push   eax
c000ee8e:	e8 07 ff ff ff       	call   c000ed9a <Phys::freeDMA(unsigned long, unsigned long)>
c000ee93:	59                   	pop    ecx
c000ee94:	5b                   	pop    ebx
c000ee95:	83 c4 08             	add    esp,0x8
c000ee98:	5b                   	pop    ebx
c000ee99:	c3                   	ret    

c000ee9a <Phys::allocatePage()>:
c000ee9a:	56                   	push   esi
c000ee9b:	53                   	push   ebx
c000ee9c:	83 ec 14             	sub    esp,0x14
c000ee9f:	8b 35 9c cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd9c
c000eea5:	89 f3                	mov    ebx,esi
c000eea7:	eb 0a                	jmp    c000eeb3 <Phys::allocatePage()+0x19>
c000eea9:	89 1d 9c cd 02 c0    	mov    DWORD PTR ds:0xc002cd9c,ebx
c000eeaf:	39 de                	cmp    esi,ebx
c000eeb1:	74 26                	je     c000eed9 <Phys::allocatePage()+0x3f>
c000eeb3:	53                   	push   ebx
c000eeb4:	e8 5c ff ff ff       	call   c000ee15 <Phys::getPageState(unsigned long)>
c000eeb9:	59                   	pop    ecx
c000eeba:	84 c0                	test   al,al
c000eebc:	74 67                	je     c000ef25 <Phys::allocatePage()+0x8b>
c000eebe:	83 c3 01             	add    ebx,0x1
c000eec1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eec7:	75 e0                	jne    c000eea9 <Phys::allocatePage()+0xf>
c000eec9:	31 db                	xor    ebx,ebx
c000eecb:	c7 05 9c cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd9c,0x0
c000eed5:	39 de                	cmp    esi,ebx
c000eed7:	75 da                	jne    c000eeb3 <Phys::allocatePage()+0x19>
c000eed9:	83 ec 0c             	sub    esp,0xc
c000eedc:	a0 c0 cd 02 c0       	mov    al,ds:0xc002cdc0
c000eee1:	83 f0 01             	xor    eax,0x1
c000eee4:	a2 c0 cd 02 c0       	mov    ds:0xc002cdc0,al
c000eee9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eeee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eef1:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000eef7:	51                   	push   ecx
c000eef8:	e8 93 42 00 00       	call   c0013190 <VAS::scanForEviction()>
c000eefd:	83 c4 10             	add    esp,0x10
c000ef00:	85 c0                	test   eax,eax
c000ef02:	75 48                	jne    c000ef4c <Phys::allocatePage()+0xb2>
c000ef04:	83 ec 0c             	sub    esp,0xc
c000ef07:	68 8c 26 02 c0       	push   0xc002268c
c000ef0c:	e8 95 fd ff ff       	call   c000eca6 <KePanic(char const*)>
c000ef11:	83 c4 10             	add    esp,0x10
c000ef14:	8b 1d 9c cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd9c
c000ef1a:	53                   	push   ebx
c000ef1b:	e8 f5 fe ff ff       	call   c000ee15 <Phys::getPageState(unsigned long)>
c000ef20:	59                   	pop    ecx
c000ef21:	84 c0                	test   al,al
c000ef23:	75 99                	jne    c000eebe <Phys::allocatePage()+0x24>
c000ef25:	6a 01                	push   0x1
c000ef27:	53                   	push   ebx
c000ef28:	e8 a8 fe ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000ef2d:	8b 1d a8 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cda8
c000ef33:	a1 9c cd 02 c0       	mov    eax,ds:0xc002cd9c
c000ef38:	83 c3 01             	add    ebx,0x1
c000ef3b:	5e                   	pop    esi
c000ef3c:	89 1d a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,ebx
c000ef42:	c1 e0 0c             	shl    eax,0xc
c000ef45:	5a                   	pop    edx
c000ef46:	83 c4 14             	add    esp,0x14
c000ef49:	5b                   	pop    ebx
c000ef4a:	5e                   	pop    esi
c000ef4b:	c3                   	ret    
c000ef4c:	83 ec 08             	sub    esp,0x8
c000ef4f:	8b 15 a8 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cda8
c000ef55:	6a 01                	push   0x1
c000ef57:	83 c2 01             	add    edx,0x1
c000ef5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef5e:	89 15 a8 cd 02 c0    	mov    DWORD PTR ds:0xc002cda8,edx
c000ef64:	89 c2                	mov    edx,eax
c000ef66:	c1 ea 0c             	shr    edx,0xc
c000ef69:	52                   	push   edx
c000ef6a:	e8 66 fe ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef76:	eb ce                	jmp    c000ef46 <Phys::allocatePage()+0xac>

c000ef78 <Phys::allocateContiguousPages(int)>:
c000ef78:	57                   	push   edi
c000ef79:	56                   	push   esi
c000ef7a:	53                   	push   ebx
c000ef7b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ef7f:	fa                   	cli    
c000ef80:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c000ef86:	83 ec 0c             	sub    esp,0xc
c000ef89:	83 c2 01             	add    edx,0x1
c000ef8c:	68 bc 26 02 c0       	push   0xc00226bc
c000ef91:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c000ef97:	31 db                	xor    ebx,ebx
c000ef99:	e8 c6 7f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	85 db                	test   ebx,ebx
c000efa3:	75 11                	jne    c000efb6 <Phys::allocateContiguousPages(int)+0x3e>
c000efa5:	e8 f0 fe ff ff       	call   c000ee9a <Phys::allocatePage()>
c000efaa:	83 ff 01             	cmp    edi,0x1
c000efad:	89 c6                	mov    esi,eax
c000efaf:	74 21                	je     c000efd2 <Phys::allocateContiguousPages(int)+0x5a>
c000efb1:	bb 01 00 00 00       	mov    ebx,0x1
c000efb6:	e8 df fe ff ff       	call   c000ee9a <Phys::allocatePage()>
c000efbb:	89 da                	mov    edx,ebx
c000efbd:	c1 e2 0c             	shl    edx,0xc
c000efc0:	01 f2                	add    edx,esi
c000efc2:	39 c2                	cmp    edx,eax
c000efc4:	74 24                	je     c000efea <Phys::allocateContiguousPages(int)+0x72>
c000efc6:	bb 01 00 00 00       	mov    ebx,0x1
c000efcb:	89 c6                	mov    esi,eax
c000efcd:	83 ff 01             	cmp    edi,0x1
c000efd0:	75 e4                	jne    c000efb6 <Phys::allocateContiguousPages(int)+0x3e>
c000efd2:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000efda:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000efdf:	85 c0                	test   eax,eax
c000efe1:	75 01                	jne    c000efe4 <Phys::allocateContiguousPages(int)+0x6c>
c000efe3:	fb                   	sti    
c000efe4:	89 f0                	mov    eax,esi
c000efe6:	5b                   	pop    ebx
c000efe7:	5e                   	pop    esi
c000efe8:	5f                   	pop    edi
c000efe9:	c3                   	ret    
c000efea:	83 c3 01             	add    ebx,0x1
c000efed:	39 fb                	cmp    ebx,edi
c000efef:	75 b0                	jne    c000efa1 <Phys::allocateContiguousPages(int)+0x29>
c000eff1:	eb df                	jmp    c000efd2 <Phys::allocateContiguousPages(int)+0x5a>

c000eff3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000eff3:	56                   	push   esi
c000eff4:	53                   	push   ebx
c000eff5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eff9:	39 1d a0 cd 02 c0    	cmp    DWORD PTR ds:0xc002cda0,ebx
c000efff:	73 06                	jae    c000f007 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f001:	89 1d a0 cd 02 c0    	mov    DWORD PTR ds:0xc002cda0,ebx
c000f007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f00b:	c1 eb 0c             	shr    ebx,0xc
c000f00e:	c1 e8 0c             	shr    eax,0xc
c000f011:	39 d8                	cmp    eax,ebx
c000f013:	73 13                	jae    c000f028 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f015:	6a 00                	push   0x0
c000f017:	8d 70 01             	lea    esi,[eax+0x1]
c000f01a:	50                   	push   eax
c000f01b:	e8 b5 fd ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f020:	5a                   	pop    edx
c000f021:	89 f0                	mov    eax,esi
c000f023:	59                   	pop    ecx
c000f024:	39 f3                	cmp    ebx,esi
c000f026:	75 ed                	jne    c000f015 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f028:	5b                   	pop    ebx
c000f029:	5e                   	pop    esi
c000f02a:	c3                   	ret    

c000f02b <Phys::physicalMemorySetup(unsigned int)>:
c000f02b:	55                   	push   ebp
c000f02c:	57                   	push   edi
c000f02d:	56                   	push   esi
c000f02e:	53                   	push   ebx
c000f02f:	83 ec 40             	sub    esp,0x40
c000f032:	6a 10                	push   0x10
c000f034:	6a 00                	push   0x0
c000f036:	68 b0 cd 02 c0       	push   0xc002cdb0
c000f03b:	e8 b0 14 ff ff       	call   c00004f0 <memset>
c000f040:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f044:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f049:	05 00 10 00 00       	add    eax,0x1000
c000f04e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f052:	5b                   	pop    ebx
c000f053:	31 db                	xor    ebx,ebx
c000f055:	5e                   	pop    esi
c000f056:	50                   	push   eax
c000f057:	68 7f 27 02 c0       	push   0xc002277f
c000f05c:	e8 03 7f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f061:	83 c4 10             	add    esp,0x10
c000f064:	83 ec 08             	sub    esp,0x8
c000f067:	6a 01                	push   0x1
c000f069:	53                   	push   ebx
c000f06a:	83 c3 01             	add    ebx,0x1
c000f06d:	e8 63 fd ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f072:	83 c4 10             	add    esp,0x10
c000f075:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f07b:	75 e7                	jne    c000f064 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f07d:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f084:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f08b:	c1 e0 08             	shl    eax,0x8
c000f08e:	09 c2                	or     edx,eax
c000f090:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f094:	0f 84 98 01 00 00    	je     c000f232 <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f09a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f09e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0a6:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0af:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f0b7:	eb 1c                	jmp    c000f0d5 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f0b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0bd:	83 c3 18             	add    ebx,0x18
c000f0c0:	83 c6 01             	add    esi,0x1
c000f0c3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f0c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0cb:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f0cf:	0f 84 6d 01 00 00    	je     c000f242 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f0d5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0d8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0db:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0e6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0e8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0eb:	01 f0                	add    eax,esi
c000f0ed:	55                   	push   ebp
c000f0ee:	11 fa                	adc    edx,edi
c000f0f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0fc:	51                   	push   ecx
c000f0fd:	56                   	push   esi
c000f0fe:	68 1c 27 02 c0       	push   0xc002271c
c000f103:	e8 5c 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f108:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f10c:	83 c4 10             	add    esp,0x10
c000f10f:	09 f8                	or     eax,edi
c000f111:	0f 85 2b 01 00 00    	jne    c000f242 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f117:	83 fd 01             	cmp    ebp,0x1
c000f11a:	75 9d                	jne    c000f0b9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f11c:	ba 00 00 08 00       	mov    edx,0x80000
c000f121:	89 c1                	mov    ecx,eax
c000f123:	39 f2                	cmp    edx,esi
c000f125:	19 f9                	sbb    ecx,edi
c000f127:	0f 82 ab 00 00 00    	jb     c000f1d8 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f12d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f131:	89 c1                	mov    ecx,eax
c000f133:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f137:	0f 83 9b 00 00 00    	jae    c000f1d8 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f13d:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f142:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f146:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f14a:	39 fa                	cmp    edx,edi
c000f14c:	19 e8                	sbb    eax,ebp
c000f14e:	0f 82 b0 01 00 00    	jb     c000f304 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f154:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f158:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f15c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f162:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f167:	83 d5 ff             	adc    ebp,0xffffffff
c000f16a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f16e:	31 c0                	xor    eax,eax
c000f170:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f174:	39 fa                	cmp    edx,edi
c000f176:	89 c1                	mov    ecx,eax
c000f178:	19 e9                	sbb    ecx,ebp
c000f17a:	0f 83 39 ff ff ff    	jae    c000f0b9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f180:	be 00 00 08 00       	mov    esi,0x80000
c000f185:	83 ec 04             	sub    esp,0x4
c000f188:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f18c:	57                   	push   edi
c000f18d:	56                   	push   esi
c000f18e:	68 40 27 02 c0       	push   0xc0022740
c000f193:	e8 cc 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f198:	5d                   	pop    ebp
c000f199:	58                   	pop    eax
c000f19a:	57                   	push   edi
c000f19b:	56                   	push   esi
c000f19c:	e8 52 fe ff ff       	call   c000eff3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f1a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1a9:	83 c4 0c             	add    esp,0xc
c000f1ac:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f1b0:	8b 15 ac cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cdac
c000f1b6:	01 d0                	add    eax,edx
c000f1b8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1bf:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f1c4:	52                   	push   edx
c000f1c5:	50                   	push   eax
c000f1c6:	68 a5 27 02 c0       	push   0xc00227a5
c000f1cb:	e8 94 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1d0:	83 c4 10             	add    esp,0x10
c000f1d3:	e9 e1 fe ff ff       	jmp    c000f0b9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1d8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f1dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1e4:	39 ea                	cmp    edx,ebp
c000f1e6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f1ea:	0f 82 c9 fe ff ff    	jb     c000f0b9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1f0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f1f5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f1f9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f1fd:	0f 83 b6 fe ff ff    	jae    c000f0b9 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f203:	39 ee                	cmp    esi,ebp
c000f205:	89 f8                	mov    eax,edi
c000f207:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f20b:	0f 83 74 ff ff ff    	jae    c000f185 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f211:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f219:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f21d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f221:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f229:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f22d:	e9 53 ff ff ff       	jmp    c000f185 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f232:	83 ec 0c             	sub    esp,0xc
c000f235:	68 97 27 02 c0       	push   0xc0022797
c000f23a:	e8 67 fa ff ff       	call   c000eca6 <KePanic(char const*)>
c000f23f:	83 c4 10             	add    esp,0x10
c000f242:	83 ec 08             	sub    esp,0x8
c000f245:	bb 60 00 00 00       	mov    ebx,0x60
c000f24a:	6a 00                	push   0x0
c000f24c:	6a 06                	push   0x6
c000f24e:	e8 82 fb ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f253:	58                   	pop    eax
c000f254:	5a                   	pop    edx
c000f255:	6a 00                	push   0x0
c000f257:	6a 07                	push   0x7
c000f259:	e8 77 fb ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f25e:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c000f264:	83 c4 10             	add    esp,0x10
c000f267:	83 c1 02             	add    ecx,0x2
c000f26a:	89 0d ac cd 02 c0    	mov    DWORD PTR ds:0xc002cdac,ecx
c000f270:	83 ec 08             	sub    esp,0x8
c000f273:	6a 00                	push   0x0
c000f275:	53                   	push   ebx
c000f276:	83 c3 01             	add    ebx,0x1
c000f279:	e8 57 fb ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f27e:	83 c4 10             	add    esp,0x10
c000f281:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f287:	75 e7                	jne    c000f270 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f289:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f28e:	bb 40 01 00 00       	mov    ebx,0x140
c000f293:	83 c0 20             	add    eax,0x20
c000f296:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f29b:	eb 26                	jmp    c000f2c3 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f29d:	83 ec 08             	sub    esp,0x8
c000f2a0:	6a 00                	push   0x0
c000f2a2:	53                   	push   ebx
c000f2a3:	83 c3 01             	add    ebx,0x1
c000f2a6:	e8 2a fb ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f2ab:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f2b0:	83 c4 10             	add    esp,0x10
c000f2b3:	83 c0 01             	add    eax,0x1
c000f2b6:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2bc:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f2c1:	74 07                	je     c000f2ca <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f2c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2c8:	7e d3                	jle    c000f29d <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f2ca:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2cf:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2d4:	7f 26                	jg     c000f2fc <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f2d6:	83 ec 08             	sub    esp,0x8
c000f2d9:	6a 00                	push   0x0
c000f2db:	53                   	push   ebx
c000f2dc:	83 c3 01             	add    ebx,0x1
c000f2df:	e8 f1 fa ff ff       	call   c000edd5 <Phys::setPageState(unsigned long, bool)>
c000f2e4:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	83 c0 01             	add    eax,0x1
c000f2ef:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f2f5:	a3 ac cd 02 c0       	mov    ds:0xc002cdac,eax
c000f2fa:	75 d3                	jne    c000f2cf <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f2fc:	83 c4 3c             	add    esp,0x3c
c000f2ff:	5b                   	pop    ebx
c000f300:	5e                   	pop    esi
c000f301:	5f                   	pop    edi
c000f302:	5d                   	pop    ebp
c000f303:	c3                   	ret    
c000f304:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f30c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f314:	e9 3b fe ff ff       	jmp    c000f154 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000f319:	90                   	nop

c000f31a <Pipe::isAtty()>:
c000f31a:	31 c0                	xor    eax,eax
c000f31c:	c3                   	ret    
c000f31d:	90                   	nop

c000f31e <Pipe::~Pipe()>:
c000f31e:	83 ec 0c             	sub    esp,0xc
c000f321:	ba 04 28 02 c0       	mov    edx,0xc0022804
c000f326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32a:	89 10                	mov    DWORD PTR [eax],edx
c000f32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f330:	83 ec 0c             	sub    esp,0xc
c000f333:	50                   	push   eax
c000f334:	e8 ed 2a 00 00       	call   c0011e26 <UnixFile::~UnixFile()>
c000f339:	83 c4 10             	add    esp,0x10
c000f33c:	90                   	nop
c000f33d:	83 c4 0c             	add    esp,0xc
c000f340:	c3                   	ret    
c000f341:	90                   	nop

c000f342 <Pipe::~Pipe()>:
c000f342:	83 ec 0c             	sub    esp,0xc
c000f345:	83 ec 0c             	sub    esp,0xc
c000f348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f34c:	e8 cd ff ff ff       	call   c000f31e <Pipe::~Pipe()>
c000f351:	83 c4 10             	add    esp,0x10
c000f354:	83 ec 08             	sub    esp,0x8
c000f357:	6a 20                	push   0x20
c000f359:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f35d:	e8 62 d3 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c000f362:	83 c4 10             	add    esp,0x10
c000f365:	83 c4 0c             	add    esp,0xc
c000f368:	c3                   	ret    
c000f369:	90                   	nop

c000f36a <Pipe::write(unsigned long long, void*, int*)>:
c000f36a:	55                   	push   ebp
c000f36b:	57                   	push   edi
c000f36c:	56                   	push   esi
c000f36d:	53                   	push   ebx
c000f36e:	83 ec 1c             	sub    esp,0x1c
c000f371:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f375:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f379:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f37c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f380:	89 04 24             	mov    DWORD PTR [esp],eax
c000f383:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f387:	89 d8                	mov    eax,ebx
c000f389:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f38c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f390:	89 d6                	mov    esi,edx
c000f392:	89 d7                	mov    edi,edx
c000f394:	c1 ff 1f             	sar    edi,0x1f
c000f397:	03 34 24             	add    esi,DWORD PTR [esp]
c000f39a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f39e:	c1 f8 1f             	sar    eax,0x1f
c000f3a1:	39 f3                	cmp    ebx,esi
c000f3a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3ab:	19 f8                	sbb    eax,edi
c000f3ad:	b8 01 00 00 00       	mov    eax,0x1
c000f3b2:	72 6e                	jb     c000f422 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f3b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3b7:	01 d0                	add    eax,edx
c000f3b9:	99                   	cdq    
c000f3ba:	f7 fb                	idiv   ebx
c000f3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3c0:	29 d3                	sub    ebx,edx
c000f3c2:	89 d7                	mov    edi,edx
c000f3c4:	89 de                	mov    esi,ebx
c000f3c6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f3c9:	c1 fb 1f             	sar    ebx,0x1f
c000f3cc:	39 f2                	cmp    edx,esi
c000f3ce:	19 d8                	sbb    eax,ebx
c000f3d0:	b8 00 00 00 00       	mov    eax,0x0
c000f3d5:	72 04                	jb     c000f3db <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f3d7:	89 d0                	mov    eax,edx
c000f3d9:	29 f0                	sub    eax,esi
c000f3db:	89 d3                	mov    ebx,edx
c000f3dd:	29 c3                	sub    ebx,eax
c000f3df:	74 0b                	je     c000f3ec <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f3e1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f3e4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f3e8:	89 d9                	mov    ecx,ebx
c000f3ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3ec:	85 c0                	test   eax,eax
c000f3ee:	74 0d                	je     c000f3fd <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f3f0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f3f4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f3f7:	89 de                	mov    esi,ebx
c000f3f9:	89 c1                	mov    ecx,eax
c000f3fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3fd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f400:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f405:	75 10                	jne    c000f417 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f407:	83 ec 0c             	sub    esp,0xc
c000f40a:	68 c1 27 02 c0       	push   0xc00227c1
c000f40f:	e8 92 f8 ff ff       	call   c000eca6 <KePanic(char const*)>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f41b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f41e:	89 08                	mov    DWORD PTR [eax],ecx
c000f420:	31 c0                	xor    eax,eax
c000f422:	83 c4 1c             	add    esp,0x1c
c000f425:	5b                   	pop    ebx
c000f426:	5e                   	pop    esi
c000f427:	5f                   	pop    edi
c000f428:	5d                   	pop    ebp
c000f429:	c3                   	ret    

c000f42a <Pipe::read(unsigned long long, void*, int*)>:
c000f42a:	55                   	push   ebp
c000f42b:	57                   	push   edi
c000f42c:	56                   	push   esi
c000f42d:	53                   	push   ebx
c000f42e:	83 ec 1c             	sub    esp,0x1c
c000f431:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f435:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f439:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f43d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f440:	89 c8                	mov    eax,ecx
c000f442:	99                   	cdq    
c000f443:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f447:	74 27                	je     c000f470 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f449:	39 f9                	cmp    ecx,edi
c000f44b:	89 d1                	mov    ecx,edx
c000f44d:	19 f1                	sbb    ecx,esi
c000f44f:	73 1f                	jae    c000f470 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f451:	fa                   	cli    
c000f452:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c000f458:	e8 b7 62 00 00       	call   c0015714 <schedule()>
c000f45d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f464:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f46b:	75 d0                	jne    c000f43d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f46d:	fb                   	sti    
c000f46e:	eb cd                	jmp    c000f43d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f470:	39 f8                	cmp    eax,edi
c000f472:	89 d1                	mov    ecx,edx
c000f474:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f477:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f47b:	19 f1                	sbb    ecx,esi
c000f47d:	73 07                	jae    c000f486 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000f47f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f482:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f486:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f489:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f48c:	29 f7                	sub    edi,esi
c000f48e:	89 f8                	mov    eax,edi
c000f490:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f494:	99                   	cdq    
c000f495:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f49c:	19 d0                	sbb    eax,edx
c000f49e:	73 07                	jae    c000f4a7 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000f4a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f4a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4a7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f4aa:	89 ea                	mov    edx,ebp
c000f4ac:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f4b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f4b5:	74 0d                	je     c000f4c4 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000f4b7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4ba:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4c4:	85 d2                	test   edx,edx
c000f4c6:	74 11                	je     c000f4d9 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000f4c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4cc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f4cf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f4d3:	89 d1                	mov    ecx,edx
c000f4d5:	89 c7                	mov    edi,eax
c000f4d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f4dc:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f4df:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f4e2:	99                   	cdq    
c000f4e3:	89 f7                	mov    edi,esi
c000f4e5:	03 04 24             	add    eax,DWORD PTR [esp]
c000f4e8:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f4ec:	c1 ff 1f             	sar    edi,0x1f
c000f4ef:	57                   	push   edi
c000f4f0:	56                   	push   esi
c000f4f1:	52                   	push   edx
c000f4f2:	50                   	push   eax
c000f4f3:	e8 6c 0c 01 00       	call   c0020164 <__umoddi3>
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f4fe:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f503:	75 10                	jne    c000f515 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000f505:	83 ec 0c             	sub    esp,0xc
c000f508:	68 de 27 02 c0       	push   0xc00227de
c000f50d:	e8 94 f7 ff ff       	call   c000eca6 <KePanic(char const*)>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f519:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f51c:	89 10                	mov    DWORD PTR [eax],edx
c000f51e:	83 c4 1c             	add    esp,0x1c
c000f521:	31 c0                	xor    eax,eax
c000f523:	5b                   	pop    ebx
c000f524:	5e                   	pop    esi
c000f525:	5f                   	pop    edi
c000f526:	5d                   	pop    ebp
c000f527:	c3                   	ret    

c000f528 <Pipe::Pipe(int)>:
c000f528:	83 ec 0c             	sub    esp,0xc
c000f52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f52f:	83 ec 08             	sub    esp,0x8
c000f532:	6a 00                	push   0x0
c000f534:	50                   	push   eax
c000f535:	e8 06 27 00 00       	call   c0011c40 <UnixFile::UnixFile(int)>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	ba 04 28 02 c0       	mov    edx,0xc0022804
c000f542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f546:	89 10                	mov    DWORD PTR [eax],edx
c000f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f54c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f550:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f557:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f562:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f569:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f56d:	83 ec 0c             	sub    esp,0xc
c000f570:	50                   	push   eax
c000f571:	e8 e9 f3 ff ff       	call   c000e95f <malloc>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	89 c2                	mov    edx,eax
c000f57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f586:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f58a:	90                   	nop
c000f58b:	83 c4 0c             	add    esp,0xc
c000f58e:	c3                   	ret    

c000f58f <KePowerThread(void*)>:
c000f58f:	83 ec 0c             	sub    esp,0xc
c000f592:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c000f599:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c000f5a0:	75 01                	jne    c000f5a3 <KePowerThread(void*)+0x14>
c000f5a2:	fb                   	sti    
c000f5a3:	83 ec 0c             	sub    esp,0xc
c000f5a6:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f5ad:	6a 0a                	push   0xa
c000f5af:	e8 6c 63 00 00       	call   c0015920 <sleep(unsigned int)>
c000f5b4:	83 05 24 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce24,0xa
c000f5bb:	83 c4 10             	add    esp,0x10
c000f5be:	eb e3                	jmp    c000f5a3 <KePowerThread(void*)+0x14>

c000f5c0 <KeChangePowerSettings(PowerSettings)>:
c000f5c0:	57                   	push   edi
c000f5c1:	b9 09 00 00 00       	mov    ecx,0x9
c000f5c6:	56                   	push   esi
c000f5c7:	bf 00 ce 02 c0       	mov    edi,0xc002ce00
c000f5cc:	fc                   	cld    
c000f5cd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5d3:	5e                   	pop    esi
c000f5d4:	5f                   	pop    edi
c000f5d5:	c3                   	ret    

c000f5d6 <KeUserIOReceived()>:
c000f5d6:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f5e0:	c3                   	ret    

c000f5e1 <KeHandlePowerButton()>:
c000f5e1:	a1 00 ce 02 c0       	mov    eax,ds:0xc002ce00
c000f5e6:	83 f8 02             	cmp    eax,0x2
c000f5e9:	75 05                	jne    c000f5f0 <KeHandlePowerButton()+0xf>
c000f5eb:	e9 10 e1 ff ff       	jmp    c000d700 <KeShutdown()>
c000f5f0:	48                   	dec    eax
c000f5f1:	75 05                	jne    c000f5f8 <KeHandlePowerButton()+0x17>
c000f5f3:	e9 2c e1 ff ff       	jmp    c000d724 <KeSleep()>
c000f5f8:	c3                   	ret    

c000f5f9 <KeHandleSleepButton()>:
c000f5f9:	a1 04 ce 02 c0       	mov    eax,ds:0xc002ce04
c000f5fe:	83 f8 02             	cmp    eax,0x2
c000f601:	75 05                	jne    c000f608 <KeHandleSleepButton()+0xf>
c000f603:	e9 f8 e0 ff ff       	jmp    c000d700 <KeShutdown()>
c000f608:	48                   	dec    eax
c000f609:	75 05                	jne    c000f610 <KeHandleSleepButton()+0x17>
c000f60b:	e9 14 e1 ff ff       	jmp    c000d724 <KeSleep()>
c000f610:	c3                   	ret    

c000f611 <KeSetupPowerManager()>:
c000f611:	83 ec 0c             	sub    esp,0xc
c000f614:	c7 05 24 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x0
c000f61e:	68 f0 00 00 00       	push   0xf0
c000f623:	c6 05 e0 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cde0,0x0
c000f62a:	6a 00                	push   0x0
c000f62c:	68 8f f5 00 c0       	push   0xc000f58f
c000f631:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c000f637:	e8 88 5e 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c000f63c:	c7 05 00 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce00,0x2
c000f646:	c7 05 04 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce04,0x1
c000f650:	c7 05 08 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce08,0x3
c000f65a:	c7 05 0c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce0c,0x0
c000f664:	c7 05 18 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce18,0x0
c000f66e:	c7 05 10 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce10,0x0
c000f678:	c7 05 1c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce1c,0x0
c000f682:	c7 05 14 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce14,0x3c
c000f68c:	c7 05 20 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x3c
c000f696:	83 c4 1c             	add    esp,0x1c
c000f699:	c3                   	ret    

c000f69a <KeRand()>:
c000f69a:	69 05 28 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce28,0x2875
c000f6a4:	69 0d 2c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce2c,0xa2e7b175
c000f6ae:	53                   	push   ebx
c000f6af:	01 c1                	add    ecx,eax
c000f6b1:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6b6:	f7 25 28 ce 02 c0    	mul    DWORD PTR ds:0xc002ce28
c000f6bc:	01 ca                	add    edx,ecx
c000f6be:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6c3:	83 d2 00             	adc    edx,0x0
c000f6c6:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f6cb:	0f b7 da             	movzx  ebx,dx
c000f6ce:	89 da                	mov    edx,ebx
c000f6d0:	89 1d 2c ce 02 c0    	mov    DWORD PTR ds:0xc002ce2c,ebx
c000f6d6:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f6da:	5b                   	pop    ebx
c000f6db:	c3                   	ret    

c000f6dc <KeSeedRand(unsigned int)>:
c000f6dc:	53                   	push   ebx
c000f6dd:	83 ec 08             	sub    esp,0x8
c000f6e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6e4:	e8 c4 92 00 00       	call   c00189ad <HalGetRand()>
c000f6e9:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c000f6f3:	31 d8                	xor    eax,ebx
c000f6f5:	a3 28 ce 02 c0       	mov    ds:0xc002ce28,eax
c000f6fa:	e8 9b ff ff ff       	call   c000f69a <KeRand()>
c000f6ff:	83 c4 08             	add    esp,0x8
c000f702:	5b                   	pop    ebx
c000f703:	eb 95                	jmp    c000f69a <KeRand()>

c000f705 <KeInitRand()>:
c000f705:	83 ec 0c             	sub    esp,0xc
c000f708:	e8 c4 90 00 00       	call   c00187d1 <HalQueryPerformanceCounter()>
c000f70d:	0f 20 da             	mov    edx,cr3
c000f710:	0f 22 da             	mov    cr3,edx
c000f713:	0f 20 da             	mov    edx,cr3
c000f716:	0f 22 da             	mov    cr3,edx
c000f719:	0f 20 da             	mov    edx,cr3
c000f71c:	0f 22 da             	mov    cr3,edx
c000f71f:	0f 20 da             	mov    edx,cr3
c000f722:	0f 22 da             	mov    cr3,edx
c000f725:	83 ec 0c             	sub    esp,0xc
c000f728:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f72d:	50                   	push   eax
c000f72e:	e8 a9 ff ff ff       	call   c000f6dc <KeSeedRand(unsigned int)>
c000f733:	83 c4 1c             	add    esp,0x1c
c000f736:	c3                   	ret    
c000f737:	90                   	nop

c000f738 <KeResolveCompatibilitySymbol(char*)>:
c000f738:	83 ec 0c             	sub    esp,0xc
c000f73b:	83 ec 08             	sub    esp,0x8
c000f73e:	68 18 28 02 c0       	push   0xc0022818
c000f743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f747:	e8 04 10 ff ff       	call   c0000750 <strcmp>
c000f74c:	83 c4 10             	add    esp,0x10
c000f74f:	85 c0                	test   eax,eax
c000f751:	0f 94 c0             	sete   al
c000f754:	0f b6 c0             	movzx  eax,al
c000f757:	85 c0                	test   eax,eax
c000f759:	74 0d                	je     c000f768 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f75b:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c000f760:	e9 8b 01 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f765:	8d 76 00             	lea    esi,[esi+0x0]
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	68 21 28 02 c0       	push   0xc0022821
c000f770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f774:	e8 d7 0f ff ff       	call   c0000750 <strcmp>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	85 c0                	test   eax,eax
c000f77e:	0f 94 c0             	sete   al
c000f781:	0f b6 c0             	movzx  eax,al
c000f784:	85 c0                	test   eax,eax
c000f786:	74 0c                	je     c000f794 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f788:	b8 64 00 02 c0       	mov    eax,0xc0020064
c000f78d:	e9 5e 01 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f792:	66 90                	xchg   ax,ax
c000f794:	83 ec 08             	sub    esp,0x8
c000f797:	68 2b 28 02 c0       	push   0xc002282b
c000f79c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7a0:	e8 ab 0f ff ff       	call   c0000750 <strcmp>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	85 c0                	test   eax,eax
c000f7aa:	0f 94 c0             	sete   al
c000f7ad:	0f b6 c0             	movzx  eax,al
c000f7b0:	85 c0                	test   eax,eax
c000f7b2:	74 0c                	je     c000f7c0 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7b4:	b8 98 fd 01 c0       	mov    eax,0xc001fd98
c000f7b9:	e9 32 01 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7be:	66 90                	xchg   ax,ax
c000f7c0:	83 ec 08             	sub    esp,0x8
c000f7c3:	68 34 28 02 c0       	push   0xc0022834
c000f7c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7cc:	e8 7f 0f ff ff       	call   c0000750 <strcmp>
c000f7d1:	83 c4 10             	add    esp,0x10
c000f7d4:	85 c0                	test   eax,eax
c000f7d6:	0f 94 c0             	sete   al
c000f7d9:	0f b6 c0             	movzx  eax,al
c000f7dc:	85 c0                	test   eax,eax
c000f7de:	74 0c                	je     c000f7ec <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f7e0:	b8 a6 ec 00 c0       	mov    eax,0xc000eca6
c000f7e5:	e9 06 01 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ea:	66 90                	xchg   ax,ax
c000f7ec:	83 ec 08             	sub    esp,0x8
c000f7ef:	68 47 28 02 c0       	push   0xc0022847
c000f7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f8:	e8 53 0f ff ff       	call   c0000750 <strcmp>
c000f7fd:	83 c4 10             	add    esp,0x10
c000f800:	85 c0                	test   eax,eax
c000f802:	0f 94 c0             	sete   al
c000f805:	0f b6 c0             	movzx  eax,al
c000f808:	85 c0                	test   eax,eax
c000f80a:	74 0c                	je     c000f818 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f80c:	b8 04 c6 00 c0       	mov    eax,0xc000c604
c000f811:	e9 da 00 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f816:	66 90                	xchg   ax,ax
c000f818:	83 ec 08             	sub    esp,0x8
c000f81b:	68 64 28 02 c0       	push   0xc0022864
c000f820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f824:	e8 27 0f ff ff       	call   c0000750 <strcmp>
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	85 c0                	test   eax,eax
c000f82e:	0f 94 c0             	sete   al
c000f831:	0f b6 c0             	movzx  eax,al
c000f834:	85 c0                	test   eax,eax
c000f836:	74 0c                	je     c000f844 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f838:	b8 64 01 02 c0       	mov    eax,0xc0020164
c000f83d:	e9 ae 00 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f842:	66 90                	xchg   ax,ax
c000f844:	83 ec 08             	sub    esp,0x8
c000f847:	68 6e 28 02 c0       	push   0xc002286e
c000f84c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f850:	e8 fb 0e ff ff       	call   c0000750 <strcmp>
c000f855:	83 c4 10             	add    esp,0x10
c000f858:	85 c0                	test   eax,eax
c000f85a:	0f 94 c0             	sete   al
c000f85d:	0f b6 c0             	movzx  eax,al
c000f860:	85 c0                	test   eax,eax
c000f862:	74 0c                	je     c000f870 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f864:	b8 e4 fe 01 c0       	mov    eax,0xc001fee4
c000f869:	e9 82 00 00 00       	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f86e:	66 90                	xchg   ax,ax
c000f870:	83 ec 08             	sub    esp,0x8
c000f873:	68 77 28 02 c0       	push   0xc0022877
c000f878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87c:	e8 cf 0e ff ff       	call   c0000750 <strcmp>
c000f881:	83 c4 10             	add    esp,0x10
c000f884:	85 c0                	test   eax,eax
c000f886:	0f 94 c0             	sete   al
c000f889:	0f b6 c0             	movzx  eax,al
c000f88c:	85 c0                	test   eax,eax
c000f88e:	74 08                	je     c000f898 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f890:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f895:	eb 59                	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f897:	90                   	nop
c000f898:	83 ec 08             	sub    esp,0x8
c000f89b:	68 8f 28 02 c0       	push   0xc002288f
c000f8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a4:	e8 a7 0e ff ff       	call   c0000750 <strcmp>
c000f8a9:	83 c4 10             	add    esp,0x10
c000f8ac:	85 c0                	test   eax,eax
c000f8ae:	0f 94 c0             	sete   al
c000f8b1:	0f b6 c0             	movzx  eax,al
c000f8b4:	85 c0                	test   eax,eax
c000f8b6:	74 08                	je     c000f8c0 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8b8:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c000f8bd:	eb 31                	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8bf:	90                   	nop
c000f8c0:	83 ec 08             	sub    esp,0x8
c000f8c3:	68 9c 28 02 c0       	push   0xc002289c
c000f8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cc:	e8 7f 0e ff ff       	call   c0000750 <strcmp>
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	85 c0                	test   eax,eax
c000f8d6:	0f 94 c0             	sete   al
c000f8d9:	0f b6 c0             	movzx  eax,al
c000f8dc:	85 c0                	test   eax,eax
c000f8de:	74 08                	je     c000f8e8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f8e0:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c000f8e5:	eb 09                	jmp    c000f8f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8e7:	90                   	nop
c000f8e8:	b8 00 00 00 00       	mov    eax,0x0
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	83 c4 0c             	add    esp,0xc
c000f8f3:	c3                   	ret    

c000f8f4 <Semaphore::Semaphore(int)>:
c000f8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f8fc:	89 10                	mov    DWORD PTR [eax],edx
c000f8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f902:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f909:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f90d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f918:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f91f:	90                   	nop
c000f920:	c3                   	ret    
c000f921:	90                   	nop
c000f922:	66 90                	xchg   ax,ax

c000f924 <Semaphore::tryAcquire()>:
c000f924:	83 ec 0c             	sub    esp,0xc
c000f927:	fa                   	cli    
c000f928:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f92d:	83 c0 01             	add    eax,0x1
c000f930:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000f935:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f93a:	83 c0 01             	add    eax,0x1
c000f93d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f946:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f94d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f94f:	39 c2                	cmp    edx,eax
c000f951:	7d 59                	jge    c000f9ac <Semaphore::tryAcquire()+0x88>
c000f953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f95a:	8d 50 01             	lea    edx,[eax+0x1]
c000f95d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f961:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f964:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f969:	83 e8 01             	sub    eax,0x1
c000f96c:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f971:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f976:	85 c0                	test   eax,eax
c000f978:	75 1a                	jne    c000f994 <Semaphore::tryAcquire()+0x70>
c000f97a:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f97f:	85 c0                	test   eax,eax
c000f981:	74 11                	je     c000f994 <Semaphore::tryAcquire()+0x70>
c000f983:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f98d:	e8 82 5d 00 00       	call   c0015714 <schedule()>
c000f992:	66 90                	xchg   ax,ax
c000f994:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f99c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f9a1:	85 c0                	test   eax,eax
c000f9a3:	75 03                	jne    c000f9a8 <Semaphore::tryAcquire()+0x84>
c000f9a5:	fb                   	sti    
c000f9a6:	66 90                	xchg   ax,ax
c000f9a8:	b0 01                	mov    al,0x1
c000f9aa:	eb 48                	jmp    c000f9f4 <Semaphore::tryAcquire()+0xd0>
c000f9ac:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9b1:	83 e8 01             	sub    eax,0x1
c000f9b4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000f9b9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000f9be:	85 c0                	test   eax,eax
c000f9c0:	75 1a                	jne    c000f9dc <Semaphore::tryAcquire()+0xb8>
c000f9c2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000f9c7:	85 c0                	test   eax,eax
c000f9c9:	74 11                	je     c000f9dc <Semaphore::tryAcquire()+0xb8>
c000f9cb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000f9d5:	e8 3a 5d 00 00       	call   c0015714 <schedule()>
c000f9da:	66 90                	xchg   ax,ax
c000f9dc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000f9e4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000f9e9:	85 c0                	test   eax,eax
c000f9eb:	75 03                	jne    c000f9f0 <Semaphore::tryAcquire()+0xcc>
c000f9ed:	fb                   	sti    
c000f9ee:	66 90                	xchg   ax,ax
c000f9f0:	b0 00                	mov    al,0x0
c000f9f2:	66 90                	xchg   ax,ax
c000f9f4:	83 c4 0c             	add    esp,0xc
c000f9f7:	c3                   	ret    

c000f9f8 <Semaphore::assertLocked(char const*)>:
c000f9f8:	83 ec 0c             	sub    esp,0xc
c000f9fb:	fa                   	cli    
c000f9fc:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa01:	83 c0 01             	add    eax,0x1
c000fa04:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fa09:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa0e:	83 c0 01             	add    eax,0x1
c000fa11:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa1a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa23:	39 c2                	cmp    edx,eax
c000fa25:	7d 11                	jge    c000fa38 <Semaphore::assertLocked(char const*)+0x40>
c000fa27:	83 ec 0c             	sub    esp,0xc
c000fa2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa2e:	e8 73 f2 ff ff       	call   c000eca6 <KePanic(char const*)>
c000fa33:	83 c4 10             	add    esp,0x10
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa3d:	83 e8 01             	sub    eax,0x1
c000fa40:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fa45:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fa4a:	85 c0                	test   eax,eax
c000fa4c:	75 1a                	jne    c000fa68 <Semaphore::assertLocked(char const*)+0x70>
c000fa4e:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fa53:	85 c0                	test   eax,eax
c000fa55:	74 11                	je     c000fa68 <Semaphore::assertLocked(char const*)+0x70>
c000fa57:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fa61:	e8 ae 5c 00 00       	call   c0015714 <schedule()>
c000fa66:	66 90                	xchg   ax,ax
c000fa68:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fa70:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fa75:	85 c0                	test   eax,eax
c000fa77:	75 03                	jne    c000fa7c <Semaphore::assertLocked(char const*)+0x84>
c000fa79:	fb                   	sti    
c000fa7a:	66 90                	xchg   ax,ax
c000fa7c:	90                   	nop
c000fa7d:	83 c4 0c             	add    esp,0xc
c000fa80:	c3                   	ret    
c000fa81:	90                   	nop
c000fa82:	66 90                	xchg   ax,ax

c000fa84 <Semaphore::acquire(int)>:
c000fa84:	83 ec 1c             	sub    esp,0x1c
c000fa87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fa8c:	0f 84 9a 00 00 00    	je     c000fb2c <Semaphore::acquire(int)+0xa8>
c000fa92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa9a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000fa9f:	90                   	nop
c000faa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000faa5:	85 c0                	test   eax,eax
c000faa7:	74 77                	je     c000fb20 <Semaphore::acquire(int)+0x9c>
c000faa9:	83 ec 0c             	sub    esp,0xc
c000faac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fab0:	e8 6f fe ff ff       	call   c000f924 <Semaphore::tryAcquire()>
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	83 f0 01             	xor    eax,0x1
c000fabb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fabf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fac3:	83 f0 01             	xor    eax,0x1
c000fac6:	0f b6 c0             	movzx  eax,al
c000fac9:	85 c0                	test   eax,eax
c000facb:	75 4f                	jne    c000fb1c <Semaphore::acquire(int)+0x98>
c000facd:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fad2:	7f 2c                	jg     c000fb00 <Semaphore::acquire(int)+0x7c>
c000fad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fad8:	89 d0                	mov    eax,edx
c000fada:	c1 e0 02             	shl    eax,0x2
c000fadd:	01 d0                	add    eax,edx
c000fadf:	01 c0                	add    eax,eax
c000fae1:	83 ec 0c             	sub    esp,0xc
c000fae4:	50                   	push   eax
c000fae5:	e8 22 5e 00 00       	call   c001590c <milliTenthSleep(unsigned int)>
c000faea:	83 c4 10             	add    esp,0x10
c000faed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000faf1:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000faf5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fafd:	eb a1                	jmp    c000faa0 <Semaphore::acquire(int)+0x1c>
c000faff:	90                   	nop
c000fb00:	83 ec 0c             	sub    esp,0xc
c000fb03:	68 90 01 00 00       	push   0x190
c000fb08:	e8 ff 5d 00 00       	call   c001590c <milliTenthSleep(unsigned int)>
c000fb0d:	83 c4 10             	add    esp,0x10
c000fb10:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb15:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb1a:	eb 84                	jmp    c000faa0 <Semaphore::acquire(int)+0x1c>
c000fb1c:	90                   	nop
c000fb1d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb24:	e9 fb 00 00 00       	jmp    c000fc24 <Semaphore::acquire(int)+0x1a0>
c000fb29:	8d 76 00             	lea    esi,[esi+0x0]
c000fb2c:	fa                   	cli    
c000fb2d:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fb32:	83 c0 01             	add    eax,0x1
c000fb35:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fb3a:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fb3f:	83 c0 01             	add    eax,0x1
c000fb42:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb4b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb52:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb54:	39 c2                	cmp    edx,eax
c000fb56:	7d 14                	jge    c000fb6c <Semaphore::acquire(int)+0xe8>
c000fb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb5f:	8d 50 01             	lea    edx,[eax+0x1]
c000fb62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb66:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb69:	eb 6d                	jmp    c000fbd8 <Semaphore::acquire(int)+0x154>
c000fb6b:	90                   	nop
c000fb6c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb71:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb73:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fb7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb81:	85 c0                	test   eax,eax
c000fb83:	75 13                	jne    c000fb98 <Semaphore::acquire(int)+0x114>
c000fb85:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb8a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fb93:	eb 17                	jmp    c000fbac <Semaphore::acquire(int)+0x128>
c000fb95:	8d 76 00             	lea    esi,[esi+0x0]
c000fb98:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fb9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fba4:	8b 12                	mov    edx,DWORD PTR [edx]
c000fba6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fba9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbb1:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbba:	83 ec 0c             	sub    esp,0xc
c000fbbd:	68 ac 28 02 c0       	push   0xc00228ac
c000fbc2:	e8 9d 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbc7:	83 c4 10             	add    esp,0x10
c000fbca:	83 ec 0c             	sub    esp,0xc
c000fbcd:	6a 05                	push   0x5
c000fbcf:	e8 00 5c 00 00       	call   c00157d4 <blockTask(TaskState)>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	90                   	nop
c000fbd8:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fbe5:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fbea:	85 c0                	test   eax,eax
c000fbec:	75 1a                	jne    c000fc08 <Semaphore::acquire(int)+0x184>
c000fbee:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fbf3:	85 c0                	test   eax,eax
c000fbf5:	74 11                	je     c000fc08 <Semaphore::acquire(int)+0x184>
c000fbf7:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fc01:	e8 0e 5b 00 00       	call   c0015714 <schedule()>
c000fc06:	66 90                	xchg   ax,ax
c000fc08:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fc10:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc15:	85 c0                	test   eax,eax
c000fc17:	75 03                	jne    c000fc1c <Semaphore::acquire(int)+0x198>
c000fc19:	fb                   	sti    
c000fc1a:	66 90                	xchg   ax,ax
c000fc1c:	b8 00 00 00 00       	mov    eax,0x0
c000fc21:	8d 76 00             	lea    esi,[esi+0x0]
c000fc24:	83 c4 1c             	add    esp,0x1c
c000fc27:	c3                   	ret    

c000fc28 <Semaphore::acquire()>:
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	83 ec 08             	sub    esp,0x8
c000fc2e:	6a 00                	push   0x0
c000fc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc34:	e8 4b fe ff ff       	call   c000fa84 <Semaphore::acquire(int)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	90                   	nop
c000fc3d:	83 c4 0c             	add    esp,0xc
c000fc40:	c3                   	ret    
c000fc41:	90                   	nop
c000fc42:	66 90                	xchg   ax,ax

c000fc44 <Semaphore::release()>:
c000fc44:	83 ec 1c             	sub    esp,0x1c
c000fc47:	fa                   	cli    
c000fc48:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fc4d:	83 c0 01             	add    eax,0x1
c000fc50:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000fc55:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fc5a:	83 c0 01             	add    eax,0x1
c000fc5d:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fc62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc69:	85 c0                	test   eax,eax
c000fc6b:	74 2b                	je     c000fc98 <Semaphore::release()+0x54>
c000fc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc7c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc86:	83 ec 0c             	sub    esp,0xc
c000fc89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc8d:	e8 a2 5d 00 00       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	eb 15                	jmp    c000fcac <Semaphore::release()+0x68>
c000fc97:	90                   	nop
c000fc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc9f:	8d 50 ff             	lea    edx,[eax-0x1]
c000fca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcac:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fcb1:	83 e8 01             	sub    eax,0x1
c000fcb4:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c000fcb9:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c000fcbe:	85 c0                	test   eax,eax
c000fcc0:	75 1a                	jne    c000fcdc <Semaphore::release()+0x98>
c000fcc2:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c000fcc7:	85 c0                	test   eax,eax
c000fcc9:	74 11                	je     c000fcdc <Semaphore::release()+0x98>
c000fccb:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c000fcd5:	e8 3a 5a 00 00       	call   c0015714 <schedule()>
c000fcda:	66 90                	xchg   ax,ax
c000fcdc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c000fce4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c000fce9:	85 c0                	test   eax,eax
c000fceb:	75 03                	jne    c000fcf0 <Semaphore::release()+0xac>
c000fced:	fb                   	sti    
c000fcee:	66 90                	xchg   ax,ax
c000fcf0:	90                   	nop
c000fcf1:	83 c4 1c             	add    esp,0x1c
c000fcf4:	c3                   	ret    

c000fcf5 <KiSigKill(int)>:
c000fcf5:	83 ec 0c             	sub    esp,0xc
c000fcf8:	6a 00                	push   0x0
c000fcfa:	6a 00                	push   0x0
c000fcfc:	6a ff                	push   0xffffffff
c000fcfe:	6a 01                	push   0x1
c000fd00:	e8 4d 63 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd05:	83 c4 1c             	add    esp,0x1c
c000fd08:	c3                   	ret    

c000fd09 <KiDefaultSignalHandlerIgnore(int)>:
c000fd09:	c3                   	ret    

c000fd0a <KiDefaultSignalHandlerPause(int)>:
c000fd0a:	57                   	push   edi
c000fd0b:	b9 07 00 00 00       	mov    ecx,0x7
c000fd10:	56                   	push   esi
c000fd11:	be 07 29 02 c0       	mov    esi,0xc0022907
c000fd16:	83 ec 24             	sub    esp,0x24
c000fd19:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd1d:	fc                   	cld    
c000fd1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd20:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd24:	50                   	push   eax
c000fd25:	6a 00                	push   0x0
c000fd27:	6a 00                	push   0x0
c000fd29:	6a 27                	push   0x27
c000fd2b:	e8 22 63 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd30:	83 c4 34             	add    esp,0x34
c000fd33:	5e                   	pop    esi
c000fd34:	5f                   	pop    edi
c000fd35:	c3                   	ret    

c000fd36 <KiDefaultSignalHandlerResume(int)>:
c000fd36:	57                   	push   edi
c000fd37:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd3c:	56                   	push   esi
c000fd3d:	be 23 29 02 c0       	mov    esi,0xc0022923
c000fd42:	83 ec 24             	sub    esp,0x24
c000fd45:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd49:	fc                   	cld    
c000fd4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd4c:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd50:	50                   	push   eax
c000fd51:	6a 00                	push   0x0
c000fd53:	6a 00                	push   0x0
c000fd55:	6a 27                	push   0x27
c000fd57:	e8 f6 62 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd5c:	83 c4 34             	add    esp,0x34
c000fd5f:	5e                   	pop    esi
c000fd60:	5f                   	pop    edi
c000fd61:	c3                   	ret    

c000fd62 <KeDeinitSignals(SigHandlerBlock*)>:
c000fd62:	e9 08 ec ff ff       	jmp    c000e96f <free>

c000fd67 <KeInitSignals()>:
c000fd67:	53                   	push   ebx
c000fd68:	83 ec 14             	sub    esp,0x14
c000fd6b:	68 c8 00 00 00       	push   0xc8
c000fd70:	e8 ea eb ff ff       	call   c000e95f <malloc>
c000fd75:	83 c4 0c             	add    esp,0xc
c000fd78:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fd82:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fd8c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fd93:	89 c3                	mov    ebx,eax
c000fd95:	6a 20                	push   0x20
c000fd97:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fd9d:	6a 00                	push   0x0
c000fd9f:	50                   	push   eax
c000fda0:	e8 4b 07 ff ff       	call   c00004f0 <memset>
c000fda5:	83 c4 0c             	add    esp,0xc
c000fda8:	6a 44                	push   0x44
c000fdaa:	6a 00                	push   0x0
c000fdac:	53                   	push   ebx
c000fdad:	e8 3e 07 ff ff       	call   c00004f0 <memset>
c000fdb2:	89 d8                	mov    eax,ebx
c000fdb4:	83 c4 18             	add    esp,0x18
c000fdb7:	5b                   	pop    ebx
c000fdb8:	c3                   	ret    

c000fdb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fdb9:	53                   	push   ebx
c000fdba:	b8 01 00 00 00       	mov    eax,0x1
c000fdbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdc7:	83 f9 10             	cmp    ecx,0x10
c000fdca:	7f 21                	jg     c000fded <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fdcc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd3:	89 03                	mov    DWORD PTR [ebx],eax
c000fdd5:	b8 01 00 00 00       	mov    eax,0x1
c000fdda:	d3 e0                	shl    eax,cl
c000fddc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fde0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fde3:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fdeb:	31 c0                	xor    eax,eax
c000fded:	5b                   	pop    ebx
c000fdee:	c3                   	ret    

c000fdef <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fdef:	55                   	push   ebp
c000fdf0:	57                   	push   edi
c000fdf1:	bf 08 00 00 00       	mov    edi,0x8
c000fdf6:	56                   	push   esi
c000fdf7:	53                   	push   ebx
c000fdf8:	83 ec 18             	sub    esp,0x18
c000fdfb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fdff:	68 40 29 02 c0       	push   0xc0022940
c000fe04:	e8 5b 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe09:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe10:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe16:	83 c4 10             	add    esp,0x10
c000fe19:	31 c9                	xor    ecx,ecx
c000fe1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe1f:	99                   	cdq    
c000fe20:	f7 ff                	idiv   edi
c000fe22:	8d 42 24             	lea    eax,[edx+0x24]
c000fe25:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe29:	85 f6                	test   esi,esi
c000fe2b:	75 1a                	jne    c000fe47 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe2d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe31:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe35:	50                   	push   eax
c000fe36:	50                   	push   eax
c000fe37:	52                   	push   edx
c000fe38:	68 51 29 02 c0       	push   0xc0022951
c000fe3d:	e8 22 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	eb 1b                	jmp    c000fe62 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe47:	41                   	inc    ecx
c000fe48:	83 f9 08             	cmp    ecx,0x8
c000fe4b:	75 ce                	jne    c000fe1b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe4d:	83 ec 0c             	sub    esp,0xc
c000fe50:	be 01 00 00 00       	mov    esi,0x1
c000fe55:	68 72 29 02 c0       	push   0xc0022972
c000fe5a:	e8 05 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	83 c4 0c             	add    esp,0xc
c000fe65:	89 f0                	mov    eax,esi
c000fe67:	5b                   	pop    ebx
c000fe68:	5e                   	pop    esi
c000fe69:	5f                   	pop    edi
c000fe6a:	5d                   	pop    ebp
c000fe6b:	c3                   	ret    

c000fe6c <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fe6c:	55                   	push   ebp
c000fe6d:	57                   	push   edi
c000fe6e:	56                   	push   esi
c000fe6f:	53                   	push   ebx
c000fe70:	51                   	push   ecx
c000fe71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe75:	85 db                	test   ebx,ebx
c000fe77:	0f 84 bc 00 00 00    	je     c000ff39 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe7d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fe84:	0f 84 af 00 00 00    	je     c000ff39 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe8a:	31 c9                	xor    ecx,ecx
c000fe8c:	bf 08 00 00 00       	mov    edi,0x8
c000fe91:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fe97:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fe9a:	99                   	cdq    
c000fe9b:	f7 ff                	idiv   edi
c000fe9d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fea4:	85 ed                	test   ebp,ebp
c000fea6:	0f 84 9e 00 00 00    	je     c000ff4a <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000feac:	89 e9                	mov    ecx,ebp
c000feae:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000feb4:	bf 01 00 00 00       	mov    edi,0x1
c000feb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000febc:	d3 e7                	shl    edi,cl
c000febe:	31 c9                	xor    ecx,ecx
c000fec0:	b8 01 00 00 00       	mov    eax,0x1
c000fec5:	d3 e0                	shl    eax,cl
c000fec7:	85 04 24             	test   DWORD PTR [esp],eax
c000feca:	74 06                	je     c000fed2 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fecc:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fed0:	75 67                	jne    c000ff39 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fed2:	41                   	inc    ecx
c000fed3:	83 f9 11             	cmp    ecx,0x11
c000fed6:	75 e8                	jne    c000fec0 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fed8:	46                   	inc    esi
c000fed9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fedc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fee2:	09 f8                	or     eax,edi
c000fee4:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000feef:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fef5:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fefc:	31 c0                	xor    eax,eax
c000fefe:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff06:	74 09                	je     c000ff11 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff08:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff0f:	eb 06                	jmp    c000ff17 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff11:	40                   	inc    eax
c000ff12:	83 f8 08             	cmp    eax,0x8
c000ff15:	75 e7                	jne    c000fefe <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff17:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff1e:	83 fd 09             	cmp    ebp,0x9
c000ff21:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff23:	75 07                	jne    c000ff2c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff25:	b8 f5 fc 00 c0       	mov    eax,0xc000fcf5
c000ff2a:	eb 31                	jmp    c000ff5d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff2c:	83 f8 01             	cmp    eax,0x1
c000ff2f:	75 0c                	jne    c000ff3d <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff31:	f7 d7                	not    edi
c000ff33:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff39:	31 c0                	xor    eax,eax
c000ff3b:	eb 20                	jmp    c000ff5d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff3d:	85 c0                	test   eax,eax
c000ff3f:	75 1c                	jne    c000ff5d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff41:	8b 04 ad 00 4c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdb400]
c000ff48:	eb 13                	jmp    c000ff5d <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff4a:	46                   	inc    esi
c000ff4b:	41                   	inc    ecx
c000ff4c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff52:	83 f9 08             	cmp    ecx,0x8
c000ff55:	0f 85 36 ff ff ff    	jne    c000fe91 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff5b:	eb dc                	jmp    c000ff39 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff5d:	5a                   	pop    edx
c000ff5e:	5b                   	pop    ebx
c000ff5f:	5e                   	pop    esi
c000ff60:	5f                   	pop    edi
c000ff61:	5d                   	pop    ebp
c000ff62:	c3                   	ret    

c000ff63 <KiCheckSignalZ>:
c000ff63:	83 ec 10             	sub    esp,0x10
c000ff66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff6a:	50                   	push   eax
c000ff6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff73:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff79:	e8 ee fe ff ff       	call   c000fe6c <KeCheckSignal(SigHandlerBlock*, int*)>
c000ff7e:	5a                   	pop    edx
c000ff7f:	31 d2                	xor    edx,edx
c000ff81:	59                   	pop    ecx
c000ff82:	85 c0                	test   eax,eax
c000ff84:	74 19                	je     c000ff9f <KiCheckSignalZ+0x3c>
c000ff86:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ff8c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ff8f:	89 02                	mov    DWORD PTR [edx],eax
c000ff91:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ff98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff9c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ff9f:	89 d0                	mov    eax,edx
c000ffa1:	83 c4 10             	add    esp,0x10
c000ffa4:	c3                   	ret    

c000ffa5 <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffa5:	56                   	push   esi
c000ffa6:	53                   	push   ebx
c000ffa7:	bb 01 00 00 00       	mov    ebx,0x1
c000ffac:	52                   	push   edx
c000ffad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffb5:	d3 e3                	shl    ebx,cl
c000ffb7:	83 f9 10             	cmp    ecx,0x10
c000ffba:	7f 08                	jg     c000ffc4 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ffbc:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ffc2:	75 10                	jne    c000ffd4 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ffc4:	83 ec 0c             	sub    esp,0xc
c000ffc7:	68 83 29 02 c0       	push   0xc0022983
c000ffcc:	e8 d5 ec ff ff       	call   c000eca6 <KePanic(char const*)>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	f7 d3                	not    ebx
c000ffd6:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ffdc:	58                   	pop    eax
c000ffdd:	5b                   	pop    ebx
c000ffde:	5e                   	pop    esi
c000ffdf:	c3                   	ret    

c000ffe0 <KiFinishSignalZ>:
c000ffe0:	53                   	push   ebx
c000ffe1:	83 ec 10             	sub    esp,0x10
c000ffe4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ffe8:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ffeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fff0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fff3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000fff9:	e8 a7 ff ff ff       	call   c000ffa5 <KeCompleteSignal(SigHandlerBlock*, int)>
c000fffe:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010004:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001000b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010012:	83 c4 18             	add    esp,0x18
c0010015:	5b                   	pop    ebx
c0010016:	c3                   	ret    

c0010017 <SysSeekDir(regs*)>:
c0010017:	31 c0                	xor    eax,eax
c0010019:	31 d2                	xor    edx,edx
c001001b:	c3                   	ret    

c001001c <SysTellDir(regs*)>:
c001001c:	31 c0                	xor    eax,eax
c001001e:	31 d2                	xor    edx,edx
c0010020:	c3                   	ret    

c0010021 <SysVerify(regs*)>:
c0010021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010025:	31 d2                	xor    edx,edx
c0010027:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001002a:	c3                   	ret    

c001002b <SysGetArgc(regs*)>:
c001002b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010030:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010033:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010039:	89 c2                	mov    edx,eax
c001003b:	c1 fa 1f             	sar    edx,0x1f
c001003e:	c3                   	ret    

c001003f <SysTTYName(regs*)>:
c001003f:	b8 01 00 00 00       	mov    eax,0x1
c0010044:	31 d2                	xor    edx,edx
c0010046:	c3                   	ret    

c0010047 <SysFormatDisk(regs*)>:
c0010047:	56                   	push   esi
c0010048:	53                   	push   ebx
c0010049:	83 ec 04             	sub    esp,0x4
c001004c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010050:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c0010056:	eb 28                	jmp    c0010080 <SysFormatDisk(regs*)+0x39>
c0010058:	83 ec 0c             	sub    esp,0xc
c001005b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001005e:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010061:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010063:	51                   	push   ecx
c0010064:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010067:	51                   	push   ecx
c0010068:	50                   	push   eax
c0010069:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0010070:	50                   	push   eax
c0010071:	53                   	push   ebx
c0010072:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010075:	83 c4 20             	add    esp,0x20
c0010078:	83 f8 08             	cmp    eax,0x8
c001007b:	75 14                	jne    c0010091 <SysFormatDisk(regs*)+0x4a>
c001007d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010080:	85 db                	test   ebx,ebx
c0010082:	75 d4                	jne    c0010058 <SysFormatDisk(regs*)+0x11>
c0010084:	83 c4 04             	add    esp,0x4
c0010087:	b8 03 00 00 00       	mov    eax,0x3
c001008c:	31 d2                	xor    edx,edx
c001008e:	5b                   	pop    ebx
c001008f:	5e                   	pop    esi
c0010090:	c3                   	ret    
c0010091:	85 c0                	test   eax,eax
c0010093:	74 1f                	je     c00100b4 <SysFormatDisk(regs*)+0x6d>
c0010095:	83 f8 09             	cmp    eax,0x9
c0010098:	74 0d                	je     c00100a7 <SysFormatDisk(regs*)+0x60>
c001009a:	83 c4 04             	add    esp,0x4
c001009d:	b8 02 00 00 00       	mov    eax,0x2
c00100a2:	31 d2                	xor    edx,edx
c00100a4:	5b                   	pop    ebx
c00100a5:	5e                   	pop    esi
c00100a6:	c3                   	ret    
c00100a7:	83 c4 04             	add    esp,0x4
c00100aa:	b8 01 00 00 00       	mov    eax,0x1
c00100af:	31 d2                	xor    edx,edx
c00100b1:	5b                   	pop    ebx
c00100b2:	5e                   	pop    esi
c00100b3:	c3                   	ret    
c00100b4:	83 c4 04             	add    esp,0x4
c00100b7:	31 c0                	xor    eax,eax
c00100b9:	31 d2                	xor    edx,edx
c00100bb:	5b                   	pop    ebx
c00100bc:	5e                   	pop    esi
c00100bd:	c3                   	ret    

c00100be <SysSetDiskVolumeLabel(regs*)>:
c00100be:	56                   	push   esi
c00100bf:	53                   	push   ebx
c00100c0:	83 ec 04             	sub    esp,0x4
c00100c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100c7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100ca:	83 f8 19             	cmp    eax,0x19
c00100cd:	77 33                	ja     c0010102 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100cf:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c00100d6:	85 c9                	test   ecx,ecx
c00100d8:	74 28                	je     c0010102 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100da:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00100dd:	85 db                	test   ebx,ebx
c00100df:	74 21                	je     c0010102 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100e1:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00100e7:	85 d2                	test   edx,edx
c00100e9:	74 17                	je     c0010102 <SysSetDiskVolumeLabel(regs*)+0x44>
c00100eb:	8b 32                	mov    esi,DWORD PTR [edx]
c00100ed:	53                   	push   ebx
c00100ee:	50                   	push   eax
c00100ef:	51                   	push   ecx
c00100f0:	52                   	push   edx
c00100f1:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00100f4:	83 c4 10             	add    esp,0x10
c00100f7:	89 c2                	mov    edx,eax
c00100f9:	83 c4 04             	add    esp,0x4
c00100fc:	c1 fa 1f             	sar    edx,0x1f
c00100ff:	5b                   	pop    ebx
c0010100:	5e                   	pop    esi
c0010101:	c3                   	ret    
c0010102:	83 c4 04             	add    esp,0x4
c0010105:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001010a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001010f:	5b                   	pop    ebx
c0010110:	5e                   	pop    esi
c0010111:	c3                   	ret    

c0010112 <SysGetDiskVolumeLabel(regs*)>:
c0010112:	57                   	push   edi
c0010113:	56                   	push   esi
c0010114:	53                   	push   ebx
c0010115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010119:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001011c:	83 fa 19             	cmp    edx,0x19
c001011f:	77 3c                	ja     c001015d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010121:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c0010128:	85 c9                	test   ecx,ecx
c001012a:	74 31                	je     c001015d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001012c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001012f:	85 db                	test   ebx,ebx
c0010131:	74 2a                	je     c001015d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010133:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010136:	85 f6                	test   esi,esi
c0010138:	74 23                	je     c001015d <SysGetDiskVolumeLabel(regs*)+0x4b>
c001013a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010140:	85 c0                	test   eax,eax
c0010142:	74 19                	je     c001015d <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010144:	83 ec 0c             	sub    esp,0xc
c0010147:	8b 38                	mov    edi,DWORD PTR [eax]
c0010149:	56                   	push   esi
c001014a:	53                   	push   ebx
c001014b:	52                   	push   edx
c001014c:	51                   	push   ecx
c001014d:	50                   	push   eax
c001014e:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010151:	83 c4 20             	add    esp,0x20
c0010154:	89 c2                	mov    edx,eax
c0010156:	5b                   	pop    ebx
c0010157:	c1 fa 1f             	sar    edx,0x1f
c001015a:	5e                   	pop    esi
c001015b:	5f                   	pop    edi
c001015c:	c3                   	ret    
c001015d:	5b                   	pop    ebx
c001015e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010163:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010168:	5e                   	pop    esi
c0010169:	5f                   	pop    edi
c001016a:	c3                   	ret    

c001016b <SysRealpath(regs*)>:
c001016b:	83 ec 0c             	sub    esp,0xc
c001016e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010172:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010175:	85 d2                	test   edx,edx
c0010177:	74 07                	je     c0010180 <SysRealpath(regs*)+0x15>
c0010179:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001017c:	85 c0                	test   eax,eax
c001017e:	75 0b                	jne    c001018b <SysRealpath(regs*)+0x20>
c0010180:	b8 01 00 00 00       	mov    eax,0x1
c0010185:	31 d2                	xor    edx,edx
c0010187:	83 c4 0c             	add    esp,0xc
c001018a:	c3                   	ret    
c001018b:	6a 00                	push   0x0
c001018d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010193:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010196:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001019c:	51                   	push   ecx
c001019d:	52                   	push   edx
c001019e:	50                   	push   eax
c001019f:	e8 76 7c ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00101a4:	83 c4 10             	add    esp,0x10
c00101a7:	31 c0                	xor    eax,eax
c00101a9:	31 d2                	xor    edx,edx
c00101ab:	83 c4 0c             	add    esp,0xc
c00101ae:	c3                   	ret    

c00101af <SysReadDir(regs*)>:
c00101af:	53                   	push   ebx
c00101b0:	83 ec 18             	sub    esp,0x18
c00101b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101b7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00101ba:	83 f8 02             	cmp    eax,0x2
c00101bd:	76 61                	jbe    c0010220 <SysReadDir(regs*)+0x71>
c00101bf:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00101c6:	77 49                	ja     c0010211 <SysReadDir(regs*)+0x62>
c00101c8:	83 ec 0c             	sub    esp,0xc
c00101cb:	50                   	push   eax
c00101cc:	e8 64 1d 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c00101d1:	83 c4 10             	add    esp,0x10
c00101d4:	85 c0                	test   eax,eax
c00101d6:	74 39                	je     c0010211 <SysReadDir(regs*)+0x62>
c00101d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00101e0:	83 ec 0c             	sub    esp,0xc
c00101e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00101e5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00101e9:	51                   	push   ecx
c00101ea:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00101ed:	51                   	push   ecx
c00101ee:	6a 00                	push   0x0
c00101f0:	68 10 01 00 00       	push   0x110
c00101f5:	50                   	push   eax
c00101f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101f9:	83 c4 20             	add    esp,0x20
c00101fc:	85 c0                	test   eax,eax
c00101fe:	74 29                	je     c0010229 <SysReadDir(regs*)+0x7a>
c0010200:	83 f8 07             	cmp    eax,0x7
c0010203:	74 1b                	je     c0010220 <SysReadDir(regs*)+0x71>
c0010205:	b8 02 00 00 00       	mov    eax,0x2
c001020a:	31 d2                	xor    edx,edx
c001020c:	83 c4 18             	add    esp,0x18
c001020f:	5b                   	pop    ebx
c0010210:	c3                   	ret    
c0010211:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010216:	ba ff ff ff ff       	mov    edx,0xffffffff
c001021b:	83 c4 18             	add    esp,0x18
c001021e:	5b                   	pop    ebx
c001021f:	c3                   	ret    
c0010220:	b8 01 00 00 00       	mov    eax,0x1
c0010225:	31 d2                	xor    edx,edx
c0010227:	eb e3                	jmp    c001020c <SysReadDir(regs*)+0x5d>
c0010229:	31 c0                	xor    eax,eax
c001022b:	31 d2                	xor    edx,edx
c001022d:	eb dd                	jmp    c001020c <SysReadDir(regs*)+0x5d>

c001022f <SysIsATTY(regs*)>:
c001022f:	83 ec 0c             	sub    esp,0xc
c0010232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010236:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010239:	83 f8 02             	cmp    eax,0x2
c001023c:	76 07                	jbe    c0010245 <SysIsATTY(regs*)+0x16>
c001023e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010243:	75 26                	jne    c001026b <SysIsATTY(regs*)+0x3c>
c0010245:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001024a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001024d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010253:	85 c0                	test   eax,eax
c0010255:	74 24                	je     c001027b <SysIsATTY(regs*)+0x4c>
c0010257:	83 ec 0c             	sub    esp,0xc
c001025a:	8b 10                	mov    edx,DWORD PTR [eax]
c001025c:	50                   	push   eax
c001025d:	ff 12                	call   DWORD PTR [edx]
c001025f:	31 d2                	xor    edx,edx
c0010261:	0f b6 c0             	movzx  eax,al
c0010264:	83 c4 10             	add    esp,0x10
c0010267:	83 c4 0c             	add    esp,0xc
c001026a:	c3                   	ret    
c001026b:	83 ec 0c             	sub    esp,0xc
c001026e:	50                   	push   eax
c001026f:	e8 c1 1c 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0010274:	83 c4 10             	add    esp,0x10
c0010277:	85 c0                	test   eax,eax
c0010279:	75 dc                	jne    c0010257 <SysIsATTY(regs*)+0x28>
c001027b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010280:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	c3                   	ret    

c0010289 <SysSeek(regs*)>:
c0010289:	53                   	push   ebx
c001028a:	83 ec 08             	sub    esp,0x8
c001028d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010291:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010294:	8d 50 fd             	lea    edx,[eax-0x3]
c0010297:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001029d:	77 32                	ja     c00102d1 <SysSeek(regs*)+0x48>
c001029f:	83 ec 0c             	sub    esp,0xc
c00102a2:	50                   	push   eax
c00102a3:	e8 8d 1c 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c00102a8:	83 c4 0c             	add    esp,0xc
c00102ab:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00102ae:	31 db                	xor    ebx,ebx
c00102b0:	53                   	push   ebx
c00102b1:	51                   	push   ecx
c00102b2:	50                   	push   eax
c00102b3:	e8 56 7f ff ff       	call   c000820e <File::seek(unsigned long long)>
c00102b8:	83 c4 10             	add    esp,0x10
c00102bb:	85 c0                	test   eax,eax
c00102bd:	0f 95 c0             	setne  al
c00102c0:	31 d2                	xor    edx,edx
c00102c2:	0f b6 c0             	movzx  eax,al
c00102c5:	f7 d8                	neg    eax
c00102c7:	83 d2 00             	adc    edx,0x0
c00102ca:	83 c4 08             	add    esp,0x8
c00102cd:	f7 da                	neg    edx
c00102cf:	5b                   	pop    ebx
c00102d0:	c3                   	ret    
c00102d1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102d6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102db:	83 c4 08             	add    esp,0x8
c00102de:	5b                   	pop    ebx
c00102df:	c3                   	ret    

c00102e0 <SysTell(regs*)>:
c00102e0:	53                   	push   ebx
c00102e1:	83 ec 08             	sub    esp,0x8
c00102e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00102eb:	83 f8 02             	cmp    eax,0x2
c00102ee:	76 4e                	jbe    c001033e <SysTell(regs*)+0x5e>
c00102f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102f5:	76 19                	jbe    c0010310 <SysTell(regs*)+0x30>
c00102f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102fa:	31 d2                	xor    edx,edx
c00102fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010309:	31 c0                	xor    eax,eax
c001030b:	83 c4 08             	add    esp,0x8
c001030e:	5b                   	pop    ebx
c001030f:	c3                   	ret    
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	50                   	push   eax
c0010314:	e8 1c 1c 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0010319:	5a                   	pop    edx
c001031a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001031d:	59                   	pop    ecx
c001031e:	53                   	push   ebx
c001031f:	50                   	push   eax
c0010320:	e8 95 7f ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	85 c0                	test   eax,eax
c001032a:	0f 95 c0             	setne  al
c001032d:	31 d2                	xor    edx,edx
c001032f:	0f b6 c0             	movzx  eax,al
c0010332:	f7 d8                	neg    eax
c0010334:	83 d2 00             	adc    edx,0x0
c0010337:	83 c4 08             	add    esp,0x8
c001033a:	f7 da                	neg    edx
c001033c:	5b                   	pop    ebx
c001033d:	c3                   	ret    
c001033e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010343:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010348:	83 c4 08             	add    esp,0x8
c001034b:	5b                   	pop    ebx
c001034c:	c3                   	ret    

c001034d <SysSize(regs*)>:
c001034d:	53                   	push   ebx
c001034e:	83 ec 18             	sub    esp,0x18
c0010351:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010355:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010358:	83 f8 02             	cmp    eax,0x2
c001035b:	76 5b                	jbe    c00103b8 <SysSize(regs*)+0x6b>
c001035d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010362:	76 19                	jbe    c001037d <SysSize(regs*)+0x30>
c0010364:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010367:	31 d2                	xor    edx,edx
c0010369:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001036f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010376:	31 c0                	xor    eax,eax
c0010378:	83 c4 18             	add    esp,0x18
c001037b:	5b                   	pop    ebx
c001037c:	c3                   	ret    
c001037d:	83 ec 0c             	sub    esp,0xc
c0010380:	50                   	push   eax
c0010381:	e8 af 1b 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0010386:	83 c4 10             	add    esp,0x10
c0010389:	85 c0                	test   eax,eax
c001038b:	74 2b                	je     c00103b8 <SysSize(regs*)+0x6b>
c001038d:	83 ec 04             	sub    esp,0x4
c0010390:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010394:	52                   	push   edx
c0010395:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010398:	52                   	push   edx
c0010399:	50                   	push   eax
c001039a:	e8 b3 80 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001039f:	83 c4 10             	add    esp,0x10
c00103a2:	85 c0                	test   eax,eax
c00103a4:	0f 95 c0             	setne  al
c00103a7:	31 d2                	xor    edx,edx
c00103a9:	0f b6 c0             	movzx  eax,al
c00103ac:	f7 d8                	neg    eax
c00103ae:	83 d2 00             	adc    edx,0x0
c00103b1:	83 c4 18             	add    esp,0x18
c00103b4:	f7 da                	neg    edx
c00103b6:	5b                   	pop    ebx
c00103b7:	c3                   	ret    
c00103b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103c2:	83 c4 18             	add    esp,0x18
c00103c5:	5b                   	pop    ebx
c00103c6:	c3                   	ret    

c00103c7 <SysSizeFromFilename(regs*)>:
c00103c7:	55                   	push   ebp
c00103c8:	57                   	push   edi
c00103c9:	56                   	push   esi
c00103ca:	53                   	push   ebx
c00103cb:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103d1:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103d8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00103db:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00103de:	85 f6                	test   esi,esi
c00103e0:	74 34                	je     c0010416 <SysSizeFromFilename(regs*)+0x4f>
c00103e2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00103e8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103eb:	83 f8 02             	cmp    eax,0x2
c00103ee:	76 2d                	jbe    c001041d <SysSizeFromFilename(regs*)+0x56>
c00103f0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103f5:	76 3b                	jbe    c0010432 <SysSizeFromFilename(regs*)+0x6b>
c00103f7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010400:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010407:	81 c4 5c 02 00 00    	add    esp,0x25c
c001040d:	31 c0                	xor    eax,eax
c001040f:	5b                   	pop    ebx
c0010410:	31 d2                	xor    edx,edx
c0010412:	5e                   	pop    esi
c0010413:	5f                   	pop    edi
c0010414:	5d                   	pop    ebp
c0010415:	c3                   	ret    
c0010416:	89 f8                	mov    eax,edi
c0010418:	83 f8 02             	cmp    eax,0x2
c001041b:	77 d3                	ja     c00103f0 <SysSizeFromFilename(regs*)+0x29>
c001041d:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010423:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010428:	5b                   	pop    ebx
c0010429:	ba ff ff ff ff       	mov    edx,0xffffffff
c001042e:	5e                   	pop    esi
c001042f:	5f                   	pop    edi
c0010430:	5d                   	pop    ebp
c0010431:	c3                   	ret    
c0010432:	83 ec 0c             	sub    esp,0xc
c0010435:	68 14 01 00 00       	push   0x114
c001043a:	e8 20 e5 ff ff       	call   c000e95f <malloc>
c001043f:	6a 01                	push   0x1
c0010441:	89 c5                	mov    ebp,eax
c0010443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010448:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001044b:	51                   	push   ecx
c001044c:	57                   	push   edi
c001044d:	55                   	push   ebp
c001044e:	e8 e1 7b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010453:	83 c4 1c             	add    esp,0x1c
c0010456:	8d 44 24 23          	lea    eax,[esp+0x23]
c001045a:	50                   	push   eax
c001045b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001045e:	53                   	push   ebx
c001045f:	55                   	push   ebp
c0010460:	e8 ed 7f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010465:	83 c4 10             	add    esp,0x10
c0010468:	85 ed                	test   ebp,ebp
c001046a:	74 15                	je     c0010481 <SysSizeFromFilename(regs*)+0xba>
c001046c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010470:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010473:	83 ec 0c             	sub    esp,0xc
c0010476:	55                   	push   ebp
c0010477:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001047a:	83 c4 10             	add    esp,0x10
c001047d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010481:	85 c0                	test   eax,eax
c0010483:	75 98                	jne    c001041d <SysSizeFromFilename(regs*)+0x56>
c0010485:	6a 00                	push   0x0
c0010487:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001048c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001048f:	05 0c 01 00 00       	add    eax,0x10c
c0010494:	50                   	push   eax
c0010495:	57                   	push   edi
c0010496:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001049d:	53                   	push   ebx
c001049e:	e8 77 79 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104a3:	58                   	pop    eax
c00104a4:	5a                   	pop    edx
c00104a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00104a9:	50                   	push   eax
c00104aa:	53                   	push   ebx
c00104ab:	e8 f1 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00104b0:	83 c4 10             	add    esp,0x10
c00104b3:	83 f8 01             	cmp    eax,0x1
c00104b6:	74 1a                	je     c00104d2 <SysSizeFromFilename(regs*)+0x10b>
c00104b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00104bd:	74 26                	je     c00104e5 <SysSizeFromFilename(regs*)+0x11e>
c00104bf:	85 f6                	test   esi,esi
c00104c1:	0f 84 40 ff ff ff    	je     c0010407 <SysSizeFromFilename(regs*)+0x40>
c00104c7:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00104cd:	e9 35 ff ff ff       	jmp    c0010407 <SysSizeFromFilename(regs*)+0x40>
c00104d2:	85 f6                	test   esi,esi
c00104d4:	0f 84 2d ff ff ff    	je     c0010407 <SysSizeFromFilename(regs*)+0x40>
c00104da:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00104e0:	e9 22 ff ff ff       	jmp    c0010407 <SysSizeFromFilename(regs*)+0x40>
c00104e5:	85 f6                	test   esi,esi
c00104e7:	0f 84 1a ff ff ff    	je     c0010407 <SysSizeFromFilename(regs*)+0x40>
c00104ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00104f3:	e9 0f ff ff ff       	jmp    c0010407 <SysSizeFromFilename(regs*)+0x40>

c00104f8 <SysSizeFromFilenameNoSymlink(regs*)>:
c00104f8:	55                   	push   ebp
c00104f9:	57                   	push   edi
c00104fa:	56                   	push   esi
c00104fb:	53                   	push   ebx
c00104fc:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010502:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010509:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001050c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001050f:	85 f6                	test   esi,esi
c0010511:	74 34                	je     c0010547 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010513:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010519:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001051c:	83 f8 02             	cmp    eax,0x2
c001051f:	76 2d                	jbe    c001054e <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010521:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010526:	76 3b                	jbe    c0010563 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0010528:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001052b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010531:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010538:	81 c4 5c 02 00 00    	add    esp,0x25c
c001053e:	31 c0                	xor    eax,eax
c0010540:	5b                   	pop    ebx
c0010541:	31 d2                	xor    edx,edx
c0010543:	5e                   	pop    esi
c0010544:	5f                   	pop    edi
c0010545:	5d                   	pop    ebp
c0010546:	c3                   	ret    
c0010547:	89 f8                	mov    eax,edi
c0010549:	83 f8 02             	cmp    eax,0x2
c001054c:	77 d3                	ja     c0010521 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c001054e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010554:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010559:	5b                   	pop    ebx
c001055a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001055f:	5e                   	pop    esi
c0010560:	5f                   	pop    edi
c0010561:	5d                   	pop    ebp
c0010562:	c3                   	ret    
c0010563:	83 ec 0c             	sub    esp,0xc
c0010566:	68 14 01 00 00       	push   0x114
c001056b:	e8 ef e3 ff ff       	call   c000e95f <malloc>
c0010570:	6a 00                	push   0x0
c0010572:	89 c5                	mov    ebp,eax
c0010574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010579:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001057c:	51                   	push   ecx
c001057d:	57                   	push   edi
c001057e:	55                   	push   ebp
c001057f:	e8 b0 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010584:	83 c4 1c             	add    esp,0x1c
c0010587:	8d 44 24 23          	lea    eax,[esp+0x23]
c001058b:	50                   	push   eax
c001058c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001058f:	53                   	push   ebx
c0010590:	55                   	push   ebp
c0010591:	e8 bc 7e ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010596:	83 c4 10             	add    esp,0x10
c0010599:	85 ed                	test   ebp,ebp
c001059b:	74 15                	je     c00105b2 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001059d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105a1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00105a4:	83 ec 0c             	sub    esp,0xc
c00105a7:	55                   	push   ebp
c00105a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105b2:	85 c0                	test   eax,eax
c00105b4:	75 98                	jne    c001054e <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00105b6:	6a 00                	push   0x0
c00105b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105c0:	05 0c 01 00 00       	add    eax,0x10c
c00105c5:	50                   	push   eax
c00105c6:	57                   	push   edi
c00105c7:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c00105ce:	53                   	push   ebx
c00105cf:	e8 46 78 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00105d4:	58                   	pop    eax
c00105d5:	5a                   	pop    edx
c00105d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105da:	50                   	push   eax
c00105db:	53                   	push   ebx
c00105dc:	e8 c0 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00105e1:	83 c4 10             	add    esp,0x10
c00105e4:	83 f8 01             	cmp    eax,0x1
c00105e7:	74 1a                	je     c0010603 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00105e9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00105ee:	74 26                	je     c0010616 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00105f0:	85 f6                	test   esi,esi
c00105f2:	0f 84 40 ff ff ff    	je     c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00105f8:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00105fe:	e9 35 ff ff ff       	jmp    c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010603:	85 f6                	test   esi,esi
c0010605:	0f 84 2d ff ff ff    	je     c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001060b:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010611:	e9 22 ff ff ff       	jmp    c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010616:	85 f6                	test   esi,esi
c0010618:	0f 84 1a ff ff ff    	je     c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001061e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010624:	e9 0f ff ff ff       	jmp    c0010538 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0010629 <SysClose(regs*)>:
c0010629:	56                   	push   esi
c001062a:	53                   	push   ebx
c001062b:	83 ec 04             	sub    esp,0x4
c001062e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010632:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010635:	83 f8 02             	cmp    eax,0x2
c0010638:	76 66                	jbe    c00106a0 <SysClose(regs*)+0x77>
c001063a:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010640:	83 fa 01             	cmp    edx,0x1
c0010643:	76 3d                	jbe    c0010682 <SysClose(regs*)+0x59>
c0010645:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001064a:	77 54                	ja     c00106a0 <SysClose(regs*)+0x77>
c001064c:	83 ec 0c             	sub    esp,0xc
c001064f:	50                   	push   eax
c0010650:	e8 e0 18 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	89 c6                	mov    esi,eax
c001065a:	85 c0                	test   eax,eax
c001065c:	74 2e                	je     c001068c <SysClose(regs*)+0x63>
c001065e:	83 ec 08             	sub    esp,0x8
c0010661:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010664:	50                   	push   eax
c0010665:	68 06 2a 02 c0       	push   0xc0022a06
c001066a:	e8 f5 68 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001066f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010672:	e8 37 7b ff ff       	call   c00081ae <File::close()>
c0010677:	8b 06                	mov    eax,DWORD PTR [esi]
c0010679:	89 34 24             	mov    DWORD PTR [esp],esi
c001067c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	83 c4 04             	add    esp,0x4
c0010685:	31 c0                	xor    eax,eax
c0010687:	31 d2                	xor    edx,edx
c0010689:	5b                   	pop    ebx
c001068a:	5e                   	pop    esi
c001068b:	c3                   	ret    
c001068c:	83 ec 08             	sub    esp,0x8
c001068f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010692:	52                   	push   edx
c0010693:	68 94 29 02 c0       	push   0xc0022994
c0010698:	e8 c7 68 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001069d:	83 c4 10             	add    esp,0x10
c00106a0:	83 c4 04             	add    esp,0x4
c00106a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106a8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106ad:	5b                   	pop    ebx
c00106ae:	5e                   	pop    esi
c00106af:	c3                   	ret    

c00106b0 <SysOpenDir(regs*)>:
c00106b0:	56                   	push   esi
c00106b1:	53                   	push   ebx
c00106b2:	83 ec 04             	sub    esp,0x4
c00106b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106b9:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00106bc:	85 c9                	test   ecx,ecx
c00106be:	74 5d                	je     c001071d <SysOpenDir(regs*)+0x6d>
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	68 14 01 00 00       	push   0x114
c00106c8:	e8 92 e2 ff ff       	call   c000e95f <malloc>
c00106cd:	83 c4 0c             	add    esp,0xc
c00106d0:	89 c6                	mov    esi,eax
c00106d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106da:	50                   	push   eax
c00106db:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00106de:	52                   	push   edx
c00106df:	56                   	push   esi
c00106e0:	e8 2d 7f ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00106e5:	83 c4 10             	add    esp,0x10
c00106e8:	85 f6                	test   esi,esi
c00106ea:	74 31                	je     c001071d <SysOpenDir(regs*)+0x6d>
c00106ec:	83 ec 0c             	sub    esp,0xc
c00106ef:	56                   	push   esi
c00106f0:	e8 e5 7f ff ff       	call   c00086da <Directory::open()>
c00106f5:	83 c4 10             	add    esp,0x10
c00106f8:	85 c0                	test   eax,eax
c00106fa:	75 21                	jne    c001071d <SysOpenDir(regs*)+0x6d>
c00106fc:	83 ec 0c             	sub    esp,0xc
c00106ff:	56                   	push   esi
c0010700:	e8 33 15 00 00       	call   c0011c38 <UnixFile::getFileDescriptor()>
c0010705:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010708:	83 c4 10             	add    esp,0x10
c001070b:	89 02                	mov    DWORD PTR [edx],eax
c001070d:	c1 f8 1f             	sar    eax,0x1f
c0010710:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010713:	83 c4 04             	add    esp,0x4
c0010716:	31 c0                	xor    eax,eax
c0010718:	31 d2                	xor    edx,edx
c001071a:	5b                   	pop    ebx
c001071b:	5e                   	pop    esi
c001071c:	c3                   	ret    
c001071d:	83 c4 04             	add    esp,0x4
c0010720:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010725:	ba ff ff ff ff       	mov    edx,0xffffffff
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	c3                   	ret    

c001072d <SysMakeDir(regs*)>:
c001072d:	56                   	push   esi
c001072e:	53                   	push   ebx
c001072f:	83 ec 10             	sub    esp,0x10
c0010732:	68 14 01 00 00       	push   0x114
c0010737:	e8 23 e2 ff ff       	call   c000e95f <malloc>
c001073c:	83 c4 0c             	add    esp,0xc
c001073f:	89 c3                	mov    ebx,eax
c0010741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010746:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010749:	50                   	push   eax
c001074a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001074e:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010751:	52                   	push   edx
c0010752:	53                   	push   ebx
c0010753:	e8 ba 7e ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	85 db                	test   ebx,ebx
c001075d:	74 2c                	je     c001078b <SysMakeDir(regs*)+0x5e>
c001075f:	83 ec 0c             	sub    esp,0xc
c0010762:	53                   	push   ebx
c0010763:	e8 52 81 ff ff       	call   c00088ba <Directory::create()>
c0010768:	89 c6                	mov    esi,eax
c001076a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001076c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001076f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010772:	83 c4 10             	add    esp,0x10
c0010775:	31 c0                	xor    eax,eax
c0010777:	85 f6                	test   esi,esi
c0010779:	0f 95 c0             	setne  al
c001077c:	31 d2                	xor    edx,edx
c001077e:	f7 d8                	neg    eax
c0010780:	83 d2 00             	adc    edx,0x0
c0010783:	83 c4 04             	add    esp,0x4
c0010786:	f7 da                	neg    edx
c0010788:	5b                   	pop    ebx
c0010789:	5e                   	pop    esi
c001078a:	c3                   	ret    
c001078b:	83 c4 04             	add    esp,0x4
c001078e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010793:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010798:	5b                   	pop    ebx
c0010799:	5e                   	pop    esi
c001079a:	c3                   	ret    

c001079b <SysCloseDir(regs*)>:
c001079b:	56                   	push   esi
c001079c:	53                   	push   ebx
c001079d:	83 ec 04             	sub    esp,0x4
c00107a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107a7:	8d 50 fd             	lea    edx,[eax-0x3]
c00107aa:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00107b0:	77 54                	ja     c0010806 <SysCloseDir(regs*)+0x6b>
c00107b2:	83 ec 0c             	sub    esp,0xc
c00107b5:	50                   	push   eax
c00107b6:	e8 7a 17 00 00       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	89 c6                	mov    esi,eax
c00107c0:	85 c0                	test   eax,eax
c00107c2:	74 2e                	je     c00107f2 <SysCloseDir(regs*)+0x57>
c00107c4:	83 ec 08             	sub    esp,0x8
c00107c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107ca:	50                   	push   eax
c00107cb:	68 11 2a 02 c0       	push   0xc0022a11
c00107d0:	e8 8f 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00107d5:	89 34 24             	mov    DWORD PTR [esp],esi
c00107d8:	e8 59 7f ff ff       	call   c0008736 <Directory::close()>
c00107dd:	8b 06                	mov    eax,DWORD PTR [esi]
c00107df:	89 34 24             	mov    DWORD PTR [esp],esi
c00107e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107e5:	83 c4 10             	add    esp,0x10
c00107e8:	31 c0                	xor    eax,eax
c00107ea:	83 c4 04             	add    esp,0x4
c00107ed:	31 d2                	xor    edx,edx
c00107ef:	5b                   	pop    ebx
c00107f0:	5e                   	pop    esi
c00107f1:	c3                   	ret    
c00107f2:	83 ec 08             	sub    esp,0x8
c00107f5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00107f8:	52                   	push   edx
c00107f9:	68 cc 29 02 c0       	push   0xc00229cc
c00107fe:	e8 61 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	83 c4 04             	add    esp,0x4
c0010809:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001080e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	c3                   	ret    

c0010816 <SysWait(regs*)>:
c0010816:	83 ec 10             	sub    esp,0x10
c0010819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001081d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010820:	52                   	push   edx
c0010821:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010824:	51                   	push   ecx
c0010825:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010828:	50                   	push   eax
c0010829:	e8 f2 4f 00 00       	call   c0015820 <waitTask(int, int*, int)>
c001082e:	83 c4 1c             	add    esp,0x1c
c0010831:	89 c2                	mov    edx,eax
c0010833:	c1 fa 1f             	sar    edx,0x1f
c0010836:	c3                   	ret    

c0010837 <SysNotImpl(regs*)>:
c0010837:	83 ec 18             	sub    esp,0x18
c001083a:	68 1f 2a 02 c0       	push   0xc0022a1f
c001083f:	e8 62 e4 ff ff       	call   c000eca6 <KePanic(char const*)>
c0010844:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010849:	ba ff ff ff ff       	mov    edx,0xffffffff
c001084e:	83 c4 1c             	add    esp,0x1c
c0010851:	c3                   	ret    

c0010852 <SysPanic(regs*)>:
c0010852:	83 ec 18             	sub    esp,0x18
c0010855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010859:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001085c:	50                   	push   eax
c001085d:	e8 44 e4 ff ff       	call   c000eca6 <KePanic(char const*)>
c0010862:	b8 01 00 00 00       	mov    eax,0x1
c0010867:	31 d2                	xor    edx,edx
c0010869:	83 c4 1c             	add    esp,0x1c
c001086c:	c3                   	ret    

c001086d <SysRmdir(regs*)>:
c001086d:	56                   	push   esi
c001086e:	53                   	push   ebx
c001086f:	83 ec 20             	sub    esp,0x20
c0010872:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010876:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010879:	68 14 01 00 00       	push   0x114
c001087e:	e8 dc e0 ff ff       	call   c000e95f <malloc>
c0010883:	6a 00                	push   0x0
c0010885:	89 c3                	mov    ebx,eax
c0010887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001088c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001088f:	50                   	push   eax
c0010890:	56                   	push   esi
c0010891:	53                   	push   ebx
c0010892:	e8 9d 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010897:	83 c4 14             	add    esp,0x14
c001089a:	53                   	push   ebx
c001089b:	e8 7e 7a ff ff       	call   c000831e <File::unlink()>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	85 db                	test   ebx,ebx
c00108a5:	74 14                	je     c00108bb <SysRmdir(regs*)+0x4e>
c00108a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108ad:	83 ec 0c             	sub    esp,0xc
c00108b0:	53                   	push   ebx
c00108b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108b4:	83 c4 10             	add    esp,0x10
c00108b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108bb:	85 c0                	test   eax,eax
c00108bd:	0f 95 c0             	setne  al
c00108c0:	31 d2                	xor    edx,edx
c00108c2:	0f b6 c0             	movzx  eax,al
c00108c5:	f7 d8                	neg    eax
c00108c7:	83 d2 00             	adc    edx,0x0
c00108ca:	83 c4 14             	add    esp,0x14
c00108cd:	f7 da                	neg    edx
c00108cf:	5b                   	pop    ebx
c00108d0:	5e                   	pop    esi
c00108d1:	c3                   	ret    

c00108d2 <SysUnlink(regs*)>:
c00108d2:	56                   	push   esi
c00108d3:	53                   	push   ebx
c00108d4:	83 ec 20             	sub    esp,0x20
c00108d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108db:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108de:	68 14 01 00 00       	push   0x114
c00108e3:	e8 77 e0 ff ff       	call   c000e95f <malloc>
c00108e8:	6a 00                	push   0x0
c00108ea:	89 c3                	mov    ebx,eax
c00108ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108f4:	50                   	push   eax
c00108f5:	56                   	push   esi
c00108f6:	53                   	push   ebx
c00108f7:	e8 38 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00108fc:	83 c4 14             	add    esp,0x14
c00108ff:	53                   	push   ebx
c0010900:	e8 19 7a ff ff       	call   c000831e <File::unlink()>
c0010905:	83 c4 10             	add    esp,0x10
c0010908:	85 db                	test   ebx,ebx
c001090a:	74 14                	je     c0010920 <SysUnlink(regs*)+0x4e>
c001090c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010910:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	53                   	push   ebx
c0010916:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010920:	85 c0                	test   eax,eax
c0010922:	0f 95 c0             	setne  al
c0010925:	31 d2                	xor    edx,edx
c0010927:	0f b6 c0             	movzx  eax,al
c001092a:	f7 d8                	neg    eax
c001092c:	83 d2 00             	adc    edx,0x0
c001092f:	83 c4 14             	add    esp,0x14
c0010932:	f7 da                	neg    edx
c0010934:	5b                   	pop    ebx
c0010935:	5e                   	pop    esi
c0010936:	c3                   	ret    

c0010937 <SysGetArgv(regs*)>:
c0010937:	83 ec 0c             	sub    esp,0xc
c001093a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001093e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010941:	85 c0                	test   eax,eax
c0010943:	78 2c                	js     c0010971 <SysGetArgv(regs*)+0x3a>
c0010945:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001094b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001094e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010954:	7d 1b                	jge    c0010971 <SysGetArgv(regs*)+0x3a>
c0010956:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001095d:	85 c0                	test   eax,eax
c001095f:	74 18                	je     c0010979 <SysGetArgv(regs*)+0x42>
c0010961:	83 ec 08             	sub    esp,0x8
c0010964:	50                   	push   eax
c0010965:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010968:	50                   	push   eax
c0010969:	e8 d2 fc fe ff       	call   c0000640 <strcpy>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	31 c0                	xor    eax,eax
c0010973:	31 d2                	xor    edx,edx
c0010975:	83 c4 0c             	add    esp,0xc
c0010978:	c3                   	ret    
c0010979:	b8 01 00 00 00       	mov    eax,0x1
c001097e:	31 d2                	xor    edx,edx
c0010980:	83 c4 0c             	add    esp,0xc
c0010983:	c3                   	ret    

c0010984 <SysUSleep(regs*)>:
c0010984:	83 ec 1c             	sub    esp,0x1c
c0010987:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001098b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001098e:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010991:	6a 00                	push   0x0
c0010993:	6a 64                	push   0x64
c0010995:	52                   	push   edx
c0010996:	50                   	push   eax
c0010997:	e8 c8 f6 00 00       	call   c0020064 <__udivdi3>
c001099c:	83 c4 14             	add    esp,0x14
c001099f:	50                   	push   eax
c00109a0:	e8 67 4f 00 00       	call   c001590c <milliTenthSleep(unsigned int)>
c00109a5:	31 c0                	xor    eax,eax
c00109a7:	31 d2                	xor    edx,edx
c00109a9:	83 c4 1c             	add    esp,0x1c
c00109ac:	c3                   	ret    

c00109ad <SysSpawn(regs*)>:
c00109ad:	56                   	push   esi
c00109ae:	53                   	push   ebx
c00109af:	83 ec 04             	sub    esp,0x4
c00109b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109b6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109b9:	85 f6                	test   esi,esi
c00109bb:	75 0a                	jne    c00109c7 <SysSpawn(regs*)+0x1a>
c00109bd:	83 c4 04             	add    esp,0x4
c00109c0:	31 c0                	xor    eax,eax
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	5b                   	pop    ebx
c00109c5:	5e                   	pop    esi
c00109c6:	c3                   	ret    
c00109c7:	83 ec 0c             	sub    esp,0xc
c00109ca:	68 24 07 00 00       	push   0x724
c00109cf:	e8 8b df ff ff       	call   c000e95f <malloc>
c00109d4:	83 c4 10             	add    esp,0x10
c00109d7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00109da:	89 c6                	mov    esi,eax
c00109dc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00109df:	85 c9                	test   ecx,ecx
c00109e1:	75 39                	jne    c0010a1c <SysSpawn(regs*)+0x6f>
c00109e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109eb:	52                   	push   edx
c00109ec:	50                   	push   eax
c00109ed:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00109f0:	50                   	push   eax
c00109f1:	56                   	push   esi
c00109f2:	e8 99 46 00 00       	call   c0015090 <Process::Process(char const*, Process*, char**)>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010a01:	75 ba                	jne    c00109bd <SysSpawn(regs*)+0x10>
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	56                   	push   esi
c0010a07:	e8 c4 4b 00 00       	call   c00155d0 <Process::createUserThread()>
c0010a0c:	8b 06                	mov    eax,DWORD PTR [esi]
c0010a0e:	83 c4 10             	add    esp,0x10
c0010a11:	89 c2                	mov    edx,eax
c0010a13:	83 c4 04             	add    esp,0x4
c0010a16:	c1 fa 1f             	sar    edx,0x1f
c0010a19:	5b                   	pop    ebx
c0010a1a:	5e                   	pop    esi
c0010a1b:	c3                   	ret    
c0010a1c:	31 c0                	xor    eax,eax
c0010a1e:	eb cb                	jmp    c00109eb <SysSpawn(regs*)+0x3e>

c0010a20 <SysGetEnv(regs*)>:
c0010a20:	57                   	push   edi
c0010a21:	56                   	push   esi
c0010a22:	53                   	push   ebx
c0010a23:	83 ec 1c             	sub    esp,0x1c
c0010a26:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a2f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a32:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a35:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010a38:	51                   	push   ecx
c0010a39:	e8 49 d2 ff ff       	call   c000dc87 <KeGetProcessTotalEnvCount(Process*)>
c0010a3e:	83 c4 10             	add    esp,0x10
c0010a41:	39 c7                	cmp    edi,eax
c0010a43:	7c 14                	jl     c0010a59 <SysGetEnv(regs*)+0x39>
c0010a45:	85 f6                	test   esi,esi
c0010a47:	75 0b                	jne    c0010a54 <SysGetEnv(regs*)+0x34>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	31 c0                	xor    eax,eax
c0010a4e:	5b                   	pop    ebx
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	5e                   	pop    esi
c0010a52:	5f                   	pop    edi
c0010a53:	c3                   	ret    
c0010a54:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a57:	eb f0                	jmp    c0010a49 <SysGetEnv(regs*)+0x29>
c0010a59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a5d:	83 ec 04             	sub    esp,0x4
c0010a60:	57                   	push   edi
c0010a61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a67:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a6a:	57                   	push   edi
c0010a6b:	50                   	push   eax
c0010a6c:	e8 36 d2 ff ff       	call   c000dca7 <KeGetProcessEnvPair(Process*, int)>
c0010a71:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a7c:	83 c4 0c             	add    esp,0xc
c0010a7f:	85 d2                	test   edx,edx
c0010a81:	75 23                	jne    c0010aa6 <SysGetEnv(regs*)+0x86>
c0010a83:	83 ec 0c             	sub    esp,0xc
c0010a86:	50                   	push   eax
c0010a87:	e8 e4 fa fe ff       	call   c0000570 <strlen>
c0010a8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a8f:	89 c3                	mov    ebx,eax
c0010a91:	e8 da fa fe ff       	call   c0000570 <strlen>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	31 d2                	xor    edx,edx
c0010aa2:	5b                   	pop    ebx
c0010aa3:	5e                   	pop    esi
c0010aa4:	5f                   	pop    edi
c0010aa5:	c3                   	ret    
c0010aa6:	83 ec 08             	sub    esp,0x8
c0010aa9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010aac:	50                   	push   eax
c0010aad:	56                   	push   esi
c0010aae:	e8 8d fb fe ff       	call   c0000640 <strcpy>
c0010ab3:	58                   	pop    eax
c0010ab4:	5a                   	pop    edx
c0010ab5:	68 39 2a 02 c0       	push   0xc0022a39
c0010aba:	56                   	push   esi
c0010abb:	e8 80 fd fe ff       	call   c0000840 <strcat>
c0010ac0:	59                   	pop    ecx
c0010ac1:	5b                   	pop    ebx
c0010ac2:	57                   	push   edi
c0010ac3:	56                   	push   esi
c0010ac4:	e8 77 fd fe ff       	call   c0000840 <strcat>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	e9 78 ff ff ff       	jmp    c0010a49 <SysGetEnv(regs*)+0x29>

c0010ad1 <SysSetFatAttrib(regs*)>:
c0010ad1:	57                   	push   edi
c0010ad2:	56                   	push   esi
c0010ad3:	53                   	push   ebx
c0010ad4:	83 ec 1c             	sub    esp,0x1c
c0010ad7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010adb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010ade:	68 14 01 00 00       	push   0x114
c0010ae3:	e8 77 de ff ff       	call   c000e95f <malloc>
c0010ae8:	83 c4 0c             	add    esp,0xc
c0010aeb:	89 c3                	mov    ebx,eax
c0010aed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010af2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010af5:	50                   	push   eax
c0010af6:	57                   	push   edi
c0010af7:	53                   	push   ebx
c0010af8:	e8 35 76 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010afd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b00:	83 c4 0c             	add    esp,0xc
c0010b03:	0f b6 d4             	movzx  edx,ah
c0010b06:	0f b6 c0             	movzx  eax,al
c0010b09:	52                   	push   edx
c0010b0a:	50                   	push   eax
c0010b0b:	53                   	push   ebx
c0010b0c:	e8 a7 78 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	85 db                	test   ebx,ebx
c0010b16:	74 14                	je     c0010b2c <SysSetFatAttrib(regs*)+0x5b>
c0010b18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b1c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b1e:	83 ec 0c             	sub    esp,0xc
c0010b21:	53                   	push   ebx
c0010b22:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2c:	85 c0                	test   eax,eax
c0010b2e:	0f 95 c0             	setne  al
c0010b31:	31 d2                	xor    edx,edx
c0010b33:	0f b6 c0             	movzx  eax,al
c0010b36:	f7 d8                	neg    eax
c0010b38:	83 d2 00             	adc    edx,0x0
c0010b3b:	83 c4 10             	add    esp,0x10
c0010b3e:	f7 da                	neg    edx
c0010b40:	5b                   	pop    ebx
c0010b41:	5e                   	pop    esi
c0010b42:	5f                   	pop    edi
c0010b43:	c3                   	ret    

c0010b44 <SysShutdown(regs*)>:
c0010b44:	83 ec 1c             	sub    esp,0x1c
c0010b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b4b:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010b4e:	85 c9                	test   ecx,ecx
c0010b50:	74 18                	je     c0010b6a <SysShutdown(regs*)+0x26>
c0010b52:	83 f9 01             	cmp    ecx,0x1
c0010b55:	74 26                	je     c0010b7d <SysShutdown(regs*)+0x39>
c0010b57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b61:	83 f9 02             	cmp    ecx,0x2
c0010b64:	74 24                	je     c0010b8a <SysShutdown(regs*)+0x46>
c0010b66:	83 c4 1c             	add    esp,0x1c
c0010b69:	c3                   	ret    
c0010b6a:	e8 91 cb ff ff       	call   c000d700 <KeShutdown()>
c0010b6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b74:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b79:	83 c4 1c             	add    esp,0x1c
c0010b7c:	c3                   	ret    
c0010b7d:	e8 a2 cb ff ff       	call   c000d724 <KeSleep()>
c0010b82:	31 c0                	xor    eax,eax
c0010b84:	31 d2                	xor    edx,edx
c0010b86:	83 c4 1c             	add    esp,0x1c
c0010b89:	c3                   	ret    
c0010b8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010b92:	e8 99 cb ff ff       	call   c000d730 <KeRestart()>
c0010b97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010b9f:	eb c5                	jmp    c0010b66 <SysShutdown(regs*)+0x22>

c0010ba1 <SysPipe(regs*)>:
c0010ba1:	57                   	push   edi
c0010ba2:	56                   	push   esi
c0010ba3:	53                   	push   ebx
c0010ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010bae:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010bb1:	6a 20                	push   0x20
c0010bb3:	e8 a7 dd ff ff       	call   c000e95f <malloc>
c0010bb8:	89 c3                	mov    ebx,eax
c0010bba:	58                   	pop    eax
c0010bbb:	5a                   	pop    edx
c0010bbc:	68 00 50 00 00       	push   0x5000
c0010bc1:	53                   	push   ebx
c0010bc2:	e8 61 e9 ff ff       	call   c000f528 <Pipe::Pipe(int)>
c0010bc7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bca:	e8 69 10 00 00       	call   c0011c38 <UnixFile::getFileDescriptor()>
c0010bcf:	89 07                	mov    DWORD PTR [edi],eax
c0010bd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bd4:	e8 5f 10 00 00       	call   c0011c38 <UnixFile::getFileDescriptor()>
c0010bd9:	83 c4 10             	add    esp,0x10
c0010bdc:	89 06                	mov    DWORD PTR [esi],eax
c0010bde:	31 d2                	xor    edx,edx
c0010be0:	5b                   	pop    ebx
c0010be1:	31 c0                	xor    eax,eax
c0010be3:	5e                   	pop    esi
c0010be4:	5f                   	pop    edi
c0010be5:	c3                   	ret    

c0010be6 <SysGetUnixTime(regs*)>:
c0010be6:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0010beb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010bf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010bf5:	e9 bc 7f ff ff       	jmp    c0008bb6 <Clock::timeInSecondsLocal()>

c0010bfa <string_ends_with(char const*, char const*)>:
c0010bfa:	57                   	push   edi
c0010bfb:	56                   	push   esi
c0010bfc:	53                   	push   ebx
c0010bfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010c05:	83 ec 0c             	sub    esp,0xc
c0010c08:	53                   	push   ebx
c0010c09:	e8 62 f9 fe ff       	call   c0000570 <strlen>
c0010c0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c11:	89 c6                	mov    esi,eax
c0010c13:	e8 58 f9 fe ff       	call   c0000570 <strlen>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	39 c6                	cmp    esi,eax
c0010c1d:	7d 06                	jge    c0010c25 <string_ends_with(char const*, char const*)+0x2b>
c0010c1f:	5b                   	pop    ebx
c0010c20:	31 c0                	xor    eax,eax
c0010c22:	5e                   	pop    esi
c0010c23:	5f                   	pop    edi
c0010c24:	c3                   	ret    
c0010c25:	83 ec 08             	sub    esp,0x8
c0010c28:	29 c6                	sub    esi,eax
c0010c2a:	57                   	push   edi
c0010c2b:	01 f3                	add    ebx,esi
c0010c2d:	53                   	push   ebx
c0010c2e:	e8 1d fb fe ff       	call   c0000750 <strcmp>
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	85 c0                	test   eax,eax
c0010c38:	5b                   	pop    ebx
c0010c39:	0f 94 c0             	sete   al
c0010c3c:	5e                   	pop    esi
c0010c3d:	0f b6 c0             	movzx  eax,al
c0010c40:	5f                   	pop    edi
c0010c41:	c3                   	ret    

c0010c42 <SysOpen(regs*)>:
c0010c42:	56                   	push   esi
c0010c43:	53                   	push   ebx
c0010c44:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c4a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c51:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c54:	85 c0                	test   eax,eax
c0010c56:	0f 84 bc 01 00 00    	je     c0010e18 <SysOpen(regs*)+0x1d6>
c0010c5c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c5f:	85 c0                	test   eax,eax
c0010c61:	0f 84 b1 01 00 00    	je     c0010e18 <SysOpen(regs*)+0x1d6>
c0010c67:	6a 00                	push   0x0
c0010c69:	68 3b 2a 02 c0       	push   0xc0022a3b
c0010c6e:	50                   	push   eax
c0010c6f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c73:	56                   	push   esi
c0010c74:	e8 a1 71 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010c79:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c7c:	e8 ef f8 fe ff       	call   c0000570 <strlen>
c0010c81:	83 c4 10             	add    esp,0x10
c0010c84:	83 e8 01             	sub    eax,0x1
c0010c87:	74 21                	je     c0010caa <SysOpen(regs*)+0x68>
c0010c89:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010c8d:	eb 12                	jmp    c0010ca1 <SysOpen(regs*)+0x5f>
c0010c8f:	83 fa 3a             	cmp    edx,0x3a
c0010c92:	74 12                	je     c0010ca6 <SysOpen(regs*)+0x64>
c0010c94:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c98:	83 e8 01             	sub    eax,0x1
c0010c9b:	74 0d                	je     c0010caa <SysOpen(regs*)+0x68>
c0010c9d:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010ca1:	83 fa 2e             	cmp    edx,0x2e
c0010ca4:	75 e9                	jne    c0010c8f <SysOpen(regs*)+0x4d>
c0010ca6:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010caa:	83 ec 08             	sub    esp,0x8
c0010cad:	68 3f 2a 02 c0       	push   0xc0022a3f
c0010cb2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cb5:	50                   	push   eax
c0010cb6:	e8 3f ff ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010cbb:	83 c4 10             	add    esp,0x10
c0010cbe:	85 c0                	test   eax,eax
c0010cc0:	74 1d                	je     c0010cdf <SysOpen(regs*)+0x9d>
c0010cc2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cc5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ccb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cd2:	81 c4 04 01 00 00    	add    esp,0x104
c0010cd8:	31 c0                	xor    eax,eax
c0010cda:	31 d2                	xor    edx,edx
c0010cdc:	5b                   	pop    ebx
c0010cdd:	5e                   	pop    esi
c0010cde:	c3                   	ret    
c0010cdf:	83 ec 08             	sub    esp,0x8
c0010ce2:	68 44 2a 02 c0       	push   0xc0022a44
c0010ce7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cea:	50                   	push   eax
c0010ceb:	e8 0a ff ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010cf0:	83 c4 10             	add    esp,0x10
c0010cf3:	85 c0                	test   eax,eax
c0010cf5:	75 cb                	jne    c0010cc2 <SysOpen(regs*)+0x80>
c0010cf7:	83 ec 08             	sub    esp,0x8
c0010cfa:	68 40 2a 02 c0       	push   0xc0022a40
c0010cff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d02:	50                   	push   eax
c0010d03:	e8 48 fa fe ff       	call   c0000750 <strcmp>
c0010d08:	83 c4 10             	add    esp,0x10
c0010d0b:	85 c0                	test   eax,eax
c0010d0d:	74 b3                	je     c0010cc2 <SysOpen(regs*)+0x80>
c0010d0f:	83 ec 08             	sub    esp,0x8
c0010d12:	68 3f 2a 02 c0       	push   0xc0022a3f
c0010d17:	56                   	push   esi
c0010d18:	e8 dd fe ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010d1d:	83 c4 10             	add    esp,0x10
c0010d20:	85 c0                	test   eax,eax
c0010d22:	75 9e                	jne    c0010cc2 <SysOpen(regs*)+0x80>
c0010d24:	83 ec 08             	sub    esp,0x8
c0010d27:	68 49 2a 02 c0       	push   0xc0022a49
c0010d2c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d2f:	50                   	push   eax
c0010d30:	e8 c5 fe ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	85 c0                	test   eax,eax
c0010d3a:	0f 85 eb 00 00 00    	jne    c0010e2b <SysOpen(regs*)+0x1e9>
c0010d40:	83 ec 08             	sub    esp,0x8
c0010d43:	68 4e 2a 02 c0       	push   0xc0022a4e
c0010d48:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d4b:	50                   	push   eax
c0010d4c:	e8 a9 fe ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010d51:	83 c4 10             	add    esp,0x10
c0010d54:	85 c0                	test   eax,eax
c0010d56:	0f 85 cf 00 00 00    	jne    c0010e2b <SysOpen(regs*)+0x1e9>
c0010d5c:	83 ec 08             	sub    esp,0x8
c0010d5f:	68 4a 2a 02 c0       	push   0xc0022a4a
c0010d64:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d67:	51                   	push   ecx
c0010d68:	e8 e3 f9 fe ff       	call   c0000750 <strcmp>
c0010d6d:	83 c4 10             	add    esp,0x10
c0010d70:	85 c0                	test   eax,eax
c0010d72:	0f 84 b3 00 00 00    	je     c0010e2b <SysOpen(regs*)+0x1e9>
c0010d78:	83 ec 08             	sub    esp,0x8
c0010d7b:	68 49 2a 02 c0       	push   0xc0022a49
c0010d80:	56                   	push   esi
c0010d81:	e8 74 fe ff ff       	call   c0010bfa <string_ends_with(char const*, char const*)>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	85 c0                	test   eax,eax
c0010d8b:	0f 85 9a 00 00 00    	jne    c0010e2b <SysOpen(regs*)+0x1e9>
c0010d91:	83 ec 0c             	sub    esp,0xc
c0010d94:	68 14 01 00 00       	push   0x114
c0010d99:	e8 c1 db ff ff       	call   c000e95f <malloc>
c0010d9e:	83 c4 0c             	add    esp,0xc
c0010da1:	89 c6                	mov    esi,eax
c0010da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dab:	50                   	push   eax
c0010dac:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010daf:	52                   	push   edx
c0010db0:	56                   	push   esi
c0010db1:	e8 7c 73 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0010db6:	83 c4 10             	add    esp,0x10
c0010db9:	85 f6                	test   esi,esi
c0010dbb:	74 5b                	je     c0010e18 <SysOpen(regs*)+0x1d6>
c0010dbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010dc0:	0f b6 c2             	movzx  eax,dl
c0010dc3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010dc6:	89 d0                	mov    eax,edx
c0010dc8:	83 e0 01             	and    eax,0x1
c0010dcb:	f6 c2 02             	test   dl,0x2
c0010dce:	74 03                	je     c0010dd3 <SysOpen(regs*)+0x191>
c0010dd0:	83 c8 02             	or     eax,0x2
c0010dd3:	f6 c2 04             	test   dl,0x4
c0010dd6:	74 03                	je     c0010ddb <SysOpen(regs*)+0x199>
c0010dd8:	83 c8 04             	or     eax,0x4
c0010ddb:	f6 c2 08             	test   dl,0x8
c0010dde:	74 03                	je     c0010de3 <SysOpen(regs*)+0x1a1>
c0010de0:	83 c8 0a             	or     eax,0xa
c0010de3:	80 e2 10             	and    dl,0x10
c0010de6:	74 03                	je     c0010deb <SysOpen(regs*)+0x1a9>
c0010de8:	83 c8 12             	or     eax,0x12
c0010deb:	83 ec 08             	sub    esp,0x8
c0010dee:	50                   	push   eax
c0010def:	56                   	push   esi
c0010df0:	e8 5b 73 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0010df5:	83 c4 10             	add    esp,0x10
c0010df8:	85 c0                	test   eax,eax
c0010dfa:	75 1c                	jne    c0010e18 <SysOpen(regs*)+0x1d6>
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	56                   	push   esi
c0010e00:	e8 33 0e 00 00       	call   c0011c38 <UnixFile::getFileDescriptor()>
c0010e05:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e08:	83 c4 10             	add    esp,0x10
c0010e0b:	89 02                	mov    DWORD PTR [edx],eax
c0010e0d:	c1 f8 1f             	sar    eax,0x1f
c0010e10:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e13:	e9 ba fe ff ff       	jmp    c0010cd2 <SysOpen(regs*)+0x90>
c0010e18:	81 c4 04 01 00 00    	add    esp,0x104
c0010e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e28:	5b                   	pop    ebx
c0010e29:	5e                   	pop    esi
c0010e2a:	c3                   	ret    
c0010e2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e2e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010e34:	e9 92 fe ff ff       	jmp    c0010ccb <SysOpen(regs*)+0x89>

c0010e39 <KeSystemCall(regs*, void*)>:
c0010e39:	53                   	push   ebx
c0010e3a:	83 ec 08             	sub    esp,0x8
c0010e3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e41:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010e44:	83 f8 40             	cmp    eax,0x40
c0010e47:	77 29                	ja     c0010e72 <KeSystemCall(regs*, void*)+0x39>
c0010e49:	83 3c 85 60 4c 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdb3a0],0x0
c0010e51:	74 1f                	je     c0010e72 <KeSystemCall(regs*, void*)+0x39>
c0010e53:	51                   	push   ecx
c0010e54:	51                   	push   ecx
c0010e55:	50                   	push   eax
c0010e56:	68 53 2a 02 c0       	push   0xc0022a53
c0010e5b:	e8 04 61 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010e63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e66:	ff 14 85 60 4c 02 c0 	call   DWORD PTR [eax*4-0x3ffdb3a0]
c0010e6d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010e70:	eb 0d                	jmp    c0010e7f <KeSystemCall(regs*, void*)+0x46>
c0010e72:	52                   	push   edx
c0010e73:	52                   	push   edx
c0010e74:	50                   	push   eax
c0010e75:	68 70 2a 02 c0       	push   0xc0022a70
c0010e7a:	e8 e5 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e87:	31 d2                	xor    edx,edx
c0010e89:	83 c4 08             	add    esp,0x8
c0010e8c:	5b                   	pop    ebx
c0010e8d:	c3                   	ret    

c0010e8e <VgaText::isAtty()>:
c0010e8e:	b0 01                	mov    al,0x1
c0010e90:	c3                   	ret    
c0010e91:	90                   	nop

c0010e92 <VgaText::~VgaText()>:
c0010e92:	83 ec 0c             	sub    esp,0xc
c0010e95:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c0010e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9e:	89 10                	mov    DWORD PTR [eax],edx
c0010ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ea4:	83 ec 0c             	sub    esp,0xc
c0010ea7:	50                   	push   eax
c0010ea8:	e8 79 0f 00 00       	call   c0011e26 <UnixFile::~UnixFile()>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	90                   	nop
c0010eb1:	83 c4 0c             	add    esp,0xc
c0010eb4:	c3                   	ret    
c0010eb5:	90                   	nop

c0010eb6 <VgaText::~VgaText()>:
c0010eb6:	83 ec 0c             	sub    esp,0xc
c0010eb9:	83 ec 0c             	sub    esp,0xc
c0010ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ec0:	e8 cd ff ff ff       	call   c0010e92 <VgaText::~VgaText()>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	83 ec 08             	sub    esp,0x8
c0010ecb:	68 84 01 00 00       	push   0x184
c0010ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed4:	e8 eb b7 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0010ed9:	83 c4 10             	add    esp,0x10
c0010edc:	83 c4 0c             	add    esp,0xc
c0010edf:	c3                   	ret    

c0010ee0 <VgaText::read(unsigned long long, void*, int*)>:
c0010ee0:	83 ec 10             	sub    esp,0x10
c0010ee3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010eeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eef:	e8 c1 8c ff ff       	call   c0009bb5 <readKeyboard(VgaText*, char*, unsigned long)>
c0010ef4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010ef8:	89 02                	mov    DWORD PTR [edx],eax
c0010efa:	31 c0                	xor    eax,eax
c0010efc:	83 c4 1c             	add    esp,0x1c
c0010eff:	c3                   	ret    

c0010f00 <setTerminalScrollLock(bool)>:
c0010f00:	c3                   	ret    

c0010f01 <doTerminalCycle()>:
c0010f01:	c3                   	ret    

c0010f02 <addToTerminalCycle(VgaText*)>:
c0010f02:	c3                   	ret    

c0010f03 <scrollTerminalScrollLock(int)>:
c0010f03:	c3                   	ret    

c0010f04 <VgaText::updateTitle()>:
c0010f04:	c3                   	ret    
c0010f05:	90                   	nop

c0010f06 <VgaText::load()>:
c0010f06:	c3                   	ret    
c0010f07:	90                   	nop

c0010f08 <VgaText::updateCursor()>:
c0010f08:	83 ec 14             	sub    esp,0x14
c0010f0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f0f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010f12:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010f15:	e8 3a 8a 00 00       	call   c0019954 <HalConsoleCursorUpdate(int, int)>
c0010f1a:	83 c4 1c             	add    esp,0x1c
c0010f1d:	c3                   	ret    

c0010f1e <VgaText::doANSI_SGR(int)>:
c0010f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f26:	85 d2                	test   edx,edx
c0010f28:	75 0b                	jne    c0010f35 <VgaText::doANSI_SGR(int)+0x17>
c0010f2a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010f2d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f30:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f33:	eb 59                	jmp    c0010f8e <VgaText::doANSI_SGR(int)+0x70>
c0010f35:	83 fa 07             	cmp    edx,0x7
c0010f38:	75 0b                	jne    c0010f45 <VgaText::doANSI_SGR(int)+0x27>
c0010f3a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010f3d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010f40:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010f43:	eb 49                	jmp    c0010f8e <VgaText::doANSI_SGR(int)+0x70>
c0010f45:	83 fa 1b             	cmp    edx,0x1b
c0010f48:	74 e0                	je     c0010f2a <VgaText::doANSI_SGR(int)+0xc>
c0010f4a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010f4d:	83 f9 07             	cmp    ecx,0x7
c0010f50:	77 09                	ja     c0010f5b <VgaText::doANSI_SGR(int)+0x3d>
c0010f52:	8b 14 8d a0 4d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb260]
c0010f59:	eb 20                	jmp    c0010f7b <VgaText::doANSI_SGR(int)+0x5d>
c0010f5b:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f5e:	83 f9 07             	cmp    ecx,0x7
c0010f61:	77 09                	ja     c0010f6c <VgaText::doANSI_SGR(int)+0x4e>
c0010f63:	8b 14 8d a0 4d 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdb260]
c0010f6a:	eb 22                	jmp    c0010f8e <VgaText::doANSI_SGR(int)+0x70>
c0010f6c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010f6f:	83 f9 07             	cmp    ecx,0x7
c0010f72:	77 0b                	ja     c0010f7f <VgaText::doANSI_SGR(int)+0x61>
c0010f74:	8b 14 95 58 4c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb3a8]
c0010f7b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f7e:	c3                   	ret    
c0010f7f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010f82:	83 f9 07             	cmp    ecx,0x7
c0010f85:	77 0a                	ja     c0010f91 <VgaText::doANSI_SGR(int)+0x73>
c0010f87:	8b 14 95 30 4c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb3d0]
c0010f8e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f91:	c3                   	ret    

c0010f92 <VgaText::setDefaultBgColour(VgaColour)>:
c0010f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f9a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f9d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010fa0:	c3                   	ret    
c0010fa1:	90                   	nop

c0010fa2 <VgaText::setDefaultFgColour(VgaColour)>:
c0010fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010faa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010fad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010fb0:	c3                   	ret    
c0010fb1:	90                   	nop

c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010fb2:	53                   	push   ebx
c0010fb3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fb7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fbf:	51                   	push   ecx
c0010fc0:	e8 cd ff ff ff       	call   c0010f92 <VgaText::setDefaultBgColour(VgaColour)>
c0010fc5:	58                   	pop    eax
c0010fc6:	5a                   	pop    edx
c0010fc7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010fcb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fcf:	5b                   	pop    ebx
c0010fd0:	eb d0                	jmp    c0010fa2 <VgaText::setDefaultFgColour(VgaColour)>

c0010fd2 <VgaText::setTitleTextColour(VgaColour)>:
c0010fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fda:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010fdd:	c3                   	ret    

c0010fde <VgaText::setTitleColour(VgaColour)>:
c0010fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010fe9:	c3                   	ret    

c0010fea <VgaText::setTitle(char*)>:
c0010fea:	c3                   	ret    
c0010feb:	90                   	nop

c0010fec <VgaText::combineColours(unsigned char, unsigned char)>:
c0010fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010ff5:	83 e0 0f             	and    eax,0xf
c0010ff8:	c1 e2 04             	shl    edx,0x4
c0010ffb:	09 d0                	or     eax,edx
c0010ffd:	c3                   	ret    

c0010ffe <VgaText::scrollScreen()>:
c0010ffe:	55                   	push   ebp
c0010fff:	57                   	push   edi
c0011000:	56                   	push   esi
c0011001:	be 01 00 00 00       	mov    esi,0x1
c0011006:	53                   	push   ebx
c0011007:	83 ec 0c             	sub    esp,0xc
c001100a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001100e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0011011:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011017:	31 ff                	xor    edi,edi
c0011019:	01 e9                	add    ecx,ebp
c001101b:	8a 01                	mov    al,BYTE PTR [ecx]
c001101d:	83 fe 18             	cmp    esi,0x18
c0011020:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011026:	75 20                	jne    c0011048 <VgaText::scrollScreen()+0x4a>
c0011028:	f7 c7 01 00 00 00    	test   edi,0x1
c001102e:	74 15                	je     c0011045 <VgaText::scrollScreen()+0x47>
c0011030:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011034:	50                   	push   eax
c0011035:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011039:	50                   	push   eax
c001103a:	e8 ad ff ff ff       	call   c0010fec <VgaText::combineColours(unsigned char, unsigned char)>
c001103f:	5a                   	pop    edx
c0011040:	5a                   	pop    edx
c0011041:	88 01                	mov    BYTE PTR [ecx],al
c0011043:	eb 03                	jmp    c0011048 <VgaText::scrollScreen()+0x4a>
c0011045:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011048:	47                   	inc    edi
c0011049:	41                   	inc    ecx
c001104a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011050:	75 c9                	jne    c001101b <VgaText::scrollScreen()+0x1d>
c0011052:	46                   	inc    esi
c0011053:	83 fe 19             	cmp    esi,0x19
c0011056:	75 b9                	jne    c0011011 <VgaText::scrollScreen()+0x13>
c0011058:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c001105e:	75 1f                	jne    c001107f <VgaText::scrollScreen()+0x81>
c0011060:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011064:	74 05                	je     c001106b <VgaText::scrollScreen()+0x6d>
c0011066:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011069:	eb 14                	jmp    c001107f <VgaText::scrollScreen()+0x81>
c001106b:	50                   	push   eax
c001106c:	50                   	push   eax
c001106d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011071:	50                   	push   eax
c0011072:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011076:	50                   	push   eax
c0011077:	e8 6c 87 00 00       	call   c00197e8 <HalConsoleScroll(int, int)>
c001107c:	83 c4 10             	add    esp,0x10
c001107f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011083:	83 c4 0c             	add    esp,0xc
c0011086:	5b                   	pop    ebx
c0011087:	5e                   	pop    esi
c0011088:	5f                   	pop    edi
c0011089:	5d                   	pop    ebp
c001108a:	e9 79 fe ff ff       	jmp    c0010f08 <VgaText::updateCursor()>
c001108f:	90                   	nop

c0011090 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011090:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011095:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001109a:	c1 e0 08             	shl    eax,0x8
c001109d:	09 d0                	or     eax,edx
c001109f:	c3                   	ret    

c00110a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00110a0:	55                   	push   ebp
c00110a1:	57                   	push   edi
c00110a2:	56                   	push   esi
c00110a3:	53                   	push   ebx
c00110a4:	83 ec 1c             	sub    esp,0x1c
c00110a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00110ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00110af:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00110b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110b7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110bb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00110bf:	0f b6 c3             	movzx  eax,bl
c00110c2:	50                   	push   eax
c00110c3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00110c8:	50                   	push   eax
c00110c9:	e8 1e ff ff ff       	call   c0010fec <VgaText::combineColours(unsigned char, unsigned char)>
c00110ce:	5a                   	pop    edx
c00110cf:	0f b6 c0             	movzx  eax,al
c00110d2:	59                   	pop    ecx
c00110d3:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00110d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00110dc:	50                   	push   eax
c00110dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00110e1:	e8 aa ff ff ff       	call   c0011090 <VgaText::combineCharAndColour(char, unsigned char)>
c00110e6:	5a                   	pop    edx
c00110e7:	6b d7 50             	imul   edx,edi,0x50
c00110ea:	59                   	pop    ecx
c00110eb:	01 f2                	add    edx,esi
c00110ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00110f0:	0f b7 d2             	movzx  edx,dx
c00110f3:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00110f7:	39 2d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebp
c00110fd:	75 28                	jne    c0011127 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00110ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011103:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0011107:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c001110b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001110f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011117:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001111b:	83 c4 1c             	add    esp,0x1c
c001111e:	5b                   	pop    ebx
c001111f:	5e                   	pop    esi
c0011120:	5f                   	pop    edi
c0011121:	5d                   	pop    ebp
c0011122:	e9 c9 87 00 00       	jmp    c00198f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011127:	83 c4 1c             	add    esp,0x1c
c001112a:	5b                   	pop    ebx
c001112b:	5e                   	pop    esi
c001112c:	5f                   	pop    edi
c001112d:	5d                   	pop    ebp
c001112e:	c3                   	ret    
c001112f:	90                   	nop

c0011130 <VgaText::getCursorX()>:
c0011130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011134:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011137:	c3                   	ret    

c0011138 <VgaText::getCursorY()>:
c0011138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001113c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001113f:	c3                   	ret    

c0011140 <VgaText::setCursor(int, int)>:
c0011140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011148:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001114b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001114f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011152:	e9 b1 fd ff ff       	jmp    c0010f08 <VgaText::updateCursor()>

c0011157 <setActiveTerminal(VgaText*)>:
c0011157:	53                   	push   ebx
c0011158:	83 ec 08             	sub    esp,0x8
c001115b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001115f:	85 db                	test   ebx,ebx
c0011161:	75 11                	jne    c0011174 <setActiveTerminal(VgaText*)+0x1d>
c0011163:	c7 44 24 10 84 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a84
c001116b:	83 c4 08             	add    esp,0x8
c001116e:	5b                   	pop    ebx
c001116f:	e9 32 db ff ff       	jmp    c000eca6 <KePanic(char const*)>
c0011174:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c0011179:	85 c0                	test   eax,eax
c001117b:	74 0c                	je     c0011189 <setActiveTerminal(VgaText*)+0x32>
c001117d:	83 ec 0c             	sub    esp,0xc
c0011180:	50                   	push   eax
c0011181:	e8 82 fd ff ff       	call   c0010f08 <VgaText::updateCursor()>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	89 1d 34 ce 02 c0    	mov    DWORD PTR ds:0xc002ce34,ebx
c001118f:	50                   	push   eax
c0011190:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011193:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011196:	53                   	push   ebx
c0011197:	e8 a4 ff ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c001119c:	83 c4 18             	add    esp,0x18
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    
c00111a1:	90                   	nop

c00111a2 <VgaText::clearScreen()>:
c00111a2:	57                   	push   edi
c00111a3:	56                   	push   esi
c00111a4:	31 f6                	xor    esi,esi
c00111a6:	53                   	push   ebx
c00111a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111ab:	52                   	push   edx
c00111ac:	6a 00                	push   0x0
c00111ae:	6a 00                	push   0x0
c00111b0:	53                   	push   ebx
c00111b1:	e8 8a ff ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c00111b6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00111c3:	7e 20                	jle    c00111e5 <VgaText::clearScreen()+0x43>
c00111c5:	31 ff                	xor    edi,edi
c00111c7:	50                   	push   eax
c00111c8:	50                   	push   eax
c00111c9:	56                   	push   esi
c00111ca:	57                   	push   edi
c00111cb:	47                   	inc    edi
c00111cc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00111cf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00111d2:	6a 20                	push   0x20
c00111d4:	53                   	push   ebx
c00111d5:	e8 c6 fe ff ff       	call   c00110a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00111da:	83 c4 20             	add    esp,0x20
c00111dd:	83 ff 50             	cmp    edi,0x50
c00111e0:	75 e5                	jne    c00111c7 <VgaText::clearScreen()+0x25>
c00111e2:	46                   	inc    esi
c00111e3:	eb db                	jmp    c00111c0 <VgaText::clearScreen()+0x1e>
c00111e5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00111ec:	5b                   	pop    ebx
c00111ed:	5e                   	pop    esi
c00111ee:	5f                   	pop    edi
c00111ef:	c3                   	ret    

c00111f0 <VgaText::setCursorX(int)>:
c00111f0:	83 ec 10             	sub    esp,0x10
c00111f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111f7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00111fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111fe:	50                   	push   eax
c00111ff:	e8 3c ff ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c0011204:	83 c4 1c             	add    esp,0x1c
c0011207:	c3                   	ret    

c0011208 <VgaText::setCursorY(int)>:
c0011208:	83 ec 10             	sub    esp,0x10
c001120b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001120f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011213:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011216:	50                   	push   eax
c0011217:	e8 24 ff ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c001121c:	83 c4 1c             	add    esp,0x1c
c001121f:	c3                   	ret    

c0011220 <VgaText::incrementCursor(bool)>:
c0011220:	56                   	push   esi
c0011221:	53                   	push   ebx
c0011222:	51                   	push   ecx
c0011223:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011227:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001122b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001122e:	40                   	inc    eax
c001122f:	83 f8 50             	cmp    eax,0x50
c0011232:	74 05                	je     c0011239 <VgaText::incrementCursor(bool)+0x19>
c0011234:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011237:	eb 24                	jmp    c001125d <VgaText::incrementCursor(bool)+0x3d>
c0011239:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001123c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011243:	8d 50 01             	lea    edx,[eax+0x1]
c0011246:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011249:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001124c:	75 0f                	jne    c001125d <VgaText::incrementCursor(bool)+0x3d>
c001124e:	83 ec 0c             	sub    esp,0xc
c0011251:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011254:	53                   	push   ebx
c0011255:	e8 a4 fd ff ff       	call   c0010ffe <VgaText::scrollScreen()>
c001125a:	83 c4 10             	add    esp,0x10
c001125d:	89 f0                	mov    eax,esi
c001125f:	84 c0                	test   al,al
c0011261:	74 0c                	je     c001126f <VgaText::incrementCursor(bool)+0x4f>
c0011263:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011267:	5a                   	pop    edx
c0011268:	5b                   	pop    ebx
c0011269:	5e                   	pop    esi
c001126a:	e9 99 fc ff ff       	jmp    c0010f08 <VgaText::updateCursor()>
c001126f:	58                   	pop    eax
c0011270:	5b                   	pop    ebx
c0011271:	5e                   	pop    esi
c0011272:	c3                   	ret    
c0011273:	90                   	nop

c0011274 <VgaText::decrementCursor(bool)>:
c0011274:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011278:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001127c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001127f:	85 c0                	test   eax,eax
c0011281:	74 04                	je     c0011287 <VgaText::decrementCursor(bool)+0x13>
c0011283:	48                   	dec    eax
c0011284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011287:	84 c9                	test   cl,cl
c0011289:	74 09                	je     c0011294 <VgaText::decrementCursor(bool)+0x20>
c001128b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001128f:	e9 74 fc ff ff       	jmp    c0010f08 <VgaText::updateCursor()>
c0011294:	c3                   	ret    
c0011295:	90                   	nop

c0011296 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011296:	53                   	push   ebx
c0011297:	83 ec 08             	sub    esp,0x8
c001129a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001129f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00112a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00112ab:	83 f8 07             	cmp    eax,0x7
c00112ae:	75 21                	jne    c00112d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00112b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00112b8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00112c0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00112c8:	83 c4 08             	add    esp,0x8
c00112cb:	5b                   	pop    ebx
c00112cc:	e9 01 77 ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c00112d1:	83 f8 0d             	cmp    eax,0xd
c00112d4:	75 09                	jne    c00112df <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00112d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112dd:	eb 2d                	jmp    c001130c <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00112df:	83 f8 0a             	cmp    eax,0xa
c00112e2:	75 31                	jne    c0011315 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00112e4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00112e7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112ee:	8d 50 01             	lea    edx,[eax+0x1]
c00112f1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00112f4:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00112f7:	75 0f                	jne    c0011308 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00112ff:	53                   	push   ebx
c0011300:	e8 f9 fc ff ff       	call   c0010ffe <VgaText::scrollScreen()>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001130c:	83 c4 08             	add    esp,0x8
c001130f:	5b                   	pop    ebx
c0011310:	e9 f3 fb ff ff       	jmp    c0010f08 <VgaText::updateCursor()>
c0011315:	83 f8 08             	cmp    eax,0x8
c0011318:	75 25                	jne    c001133f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001131a:	50                   	push   eax
c001131b:	50                   	push   eax
c001131c:	6a 01                	push   0x1
c001131e:	53                   	push   ebx
c001131f:	e8 50 ff ff ff       	call   c0011274 <VgaText::decrementCursor(bool)>
c0011324:	5a                   	pop    edx
c0011325:	59                   	pop    ecx
c0011326:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011329:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001132c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001132f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011332:	6a 20                	push   0x20
c0011334:	53                   	push   ebx
c0011335:	e8 66 fd ff ff       	call   c00110a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001133a:	83 c4 28             	add    esp,0x28
c001133d:	5b                   	pop    ebx
c001133e:	c3                   	ret    
c001133f:	83 ec 08             	sub    esp,0x8
c0011342:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011345:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011348:	51                   	push   ecx
c0011349:	52                   	push   edx
c001134a:	50                   	push   eax
c001134b:	53                   	push   ebx
c001134c:	e8 4f fd ff ff       	call   c00110a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011351:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011355:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001135d:	83 c4 28             	add    esp,0x28
c0011360:	5b                   	pop    ebx
c0011361:	e9 ba fe ff ff       	jmp    c0011220 <VgaText::incrementCursor(bool)>

c0011366 <VgaText::putchar(char)>:
c0011366:	57                   	push   edi
c0011367:	56                   	push   esi
c0011368:	53                   	push   ebx
c0011369:	83 ec 10             	sub    esp,0x10
c001136c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011374:	89 f8                	mov    eax,edi
c0011376:	0f be c0             	movsx  eax,al
c0011379:	83 f8 5b             	cmp    eax,0x5b
c001137c:	75 18                	jne    c0011396 <VgaText::putchar(char)+0x30>
c001137e:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011382:	74 20                	je     c00113a4 <VgaText::putchar(char)+0x3e>
c0011384:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001138a:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011391:	e9 c1 00 00 00       	jmp    c0011457 <VgaText::putchar(char)+0xf1>
c0011396:	83 f8 1b             	cmp    eax,0x1b
c0011399:	75 09                	jne    c00113a4 <VgaText::putchar(char)+0x3e>
c001139b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001139f:	e9 b3 00 00 00       	jmp    c0011457 <VgaText::putchar(char)+0xf1>
c00113a4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00113a7:	84 c9                	test   cl,cl
c00113a9:	0f 84 98 00 00 00    	je     c0011447 <VgaText::putchar(char)+0xe1>
c00113af:	8d 77 c0             	lea    esi,[edi-0x40]
c00113b2:	89 f2                	mov    edx,esi
c00113b4:	80 fa 3e             	cmp    dl,0x3e
c00113b7:	77 78                	ja     c0011431 <VgaText::putchar(char)+0xcb>
c00113b9:	83 f8 6d             	cmp    eax,0x6d
c00113bc:	75 47                	jne    c0011405 <VgaText::putchar(char)+0x9f>
c00113be:	31 f6                	xor    esi,esi
c00113c0:	31 d2                	xor    edx,edx
c00113c2:	31 c0                	xor    eax,eax
c00113c4:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00113c7:	7e 2d                	jle    c00113f6 <VgaText::putchar(char)+0x90>
c00113c9:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00113ce:	83 fa 3b             	cmp    edx,0x3b
c00113d1:	75 17                	jne    c00113ea <VgaText::putchar(char)+0x84>
c00113d3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00113d7:	50                   	push   eax
c00113d8:	53                   	push   ebx
c00113d9:	e8 40 fb ff ff       	call   c0010f1e <VgaText::doANSI_SGR(int)>
c00113de:	59                   	pop    ecx
c00113df:	31 d2                	xor    edx,edx
c00113e1:	5f                   	pop    edi
c00113e2:	31 c0                	xor    eax,eax
c00113e4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113e8:	eb 09                	jmp    c00113f3 <VgaText::putchar(char)+0x8d>
c00113ea:	6b c0 0a             	imul   eax,eax,0xa
c00113ed:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00113f1:	88 ca                	mov    dl,cl
c00113f3:	46                   	inc    esi
c00113f4:	eb ce                	jmp    c00113c4 <VgaText::putchar(char)+0x5e>
c00113f6:	84 d2                	test   dl,dl
c00113f8:	74 2f                	je     c0011429 <VgaText::putchar(char)+0xc3>
c00113fa:	50                   	push   eax
c00113fb:	53                   	push   ebx
c00113fc:	e8 1d fb ff ff       	call   c0010f1e <VgaText::doANSI_SGR(int)>
c0011401:	58                   	pop    eax
c0011402:	5a                   	pop    edx
c0011403:	eb 24                	jmp    c0011429 <VgaText::putchar(char)+0xc3>
c0011405:	83 f8 4a             	cmp    eax,0x4a
c0011408:	75 1f                	jne    c0011429 <VgaText::putchar(char)+0xc3>
c001140a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001140e:	75 19                	jne    c0011429 <VgaText::putchar(char)+0xc3>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	53                   	push   ebx
c0011414:	e8 89 fd ff ff       	call   c00111a2 <VgaText::clearScreen()>
c0011419:	83 c4 0c             	add    esp,0xc
c001141c:	6a 00                	push   0x0
c001141e:	6a 00                	push   0x0
c0011420:	53                   	push   ebx
c0011421:	e8 1a fd ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c0011426:	83 c4 10             	add    esp,0x10
c0011429:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001142f:	eb 26                	jmp    c0011457 <VgaText::putchar(char)+0xf1>
c0011431:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011434:	83 f8 0e             	cmp    eax,0xe
c0011437:	7f 1e                	jg     c0011457 <VgaText::putchar(char)+0xf1>
c0011439:	8d 48 01             	lea    ecx,[eax+0x1]
c001143c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001143f:	89 f9                	mov    ecx,edi
c0011441:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0011445:	eb 10                	jmp    c0011457 <VgaText::putchar(char)+0xf1>
c0011447:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001144a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001144d:	50                   	push   eax
c001144e:	53                   	push   ebx
c001144f:	e8 42 fe ff ff       	call   c0011296 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011454:	83 c4 10             	add    esp,0x10
c0011457:	83 c4 10             	add    esp,0x10
c001145a:	5b                   	pop    ebx
c001145b:	5e                   	pop    esi
c001145c:	5f                   	pop    edi
c001145d:	c3                   	ret    

c001145e <VgaText::putx(unsigned int)>:
c001145e:	57                   	push   edi
c001145f:	b9 11 00 00 00       	mov    ecx,0x11
c0011464:	56                   	push   esi
c0011465:	be 2f 14 02 c0       	mov    esi,0xc002142f
c001146a:	53                   	push   ebx
c001146b:	83 ec 20             	sub    esp,0x20
c001146e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011472:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011476:	fc                   	cld    
c0011477:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011479:	be 08 00 00 00       	mov    esi,0x8
c001147e:	50                   	push   eax
c001147f:	50                   	push   eax
c0011480:	89 d8                	mov    eax,ebx
c0011482:	c1 e3 04             	shl    ebx,0x4
c0011485:	c1 e8 1c             	shr    eax,0x1c
c0011488:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001148d:	50                   	push   eax
c001148e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011492:	e8 cf fe ff ff       	call   c0011366 <VgaText::putchar(char)>
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	4e                   	dec    esi
c001149b:	75 e1                	jne    c001147e <VgaText::putx(unsigned int)+0x20>
c001149d:	83 c4 20             	add    esp,0x20
c00114a0:	5b                   	pop    ebx
c00114a1:	5e                   	pop    esi
c00114a2:	5f                   	pop    edi
c00114a3:	c3                   	ret    

c00114a4 <VgaText::puts(char const*)>:
c00114a4:	53                   	push   ebx
c00114a5:	83 ec 08             	sub    esp,0x8
c00114a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114ac:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00114af:	85 c0                	test   eax,eax
c00114b1:	74 12                	je     c00114c5 <VgaText::puts(char const*)+0x21>
c00114b3:	43                   	inc    ebx
c00114b4:	51                   	push   ecx
c00114b5:	51                   	push   ecx
c00114b6:	50                   	push   eax
c00114b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114bb:	e8 a6 fe ff ff       	call   c0011366 <VgaText::putchar(char)>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	eb e7                	jmp    c00114ac <VgaText::puts(char const*)+0x8>
c00114c5:	83 c4 08             	add    esp,0x8
c00114c8:	5b                   	pop    ebx
c00114c9:	c3                   	ret    

c00114ca <VgaText::write(unsigned long long, void*, int*)>:
c00114ca:	55                   	push   ebp
c00114cb:	57                   	push   edi
c00114cc:	56                   	push   esi
c00114cd:	53                   	push   ebx
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00114d5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00114d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00114dd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00114e4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114e7:	39 eb                	cmp    ebx,ebp
c00114e9:	74 13                	je     c00114fe <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114eb:	43                   	inc    ebx
c00114ec:	50                   	push   eax
c00114ed:	50                   	push   eax
c00114ee:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114f2:	50                   	push   eax
c00114f3:	56                   	push   esi
c00114f4:	e8 6d fe ff ff       	call   c0011366 <VgaText::putchar(char)>
c00114f9:	83 c4 10             	add    esp,0x10
c00114fc:	eb e9                	jmp    c00114e7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114fe:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011509:	89 38                	mov    DWORD PTR [eax],edi
c001150b:	83 c4 0c             	add    esp,0xc
c001150e:	31 c0                	xor    eax,eax
c0011510:	5b                   	pop    ebx
c0011511:	5e                   	pop    esi
c0011512:	5f                   	pop    edi
c0011513:	5d                   	pop    ebp
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011516:	55                   	push   ebp
c0011517:	57                   	push   edi
c0011518:	56                   	push   esi
c0011519:	53                   	push   ebx
c001151a:	83 ec 0c             	sub    esp,0xc
c001151d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011526:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001152d:	50                   	push   eax
c001152e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011533:	50                   	push   eax
c0011534:	e8 b3 fa ff ff       	call   c0010fec <VgaText::combineColours(unsigned char, unsigned char)>
c0011539:	5a                   	pop    edx
c001153a:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001153e:	59                   	pop    ecx
c001153f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011542:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011546:	0f b7 f6             	movzx  esi,si
c0011549:	0f b6 e8             	movzx  ebp,al
c001154c:	01 f6                	add    esi,esi
c001154e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011551:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0011554:	85 c0                	test   eax,eax
c0011556:	0f 84 ef 00 00 00    	je     c001164b <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001155c:	83 f8 0d             	cmp    eax,0xd
c001155f:	75 0c                	jne    c001156d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011561:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011568:	e9 d8 00 00 00       	jmp    c0011645 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001156d:	83 f8 0a             	cmp    eax,0xa
c0011570:	75 44                	jne    c00115b6 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011572:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011575:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001157c:	8d 48 01             	lea    ecx,[eax+0x1]
c001157f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0011582:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0011585:	75 0f                	jne    c0011596 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011587:	83 ec 0c             	sub    esp,0xc
c001158a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001158d:	53                   	push   ebx
c001158e:	e8 6b fa ff ff       	call   c0010ffe <VgaText::scrollScreen()>
c0011593:	83 c4 10             	add    esp,0x10
c0011596:	83 ec 0c             	sub    esp,0xc
c0011599:	53                   	push   ebx
c001159a:	e8 69 f9 ff ff       	call   c0010f08 <VgaText::updateCursor()>
c001159f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00115a9:	0f b7 f6             	movzx  esi,si
c00115ac:	01 f6                	add    esi,esi
c00115ae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115b1:	e9 8f 00 00 00       	jmp    c0011645 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115b6:	83 f8 08             	cmp    eax,0x8
c00115b9:	75 34                	jne    c00115ef <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00115bb:	51                   	push   ecx
c00115bc:	51                   	push   ecx
c00115bd:	6a 01                	push   0x1
c00115bf:	53                   	push   ebx
c00115c0:	e8 af fc ff ff       	call   c0011274 <VgaText::decrementCursor(bool)>
c00115c5:	5e                   	pop    esi
c00115c6:	58                   	pop    eax
c00115c7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00115ca:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00115cd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00115d0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00115d3:	6a 20                	push   0x20
c00115d5:	53                   	push   ebx
c00115d6:	e8 c5 fa ff ff       	call   c00110a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00115db:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115df:	83 c4 20             	add    esp,0x20
c00115e2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00115e5:	0f b7 f6             	movzx  esi,si
c00115e8:	01 f6                	add    esi,esi
c00115ea:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115ed:	eb 56                	jmp    c0011645 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115ef:	52                   	push   edx
c00115f0:	52                   	push   edx
c00115f1:	55                   	push   ebp
c00115f2:	50                   	push   eax
c00115f3:	e8 98 fa ff ff       	call   c0011090 <VgaText::combineCharAndColour(char, unsigned char)>
c00115f8:	83 c4 10             	add    esp,0x10
c00115fb:	66 89 06             	mov    WORD PTR [esi],ax
c00115fe:	39 1d 34 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce34,ebx
c0011604:	75 1d                	jne    c0011623 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0011606:	83 ec 0c             	sub    esp,0xc
c0011609:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001160c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001160f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011613:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011617:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001161a:	50                   	push   eax
c001161b:	e8 d0 82 00 00       	call   c00198f0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011620:	83 c4 20             	add    esp,0x20
c0011623:	83 c6 02             	add    esi,0x2
c0011626:	50                   	push   eax
c0011627:	50                   	push   eax
c0011628:	6a 00                	push   0x0
c001162a:	53                   	push   ebx
c001162b:	e8 f0 fb ff ff       	call   c0011220 <VgaText::incrementCursor(bool)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0011637:	75 0c                	jne    c0011645 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011639:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001163d:	0f b7 f6             	movzx  esi,si
c0011640:	01 f6                	add    esi,esi
c0011642:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011645:	47                   	inc    edi
c0011646:	e9 06 ff ff ff       	jmp    c0011551 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001164b:	83 ec 0c             	sub    esp,0xc
c001164e:	53                   	push   ebx
c001164f:	e8 b4 f8 ff ff       	call   c0010f08 <VgaText::updateCursor()>
c0011654:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001165b:	83 c4 1c             	add    esp,0x1c
c001165e:	5b                   	pop    ebx
c001165f:	5e                   	pop    esi
c0011660:	5f                   	pop    edi
c0011661:	5d                   	pop    ebp
c0011662:	c3                   	ret    
c0011663:	90                   	nop

c0011664 <VgaText::VgaText(char const*)>:
c0011664:	56                   	push   esi
c0011665:	53                   	push   ebx
c0011666:	83 ec 04             	sub    esp,0x4
c0011669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166d:	83 ec 08             	sub    esp,0x8
c0011670:	6a 00                	push   0x0
c0011672:	50                   	push   eax
c0011673:	e8 c8 05 00 00       	call   c0011c40 <UnixFile::UnixFile(int)>
c0011678:	83 c4 10             	add    esp,0x10
c001167b:	ba a8 2a 02 c0       	mov    edx,0xc0022aa8
c0011680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011684:	89 10                	mov    DWORD PTR [eax],edx
c0011686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011695:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001169c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00116a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116a8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00116ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00116b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116bb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00116c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00116cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116d1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00116d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116dc:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	6a 01                	push   0x1
c00116e8:	e8 ec 09 00 00       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c00116ed:	83 c4 10             	add    esp,0x10
c00116f0:	89 c2                	mov    edx,eax
c00116f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116f9:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c00116ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011703:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011706:	89 c6                	mov    esi,eax
c0011708:	e8 8d d7 ff ff       	call   c000ee9a <Phys::allocatePage()>
c001170d:	68 05 0c 00 00       	push   0xc05
c0011712:	56                   	push   esi
c0011713:	50                   	push   eax
c0011714:	53                   	push   ebx
c0011715:	e8 a2 10 00 00       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001171a:	83 c4 10             	add    esp,0x10
c001171d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011721:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011724:	83 ec 04             	sub    esp,0x4
c0011727:	68 a0 0f 00 00       	push   0xfa0
c001172c:	6a 00                	push   0x0
c001172e:	50                   	push   eax
c001172f:	e8 bc ed fe ff       	call   c00004f0 <memset>
c0011734:	83 c4 10             	add    esp,0x10
c0011737:	83 ec 04             	sub    esp,0x4
c001173a:	6a 00                	push   0x0
c001173c:	6a 07                	push   0x7
c001173e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011742:	e8 6b f8 ff ff       	call   c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	83 ec 04             	sub    esp,0x4
c001174d:	6a 00                	push   0x0
c001174f:	6a 00                	push   0x0
c0011751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011755:	e8 e6 f9 ff ff       	call   c0011140 <VgaText::setCursor(int, int)>
c001175a:	83 c4 10             	add    esp,0x10
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011764:	e8 39 fa ff ff       	call   c00111a2 <VgaText::clearScreen()>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011770:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011778:	05 82 00 00 00       	add    eax,0x82
c001177d:	83 ec 04             	sub    esp,0x4
c0011780:	68 80 00 00 00       	push   0x80
c0011785:	6a 00                	push   0x0
c0011787:	50                   	push   eax
c0011788:	e8 63 ed fe ff       	call   c00004f0 <memset>
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011794:	05 02 01 00 00       	add    eax,0x102
c0011799:	83 ec 04             	sub    esp,0x4
c001179c:	68 80 00 00 00       	push   0x80
c00117a1:	6a 00                	push   0x0
c00117a3:	50                   	push   eax
c00117a4:	e8 47 ed fe ff       	call   c00004f0 <memset>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	90                   	nop
c00117ad:	83 c4 04             	add    esp,0x4
c00117b0:	5b                   	pop    ebx
c00117b1:	5e                   	pop    esi
c00117b2:	c3                   	ret    
c00117b3:	90                   	nop

c00117b4 <VgaText::receiveKey(unsigned char)>:
c00117b4:	55                   	push   ebp
c00117b5:	57                   	push   edi
c00117b6:	56                   	push   esi
c00117b7:	53                   	push   ebx
c00117b8:	83 ec 2c             	sub    esp,0x2c
c00117bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00117bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00117c3:	89 ef                	mov    edi,ebp
c00117c5:	81 e7 ff 00 00 00    	and    edi,0xff
c00117cb:	0f 84 66 01 00 00    	je     c0011937 <VgaText::receiveKey(unsigned char)+0x183>
c00117d1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00117d7:	83 ff 08             	cmp    edi,0x8
c00117da:	75 73                	jne    c001184f <VgaText::receiveKey(unsigned char)+0x9b>
c00117dc:	83 ec 0c             	sub    esp,0xc
c00117df:	56                   	push   esi
c00117e0:	e8 8b ed fe ff       	call   c0000570 <strlen>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	85 c0                	test   eax,eax
c00117ea:	0f 84 02 01 00 00    	je     c00118f2 <VgaText::receiveKey(unsigned char)+0x13e>
c00117f0:	50                   	push   eax
c00117f1:	50                   	push   eax
c00117f2:	6a 08                	push   0x8
c00117f4:	53                   	push   ebx
c00117f5:	e8 6c fb ff ff       	call   c0011366 <VgaText::putchar(char)>
c00117fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00117fd:	e8 6e ed fe ff       	call   c0000570 <strlen>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c001180d:	83 fa 0d             	cmp    edx,0xd
c0011810:	89 d0                	mov    eax,edx
c0011812:	0f 95 c1             	setne  cl
c0011815:	83 fa 1f             	cmp    edx,0x1f
c0011818:	0f 9e c2             	setle  dl
c001181b:	0f b6 d2             	movzx  edx,dl
c001181e:	85 ca                	test   edx,ecx
c0011820:	74 17                	je     c0011839 <VgaText::receiveKey(unsigned char)+0x85>
c0011822:	83 e8 08             	sub    eax,0x8
c0011825:	3c 02                	cmp    al,0x2
c0011827:	76 10                	jbe    c0011839 <VgaText::receiveKey(unsigned char)+0x85>
c0011829:	55                   	push   ebp
c001182a:	55                   	push   ebp
c001182b:	68 92 2a 02 c0       	push   0xc0022a92
c0011830:	53                   	push   ebx
c0011831:	e8 6e fc ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0011836:	83 c4 10             	add    esp,0x10
c0011839:	83 ec 0c             	sub    esp,0xc
c001183c:	56                   	push   esi
c001183d:	e8 2e ed fe ff       	call   c0000570 <strlen>
c0011842:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c001184a:	e9 a0 00 00 00       	jmp    c00118ef <VgaText::receiveKey(unsigned char)+0x13b>
c001184f:	83 ec 0c             	sub    esp,0xc
c0011852:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011858:	50                   	push   eax
c0011859:	e8 12 ed fe ff       	call   c0000570 <strlen>
c001185e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011865:	e8 06 ed fe ff       	call   c0000570 <strlen>
c001186a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011875:	3d 80 00 00 00       	cmp    eax,0x80
c001187a:	0f 87 b7 00 00 00    	ja     c0011937 <VgaText::receiveKey(unsigned char)+0x183>
c0011880:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011883:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011886:	3c 1e                	cmp    al,0x1e
c0011888:	0f 96 c0             	setbe  al
c001188b:	80 fa 01             	cmp    dl,0x1
c001188e:	0f 97 c2             	seta   dl
c0011891:	0f b6 d2             	movzx  edx,dl
c0011894:	85 c2                	test   edx,eax
c0011896:	74 2e                	je     c00118c6 <VgaText::receiveKey(unsigned char)+0x112>
c0011898:	83 ff 0d             	cmp    edi,0xd
c001189b:	74 29                	je     c00118c6 <VgaText::receiveKey(unsigned char)+0x112>
c001189d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00118a0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00118a3:	68 98 2a 02 c0       	push   0xc0022a98
c00118a8:	53                   	push   ebx
c00118a9:	e8 68 fc ff ff       	call   c0011516 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00118ae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00118b1:	8d 45 40             	lea    eax,[ebp+0x40]
c00118b4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00118b7:	0f b6 c0             	movzx  eax,al
c00118ba:	50                   	push   eax
c00118bb:	53                   	push   ebx
c00118bc:	e8 d5 f9 ff ff       	call   c0011296 <VgaText::putchar(char, VgaColour, VgaColour)>
c00118c1:	83 c4 20             	add    esp,0x20
c00118c4:	eb 11                	jmp    c00118d7 <VgaText::receiveKey(unsigned char)+0x123>
c00118c6:	89 e8                	mov    eax,ebp
c00118c8:	51                   	push   ecx
c00118c9:	0f be c0             	movsx  eax,al
c00118cc:	51                   	push   ecx
c00118cd:	50                   	push   eax
c00118ce:	53                   	push   ebx
c00118cf:	e8 92 fa ff ff       	call   c0011366 <VgaText::putchar(char)>
c00118d4:	83 c4 10             	add    esp,0x10
c00118d7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00118dc:	89 e8                	mov    eax,ebp
c00118de:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00118e2:	52                   	push   edx
c00118e3:	52                   	push   edx
c00118e4:	8d 44 24 26          	lea    eax,[esp+0x26]
c00118e8:	50                   	push   eax
c00118e9:	56                   	push   esi
c00118ea:	e8 51 ef fe ff       	call   c0000840 <strcat>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00118f8:	b0 01                	mov    al,0x1
c00118fa:	83 ff 1c             	cmp    edi,0x1c
c00118fd:	77 0e                	ja     c001190d <VgaText::receiveKey(unsigned char)+0x159>
c00118ff:	b8 08 04 00 10       	mov    eax,0x10000408
c0011904:	89 f9                	mov    ecx,edi
c0011906:	d3 e8                	shr    eax,cl
c0011908:	f7 d0                	not    eax
c001190a:	83 e0 01             	and    eax,0x1
c001190d:	84 c0                	test   al,al
c001190f:	74 04                	je     c0011915 <VgaText::receiveKey(unsigned char)+0x161>
c0011911:	84 d2                	test   dl,dl
c0011913:	74 22                	je     c0011937 <VgaText::receiveKey(unsigned char)+0x183>
c0011915:	81 c3 02 01 00 00    	add    ebx,0x102
c001191b:	50                   	push   eax
c001191c:	50                   	push   eax
c001191d:	56                   	push   esi
c001191e:	53                   	push   ebx
c001191f:	e8 1c ef fe ff       	call   c0000840 <strcat>
c0011924:	83 c4 0c             	add    esp,0xc
c0011927:	68 80 00 00 00       	push   0x80
c001192c:	6a 00                	push   0x0
c001192e:	56                   	push   esi
c001192f:	e8 bc eb fe ff       	call   c00004f0 <memset>
c0011934:	83 c4 10             	add    esp,0x10
c0011937:	83 c4 2c             	add    esp,0x2c
c001193a:	5b                   	pop    ebx
c001193b:	5e                   	pop    esi
c001193c:	5f                   	pop    edi
c001193d:	5d                   	pop    ebp
c001193e:	c3                   	ret    
c001193f:	90                   	nop

c0011940 <VgaText::doUpdate()>:
c0011940:	c3                   	ret    
c0011941:	66 90                	xchg   ax,ax
c0011943:	90                   	nop

c0011944 <TSS::TSS()>:
c0011944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011948:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001194f:	90                   	nop
c0011950:	c3                   	ret    
c0011951:	90                   	nop
c0011952:	66 90                	xchg   ax,ax

c0011954 <TSS::setESP(unsigned long)>:
c0011954:	55                   	push   ebp
c0011955:	89 e5                	mov    ebp,esp
c0011957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001195d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011960:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011963:	90                   	nop
c0011964:	5d                   	pop    ebp
c0011965:	c3                   	ret    
c0011966:	66 90                	xchg   ax,ax

c0011968 <TSS::flush()>:
c0011968:	55                   	push   ebp
c0011969:	89 e5                	mov    ebp,esp
c001196b:	83 ec 10             	sub    esp,0x10
c001196e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011971:	8b 00                	mov    eax,DWORD PTR [eax]
c0011973:	83 c8 03             	or     eax,0x3
c0011976:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001197a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001197e:	66 89 d0             	mov    ax,dx
c0011981:	0f 00 d8             	ltr    ax
c0011984:	90                   	nop
c0011985:	c9                   	leave  
c0011986:	c3                   	ret    
c0011987:	90                   	nop

c0011988 <TSS::setup(unsigned long, unsigned long)>:
c0011988:	55                   	push   ebp
c0011989:	89 e5                	mov    ebp,esp
c001198b:	83 ec 18             	sub    esp,0x18
c001198e:	83 ec 0c             	sub    esp,0xc
c0011991:	6a 68                	push   0x68
c0011993:	e8 c7 cf ff ff       	call   c000e95f <malloc>
c0011998:	83 c4 10             	add    esp,0x10
c001199b:	89 c2                	mov    edx,eax
c001199d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a9:	83 ec 08             	sub    esp,0x8
c00119ac:	50                   	push   eax
c00119ad:	68 bc 2a 02 c0       	push   0xc0022abc
c00119b2:	e8 ad 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119c0:	83 ec 04             	sub    esp,0x4
c00119c3:	6a 68                	push   0x68
c00119c5:	6a 00                	push   0x0
c00119c7:	50                   	push   eax
c00119c8:	e8 23 eb fe ff       	call   c00004f0 <memset>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119d6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00119dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00119e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fa:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a06:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011a0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a12:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a1e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a2a:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a36:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a42:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011a45:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a4e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a51:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a5a:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a61:	83 ec 0c             	sub    esp,0xc
c0011a64:	68 d3 2a 02 c0       	push   0xc0022ad3
c0011a69:	e8 f6 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a77:	0f 20 da             	mov    edx,cr3
c0011a7a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a7d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a80:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a83:	83 ec 0c             	sub    esp,0xc
c0011a86:	68 d6 2a 02 c0       	push   0xc0022ad6
c0011a8b:	e8 d4 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a99:	83 ec 08             	sub    esp,0x8
c0011a9c:	50                   	push   eax
c0011a9d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011aa0:	50                   	push   eax
c0011aa1:	e8 08 c6 ff ff       	call   c000e0ae <GDTEntry::setBase(unsigned int)>
c0011aa6:	83 c4 10             	add    esp,0x10
c0011aa9:	83 ec 08             	sub    esp,0x8
c0011aac:	6a 68                	push   0x68
c0011aae:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011ab1:	50                   	push   eax
c0011ab2:	e8 13 c6 ff ff       	call   c000e0ca <GDTEntry::setLimit(unsigned int)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011abe:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011ac1:	83 e0 0f             	and    eax,0xf
c0011ac4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011ac7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011aca:	83 c8 40             	or     eax,0x40
c0011acd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011ad0:	83 ec 0c             	sub    esp,0xc
c0011ad3:	68 d9 2a 02 c0       	push   0xc0022ad9
c0011ad8:	e8 87 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011add:	83 c4 10             	add    esp,0x10
c0011ae0:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011ae5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011aeb:	83 ec 08             	sub    esp,0x8
c0011aee:	50                   	push   eax
c0011aef:	68 dc 2a 02 c0       	push   0xc0022adc
c0011af4:	e8 6b 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011af9:	83 c4 10             	add    esp,0x10
c0011afc:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011b01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b07:	05 64 01 00 00       	add    eax,0x164
c0011b0c:	83 ec 04             	sub    esp,0x4
c0011b0f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b12:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011b15:	50                   	push   eax
c0011b16:	e8 e3 c5 ff ff       	call   c000e0fe <GDT::addEntry(GDTEntry)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	89 c2                	mov    edx,eax
c0011b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b23:	89 10                	mov    DWORD PTR [eax],edx
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	68 f1 2a 02 c0       	push   0xc0022af1
c0011b2d:	e8 32 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b32:	83 c4 10             	add    esp,0x10
c0011b35:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011b3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b40:	05 64 01 00 00       	add    eax,0x164
c0011b45:	83 ec 0c             	sub    esp,0xc
c0011b48:	50                   	push   eax
c0011b49:	e8 da c5 ff ff       	call   c000e128 <GDT::flush()>
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	83 ec 0c             	sub    esp,0xc
c0011b54:	68 f4 2a 02 c0       	push   0xc0022af4
c0011b59:	e8 06 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b66:	c9                   	leave  
c0011b67:	c3                   	ret    

c0011b68 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b73:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b78:	75 08                	jne    c0011b82 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b7a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b80:	eb 38                	jmp    c0011bba <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b82:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b87:	75 17                	jne    c0011ba0 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b97:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b9d:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011ba0:	89 c1                	mov    ecx,eax
c0011ba2:	83 e1 fd             	and    ecx,0xfffffffd
c0011ba5:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011bab:	74 cd                	je     c0011b7a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bad:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011bb2:	83 e0 ef             	and    eax,0xffffffef
c0011bb5:	83 f8 08             	cmp    eax,0x8
c0011bb8:	76 c0                	jbe    c0011b7a <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011bba:	31 c0                	xor    eax,eax
c0011bbc:	c3                   	ret    
c0011bbd:	90                   	nop

c0011bbe <ReservedFilename::isAtty()>:
c0011bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011bc5:	31 c0                	xor    eax,eax
c0011bc7:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011bcd:	74 09                	je     c0011bd8 <ReservedFilename::isAtty()+0x1a>
c0011bcf:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011bd5:	0f 94 c0             	sete   al
c0011bd8:	c3                   	ret    
c0011bd9:	90                   	nop

c0011bda <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011be2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011be5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011be9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011bee:	75 08                	jne    c0011bf8 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011bf0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011bf6:	eb 3d                	jmp    c0011c35 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011bf8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bfd:	75 17                	jne    c0011c16 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c13:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011c16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c1b:	75 04                	jne    c0011c21 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011c1d:	89 0a                	mov    DWORD PTR [edx],ecx
c0011c1f:	eb 14                	jmp    c0011c35 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011c21:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011c26:	74 c8                	je     c0011bf0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c28:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011c2d:	83 e0 ef             	and    eax,0xffffffef
c0011c30:	83 f8 08             	cmp    eax,0x8
c0011c33:	76 bb                	jbe    c0011bf0 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011c35:	31 c0                	xor    eax,eax
c0011c37:	c3                   	ret    

c0011c38 <UnixFile::getFileDescriptor()>:
c0011c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c3f:	c3                   	ret    

c0011c40 <UnixFile::UnixFile(int)>:
c0011c40:	53                   	push   ebx
c0011c41:	83 ec 28             	sub    esp,0x28
c0011c44:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c0011c49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c4d:	89 10                	mov    DWORD PTR [eax],edx
c0011c4f:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011c57:	0f 8f 90 01 00 00    	jg     c0011ded <UnixFile::UnixFile(int)+0x1ad>
c0011c5d:	a1 e0 4d 02 c0       	mov    eax,ds:0xc0024de0
c0011c62:	8d 50 01             	lea    edx,[eax+0x1]
c0011c65:	89 15 e0 4d 02 c0    	mov    DWORD PTR ds:0xc0024de0,edx
c0011c6b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c72:	83 ec 08             	sub    esp,0x8
c0011c75:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c79:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011c7e:	e8 1b eb 00 00       	call   c002079e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	a0 b4 ce 02 c0       	mov    al,ds:0xc002ceb4
c0011c8b:	83 f0 01             	xor    eax,0x1
c0011c8e:	0f b6 c0             	movzx  eax,al
c0011c91:	85 c0                	test   eax,eax
c0011c93:	0f 84 55 01 00 00    	je     c0011dee <UnixFile::UnixFile(int)+0x1ae>
c0011c99:	c6 05 b4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ceb4,0x1
c0011ca0:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011caf:	e8 ab cc ff ff       	call   c000e95f <malloc>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	89 c3                	mov    ebx,eax
c0011cb9:	83 ec 08             	sub    esp,0x8
c0011cbc:	68 03 ff ff 0f       	push   0xfffff03
c0011cc1:	53                   	push   ebx
c0011cc2:	e8 2d 01 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	89 1d ac ce 02 c0    	mov    DWORD PTR ds:0xc002ceac,ebx
c0011cd0:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cdf:	e8 7b cc ff ff       	call   c000e95f <malloc>
c0011ce4:	83 c4 10             	add    esp,0x10
c0011ce7:	89 c3                	mov    ebx,eax
c0011ce9:	83 ec 08             	sub    esp,0x8
c0011cec:	68 01 ff ff 0f       	push   0xfffff01
c0011cf1:	53                   	push   ebx
c0011cf2:	e8 fd 00 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011cf7:	83 c4 10             	add    esp,0x10
c0011cfa:	89 1d b0 ce 02 c0    	mov    DWORD PTR ds:0xc002ceb0,ebx
c0011d00:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011d08:	83 ec 0c             	sub    esp,0xc
c0011d0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d0f:	e8 4b cc ff ff       	call   c000e95f <malloc>
c0011d14:	83 c4 10             	add    esp,0x10
c0011d17:	89 c3                	mov    ebx,eax
c0011d19:	83 ec 08             	sub    esp,0x8
c0011d1c:	68 00 ff ff 0f       	push   0xfffff00
c0011d21:	53                   	push   ebx
c0011d22:	e8 cd 00 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	89 1d a4 ce 02 c0    	mov    DWORD PTR ds:0xc002cea4,ebx
c0011d30:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d3f:	e8 1b cc ff ff       	call   c000e95f <malloc>
c0011d44:	83 c4 10             	add    esp,0x10
c0011d47:	89 c3                	mov    ebx,eax
c0011d49:	83 ec 08             	sub    esp,0x8
c0011d4c:	68 02 ff ff 0f       	push   0xfffff02
c0011d51:	53                   	push   ebx
c0011d52:	e8 9d 00 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011d57:	83 c4 10             	add    esp,0x10
c0011d5a:	89 1d a8 ce 02 c0    	mov    DWORD PTR ds:0xc002cea8,ebx
c0011d60:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d68:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d6d:	7f 7f                	jg     c0011dee <UnixFile::UnixFile(int)+0x1ae>
c0011d6f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d77:	83 ec 0c             	sub    esp,0xc
c0011d7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d7e:	e8 dc cb ff ff       	call   c000e95f <malloc>
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	89 c3                	mov    ebx,eax
c0011d88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d8c:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011d91:	83 ec 08             	sub    esp,0x8
c0011d94:	50                   	push   eax
c0011d95:	53                   	push   ebx
c0011d96:	e8 59 00 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011da2:	89 1c 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],ebx
c0011da9:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011db1:	83 ec 0c             	sub    esp,0xc
c0011db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011db8:	e8 a2 cb ff ff       	call   c000e95f <malloc>
c0011dbd:	83 c4 10             	add    esp,0x10
c0011dc0:	89 c3                	mov    ebx,eax
c0011dc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011dc6:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011dcb:	83 ec 08             	sub    esp,0x8
c0011dce:	50                   	push   eax
c0011dcf:	53                   	push   ebx
c0011dd0:	e8 1f 00 00 00       	call   c0011df4 <ReservedFilename::ReservedFilename(int)>
c0011dd5:	83 c4 10             	add    esp,0x10
c0011dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ddc:	89 1c 85 40 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31c0],ebx
c0011de3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011de8:	e9 7b ff ff ff       	jmp    c0011d68 <UnixFile::UnixFile(int)+0x128>
c0011ded:	90                   	nop
c0011dee:	83 c4 28             	add    esp,0x28
c0011df1:	5b                   	pop    ebx
c0011df2:	c3                   	ret    
c0011df3:	90                   	nop

c0011df4 <ReservedFilename::ReservedFilename(int)>:
c0011df4:	83 ec 0c             	sub    esp,0xc
c0011df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfb:	83 ec 08             	sub    esp,0x8
c0011dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e02:	50                   	push   eax
c0011e03:	e8 38 fe ff ff       	call   c0011c40 <UnixFile::UnixFile(int)>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	ba 84 2b 02 c0       	mov    edx,0xc0022b84
c0011e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e14:	89 10                	mov    DWORD PTR [eax],edx
c0011e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011e1e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011e21:	90                   	nop
c0011e22:	83 c4 0c             	add    esp,0xc
c0011e25:	c3                   	ret    

c0011e26 <UnixFile::~UnixFile()>:
c0011e26:	83 ec 1c             	sub    esp,0x1c
c0011e29:	ba 68 2b 02 c0       	mov    edx,0xc0022b68
c0011e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e32:	89 10                	mov    DWORD PTR [eax],edx
c0011e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e3b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011e40:	7f 76                	jg     c0011eb8 <UnixFile::~UnixFile()+0x92>
c0011e42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e52:	e8 1b ea 00 00       	call   c0020872 <LinkedList<UnixFile>::getFirstElement()>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e5e:	83 ec 0c             	sub    esp,0xc
c0011e61:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e66:	e8 0f ea 00 00       	call   c002087a <LinkedList<UnixFile>::removeFirst()>
c0011e6b:	83 c4 10             	add    esp,0x10
c0011e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e72:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e76:	74 43                	je     c0011ebb <UnixFile::~UnixFile()+0x95>
c0011e78:	83 ec 08             	sub    esp,0x8
c0011e7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e7f:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011e84:	e8 15 e9 00 00       	call   c002079e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e90:	8d 50 01             	lea    edx,[eax+0x1]
c0011e93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e97:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011e9c:	0f 94 c0             	sete   al
c0011e9f:	0f b6 c0             	movzx  eax,al
c0011ea2:	85 c0                	test   eax,eax
c0011ea4:	74 a4                	je     c0011e4a <UnixFile::~UnixFile()+0x24>
c0011ea6:	83 ec 0c             	sub    esp,0xc
c0011ea9:	68 f8 2a 02 c0       	push   0xc0022af8
c0011eae:	e8 f3 cd ff ff       	call   c000eca6 <KePanic(char const*)>
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	eb 92                	jmp    c0011e4a <UnixFile::~UnixFile()+0x24>
c0011eb8:	90                   	nop
c0011eb9:	eb 01                	jmp    c0011ebc <UnixFile::~UnixFile()+0x96>
c0011ebb:	90                   	nop
c0011ebc:	90                   	nop
c0011ebd:	83 c4 1c             	add    esp,0x1c
c0011ec0:	c3                   	ret    
c0011ec1:	90                   	nop

c0011ec2 <UnixFile::~UnixFile()>:
c0011ec2:	83 ec 0c             	sub    esp,0xc
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ecc:	e8 55 ff ff ff       	call   c0011e26 <UnixFile::~UnixFile()>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	83 ec 08             	sub    esp,0x8
c0011ed7:	6a 0c                	push   0xc
c0011ed9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011edd:	e8 e2 a7 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0011ee2:	83 c4 10             	add    esp,0x10
c0011ee5:	83 c4 0c             	add    esp,0xc
c0011ee8:	c3                   	ret    
c0011ee9:	90                   	nop

c0011eea <ReservedFilename::~ReservedFilename()>:
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	ba 84 2b 02 c0       	mov    edx,0xc0022b84
c0011ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef6:	89 10                	mov    DWORD PTR [eax],edx
c0011ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	50                   	push   eax
c0011f00:	e8 21 ff ff ff       	call   c0011e26 <UnixFile::~UnixFile()>
c0011f05:	83 c4 10             	add    esp,0x10
c0011f08:	90                   	nop
c0011f09:	83 c4 0c             	add    esp,0xc
c0011f0c:	c3                   	ret    
c0011f0d:	90                   	nop

c0011f0e <ReservedFilename::~ReservedFilename()>:
c0011f0e:	83 ec 0c             	sub    esp,0xc
c0011f11:	83 ec 0c             	sub    esp,0xc
c0011f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f18:	e8 cd ff ff ff       	call   c0011eea <ReservedFilename::~ReservedFilename()>
c0011f1d:	83 c4 10             	add    esp,0x10
c0011f20:	83 ec 08             	sub    esp,0x8
c0011f23:	6a 0c                	push   0xc
c0011f25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f29:	e8 96 a7 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0011f2e:	83 c4 10             	add    esp,0x10
c0011f31:	83 c4 0c             	add    esp,0xc
c0011f34:	c3                   	ret    

c0011f35 <KeGetFileFromDescriptor(int)>:
c0011f35:	53                   	push   ebx
c0011f36:	83 ec 20             	sub    esp,0x20
c0011f39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011f3d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011f43:	53                   	push   ebx
c0011f44:	68 18 2b 02 c0       	push   0xc0022b18
c0011f49:	e8 16 50 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011f57:	7f 63                	jg     c0011fbc <KeGetFileFromDescriptor(int)+0x87>
c0011f59:	83 ec 0c             	sub    esp,0xc
c0011f5c:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011f61:	e8 0c e9 00 00       	call   c0020872 <LinkedList<UnixFile>::getFirstElement()>
c0011f66:	5a                   	pop    edx
c0011f67:	59                   	pop    ecx
c0011f68:	50                   	push   eax
c0011f69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f6d:	68 3a 2b 02 c0       	push   0xc0022b3a
c0011f72:	e8 ed 4f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011f77:	83 c4 10             	add    esp,0x10
c0011f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f7e:	8d 50 ff             	lea    edx,[eax-0x1]
c0011f81:	83 fa fd             	cmp    edx,0xfffffffd
c0011f84:	76 07                	jbe    c0011f8d <KeGetFileFromDescriptor(int)+0x58>
c0011f86:	31 c0                	xor    eax,eax
c0011f88:	e9 8d 00 00 00       	jmp    c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011f8d:	51                   	push   ecx
c0011f8e:	51                   	push   ecx
c0011f8f:	50                   	push   eax
c0011f90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f94:	68 4e 2b 02 c0       	push   0xc0022b4e
c0011f99:	e8 c6 4f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011f9e:	83 c4 10             	add    esp,0x10
c0011fa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fa5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011fa8:	74 70                	je     c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011faa:	52                   	push   edx
c0011fab:	52                   	push   edx
c0011fac:	50                   	push   eax
c0011fad:	68 b8 ce 02 c0       	push   0xc002ceb8
c0011fb2:	e8 65 e9 00 00       	call   c002091c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	eb c2                	jmp    c0011f7e <KeGetFileFromDescriptor(int)+0x49>
c0011fbc:	a1 ac ce 02 c0       	mov    eax,ds:0xc002ceac
c0011fc1:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011fc7:	74 51                	je     c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011fc9:	a1 b0 ce 02 c0       	mov    eax,ds:0xc002ceb0
c0011fce:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011fd4:	74 44                	je     c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011fd6:	a1 a8 ce 02 c0       	mov    eax,ds:0xc002cea8
c0011fdb:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011fe1:	74 37                	je     c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011fe3:	a1 a4 ce 02 c0       	mov    eax,ds:0xc002cea4
c0011fe8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011fee:	74 2a                	je     c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0011ff0:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011ff6:	83 f8 08             	cmp    eax,0x8
c0011ff9:	77 09                	ja     c0012004 <KeGetFileFromDescriptor(int)+0xcf>
c0011ffb:	8b 04 85 80 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3180]
c0012002:	eb 16                	jmp    c001201a <KeGetFileFromDescriptor(int)+0xe5>
c0012004:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001200a:	83 fb 08             	cmp    ebx,0x8
c001200d:	0f 87 73 ff ff ff    	ja     c0011f86 <KeGetFileFromDescriptor(int)+0x51>
c0012013:	8b 04 9d 40 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31c0]
c001201a:	83 c4 18             	add    esp,0x18
c001201d:	5b                   	pop    ebx
c001201e:	c3                   	ret    

c001201f <__static_initialization_and_destruction_0(int, int)>:
c001201f:	83 ec 0c             	sub    esp,0xc
c0012022:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012027:	75 34                	jne    c001205d <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012029:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012031:	75 2a                	jne    c001205d <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	68 b8 ce 02 c0       	push   0xc002ceb8
c001203b:	e8 1c e7 00 00       	call   c002075c <LinkedList<UnixFile>::LinkedList()>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 04             	sub    esp,0x4
c0012046:	68 40 46 02 c0       	push   0xc0024640
c001204b:	68 b8 ce 02 c0       	push   0xc002ceb8
c0012050:	68 5a 07 02 c0       	push   0xc002075a
c0012055:	e8 1a a6 ff ff       	call   c000c674 <__cxa_atexit>
c001205a:	83 c4 10             	add    esp,0x10
c001205d:	90                   	nop
c001205e:	83 c4 0c             	add    esp,0xc
c0012061:	c3                   	ret    

c0012062 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012062:	83 ec 0c             	sub    esp,0xc
c0012065:	83 ec 08             	sub    esp,0x8
c0012068:	68 ff ff 00 00       	push   0xffff
c001206d:	6a 01                	push   0x1
c001206f:	e8 ab ff ff ff       	call   c001201f <__static_initialization_and_destruction_0(int, int)>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	83 c4 0c             	add    esp,0xc
c001207a:	c3                   	ret    
c001207b:	90                   	nop

c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001207c:	53                   	push   ebx
c001207d:	8b 15 e8 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024de8
c0012083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012087:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001208b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012091:	89 d8                	mov    eax,ebx
c0012093:	d1 e8                	shr    eax,1
c0012095:	01 d0                	add    eax,edx
c0012097:	80 e3 01             	and    bl,0x1
c001209a:	8a 10                	mov    dl,BYTE PTR [eax]
c001209c:	75 09                	jne    c00120a7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001209e:	83 e2 f0             	and    edx,0xfffffff0
c00120a1:	09 ca                	or     edx,ecx
c00120a3:	88 10                	mov    BYTE PTR [eax],dl
c00120a5:	5b                   	pop    ebx
c00120a6:	c3                   	ret    
c00120a7:	83 e2 0f             	and    edx,0xf
c00120aa:	0f b6 c9             	movzx  ecx,cl
c00120ad:	c1 e1 04             	shl    ecx,0x4
c00120b0:	09 ca                	or     edx,ecx
c00120b2:	88 10                	mov    BYTE PTR [eax],dl
c00120b4:	5b                   	pop    ebx
c00120b5:	c3                   	ret    

c00120b6 <Virt::getPageState(unsigned long)>:
c00120b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ba:	8b 0d e8 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024de8
c00120c0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00120c6:	89 d0                	mov    eax,edx
c00120c8:	d1 e8                	shr    eax,1
c00120ca:	80 e2 01             	and    dl,0x1
c00120cd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00120d0:	74 03                	je     c00120d5 <Virt::getPageState(unsigned long)+0x1f>
c00120d2:	c1 e8 04             	shr    eax,0x4
c00120d5:	83 e0 0f             	and    eax,0xf
c00120d8:	c3                   	ret    

c00120d9 <Virt::allocateKernelVirtualPages(int)>:
c00120d9:	55                   	push   ebp
c00120da:	31 ed                	xor    ebp,ebp
c00120dc:	57                   	push   edi
c00120dd:	31 ff                	xor    edi,edi
c00120df:	56                   	push   esi
c00120e0:	53                   	push   ebx
c00120e1:	31 db                	xor    ebx,ebx
c00120e3:	83 ec 0c             	sub    esp,0xc
c00120e6:	8b 35 e4 4d 02 c0    	mov    esi,DWORD PTR ds:0xc0024de4
c00120ec:	56                   	push   esi
c00120ed:	e8 c4 ff ff ff       	call   c00120b6 <Virt::getPageState(unsigned long)>
c00120f2:	5a                   	pop    edx
c00120f3:	84 c0                	test   al,al
c00120f5:	75 41                	jne    c0012138 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00120f7:	85 db                	test   ebx,ebx
c00120f9:	75 02                	jne    c00120fd <Virt::allocateKernelVirtualPages(int)+0x24>
c00120fb:	89 f5                	mov    ebp,esi
c00120fd:	83 c3 01             	add    ebx,0x1
c0012100:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012104:	74 5f                	je     c0012165 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0012106:	83 c6 01             	add    esi,0x1
c0012109:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001210f:	76 34                	jbe    c0012145 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012111:	c7 05 e4 4d 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024de4,0xc8000
c001211b:	f7 c7 01 00 00 00    	test   edi,0x1
c0012121:	75 2a                	jne    c001214d <Virt::allocateKernelVirtualPages(int)+0x74>
c0012123:	be 00 80 0c 00       	mov    esi,0xc8000
c0012128:	bf 01 00 00 00       	mov    edi,0x1
c001212d:	56                   	push   esi
c001212e:	e8 83 ff ff ff       	call   c00120b6 <Virt::getPageState(unsigned long)>
c0012133:	5a                   	pop    edx
c0012134:	84 c0                	test   al,al
c0012136:	74 bf                	je     c00120f7 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0012138:	31 db                	xor    ebx,ebx
c001213a:	83 c6 01             	add    esi,0x1
c001213d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012143:	77 cc                	ja     c0012111 <Virt::allocateKernelVirtualPages(int)+0x38>
c0012145:	89 35 e4 4d 02 c0    	mov    DWORD PTR ds:0xc0024de4,esi
c001214b:	eb 9f                	jmp    c00120ec <Virt::allocateKernelVirtualPages(int)+0x13>
c001214d:	83 ec 0c             	sub    esp,0xc
c0012150:	68 98 2b 02 c0       	push   0xc0022b98
c0012155:	e8 4c cb ff ff       	call   c000eca6 <KePanic(char const*)>
c001215a:	8b 35 e4 4d 02 c0    	mov    esi,DWORD PTR ds:0xc0024de4
c0012160:	83 c4 10             	add    esp,0x10
c0012163:	eb 87                	jmp    c00120ec <Virt::allocateKernelVirtualPages(int)+0x13>
c0012165:	89 2d e4 4d 02 c0    	mov    DWORD PTR ds:0xc0024de4,ebp
c001216b:	83 fb 01             	cmp    ebx,0x1
c001216e:	74 6f                	je     c00121df <Virt::allocateKernelVirtualPages(int)+0x106>
c0012170:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012174:	85 c9                	test   ecx,ecx
c0012176:	74 49                	je     c00121c1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012178:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001217c:	89 e8                	mov    eax,ebp
c001217e:	31 db                	xor    ebx,ebx
c0012180:	8d 79 ff             	lea    edi,[ecx-0x1]
c0012183:	eb 18                	jmp    c001219d <Virt::allocateKernelVirtualPages(int)+0xc4>
c0012185:	6a 01                	push   0x1
c0012187:	83 c3 01             	add    ebx,0x1
c001218a:	50                   	push   eax
c001218b:	e8 ec fe ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012190:	58                   	pop    eax
c0012191:	5a                   	pop    edx
c0012192:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012196:	74 29                	je     c00121c1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012198:	a1 e4 4d 02 c0       	mov    eax,ds:0xc0024de4
c001219d:	8d 50 01             	lea    edx,[eax+0x1]
c00121a0:	85 db                	test   ebx,ebx
c00121a2:	89 15 e4 4d 02 c0    	mov    DWORD PTR ds:0xc0024de4,edx
c00121a8:	74 24                	je     c00121ce <Virt::allocateKernelVirtualPages(int)+0xf5>
c00121aa:	39 df                	cmp    edi,ebx
c00121ac:	75 d7                	jne    c0012185 <Virt::allocateKernelVirtualPages(int)+0xac>
c00121ae:	6a 03                	push   0x3
c00121b0:	83 c3 01             	add    ebx,0x1
c00121b3:	50                   	push   eax
c00121b4:	e8 c3 fe ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121b9:	59                   	pop    ecx
c00121ba:	5e                   	pop    esi
c00121bb:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00121bf:	75 d7                	jne    c0012198 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00121c1:	83 c4 0c             	add    esp,0xc
c00121c4:	89 e8                	mov    eax,ebp
c00121c6:	5b                   	pop    ebx
c00121c7:	c1 e0 0c             	shl    eax,0xc
c00121ca:	5e                   	pop    esi
c00121cb:	5f                   	pop    edi
c00121cc:	5d                   	pop    ebp
c00121cd:	c3                   	ret    
c00121ce:	6a 02                	push   0x2
c00121d0:	bb 01 00 00 00       	mov    ebx,0x1
c00121d5:	50                   	push   eax
c00121d6:	e8 a1 fe ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121db:	58                   	pop    eax
c00121dc:	5a                   	pop    edx
c00121dd:	eb b9                	jmp    c0012198 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00121df:	6a 04                	push   0x4
c00121e1:	8d 45 01             	lea    eax,[ebp+0x1]
c00121e4:	55                   	push   ebp
c00121e5:	a3 e4 4d 02 c0       	mov    ds:0xc0024de4,eax
c00121ea:	e8 8d fe ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00121ef:	5b                   	pop    ebx
c00121f0:	89 e8                	mov    eax,ebp
c00121f2:	5e                   	pop    esi
c00121f3:	c1 e0 0c             	shl    eax,0xc
c00121f6:	83 c4 0c             	add    esp,0xc
c00121f9:	5b                   	pop    ebx
c00121fa:	5e                   	pop    esi
c00121fb:	5f                   	pop    edi
c00121fc:	5d                   	pop    ebp
c00121fd:	c3                   	ret    

c00121fe <Virt::freeSwapfilePage(unsigned long)>:
c00121fe:	53                   	push   ebx
c00121ff:	8b 15 cc ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cecc
c0012205:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012209:	b8 01 00 00 00       	mov    eax,0x1
c001220e:	89 cb                	mov    ebx,ecx
c0012210:	d3 e0                	shl    eax,cl
c0012212:	c1 eb 05             	shr    ebx,0x5
c0012215:	f7 d0                	not    eax
c0012217:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001221a:	21 c1                	and    ecx,eax
c001221c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001221f:	5b                   	pop    ebx
c0012220:	c3                   	ret    

c0012221 <Virt::swapIDToSector(unsigned long)>:
c0012221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012225:	8b 15 ec 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024dec
c001222b:	8b 0d f4 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024df4
c0012231:	0f af c2             	imul   eax,edx
c0012234:	01 c8                	add    eax,ecx
c0012236:	c3                   	ret    

c0012237 <Virt::allocateSwapfilePage()>:
c0012237:	55                   	push   ebp
c0012238:	31 d2                	xor    edx,edx
c001223a:	57                   	push   edi
c001223b:	56                   	push   esi
c001223c:	53                   	push   ebx
c001223d:	83 ec 0c             	sub    esp,0xc
c0012240:	8b 0d ec 4d 02 c0    	mov    ecx,DWORD PTR ds:0xc0024dec
c0012246:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c001224b:	f7 f1                	div    ecx
c001224d:	39 0d f0 4d 02 c0    	cmp    DWORD PTR ds:0xc0024df0,ecx
c0012253:	72 2f                	jb     c0012284 <Virt::allocateSwapfilePage()+0x4d>
c0012255:	8b 35 cc ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cecc
c001225b:	8b 16                	mov    edx,DWORD PTR [esi]
c001225d:	f6 c2 01             	test   dl,0x1
c0012260:	74 3e                	je     c00122a0 <Virt::allocateSwapfilePage()+0x69>
c0012262:	31 c9                	xor    ecx,ecx
c0012264:	bf 01 00 00 00       	mov    edi,0x1
c0012269:	eb 12                	jmp    c001227d <Virt::allocateSwapfilePage()+0x46>
c001226b:	89 fd                	mov    ebp,edi
c001226d:	89 ca                	mov    edx,ecx
c001226f:	d3 e5                	shl    ebp,cl
c0012271:	c1 ea 05             	shr    edx,0x5
c0012274:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012277:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012279:	85 ea                	test   edx,ebp
c001227b:	74 2c                	je     c00122a9 <Virt::allocateSwapfilePage()+0x72>
c001227d:	83 c1 01             	add    ecx,0x1
c0012280:	39 c8                	cmp    eax,ecx
c0012282:	77 e7                	ja     c001226b <Virt::allocateSwapfilePage()+0x34>
c0012284:	83 ec 0c             	sub    esp,0xc
c0012287:	68 bb 30 02 c0       	push   0xc00230bb
c001228c:	e8 15 ca ff ff       	call   c000eca6 <KePanic(char const*)>
c0012291:	83 c4 10             	add    esp,0x10
c0012294:	31 c9                	xor    ecx,ecx
c0012296:	83 c4 0c             	add    esp,0xc
c0012299:	89 c8                	mov    eax,ecx
c001229b:	5b                   	pop    ebx
c001229c:	5e                   	pop    esi
c001229d:	5f                   	pop    edi
c001229e:	5d                   	pop    ebp
c001229f:	c3                   	ret    
c00122a0:	89 f3                	mov    ebx,esi
c00122a2:	bd 01 00 00 00       	mov    ebp,0x1
c00122a7:	31 c9                	xor    ecx,ecx
c00122a9:	09 ea                	or     edx,ebp
c00122ab:	89 c8                	mov    eax,ecx
c00122ad:	89 13                	mov    DWORD PTR [ebx],edx
c00122af:	83 c4 0c             	add    esp,0xc
c00122b2:	5b                   	pop    ebx
c00122b3:	5e                   	pop    esi
c00122b4:	5f                   	pop    edi
c00122b5:	5d                   	pop    ebp
c00122b6:	c3                   	ret    

c00122b7 <Virt::virtualMemorySetup()>:
c00122b7:	53                   	push   ebx
c00122b8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00122bd:	6a 0f                	push   0xf
c00122bf:	53                   	push   ebx
c00122c0:	83 c3 01             	add    ebx,0x1
c00122c3:	e8 b4 fd ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122c8:	58                   	pop    eax
c00122c9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00122cf:	5a                   	pop    edx
c00122d0:	75 eb                	jne    c00122bd <Virt::virtualMemorySetup()+0x6>
c00122d2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00122d7:	6a 00                	push   0x0
c00122d9:	53                   	push   ebx
c00122da:	83 c3 01             	add    ebx,0x1
c00122dd:	e8 9a fd ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122e2:	59                   	pop    ecx
c00122e3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00122e9:	58                   	pop    eax
c00122ea:	75 eb                	jne    c00122d7 <Virt::virtualMemorySetup()+0x20>
c00122ec:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00122f1:	6a 0f                	push   0xf
c00122f3:	53                   	push   ebx
c00122f4:	83 c3 01             	add    ebx,0x1
c00122f7:	e8 80 fd ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00122fc:	58                   	pop    eax
c00122fd:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012303:	5a                   	pop    edx
c0012304:	75 eb                	jne    c00122f1 <Virt::virtualMemorySetup()+0x3a>
c0012306:	5b                   	pop    ebx
c0012307:	c3                   	ret    

c0012308 <Virt::setupPageSwapping(int)>:
c0012308:	53                   	push   ebx
c0012309:	83 ec 0c             	sub    esp,0xc
c001230c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012310:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c0012315:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001231b:	8b 10                	mov    edx,DWORD PTR [eax]
c001231d:	53                   	push   ebx
c001231e:	c1 e3 0b             	shl    ebx,0xb
c0012321:	68 d2 30 02 c0       	push   0xc00230d2
c0012326:	50                   	push   eax
c0012327:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001232a:	89 1d f0 4d 02 c0    	mov    DWORD PTR ds:0xc0024df0,ebx
c0012330:	c6 05 f8 4d 02 c0 43 	mov    BYTE PTR ds:0xc0024df8,0x43
c0012337:	c1 eb 08             	shr    ebx,0x8
c001233a:	a3 f4 4d 02 c0       	mov    ds:0xc0024df4,eax
c001233f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012342:	c7 05 ec 4d 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0024dec,0x8
c001234c:	e8 0e c6 ff ff       	call   c000e95f <malloc>
c0012351:	83 c4 0c             	add    esp,0xc
c0012354:	89 c1                	mov    ecx,eax
c0012356:	a3 cc ce 02 c0       	mov    ds:0xc002cecc,eax
c001235b:	31 d2                	xor    edx,edx
c001235d:	a1 f0 4d 02 c0       	mov    eax,ds:0xc0024df0
c0012362:	f7 35 ec 4d 02 c0    	div    DWORD PTR ds:0xc0024dec
c0012368:	c1 e8 05             	shr    eax,0x5
c001236b:	50                   	push   eax
c001236c:	6a 00                	push   0x0
c001236e:	51                   	push   ecx
c001236f:	e8 7c e1 fe ff       	call   c00004f0 <memset>
c0012374:	83 c4 18             	add    esp,0x18
c0012377:	5b                   	pop    ebx
c0012378:	c3                   	ret    
c0012379:	90                   	nop

c001237a <VAS::setCPUSpecific(unsigned long)>:
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VAS::VAS(VAS*)>:
c001237c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012380:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001238b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012392:	90                   	nop
c0012393:	c3                   	ret    

c0012394 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012398:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001239d:	89 c2                	mov    edx,eax
c001239f:	c1 e8 0a             	shr    eax,0xa
c00123a2:	c1 ea 16             	shr    edx,0x16
c00123a5:	83 f9 01             	cmp    ecx,0x1
c00123a8:	19 c9                	sbb    ecx,ecx
c00123aa:	c1 e2 0c             	shl    edx,0xc
c00123ad:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00123b3:	25 fc 0f 00 00       	and    eax,0xffc
c00123b8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00123bf:	01 d0                	add    eax,edx
c00123c1:	c3                   	ret    

c00123c2 <VAS::getPageTableEntry(unsigned long)>:
c00123c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123c6:	89 ca                	mov    edx,ecx
c00123c8:	c1 e9 0a             	shr    ecx,0xa
c00123cb:	c1 ea 16             	shr    edx,0x16
c00123ce:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00123d4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00123da:	c1 e0 0c             	shl    eax,0xc
c00123dd:	8d 04 08             	lea    eax,[eax+ecx*1]
c00123e0:	c3                   	ret    

c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00123e1:	55                   	push   ebp
c00123e2:	57                   	push   edi
c00123e3:	bf 01 00 00 00       	mov    edi,0x1
c00123e8:	56                   	push   esi
c00123e9:	53                   	push   ebx
c00123ea:	83 ec 1c             	sub    esp,0x1c
c00123ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123f1:	c1 ee 0c             	shr    esi,0xc
c00123f4:	eb 48                	jmp    c001243e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00123f6:	83 ec 08             	sub    esp,0x8
c00123f9:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c00123fe:	55                   	push   ebp
c00123ff:	50                   	push   eax
c0012400:	e8 bd ff ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012405:	83 c4 10             	add    esp,0x10
c0012408:	8b 10                	mov    edx,DWORD PTR [eax]
c001240a:	f6 c6 04             	test   dh,0x4
c001240d:	75 70                	jne    c001247f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001240f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012415:	83 fb 04             	cmp    ebx,0x4
c0012418:	0f 84 8a 00 00 00    	je     c00124a8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001241e:	83 fb 02             	cmp    ebx,0x2
c0012421:	0f 84 9a 00 00 00    	je     c00124c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012427:	83 fb 03             	cmp    ebx,0x3
c001242a:	0f 84 be 00 00 00    	je     c00124ee <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012430:	83 fb 01             	cmp    ebx,0x1
c0012433:	0f 84 a2 00 00 00    	je     c00124db <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012439:	83 c6 01             	add    esi,0x1
c001243c:	31 ff                	xor    edi,edi
c001243e:	56                   	push   esi
c001243f:	89 f5                	mov    ebp,esi
c0012441:	e8 70 fc ff ff       	call   c00120b6 <Virt::getPageState(unsigned long)>
c0012446:	c1 e5 0c             	shl    ebp,0xc
c0012449:	0f b6 d8             	movzx  ebx,al
c001244c:	5a                   	pop    edx
c001244d:	85 db                	test   ebx,ebx
c001244f:	75 a5                	jne    c00123f6 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012451:	83 ec 0c             	sub    esp,0xc
c0012454:	68 e9 30 02 c0       	push   0xc00230e9
c0012459:	e8 48 c8 ff ff       	call   c000eca6 <KePanic(char const*)>
c001245e:	5a                   	pop    edx
c001245f:	59                   	pop    ecx
c0012460:	55                   	push   ebp
c0012461:	8b 2d d0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002ced0
c0012467:	55                   	push   ebp
c0012468:	e8 55 ff ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c001246d:	83 c4 10             	add    esp,0x10
c0012470:	8b 10                	mov    edx,DWORD PTR [eax]
c0012472:	f6 c6 04             	test   dh,0x4
c0012475:	75 08                	jne    c001247f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001247d:	eb ba                	jmp    c0012439 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001247f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012483:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012489:	83 ec 0c             	sub    esp,0xc
c001248c:	52                   	push   edx
c001248d:	e8 9f c9 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	83 fb 04             	cmp    ebx,0x4
c0012498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00124a2:	0f 85 76 ff ff ff    	jne    c001241e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00124a8:	83 e7 01             	and    edi,0x1
c00124ab:	75 46                	jne    c00124f3 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00124ad:	c7 44 24 30 b8 2b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022bb8
c00124b5:	83 c4 1c             	add    esp,0x1c
c00124b8:	5b                   	pop    ebx
c00124b9:	5e                   	pop    esi
c00124ba:	5f                   	pop    edi
c00124bb:	5d                   	pop    ebp
c00124bc:	e9 e5 c7 ff ff       	jmp    c000eca6 <KePanic(char const*)>
c00124c1:	83 e7 01             	and    edi,0x1
c00124c4:	75 15                	jne    c00124db <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00124c6:	83 ec 0c             	sub    esp,0xc
c00124c9:	68 05 31 02 c0       	push   0xc0023105
c00124ce:	e8 d3 c7 ff ff       	call   c000eca6 <KePanic(char const*)>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	e9 5e ff ff ff       	jmp    c0012439 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124db:	83 ec 08             	sub    esp,0x8
c00124de:	6a 00                	push   0x0
c00124e0:	56                   	push   esi
c00124e1:	e8 96 fb ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124e6:	83 c4 10             	add    esp,0x10
c00124e9:	e9 4b ff ff ff       	jmp    c0012439 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00124ee:	83 e7 01             	and    edi,0x1
c00124f1:	75 16                	jne    c0012509 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00124f3:	83 ec 08             	sub    esp,0x8
c00124f6:	6a 00                	push   0x0
c00124f8:	56                   	push   esi
c00124f9:	e8 7e fb ff ff       	call   c001207c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00124fe:	83 c4 10             	add    esp,0x10
c0012501:	83 c4 1c             	add    esp,0x1c
c0012504:	5b                   	pop    ebx
c0012505:	5e                   	pop    esi
c0012506:	5f                   	pop    edi
c0012507:	5d                   	pop    ebp
c0012508:	c3                   	ret    
c0012509:	c7 44 24 30 21 31 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023121
c0012511:	83 c4 1c             	add    esp,0x1c
c0012514:	5b                   	pop    ebx
c0012515:	5e                   	pop    esi
c0012516:	5f                   	pop    edi
c0012517:	5d                   	pop    ebp
c0012518:	e9 89 c7 ff ff       	jmp    c000eca6 <KePanic(char const*)>
c001251d:	90                   	nop

c001251e <VAS::freeAllocatedPages(unsigned long)>:
c001251e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012526:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001252a:	74 09                	je     c0012535 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001252c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012530:	e9 ac fe ff ff       	jmp    c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012535:	c7 44 24 04 dc 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bdc
c001253d:	e9 22 4a ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012542 <VAS::virtualToPhysical(unsigned long)>:
c0012542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012546:	50                   	push   eax
c0012547:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001254b:	52                   	push   edx
c001254c:	e8 71 fe ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012551:	59                   	pop    ecx
c0012552:	8b 00                	mov    eax,DWORD PTR [eax]
c0012554:	5a                   	pop    edx
c0012555:	25 00 f0 ff ff       	and    eax,0xfffff000
c001255a:	c3                   	ret    
c001255b:	90                   	nop

c001255c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001255c:	55                   	push   ebp
c001255d:	57                   	push   edi
c001255e:	56                   	push   esi
c001255f:	53                   	push   ebx
c0012560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012564:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012568:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001256c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012570:	85 db                	test   ebx,ebx
c0012572:	7e 24                	jle    c0012598 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012574:	c1 e3 0c             	shl    ebx,0xc
c0012577:	01 f3                	add    ebx,esi
c0012579:	56                   	push   esi
c001257a:	81 c6 00 10 00 00    	add    esi,0x1000
c0012580:	55                   	push   ebp
c0012581:	e8 3c fe ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012586:	5a                   	pop    edx
c0012587:	59                   	pop    ecx
c0012588:	8b 08                	mov    ecx,DWORD PTR [eax]
c001258a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001258e:	21 f9                	and    ecx,edi
c0012590:	09 d1                	or     ecx,edx
c0012592:	39 f3                	cmp    ebx,esi
c0012594:	89 08                	mov    DWORD PTR [eax],ecx
c0012596:	75 e1                	jne    c0012579 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012598:	5b                   	pop    ebx
c0012599:	5e                   	pop    esi
c001259a:	5f                   	pop    edi
c001259b:	5d                   	pop    ebp
c001259c:	c3                   	ret    
c001259d:	90                   	nop

c001259e <VAS::VAS()>:
c001259e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00125a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00125b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b8:	a3 d0 ce 02 c0       	mov    ds:0xc002ced0,eax
c00125bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00125c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125c9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00125cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00125d7:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c00125dc:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00125e1:	29 c2                	sub    edx,eax
c00125e3:	89 d0                	mov    eax,edx
c00125e5:	05 ff 0f 00 00       	add    eax,0xfff
c00125ea:	c1 e8 0c             	shr    eax,0xc
c00125ed:	89 c2                	mov    edx,eax
c00125ef:	b8 00 60 02 c0       	mov    eax,0xc0026000
c00125f4:	6a 04                	push   0x4
c00125f6:	6a ff                	push   0xffffffff
c00125f8:	52                   	push   edx
c00125f9:	50                   	push   eax
c00125fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125fe:	e8 59 ff ff ff       	call   c001255c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012603:	83 c4 14             	add    esp,0x14
c0012606:	90                   	nop
c0012607:	c3                   	ret    

c0012608 <VAS::setToWriteCombining(unsigned long, int)>:
c0012608:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c001260d:	50                   	push   eax
c001260e:	6a ff                	push   0xffffffff
c0012610:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012614:	52                   	push   edx
c0012615:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012619:	51                   	push   ecx
c001261a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001261e:	50                   	push   eax
c001261f:	e8 38 ff ff ff       	call   c001255c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012624:	83 c4 14             	add    esp,0x14
c0012627:	c3                   	ret    

c0012628 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001262c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001262f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012633:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012636:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001263b:	83 f8 01             	cmp    eax,0x1
c001263e:	19 c0                	sbb    eax,eax
c0012640:	83 ca 03             	or     edx,0x3
c0012643:	83 e0 fc             	and    eax,0xfffffffc
c0012646:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001264d:	0f 20 d8             	mov    eax,cr3
c0012650:	0f 22 d8             	mov    cr3,eax
c0012653:	c3                   	ret    

c0012654 <VAS::~VAS()>:
c0012654:	83 ec 2c             	sub    esp,0x2c
c0012657:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001265f:	fa                   	cli    
c0012660:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012665:	83 c0 01             	add    eax,0x1
c0012668:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c001266d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012672:	8b 00                	mov    eax,DWORD PTR [eax]
c0012674:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012677:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001267d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012681:	6a 01                	push   0x1
c0012683:	50                   	push   eax
c0012684:	e8 9f ff ff ff       	call   c0012628 <VAS::mapOtherVASIn(bool, VAS*)>
c0012689:	83 c4 0c             	add    esp,0xc
c001268c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012694:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001269c:	0f 8f d8 00 00 00    	jg     c001277a <VAS::~VAS()+0x126>
c00126a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126ad:	c1 e2 02             	shl    edx,0x2
c00126b0:	01 d0                	add    eax,edx
c00126b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126bc:	83 e0 01             	and    eax,0x1
c00126bf:	0f 84 ab 00 00 00    	je     c0012770 <VAS::~VAS()+0x11c>
c00126c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126cd:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00126d5:	7f 74                	jg     c001274b <VAS::~VAS()+0xf7>
c00126d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126db:	c1 e0 0a             	shl    eax,0xa
c00126de:	89 c2                	mov    edx,eax
c00126e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126e4:	01 d0                	add    eax,edx
c00126e6:	c1 e0 0c             	shl    eax,0xc
c00126e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00126f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00126f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00126f7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00126fd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012701:	6a 01                	push   0x1
c0012703:	50                   	push   eax
c0012704:	e8 8b fc ff ff       	call   c0012394 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012709:	83 c4 0c             	add    esp,0xc
c001270c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012714:	8b 00                	mov    eax,DWORD PTR [eax]
c0012716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001271a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001271e:	25 01 04 00 00       	and    eax,0x401
c0012723:	3d 01 04 00 00       	cmp    eax,0x401
c0012728:	75 1a                	jne    c0012744 <VAS::~VAS()+0xf0>
c001272a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001272e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012733:	83 ec 0c             	sub    esp,0xc
c0012736:	50                   	push   eax
c0012737:	e8 f5 c6 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c001273c:	83 c4 10             	add    esp,0x10
c001273f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012744:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0012749:	eb 82                	jmp    c00126cd <VAS::~VAS()+0x79>
c001274b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001274f:	25 00 04 00 00       	and    eax,0x400
c0012754:	74 1a                	je     c0012770 <VAS::~VAS()+0x11c>
c0012756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001275a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001275f:	83 ec 0c             	sub    esp,0xc
c0012762:	50                   	push   eax
c0012763:	e8 c9 c6 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012770:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012775:	e9 1a ff ff ff       	jmp    c0012694 <VAS::~VAS()+0x40>
c001277a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001277e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012781:	83 ec 0c             	sub    esp,0xc
c0012784:	50                   	push   eax
c0012785:	e8 57 fc ff ff       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012794:	83 ec 0c             	sub    esp,0xc
c0012797:	50                   	push   eax
c0012798:	e8 94 c6 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c001279d:	83 c4 10             	add    esp,0x10
c00127a0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00127a5:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00127ad:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00127b2:	85 c0                	test   eax,eax
c00127b4:	75 01                	jne    c00127b7 <VAS::~VAS()+0x163>
c00127b6:	fb                   	sti    
c00127b7:	90                   	nop
c00127b8:	83 c4 2c             	add    esp,0x2c
c00127bb:	c3                   	ret    

c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>:
c00127bc:	55                   	push   ebp
c00127bd:	57                   	push   edi
c00127be:	56                   	push   esi
c00127bf:	53                   	push   ebx
c00127c0:	83 ec 1c             	sub    esp,0x1c
c00127c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00127c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00127cb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00127d1:	77 08                	ja     c00127db <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00127d3:	0f 20 d8             	mov    eax,cr3
c00127d6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00127d9:	75 49                	jne    c0012824 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c00127db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127df:	09 d8                	or     eax,ebx
c00127e1:	a9 ff 0f 00 00       	test   eax,0xfff
c00127e6:	75 59                	jne    c0012841 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c00127e8:	89 de                	mov    esi,ebx
c00127ea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127ed:	c1 ee 16             	shr    esi,0x16
c00127f0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00127f7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00127fb:	74 56                	je     c0012853 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00127fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012801:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012805:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001280b:	c1 eb 0a             	shr    ebx,0xa
c001280e:	c1 e6 0c             	shl    esi,0xc
c0012811:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012817:	09 d0                	or     eax,edx
c0012819:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001281c:	83 c4 1c             	add    esp,0x1c
c001281f:	5b                   	pop    ebx
c0012820:	5e                   	pop    esi
c0012821:	5f                   	pop    edi
c0012822:	5d                   	pop    ebp
c0012823:	c3                   	ret    
c0012824:	83 ec 0c             	sub    esp,0xc
c0012827:	68 00 2c 02 c0       	push   0xc0022c00
c001282c:	e8 33 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012831:	83 c4 10             	add    esp,0x10
c0012834:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012838:	09 d8                	or     eax,ebx
c001283a:	a9 ff 0f 00 00       	test   eax,0xfff
c001283f:	74 a7                	je     c00127e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012841:	83 ec 0c             	sub    esp,0xc
c0012844:	68 68 2c 02 c0       	push   0xc0022c68
c0012849:	e8 58 c4 ff ff       	call   c000eca6 <KePanic(char const*)>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	eb 95                	jmp    c00127e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012853:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012857:	e8 3e c6 ff ff       	call   c000ee9a <Phys::allocatePage()>
c001285c:	83 ec 0c             	sub    esp,0xc
c001285f:	89 c5                	mov    ebp,eax
c0012861:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012867:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001286b:	6a 01                	push   0x1
c001286d:	e8 67 f8 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c0012872:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012879:	6a 01                	push   0x1
c001287b:	50                   	push   eax
c001287c:	55                   	push   ebp
c001287d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012883:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012887:	51                   	push   ecx
c0012888:	e8 19 01 00 00       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001288d:	83 c4 1c             	add    esp,0x1c
c0012890:	68 00 10 00 00       	push   0x1000
c0012895:	6a 00                	push   0x0
c0012897:	50                   	push   eax
c0012898:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001289c:	e8 4f dc fe ff       	call   c00004f0 <memset>
c00128a1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00128a5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00128a8:	e8 34 fb ff ff       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c00128ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128b1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00128b4:	83 c4 10             	add    esp,0x10
c00128b7:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00128ba:	e9 3e ff ff ff       	jmp    c00127fd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c00128bf:	90                   	nop

c00128c0 <VAS::allocatePages(int, int)>:
c00128c0:	55                   	push   ebp
c00128c1:	57                   	push   edi
c00128c2:	56                   	push   esi
c00128c3:	53                   	push   ebx
c00128c4:	83 ec 1c             	sub    esp,0x1c
c00128c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00128cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00128cf:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00128d3:	75 71                	jne    c0012946 <VAS::allocatePages(int, int)+0x86>
c00128d5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00128d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128dc:	85 c0                	test   eax,eax
c00128de:	74 4d                	je     c001292d <VAS::allocatePages(int, int)+0x6d>
c00128e0:	89 dd                	mov    ebp,ebx
c00128e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e6:	c1 e5 0c             	shl    ebp,0xc
c00128e9:	01 c5                	add    ebp,eax
c00128eb:	85 db                	test   ebx,ebx
c00128ed:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00128f0:	7e 29                	jle    c001291b <VAS::allocatePages(int, int)+0x5b>
c00128f2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128fa:	81 cf 00 04 00 00    	or     edi,0x400
c0012900:	e8 95 c5 ff ff       	call   c000ee9a <Phys::allocatePage()>
c0012905:	57                   	push   edi
c0012906:	53                   	push   ebx
c0012907:	81 c3 00 10 00 00    	add    ebx,0x1000
c001290d:	50                   	push   eax
c001290e:	56                   	push   esi
c001290f:	e8 a8 fe ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012914:	83 c4 10             	add    esp,0x10
c0012917:	39 dd                	cmp    ebp,ebx
c0012919:	75 e5                	jne    c0012900 <VAS::allocatePages(int, int)+0x40>
c001291b:	0f 20 d8             	mov    eax,cr3
c001291e:	0f 22 d8             	mov    cr3,eax
c0012921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012925:	83 c4 1c             	add    esp,0x1c
c0012928:	5b                   	pop    ebx
c0012929:	5e                   	pop    esi
c001292a:	5f                   	pop    edi
c001292b:	5d                   	pop    ebp
c001292c:	c3                   	ret    
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	68 8c 2c 02 c0       	push   0xc0022c8c
c0012935:	e8 6c c3 ff ff       	call   c000eca6 <KePanic(char const*)>
c001293a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001293d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	eb 9a                	jmp    c00128e0 <VAS::allocatePages(int, int)+0x20>
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	53                   	push   ebx
c001294a:	e8 8a f7 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001294f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012953:	83 c4 10             	add    esp,0x10
c0012956:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001295b:	77 37                	ja     c0012994 <VAS::allocatePages(int, int)+0xd4>
c001295d:	85 db                	test   ebx,ebx
c001295f:	7e ba                	jle    c001291b <VAS::allocatePages(int, int)+0x5b>
c0012961:	c1 e3 0c             	shl    ebx,0xc
c0012964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012968:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001296c:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001296f:	81 cf 00 04 00 00    	or     edi,0x400
c0012975:	89 c3                	mov    ebx,eax
c0012977:	e8 1e c5 ff ff       	call   c000ee9a <Phys::allocatePage()>
c001297c:	57                   	push   edi
c001297d:	53                   	push   ebx
c001297e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012984:	50                   	push   eax
c0012985:	56                   	push   esi
c0012986:	e8 31 fe ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	39 dd                	cmp    ebp,ebx
c0012990:	75 e5                	jne    c0012977 <VAS::allocatePages(int, int)+0xb7>
c0012992:	eb 87                	jmp    c001291b <VAS::allocatePages(int, int)+0x5b>
c0012994:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012998:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c001299d:	09 c2                	or     edx,eax
c001299f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00129a3:	eb b8                	jmp    c001295d <VAS::allocatePages(int, int)+0x9d>
c00129a5:	90                   	nop

c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00129a6:	55                   	push   ebp
c00129a7:	57                   	push   edi
c00129a8:	56                   	push   esi
c00129a9:	53                   	push   ebx
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129b1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00129b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129b9:	85 db                	test   ebx,ebx
c00129bb:	7e 2f                	jle    c00129ec <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c00129bd:	c1 e3 0c             	shl    ebx,0xc
c00129c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00129c4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00129c8:	01 d3                	add    ebx,edx
c00129ca:	55                   	push   ebp
c00129cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00129cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d3:	29 c2                	sub    edx,eax
c00129d5:	01 f2                	add    edx,esi
c00129d7:	52                   	push   edx
c00129d8:	56                   	push   esi
c00129d9:	81 c6 00 10 00 00    	add    esi,0x1000
c00129df:	57                   	push   edi
c00129e0:	e8 d7 fd ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c00129e5:	83 c4 10             	add    esp,0x10
c00129e8:	39 de                	cmp    esi,ebx
c00129ea:	75 de                	jne    c00129ca <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00129ec:	0f 20 d8             	mov    eax,cr3
c00129ef:	0f 22 d8             	mov    cr3,eax
c00129f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f6:	83 c4 0c             	add    esp,0xc
c00129f9:	5b                   	pop    ebx
c00129fa:	5e                   	pop    esi
c00129fb:	5f                   	pop    edi
c00129fc:	5d                   	pop    ebp
c00129fd:	c3                   	ret    

c00129fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00129fe:	55                   	push   ebp
c00129ff:	57                   	push   edi
c0012a00:	56                   	push   esi
c0012a01:	53                   	push   ebx
c0012a02:	83 ec 1c             	sub    esp,0x1c
c0012a05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a09:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012a0d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012a11:	09 f8                	or     eax,edi
c0012a13:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a17:	a9 ff 0f 00 00       	test   eax,0xfff
c0012a1c:	75 4f                	jne    c0012a6d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012a1e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a22:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012a25:	c1 eb 16             	shr    ebx,0x16
c0012a28:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0012a2f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0012a33:	74 52                	je     c0012a87 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0012a35:	0f b6 f2             	movzx  esi,dl
c0012a38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a3c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012a40:	c1 e8 0a             	shr    eax,0xa
c0012a43:	83 fe 01             	cmp    esi,0x1
c0012a46:	19 d2                	sbb    edx,edx
c0012a48:	c1 e3 0c             	shl    ebx,0xc
c0012a4b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012a51:	25 fc 0f 00 00       	and    eax,0xffc
c0012a56:	01 d8                	add    eax,ebx
c0012a58:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a5c:	09 d9                	or     ecx,ebx
c0012a5e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012a65:	83 c4 1c             	add    esp,0x1c
c0012a68:	5b                   	pop    ebx
c0012a69:	5e                   	pop    esi
c0012a6a:	5f                   	pop    edi
c0012a6b:	5d                   	pop    ebp
c0012a6c:	c3                   	ret    
c0012a6d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012a71:	83 ec 0c             	sub    esp,0xc
c0012a74:	68 b8 2c 02 c0       	push   0xc0022cb8
c0012a79:	e8 28 c2 ff ff       	call   c000eca6 <KePanic(char const*)>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a85:	eb 97                	jmp    c0012a1e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0012a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8b:	e8 0a c4 ff ff       	call   c000ee9a <Phys::allocatePage()>
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	89 c5                	mov    ebp,eax
c0012a95:	8b 0d d0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002ced0
c0012a9b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012a9f:	6a 01                	push   0x1
c0012aa1:	e8 33 f6 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c0012aa6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012aad:	6a 01                	push   0x1
c0012aaf:	50                   	push   eax
c0012ab0:	55                   	push   ebp
c0012ab1:	81 cd 07 04 00 00    	or     ebp,0x407
c0012ab7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012abb:	51                   	push   ecx
c0012abc:	e8 e5 fe ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ac1:	83 c4 1c             	add    esp,0x1c
c0012ac4:	68 00 10 00 00       	push   0x1000
c0012ac9:	6a 00                	push   0x0
c0012acb:	50                   	push   eax
c0012acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ad0:	e8 1b da fe ff       	call   c00004f0 <memset>
c0012ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012ad9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012adc:	e8 00 f9 ff ff       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ae1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012ae4:	83 c4 10             	add    esp,0x10
c0012ae7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012aea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012aee:	e9 42 ff ff ff       	jmp    c0012a35 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012af3:	90                   	nop

c0012af4 <VAS::VAS(bool)>:
c0012af4:	53                   	push   ebx
c0012af5:	83 ec 28             	sub    esp,0x28
c0012af8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012afc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012b00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012b16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b1a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012b1e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012b21:	e8 74 c3 ff ff       	call   c000ee9a <Phys::allocatePage()>
c0012b26:	89 c2                	mov    edx,eax
c0012b28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012b2f:	8b 1d d0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ced0
c0012b35:	83 ec 0c             	sub    esp,0xc
c0012b38:	6a 01                	push   0x1
c0012b3a:	e8 9a f5 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c0012b3f:	83 c4 10             	add    esp,0x10
c0012b42:	89 c2                	mov    edx,eax
c0012b44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012b4b:	83 ec 0c             	sub    esp,0xc
c0012b4e:	6a 03                	push   0x3
c0012b50:	6a 01                	push   0x1
c0012b52:	52                   	push   edx
c0012b53:	50                   	push   eax
c0012b54:	53                   	push   ebx
c0012b55:	e8 4c fe ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012b5a:	83 c4 20             	add    esp,0x20
c0012b5d:	89 c2                	mov    edx,eax
c0012b5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b66:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012b6e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012b76:	7f 1d                	jg     c0012b95 <VAS::VAS(bool)+0xa1>
c0012b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b83:	c1 e2 02             	shl    edx,0x2
c0012b86:	01 d0                	add    eax,edx
c0012b88:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b8e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012b93:	eb d9                	jmp    c0012b6e <VAS::VAS(bool)+0x7a>
c0012b95:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012b9d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012ba5:	7f 59                	jg     c0012c00 <VAS::VAS(bool)+0x10c>
c0012ba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bab:	2d 00 02 00 00       	sub    eax,0x200
c0012bb0:	c1 e0 0c             	shl    eax,0xc
c0012bb3:	89 c2                	mov    edx,eax
c0012bb5:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012bba:	89 d1                	mov    ecx,edx
c0012bbc:	09 c1                	or     ecx,eax
c0012bbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bc2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bc5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bc9:	c1 e2 02             	shl    edx,0x2
c0012bcc:	01 d0                	add    eax,edx
c0012bce:	83 c9 05             	or     ecx,0x5
c0012bd1:	89 ca                	mov    edx,ecx
c0012bd3:	89 10                	mov    DWORD PTR [eax],edx
c0012bd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bd9:	2d 40 03 00 00       	sub    eax,0x340
c0012bde:	83 f8 7f             	cmp    eax,0x7f
c0012be1:	77 16                	ja     c0012bf9 <VAS::VAS(bool)+0x105>
c0012be3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012be7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bee:	c1 e2 02             	shl    edx,0x2
c0012bf1:	01 d0                	add    eax,edx
c0012bf3:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012bf9:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012bfe:	eb 9d                	jmp    c0012b9d <VAS::VAS(bool)+0xa9>
c0012c00:	8b 15 68 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d768
c0012c06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c0d:	05 20 0c 00 00       	add    eax,0xc20
c0012c12:	81 ca 03 40 00 00    	or     edx,0x4003
c0012c18:	89 10                	mov    DWORD PTR [eax],edx
c0012c1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c1e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012c21:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0012c26:	09 c2                	or     edx,eax
c0012c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c2c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c2f:	05 fc 0f 00 00       	add    eax,0xffc
c0012c34:	83 ca 03             	or     edx,0x3
c0012c37:	89 10                	mov    DWORD PTR [eax],edx
c0012c39:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c44:	83 ec 0c             	sub    esp,0xc
c0012c47:	50                   	push   eax
c0012c48:	e8 73 66 ff ff       	call   c00092c0 <Device::getName()>
c0012c4d:	83 c4 10             	add    esp,0x10
c0012c50:	83 ec 08             	sub    esp,0x8
c0012c53:	68 3b 31 02 c0       	push   0xc002313b
c0012c58:	50                   	push   eax
c0012c59:	e8 f2 da fe ff       	call   c0000750 <strcmp>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	85 c0                	test   eax,eax
c0012c63:	0f 94 c0             	sete   al
c0012c66:	0f b6 c0             	movzx  eax,al
c0012c69:	85 c0                	test   eax,eax
c0012c6b:	74 68                	je     c0012cd5 <VAS::VAS(bool)+0x1e1>
c0012c6d:	fa                   	cli    
c0012c6e:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c79:	05 68 09 00 00       	add    eax,0x968
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	50                   	push   eax
c0012c82:	e8 b7 b6 ff ff       	call   c000e33e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c8f:	89 c3                	mov    ebx,eax
c0012c91:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0012c96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c9c:	05 68 09 00 00       	add    eax,0x968
c0012ca1:	83 ec 0c             	sub    esp,0xc
c0012ca4:	50                   	push   eax
c0012ca5:	e8 94 b6 ff ff       	call   c000e33e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012caa:	83 c4 10             	add    esp,0x10
c0012cad:	83 ec 08             	sub    esp,0x8
c0012cb0:	50                   	push   eax
c0012cb1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cb5:	e8 08 f7 ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cc4:	6a 11                	push   0x11
c0012cc6:	53                   	push   ebx
c0012cc7:	50                   	push   eax
c0012cc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ccc:	e8 eb fa ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	fb                   	sti    
c0012cd5:	90                   	nop
c0012cd6:	83 c4 28             	add    esp,0x28
c0012cd9:	5b                   	pop    ebx
c0012cda:	c3                   	ret    
c0012cdb:	90                   	nop

c0012cdc <VAS::evict(unsigned long)>:
c0012cdc:	55                   	push   ebp
c0012cdd:	57                   	push   edi
c0012cde:	56                   	push   esi
c0012cdf:	53                   	push   ebx
c0012ce0:	83 ec 24             	sub    esp,0x24
c0012ce3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012ce7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012ceb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012cef:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012cf4:	50                   	push   eax
c0012cf5:	68 49 31 02 c0       	push   0xc0023149
c0012cfa:	e8 65 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012cff:	e8 33 f5 ff ff       	call   c0012237 <Virt::allocateSwapfilePage()>
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	89 c7                	mov    edi,eax
c0012d09:	a1 ec 4d 02 c0       	mov    eax,ds:0xc0024dec
c0012d0e:	85 c0                	test   eax,eax
c0012d10:	7e 40                	jle    c0012d52 <VAS::evict(unsigned long)+0x76>
c0012d12:	89 ee                	mov    esi,ebp
c0012d14:	31 db                	xor    ebx,ebx
c0012d16:	83 ec 0c             	sub    esp,0xc
c0012d19:	57                   	push   edi
c0012d1a:	e8 02 f5 ff ff       	call   c0012221 <Virt::swapIDToSector(unsigned long)>
c0012d1f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d22:	01 d8                	add    eax,ebx
c0012d24:	6a 01                	push   0x1
c0012d26:	31 d2                	xor    edx,edx
c0012d28:	83 c3 01             	add    ebx,0x1
c0012d2b:	52                   	push   edx
c0012d2c:	81 c6 00 02 00 00    	add    esi,0x200
c0012d32:	50                   	push   eax
c0012d33:	0f be 05 f8 4d 02 c0 	movsx  eax,BYTE PTR ds:0xc0024df8
c0012d3a:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0012d41:	50                   	push   eax
c0012d42:	e8 dd 73 ff ff       	call   c000a124 <LogicalDisk::write(unsigned long long, int, void*)>
c0012d47:	83 c4 20             	add    esp,0x20
c0012d4a:	39 1d ec 4d 02 c0    	cmp    DWORD PTR ds:0xc0024dec,ebx
c0012d50:	7f c4                	jg     c0012d16 <VAS::evict(unsigned long)+0x3a>
c0012d52:	83 ec 08             	sub    esp,0x8
c0012d55:	c1 e7 0c             	shl    edi,0xc
c0012d58:	55                   	push   ebp
c0012d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d5d:	50                   	push   eax
c0012d5e:	e8 5f f6 ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012d63:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d65:	89 d3                	mov    ebx,edx
c0012d67:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012d6d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d73:	09 d7                	or     edi,edx
c0012d75:	89 38                	mov    DWORD PTR [eax],edi
c0012d77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d7a:	8b 15 c8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cec8
c0012d80:	83 c2 01             	add    edx,0x1
c0012d83:	89 15 c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,edx
c0012d89:	e8 a3 c0 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c0012d8e:	0f 20 d8             	mov    eax,cr3
c0012d91:	0f 22 d8             	mov    cr3,eax
c0012d94:	8b 0d c8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cec8
c0012d9a:	51                   	push   ecx
c0012d9b:	55                   	push   ebp
c0012d9c:	53                   	push   ebx
c0012d9d:	68 dc 2c 02 c0       	push   0xc0022cdc
c0012da2:	e8 bd 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012da7:	83 c4 18             	add    esp,0x18
c0012daa:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c0012daf:	50                   	push   eax
c0012db0:	8d 50 01             	lea    edx,[eax+0x1]
c0012db3:	68 5e 31 02 c0       	push   0xc002315e
c0012db8:	89 15 c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,edx
c0012dbe:	e8 a1 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012dc3:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012dc8:	c7 44 24 40 70 31 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023170
c0012dd0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012dd4:	83 c4 2c             	add    esp,0x2c
c0012dd7:	5b                   	pop    ebx
c0012dd8:	5e                   	pop    esi
c0012dd9:	5f                   	pop    edi
c0012dda:	5d                   	pop    ebp
c0012ddb:	e9 84 41 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012de0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012de0:	55                   	push   ebp
c0012de1:	57                   	push   edi
c0012de2:	56                   	push   esi
c0012de3:	53                   	push   ebx
c0012de4:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0012dea:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0012df1:	89 f3                	mov    ebx,esi
c0012df3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012df9:	53                   	push   ebx
c0012dfa:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0012e01:	50                   	push   eax
c0012e02:	e8 bb f5 ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0012e07:	5a                   	pop    edx
c0012e08:	89 c5                	mov    ebp,eax
c0012e0a:	59                   	pop    ecx
c0012e0b:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012e11:	0f 87 cb 00 00 00    	ja     c0012ee2 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012e17:	83 ec 08             	sub    esp,0x8
c0012e1a:	56                   	push   esi
c0012e1b:	68 10 2d 02 c0       	push   0xc0022d10
c0012e20:	e8 3f 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e25:	5e                   	pop    esi
c0012e26:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012e2b:	5f                   	pop    edi
c0012e2c:	50                   	push   eax
c0012e2d:	68 40 2d 02 c0       	push   0xc0022d40
c0012e32:	e8 2d 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e37:	58                   	pop    eax
c0012e38:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012e3e:	5a                   	pop    edx
c0012e3f:	51                   	push   ecx
c0012e40:	68 64 2d 02 c0       	push   0xc0022d64
c0012e45:	e8 1a 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e4a:	83 c4 10             	add    esp,0x10
c0012e4d:	85 db                	test   ebx,ebx
c0012e4f:	74 5b                	je     c0012eac <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012e51:	85 ed                	test   ebp,ebp
c0012e53:	74 21                	je     c0012e76 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c0012e55:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0012e58:	f7 c6 00 02 00 00    	test   esi,0x200
c0012e5e:	0f 85 c5 00 00 00    	jne    c0012f29 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c0012e64:	89 f0                	mov    eax,esi
c0012e66:	25 01 04 00 00       	and    eax,0x401
c0012e6b:	3d 00 04 00 00       	cmp    eax,0x400
c0012e70:	0f 84 39 01 00 00    	je     c0012faf <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0012e76:	83 ec 08             	sub    esp,0x8
c0012e79:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012e7e:	50                   	push   eax
c0012e7f:	68 58 2f 02 c0       	push   0xc0022f58
c0012e84:	e8 db 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e89:	5a                   	pop    edx
c0012e8a:	8b 1d b0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6b0
c0012e90:	59                   	pop    ecx
c0012e91:	53                   	push   ebx
c0012e92:	68 7c 2f 02 c0       	push   0xc0022f7c
c0012e97:	e8 c8 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e9c:	83 c4 10             	add    esp,0x10
c0012e9f:	31 c0                	xor    eax,eax
c0012ea1:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012ea7:	5b                   	pop    ebx
c0012ea8:	5e                   	pop    esi
c0012ea9:	5f                   	pop    edi
c0012eaa:	5d                   	pop    ebp
c0012eab:	c3                   	ret    
c0012eac:	83 ec 08             	sub    esp,0x8
c0012eaf:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0012eb4:	50                   	push   eax
c0012eb5:	68 88 2d 02 c0       	push   0xc0022d88
c0012eba:	e8 a5 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ebf:	58                   	pop    eax
c0012ec0:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012ec6:	5a                   	pop    edx
c0012ec7:	51                   	push   ecx
c0012ec8:	68 ac 2d 02 c0       	push   0xc0022dac
c0012ecd:	e8 92 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ed2:	83 c4 10             	add    esp,0x10
c0012ed5:	31 c0                	xor    eax,eax
c0012ed7:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012edd:	5b                   	pop    ebx
c0012ede:	5e                   	pop    esi
c0012edf:	5f                   	pop    edi
c0012ee0:	5d                   	pop    ebp
c0012ee1:	c3                   	ret    
c0012ee2:	83 ec 0c             	sub    esp,0xc
c0012ee5:	68 85 31 02 c0       	push   0xc0023185
c0012eea:	e8 b7 bd ff ff       	call   c000eca6 <KePanic(char const*)>
c0012eef:	5f                   	pop    edi
c0012ef0:	58                   	pop    eax
c0012ef1:	56                   	push   esi
c0012ef2:	68 10 2d 02 c0       	push   0xc0022d10
c0012ef7:	e8 68 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012efc:	58                   	pop    eax
c0012efd:	8b 0d 8c d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d68c
c0012f03:	5a                   	pop    edx
c0012f04:	51                   	push   ecx
c0012f05:	68 40 2d 02 c0       	push   0xc0022d40
c0012f0a:	e8 55 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f0f:	5e                   	pop    esi
c0012f10:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f15:	5f                   	pop    edi
c0012f16:	50                   	push   eax
c0012f17:	68 64 2d 02 c0       	push   0xc0022d64
c0012f1c:	e8 43 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	e9 28 ff ff ff       	jmp    c0012e51 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0012f29:	83 ec 0c             	sub    esp,0xc
c0012f2c:	68 d0 2d 02 c0       	push   0xc0022dd0
c0012f31:	e8 2e 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f36:	e8 5f bf ff ff       	call   c000ee9a <Phys::allocatePage()>
c0012f3b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012f3e:	83 ca 01             	or     edx,0x1
c0012f41:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012f44:	0f 20 da             	mov    edx,cr3
c0012f47:	0f 22 da             	mov    cr3,edx
c0012f4a:	ba 00 10 00 00       	mov    edx,0x1000
c0012f4f:	89 de                	mov    esi,ebx
c0012f51:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012f55:	89 d1                	mov    ecx,edx
c0012f57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f59:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012f5c:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012f62:	09 c8                	or     eax,ecx
c0012f64:	83 c8 02             	or     eax,0x2
c0012f67:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012f6a:	0f 20 d8             	mov    eax,cr3
c0012f6d:	0f 22 d8             	mov    cr3,eax
c0012f70:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012f74:	89 df                	mov    edi,ebx
c0012f76:	89 d1                	mov    ecx,edx
c0012f78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f7a:	8b 35 8c d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d68c
c0012f80:	59                   	pop    ecx
c0012f81:	5b                   	pop    ebx
c0012f82:	56                   	push   esi
c0012f83:	68 f0 2d 02 c0       	push   0xc0022df0
c0012f88:	e8 d7 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f8d:	5f                   	pop    edi
c0012f8e:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012f93:	5d                   	pop    ebp
c0012f94:	50                   	push   eax
c0012f95:	68 14 2e 02 c0       	push   0xc0022e14
c0012f9a:	e8 c5 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f9f:	83 c4 10             	add    esp,0x10
c0012fa2:	b0 01                	mov    al,0x1
c0012fa4:	81 c4 0c 10 00 00    	add    esp,0x100c
c0012faa:	5b                   	pop    ebx
c0012fab:	5e                   	pop    esi
c0012fac:	5f                   	pop    edi
c0012fad:	5d                   	pop    ebp
c0012fae:	c3                   	ret    
c0012faf:	83 ec 08             	sub    esp,0x8
c0012fb2:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0012fb7:	c1 ee 0c             	shr    esi,0xc
c0012fba:	50                   	push   eax
c0012fbb:	68 38 2e 02 c0       	push   0xc0022e38
c0012fc0:	e8 9f 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fc5:	e8 d0 be ff ff       	call   c000ee9a <Phys::allocatePage()>
c0012fca:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0012fd0:	89 c7                	mov    edi,eax
c0012fd2:	58                   	pop    eax
c0012fd3:	5a                   	pop    edx
c0012fd4:	51                   	push   ecx
c0012fd5:	68 5c 2e 02 c0       	push   0xc0022e5c
c0012fda:	e8 85 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fdf:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012fe2:	83 c4 10             	add    esp,0x10
c0012fe5:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012feb:	09 fa                	or     edx,edi
c0012fed:	81 ca 01 08 00 00    	or     edx,0x801
c0012ff3:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012ff6:	8b 3d ec 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024dec
c0012ffc:	85 ff                	test   edi,edi
c0012ffe:	7e 65                	jle    c0013065 <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0013000:	89 dd                	mov    ebp,ebx
c0013002:	31 ff                	xor    edi,edi
c0013004:	83 ec 08             	sub    esp,0x8
c0013007:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001300c:	50                   	push   eax
c001300d:	68 10 2f 02 c0       	push   0xc0022f10
c0013012:	e8 4d 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013017:	89 34 24             	mov    DWORD PTR [esp],esi
c001301a:	e8 02 f2 ff ff       	call   c0012221 <Virt::swapIDToSector(unsigned long)>
c001301f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013022:	01 f8                	add    eax,edi
c0013024:	6a 01                	push   0x1
c0013026:	31 d2                	xor    edx,edx
c0013028:	83 c7 01             	add    edi,0x1
c001302b:	52                   	push   edx
c001302c:	81 c5 00 02 00 00    	add    ebp,0x200
c0013032:	50                   	push   eax
c0013033:	0f be 05 f8 4d 02 c0 	movsx  eax,BYTE PTR ds:0xc0024df8
c001303a:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013041:	50                   	push   eax
c0013042:	e8 71 70 ff ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c0013047:	83 c4 18             	add    esp,0x18
c001304a:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001304f:	50                   	push   eax
c0013050:	68 34 2f 02 c0       	push   0xc0022f34
c0013055:	e8 0a 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001305a:	83 c4 10             	add    esp,0x10
c001305d:	39 3d ec 4d 02 c0    	cmp    DWORD PTR ds:0xc0024dec,edi
c0013063:	7f 9f                	jg     c0013004 <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c0013065:	83 ec 08             	sub    esp,0x8
c0013068:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001306d:	50                   	push   eax
c001306e:	68 80 2e 02 c0       	push   0xc0022e80
c0013073:	e8 ec 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013078:	83 c4 0c             	add    esp,0xc
c001307b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013080:	83 e8 01             	sub    eax,0x1
c0013083:	50                   	push   eax
c0013084:	a3 c8 ce 02 c0       	mov    ds:0xc002cec8,eax
c0013089:	53                   	push   ebx
c001308a:	68 97 31 02 c0       	push   0xc0023197
c001308f:	e8 d0 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013094:	89 34 24             	mov    DWORD PTR [esp],esi
c0013097:	e8 62 f1 ff ff       	call   c00121fe <Virt::freeSwapfilePage(unsigned long)>
c001309c:	58                   	pop    eax
c001309d:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c00130a3:	5a                   	pop    edx
c00130a4:	51                   	push   ecx
c00130a5:	68 a4 2e 02 c0       	push   0xc0022ea4
c00130aa:	e8 b5 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130af:	0f 20 d8             	mov    eax,cr3
c00130b2:	0f 22 d8             	mov    cr3,eax
c00130b5:	c7 04 24 ac 31 02 c0 	mov    DWORD PTR [esp],0xc00231ac
c00130bc:	e8 a3 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130c1:	5b                   	pop    ebx
c00130c2:	8b 3d 8c d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d68c
c00130c8:	5e                   	pop    esi
c00130c9:	57                   	push   edi
c00130ca:	68 c8 2e 02 c0       	push   0xc0022ec8
c00130cf:	e8 90 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130d4:	5d                   	pop    ebp
c00130d5:	58                   	pop    eax
c00130d6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00130db:	50                   	push   eax
c00130dc:	68 ec 2e 02 c0       	push   0xc0022eec
c00130e1:	e8 7e 3e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	b0 01                	mov    al,0x1
c00130eb:	e9 b1 fd ff ff       	jmp    c0012ea1 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c00130f0 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c00130f0:	55                   	push   ebp
c00130f1:	57                   	push   edi
c00130f2:	56                   	push   esi
c00130f3:	53                   	push   ebx
c00130f4:	83 ec 28             	sub    esp,0x28
c00130f7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00130fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00130ff:	50                   	push   eax
c0013100:	e8 d4 ef ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c0013105:	83 c4 0c             	add    esp,0xc
c0013108:	89 c5                	mov    ebp,eax
c001310a:	6a 07                	push   0x7
c001310c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013110:	52                   	push   edx
c0013111:	56                   	push   esi
c0013112:	e8 a9 f7 ff ff       	call   c00128c0 <VAS::allocatePages(int, int)>
c0013117:	83 c4 10             	add    esp,0x10
c001311a:	89 c7                	mov    edi,eax
c001311c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013120:	85 c9                	test   ecx,ecx
c0013122:	74 2f                	je     c0013153 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013124:	31 db                	xor    ebx,ebx
c0013126:	e8 6f bd ff ff       	call   c000ee9a <Phys::allocatePage()>
c001312b:	83 c3 01             	add    ebx,0x1
c001312e:	6a 03                	push   0x3
c0013130:	55                   	push   ebp
c0013131:	50                   	push   eax
c0013132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013136:	56                   	push   esi
c0013137:	e8 80 f6 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001313c:	6a 07                	push   0x7
c001313e:	57                   	push   edi
c001313f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013143:	50                   	push   eax
c0013144:	56                   	push   esi
c0013145:	e8 72 f6 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001314a:	83 c4 20             	add    esp,0x20
c001314d:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013151:	75 d3                	jne    c0013126 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013153:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013157:	89 28                	mov    DWORD PTR [eax],ebp
c0013159:	83 c4 1c             	add    esp,0x1c
c001315c:	89 f8                	mov    eax,edi
c001315e:	5b                   	pop    ebx
c001315f:	5e                   	pop    esi
c0013160:	5f                   	pop    edi
c0013161:	5d                   	pop    ebp
c0013162:	c3                   	ret    
c0013163:	90                   	nop

c0013164 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013164:	53                   	push   ebx
c0013165:	83 ec 14             	sub    esp,0x14
c0013168:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001316c:	68 a0 2f 02 c0       	push   0xc0022fa0
c0013171:	e8 ee 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013176:	c7 04 24 00 30 02 c0 	mov    DWORD PTR [esp],0xc0023000
c001317d:	e8 e2 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013182:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013186:	83 c4 18             	add    esp,0x18
c0013189:	5b                   	pop    ebx
c001318a:	e9 52 f2 ff ff       	jmp    c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c001318f:	90                   	nop

c0013190 <VAS::scanForEviction()>:
c0013190:	57                   	push   edi
c0013191:	56                   	push   esi
c0013192:	31 f6                	xor    esi,esi
c0013194:	53                   	push   ebx
c0013195:	83 ec 18             	sub    esp,0x18
c0013198:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001319c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00131a1:	50                   	push   eax
c00131a2:	68 7c 30 02 c0       	push   0xc002307c
c00131a7:	e8 b8 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131ac:	c7 04 24 b3 31 02 c0 	mov    DWORD PTR [esp],0xc00231b3
c00131b3:	e8 ac 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131b8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00131bb:	83 c4 10             	add    esp,0x10
c00131be:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00131c4:	75 0e                	jne    c00131d4 <VAS::scanForEviction()+0x44>
c00131c6:	89 da                	mov    edx,ebx
c00131c8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00131cb:	c1 ea 16             	shr    edx,0x16
c00131ce:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00131d2:	74 5b                	je     c001322f <VAS::scanForEviction()+0x9f>
c00131d4:	83 ec 08             	sub    esp,0x8
c00131d7:	53                   	push   ebx
c00131d8:	57                   	push   edi
c00131d9:	e8 e4 f1 ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00131e3:	89 d1                	mov    ecx,edx
c00131e5:	c1 e9 0c             	shr    ecx,0xc
c00131e8:	74 10                	je     c00131fa <VAS::scanForEviction()+0x6a>
c00131ea:	89 d1                	mov    ecx,edx
c00131ec:	81 e1 01 08 00 00    	and    ecx,0x801
c00131f2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c00131f8:	74 40                	je     c001323a <VAS::scanForEviction()+0xaa>
c00131fa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013200:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013206:	76 2d                	jbe    c0013235 <VAS::scanForEviction()+0xa5>
c0013208:	83 c6 01             	add    esi,0x1
c001320b:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013212:	83 fe 03             	cmp    esi,0x3
c0013215:	74 32                	je     c0013249 <VAS::scanForEviction()+0xb9>
c0013217:	31 db                	xor    ebx,ebx
c0013219:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001321f:	75 b3                	jne    c00131d4 <VAS::scanForEviction()+0x44>
c0013221:	89 da                	mov    edx,ebx
c0013223:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013226:	c1 ea 16             	shr    edx,0x16
c0013229:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001322d:	75 a5                	jne    c00131d4 <VAS::scanForEviction()+0x44>
c001322f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013235:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013238:	eb 84                	jmp    c00131be <VAS::scanForEviction()+0x2e>
c001323a:	f6 c2 20             	test   dl,0x20
c001323d:	74 13                	je     c0013252 <VAS::scanForEviction()+0xc2>
c001323f:	83 e2 df             	and    edx,0xffffffdf
c0013242:	89 10                	mov    DWORD PTR [eax],edx
c0013244:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013247:	eb b1                	jmp    c00131fa <VAS::scanForEviction()+0x6a>
c0013249:	83 c4 10             	add    esp,0x10
c001324c:	31 c0                	xor    eax,eax
c001324e:	5b                   	pop    ebx
c001324f:	5e                   	pop    esi
c0013250:	5f                   	pop    edi
c0013251:	c3                   	ret    
c0013252:	83 ec 08             	sub    esp,0x8
c0013255:	89 d0                	mov    eax,edx
c0013257:	25 00 f0 ff ff       	and    eax,0xfffff000
c001325c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013260:	53                   	push   ebx
c0013261:	68 cf 31 02 c0       	push   0xc00231cf
c0013266:	e8 f9 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001326b:	58                   	pop    eax
c001326c:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001326f:	5a                   	pop    edx
c0013270:	51                   	push   ecx
c0013271:	57                   	push   edi
c0013272:	e8 65 fa ff ff       	call   c0012cdc <VAS::evict(unsigned long)>
c0013277:	5b                   	pop    ebx
c0013278:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001327b:	5e                   	pop    esi
c001327c:	50                   	push   eax
c001327d:	68 e3 31 02 c0       	push   0xc00231e3
c0013282:	e8 dd 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013287:	58                   	pop    eax
c0013288:	5a                   	pop    edx
c0013289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001328d:	50                   	push   eax
c001328e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013292:	68 f6 31 02 c0       	push   0xc00231f6
c0013297:	e8 c8 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001329c:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001329f:	81 c1 00 10 00 00    	add    ecx,0x1000
c00132a5:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00132a8:	8b 3d b0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6b0
c00132ae:	5b                   	pop    ebx
c00132af:	5e                   	pop    esi
c00132b0:	57                   	push   edi
c00132b1:	68 9c 30 02 c0       	push   0xc002309c
c00132b6:	e8 a9 3c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	5b                   	pop    ebx
c00132c6:	5e                   	pop    esi
c00132c7:	5f                   	pop    edi
c00132c8:	c3                   	ret    

c00132c9 <mapVASFirstTime>:
c00132c9:	55                   	push   ebp
c00132ca:	57                   	push   edi
c00132cb:	56                   	push   esi
c00132cc:	53                   	push   ebx
c00132cd:	83 ec 0c             	sub    esp,0xc
c00132d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00132d8:	83 fa 01             	cmp    edx,0x1
c00132db:	0f 84 cb 00 00 00    	je     c00133ac <mapVASFirstTime+0xe3>
c00132e1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132e4:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00132e7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00132ec:	c1 e5 15             	shl    ebp,0x15
c00132ef:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00132f4:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00132fa:	29 eb                	sub    ebx,ebp
c00132fc:	29 ef                	sub    edi,ebp
c00132fe:	e8 97 bb ff ff       	call   c000ee9a <Phys::allocatePage()>
c0013303:	83 ec 0c             	sub    esp,0xc
c0013306:	68 03 04 00 00       	push   0x403
c001330b:	6a 01                	push   0x1
c001330d:	53                   	push   ebx
c001330e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013314:	50                   	push   eax
c0013315:	56                   	push   esi
c0013316:	e8 8b f6 ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001331b:	83 c4 20             	add    esp,0x20
c001331e:	39 fb                	cmp    ebx,edi
c0013320:	75 dc                	jne    c00132fe <mapVASFirstTime+0x35>
c0013322:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013327:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001332c:	29 eb                	sub    ebx,ebp
c001332e:	29 ef                	sub    edi,ebp
c0013330:	e8 65 bb ff ff       	call   c000ee9a <Phys::allocatePage()>
c0013335:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013339:	83 fa 01             	cmp    edx,0x1
c001333c:	19 d2                	sbb    edx,edx
c001333e:	83 ec 0c             	sub    esp,0xc
c0013341:	83 e2 04             	and    edx,0x4
c0013344:	81 c2 03 04 00 00    	add    edx,0x403
c001334a:	52                   	push   edx
c001334b:	6a 01                	push   0x1
c001334d:	53                   	push   ebx
c001334e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013354:	50                   	push   eax
c0013355:	56                   	push   esi
c0013356:	e8 4b f6 ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001335b:	83 c4 20             	add    esp,0x20
c001335e:	39 df                	cmp    edi,ebx
c0013360:	75 ce                	jne    c0013330 <mapVASFirstTime+0x67>
c0013362:	83 ec 0c             	sub    esp,0xc
c0013365:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c001336a:	6a 04                	push   0x4
c001336c:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013372:	6a ff                	push   0xffffffff
c0013374:	c1 eb 0c             	shr    ebx,0xc
c0013377:	53                   	push   ebx
c0013378:	68 00 60 02 c0       	push   0xc0026000
c001337d:	56                   	push   esi
c001337e:	e8 d9 f1 ff ff       	call   c001255c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013383:	83 c4 14             	add    esp,0x14
c0013386:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001338b:	6a 04                	push   0x4
c001338d:	6a ff                	push   0xffffffff
c001338f:	53                   	push   ebx
c0013390:	68 00 60 02 c0       	push   0xc0026000
c0013395:	50                   	push   eax
c0013396:	e8 c1 f1 ff ff       	call   c001255c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001339b:	0f 20 d8             	mov    eax,cr3
c001339e:	0f 22 d8             	mov    cr3,eax
c00133a1:	83 c4 20             	add    esp,0x20
c00133a4:	83 c4 0c             	add    esp,0xc
c00133a7:	5b                   	pop    ebx
c00133a8:	5e                   	pop    esi
c00133a9:	5f                   	pop    edi
c00133aa:	5d                   	pop    ebp
c00133ab:	c3                   	ret    
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	68 03 32 02 c0       	push   0xc0023203
c00133b4:	e8 ab 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00133b9:	83 c4 10             	add    esp,0x10
c00133bc:	83 c4 0c             	add    esp,0xc
c00133bf:	5b                   	pop    ebx
c00133c0:	5e                   	pop    esi
c00133c1:	5f                   	pop    edi
c00133c2:	5d                   	pop    ebp
c00133c3:	c3                   	ret    

c00133c4 <SysEject(regs*)>:
c00133c4:	83 ec 0c             	sub    esp,0xc
c00133c7:	83 ca ff             	or     edx,0xffffffff
c00133ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ce:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00133d1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00133d6:	83 e9 41             	sub    ecx,0x41
c00133d9:	83 f9 19             	cmp    ecx,0x19
c00133dc:	77 18                	ja     c00133f6 <SysEject(regs*)+0x32>
c00133de:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00133e5:	85 c9                	test   ecx,ecx
c00133e7:	74 0d                	je     c00133f6 <SysEject(regs*)+0x32>
c00133e9:	83 ec 0c             	sub    esp,0xc
c00133ec:	51                   	push   ecx
c00133ed:	e8 5c 6c ff ff       	call   c000a04e <LogicalDisk::eject()>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	99                   	cdq    
c00133f6:	83 c4 0c             	add    esp,0xc
c00133f9:	c3                   	ret    

c00133fa <SysExit(regs*)>:
c00133fa:	83 ec 18             	sub    esp,0x18
c00133fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013401:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013404:	e8 cb 2a 00 00       	call   c0015ed4 <terminateTask(int)>
c0013409:	83 c8 ff             	or     eax,0xffffffff
c001340c:	83 c4 1c             	add    esp,0x1c
c001340f:	89 c2                	mov    edx,eax
c0013411:	c3                   	ret    

c0013412 <SysGetCwd(regs*)>:
c0013412:	83 ec 10             	sub    esp,0x10
c0013415:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013419:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001341c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001341f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013424:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013427:	e8 9a 49 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c001342c:	83 c4 1c             	add    esp,0x1c
c001342f:	99                   	cdq    
c0013430:	c3                   	ret    

c0013431 <SysGetPID(regs*)>:
c0013431:	83 ec 14             	sub    esp,0x14
c0013434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013439:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001343c:	ff 30                	push   DWORD PTR [eax]
c001343e:	68 1c 32 02 c0       	push   0xc002321c
c0013443:	e8 1c 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001344d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013450:	8b 00                	mov    eax,DWORD PTR [eax]
c0013452:	83 c4 1c             	add    esp,0x1c
c0013455:	99                   	cdq    
c0013456:	c3                   	ret    

c0013457 <SysGetRAMData(regs*)>:
c0013457:	8b 0d ac cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdac
c001345d:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0013462:	03 05 a8 cd 02 c0    	add    eax,DWORD PTR ds:0xc002cda8
c0013468:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001346e:	99                   	cdq    
c001346f:	f7 f9                	idiv   ecx
c0013471:	c1 e0 18             	shl    eax,0x18
c0013474:	09 c8                	or     eax,ecx
c0013476:	99                   	cdq    
c0013477:	c3                   	ret    

c0013478 <SysGetVGAPtr(regs*)>:
c0013478:	55                   	push   ebp
c0013479:	57                   	push   edi
c001347a:	56                   	push   esi
c001347b:	53                   	push   ebx
c001347c:	83 ec 0c             	sub    esp,0xc
c001347f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013483:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013486:	83 f8 ff             	cmp    eax,0xffffffff
c0013489:	74 1b                	je     c00134a6 <SysGetVGAPtr(regs*)+0x2e>
c001348b:	83 ec 0c             	sub    esp,0xc
c001348e:	50                   	push   eax
c001348f:	e8 f0 24 00 00       	call   c0015984 <Thr::processFromPID(int)>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	89 c1                	mov    ecx,eax
c0013499:	31 d2                	xor    edx,edx
c001349b:	b8 01 00 00 00       	mov    eax,0x1
c00134a0:	85 c9                	test   ecx,ecx
c00134a2:	75 0a                	jne    c00134ae <SysGetVGAPtr(regs*)+0x36>
c00134a4:	eb 61                	jmp    c0013507 <SysGetVGAPtr(regs*)+0x8f>
c00134a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134ab:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00134ae:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00134b4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00134b8:	74 0c                	je     c00134c6 <SysGetVGAPtr(regs*)+0x4e>
c00134ba:	83 ec 0c             	sub    esp,0xc
c00134bd:	55                   	push   ebp
c00134be:	e8 94 dc ff ff       	call   c0011157 <setActiveTerminal(VgaText*)>
c00134c3:	83 c4 10             	add    esp,0x10
c00134c6:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00134c9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00134cc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00134d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00134d3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00134d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134d9:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00134df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134e2:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00134e5:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00134eb:	50                   	push   eax
c00134ec:	50                   	push   eax
c00134ed:	68 2b 32 02 c0       	push   0xc002322b
c00134f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00134f5:	05 a8 0f 00 00       	add    eax,0xfa8
c00134fa:	50                   	push   eax
c00134fb:	e8 40 d1 fe ff       	call   c0000640 <strcpy>
c0013500:	83 c4 10             	add    esp,0x10
c0013503:	31 c0                	xor    eax,eax
c0013505:	31 d2                	xor    edx,edx
c0013507:	83 c4 0c             	add    esp,0xc
c001350a:	5b                   	pop    ebx
c001350b:	5e                   	pop    esi
c001350c:	5f                   	pop    edi
c001350d:	5d                   	pop    ebp
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <SysKill(regs*)>:
c0013510:	53                   	push   ebx
c0013511:	83 ec 08             	sub    esp,0x8
c0013514:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013518:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001351c:	75 16                	jne    c0013534 <SysKill(regs*)+0x24>
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	68 35 32 02 c0       	push   0xc0023235
c0013526:	e8 7b b7 ff ff       	call   c000eca6 <KePanic(char const*)>
c001352b:	83 c4 10             	add    esp,0x10
c001352e:	e9 89 00 00 00       	jmp    c00135bc <SysKill(regs*)+0xac>
c0013533:	90                   	nop
c0013534:	83 ec 0c             	sub    esp,0xc
c0013537:	68 cc d6 02 c0       	push   0xc002d6cc
c001353c:	e8 d7 ce 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013541:	8d 76 00             	lea    esi,[esi+0x0]
c0013544:	83 c4 10             	add    esp,0x10
c0013547:	85 c0                	test   eax,eax
c0013549:	74 19                	je     c0013564 <SysKill(regs*)+0x54>
c001354b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001354e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013551:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013553:	74 33                	je     c0013588 <SysKill(regs*)+0x78>
c0013555:	52                   	push   edx
c0013556:	52                   	push   edx
c0013557:	50                   	push   eax
c0013558:	68 cc d6 02 c0       	push   0xc002d6cc
c001355d:	e8 c2 d3 00 00       	call   c0020924 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013562:	eb e0                	jmp    c0013544 <SysKill(regs*)+0x34>
c0013564:	83 ec 0c             	sub    esp,0xc
c0013567:	68 c0 d6 02 c0       	push   0xc002d6c0
c001356c:	e8 a7 ce 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013571:	8d 76 00             	lea    esi,[esi+0x0]
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	85 c0                	test   eax,eax
c0013579:	74 41                	je     c00135bc <SysKill(regs*)+0xac>
c001357b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001357e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013581:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013583:	75 27                	jne    c00135ac <SysKill(regs*)+0x9c>
c0013585:	8d 76 00             	lea    esi,[esi+0x0]
c0013588:	51                   	push   ecx
c0013589:	51                   	push   ecx
c001358a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001358d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013592:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013595:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001359b:	e8 4f c8 ff ff       	call   c000fdef <KeRaiseSignal(SigHandlerBlock*, int)>
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	31 c0                	xor    eax,eax
c00135a5:	31 d2                	xor    edx,edx
c00135a7:	eb 1b                	jmp    c00135c4 <SysKill(regs*)+0xb4>
c00135a9:	8d 76 00             	lea    esi,[esi+0x0]
c00135ac:	52                   	push   edx
c00135ad:	52                   	push   edx
c00135ae:	50                   	push   eax
c00135af:	68 c0 d6 02 c0       	push   0xc002d6c0
c00135b4:	e8 6b d3 00 00       	call   c0020924 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00135b9:	eb b9                	jmp    c0013574 <SysKill(regs*)+0x64>
c00135bb:	90                   	nop
c00135bc:	83 c8 ff             	or     eax,0xffffffff
c00135bf:	89 c2                	mov    edx,eax
c00135c1:	8d 76 00             	lea    esi,[esi+0x0]
c00135c4:	83 c4 08             	add    esp,0x8
c00135c7:	5b                   	pop    ebx
c00135c8:	c3                   	ret    

c00135c9 <SysLoadDLL(regs*)>:
c00135c9:	56                   	push   esi
c00135ca:	53                   	push   ebx
c00135cb:	31 d2                	xor    edx,edx
c00135cd:	51                   	push   ecx
c00135ce:	b8 01 00 00 00       	mov    eax,0x1
c00135d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135d7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00135db:	0f 84 8c 00 00 00    	je     c001366d <SysLoadDLL(regs*)+0xa4>
c00135e1:	83 ec 0c             	sub    esp,0xc
c00135e4:	68 14 01 00 00       	push   0x114
c00135e9:	e8 71 b3 ff ff       	call   c000e95f <malloc>
c00135ee:	83 c4 0c             	add    esp,0xc
c00135f1:	89 c3                	mov    ebx,eax
c00135f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135f8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00135fe:	53                   	push   ebx
c00135ff:	e8 2e 4b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	31 d2                	xor    edx,edx
c0013609:	b8 02 00 00 00       	mov    eax,0x2
c001360e:	85 db                	test   ebx,ebx
c0013610:	74 5b                	je     c001366d <SysLoadDLL(regs*)+0xa4>
c0013612:	83 ec 0c             	sub    esp,0xc
c0013615:	53                   	push   ebx
c0013616:	e8 f9 4d ff ff       	call   c0008414 <File::exists()>
c001361b:	83 c4 10             	add    esp,0x10
c001361e:	84 c0                	test   al,al
c0013620:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013622:	75 11                	jne    c0013635 <SysLoadDLL(regs*)+0x6c>
c0013624:	83 ec 0c             	sub    esp,0xc
c0013627:	53                   	push   ebx
c0013628:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	b8 03 00 00 00       	mov    eax,0x3
c0013633:	eb 36                	jmp    c001366b <SysLoadDLL(regs*)+0xa2>
c0013635:	83 ec 0c             	sub    esp,0xc
c0013638:	53                   	push   ebx
c0013639:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001363c:	58                   	pop    eax
c001363d:	5a                   	pop    edx
c001363e:	6a 00                	push   0x0
c0013640:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013643:	e8 e8 15 00 00       	call   c0014c30 <Thr::loadDLL(char const*, bool)>
c0013648:	83 c4 10             	add    esp,0x10
c001364b:	89 c1                	mov    ecx,eax
c001364d:	31 d2                	xor    edx,edx
c001364f:	b8 04 00 00 00       	mov    eax,0x4
c0013654:	85 c9                	test   ecx,ecx
c0013656:	74 15                	je     c001366d <SysLoadDLL(regs*)+0xa4>
c0013658:	53                   	push   ebx
c0013659:	53                   	push   ebx
c001365a:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0013660:	51                   	push   ecx
c0013661:	e8 1c 18 00 00       	call   c0014e82 <Thr::executeDLL(unsigned long, void*)>
c0013666:	83 c4 10             	add    esp,0x10
c0013669:	31 c0                	xor    eax,eax
c001366b:	31 d2                	xor    edx,edx
c001366d:	59                   	pop    ecx
c001366e:	5b                   	pop    ebx
c001366f:	5e                   	pop    esi
c0013670:	c3                   	ret    

c0013671 <SysRead(regs*)>:
c0013671:	57                   	push   edi
c0013672:	56                   	push   esi
c0013673:	53                   	push   ebx
c0013674:	83 ec 10             	sub    esp,0x10
c0013677:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001367b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001367e:	83 f8 02             	cmp    eax,0x2
c0013681:	77 10                	ja     c0013693 <SysRead(regs*)+0x22>
c0013683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013688:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001368b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013691:	eb 0e                	jmp    c00136a1 <SysRead(regs*)+0x30>
c0013693:	83 ec 0c             	sub    esp,0xc
c0013696:	50                   	push   eax
c0013697:	e8 99 e8 ff ff       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	89 c1                	mov    ecx,eax
c00136a1:	83 c8 ff             	or     eax,0xffffffff
c00136a4:	85 c9                	test   ecx,ecx
c00136a6:	89 c2                	mov    edx,eax
c00136a8:	74 28                	je     c00136d2 <SysRead(regs*)+0x61>
c00136aa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136b2:	31 ff                	xor    edi,edi
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00136bd:	52                   	push   edx
c00136be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136c1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00136c4:	57                   	push   edi
c00136c5:	56                   	push   esi
c00136c6:	51                   	push   ecx
c00136c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00136ce:	83 c4 20             	add    esp,0x20
c00136d1:	99                   	cdq    
c00136d2:	83 c4 10             	add    esp,0x10
c00136d5:	5b                   	pop    ebx
c00136d6:	5e                   	pop    esi
c00136d7:	5f                   	pop    edi
c00136d8:	c3                   	ret    

c00136d9 <SysRegisterSignal(regs*)>:
c00136d9:	83 ec 18             	sub    esp,0x18
c00136dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e0:	6a 00                	push   0x0
c00136e2:	6a 00                	push   0x0
c00136e4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136e7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136f2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00136f8:	e8 bc c6 ff ff       	call   c000fdb9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00136fd:	83 c4 2c             	add    esp,0x2c
c0013700:	99                   	cdq    
c0013701:	c3                   	ret    

c0013702 <SysRegistryGetTypeFromPath(regs*)>:
c0013702:	53                   	push   ebx
c0013703:	81 ec 40 01 00 00    	sub    esp,0x140
c0013709:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013710:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013713:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013716:	e8 fd 9b ff ff       	call   c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001371b:	83 c4 10             	add    esp,0x10
c001371e:	89 c1                	mov    ecx,eax
c0013720:	85 c0                	test   eax,eax
c0013722:	74 15                	je     c0013739 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0013724:	50                   	push   eax
c0013725:	8d 44 24 08          	lea    eax,[esp+0x8]
c0013729:	50                   	push   eax
c001372a:	51                   	push   ecx
c001372b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001372e:	e8 c9 97 ff ff       	call   c000cefc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	99                   	cdq    
c0013737:	eb 05                	jmp    c001373e <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0013739:	83 c8 ff             	or     eax,0xffffffff
c001373c:	89 c2                	mov    edx,eax
c001373e:	81 c4 38 01 00 00    	add    esp,0x138
c0013744:	5b                   	pop    ebx
c0013745:	c3                   	ret    

c0013746 <SysRegistryReadExtent(regs*)>:
c0013746:	83 ec 1c             	sub    esp,0x1c
c0013749:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001374d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013750:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013753:	85 c0                	test   eax,eax
c0013755:	79 1f                	jns    c0013776 <SysRegistryReadExtent(regs*)+0x30>
c0013757:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001375c:	52                   	push   edx
c001375d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013761:	52                   	push   edx
c0013762:	50                   	push   eax
c0013763:	51                   	push   ecx
c0013764:	e8 85 96 ff ff       	call   c000cdee <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013769:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001376d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013771:	83 c4 10             	add    esp,0x10
c0013774:	eb 14                	jmp    c001378a <SysRegistryReadExtent(regs*)+0x44>
c0013776:	83 ec 04             	sub    esp,0x4
c0013779:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001377c:	50                   	push   eax
c001377d:	51                   	push   ecx
c001377e:	e8 05 91 ff ff       	call   c000c888 <CmGetString(Reghive_Tag*, int, char*)>
c0013783:	83 c4 10             	add    esp,0x10
c0013786:	31 c0                	xor    eax,eax
c0013788:	31 d2                	xor    edx,edx
c001378a:	83 c4 1c             	add    esp,0x1c
c001378d:	c3                   	ret    

c001378e <SysRegistryPathToExtentLookup(regs*)>:
c001378e:	83 ec 14             	sub    esp,0x14
c0013791:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013795:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013798:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001379b:	e8 78 9b ff ff       	call   c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00137a0:	83 c4 1c             	add    esp,0x1c
c00137a3:	99                   	cdq    
c00137a4:	c3                   	ret    

c00137a5 <SysRegistryEnterDirectory(regs*)>:
c00137a5:	83 ec 14             	sub    esp,0x14
c00137a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137ac:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00137af:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137b2:	e8 48 91 ff ff       	call   c000c8ff <CmEnterDirectory(Reghive_Tag*, int)>
c00137b7:	83 c4 1c             	add    esp,0x1c
c00137ba:	99                   	cdq    
c00137bb:	c3                   	ret    

c00137bc <SysRegistryGetNext(regs*)>:
c00137bc:	83 ec 14             	sub    esp,0x14
c00137bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137c3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00137c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137c9:	e8 70 91 ff ff       	call   c000c93e <CmGetNext(Reghive_Tag*, int)>
c00137ce:	83 c4 1c             	add    esp,0x1c
c00137d1:	99                   	cdq    
c00137d2:	c3                   	ret    

c00137d3 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00137d3:	57                   	push   edi
c00137d4:	56                   	push   esi
c00137d5:	53                   	push   ebx
c00137d6:	81 ec 34 01 00 00    	sub    esp,0x134
c00137dc:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00137e3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00137e7:	57                   	push   edi
c00137e8:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00137eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00137ee:	e8 09 97 ff ff       	call   c000cefc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00137f3:	89 c3                	mov    ebx,eax
c00137f5:	58                   	pop    eax
c00137f6:	5a                   	pop    edx
c00137f7:	57                   	push   edi
c00137f8:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00137fb:	e8 40 ce fe ff       	call   c0000640 <strcpy>
c0013800:	89 d8                	mov    eax,ebx
c0013802:	81 c4 40 01 00 00    	add    esp,0x140
c0013808:	99                   	cdq    
c0013809:	5b                   	pop    ebx
c001380a:	5e                   	pop    esi
c001380b:	5f                   	pop    edi
c001380c:	c3                   	ret    

c001380d <SysRegistryOpen(regs*)>:
c001380d:	83 ec 18             	sub    esp,0x18
c0013810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013814:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013817:	e8 fc 8e ff ff       	call   c000c718 <CmOpen(char const*)>
c001381c:	83 c4 1c             	add    esp,0x1c
c001381f:	99                   	cdq    
c0013820:	c3                   	ret    

c0013821 <SysRegistryClose(regs*)>:
c0013821:	83 ec 18             	sub    esp,0x18
c0013824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013828:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001382b:	e8 06 90 ff ff       	call   c000c836 <CmClose(Reghive_Tag*)>
c0013830:	31 c0                	xor    eax,eax
c0013832:	31 d2                	xor    edx,edx
c0013834:	83 c4 1c             	add    esp,0x1c
c0013837:	c3                   	ret    

c0013838 <SysRegistryEasyReadString(regs*)>:
c0013838:	57                   	push   edi
c0013839:	56                   	push   esi
c001383a:	53                   	push   ebx
c001383b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001383f:	83 ec 0c             	sub    esp,0xc
c0013842:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013845:	e8 ce 8e ff ff       	call   c000c718 <CmOpen(char const*)>
c001384a:	5a                   	pop    edx
c001384b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001384e:	59                   	pop    ecx
c001384f:	89 c3                	mov    ebx,eax
c0013851:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013854:	50                   	push   eax
c0013855:	e8 be 9a ff ff       	call   c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	89 c1                	mov    ecx,eax
c001385f:	b8 01 00 00 00       	mov    eax,0x1
c0013864:	85 c9                	test   ecx,ecx
c0013866:	7e 16                	jle    c001387e <SysRegistryEasyReadString(regs*)+0x46>
c0013868:	50                   	push   eax
c0013869:	57                   	push   edi
c001386a:	51                   	push   ecx
c001386b:	53                   	push   ebx
c001386c:	e8 17 90 ff ff       	call   c000c888 <CmGetString(Reghive_Tag*, int, char*)>
c0013871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013874:	e8 bd 8f ff ff       	call   c000c836 <CmClose(Reghive_Tag*)>
c0013879:	83 c4 10             	add    esp,0x10
c001387c:	31 c0                	xor    eax,eax
c001387e:	5b                   	pop    ebx
c001387f:	31 d2                	xor    edx,edx
c0013881:	5e                   	pop    esi
c0013882:	5f                   	pop    edi
c0013883:	c3                   	ret    

c0013884 <SysRegistryEasyReadInteger(regs*)>:
c0013884:	56                   	push   esi
c0013885:	53                   	push   ebx
c0013886:	83 ec 10             	sub    esp,0x10
c0013889:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001388d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013890:	e8 83 8e ff ff       	call   c000c718 <CmOpen(char const*)>
c0013895:	5a                   	pop    edx
c0013896:	89 c3                	mov    ebx,eax
c0013898:	59                   	pop    ecx
c0013899:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001389c:	50                   	push   eax
c001389d:	e8 76 9a ff ff       	call   c000d318 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00138a2:	83 c4 10             	add    esp,0x10
c00138a5:	89 c1                	mov    ecx,eax
c00138a7:	b8 01 00 00 00       	mov    eax,0x1
c00138ac:	85 c9                	test   ecx,ecx
c00138ae:	7e 18                	jle    c00138c8 <SysRegistryEasyReadInteger(regs*)+0x44>
c00138b0:	50                   	push   eax
c00138b1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00138b4:	51                   	push   ecx
c00138b5:	53                   	push   ebx
c00138b6:	e8 33 95 ff ff       	call   c000cdee <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00138bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138be:	e8 73 8f ff ff       	call   c000c836 <CmClose(Reghive_Tag*)>
c00138c3:	83 c4 10             	add    esp,0x10
c00138c6:	31 c0                	xor    eax,eax
c00138c8:	59                   	pop    ecx
c00138c9:	31 d2                	xor    edx,edx
c00138cb:	5b                   	pop    ebx
c00138cc:	5e                   	pop    esi
c00138cd:	c3                   	ret    

c00138ce <SysSbrk(regs*)>:
c00138ce:	56                   	push   esi
c00138cf:	53                   	push   ebx
c00138d0:	50                   	push   eax
c00138d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138dd:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00138e0:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00138e6:	85 db                	test   ebx,ebx
c00138e8:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00138eb:	74 02                	je     c00138ef <SysSbrk(regs*)+0x21>
c00138ed:	79 06                	jns    c00138f5 <SysSbrk(regs*)+0x27>
c00138ef:	89 f0                	mov    eax,esi
c00138f1:	31 d2                	xor    edx,edx
c00138f3:	eb 2a                	jmp    c001391f <SysSbrk(regs*)+0x51>
c00138f5:	83 c8 ff             	or     eax,0xffffffff
c00138f8:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00138fe:	89 c2                	mov    edx,eax
c0013900:	77 1d                	ja     c001391f <SysSbrk(regs*)+0x51>
c0013902:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013908:	50                   	push   eax
c0013909:	c1 ea 0c             	shr    edx,0xc
c001390c:	68 07 0c 00 00       	push   0xc07
c0013911:	52                   	push   edx
c0013912:	51                   	push   ecx
c0013913:	e8 a8 ef ff ff       	call   c00128c0 <VAS::allocatePages(int, int)>
c0013918:	89 f0                	mov    eax,esi
c001391a:	31 d2                	xor    edx,edx
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	59                   	pop    ecx
c0013920:	5b                   	pop    ebx
c0013921:	5e                   	pop    esi
c0013922:	c3                   	ret    

c0013923 <SysSetCwd(regs*)>:
c0013923:	83 ec 14             	sub    esp,0x14
c0013926:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001392a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001392d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013932:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013935:	e8 79 4b ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c001393a:	83 c4 1c             	add    esp,0x1c
c001393d:	99                   	cdq    
c001393e:	c3                   	ret    

c001393f <SysSetTime(regs*)>:
c001393f:	55                   	push   ebp
c0013940:	31 c9                	xor    ecx,ecx
c0013942:	57                   	push   edi
c0013943:	bd 0c 00 00 00       	mov    ebp,0xc
c0013948:	56                   	push   esi
c0013949:	53                   	push   ebx
c001394a:	31 db                	xor    ebx,ebx
c001394c:	83 ec 10             	sub    esp,0x10
c001394f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013953:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013956:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013959:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001395c:	89 c2                	mov    edx,eax
c001395e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013964:	83 e2 1f             	and    edx,0x1f
c0013967:	c1 e7 10             	shl    edi,0x10
c001396a:	42                   	inc    edx
c001396b:	c1 e8 05             	shr    eax,0x5
c001396e:	88 d1                	mov    cl,dl
c0013970:	31 d2                	xor    edx,edx
c0013972:	f7 f5                	div    ebp
c0013974:	89 dd                	mov    ebp,ebx
c0013976:	88 d5                	mov    ch,dl
c0013978:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001397e:	0f b7 c1             	movzx  eax,cx
c0013981:	31 d2                	xor    edx,edx
c0013983:	09 f8                	or     eax,edi
c0013985:	bf 3c 00 00 00       	mov    edi,0x3c
c001398a:	89 c1                	mov    ecx,eax
c001398c:	89 f0                	mov    eax,esi
c001398e:	f7 f7                	div    edi
c0013990:	c1 e2 10             	shl    edx,0x10
c0013993:	09 d5                	or     ebp,edx
c0013995:	31 d2                	xor    edx,edx
c0013997:	89 eb                	mov    ebx,ebp
c0013999:	f7 f7                	div    edi
c001399b:	bf 10 0e 00 00       	mov    edi,0xe10
c00139a0:	88 d7                	mov    bh,dl
c00139a2:	89 f0                	mov    eax,esi
c00139a4:	31 d2                	xor    edx,edx
c00139a6:	f7 f7                	div    edi
c00139a8:	bf 18 00 00 00       	mov    edi,0x18
c00139ad:	31 d2                	xor    edx,edx
c00139af:	f7 f7                	div    edi
c00139b1:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00139b6:	88 d3                	mov    bl,dl
c00139b8:	53                   	push   ebx
c00139b9:	51                   	push   ecx
c00139ba:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00139c0:	e8 b1 53 ff ff       	call   c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00139c5:	83 c4 1c             	add    esp,0x1c
c00139c8:	83 f0 01             	xor    eax,0x1
c00139cb:	5b                   	pop    ebx
c00139cc:	0f b6 c0             	movzx  eax,al
c00139cf:	5e                   	pop    esi
c00139d0:	31 d2                	xor    edx,edx
c00139d2:	5f                   	pop    edi
c00139d3:	5d                   	pop    ebp
c00139d4:	c3                   	ret    

c00139d5 <SysSymlink(regs*)>:
c00139d5:	56                   	push   esi
c00139d6:	83 c8 ff             	or     eax,0xffffffff
c00139d9:	53                   	push   ebx
c00139da:	89 c2                	mov    edx,eax
c00139dc:	81 ec 34 02 00 00    	sub    esp,0x234
c00139e2:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00139e9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00139ed:	74 50                	je     c0013a3f <SysSymlink(regs*)+0x6a>
c00139ef:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00139f2:	85 c9                	test   ecx,ecx
c00139f4:	74 49                	je     c0013a3f <SysSymlink(regs*)+0x6a>
c00139f6:	6a 01                	push   0x1
c00139f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139fd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a00:	05 0c 01 00 00       	add    eax,0x10c
c0013a05:	50                   	push   eax
c0013a06:	51                   	push   ecx
c0013a07:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013a0b:	56                   	push   esi
c0013a0c:	e8 09 44 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013a11:	6a 01                	push   0x1
c0013a13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a1b:	05 0c 01 00 00       	add    eax,0x10c
c0013a20:	50                   	push   eax
c0013a21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a24:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0013a2b:	53                   	push   ebx
c0013a2c:	e8 e9 43 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013a31:	83 c4 18             	add    esp,0x18
c0013a34:	56                   	push   esi
c0013a35:	53                   	push   ebx
c0013a36:	e8 0d 40 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0013a3b:	83 c4 10             	add    esp,0x10
c0013a3e:	99                   	cdq    
c0013a3f:	81 c4 34 02 00 00    	add    esp,0x234
c0013a45:	5b                   	pop    ebx
c0013a46:	5e                   	pop    esi
c0013a47:	c3                   	ret    

c0013a48 <SysTimezone(regs*)>:
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013a53:	75 17                	jne    c0013a6c <SysTimezone(regs*)+0x24>
c0013a55:	83 ec 0c             	sub    esp,0xc
c0013a58:	68 56 32 02 c0       	push   0xc0023256
c0013a5d:	e8 02 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a62:	83 c8 ff             	or     eax,0xffffffff
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	89 c2                	mov    edx,eax
c0013a6a:	eb 17                	jmp    c0013a83 <SysTimezone(regs*)+0x3b>
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	68 6b 32 02 c0       	push   0xc002326b
c0013a74:	e8 eb 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	b8 01 00 00 00       	mov    eax,0x1
c0013a81:	31 d2                	xor    edx,edx
c0013a83:	83 c4 0c             	add    esp,0xc
c0013a86:	c3                   	ret    

c0013a87 <SysTruncate(regs*)>:
c0013a87:	55                   	push   ebp
c0013a88:	57                   	push   edi
c0013a89:	31 ff                	xor    edi,edi
c0013a8b:	56                   	push   esi
c0013a8c:	53                   	push   ebx
c0013a8d:	83 ec 0c             	sub    esp,0xc
c0013a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a94:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a97:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013a9a:	89 ce                	mov    esi,ecx
c0013a9c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013aa0:	0f 84 9a 00 00 00    	je     c0013b40 <SysTruncate(regs*)+0xb9>
c0013aa6:	83 ec 0c             	sub    esp,0xc
c0013aa9:	68 14 01 00 00       	push   0x114
c0013aae:	e8 ac ae ff ff       	call   c000e95f <malloc>
c0013ab3:	83 c4 0c             	add    esp,0xc
c0013ab6:	89 c3                	mov    ebx,eax
c0013ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013ac0:	55                   	push   ebp
c0013ac1:	53                   	push   ebx
c0013ac2:	e8 6b 46 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013ac7:	83 c4 10             	add    esp,0x10
c0013aca:	31 d2                	xor    edx,edx
c0013acc:	b8 03 00 00 00       	mov    eax,0x3
c0013ad1:	85 db                	test   ebx,ebx
c0013ad3:	0f 84 a2 00 00 00    	je     c0013b7b <SysTruncate(regs*)+0xf4>
c0013ad9:	51                   	push   ecx
c0013ada:	51                   	push   ecx
c0013adb:	6a 02                	push   0x2
c0013add:	53                   	push   ebx
c0013ade:	e8 6d 46 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	85 c0                	test   eax,eax
c0013ae8:	74 13                	je     c0013afd <SysTruncate(regs*)+0x76>
c0013aea:	83 ec 0c             	sub    esp,0xc
c0013aed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aef:	53                   	push   ebx
c0013af0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	b8 04 00 00 00       	mov    eax,0x4
c0013afb:	eb 7c                	jmp    c0013b79 <SysTruncate(regs*)+0xf2>
c0013afd:	52                   	push   edx
c0013afe:	57                   	push   edi
c0013aff:	56                   	push   esi
c0013b00:	53                   	push   ebx
c0013b01:	e8 5e 47 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	85 c0                	test   eax,eax
c0013b0b:	74 1b                	je     c0013b28 <SysTruncate(regs*)+0xa1>
c0013b0d:	83 ec 0c             	sub    esp,0xc
c0013b10:	53                   	push   ebx
c0013b11:	e8 98 46 ff ff       	call   c00081ae <File::close()>
c0013b16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b1e:	83 c4 10             	add    esp,0x10
c0013b21:	b8 05 00 00 00       	mov    eax,0x5
c0013b26:	eb 51                	jmp    c0013b79 <SysTruncate(regs*)+0xf2>
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	53                   	push   ebx
c0013b2c:	e8 7d 46 ff ff       	call   c00081ae <File::close()>
c0013b31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	31 c0                	xor    eax,eax
c0013b3e:	eb 39                	jmp    c0013b79 <SysTruncate(regs*)+0xf2>
c0013b40:	31 d2                	xor    edx,edx
c0013b42:	b8 01 00 00 00       	mov    eax,0x1
c0013b47:	83 fd 02             	cmp    ebp,0x2
c0013b4a:	7e 2f                	jle    c0013b7b <SysTruncate(regs*)+0xf4>
c0013b4c:	83 ec 0c             	sub    esp,0xc
c0013b4f:	51                   	push   ecx
c0013b50:	e8 e0 e3 ff ff       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0013b55:	83 c4 10             	add    esp,0x10
c0013b58:	89 c1                	mov    ecx,eax
c0013b5a:	31 d2                	xor    edx,edx
c0013b5c:	b8 02 00 00 00       	mov    eax,0x2
c0013b61:	85 c9                	test   ecx,ecx
c0013b63:	74 16                	je     c0013b7b <SysTruncate(regs*)+0xf4>
c0013b65:	50                   	push   eax
c0013b66:	57                   	push   edi
c0013b67:	56                   	push   esi
c0013b68:	51                   	push   ecx
c0013b69:	e8 f6 46 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0013b6e:	83 c4 10             	add    esp,0x10
c0013b71:	85 c0                	test   eax,eax
c0013b73:	0f 95 c0             	setne  al
c0013b76:	0f b6 c0             	movzx  eax,al
c0013b79:	31 d2                	xor    edx,edx
c0013b7b:	83 c4 0c             	add    esp,0xc
c0013b7e:	5b                   	pop    ebx
c0013b7f:	5e                   	pop    esi
c0013b80:	5f                   	pop    edi
c0013b81:	5d                   	pop    ebp
c0013b82:	c3                   	ret    

c0013b83 <SysWrite(regs*)>:
c0013b83:	57                   	push   edi
c0013b84:	56                   	push   esi
c0013b85:	53                   	push   ebx
c0013b86:	83 ec 10             	sub    esp,0x10
c0013b89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b8d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b90:	83 f8 02             	cmp    eax,0x2
c0013b93:	77 10                	ja     c0013ba5 <SysWrite(regs*)+0x22>
c0013b95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b9d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ba3:	eb 0e                	jmp    c0013bb3 <SysWrite(regs*)+0x30>
c0013ba5:	83 ec 0c             	sub    esp,0xc
c0013ba8:	50                   	push   eax
c0013ba9:	e8 87 e3 ff ff       	call   c0011f35 <KeGetFileFromDescriptor(int)>
c0013bae:	83 c4 10             	add    esp,0x10
c0013bb1:	89 c1                	mov    ecx,eax
c0013bb3:	83 c8 ff             	or     eax,0xffffffff
c0013bb6:	85 c9                	test   ecx,ecx
c0013bb8:	89 c2                	mov    edx,eax
c0013bba:	74 28                	je     c0013be4 <SysWrite(regs*)+0x61>
c0013bbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013bc4:	31 ff                	xor    edi,edi
c0013bc6:	83 ec 0c             	sub    esp,0xc
c0013bc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bcb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bcf:	52                   	push   edx
c0013bd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bd3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bd6:	57                   	push   edi
c0013bd7:	56                   	push   esi
c0013bd8:	51                   	push   ecx
c0013bd9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013bdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013be0:	83 c4 20             	add    esp,0x20
c0013be3:	99                   	cdq    
c0013be4:	83 c4 10             	add    esp,0x10
c0013be7:	5b                   	pop    ebx
c0013be8:	5e                   	pop    esi
c0013be9:	5f                   	pop    edi
c0013bea:	c3                   	ret    

c0013beb <SysWsbe(regs*)>:
c0013beb:	55                   	push   ebp
c0013bec:	57                   	push   edi
c0013bed:	56                   	push   esi
c0013bee:	53                   	push   ebx
c0013bef:	83 ec 3c             	sub    esp,0x3c
c0013bf2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013bf6:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013bfd:	75 2d                	jne    c0013c2c <SysWsbe(regs*)+0x41>
c0013bff:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013c06:	75 24                	jne    c0013c2c <SysWsbe(regs*)+0x41>
c0013c08:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013c0f:	75 1b                	jne    c0013c2c <SysWsbe(regs*)+0x41>
c0013c11:	6a 01                	push   0x1
c0013c13:	6a 00                	push   0x0
c0013c15:	68 89 95 00 c0       	push   0xc0009589
c0013c1a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0013c20:	e8 9f 18 00 00       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	31 c0                	xor    eax,eax
c0013c2a:	eb 52                	jmp    c0013c7e <SysWsbe(regs*)+0x93>
c0013c2c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013c30:	be aa 32 02 c0       	mov    esi,0xc00232aa
c0013c35:	b9 0b 00 00 00       	mov    ecx,0xb
c0013c3a:	fc                   	cld    
c0013c3b:	83 ec 0c             	sub    esp,0xc
c0013c3e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c40:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c49:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c4c:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0013c52:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c54:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0013c57:	57                   	push   edi
c0013c58:	e8 13 c9 fe ff       	call   c0000570 <strlen>
c0013c5d:	5a                   	pop    edx
c0013c5e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c62:	52                   	push   edx
c0013c63:	31 d2                	xor    edx,edx
c0013c65:	57                   	push   edi
c0013c66:	52                   	push   edx
c0013c67:	50                   	push   eax
c0013c68:	56                   	push   esi
c0013c69:	ff d5                	call   ebp
c0013c6b:	83 c4 14             	add    esp,0x14
c0013c6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c71:	e8 5e 22 00 00       	call   c0015ed4 <terminateTask(int)>
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013c7e:	83 c4 3c             	add    esp,0x3c
c0013c81:	31 d2                	xor    edx,edx
c0013c83:	5b                   	pop    ebx
c0013c84:	5e                   	pop    esi
c0013c85:	5f                   	pop    edi
c0013c86:	5d                   	pop    ebp
c0013c87:	c3                   	ret    

c0013c88 <SysYield(regs*)>:
c0013c88:	83 ec 0c             	sub    esp,0xc
c0013c8b:	fa                   	cli    
c0013c8c:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013c92:	e8 7d 1a 00 00       	call   c0015714 <schedule()>
c0013c97:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013c9e:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013ca5:	75 01                	jne    c0013ca8 <SysYield(regs*)+0x20>
c0013ca7:	fb                   	sti    
c0013ca8:	31 c0                	xor    eax,eax
c0013caa:	31 d2                	xor    edx,edx
c0013cac:	83 c4 0c             	add    esp,0xc
c0013caf:	c3                   	ret    

c0013cb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013cb0:	55                   	push   ebp
c0013cb1:	57                   	push   edi
c0013cb2:	56                   	push   esi
c0013cb3:	53                   	push   ebx
c0013cb4:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013cba:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013cc2:	0f 95 c0             	setne  al
c0013cc5:	31 d2                	xor    edx,edx
c0013cc7:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013ccf:	0f 94 c2             	sete   dl
c0013cd2:	85 c2                	test   edx,eax
c0013cd4:	74 34                	je     c0013d0a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013cd6:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013ce1:	74 27                	je     c0013d0a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013ce3:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013cea:	05 00 10 00 00       	add    eax,0x1000
c0013cef:	89 c1                	mov    ecx,eax
c0013cf1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cf6:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013cfc:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013d03:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013d0a:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013d1a:	6a 01                	push   0x1
c0013d1c:	e8 b8 e3 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c0013d21:	83 c4 10             	add    esp,0x10
c0013d24:	89 c3                	mov    ebx,eax
c0013d26:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013d2c:	0f 86 26 01 00 00    	jbe    c0013e58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0013d32:	c1 ee 0c             	shr    esi,0xc
c0013d35:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013d3c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013d40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d48:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013d4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d53:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013d5a:	29 ef                	sub    edi,ebp
c0013d5c:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013d60:	0f 83 f9 00 00 00    	jae    c0013e5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0013d66:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013d6c:	76 05                	jbe    c0013d73 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013d6e:	bf 00 10 00 00       	mov    edi,0x1000
c0013d73:	83 ec 0c             	sub    esp,0xc
c0013d76:	31 d2                	xor    edx,edx
c0013d78:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013d7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d81:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013d85:	50                   	push   eax
c0013d86:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013d8a:	56                   	push   esi
c0013d8b:	52                   	push   edx
c0013d8c:	57                   	push   edi
c0013d8d:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013d94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d97:	83 c4 20             	add    esp,0x20
c0013d9a:	85 c0                	test   eax,eax
c0013d9c:	75 06                	jne    c0013da4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013d9e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013da2:	74 13                	je     c0013db7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013da4:	83 ec 0c             	sub    esp,0xc
c0013da7:	53                   	push   ebx
c0013da8:	e8 34 e6 ff ff       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013dad:	83 c4 10             	add    esp,0x10
c0013db0:	31 c0                	xor    eax,eax
c0013db2:	e9 80 01 00 00       	jmp    c0013f37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0013db7:	fa                   	cli    
c0013db8:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013dbe:	e8 d7 b0 ff ff       	call   c000ee9a <Phys::allocatePage()>
c0013dc3:	6a 07                	push   0x7
c0013dc5:	89 c7                	mov    edi,eax
c0013dc7:	53                   	push   ebx
c0013dc8:	50                   	push   eax
c0013dc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013dd1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013dd7:	e8 e0 e9 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ddc:	83 c4 0c             	add    esp,0xc
c0013ddf:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013de6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013dec:	6a 00                	push   0x0
c0013dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013df3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013df6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013dfc:	e8 27 e8 ff ff       	call   c0012628 <VAS::mapOtherVASIn(bool, VAS*)>
c0013e01:	58                   	pop    eax
c0013e02:	5a                   	pop    edx
c0013e03:	68 07 0c 00 00       	push   0xc07
c0013e08:	55                   	push   ebp
c0013e09:	57                   	push   edi
c0013e0a:	89 df                	mov    edi,ebx
c0013e0c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013e13:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e19:	6a 00                	push   0x0
c0013e1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e29:	e8 d0 eb ff ff       	call   c00129fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013e2e:	b9 00 10 00 00       	mov    ecx,0x1000
c0013e33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e35:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013e3c:	83 c4 20             	add    esp,0x20
c0013e3f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013e46:	75 01                	jne    c0013e49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c0013e48:	fb                   	sti    
c0013e49:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013e4f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013e53:	e9 f0 fe ff ff       	jmp    c0013d48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013e58:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013e5f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013e66:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013e6c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013e72:	0f 86 b1 00 00 00    	jbe    c0013f29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013e78:	fa                   	cli    
c0013e79:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0013e7f:	c1 ee 0c             	shr    esi,0xc
c0013e82:	51                   	push   ecx
c0013e83:	31 ff                	xor    edi,edi
c0013e85:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013e8c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013e92:	6a 00                	push   0x0
c0013e94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e9c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ea2:	e8 81 e7 ff ff       	call   c0012628 <VAS::mapOtherVASIn(bool, VAS*)>
c0013ea7:	83 c4 10             	add    esp,0x10
c0013eaa:	e8 eb af ff ff       	call   c000ee9a <Phys::allocatePage()>
c0013eaf:	47                   	inc    edi
c0013eb0:	6a 07                	push   0x7
c0013eb2:	53                   	push   ebx
c0013eb3:	50                   	push   eax
c0013eb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eb8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013ebe:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013ec1:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013ec7:	e8 f0 e8 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ecc:	58                   	pop    eax
c0013ecd:	5a                   	pop    edx
c0013ece:	68 07 0c 00 00       	push   0xc07
c0013ed3:	55                   	push   ebp
c0013ed4:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ede:	50                   	push   eax
c0013edf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013ee6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013eec:	6a 00                	push   0x0
c0013eee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ef3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ef6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013efc:	e8 fd ea ff ff       	call   c00129fe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013f01:	83 c4 1c             	add    esp,0x1c
c0013f04:	68 00 10 00 00       	push   0x1000
c0013f09:	6a 00                	push   0x0
c0013f0b:	53                   	push   ebx
c0013f0c:	e8 df c5 fe ff       	call   c00004f0 <memset>
c0013f11:	83 c4 10             	add    esp,0x10
c0013f14:	39 fe                	cmp    esi,edi
c0013f16:	77 92                	ja     c0013eaa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0013f18:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0013f1f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0013f26:	75 01                	jne    c0013f29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0013f28:	fb                   	sti    
c0013f29:	83 ec 0c             	sub    esp,0xc
c0013f2c:	53                   	push   ebx
c0013f2d:	e8 af e4 ff ff       	call   c00123e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0013f32:	83 c4 10             	add    esp,0x10
c0013f35:	b0 01                	mov    al,0x1
c0013f37:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013f3d:	5b                   	pop    ebx
c0013f3e:	5e                   	pop    esi
c0013f3f:	5f                   	pop    edi
c0013f40:	5d                   	pop    ebp
c0013f41:	c3                   	ret    

c0013f42 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013f42:	55                   	push   ebp
c0013f43:	57                   	push   edi
c0013f44:	56                   	push   esi
c0013f45:	53                   	push   ebx
c0013f46:	83 ec 48             	sub    esp,0x48
c0013f49:	68 14 01 00 00       	push   0x114
c0013f4e:	e8 0c aa ff ff       	call   c000e95f <malloc>
c0013f53:	83 c4 0c             	add    esp,0xc
c0013f56:	89 c6                	mov    esi,eax
c0013f58:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013f60:	50                   	push   eax
c0013f61:	e8 cc 41 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0013f66:	58                   	pop    eax
c0013f67:	5a                   	pop    edx
c0013f68:	6a 01                	push   0x1
c0013f6a:	56                   	push   esi
c0013f6b:	e8 e0 41 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0013f70:	83 c4 10             	add    esp,0x10
c0013f73:	85 c0                	test   eax,eax
c0013f75:	0f 85 43 01 00 00    	jne    c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013f7b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013f83:	83 ec 0c             	sub    esp,0xc
c0013f86:	6a 34                	push   0x34
c0013f88:	e8 d2 a9 ff ff       	call   c000e95f <malloc>
c0013f8d:	89 c3                	mov    ebx,eax
c0013f8f:	58                   	pop    eax
c0013f90:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f92:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013f96:	57                   	push   edi
c0013f97:	53                   	push   ebx
c0013f98:	6a 00                	push   0x0
c0013f9a:	6a 34                	push   0x34
c0013f9c:	56                   	push   esi
c0013f9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fa0:	83 c4 20             	add    esp,0x20
c0013fa3:	85 c0                	test   eax,eax
c0013fa5:	0f 85 13 01 00 00    	jne    c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013fab:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013fb1:	0f 85 07 01 00 00    	jne    c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013fb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fba:	85 c0                	test   eax,eax
c0013fbc:	0f 84 fc 00 00 00    	je     c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013fc2:	31 d2                	xor    edx,edx
c0013fc4:	55                   	push   ebp
c0013fc5:	52                   	push   edx
c0013fc6:	50                   	push   eax
c0013fc7:	56                   	push   esi
c0013fc8:	e8 41 42 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	85 c0                	test   eax,eax
c0013fd2:	0f 85 e6 00 00 00    	jne    c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013fd8:	83 ec 0c             	sub    esp,0xc
c0013fdb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013fde:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013fe2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013fe6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013fea:	0f af c2             	imul   eax,edx
c0013fed:	50                   	push   eax
c0013fee:	e8 6c a9 ff ff       	call   c000e95f <malloc>
c0013ff3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013ff5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013ff9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ffc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014000:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014004:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014008:	0f af c2             	imul   eax,edx
c001400b:	99                   	cdq    
c001400c:	52                   	push   edx
c001400d:	50                   	push   eax
c001400e:	56                   	push   esi
c001400f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014012:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014015:	83 c4 20             	add    esp,0x20
c0014018:	85 c0                	test   eax,eax
c001401a:	0f 84 9e 00 00 00    	je     c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014020:	31 d2                	xor    edx,edx
c0014022:	51                   	push   ecx
c0014023:	52                   	push   edx
c0014024:	50                   	push   eax
c0014025:	56                   	push   esi
c0014026:	e8 e3 41 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001402b:	83 c4 10             	add    esp,0x10
c001402e:	85 c0                	test   eax,eax
c0014030:	0f 85 88 00 00 00    	jne    c00140be <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001403d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014041:	31 ed                	xor    ebp,ebp
c0014043:	0f af c2             	imul   eax,edx
c0014046:	50                   	push   eax
c0014047:	e8 13 a9 ff ff       	call   c000e95f <malloc>
c001404c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001404e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014052:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014059:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001405d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014061:	0f af c2             	imul   eax,edx
c0014064:	99                   	cdq    
c0014065:	52                   	push   edx
c0014066:	50                   	push   eax
c0014067:	56                   	push   esi
c0014068:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001406b:	83 c4 20             	add    esp,0x20
c001406e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014076:	0f b7 fd             	movzx  edi,bp
c0014079:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001407d:	73 7d                	jae    c00140fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c001407f:	c1 e7 05             	shl    edi,0x5
c0014082:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014086:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014089:	75 6b                	jne    c00140f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001408b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001408e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014092:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014099:	52                   	push   edx
c001409a:	31 d2                	xor    edx,edx
c001409c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001409f:	52                   	push   edx
c00140a0:	50                   	push   eax
c00140a1:	56                   	push   esi
c00140a2:	e8 67 41 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00140a7:	83 c4 10             	add    esp,0x10
c00140aa:	85 c0                	test   eax,eax
c00140ac:	74 17                	je     c00140c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00140ae:	83 ec 0c             	sub    esp,0xc
c00140b1:	68 d6 32 02 c0       	push   0xc00232d6
c00140b6:	e8 a9 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00140bb:	83 c4 10             	add    esp,0x10
c00140be:	31 c0                	xor    eax,eax
c00140c0:	e9 87 00 00 00       	jmp    c001414c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140cb:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00140ce:	50                   	push   eax
c00140cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00140d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140d7:	56                   	push   esi
c00140d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00140dc:	e8 cf fb ff ff       	call   c0013cb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00140e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00140e5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00140e9:	83 c4 20             	add    esp,0x20
c00140ec:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00140f0:	73 04                	jae    c00140f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00140f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140f6:	45                   	inc    ebp
c00140f7:	e9 7a ff ff ff       	jmp    c0014076 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00140fc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014100:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014108:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001410e:	83 ec 0c             	sub    esp,0xc
c0014111:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014117:	25 00 f0 ff ff       	and    eax,0xfffff000
c001411c:	05 00 10 00 00       	add    eax,0x1000
c0014121:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014128:	e8 42 a8 ff ff       	call   c000e96f <free>
c001412d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014130:	e8 3a a8 ff ff       	call   c000e96f <free>
c0014135:	58                   	pop    eax
c0014136:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001413a:	e8 30 a8 ff ff       	call   c000e96f <free>
c001413f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014142:	e8 67 40 ff ff       	call   c00081ae <File::close()>
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	b0 01                	mov    al,0x1
c001414c:	83 c4 3c             	add    esp,0x3c
c001414f:	5b                   	pop    ebx
c0014150:	5e                   	pop    esi
c0014151:	5f                   	pop    edi
c0014152:	5d                   	pop    ebp
c0014153:	c3                   	ret    

c0014154 <Thr::runtimeReferenceHelper()>:
c0014154:	83 ec 18             	sub    esp,0x18
c0014157:	68 de 32 02 c0       	push   0xc00232de
c001415c:	e8 03 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014161:	fa                   	cli    
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	eb fe                	jmp    c0014165 <Thr::runtimeReferenceHelper()+0x11>

c0014167 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014167:	57                   	push   edi
c0014168:	56                   	push   esi
c0014169:	53                   	push   ebx
c001416a:	31 db                	xor    ebx,ebx
c001416c:	39 1d 80 d6 02 c0    	cmp    DWORD PTR ds:0xc002d680,ebx
c0014172:	7e 3c                	jle    c00141b0 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014174:	8b 34 9d 00 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2a00]
c001417b:	31 ff                	xor    edi,edi
c001417d:	39 3c 9d 00 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2b00],edi
c0014184:	7e 27                	jle    c00141ad <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014186:	50                   	push   eax
c0014187:	50                   	push   eax
c0014188:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001418c:	8b 06                	mov    eax,DWORD PTR [esi]
c001418e:	03 04 9d 80 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a80]
c0014195:	50                   	push   eax
c0014196:	e8 b5 c5 fe ff       	call   c0000750 <strcmp>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	85 c0                	test   eax,eax
c00141a0:	75 05                	jne    c00141a7 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00141a2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00141a5:	eb 0b                	jmp    c00141b2 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00141a7:	83 c6 10             	add    esi,0x10
c00141aa:	47                   	inc    edi
c00141ab:	eb d0                	jmp    c001417d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00141ad:	43                   	inc    ebx
c00141ae:	eb bc                	jmp    c001416c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00141b0:	31 c0                	xor    eax,eax
c00141b2:	5b                   	pop    ebx
c00141b3:	5e                   	pop    esi
c00141b4:	5f                   	pop    edi
c00141b5:	c3                   	ret    

c00141b6 <Thr::loadKernelSymbolTable(char const*)>:
c00141b6:	55                   	push   ebp
c00141b7:	57                   	push   edi
c00141b8:	56                   	push   esi
c00141b9:	53                   	push   ebx
c00141ba:	83 ec 68             	sub    esp,0x68
c00141bd:	8b 35 d8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d8
c00141c3:	68 14 01 00 00       	push   0x114
c00141c8:	e8 92 a7 ff ff       	call   c000e95f <malloc>
c00141cd:	83 c4 0c             	add    esp,0xc
c00141d0:	89 c3                	mov    ebx,eax
c00141d2:	56                   	push   esi
c00141d3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00141d7:	50                   	push   eax
c00141d8:	e8 55 3f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00141dd:	5e                   	pop    esi
c00141de:	5f                   	pop    edi
c00141df:	6a 01                	push   0x1
c00141e1:	53                   	push   ebx
c00141e2:	e8 69 3f ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00141e7:	83 c4 10             	add    esp,0x10
c00141ea:	85 c0                	test   eax,eax
c00141ec:	74 0a                	je     c00141f8 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00141ee:	83 ec 0c             	sub    esp,0xc
c00141f1:	68 00 33 02 c0       	push   0xc0023300
c00141f6:	eb 34                	jmp    c001422c <Thr::loadKernelSymbolTable(char const*)+0x76>
c00141f8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014200:	83 ec 0c             	sub    esp,0xc
c0014203:	6a 34                	push   0x34
c0014205:	e8 55 a7 ff ff       	call   c000e95f <malloc>
c001420a:	59                   	pop    ecx
c001420b:	89 c7                	mov    edi,eax
c001420d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014211:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014213:	56                   	push   esi
c0014214:	57                   	push   edi
c0014215:	6a 00                	push   0x0
c0014217:	6a 34                	push   0x34
c0014219:	53                   	push   ebx
c001421a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001421d:	83 c4 20             	add    esp,0x20
c0014220:	85 c0                	test   eax,eax
c0014222:	74 17                	je     c001423b <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014224:	83 ec 0c             	sub    esp,0xc
c0014227:	68 17 33 02 c0       	push   0xc0023317
c001422c:	e8 75 aa ff ff       	call   c000eca6 <KePanic(char const*)>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	31 c0                	xor    eax,eax
c0014236:	e9 31 02 00 00       	jmp    c001446c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001423b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014241:	75 e1                	jne    c0014224 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014243:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014246:	85 c0                	test   eax,eax
c0014248:	74 da                	je     c0014224 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001424a:	52                   	push   edx
c001424b:	31 d2                	xor    edx,edx
c001424d:	52                   	push   edx
c001424e:	50                   	push   eax
c001424f:	53                   	push   ebx
c0014250:	e8 b9 3f ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	85 c0                	test   eax,eax
c001425a:	75 c8                	jne    c0014224 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001425c:	83 ec 0c             	sub    esp,0xc
c001425f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014263:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014267:	31 ed                	xor    ebp,ebp
c0014269:	0f af c2             	imul   eax,edx
c001426c:	50                   	push   eax
c001426d:	e8 ed a6 ff ff       	call   c000e95f <malloc>
c0014272:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014274:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014278:	89 34 24             	mov    DWORD PTR [esp],esi
c001427b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001427f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014283:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014287:	0f af c2             	imul   eax,edx
c001428a:	99                   	cdq    
c001428b:	52                   	push   edx
c001428c:	50                   	push   eax
c001428d:	53                   	push   ebx
c001428e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014291:	83 c4 20             	add    esp,0x20
c0014294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001429c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142a4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00142ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142b4:	0f b7 f5             	movzx  esi,bp
c00142b7:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00142bb:	0f 83 a7 00 00 00    	jae    c0014368 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00142c1:	6b f6 28             	imul   esi,esi,0x28
c00142c4:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00142c8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00142cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142cf:	50                   	push   eax
c00142d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142d4:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00142d8:	8b 16                	mov    edx,DWORD PTR [esi]
c00142da:	6b c0 28             	imul   eax,eax,0x28
c00142dd:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00142e1:	89 d0                	mov    eax,edx
c00142e3:	31 d2                	xor    edx,edx
c00142e5:	52                   	push   edx
c00142e6:	50                   	push   eax
c00142e7:	53                   	push   ebx
c00142e8:	e8 21 3f ff ff       	call   c000820e <File::seek(unsigned long long)>
c00142ed:	83 c4 0c             	add    esp,0xc
c00142f0:	6a 20                	push   0x20
c00142f2:	6a 00                	push   0x0
c00142f4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00142f8:	52                   	push   edx
c00142f9:	e8 f2 c1 fe ff       	call   c00004f0 <memset>
c00142fe:	58                   	pop    eax
c00142ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014301:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014305:	51                   	push   ecx
c0014306:	8d 54 24 40          	lea    edx,[esp+0x40]
c001430a:	52                   	push   edx
c001430b:	6a 00                	push   0x0
c001430d:	6a 1f                	push   0x1f
c001430f:	53                   	push   ebx
c0014310:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014313:	83 c4 18             	add    esp,0x18
c0014316:	68 2e 33 02 c0       	push   0xc002332e
c001431b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001431f:	52                   	push   edx
c0014320:	e8 2b c4 fe ff       	call   c0000750 <strcmp>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	85 c0                	test   eax,eax
c001432a:	75 0f                	jne    c001433b <Thr::loadKernelSymbolTable(char const*)+0x185>
c001432c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001432f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014333:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014337:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001433b:	50                   	push   eax
c001433c:	50                   	push   eax
c001433d:	68 36 33 02 c0       	push   0xc0023336
c0014342:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014346:	50                   	push   eax
c0014347:	e8 04 c4 fe ff       	call   c0000750 <strcmp>
c001434c:	83 c4 10             	add    esp,0x10
c001434f:	85 c0                	test   eax,eax
c0014351:	75 0f                	jne    c0014362 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014353:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014356:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001435a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001435e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014362:	45                   	inc    ebp
c0014363:	e9 4c ff ff ff       	jmp    c00142b4 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014368:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001436d:	75 10                	jne    c001437f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001436f:	83 ec 0c             	sub    esp,0xc
c0014372:	68 3e 33 02 c0       	push   0xc002333e
c0014377:	e8 2a a9 ff ff       	call   c000eca6 <KePanic(char const*)>
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014384:	75 10                	jne    c0014396 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014386:	83 ec 0c             	sub    esp,0xc
c0014389:	68 3e 33 02 c0       	push   0xc002333e
c001438e:	e8 13 a9 ff ff       	call   c000eca6 <KePanic(char const*)>
c0014393:	83 c4 10             	add    esp,0x10
c0014396:	31 d2                	xor    edx,edx
c0014398:	50                   	push   eax
c0014399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001439d:	52                   	push   edx
c001439e:	50                   	push   eax
c001439f:	53                   	push   ebx
c00143a0:	e8 69 3e ff ff       	call   c000820e <File::seek(unsigned long long)>
c00143a5:	5a                   	pop    edx
c00143a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143aa:	e8 b0 a5 ff ff       	call   c000e95f <malloc>
c00143af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00143b7:	31 c9                	xor    ecx,ecx
c00143b9:	5e                   	pop    esi
c00143ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143bc:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00143c0:	55                   	push   ebp
c00143c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143c5:	51                   	push   ecx
c00143c6:	52                   	push   edx
c00143c7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00143cb:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00143cf:	53                   	push   ebx
c00143d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143d3:	83 c4 14             	add    esp,0x14
c00143d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143da:	e8 80 a5 ff ff       	call   c000e95f <malloc>
c00143df:	89 c6                	mov    esi,eax
c00143e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00143e6:	56                   	push   esi
c00143e7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00143eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00143ef:	51                   	push   ecx
c00143f0:	52                   	push   edx
c00143f1:	53                   	push   ebx
c00143f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143f9:	8b 15 80 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d680
c00143ff:	83 c4 1c             	add    esp,0x1c
c0014402:	c1 e8 04             	shr    eax,0x4
c0014405:	89 04 95 00 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b00],eax
c001440c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014410:	31 d2                	xor    edx,edx
c0014412:	52                   	push   edx
c0014413:	50                   	push   eax
c0014414:	53                   	push   ebx
c0014415:	e8 f4 3d ff ff       	call   c000820e <File::seek(unsigned long long)>
c001441a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001441c:	31 d2                	xor    edx,edx
c001441e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014421:	56                   	push   esi
c0014422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014426:	52                   	push   edx
c0014427:	50                   	push   eax
c0014428:	53                   	push   ebx
c0014429:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001442c:	83 c4 14             	add    esp,0x14
c001442f:	53                   	push   ebx
c0014430:	e8 79 3d ff ff       	call   c00081ae <File::close()>
c0014435:	5d                   	pop    ebp
c0014436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001443a:	e8 30 a5 ff ff       	call   c000e96f <free>
c001443f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014442:	e8 28 a5 ff ff       	call   c000e96f <free>
c0014447:	a1 80 d6 02 c0       	mov    eax,ds:0xc002d680
c001444c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014450:	8d 50 01             	lea    edx,[eax+0x1]
c0014453:	89 0c 85 00 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a00],ecx
c001445a:	89 34 85 80 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a80],esi
c0014461:	89 15 80 d6 02 c0    	mov    DWORD PTR ds:0xc002d680,edx
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	b0 01                	mov    al,0x1
c001446c:	83 c4 5c             	add    esp,0x5c
c001446f:	5b                   	pop    ebx
c0014470:	5e                   	pop    esi
c0014471:	5f                   	pop    edi
c0014472:	5d                   	pop    ebp
c0014473:	c3                   	ret    

c0014474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014474:	55                   	push   ebp
c0014475:	57                   	push   edi
c0014476:	56                   	push   esi
c0014477:	53                   	push   ebx
c0014478:	81 ec 68 03 00 00    	sub    esp,0x368
c001447e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014485:	8b 1d d8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d8
c001448b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001448f:	68 14 01 00 00       	push   0x114
c0014494:	e8 c6 a4 ff ff       	call   c000e95f <malloc>
c0014499:	83 c4 0c             	add    esp,0xc
c001449c:	89 c5                	mov    ebp,eax
c001449e:	53                   	push   ebx
c001449f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00144a6:	50                   	push   eax
c00144a7:	e8 86 3c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00144ac:	5e                   	pop    esi
c00144ad:	5f                   	pop    edi
c00144ae:	6a 01                	push   0x1
c00144b0:	55                   	push   ebp
c00144b1:	e8 9a 3c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00144b6:	83 c4 10             	add    esp,0x10
c00144b9:	85 c0                	test   eax,eax
c00144bb:	0f 85 aa 06 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00144c1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00144c9:	83 ec 0c             	sub    esp,0xc
c00144cc:	6a 34                	push   0x34
c00144ce:	e8 8c a4 ff ff       	call   c000e95f <malloc>
c00144d3:	5b                   	pop    ebx
c00144d4:	89 c7                	mov    edi,eax
c00144d6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00144da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144dd:	53                   	push   ebx
c00144de:	57                   	push   edi
c00144df:	6a 00                	push   0x0
c00144e1:	6a 34                	push   0x34
c00144e3:	55                   	push   ebp
c00144e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144e7:	83 c4 20             	add    esp,0x20
c00144ea:	85 c0                	test   eax,eax
c00144ec:	0f 85 79 06 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00144f2:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00144f8:	0f 85 6d 06 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00144fe:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014501:	85 c0                	test   eax,eax
c0014503:	0f 84 62 06 00 00    	je     c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014509:	31 d2                	xor    edx,edx
c001450b:	51                   	push   ecx
c001450c:	52                   	push   edx
c001450d:	50                   	push   eax
c001450e:	55                   	push   ebp
c001450f:	e8 fa 3c ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	85 c0                	test   eax,eax
c0014519:	0f 85 4c 06 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001451f:	83 ec 0c             	sub    esp,0xc
c0014522:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014525:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001452d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014531:	0f af c2             	imul   eax,edx
c0014534:	50                   	push   eax
c0014535:	e8 25 a4 ff ff       	call   c000e95f <malloc>
c001453a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001453d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014541:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014548:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001454c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014550:	0f af c2             	imul   eax,edx
c0014553:	99                   	cdq    
c0014554:	52                   	push   edx
c0014555:	50                   	push   eax
c0014556:	55                   	push   ebp
c0014557:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001455a:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001455d:	83 c4 20             	add    esp,0x20
c0014560:	85 c0                	test   eax,eax
c0014562:	0f 84 03 06 00 00    	je     c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014568:	52                   	push   edx
c0014569:	31 d2                	xor    edx,edx
c001456b:	52                   	push   edx
c001456c:	50                   	push   eax
c001456d:	55                   	push   ebp
c001456e:	e8 9b 3c ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	85 c0                	test   eax,eax
c0014578:	0f 85 ed 05 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001457e:	83 ec 0c             	sub    esp,0xc
c0014581:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014585:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014589:	31 f6                	xor    esi,esi
c001458b:	0f af c2             	imul   eax,edx
c001458e:	50                   	push   eax
c001458f:	e8 cb a3 ff ff       	call   c000e95f <malloc>
c0014594:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014597:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001459b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001459e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00145a2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00145a6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00145aa:	0f af c2             	imul   eax,edx
c00145ad:	99                   	cdq    
c00145ae:	52                   	push   edx
c00145af:	50                   	push   eax
c00145b0:	55                   	push   ebp
c00145b1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145b4:	83 c4 20             	add    esp,0x20
c00145b7:	0f b7 de             	movzx  ebx,si
c00145ba:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00145be:	0f 83 87 00 00 00    	jae    c001464b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00145c4:	c1 e3 05             	shl    ebx,0x5
c00145c7:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00145cb:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00145ce:	75 75                	jne    c0014645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00145d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00145d3:	31 d2                	xor    edx,edx
c00145d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00145dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145e0:	50                   	push   eax
c00145e1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00145e4:	52                   	push   edx
c00145e5:	50                   	push   eax
c00145e6:	55                   	push   ebp
c00145e7:	e8 22 3c ff ff       	call   c000820e <File::seek(unsigned long long)>
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	85 c0                	test   eax,eax
c00145f1:	0f 85 74 05 00 00    	jne    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00145f7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00145fe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014601:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014605:	31 d2                	xor    edx,edx
c0014607:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001460b:	83 ec 0c             	sub    esp,0xc
c001460e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014612:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014619:	50                   	push   eax
c001461a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001461e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014622:	52                   	push   edx
c0014623:	50                   	push   eax
c0014624:	55                   	push   ebp
c0014625:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014628:	83 c4 1c             	add    esp,0x1c
c001462b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001462e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014631:	50                   	push   eax
c0014632:	6a 00                	push   0x0
c0014634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014638:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001463c:	50                   	push   eax
c001463d:	e8 ae be fe ff       	call   c00004f0 <memset>
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	46                   	inc    esi
c0014646:	e9 6c ff ff ff       	jmp    c00145b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001464b:	53                   	push   ebx
c001464c:	31 db                	xor    ebx,ebx
c001464e:	68 00 01 00 00       	push   0x100
c0014653:	6a 00                	push   0x0
c0014655:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014659:	50                   	push   eax
c001465a:	e8 91 be fe ff       	call   c00004f0 <memset>
c001465f:	83 c4 0c             	add    esp,0xc
c0014662:	68 00 01 00 00       	push   0x100
c0014667:	6a 00                	push   0x0
c0014669:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014670:	50                   	push   eax
c0014671:	e8 7a be fe ff       	call   c00004f0 <memset>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014681:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014689:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014691:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014699:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00146a1:	0f b7 f3             	movzx  esi,bx
c00146a4:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00146a8:	0f 83 2d 01 00 00    	jae    c00147db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00146ae:	6b f6 28             	imul   esi,esi,0x28
c00146b1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146b5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00146b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146bc:	52                   	push   edx
c00146bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146c1:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00146c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00146c7:	6b d2 28             	imul   edx,edx,0x28
c00146ca:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00146ce:	31 d2                	xor    edx,edx
c00146d0:	52                   	push   edx
c00146d1:	50                   	push   eax
c00146d2:	55                   	push   ebp
c00146d3:	e8 36 3b ff ff       	call   c000820e <File::seek(unsigned long long)>
c00146d8:	83 c4 0c             	add    esp,0xc
c00146db:	6a 20                	push   0x20
c00146dd:	6a 00                	push   0x0
c00146df:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00146e6:	51                   	push   ecx
c00146e7:	e8 04 be fe ff       	call   c00004f0 <memset>
c00146ec:	59                   	pop    ecx
c00146ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146f0:	8d 54 24 58          	lea    edx,[esp+0x58]
c00146f4:	52                   	push   edx
c00146f5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00146fc:	51                   	push   ecx
c00146fd:	6a 00                	push   0x0
c00146ff:	6a 1f                	push   0x1f
c0014701:	55                   	push   ebp
c0014702:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014705:	83 c4 1c             	add    esp,0x1c
c0014708:	6a 09                	push   0x9
c001470a:	68 58 33 02 c0       	push   0xc0023358
c001470f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014716:	51                   	push   ecx
c0014717:	e8 64 bc fe ff       	call   c0000380 <memcmp>
c001471c:	83 c4 10             	add    esp,0x10
c001471f:	85 c0                	test   eax,eax
c0014721:	75 21                	jne    c0014744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001472b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001472f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014733:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014736:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001473d:	89 d0                	mov    eax,edx
c001473f:	40                   	inc    eax
c0014740:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014744:	50                   	push   eax
c0014745:	6a 09                	push   0x9
c0014747:	68 62 33 02 c0       	push   0xc0023362
c001474c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014753:	50                   	push   eax
c0014754:	e8 27 bc fe ff       	call   c0000380 <memcmp>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	85 c0                	test   eax,eax
c001475e:	75 21                	jne    c0014781 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014764:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001476c:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014770:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014773:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001477a:	89 d0                	mov    eax,edx
c001477c:	40                   	inc    eax
c001477d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014781:	50                   	push   eax
c0014782:	50                   	push   eax
c0014783:	68 2e 33 02 c0       	push   0xc002332e
c0014788:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001478f:	50                   	push   eax
c0014790:	e8 bb bf fe ff       	call   c0000750 <strcmp>
c0014795:	83 c4 10             	add    esp,0x10
c0014798:	85 c0                	test   eax,eax
c001479a:	75 0f                	jne    c00147ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001479c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001479f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ab:	50                   	push   eax
c00147ac:	50                   	push   eax
c00147ad:	68 36 33 02 c0       	push   0xc0023336
c00147b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00147b9:	50                   	push   eax
c00147ba:	e8 91 bf fe ff       	call   c0000750 <strcmp>
c00147bf:	83 c4 10             	add    esp,0x10
c00147c2:	85 c0                	test   eax,eax
c00147c4:	75 0f                	jne    c00147d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00147c6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00147d5:	43                   	inc    ebx
c00147d6:	e9 c6 fe ff ff       	jmp    c00146a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00147db:	31 d2                	xor    edx,edx
c00147dd:	50                   	push   eax
c00147de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147e2:	52                   	push   edx
c00147e3:	50                   	push   eax
c00147e4:	55                   	push   ebp
c00147e5:	e8 24 3a ff ff       	call   c000820e <File::seek(unsigned long long)>
c00147ea:	58                   	pop    eax
c00147eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147ef:	e8 6b a1 ff ff       	call   c000e95f <malloc>
c00147f4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00147f7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00147fb:	31 d2                	xor    edx,edx
c00147fd:	58                   	pop    eax
c00147fe:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014802:	53                   	push   ebx
c0014803:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014807:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001480b:	52                   	push   edx
c001480c:	50                   	push   eax
c001480d:	55                   	push   ebp
c001480e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014811:	83 c4 14             	add    esp,0x14
c0014814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014818:	e8 42 a1 ff ff       	call   c000e95f <malloc>
c001481d:	31 d2                	xor    edx,edx
c001481f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014823:	83 c4 0c             	add    esp,0xc
c0014826:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001482a:	52                   	push   edx
c001482b:	50                   	push   eax
c001482c:	55                   	push   ebp
c001482d:	e8 dc 39 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014832:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014835:	31 d2                	xor    edx,edx
c0014837:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001483a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001483e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014842:	52                   	push   edx
c0014843:	50                   	push   eax
c0014844:	55                   	push   ebp
c0014845:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014848:	83 c4 20             	add    esp,0x20
c001484b:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014850:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014858:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001485c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014860:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014864:	0f 84 05 03 00 00    	je     c0014b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c001486a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014871:	31 d2                	xor    edx,edx
c0014873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014877:	c1 e8 03             	shr    eax,0x3
c001487a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001487e:	51                   	push   ecx
c001487f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014883:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014887:	52                   	push   edx
c0014888:	50                   	push   eax
c0014889:	55                   	push   ebp
c001488a:	e8 7f 39 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001488f:	5b                   	pop    ebx
c0014890:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014894:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001489b:	e8 bf a0 ff ff       	call   c000e95f <malloc>
c00148a0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00148a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a7:	31 d2                	xor    edx,edx
c00148a9:	5e                   	pop    esi
c00148aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00148ae:	50                   	push   eax
c00148af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148b7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00148be:	52                   	push   edx
c00148bf:	50                   	push   eax
c00148c0:	55                   	push   ebp
c00148c1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148c4:	83 c4 20             	add    esp,0x20
c00148c7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00148cf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00148d3:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00148d7:	0f 8d 76 02 00 00    	jge    c0014b53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00148dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00148e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e5:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00148ea:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00148ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148f5:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00148f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00148fd:	c1 e8 08             	shr    eax,0x8
c0014900:	89 c6                	mov    esi,eax
c0014902:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014906:	c1 e6 04             	shl    esi,0x4
c0014909:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001490d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014910:	85 db                	test   ebx,ebx
c0014912:	0f 85 b3 00 00 00    	jne    c00149cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014918:	83 ec 0c             	sub    esp,0xc
c001491b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001491f:	03 06                	add    eax,DWORD PTR [esi]
c0014921:	50                   	push   eax
c0014922:	e8 40 f8 ff ff       	call   c0014167 <Thr::getAddressOfKernelSymbol(char const*)>
c0014927:	83 c4 10             	add    esp,0x10
c001492a:	89 c3                	mov    ebx,eax
c001492c:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014931:	85 c0                	test   eax,eax
c0014933:	0f 85 92 00 00 00    	jne    c00149cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014940:	03 06                	add    eax,DWORD PTR [esi]
c0014942:	50                   	push   eax
c0014943:	e8 f0 ad ff ff       	call   c000f738 <KeResolveCompatibilitySymbol(char*)>
c0014948:	83 c4 10             	add    esp,0x10
c001494b:	89 c3                	mov    ebx,eax
c001494d:	85 c0                	test   eax,eax
c001494f:	75 7a                	jne    c00149cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014951:	51                   	push   ecx
c0014952:	51                   	push   ecx
c0014953:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014957:	03 06                	add    eax,DWORD PTR [esi]
c0014959:	50                   	push   eax
c001495a:	68 6c 33 02 c0       	push   0xc002336c
c001495f:	e8 00 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014964:	58                   	pop    eax
c0014965:	5a                   	pop    edx
c0014966:	68 86 33 02 c0       	push   0xc0023386
c001496b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014972:	50                   	push   eax
c0014973:	e8 c8 bc fe ff       	call   c0000640 <strcpy>
c0014978:	59                   	pop    ecx
c0014979:	58                   	pop    eax
c001497a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001497e:	03 06                	add    eax,DWORD PTR [esi]
c0014980:	50                   	push   eax
c0014981:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014988:	50                   	push   eax
c0014989:	e8 b2 be fe ff       	call   c0000840 <strcat>
c001498e:	58                   	pop    eax
c001498f:	5a                   	pop    edx
c0014990:	68 20 34 02 c0       	push   0xc0023420
c0014995:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001499c:	50                   	push   eax
c001499d:	e8 9e be fe ff       	call   c0000840 <strcat>
c00149a2:	83 c4 10             	add    esp,0x10
c00149a5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00149aa:	0f 84 5d 01 00 00    	je     c0014b0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00149ba:	50                   	push   eax
c00149bb:	e8 e6 a2 ff ff       	call   c000eca6 <KePanic(char const*)>
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00149c7:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00149cb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00149d0:	83 f8 01             	cmp    eax,0x1
c00149d3:	0f 85 8f 00 00 00    	jne    c0014a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00149d9:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00149e0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00149e4:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00149e8:	01 ce                	add    esi,ecx
c00149ea:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00149f2:	0f 94 c0             	sete   al
c00149f5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00149fd:	0f 94 c2             	sete   dl
c0014a00:	09 c2                	or     edx,eax
c0014a02:	8b 06                	mov    eax,DWORD PTR [esi]
c0014a04:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014a09:	0f b6 d2             	movzx  edx,dl
c0014a0c:	74 41                	je     c0014a4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014a0e:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014a11:	85 d2                	test   edx,edx
c0014a13:	75 15                	jne    c0014a2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014a15:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a19:	66 83 f8 0c          	cmp    ax,0xc
c0014a1d:	76 05                	jbe    c0014a24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014a1f:	b8 0c 00 00 00       	mov    eax,0xc
c0014a24:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014a28:	76 37                	jbe    c0014a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014a2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014a2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014a33:	0f 84 d4 00 00 00    	je     c0014b0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	68 9d 33 02 c0       	push   0xc002339d
c0014a41:	e8 60 a2 ff ff       	call   c000eca6 <KePanic(char const*)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014a4d:	eb 12                	jmp    c0014a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014a4f:	01 c1                	add    ecx,eax
c0014a51:	85 d2                	test   edx,edx
c0014a53:	75 0c                	jne    c0014a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014a55:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a59:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014a5d:	77 02                	ja     c0014a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014a5f:	01 d9                	add    ecx,ebx
c0014a61:	89 0e                	mov    DWORD PTR [esi],ecx
c0014a63:	e9 e2 00 00 00       	jmp    c0014b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014a68:	83 f8 02             	cmp    eax,0x2
c0014a6b:	75 77                	jne    c0014ae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014a6d:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014a74:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014a78:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014a7c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014a84:	74 21                	je     c0014aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014a86:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014a8e:	74 17                	je     c0014aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014a90:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014a94:	b8 0a 00 00 00       	mov    eax,0xa
c0014a99:	83 fa 0e             	cmp    edx,0xe
c0014a9c:	77 03                	ja     c0014aa1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014a9e:	8d 42 fc             	lea    eax,[edx-0x4]
c0014aa1:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014aa5:	76 17                	jbe    c0014abe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014aa7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014aac:	74 5f                	je     c0014b0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014aae:	83 ec 0c             	sub    esp,0xc
c0014ab1:	68 b9 33 02 c0       	push   0xc00233b9
c0014ab6:	e8 eb a1 ff ff       	call   c000eca6 <KePanic(char const*)>
c0014abb:	83 c4 10             	add    esp,0x10
c0014abe:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ac0:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014ac5:	74 13                	je     c0014ada <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014ac7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014acb:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014ad2:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014ad6:	01 d0                	add    eax,edx
c0014ad8:	eb 04                	jmp    c0014ade <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014ada:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014ade:	01 c3                	add    ebx,eax
c0014ae0:	89 1e                	mov    DWORD PTR [esi],ebx
c0014ae2:	eb 66                	jmp    c0014b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014ae4:	52                   	push   edx
c0014ae5:	52                   	push   edx
c0014ae6:	50                   	push   eax
c0014ae7:	68 d5 33 02 c0       	push   0xc00233d5
c0014aec:	e8 73 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014af1:	83 c4 10             	add    esp,0x10
c0014af4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014af9:	74 12                	je     c0014b0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014afb:	83 ec 0c             	sub    esp,0xc
c0014afe:	68 e0 33 02 c0       	push   0xc00233e0
c0014b03:	e8 9e a1 ff ff       	call   c000eca6 <KePanic(char const*)>
c0014b08:	83 c4 10             	add    esp,0x10
c0014b0b:	eb 3d                	jmp    c0014b4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	55                   	push   ebp
c0014b11:	e8 98 36 ff ff       	call   c00081ae <File::close()>
c0014b16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b1f:	59                   	pop    ecx
c0014b20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b24:	e8 46 9e ff ff       	call   c000e96f <free>
c0014b29:	5b                   	pop    ebx
c0014b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b2e:	e8 3c 9e ff ff       	call   c000e96f <free>
c0014b33:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b36:	e8 34 9e ff ff       	call   c000e96f <free>
c0014b3b:	5e                   	pop    esi
c0014b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b40:	e8 2a 9e ff ff       	call   c000e96f <free>
c0014b45:	83 c4 10             	add    esp,0x10
c0014b48:	eb 21                	jmp    c0014b6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b4a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014b4e:	e9 7c fd ff ff       	jmp    c00148cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014b53:	83 ec 0c             	sub    esp,0xc
c0014b56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b5a:	e8 10 9e ff ff       	call   c000e96f <free>
c0014b5f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	e9 f1 fc ff ff       	jmp    c001485c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014b6b:	31 c0                	xor    eax,eax
c0014b6d:	eb 33                	jmp    c0014ba2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014b6f:	83 ec 0c             	sub    esp,0xc
c0014b72:	55                   	push   ebp
c0014b73:	e8 36 36 ff ff       	call   c00081ae <File::close()>
c0014b78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b81:	58                   	pop    eax
c0014b82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b86:	e8 e4 9d ff ff       	call   c000e96f <free>
c0014b8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b8e:	e8 dc 9d ff ff       	call   c000e96f <free>
c0014b93:	5a                   	pop    edx
c0014b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b98:	e8 d2 9d ff ff       	call   c000e96f <free>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	b0 01                	mov    al,0x1
c0014ba2:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014ba8:	5b                   	pop    ebx
c0014ba9:	5e                   	pop    esi
c0014baa:	5f                   	pop    edi
c0014bab:	5d                   	pop    ebp
c0014bac:	c3                   	ret    

c0014bad <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014bad:	56                   	push   esi
c0014bae:	31 d2                	xor    edx,edx
c0014bb0:	53                   	push   ebx
c0014bb1:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014bb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014bbb:	39 d3                	cmp    ebx,edx
c0014bbd:	7e 1b                	jle    c0014bda <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014bbf:	8b 04 95 00 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f00]
c0014bc6:	39 c8                	cmp    eax,ecx
c0014bc8:	77 0d                	ja     c0014bd7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014bca:	8b 34 95 00 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3100]
c0014bd1:	01 c6                	add    esi,eax
c0014bd3:	39 ce                	cmp    esi,ecx
c0014bd5:	77 05                	ja     c0014bdc <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014bd7:	42                   	inc    edx
c0014bd8:	eb e1                	jmp    c0014bbb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014bda:	31 c0                	xor    eax,eax
c0014bdc:	5b                   	pop    ebx
c0014bdd:	5e                   	pop    esi
c0014bde:	c3                   	ret    

c0014bdf <Thr::getDriverNameFromAddress(unsigned long)>:
c0014bdf:	53                   	push   ebx
c0014be0:	31 c0                	xor    eax,eax
c0014be2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014be6:	8b 1d e0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cee0
c0014bec:	39 c3                	cmp    ebx,eax
c0014bee:	7e 22                	jle    c0014c12 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014bf0:	8b 14 85 00 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f00]
c0014bf7:	39 ca                	cmp    edx,ecx
c0014bf9:	77 14                	ja     c0014c0f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014bfb:	03 14 85 00 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3100]
c0014c02:	39 ca                	cmp    edx,ecx
c0014c04:	76 09                	jbe    c0014c0f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014c06:	8b 04 85 00 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2d00]
c0014c0d:	eb 05                	jmp    c0014c14 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014c0f:	40                   	inc    eax
c0014c10:	eb da                	jmp    c0014bec <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014c12:	31 c0                	xor    eax,eax
c0014c14:	5b                   	pop    ebx
c0014c15:	c3                   	ret    

c0014c16 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014c16:	53                   	push   ebx
c0014c17:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014c1b:	53                   	push   ebx
c0014c1c:	e8 8c ff ff ff       	call   c0014bad <Thr::getDriverBaseFromAddress(unsigned long)>
c0014c21:	5a                   	pop    edx
c0014c22:	31 d2                	xor    edx,edx
c0014c24:	85 c0                	test   eax,eax
c0014c26:	74 04                	je     c0014c2c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014c28:	89 da                	mov    edx,ebx
c0014c2a:	29 c2                	sub    edx,eax
c0014c2c:	89 d0                	mov    eax,edx
c0014c2e:	5b                   	pop    ebx
c0014c2f:	c3                   	ret    

c0014c30 <Thr::loadDLL(char const*, bool)>:
c0014c30:	55                   	push   ebp
c0014c31:	57                   	push   edi
c0014c32:	56                   	push   esi
c0014c33:	53                   	push   ebx
c0014c34:	81 ec 34 01 00 00    	sub    esp,0x134
c0014c3a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0014c41:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014c48:	56                   	push   esi
c0014c49:	68 f8 33 02 c0       	push   0xc00233f8
c0014c4e:	e8 11 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014c53:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014c5a:	e8 00 9d ff ff       	call   c000e95f <malloc>
c0014c5f:	83 c4 0c             	add    esp,0xc
c0014c62:	89 c3                	mov    ebx,eax
c0014c64:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c0014c6a:	56                   	push   esi
c0014c6b:	50                   	push   eax
c0014c6c:	e8 c1 34 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014c71:	83 c4 10             	add    esp,0x10
c0014c74:	85 db                	test   ebx,ebx
c0014c76:	75 3c                	jne    c0014cb4 <Thr::loadDLL(char const*, bool)+0x84>
c0014c78:	89 f8                	mov    eax,edi
c0014c7a:	84 c0                	test   al,al
c0014c7c:	0f 84 f3 01 00 00    	je     c0014e75 <Thr::loadDLL(char const*, bool)+0x245>
c0014c82:	55                   	push   ebp
c0014c83:	55                   	push   ebp
c0014c84:	68 09 34 02 c0       	push   0xc0023409
c0014c89:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014c8d:	55                   	push   ebp
c0014c8e:	e8 ad b9 fe ff       	call   c0000640 <strcpy>
c0014c93:	58                   	pop    eax
c0014c94:	5a                   	pop    edx
c0014c95:	56                   	push   esi
c0014c96:	55                   	push   ebp
c0014c97:	e8 a4 bb fe ff       	call   c0000840 <strcat>
c0014c9c:	59                   	pop    ecx
c0014c9d:	58                   	pop    eax
c0014c9e:	68 20 34 02 c0       	push   0xc0023420
c0014ca3:	55                   	push   ebp
c0014ca4:	e8 97 bb fe ff       	call   c0000840 <strcat>
c0014ca9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014cac:	e8 f5 9f ff ff       	call   c000eca6 <KePanic(char const*)>
c0014cb1:	83 c4 10             	add    esp,0x10
c0014cb4:	51                   	push   ecx
c0014cb5:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014cb9:	50                   	push   eax
c0014cba:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014cbe:	50                   	push   eax
c0014cbf:	53                   	push   ebx
c0014cc0:	e8 8d 37 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0014cc5:	83 c4 10             	add    esp,0x10
c0014cc8:	89 c5                	mov    ebp,eax
c0014cca:	85 db                	test   ebx,ebx
c0014ccc:	74 0c                	je     c0014cda <Thr::loadDLL(char const*, bool)+0xaa>
c0014cce:	83 ec 0c             	sub    esp,0xc
c0014cd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014cd3:	53                   	push   ebx
c0014cd4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	83 ec 0c             	sub    esp,0xc
c0014cdd:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014ce2:	50                   	push   eax
c0014ce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ce7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ceb:	55                   	push   ebp
c0014cec:	68 22 34 02 c0       	push   0xc0023422
c0014cf1:	e8 6e 22 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014cf6:	83 c4 20             	add    esp,0x20
c0014cf9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014cfe:	75 0a                	jne    c0014d0a <Thr::loadDLL(char const*, bool)+0xda>
c0014d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d04:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014d08:	75 3c                	jne    c0014d46 <Thr::loadDLL(char const*, bool)+0x116>
c0014d0a:	89 f8                	mov    eax,edi
c0014d0c:	84 c0                	test   al,al
c0014d0e:	0f 84 49 01 00 00    	je     c0014e5d <Thr::loadDLL(char const*, bool)+0x22d>
c0014d14:	51                   	push   ecx
c0014d15:	51                   	push   ecx
c0014d16:	68 43 34 02 c0       	push   0xc0023443
c0014d1b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014d1f:	53                   	push   ebx
c0014d20:	e8 1b b9 fe ff       	call   c0000640 <strcpy>
c0014d25:	5d                   	pop    ebp
c0014d26:	58                   	pop    eax
c0014d27:	56                   	push   esi
c0014d28:	53                   	push   ebx
c0014d29:	e8 12 bb fe ff       	call   c0000840 <strcat>
c0014d2e:	58                   	pop    eax
c0014d2f:	5a                   	pop    edx
c0014d30:	68 20 34 02 c0       	push   0xc0023420
c0014d35:	53                   	push   ebx
c0014d36:	e8 05 bb fe ff       	call   c0000840 <strcat>
c0014d3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d3e:	e8 63 9f ff ff       	call   c000eca6 <KePanic(char const*)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	52                   	push   edx
c0014d47:	6a 03                	push   0x3
c0014d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014d51:	05 ff 0f 00 00       	add    eax,0xfff
c0014d56:	83 d2 00             	adc    edx,0x0
c0014d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014d5d:	50                   	push   eax
c0014d5e:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014d64:	e8 57 db ff ff       	call   c00128c0 <VAS::allocatePages(int, int)>
c0014d69:	59                   	pop    ecx
c0014d6a:	89 c3                	mov    ebx,eax
c0014d6c:	5d                   	pop    ebp
c0014d6d:	50                   	push   eax
c0014d6e:	68 8a 27 02 c0       	push   0xc002278a
c0014d73:	e8 ec 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014d78:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d7b:	e8 f0 b7 fe ff       	call   c0000570 <strlen>
c0014d80:	8b 2d e0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002cee0
c0014d86:	40                   	inc    eax
c0014d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d8a:	e8 d0 9b ff ff       	call   c000e95f <malloc>
c0014d8f:	89 04 ad 00 d3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2d00],eax
c0014d96:	58                   	pop    eax
c0014d97:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014d9c:	5a                   	pop    edx
c0014d9d:	56                   	push   esi
c0014d9e:	ff 34 85 00 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2d00]
c0014da5:	e8 96 b8 fe ff       	call   c0000640 <strcpy>
c0014daa:	a1 e0 ce 02 c0       	mov    eax,ds:0xc002cee0
c0014daf:	8d 50 01             	lea    edx,[eax+0x1]
c0014db2:	89 1c 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],ebx
c0014db9:	89 15 e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,edx
c0014dbf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014dc3:	83 c4 0c             	add    esp,0xc
c0014dc6:	89 14 85 00 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3100],edx
c0014dcd:	6a 01                	push   0x1
c0014dcf:	53                   	push   ebx
c0014dd0:	56                   	push   esi
c0014dd1:	e8 9e f6 ff ff       	call   c0014474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	0f b6 c0             	movzx  eax,al
c0014ddc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014de0:	85 c0                	test   eax,eax
c0014de2:	0f 85 89 00 00 00    	jne    c0014e71 <Thr::loadDLL(char const*, bool)+0x241>
c0014de8:	89 f8                	mov    eax,edi
c0014dea:	84 c0                	test   al,al
c0014dec:	74 73                	je     c0014e61 <Thr::loadDLL(char const*, bool)+0x231>
c0014dee:	83 ec 0c             	sub    esp,0xc
c0014df1:	68 5c 34 02 c0       	push   0xc002345c
c0014df6:	e8 ab 9e ff ff       	call   c000eca6 <KePanic(char const*)>
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	eb 61                	jmp    c0014e61 <Thr::loadDLL(char const*, bool)+0x231>
c0014e00:	50                   	push   eax
c0014e01:	50                   	push   eax
c0014e02:	89 e8                	mov    eax,ebp
c0014e04:	c1 e0 0c             	shl    eax,0xc
c0014e07:	01 d8                	add    eax,ebx
c0014e09:	50                   	push   eax
c0014e0a:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c0014e10:	e8 ad d5 ff ff       	call   c00123c2 <VAS::getPageTableEntry(unsigned long)>
c0014e15:	83 c4 10             	add    esp,0x10
c0014e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e1a:	a8 60                	test   al,0x60
c0014e1c:	75 11                	jne    c0014e2f <Thr::loadDLL(char const*, bool)+0x1ff>
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014e26:	50                   	push   eax
c0014e27:	e8 05 a0 ff ff       	call   c000ee31 <Phys::freePage(unsigned long)>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	45                   	inc    ebp
c0014e30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014e38:	05 ff 0f 00 00       	add    eax,0xfff
c0014e3d:	bf 00 00 00 00       	mov    edi,0x0
c0014e42:	83 d2 00             	adc    edx,0x0
c0014e45:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014e49:	c1 ea 0c             	shr    edx,0xc
c0014e4c:	39 c5                	cmp    ebp,eax
c0014e4e:	89 d1                	mov    ecx,edx
c0014e50:	89 f8                	mov    eax,edi
c0014e52:	19 c8                	sbb    eax,ecx
c0014e54:	72 aa                	jb     c0014e00 <Thr::loadDLL(char const*, bool)+0x1d0>
c0014e56:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014e5b:	75 18                	jne    c0014e75 <Thr::loadDLL(char const*, bool)+0x245>
c0014e5d:	31 db                	xor    ebx,ebx
c0014e5f:	eb 14                	jmp    c0014e75 <Thr::loadDLL(char const*, bool)+0x245>
c0014e61:	83 ec 0c             	sub    esp,0xc
c0014e64:	68 7b 34 02 c0       	push   0xc002347b
c0014e69:	e8 38 9e ff ff       	call   c000eca6 <KePanic(char const*)>
c0014e6e:	83 c4 10             	add    esp,0x10
c0014e71:	31 ed                	xor    ebp,ebp
c0014e73:	eb bb                	jmp    c0014e30 <Thr::loadDLL(char const*, bool)+0x200>
c0014e75:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e7b:	89 d8                	mov    eax,ebx
c0014e7d:	5b                   	pop    ebx
c0014e7e:	5e                   	pop    esi
c0014e7f:	5f                   	pop    edi
c0014e80:	5d                   	pop    ebp
c0014e81:	c3                   	ret    

c0014e82 <Thr::executeDLL(unsigned long, void*)>:
c0014e82:	56                   	push   esi
c0014e83:	53                   	push   ebx
c0014e84:	52                   	push   edx
c0014e85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014e8d:	85 db                	test   ebx,ebx
c0014e8f:	75 10                	jne    c0014ea1 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014e91:	83 ec 0c             	sub    esp,0xc
c0014e94:	68 97 34 02 c0       	push   0xc0023497
c0014e99:	e8 08 9e ff ff       	call   c000eca6 <KePanic(char const*)>
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	50                   	push   eax
c0014ea2:	50                   	push   eax
c0014ea3:	53                   	push   ebx
c0014ea4:	68 c1 34 02 c0       	push   0xc00234c1
c0014ea9:	e8 b6 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014eae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014eb2:	89 d8                	mov    eax,ebx
c0014eb4:	83 c4 14             	add    esp,0x14
c0014eb7:	5b                   	pop    ebx
c0014eb8:	5e                   	pop    esi
c0014eb9:	ff e0                	jmp    eax

c0014ebb <KeProcessExec(Process*, char const*)>:
c0014ebb:	56                   	push   esi
c0014ebc:	53                   	push   ebx
c0014ebd:	83 ec 04             	sub    esp,0x4
c0014ec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ec4:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014eca:	85 f6                	test   esi,esi
c0014ecc:	74 16                	je     c0014ee4 <KeProcessExec(Process*, char const*)+0x29>
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	56                   	push   esi
c0014ed2:	e8 7d d7 ff ff       	call   c0012654 <VAS::~VAS()>
c0014ed7:	58                   	pop    eax
c0014ed8:	5a                   	pop    edx
c0014ed9:	6a 14                	push   0x14
c0014edb:	56                   	push   esi
c0014edc:	e8 e3 77 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	6a 14                	push   0x14
c0014ee9:	e8 71 9a ff ff       	call   c000e95f <malloc>
c0014eee:	89 c6                	mov    esi,eax
c0014ef0:	58                   	pop    eax
c0014ef1:	5a                   	pop    edx
c0014ef2:	6a 00                	push   0x0
c0014ef4:	56                   	push   esi
c0014ef5:	e8 fa db ff ff       	call   c0012af4 <VAS::VAS(bool)>
c0014efa:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014f00:	59                   	pop    ecx
c0014f01:	5e                   	pop    esi
c0014f02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f06:	50                   	push   eax
c0014f07:	53                   	push   ebx
c0014f08:	e8 35 f0 ff ff       	call   c0013f42 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f0d:	83 c4 14             	add    esp,0x14
c0014f10:	31 c0                	xor    eax,eax
c0014f12:	5b                   	pop    ebx
c0014f13:	5e                   	pop    esi
c0014f14:	c3                   	ret    
c0014f15:	66 90                	xchg   ax,ax
c0014f17:	90                   	nop

c0014f18 <userModeEntryPoint(void*)>:
c0014f18:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0014f20:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0014f25:	85 c0                	test   eax,eax
c0014f27:	75 03                	jne    c0014f2c <userModeEntryPoint(void*)+0x14>
c0014f29:	fb                   	sti    
c0014f2a:	66 90                	xchg   ax,ax
c0014f2c:	fb                   	sti    
c0014f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f35:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f3f:	e9 fb b2 fe ff       	jmp    c000023f <goToUsermode>

c0014f44 <changeTSS>:
c0014f44:	83 ec 14             	sub    esp,0x14
c0014f47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f4c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f4f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014f54:	c1 e2 15             	shl    edx,0x15
c0014f57:	29 d0                	sub    eax,edx
c0014f59:	50                   	push   eax
c0014f5a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0014f5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f65:	05 68 11 00 00       	add    eax,0x1168
c0014f6a:	50                   	push   eax
c0014f6b:	e8 e4 c9 ff ff       	call   c0011954 <TSS::setESP(unsigned long)>
c0014f70:	83 c4 1c             	add    esp,0x1c
c0014f73:	c3                   	ret    

c0014f74 <switchToThread(ThreadControlBlock*)>:
c0014f74:	57                   	push   edi
c0014f75:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0014f7b:	56                   	push   esi
c0014f7c:	85 c9                	test   ecx,ecx
c0014f7e:	53                   	push   ebx
c0014f7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f83:	0f 85 8b 00 00 00    	jne    c0015014 <switchToThread(ThreadControlBlock*)+0xa0>
c0014f89:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014f8d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014f93:	74 7b                	je     c0015010 <switchToThread(ThreadControlBlock*)+0x9c>
c0014f95:	b8 00 04 00 00       	mov    eax,0x400
c0014f9a:	29 d0                	sub    eax,edx
c0014f9c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014f9f:	d1 f8                	sar    eax,1
c0014fa1:	01 d0                	add    eax,edx
c0014fa3:	90                   	nop
c0014fa4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014fa7:	e8 25 38 00 00       	call   c00187d1 <HalQueryPerformanceCounter()>
c0014fac:	a3 f0 d6 02 c0       	mov    ds:0xc002d6f0,eax
c0014fb1:	89 15 f4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f4,edx
c0014fb7:	89 c6                	mov    esi,eax
c0014fb9:	89 d7                	mov    edi,edx
c0014fbb:	2b 35 e0 d6 02 c0    	sub    esi,DWORD PTR ds:0xc002d6e0
c0014fc1:	a3 e0 d6 02 c0       	mov    ds:0xc002d6e0,eax
c0014fc6:	1b 3d e4 d6 02 c0    	sbb    edi,DWORD PTR ds:0xc002d6e4
c0014fcc:	89 35 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,esi
c0014fd2:	89 3d ec d6 02 c0    	mov    DWORD PTR ds:0xc002d6ec,edi
c0014fd8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014fde:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0014fe4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014fe7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014fea:	01 c6                	add    esi,eax
c0014fec:	11 d7                	adc    edi,edx
c0014fee:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014ff1:	83 ec 0c             	sub    esp,0xc
c0014ff4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014ff7:	53                   	push   ebx
c0014ff8:	e8 7a b2 fe ff       	call   c0000277 <switchToThreadASM>
c0014ffd:	0f 20 c0             	mov    eax,cr0
c0015000:	83 c8 08             	or     eax,0x8
c0015003:	0f 22 c0             	mov    cr0,eax
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	5b                   	pop    ebx
c001500a:	5e                   	pop    esi
c001500b:	5f                   	pop    edi
c001500c:	c3                   	ret    
c001500d:	8d 76 00             	lea    esi,[esi+0x0]
c0015010:	31 c0                	xor    eax,eax
c0015012:	eb 90                	jmp    c0014fa4 <switchToThread(ThreadControlBlock*)+0x30>
c0015014:	5b                   	pop    ebx
c0015015:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c001501f:	5e                   	pop    esi
c0015020:	5f                   	pop    edi
c0015021:	c3                   	ret    
c0015022:	66 90                	xchg   ax,ax

c0015024 <Process::addArgs(char**)>:
c0015024:	57                   	push   edi
c0015025:	56                   	push   esi
c0015026:	53                   	push   ebx
c0015027:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001502b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001502f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015039:	85 ff                	test   edi,edi
c001503b:	74 4f                	je     c001508c <Process::addArgs(char**)+0x68>
c001503d:	8b 07                	mov    eax,DWORD PTR [edi]
c001503f:	85 c0                	test   eax,eax
c0015041:	74 49                	je     c001508c <Process::addArgs(char**)+0x68>
c0015043:	31 db                	xor    ebx,ebx
c0015045:	8d 76 00             	lea    esi,[esi+0x0]
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	50                   	push   eax
c001504c:	e8 1f b5 fe ff       	call   c0000570 <strlen>
c0015051:	83 c0 01             	add    eax,0x1
c0015054:	89 04 24             	mov    DWORD PTR [esp],eax
c0015057:	e8 03 99 ff ff       	call   c000e95f <malloc>
c001505c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015063:	5a                   	pop    edx
c0015064:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015067:	59                   	pop    ecx
c0015068:	83 c3 01             	add    ebx,0x1
c001506b:	52                   	push   edx
c001506c:	50                   	push   eax
c001506d:	e8 ce b5 fe ff       	call   c0000640 <strcpy>
c0015072:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	83 c1 01             	add    ecx,0x1
c001507e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015084:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015087:	85 c0                	test   eax,eax
c0015089:	75 bd                	jne    c0015048 <Process::addArgs(char**)+0x24>
c001508b:	90                   	nop
c001508c:	5b                   	pop    ebx
c001508d:	5e                   	pop    esi
c001508e:	5f                   	pop    edi
c001508f:	c3                   	ret    

c0015090 <Process::Process(char const*, Process*, char**)>:
c0015090:	56                   	push   esi
c0015091:	53                   	push   ebx
c0015092:	83 ec 14             	sub    esp,0x14
c0015095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015099:	05 0c 02 00 00       	add    eax,0x20c
c001509e:	bb 07 00 00 00       	mov    ebx,0x7
c00150a3:	89 c6                	mov    esi,eax
c00150a5:	8d 76 00             	lea    esi,[esi+0x0]
c00150a8:	85 db                	test   ebx,ebx
c00150aa:	78 14                	js     c00150c0 <Process::Process(char const*, Process*, char**)+0x30>
c00150ac:	83 ec 0c             	sub    esp,0xc
c00150af:	56                   	push   esi
c00150b0:	e8 7b b8 00 00       	call   c0020930 <ThreadControlBlock::ThreadControlBlock()>
c00150b5:	83 c4 10             	add    esp,0x10
c00150b8:	83 c6 5f             	add    esi,0x5f
c00150bb:	83 eb 01             	sub    ebx,0x1
c00150be:	eb e8                	jmp    c00150a8 <Process::Process(char const*, Process*, char**)+0x18>
c00150c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00150cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150cf:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00150d6:	83 ec 0c             	sub    esp,0xc
c00150d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150dd:	e8 e2 8a ff ff       	call   c000dbc4 <KeNewProcessEnv(Process*)>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	89 c2                	mov    edx,eax
c00150e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150eb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00150f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150f5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00150fe:	a1 fc 4d 02 c0       	mov    eax,ds:0xc0024dfc
c0015103:	8d 50 01             	lea    edx,[eax+0x1]
c0015106:	89 15 fc 4d 02 c0    	mov    DWORD PTR ds:0xc0024dfc,edx
c001510c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015110:	89 02                	mov    DWORD PTR [edx],eax
c0015112:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001511a:	83 ec 0c             	sub    esp,0xc
c001511d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015121:	e8 39 98 ff ff       	call   c000e95f <malloc>
c0015126:	83 c4 10             	add    esp,0x10
c0015129:	89 c3                	mov    ebx,eax
c001512b:	83 ec 08             	sub    esp,0x8
c001512e:	6a 00                	push   0x0
c0015130:	53                   	push   ebx
c0015131:	e8 be d9 ff ff       	call   c0012af4 <VAS::VAS(bool)>
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001513d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015147:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015155:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015159:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001515f:	e8 03 ac ff ff       	call   c000fd67 <KeInitSignals()>
c0015164:	89 c2                	mov    edx,eax
c0015166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015174:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001517a:	85 c0                	test   eax,eax
c001517c:	74 42                	je     c00151c0 <Process::Process(char const*, Process*, char**)+0x130>
c001517e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015182:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015188:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001518e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015192:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001519c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00151a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00151a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ac:	05 0c 01 00 00       	add    eax,0x10c
c00151b1:	83 ec 08             	sub    esp,0x8
c00151b4:	52                   	push   edx
c00151b5:	50                   	push   eax
c00151b6:	e8 85 b4 fe ff       	call   c0000640 <strcpy>
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	eb 64                	jmp    c0015224 <Process::Process(char const*, Process*, char**)+0x194>
c00151c0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00151c8:	83 ec 0c             	sub    esp,0xc
c00151cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00151cf:	e8 8b 97 ff ff       	call   c000e95f <malloc>
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	89 c3                	mov    ebx,eax
c00151d9:	83 ec 08             	sub    esp,0x8
c00151dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00151e0:	53                   	push   ebx
c00151e1:	e8 7e c4 ff ff       	call   c0011664 <VgaText::VgaText(char const*)>
c00151e6:	83 c4 10             	add    esp,0x10
c00151e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151ed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00151f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151fd:	83 ec 0c             	sub    esp,0xc
c0015200:	50                   	push   eax
c0015201:	e8 fc bc ff ff       	call   c0010f02 <addToTerminalCycle(VgaText*)>
c0015206:	83 c4 10             	add    esp,0x10
c0015209:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001520d:	05 0c 01 00 00       	add    eax,0x10c
c0015212:	83 ec 08             	sub    esp,0x8
c0015215:	68 e0 34 02 c0       	push   0xc00234e0
c001521a:	50                   	push   eax
c001521b:	e8 20 b4 fe ff       	call   c0000640 <strcpy>
c0015220:	83 c4 10             	add    esp,0x10
c0015223:	90                   	nop
c0015224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015228:	83 c0 0c             	add    eax,0xc
c001522b:	83 ec 08             	sub    esp,0x8
c001522e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015232:	50                   	push   eax
c0015233:	e8 08 b4 fe ff       	call   c0000640 <strcpy>
c0015238:	83 c4 10             	add    esp,0x10
c001523b:	83 ec 08             	sub    esp,0x8
c001523e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015246:	e8 d9 fd ff ff       	call   c0015024 <Process::addArgs(char**)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	83 ec 08             	sub    esp,0x8
c0015251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015259:	e8 e4 ec ff ff       	call   c0013f42 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001525e:	83 c4 10             	add    esp,0x10
c0015261:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015265:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015269:	83 f0 01             	xor    eax,0x1
c001526c:	88 c2                	mov    dl,al
c001526e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015272:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015278:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001527d:	83 ec 04             	sub    esp,0x4
c0015280:	50                   	push   eax
c0015281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015285:	68 5c 35 02 c0       	push   0xc002355c
c001528a:	e8 d5 1c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001528f:	83 c4 10             	add    esp,0x10
c0015292:	90                   	nop
c0015293:	83 c4 14             	add    esp,0x14
c0015296:	5b                   	pop    ebx
c0015297:	5e                   	pop    esi
c0015298:	c3                   	ret    
c0015299:	90                   	nop
c001529a:	66 90                	xchg   ax,ax

c001529c <Process::Process(bool, char const*, Process*, char**)>:
c001529c:	56                   	push   esi
c001529d:	53                   	push   ebx
c001529e:	83 ec 24             	sub    esp,0x24
c00152a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00152a5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00152a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152ad:	05 0c 02 00 00       	add    eax,0x20c
c00152b2:	bb 07 00 00 00       	mov    ebx,0x7
c00152b7:	89 c6                	mov    esi,eax
c00152b9:	8d 76 00             	lea    esi,[esi+0x0]
c00152bc:	85 db                	test   ebx,ebx
c00152be:	78 14                	js     c00152d4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00152c0:	83 ec 0c             	sub    esp,0xc
c00152c3:	56                   	push   esi
c00152c4:	e8 67 b6 00 00       	call   c0020930 <ThreadControlBlock::ThreadControlBlock()>
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	83 c6 5f             	add    esi,0x5f
c00152cf:	83 eb 01             	sub    ebx,0x1
c00152d2:	eb e8                	jmp    c00152bc <Process::Process(bool, char const*, Process*, char**)+0x20>
c00152d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152d8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00152df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152e3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00152ea:	83 ec 0c             	sub    esp,0xc
c00152ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00152f1:	e8 ce 88 ff ff       	call   c000dbc4 <KeNewProcessEnv(Process*)>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	89 c2                	mov    edx,eax
c00152fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00152ff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015305:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015309:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015312:	a1 fc 4d 02 c0       	mov    eax,ds:0xc0024dfc
c0015317:	8d 50 01             	lea    edx,[eax+0x1]
c001531a:	89 15 fc 4d 02 c0    	mov    DWORD PTR ds:0xc0024dfc,edx
c0015320:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015324:	89 02                	mov    DWORD PTR [edx],eax
c0015326:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001532e:	83 ec 0c             	sub    esp,0xc
c0015331:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015335:	e8 25 96 ff ff       	call   c000e95f <malloc>
c001533a:	83 c4 10             	add    esp,0x10
c001533d:	89 c3                	mov    ebx,eax
c001533f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015344:	83 ec 08             	sub    esp,0x8
c0015347:	50                   	push   eax
c0015348:	53                   	push   ebx
c0015349:	e8 a6 d7 ff ff       	call   c0012af4 <VAS::VAS(bool)>
c001534e:	83 c4 10             	add    esp,0x10
c0015351:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015355:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001535b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001535f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015369:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001536d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015371:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015377:	e8 eb a9 ff ff       	call   c000fd67 <KeInitSignals()>
c001537c:	89 c2                	mov    edx,eax
c001537e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015382:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015388:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001538c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015392:	85 c0                	test   eax,eax
c0015394:	74 42                	je     c00153d8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001539a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00153a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00153b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00153ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00153c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00153c4:	05 0c 01 00 00       	add    eax,0x10c
c00153c9:	83 ec 08             	sub    esp,0x8
c00153cc:	52                   	push   edx
c00153cd:	50                   	push   eax
c00153ce:	e8 6d b2 fe ff       	call   c0000640 <strcpy>
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	eb 64                	jmp    c001543c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c00153d8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00153e0:	83 ec 0c             	sub    esp,0xc
c00153e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00153e7:	e8 73 95 ff ff       	call   c000e95f <malloc>
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	89 c3                	mov    ebx,eax
c00153f1:	83 ec 08             	sub    esp,0x8
c00153f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00153f8:	53                   	push   ebx
c00153f9:	e8 66 c2 ff ff       	call   c0011664 <VgaText::VgaText(char const*)>
c00153fe:	83 c4 10             	add    esp,0x10
c0015401:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015405:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001540b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001540f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015415:	83 ec 0c             	sub    esp,0xc
c0015418:	50                   	push   eax
c0015419:	e8 e4 ba ff ff       	call   c0010f02 <addToTerminalCycle(VgaText*)>
c001541e:	83 c4 10             	add    esp,0x10
c0015421:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015425:	05 0c 01 00 00       	add    eax,0x10c
c001542a:	83 ec 08             	sub    esp,0x8
c001542d:	68 e0 34 02 c0       	push   0xc00234e0
c0015432:	50                   	push   eax
c0015433:	e8 08 b2 fe ff       	call   c0000640 <strcpy>
c0015438:	83 c4 10             	add    esp,0x10
c001543b:	90                   	nop
c001543c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015440:	83 c0 0c             	add    eax,0xc
c0015443:	83 ec 08             	sub    esp,0x8
c0015446:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001544a:	50                   	push   eax
c001544b:	e8 f0 b1 fe ff       	call   c0000640 <strcpy>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	83 ec 08             	sub    esp,0x8
c0015456:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001545a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001545e:	e8 c1 fb ff ff       	call   c0015024 <Process::addArgs(char**)>
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	90                   	nop
c0015467:	83 c4 24             	add    esp,0x24
c001546a:	5b                   	pop    ebx
c001546b:	5e                   	pop    esi
c001546c:	c3                   	ret    
c001546d:	8d 76 00             	lea    esi,[esi+0x0]

c0015470 <taskStartupFunction>:
c0015470:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015475:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015478:	c3                   	ret    
c0015479:	8d 76 00             	lea    esi,[esi+0x0]

c001547c <KeDisablePreemption()>:
c001547c:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c0015481:	85 c0                	test   eax,eax
c0015483:	75 13                	jne    c0015498 <KeDisablePreemption()+0x1c>
c0015485:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c001548b:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c0015492:	88 15 88 d6 02 c0    	mov    BYTE PTR ds:0xc002d688,dl
c0015498:	83 c0 01             	add    eax,0x1
c001549b:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00154a0:	c3                   	ret    
c00154a1:	8d 76 00             	lea    esi,[esi+0x0]

c00154a4 <KeRestorePreemption()>:
c00154a4:	a1 8c d6 02 c0       	mov    eax,ds:0xc002d68c
c00154a9:	83 e8 01             	sub    eax,0x1
c00154ac:	a3 8c d6 02 c0       	mov    ds:0xc002d68c,eax
c00154b1:	75 0d                	jne    c00154c0 <KeRestorePreemption()+0x1c>
c00154b3:	a0 88 d6 02 c0       	mov    al,ds:0xc002d688
c00154b8:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c00154bd:	8d 76 00             	lea    esi,[esi+0x0]
c00154c0:	c3                   	ret    
c00154c1:	90                   	nop
c00154c2:	66 90                	xchg   ax,ax

c00154c4 <Process::createThread(void (*)(void*), void*, int)>:
c00154c4:	57                   	push   edi
c00154c5:	31 c9                	xor    ecx,ecx
c00154c7:	56                   	push   esi
c00154c8:	53                   	push   ebx
c00154c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154cd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00154d4:	89 f2                	mov    edx,esi
c00154d6:	66 90                	xchg   ax,ax
c00154d8:	0f b7 c2             	movzx  eax,dx
c00154db:	80 e2 01             	and    dl,0x1
c00154de:	74 14                	je     c00154f4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00154e0:	d1 f8                	sar    eax,1
c00154e2:	83 c1 01             	add    ecx,0x1
c00154e5:	89 c2                	mov    edx,eax
c00154e7:	83 f9 10             	cmp    ecx,0x10
c00154ea:	75 ec                	jne    c00154d8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00154ec:	31 db                	xor    ebx,ebx
c00154ee:	89 d8                	mov    eax,ebx
c00154f0:	5b                   	pop    ebx
c00154f1:	5e                   	pop    esi
c00154f2:	5f                   	pop    edi
c00154f3:	c3                   	ret    
c00154f4:	b8 01 00 00 00       	mov    eax,0x1
c00154f9:	d3 e0                	shl    eax,cl
c00154fb:	09 c6                	or     esi,eax
c00154fd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015500:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015507:	01 c0                	add    eax,eax
c0015509:	01 c8                	add    eax,ecx
c001550b:	8d 04 80             	lea    eax,[eax+eax*4]
c001550e:	01 d8                	add    eax,ebx
c0015510:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015517:	75 0b                	jne    c0015524 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015519:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015523:	90                   	nop
c0015524:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015530:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015533:	01 c0                	add    eax,eax
c0015535:	01 c8                	add    eax,ecx
c0015537:	8d 3c 80             	lea    edi,[eax+eax*4]
c001553a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001553d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015543:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015549:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001554d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015553:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015559:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001555f:	89 ca                	mov    edx,ecx
c0015561:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015568:	f7 da                	neg    edx
c001556a:	c1 e2 15             	shl    edx,0x15
c001556d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015573:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001557d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015587:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001558d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015591:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015597:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00155a1:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00155ab:	68 00 01 00 00       	push   0x100
c00155b0:	e8 aa 93 ff ff       	call   c000e95f <malloc>
c00155b5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00155b8:	58                   	pop    eax
c00155b9:	5a                   	pop    edx
c00155ba:	53                   	push   ebx
c00155bb:	68 cc d6 02 c0       	push   0xc002d6cc
c00155c0:	e8 17 af 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155c5:	83 c4 10             	add    esp,0x10
c00155c8:	89 d8                	mov    eax,ebx
c00155ca:	5b                   	pop    ebx
c00155cb:	5e                   	pop    esi
c00155cc:	5f                   	pop    edi
c00155cd:	c3                   	ret    
c00155ce:	66 90                	xchg   ax,ax

c00155d0 <Process::createUserThread()>:
c00155d0:	83 ec 0c             	sub    esp,0xc
c00155d3:	68 80 00 00 00       	push   0x80
c00155d8:	6a 00                	push   0x0
c00155da:	68 18 4f 01 c0       	push   0xc0014f18
c00155df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155e3:	50                   	push   eax
c00155e4:	e8 db fe ff ff       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c00155e9:	83 c4 1c             	add    esp,0x1c
c00155ec:	c3                   	ret    
c00155ed:	8d 76 00             	lea    esi,[esi+0x0]

c00155f0 <setupMultitasking(void (*)())>:
c00155f0:	56                   	push   esi
c00155f1:	53                   	push   ebx
c00155f2:	83 ec 04             	sub    esp,0x4
c00155f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155f9:	eb 11                	jmp    c001560c <setupMultitasking(void (*)())+0x1c>
c00155fb:	90                   	nop
c00155fc:	83 ec 0c             	sub    esp,0xc
c00155ff:	68 cc d6 02 c0       	push   0xc002d6cc
c0015604:	e8 17 ae 00 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	68 cc d6 02 c0       	push   0xc002d6cc
c0015614:	e8 e3 ad 00 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015619:	83 c4 10             	add    esp,0x10
c001561c:	84 c0                	test   al,al
c001561e:	74 dc                	je     c00155fc <setupMultitasking(void (*)())+0xc>
c0015620:	83 ec 0c             	sub    esp,0xc
c0015623:	68 24 07 00 00       	push   0x724
c0015628:	e8 32 93 ff ff       	call   c000e95f <malloc>
c001562d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015634:	89 c3                	mov    ebx,eax
c0015636:	6a 00                	push   0x0
c0015638:	68 e4 34 02 c0       	push   0xc00234e4
c001563d:	6a 01                	push   0x1
c001563f:	50                   	push   eax
c0015640:	e8 57 fc ff ff       	call   c001529c <Process::Process(bool, char const*, Process*, char**)>
c0015645:	83 c4 14             	add    esp,0x14
c0015648:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001564e:	89 1d d8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d8,ebx
c0015654:	50                   	push   eax
c0015655:	e8 fd ba ff ff       	call   c0011157 <setActiveTerminal(VgaText*)>
c001565a:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015661:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001566b:	83 c8 01             	or     eax,0x1
c001566e:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015675:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001567b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001567e:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015688:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001568e:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015694:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001569e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00156a8:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00156b2:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00156b8:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00156c2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00156c8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00156d2:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00156d9:	e8 81 92 ff ff       	call   c000e95f <malloc>
c00156de:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c00156e4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00156ea:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00156f0:	5a                   	pop    edx
c00156f1:	59                   	pop    ecx
c00156f2:	68 e0 34 02 c0       	push   0xc00234e0
c00156f7:	50                   	push   eax
c00156f8:	e8 43 af fe ff       	call   c0000640 <strcpy>
c00156fd:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015704:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015708:	83 c4 14             	add    esp,0x14
c001570b:	5b                   	pop    ebx
c001570c:	5e                   	pop    esi
c001570d:	e9 57 ab fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015712:	66 90                	xchg   ax,ax

c0015714 <schedule()>:
c0015714:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c001571a:	85 d2                	test   edx,edx
c001571c:	74 0e                	je     c001572c <schedule()+0x18>
c001571e:	c7 05 a8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x1
c0015728:	c3                   	ret    
c0015729:	8d 76 00             	lea    esi,[esi+0x0]
c001572c:	53                   	push   ebx
c001572d:	83 ec 14             	sub    esp,0x14
c0015730:	68 cc d6 02 c0       	push   0xc002d6cc
c0015735:	e8 c2 ac 00 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	84 c0                	test   al,al
c001573f:	75 3f                	jne    c0015780 <schedule()+0x6c>
c0015741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015746:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015749:	83 fa 01             	cmp    edx,0x1
c001574c:	74 3a                	je     c0015788 <schedule()+0x74>
c001574e:	66 90                	xchg   ax,ax
c0015750:	83 ec 0c             	sub    esp,0xc
c0015753:	68 cc d6 02 c0       	push   0xc002d6cc
c0015758:	e8 bb ac 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001575d:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015764:	89 c3                	mov    ebx,eax
c0015766:	e8 b5 ac 00 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001576b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015775:	e8 fa f7 ff ff       	call   c0014f74 <switchToThread(ThreadControlBlock*)>
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8d 76 00             	lea    esi,[esi+0x0]
c0015780:	83 c4 08             	add    esp,0x8
c0015783:	5b                   	pop    ebx
c0015784:	c3                   	ret    
c0015785:	8d 76 00             	lea    esi,[esi+0x0]
c0015788:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001578f:	83 ec 08             	sub    esp,0x8
c0015792:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015797:	50                   	push   eax
c0015798:	68 cc d6 02 c0       	push   0xc002d6cc
c001579d:	e8 3a ad 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00157a2:	83 c4 10             	add    esp,0x10
c00157a5:	eb a9                	jmp    c0015750 <schedule()+0x3c>
c00157a7:	90                   	nop

c00157a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00157a8:	83 ec 0c             	sub    esp,0xc
c00157ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00157b7:	e8 58 ff ff ff       	call   c0015714 <schedule()>
c00157bc:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00157c4:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00157c9:	85 c0                	test   eax,eax
c00157cb:	75 03                	jne    c00157d0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c00157cd:	fb                   	sti    
c00157ce:	66 90                	xchg   ax,ax
c00157d0:	83 c4 0c             	add    esp,0xc
c00157d3:	c3                   	ret    

c00157d4 <blockTask(TaskState)>:
c00157d4:	53                   	push   ebx
c00157d5:	83 ec 10             	sub    esp,0x10
c00157d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00157dc:	fa                   	cli    
c00157dd:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00157e2:	53                   	push   ebx
c00157e3:	83 c0 01             	add    eax,0x1
c00157e6:	68 eb 34 02 c0       	push   0xc00234eb
c00157eb:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00157f0:	e8 6f 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00157f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157fa:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00157fd:	e8 12 ff ff ff       	call   c0015714 <schedule()>
c0015802:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c001580a:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015810:	83 c4 10             	add    esp,0x10
c0015813:	85 d2                	test   edx,edx
c0015815:	75 01                	jne    c0015818 <blockTask(TaskState)+0x44>
c0015817:	fb                   	sti    
c0015818:	83 c4 08             	add    esp,0x8
c001581b:	5b                   	pop    ebx
c001581c:	c3                   	ret    
c001581d:	8d 76 00             	lea    esi,[esi+0x0]

c0015820 <waitTask(int, int*, int)>:
c0015820:	83 ec 18             	sub    esp,0x18
c0015823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015828:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001582c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001582f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015838:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001583b:	6a 07                	push   0x7
c001583d:	e8 92 ff ff ff       	call   c00157d4 <blockTask(TaskState)>
c0015842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015847:	83 c4 10             	add    esp,0x10
c001584a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001584d:	85 d2                	test   edx,edx
c001584f:	74 0b                	je     c001585c <waitTask(int, int*, int)+0x3c>
c0015851:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015854:	89 02                	mov    DWORD PTR [edx],eax
c0015856:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001585b:	90                   	nop
c001585c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001585f:	83 c4 0c             	add    esp,0xc
c0015862:	c3                   	ret    
c0015863:	90                   	nop

c0015864 <milliTenthSleepUntil(unsigned int)>:
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001586b:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c0015871:	76 05                	jbe    c0015878 <milliTenthSleepUntil(unsigned int)+0x14>
c0015873:	90                   	nop
c0015874:	83 c4 0c             	add    esp,0xc
c0015877:	c3                   	ret    
c0015878:	fa                   	cli    
c0015879:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c001587f:	83 ec 08             	sub    esp,0x8
c0015882:	83 c1 01             	add    ecx,0x1
c0015885:	8b 15 ac d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6ac
c001588b:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015891:	83 c2 01             	add    edx,0x1
c0015894:	89 15 ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,edx
c001589a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158a0:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00158a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00158a9:	51                   	push   ecx
c00158aa:	68 c0 d6 02 c0       	push   0xc002d6c0
c00158af:	e8 28 ac 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158b4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00158bb:	e8 14 ff ff ff       	call   c00157d4 <blockTask(TaskState)>
c00158c0:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00158c5:	83 c4 10             	add    esp,0x10
c00158c8:	83 e8 01             	sub    eax,0x1
c00158cb:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c00158d0:	85 c0                	test   eax,eax
c00158d2:	75 0c                	jne    c00158e0 <milliTenthSleepUntil(unsigned int)+0x7c>
c00158d4:	8b 15 a8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a8
c00158da:	85 d2                	test   edx,edx
c00158dc:	75 1a                	jne    c00158f8 <milliTenthSleepUntil(unsigned int)+0x94>
c00158de:	66 90                	xchg   ax,ax
c00158e0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00158e8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00158ed:	85 c0                	test   eax,eax
c00158ef:	75 83                	jne    c0015874 <milliTenthSleepUntil(unsigned int)+0x10>
c00158f1:	fb                   	sti    
c00158f2:	83 c4 0c             	add    esp,0xc
c00158f5:	c3                   	ret    
c00158f6:	66 90                	xchg   ax,ax
c00158f8:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015902:	e8 0d fe ff ff       	call   c0015714 <schedule()>
c0015907:	eb d7                	jmp    c00158e0 <milliTenthSleepUntil(unsigned int)+0x7c>
c0015909:	8d 76 00             	lea    esi,[esi+0x0]

c001590c <milliTenthSleep(unsigned int)>:
c001590c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015910:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0015915:	01 c2                	add    edx,eax
c0015917:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001591b:	e9 44 ff ff ff       	jmp    c0015864 <milliTenthSleepUntil(unsigned int)>

c0015920 <sleep(unsigned int)>:
c0015920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015924:	8d 04 80             	lea    eax,[eax+eax*4]
c0015927:	8d 04 80             	lea    eax,[eax+eax*4]
c001592a:	8d 04 80             	lea    eax,[eax+eax*4]
c001592d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015930:	c1 e0 04             	shl    eax,0x4
c0015933:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015937:	eb d3                	jmp    c001590c <milliTenthSleep(unsigned int)>
c0015939:	8d 76 00             	lea    esi,[esi+0x0]

c001593c <taskReturned>:
c001593c:	83 ec 18             	sub    esp,0x18
c001593f:	68 88 35 02 c0       	push   0xc0023588
c0015944:	e8 5d 93 ff ff       	call   c000eca6 <KePanic(char const*)>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	83 ec 0c             	sub    esp,0xc
c001594f:	6a 02                	push   0x2
c0015951:	e8 7e fe ff ff       	call   c00157d4 <blockTask(TaskState)>
c0015956:	fa                   	cli    
c0015957:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001595c:	83 c0 01             	add    eax,0x1
c001595f:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015964:	e8 ab fd ff ff       	call   c0015714 <schedule()>
c0015969:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015971:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	85 d2                	test   edx,edx
c001597c:	75 ce                	jne    c001594c <taskReturned+0x10>
c001597e:	fb                   	sti    
c001597f:	eb cb                	jmp    c001594c <taskReturned+0x10>
c0015981:	8d 76 00             	lea    esi,[esi+0x0]

c0015984 <Thr::processFromPID(int)>:
c0015984:	57                   	push   edi
c0015985:	56                   	push   esi
c0015986:	53                   	push   ebx
c0015987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001598b:	fa                   	cli    
c001598c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015991:	83 ec 0c             	sub    esp,0xc
c0015994:	83 c0 01             	add    eax,0x1
c0015997:	68 cc d6 02 c0       	push   0xc002d6cc
c001599c:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c00159a1:	e8 72 aa 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	89 c7                	mov    edi,eax
c00159ab:	eb 17                	jmp    c00159c4 <Thr::processFromPID(int)+0x40>
c00159ad:	8d 76 00             	lea    esi,[esi+0x0]
c00159b0:	83 ec 0c             	sub    esp,0xc
c00159b3:	68 cc d6 02 c0       	push   0xc002d6cc
c00159b8:	e8 5b aa 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159bd:	83 c4 10             	add    esp,0x10
c00159c0:	39 f8                	cmp    eax,edi
c00159c2:	74 50                	je     c0015a14 <Thr::processFromPID(int)+0x90>
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	68 cc d6 02 c0       	push   0xc002d6cc
c00159cc:	e8 47 aa 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159d1:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c00159d8:	89 c3                	mov    ebx,eax
c00159da:	e8 41 aa 00 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159df:	59                   	pop    ecx
c00159e0:	58                   	pop    eax
c00159e1:	53                   	push   ebx
c00159e2:	68 cc d6 02 c0       	push   0xc002d6cc
c00159e7:	e8 f0 aa 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	39 30                	cmp    DWORD PTR [eax],esi
c00159f4:	75 ba                	jne    c00159b0 <Thr::processFromPID(int)+0x2c>
c00159f6:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00159fe:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015a04:	85 d2                	test   edx,edx
c0015a06:	74 08                	je     c0015a10 <Thr::processFromPID(int)+0x8c>
c0015a08:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a0b:	5b                   	pop    ebx
c0015a0c:	5e                   	pop    esi
c0015a0d:	5f                   	pop    edi
c0015a0e:	c3                   	ret    
c0015a0f:	90                   	nop
c0015a10:	fb                   	sti    
c0015a11:	eb f5                	jmp    c0015a08 <Thr::processFromPID(int)+0x84>
c0015a13:	90                   	nop
c0015a14:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015a1c:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015a21:	85 c0                	test   eax,eax
c0015a23:	75 07                	jne    c0015a2c <Thr::processFromPID(int)+0xa8>
c0015a25:	fb                   	sti    
c0015a26:	31 c0                	xor    eax,eax
c0015a28:	5b                   	pop    ebx
c0015a29:	5e                   	pop    esi
c0015a2a:	5f                   	pop    edi
c0015a2b:	c3                   	ret    
c0015a2c:	5b                   	pop    ebx
c0015a2d:	31 c0                	xor    eax,eax
c0015a2f:	5e                   	pop    esi
c0015a30:	5f                   	pop    edi
c0015a31:	c3                   	ret    
c0015a32:	66 90                	xchg   ax,ax

c0015a34 <unblockTask(ThreadControlBlock*)>:
c0015a34:	53                   	push   ebx
c0015a35:	83 ec 08             	sub    esp,0x8
c0015a38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a3c:	fa                   	cli    
c0015a3d:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015a43:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a46:	83 c2 01             	add    edx,0x1
c0015a49:	85 c0                	test   eax,eax
c0015a4b:	89 15 b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,edx
c0015a51:	74 6d                	je     c0015ac0 <unblockTask(ThreadControlBlock*)+0x8c>
c0015a53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015a56:	83 f8 01             	cmp    eax,0x1
c0015a59:	74 39                	je     c0015a94 <unblockTask(ThreadControlBlock*)+0x60>
c0015a5b:	83 ec 0c             	sub    esp,0xc
c0015a5e:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a63:	e8 b0 a9 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a68:	83 c4 10             	add    esp,0x10
c0015a6b:	85 c0                	test   eax,eax
c0015a6d:	75 1d                	jne    c0015a8c <unblockTask(ThreadControlBlock*)+0x58>
c0015a6f:	eb 63                	jmp    c0015ad4 <unblockTask(ThreadControlBlock*)+0xa0>
c0015a71:	8d 76 00             	lea    esi,[esi+0x0]
c0015a74:	83 ec 08             	sub    esp,0x8
c0015a77:	50                   	push   eax
c0015a78:	68 cc d6 02 c0       	push   0xc002d6cc
c0015a7d:	e8 a2 ae 00 00       	call   c0020924 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	85 c0                	test   eax,eax
c0015a87:	74 4b                	je     c0015ad4 <unblockTask(ThreadControlBlock*)+0xa0>
c0015a89:	8d 76 00             	lea    esi,[esi+0x0]
c0015a8c:	39 c3                	cmp    ebx,eax
c0015a8e:	75 e4                	jne    c0015a74 <unblockTask(ThreadControlBlock*)+0x40>
c0015a90:	eb 12                	jmp    c0015aa4 <unblockTask(ThreadControlBlock*)+0x70>
c0015a92:	66 90                	xchg   ax,ax
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	68 14 35 02 c0       	push   0xc0023514
c0015a9c:	e8 c3 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015aac:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ab1:	85 c0                	test   eax,eax
c0015ab3:	75 03                	jne    c0015ab8 <unblockTask(ThreadControlBlock*)+0x84>
c0015ab5:	fb                   	sti    
c0015ab6:	66 90                	xchg   ax,ax
c0015ab8:	83 c4 08             	add    esp,0x8
c0015abb:	5b                   	pop    ebx
c0015abc:	c3                   	ret    
c0015abd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac0:	83 ec 0c             	sub    esp,0xc
c0015ac3:	68 fd 34 02 c0       	push   0xc00234fd
c0015ac8:	e8 97 14 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015acd:	83 c4 10             	add    esp,0x10
c0015ad0:	eb d2                	jmp    c0015aa4 <unblockTask(ThreadControlBlock*)+0x70>
c0015ad2:	66 90                	xchg   ax,ax
c0015ad4:	83 ec 08             	sub    esp,0x8
c0015ad7:	53                   	push   ebx
c0015ad8:	68 cc d6 02 c0       	push   0xc002d6cc
c0015add:	e8 fa a9 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015ae2:	83 c4 10             	add    esp,0x10
c0015ae5:	eb bd                	jmp    c0015aa4 <unblockTask(ThreadControlBlock*)+0x70>
c0015ae7:	90                   	nop

c0015ae8 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015ae8:	55                   	push   ebp
c0015ae9:	57                   	push   edi
c0015aea:	56                   	push   esi
c0015aeb:	53                   	push   ebx
c0015aec:	83 ec 1c             	sub    esp,0x1c
c0015aef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015af3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015af6:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015afc:	85 ed                	test   ebp,ebp
c0015afe:	7e 28                	jle    c0015b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015b00:	31 f6                	xor    esi,esi
c0015b02:	66 90                	xchg   ax,ax
c0015b04:	83 ec 0c             	sub    esp,0xc
c0015b07:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015b0e:	83 c6 01             	add    esi,0x1
c0015b11:	57                   	push   edi
c0015b12:	e8 58 8e ff ff       	call   c000e96f <free>
c0015b17:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b1a:	83 c4 10             	add    esp,0x10
c0015b1d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015b23:	7f df                	jg     c0015b04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015b25:	8d 76 00             	lea    esi,[esi+0x0]
c0015b28:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015b32:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015b37:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015b3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015b3d:	d3 c0                	rol    eax,cl
c0015b3f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015b46:	21 c8                	and    eax,ecx
c0015b48:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015b4f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b52:	89 f7                	mov    edi,esi
c0015b54:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015b5c:	0f 85 72 01 00 00    	jne    c0015cd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015b62:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015b68:	85 ed                	test   ebp,ebp
c0015b6a:	74 1c                	je     c0015b88 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	55                   	push   ebp
c0015b70:	e8 6b 7f ff ff       	call   c000dae0 <EnvVarContainer::~EnvVarContainer()>
c0015b75:	59                   	pop    ecx
c0015b76:	5e                   	pop    esi
c0015b77:	6a 0c                	push   0xc
c0015b79:	55                   	push   ebp
c0015b7a:	e8 45 6b ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0015b7f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b82:	83 c4 10             	add    esp,0x10
c0015b85:	89 f7                	mov    edi,esi
c0015b87:	90                   	nop
c0015b88:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015b8e:	85 c0                	test   eax,eax
c0015b90:	0f 84 b2 00 00 00    	je     c0015c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015b96:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015b99:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015b9d:	31 c9                	xor    ecx,ecx
c0015b9f:	eb 17                	jmp    c0015bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba4:	83 c1 01             	add    ecx,0x1
c0015ba7:	83 f9 10             	cmp    ecx,0x10
c0015baa:	0f 84 98 00 00 00    	je     c0015c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015bb0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015bb6:	66 90                	xchg   ax,ax
c0015bb8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015bbf:	d3 fa                	sar    edx,cl
c0015bc1:	80 e2 01             	and    dl,0x1
c0015bc4:	74 de                	je     c0015ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015bc6:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015bc9:	01 d2                	add    edx,edx
c0015bcb:	01 ca                	add    edx,ecx
c0015bcd:	8d 14 92             	lea    edx,[edx+edx*4]
c0015bd0:	01 d0                	add    eax,edx
c0015bd2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015bd8:	83 fd 07             	cmp    ebp,0x7
c0015bdb:	75 c7                	jne    c0015ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015bdd:	05 40 02 00 00       	add    eax,0x240
c0015be2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015be5:	83 fd ff             	cmp    ebp,0xffffffff
c0015be8:	0f 8c ee 00 00 00    	jl     c0015cdc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015bee:	0f 84 ac 01 00 00    	je     c0015da0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015bf4:	85 ed                	test   ebp,ebp
c0015bf6:	0f 84 90 01 00 00    	je     c0015d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015bfc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015bfe:	75 a4                	jne    c0015ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015c00:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015c06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c0a:	01 d0                	add    eax,edx
c0015c0c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015c19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c1c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015c22:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015c29:	50                   	push   eax
c0015c2a:	e8 05 fe ff ff       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015c35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015c39:	89 f7                	mov    edi,esi
c0015c3b:	83 c1 01             	add    ecx,0x1
c0015c3e:	83 f9 10             	cmp    ecx,0x10
c0015c41:	0f 85 69 ff ff ff    	jne    c0015bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015c47:	90                   	nop
c0015c48:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015c4e:	85 c0                	test   eax,eax
c0015c50:	74 62                	je     c0015cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015c52:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015c58:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015c5e:	74 54                	je     c0015cb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015c60:	83 ec 0c             	sub    esp,0xc
c0015c63:	68 cc d6 02 c0       	push   0xc002d6cc
c0015c68:	e8 ab a7 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c6d:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015c74:	89 c7                	mov    edi,eax
c0015c76:	e8 81 a7 00 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	84 c0                	test   al,al
c0015c80:	0f 84 ce 00 00 00    	je     c0015d54 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015c86:	66 90                	xchg   ax,ax
c0015c88:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c8b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015c91:	85 d2                	test   edx,edx
c0015c93:	74 0f                	je     c0015ca4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015c95:	83 ec 0c             	sub    esp,0xc
c0015c98:	8b 02                	mov    eax,DWORD PTR [edx]
c0015c9a:	52                   	push   edx
c0015c9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c9e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ca1:	83 c4 10             	add    esp,0x10
c0015ca4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015cae:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015cb4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015cba:	85 db                	test   ebx,ebx
c0015cbc:	74 16                	je     c0015cd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015cbe:	83 ec 0c             	sub    esp,0xc
c0015cc1:	53                   	push   ebx
c0015cc2:	e8 8d c9 ff ff       	call   c0012654 <VAS::~VAS()>
c0015cc7:	58                   	pop    eax
c0015cc8:	5a                   	pop    edx
c0015cc9:	6a 14                	push   0x14
c0015ccb:	53                   	push   ebx
c0015ccc:	e8 f3 69 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	83 c4 1c             	add    esp,0x1c
c0015cd7:	5b                   	pop    ebx
c0015cd8:	5e                   	pop    esi
c0015cd9:	5f                   	pop    edi
c0015cda:	5d                   	pop    ebp
c0015cdb:	c3                   	ret    
c0015cdc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015ce0:	83 ec 0c             	sub    esp,0xc
c0015ce3:	68 bc 35 02 c0       	push   0xc00235bc
c0015ce8:	e8 b9 8f ff ff       	call   c000eca6 <KePanic(char const*)>
c0015ced:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015cf0:	83 c4 10             	add    esp,0x10
c0015cf3:	89 f7                	mov    edi,esi
c0015cf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cf9:	e9 a6 fe ff ff       	jmp    c0015ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015cfe:	66 90                	xchg   ax,ax
c0015d00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d06:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015d0c:	75 1e                	jne    c0015d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	68 24 36 02 c0       	push   0xc0023624
c0015d16:	e8 49 12 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015d1b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015d22:	e8 ad fa ff ff       	call   c00157d4 <blockTask(TaskState)>
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	66 90                	xchg   ax,ax
c0015d2c:	83 ec 08             	sub    esp,0x8
c0015d2f:	56                   	push   esi
c0015d30:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d35:	e8 a2 a7 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d3a:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d41:	e8 d2 a6 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	39 f8                	cmp    eax,edi
c0015d4b:	0f 84 37 ff ff ff    	je     c0015c88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015d51:	8d 76 00             	lea    esi,[esi+0x0]
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	68 cc d6 02 c0       	push   0xc002d6cc
c0015d5c:	e8 b7 a6 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015d61:	c7 04 24 cc d6 02 c0 	mov    DWORD PTR [esp],0xc002d6cc
c0015d68:	89 c6                	mov    esi,eax
c0015d6a:	e8 b1 a6 00 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	39 f3                	cmp    ebx,esi
c0015d74:	74 b6                	je     c0015d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d76:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015d79:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015d7c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015d82:	75 a8                	jne    c0015d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015d84:	e9 77 ff ff ff       	jmp    c0015d00 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015d89:	8d 76 00             	lea    esi,[esi+0x0]
c0015d8c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015d90:	83 ec 0c             	sub    esp,0xc
c0015d93:	68 f0 35 02 c0       	push   0xc00235f0
c0015d98:	e9 4b ff ff ff       	jmp    c0015ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015da0:	8b 36                	mov    esi,DWORD PTR [esi]
c0015da2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015da6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015da9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015dac:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015db2:	01 d7                	add    edi,edx
c0015db4:	89 f8                	mov    eax,edi
c0015db6:	e9 51 fe ff ff       	jmp    c0015c0c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015dbb:	90                   	nop

c0015dbc <cleanerTaskFunction(void*)>:
c0015dbc:	53                   	push   ebx
c0015dbd:	83 ec 08             	sub    esp,0x8
c0015dc0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015dc8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015dcd:	85 c0                	test   eax,eax
c0015dcf:	75 03                	jne    c0015dd4 <cleanerTaskFunction(void*)+0x18>
c0015dd1:	fb                   	sti    
c0015dd2:	66 90                	xchg   ax,ax
c0015dd4:	fa                   	cli    
c0015dd5:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015dda:	83 c0 01             	add    eax,0x1
c0015ddd:	80 3d 94 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d694,0x0
c0015de4:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015de9:	0f 85 c9 00 00 00    	jne    c0015eb8 <cleanerTaskFunction(void*)+0xfc>
c0015def:	83 ec 0c             	sub    esp,0xc
c0015df2:	6a 02                	push   0x2
c0015df4:	e8 af f9 ff ff       	call   c00157a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015df9:	83 c4 10             	add    esp,0x10
c0015dfc:	c6 05 94 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d694,0x0
c0015e03:	fa                   	cli    
c0015e04:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015e0a:	8b 1d ac d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6ac
c0015e10:	83 c1 01             	add    ecx,0x1
c0015e13:	83 c3 01             	add    ebx,0x1
c0015e16:	89 0d b0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6b0,ecx
c0015e1c:	89 1d ac d6 02 c0    	mov    DWORD PTR ds:0xc002d6ac,ebx
c0015e22:	fa                   	cli    
c0015e23:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015e28:	83 c0 01             	add    eax,0x1
c0015e2b:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015e30:	eb 2a                	jmp    c0015e5c <cleanerTaskFunction(void*)+0xa0>
c0015e32:	66 90                	xchg   ax,ax
c0015e34:	83 ec 0c             	sub    esp,0xc
c0015e37:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015e3c:	e8 d7 a5 00 00       	call   c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e41:	c7 04 24 b4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6b4
c0015e48:	89 c3                	mov    ebx,eax
c0015e4a:	e8 d1 a5 00 00       	call   c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e52:	e8 91 fc ff ff       	call   c0015ae8 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015e57:	83 c4 10             	add    esp,0x10
c0015e5a:	66 90                	xchg   ax,ax
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015e64:	e8 93 a5 00 00       	call   c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	84 c0                	test   al,al
c0015e6e:	74 c4                	je     c0015e34 <cleanerTaskFunction(void*)+0x78>
c0015e70:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015e78:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015e7e:	85 d2                	test   edx,edx
c0015e80:	75 02                	jne    c0015e84 <cleanerTaskFunction(void*)+0xc8>
c0015e82:	fb                   	sti    
c0015e83:	90                   	nop
c0015e84:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015e89:	83 e8 01             	sub    eax,0x1
c0015e8c:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015e91:	0f 85 29 ff ff ff    	jne    c0015dc0 <cleanerTaskFunction(void*)+0x4>
c0015e97:	a1 a8 d6 02 c0       	mov    eax,ds:0xc002d6a8
c0015e9c:	85 c0                	test   eax,eax
c0015e9e:	0f 84 1c ff ff ff    	je     c0015dc0 <cleanerTaskFunction(void*)+0x4>
c0015ea4:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015eae:	e8 61 f8 ff ff       	call   c0015714 <schedule()>
c0015eb3:	e9 08 ff ff ff       	jmp    c0015dc0 <cleanerTaskFunction(void*)+0x4>
c0015eb8:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015ec0:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ec5:	85 c0                	test   eax,eax
c0015ec7:	0f 85 2f ff ff ff    	jne    c0015dfc <cleanerTaskFunction(void*)+0x40>
c0015ecd:	fb                   	sti    
c0015ece:	e9 29 ff ff ff       	jmp    c0015dfc <cleanerTaskFunction(void*)+0x40>
c0015ed3:	90                   	nop

c0015ed4 <terminateTask(int)>:
c0015ed4:	83 ec 18             	sub    esp,0x18
c0015ed7:	68 2b 35 02 c0       	push   0xc002352b
c0015edc:	e8 83 10 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015ee1:	fa                   	cli    
c0015ee2:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015ee7:	83 c0 01             	add    eax,0x1
c0015eea:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015eef:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015ef4:	83 c0 01             	add    eax,0x1
c0015ef7:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015efc:	fa                   	cli    
c0015efd:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015f02:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f06:	83 c0 01             	add    eax,0x1
c0015f09:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015f0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f13:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015f16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f1b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f1e:	5a                   	pop    edx
c0015f1f:	59                   	pop    ecx
c0015f20:	50                   	push   eax
c0015f21:	68 b4 d6 02 c0       	push   0xc002d6b4
c0015f26:	e8 b1 a5 00 00       	call   c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f30:	83 c4 10             	add    esp,0x10
c0015f33:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015f3a:	a1 90 d6 02 c0       	mov    eax,ds:0xc002d690
c0015f3f:	85 c0                	test   eax,eax
c0015f41:	0f 84 81 00 00 00    	je     c0015fc8 <terminateTask(int)+0xf4>
c0015f47:	83 ec 0c             	sub    esp,0xc
c0015f4a:	c6 05 94 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d694,0x1
c0015f51:	50                   	push   eax
c0015f52:	e8 dd fa ff ff       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	66 90                	xchg   ax,ax
c0015f5c:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015f64:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015f69:	85 c0                	test   eax,eax
c0015f6b:	75 03                	jne    c0015f70 <terminateTask(int)+0x9c>
c0015f6d:	fb                   	sti    
c0015f6e:	66 90                	xchg   ax,ax
c0015f70:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015f75:	83 e8 01             	sub    eax,0x1
c0015f78:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0015f7d:	75 09                	jne    c0015f88 <terminateTask(int)+0xb4>
c0015f7f:	83 3d a8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6a8,0x0
c0015f86:	75 54                	jne    c0015fdc <terminateTask(int)+0x108>
c0015f88:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015f90:	8b 0d b0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6b0
c0015f96:	85 c9                	test   ecx,ecx
c0015f98:	75 06                	jne    c0015fa0 <terminateTask(int)+0xcc>
c0015f9a:	66 90                	xchg   ax,ax
c0015f9c:	fb                   	sti    
c0015f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0015fa0:	fa                   	cli    
c0015fa1:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0015fa6:	83 c0 01             	add    eax,0x1
c0015fa9:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0015fae:	e8 61 f7 ff ff       	call   c0015714 <schedule()>
c0015fb3:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c0015fbb:	8b 15 b0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6b0
c0015fc1:	85 d2                	test   edx,edx
c0015fc3:	75 db                	jne    c0015fa0 <terminateTask(int)+0xcc>
c0015fc5:	eb d5                	jmp    c0015f9c <terminateTask(int)+0xc8>
c0015fc7:	90                   	nop
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 3e 35 02 c0       	push   0xc002353e
c0015fd0:	e8 8f 0f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	eb 82                	jmp    c0015f5c <terminateTask(int)+0x88>
c0015fda:	66 90                	xchg   ax,ax
c0015fdc:	c7 05 a8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6a8,0x0
c0015fe6:	e8 29 f7 ff ff       	call   c0015714 <schedule()>
c0015feb:	eb 9b                	jmp    c0015f88 <terminateTask(int)+0xb4>
c0015fed:	8d 76 00             	lea    esi,[esi+0x0]

c0015ff0 <Thr::terminateFromIRQ(int)>:
c0015ff0:	83 ec 18             	sub    esp,0x18
c0015ff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ff7:	50                   	push   eax
c0015ff8:	e8 d7 fe ff ff       	call   c0015ed4 <terminateTask(int)>
c0015ffd:	8d 76 00             	lea    esi,[esi+0x0]

c0016000 <__static_initialization_and_destruction_0(int, int)>:
c0016000:	83 ec 0c             	sub    esp,0xc
c0016003:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016008:	0f 85 8e 00 00 00    	jne    c001609c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001600e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016016:	0f 85 80 00 00 00    	jne    c001609c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001601c:	83 ec 0c             	sub    esp,0xc
c001601f:	68 cc d6 02 c0       	push   0xc002d6cc
c0016024:	e8 53 a9 00 00       	call   c002097c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016029:	83 c4 10             	add    esp,0x10
c001602c:	83 ec 04             	sub    esp,0x4
c001602f:	68 40 46 02 c0       	push   0xc0024640
c0016034:	68 cc d6 02 c0       	push   0xc002d6cc
c0016039:	68 2c 09 02 c0       	push   0xc002092c
c001603e:	e8 31 66 ff ff       	call   c000c674 <__cxa_atexit>
c0016043:	83 c4 10             	add    esp,0x10
c0016046:	83 ec 0c             	sub    esp,0xc
c0016049:	68 c0 d6 02 c0       	push   0xc002d6c0
c001604e:	e8 29 a9 00 00       	call   c002097c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	83 ec 04             	sub    esp,0x4
c0016059:	68 40 46 02 c0       	push   0xc0024640
c001605e:	68 c0 d6 02 c0       	push   0xc002d6c0
c0016063:	68 2c 09 02 c0       	push   0xc002092c
c0016068:	e8 07 66 ff ff       	call   c000c674 <__cxa_atexit>
c001606d:	83 c4 10             	add    esp,0x10
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	68 b4 d6 02 c0       	push   0xc002d6b4
c0016078:	e8 ff a8 00 00       	call   c002097c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	83 ec 04             	sub    esp,0x4
c0016083:	68 40 46 02 c0       	push   0xc0024640
c0016088:	68 b4 d6 02 c0       	push   0xc002d6b4
c001608d:	68 2c 09 02 c0       	push   0xc002092c
c0016092:	e8 dd 65 ff ff       	call   c000c674 <__cxa_atexit>
c0016097:	83 c4 10             	add    esp,0x10
c001609a:	66 90                	xchg   ax,ax
c001609c:	90                   	nop
c001609d:	83 c4 0c             	add    esp,0xc
c00160a0:	c3                   	ret    
c00160a1:	8d 76 00             	lea    esi,[esi+0x0]

c00160a4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	83 ec 08             	sub    esp,0x8
c00160aa:	68 ff ff 00 00       	push   0xffff
c00160af:	6a 01                	push   0x1
c00160b1:	e8 4a ff ff ff       	call   c0016000 <__static_initialization_and_destruction_0(int, int)>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	83 c4 0c             	add    esp,0xc
c00160bc:	c3                   	ret    

c00160bd <Vm::inbv(unsigned short)>:
c00160bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160c1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160c6:	75 06                	jne    c00160ce <Vm::inbv(unsigned short)+0x11>
c00160c8:	a0 10 d7 02 c0       	mov    al,ds:0xc002d710
c00160cd:	c3                   	ret    
c00160ce:	ec                   	in     al,dx
c00160cf:	c3                   	ret    

c00160d0 <Vm::outbv(unsigned short, unsigned char)>:
c00160d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160d8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00160dd:	75 25                	jne    c0016104 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00160df:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c00160e5:	8d 51 01             	lea    edx,[ecx+0x1]
c00160e8:	88 81 20 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28e0],al
c00160ee:	89 15 10 d7 02 c0    	mov    DWORD PTR ds:0xc002d710,edx
c00160f4:	83 fa 20             	cmp    edx,0x20
c00160f7:	75 0c                	jne    c0016105 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00160f9:	c7 05 10 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x1f
c0016103:	c3                   	ret    
c0016104:	ee                   	out    dx,al
c0016105:	c3                   	ret    

c0016106 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016106:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001610b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016110:	c1 e0 04             	shl    eax,0x4
c0016113:	01 d0                	add    eax,edx
c0016115:	c3                   	ret    

c0016116 <Vm::getSegment(unsigned int)>:
c0016116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001611a:	c1 e8 10             	shr    eax,0x10
c001611d:	c3                   	ret    

c001611e <Vm::getOffset(unsigned int)>:
c001611e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016122:	c3                   	ret    

c0016123 <Vm::mainloop2()>:
c0016123:	83 ec 18             	sub    esp,0x18
c0016126:	fa                   	cli    
c0016127:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001612d:	6a 02                	push   0x2
c001612f:	c6 05 09 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d709,0x1
c0016136:	e8 6d f6 ff ff       	call   c00157a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001613b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016140:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016144:	52                   	push   edx
c0016145:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016149:	52                   	push   edx
c001614a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001614e:	52                   	push   edx
c001614f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016153:	50                   	push   eax
c0016154:	e8 b6 a0 fe ff       	call   c000020f <goToVM86>
c0016159:	83 c4 2c             	add    esp,0x2c
c001615c:	c3                   	ret    

c001615d <Vm::mainVm8086Loop(void*)>:
c001615d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016164:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001616b:	75 01                	jne    c001616e <Vm::mainVm8086Loop(void*)+0x11>
c001616d:	fb                   	sti    
c001616e:	eb b3                	jmp    c0016123 <Vm::mainloop2()>

c0016170 <Vm::mainloop3(unsigned long)>:
c0016170:	83 ec 18             	sub    esp,0x18
c0016173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016177:	fa                   	cli    
c0016178:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001617e:	6a 02                	push   0x2
c0016180:	c6 05 08 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d708,0x1
c0016187:	a3 04 d7 02 c0       	mov    ds:0xc002d704,eax
c001618c:	e8 17 f6 ff ff       	call   c00157a8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016191:	83 c4 1c             	add    esp,0x1c
c0016194:	eb 8d                	jmp    c0016123 <Vm::mainloop2()>

c0016196 <Vm::initialise8086()>:
c0016196:	83 ec 0c             	sub    esp,0xc
c0016199:	68 80 00 00 00       	push   0x80
c001619e:	6a 00                	push   0x0
c00161a0:	68 5d 61 01 c0       	push   0xc001615d
c00161a5:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00161ab:	e8 14 f3 ff ff       	call   c00154c4 <Process::createThread(void (*)(void*), void*, int)>
c00161b0:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00161b7:	a3 0c d7 02 c0       	mov    ds:0xc002d70c,eax
c00161bc:	68 10 01 00 00       	push   0x110
c00161c1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00161c6:	6a 00                	push   0x0
c00161c8:	6a 00                	push   0x0
c00161ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00161d0:	e8 d1 c7 ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161d5:	83 c4 2c             	add    esp,0x2c
c00161d8:	c3                   	ret    

c00161d9 <Vm::resetConventionalMemory8086()>:
c00161d9:	c3                   	ret    

c00161da <Vm::finish8086()>:
c00161da:	53                   	push   ebx
c00161db:	83 ec 08             	sub    esp,0x8
c00161de:	fa                   	cli    
c00161df:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00161e5:	80 3d 08 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d708,0x0
c00161ec:	75 18                	jne    c0016206 <Vm::finish8086()+0x2c>
c00161ee:	e8 21 f5 ff ff       	call   c0015714 <schedule()>
c00161f3:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00161fa:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016201:	75 db                	jne    c00161de <Vm::finish8086()+0x4>
c0016203:	fb                   	sti    
c0016204:	eb d8                	jmp    c00161de <Vm::finish8086()+0x4>
c0016206:	83 ec 0c             	sub    esp,0xc
c0016209:	8b 1d 04 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d704
c001620f:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c0016215:	c6 05 08 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d708,0x0
c001621c:	e8 13 f8 ff ff       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c0016221:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016232:	75 01                	jne    c0016235 <Vm::finish8086()+0x5b>
c0016234:	fb                   	sti    
c0016235:	89 d8                	mov    eax,ebx
c0016237:	83 c4 08             	add    esp,0x8
c001623a:	5b                   	pop    ebx
c001623b:	c3                   	ret    

c001623c <Vm::getOutput8086(unsigned char*)>:
c001623c:	57                   	push   edi
c001623d:	8b 0d 10 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d710
c0016243:	56                   	push   esi
c0016244:	be 20 d7 02 c0       	mov    esi,0xc002d720
c0016249:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001624d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001624f:	a1 10 d7 02 c0       	mov    eax,ds:0xc002d710
c0016254:	5e                   	pop    esi
c0016255:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c001625f:	5f                   	pop    edi
c0016260:	c3                   	ret    

c0016261 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016261:	55                   	push   ebp
c0016262:	57                   	push   edi
c0016263:	56                   	push   esi
c0016264:	53                   	push   ebx
c0016265:	83 ec 2c             	sub    esp,0x2c
c0016268:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001626c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016270:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016274:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016278:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001627c:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c0016283:	75 5d                	jne    c00162e2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	68 14 01 00 00       	push   0x114
c001628d:	e8 cd 86 ff ff       	call   c000e95f <malloc>
c0016292:	83 c4 0c             	add    esp,0xc
c0016295:	89 c7                	mov    edi,eax
c0016297:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001629d:	68 4c 36 02 c0       	push   0xc002364c
c00162a2:	50                   	push   eax
c00162a3:	e8 8a 1e ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00162a8:	58                   	pop    eax
c00162a9:	5a                   	pop    edx
c00162aa:	6a 12                	push   0x12
c00162ac:	57                   	push   edi
c00162ad:	e8 9e 1e ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00162b2:	59                   	pop    ecx
c00162b3:	8b 07                	mov    eax,DWORD PTR [edi]
c00162b5:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00162b9:	51                   	push   ecx
c00162ba:	6a 00                	push   0x0
c00162bc:	6a 00                	push   0x0
c00162be:	68 00 00 11 00       	push   0x110000
c00162c3:	57                   	push   edi
c00162c4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00162c7:	83 c4 14             	add    esp,0x14
c00162ca:	57                   	push   edi
c00162cb:	e8 de 1e ff ff       	call   c00081ae <File::close()>
c00162d0:	8b 07                	mov    eax,DWORD PTR [edi]
c00162d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162d8:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	fa                   	cli    
c00162e3:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c00162e9:	80 3d 09 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d709,0x0
c00162f0:	75 18                	jne    c001630a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c00162f2:	e8 1d f4 ff ff       	call   c0015714 <schedule()>
c00162f7:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00162fe:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016305:	75 db                	jne    c00162e2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016307:	fb                   	sti    
c0016308:	eb d8                	jmp    c00162e2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001630a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001630e:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016313:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c001631d:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016321:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016325:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016329:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001632d:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016331:	0f b7 f6             	movzx  esi,si
c0016334:	0f b7 db             	movzx  ebx,bx
c0016337:	50                   	push   eax
c0016338:	6a 20                	push   0x20
c001633a:	6a 00                	push   0x0
c001633c:	68 20 d7 02 c0       	push   0xc002d720
c0016341:	e8 aa a1 fe ff       	call   c00004f0 <memset>
c0016346:	5a                   	pop    edx
c0016347:	59                   	pop    ecx
c0016348:	56                   	push   esi
c0016349:	53                   	push   ebx
c001634a:	e8 b7 fd ff ff       	call   c0016106 <Vm::realToLinear(unsigned short, unsigned short)>
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	89 c7                	mov    edi,eax
c0016354:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016358:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001635c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001635e:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c0016365:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001636c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016373:	75 01                	jne    c0016376 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016375:	fb                   	sti    
c0016376:	83 ec 0c             	sub    esp,0xc
c0016379:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c001637f:	e8 b0 f6 ff ff       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c0016384:	83 c4 3c             	add    esp,0x3c
c0016387:	b0 01                	mov    al,0x1
c0016389:	5b                   	pop    ebx
c001638a:	5e                   	pop    esi
c001638b:	5f                   	pop    edi
c001638c:	5d                   	pop    ebp
c001638d:	c3                   	ret    

c001638e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001638e:	55                   	push   ebp
c001638f:	57                   	push   edi
c0016390:	56                   	push   esi
c0016391:	53                   	push   ebx
c0016392:	83 ec 2c             	sub    esp,0x2c
c0016395:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016399:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001639d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00163a1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00163a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163a9:	80 3d 00 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d700,0x0
c00163b0:	75 5d                	jne    c001640f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00163b2:	83 ec 0c             	sub    esp,0xc
c00163b5:	68 14 01 00 00       	push   0x114
c00163ba:	e8 a0 85 ff ff       	call   c000e95f <malloc>
c00163bf:	83 c4 0c             	add    esp,0xc
c00163c2:	89 c6                	mov    esi,eax
c00163c4:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c00163ca:	68 4c 36 02 c0       	push   0xc002364c
c00163cf:	50                   	push   eax
c00163d0:	e8 5d 1d ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00163d5:	58                   	pop    eax
c00163d6:	5a                   	pop    edx
c00163d7:	6a 12                	push   0x12
c00163d9:	56                   	push   esi
c00163da:	e8 71 1d ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00163df:	59                   	pop    ecx
c00163e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00163e2:	8d 54 24 24          	lea    edx,[esp+0x24]
c00163e6:	52                   	push   edx
c00163e7:	6a 00                	push   0x0
c00163e9:	6a 00                	push   0x0
c00163eb:	68 00 00 11 00       	push   0x110000
c00163f0:	56                   	push   esi
c00163f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00163f4:	83 c4 14             	add    esp,0x14
c00163f7:	56                   	push   esi
c00163f8:	e8 b1 1d ff ff       	call   c00081ae <File::close()>
c00163fd:	8b 06                	mov    eax,DWORD PTR [esi]
c00163ff:	89 34 24             	mov    DWORD PTR [esp],esi
c0016402:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016405:	c6 05 00 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d700,0x1
c001640c:	83 c4 10             	add    esp,0x10
c001640f:	50                   	push   eax
c0016410:	50                   	push   eax
c0016411:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016415:	68 67 36 02 c0       	push   0xc0023667
c001641a:	e8 45 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001641f:	83 c4 10             	add    esp,0x10
c0016422:	fa                   	cli    
c0016423:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0016429:	0f b6 35 09 d7 02 c0 	movzx  esi,BYTE PTR ds:0xc002d709
c0016430:	89 f0                	mov    eax,esi
c0016432:	84 c0                	test   al,al
c0016434:	75 18                	jne    c001644e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0016436:	e8 d9 f2 ff ff       	call   c0015714 <schedule()>
c001643b:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016442:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016449:	75 d7                	jne    c0016422 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001644b:	fb                   	sti    
c001644c:	eb d4                	jmp    c0016422 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c001644e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016452:	a1 0c d7 02 c0       	mov    eax,ds:0xc002d70c
c0016457:	c7 05 10 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d710,0x0
c0016461:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c0016465:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0016469:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001646d:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0016471:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016475:	50                   	push   eax
c0016476:	6a 20                	push   0x20
c0016478:	6a 00                	push   0x0
c001647a:	68 20 d7 02 c0       	push   0xc002d720
c001647f:	e8 6c a0 fe ff       	call   c00004f0 <memset>
c0016484:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001648b:	e8 cf 84 ff ff       	call   c000e95f <malloc>
c0016490:	83 c4 0c             	add    esp,0xc
c0016493:	89 c3                	mov    ebx,eax
c0016495:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001649b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001649f:	50                   	push   eax
c00164a0:	e8 8d 1c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00164a5:	83 c4 10             	add    esp,0x10
c00164a8:	85 db                	test   ebx,ebx
c00164aa:	75 0a                	jne    c00164b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	68 89 36 02 c0       	push   0xc0023689
c00164b4:	eb 2b                	jmp    c00164e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c00164b6:	50                   	push   eax
c00164b7:	8d 44 24 17          	lea    eax,[esp+0x17]
c00164bb:	50                   	push   eax
c00164bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00164c0:	50                   	push   eax
c00164c1:	53                   	push   ebx
c00164c2:	e8 8b 1f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00164c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00164cb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00164d7:	74 28                	je     c0016501 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c00164d9:	83 ec 0c             	sub    esp,0xc
c00164dc:	68 9d 36 02 c0       	push   0xc002369d
c00164e1:	e8 c0 87 ff ff       	call   c000eca6 <KePanic(char const*)>
c00164e6:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c00164f7:	75 01                	jne    c00164fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c00164f9:	fb                   	sti    
c00164fa:	31 f6                	xor    esi,esi
c00164fc:	e9 91 00 00 00       	jmp    c0016592 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016501:	51                   	push   ecx
c0016502:	51                   	push   ecx
c0016503:	6a 01                	push   0x1
c0016505:	53                   	push   ebx
c0016506:	e8 45 1c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	85 c0                	test   eax,eax
c0016510:	74 27                	je     c0016539 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0016512:	83 ec 0c             	sub    esp,0xc
c0016515:	68 b6 36 02 c0       	push   0xc00236b6
c001651a:	e8 87 87 ff ff       	call   c000eca6 <KePanic(char const*)>
c001651f:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016526:	83 c4 10             	add    esp,0x10
c0016529:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0016530:	75 c8                	jne    c00164fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0016532:	fb                   	sti    
c0016533:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016537:	eb 59                	jmp    c0016592 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0016539:	0f b7 ff             	movzx  edi,di
c001653c:	50                   	push   eax
c001653d:	50                   	push   eax
c001653e:	0f b7 c5             	movzx  eax,bp
c0016541:	57                   	push   edi
c0016542:	50                   	push   eax
c0016543:	e8 be fb ff ff       	call   c0016106 <Vm::realToLinear(unsigned short, unsigned short)>
c0016548:	5a                   	pop    edx
c0016549:	8b 13                	mov    edx,DWORD PTR [ebx]
c001654b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001654f:	51                   	push   ecx
c0016550:	50                   	push   eax
c0016551:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016555:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016559:	53                   	push   ebx
c001655a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001655d:	83 c4 14             	add    esp,0x14
c0016560:	53                   	push   ebx
c0016561:	e8 48 1c ff ff       	call   c00081ae <File::close()>
c0016566:	c6 05 09 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d709,0x0
c001656d:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c0016574:	83 c4 10             	add    esp,0x10
c0016577:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001657e:	75 01                	jne    c0016581 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0016580:	fb                   	sti    
c0016581:	83 ec 0c             	sub    esp,0xc
c0016584:	ff 35 0c d7 02 c0    	push   DWORD PTR ds:0xc002d70c
c001658a:	e8 a5 f4 ff ff       	call   c0015a34 <unblockTask(ThreadControlBlock*)>
c001658f:	83 c4 10             	add    esp,0x10
c0016592:	83 c4 2c             	add    esp,0x2c
c0016595:	89 f0                	mov    eax,esi
c0016597:	5b                   	pop    ebx
c0016598:	5e                   	pop    esi
c0016599:	5f                   	pop    edi
c001659a:	5d                   	pop    ebp
c001659b:	c3                   	ret    

c001659c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001659c:	57                   	push   edi
c001659d:	56                   	push   esi
c001659e:	53                   	push   ebx
c001659f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165ab:	83 e8 06             	sub    eax,0x6
c00165ae:	0f b7 c0             	movzx  eax,ax
c00165b1:	50                   	push   eax
c00165b2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00165b7:	50                   	push   eax
c00165b8:	e8 49 fb ff ff       	call   c0016106 <Vm::realToLinear(unsigned short, unsigned short)>
c00165bd:	5a                   	pop    edx
c00165be:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00165c1:	59                   	pop    ecx
c00165c2:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00165c5:	8d 51 fa             	lea    edx,[ecx-0x6]
c00165c8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00165ce:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00165d1:	8d 56 02             	lea    edx,[esi+0x2]
c00165d4:	66 89 10             	mov    WORD PTR [eax],dx
c00165d7:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00165db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00165df:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165e2:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00165e6:	0f b6 f1             	movzx  esi,cl
c00165e9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00165ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165f3:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00165f7:	0f b6 d5             	movzx  edx,ch
c00165fa:	74 0a                	je     c0016606 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00165fc:	c1 e2 08             	shl    edx,0x8
c00165ff:	09 f2                	or     edx,esi
c0016601:	80 ce 02             	or     dh,0x2
c0016604:	eb 08                	jmp    c001660e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016606:	c1 e2 08             	shl    edx,0x8
c0016609:	09 f2                	or     edx,esi
c001660b:	80 e6 fd             	and    dh,0xfd
c001660e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016612:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016617:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001661b:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016623:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016626:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c001662e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016631:	5b                   	pop    ebx
c0016632:	5e                   	pop    esi
c0016633:	5f                   	pop    edi
c0016634:	c3                   	ret    

c0016635 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016635:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001663a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001663f:	c1 e0 04             	shl    eax,0x4
c0016642:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016645:	c3                   	ret    

c0016646 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016646:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001664b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016650:	c1 e0 04             	shl    eax,0x4
c0016653:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016657:	c3                   	ret    

c0016658 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016658:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001665d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016662:	c1 e0 04             	shl    eax,0x4
c0016665:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016668:	c3                   	ret    

c0016669 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016669:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001666e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016673:	c1 e0 04             	shl    eax,0x4
c0016676:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001667a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001667d:	c3                   	ret    

c001667e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001667e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016683:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016688:	c1 e0 04             	shl    eax,0x4
c001668b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001668f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016693:	c3                   	ret    

c0016694 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016694:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016699:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001669e:	c1 e0 04             	shl    eax,0x4
c00166a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166a5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00166a8:	c3                   	ret    

c00166a9 <Vm::faultHandler(regs*)>:
c00166a9:	55                   	push   ebp
c00166aa:	57                   	push   edi
c00166ab:	56                   	push   esi
c00166ac:	53                   	push   ebx
c00166ad:	83 ec 2c             	sub    esp,0x2c
c00166b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00166b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00166b7:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00166bb:	0f b7 f8             	movzx  edi,ax
c00166be:	52                   	push   edx
c00166bf:	0f b7 c0             	movzx  eax,ax
c00166c2:	50                   	push   eax
c00166c3:	e8 3e fa ff ff       	call   c0016106 <Vm::realToLinear(unsigned short, unsigned short)>
c00166c8:	5a                   	pop    edx
c00166c9:	59                   	pop    ecx
c00166ca:	89 c1                	mov    ecx,eax
c00166cc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166d3:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00166d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166dc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00166df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166e3:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00166e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00166f4:	e8 0d fa ff ff       	call   c0016106 <Vm::realToLinear(unsigned short, unsigned short)>
c00166f9:	5e                   	pop    esi
c00166fa:	be 06 00 00 00       	mov    esi,0x6
c00166ff:	5d                   	pop    ebp
c0016700:	31 ed                	xor    ebp,ebp
c0016702:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016707:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001670a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016710:	0f 84 74 02 00 00    	je     c001698a <Vm::faultHandler(regs*)+0x2e1>
c0016716:	0f 87 94 00 00 00    	ja     c00167b0 <Vm::faultHandler(regs*)+0x107>
c001671c:	83 fa 66             	cmp    edx,0x66
c001671f:	0f 84 e2 01 00 00    	je     c0016907 <Vm::faultHandler(regs*)+0x25e>
c0016725:	77 47                	ja     c001676e <Vm::faultHandler(regs*)+0xc5>
c0016727:	83 fa 36             	cmp    edx,0x36
c001672a:	0f 84 ca 01 00 00    	je     c00168fa <Vm::faultHandler(regs*)+0x251>
c0016730:	77 1a                	ja     c001674c <Vm::faultHandler(regs*)+0xa3>
c0016732:	83 fa 26             	cmp    edx,0x26
c0016735:	0f 84 98 01 00 00    	je     c00168d3 <Vm::faultHandler(regs*)+0x22a>
c001673b:	83 fa 2e             	cmp    edx,0x2e
c001673e:	0f 85 21 06 00 00    	jne    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c0016744:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016747:	31 f6                	xor    esi,esi
c0016749:	41                   	inc    ecx
c001674a:	eb bb                	jmp    c0016707 <Vm::faultHandler(regs*)+0x5e>
c001674c:	83 fa 64             	cmp    edx,0x64
c001674f:	0f 84 8b 01 00 00    	je     c00168e0 <Vm::faultHandler(regs*)+0x237>
c0016755:	0f 87 92 01 00 00    	ja     c00168ed <Vm::faultHandler(regs*)+0x244>
c001675b:	83 fa 3e             	cmp    edx,0x3e
c001675e:	0f 85 01 06 00 00    	jne    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c0016764:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016767:	be 01 00 00 00       	mov    esi,0x1
c001676c:	eb db                	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c001676e:	83 fa 6d             	cmp    edx,0x6d
c0016771:	0f 84 34 03 00 00    	je     c0016aab <Vm::faultHandler(regs*)+0x402>
c0016777:	77 17                	ja     c0016790 <Vm::faultHandler(regs*)+0xe7>
c0016779:	83 fa 67             	cmp    edx,0x67
c001677c:	0f 84 92 01 00 00    	je     c0016914 <Vm::faultHandler(regs*)+0x26b>
c0016782:	83 fa 6c             	cmp    edx,0x6c
c0016785:	0f 84 b1 02 00 00    	je     c0016a3c <Vm::faultHandler(regs*)+0x393>
c001678b:	e9 d5 05 00 00       	jmp    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c0016790:	83 fa 6f             	cmp    edx,0x6f
c0016793:	0f 84 3d 04 00 00    	je     c0016bd6 <Vm::faultHandler(regs*)+0x52d>
c0016799:	0f 82 9f 03 00 00    	jb     c0016b3e <Vm::faultHandler(regs*)+0x495>
c001679f:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00167a5:	0f 84 76 01 00 00    	je     c0016921 <Vm::faultHandler(regs*)+0x278>
c00167ab:	e9 b5 05 00 00       	jmp    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c00167b0:	81 fa ec 00 00 00    	cmp    edx,0xec
c00167b6:	0f 84 51 05 00 00    	je     c0016d0d <Vm::faultHandler(regs*)+0x664>
c00167bc:	0f 87 a9 00 00 00    	ja     c001686b <Vm::faultHandler(regs*)+0x1c2>
c00167c2:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00167c8:	0f 84 d0 04 00 00    	je     c0016c9e <Vm::faultHandler(regs*)+0x5f5>
c00167ce:	77 78                	ja     c0016848 <Vm::faultHandler(regs*)+0x19f>
c00167d0:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00167d6:	0f 84 0e 02 00 00    	je     c00169ea <Vm::faultHandler(regs*)+0x341>
c00167dc:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00167e2:	0f 85 7d 05 00 00    	jne    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c00167e8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00167ec:	89 d1                	mov    ecx,edx
c00167ee:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00167f1:	c1 e1 08             	shl    ecx,0x8
c00167f4:	09 ca                	or     edx,ecx
c00167f6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00167f9:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00167fd:	89 d1                	mov    ecx,edx
c00167ff:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016803:	c1 e1 08             	shl    ecx,0x8
c0016806:	09 ca                	or     edx,ecx
c0016808:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001680b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001680f:	89 d1                	mov    ecx,edx
c0016811:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016815:	c1 e1 08             	shl    ecx,0x8
c0016818:	09 ca                	or     edx,ecx
c001681a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016820:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016823:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016827:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001682d:	d1 e8                	shr    eax,1
c001682f:	83 e0 01             	and    eax,0x1
c0016832:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016835:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016838:	83 c0 06             	add    eax,0x6
c001683b:	25 ff ff 00 00       	and    eax,0xffff
c0016840:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016843:	e9 19 05 00 00       	jmp    c0016d61 <Vm::faultHandler(regs*)+0x6b8>
c0016848:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001684e:	0f 84 8f 04 00 00    	je     c0016ce3 <Vm::faultHandler(regs*)+0x63a>
c0016854:	0f 82 60 04 00 00    	jb     c0016cba <Vm::faultHandler(regs*)+0x611>
c001685a:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016860:	0f 84 94 04 00 00    	je     c0016cfa <Vm::faultHandler(regs*)+0x651>
c0016866:	e9 fa 04 00 00       	jmp    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c001686b:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016871:	0f 84 d7 04 00 00    	je     c0016d4e <Vm::faultHandler(regs*)+0x6a5>
c0016877:	77 2e                	ja     c00168a7 <Vm::faultHandler(regs*)+0x1fe>
c0016879:	81 fa ed 00 00 00    	cmp    edx,0xed
c001687f:	0f 84 a4 04 00 00    	je     c0016d29 <Vm::faultHandler(regs*)+0x680>
c0016885:	81 fa ee 00 00 00    	cmp    edx,0xee
c001688b:	0f 85 d4 04 00 00    	jne    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c0016891:	50                   	push   eax
c0016892:	50                   	push   eax
c0016893:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016897:	50                   	push   eax
c0016898:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001689c:	50                   	push   eax
c001689d:	e8 2e f8 ff ff       	call   c00160d0 <Vm::outbv(unsigned short, unsigned char)>
c00168a2:	e9 9f 04 00 00       	jmp    c0016d46 <Vm::faultHandler(regs*)+0x69d>
c00168a7:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00168ad:	0f 84 6d 01 00 00    	je     c0016a20 <Vm::faultHandler(regs*)+0x377>
c00168b3:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00168b9:	0f 84 6f 01 00 00    	je     c0016a2e <Vm::faultHandler(regs*)+0x385>
c00168bf:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00168c5:	0f 85 9a 04 00 00    	jne    c0016d65 <Vm::faultHandler(regs*)+0x6bc>
c00168cb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168ce:	e9 76 fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c00168d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168d6:	be 02 00 00 00       	mov    esi,0x2
c00168db:	e9 69 fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c00168e0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168e3:	be 03 00 00 00       	mov    esi,0x3
c00168e8:	e9 5c fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c00168ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168f0:	be 04 00 00 00       	mov    esi,0x4
c00168f5:	e9 4f fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c00168fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00168fd:	be 05 00 00 00       	mov    esi,0x5
c0016902:	e9 42 fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c0016907:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001690a:	bd 01 00 00 00       	mov    ebp,0x1
c001690f:	e9 35 fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c0016914:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016917:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001691c:	e9 28 fe ff ff       	jmp    c0016749 <Vm::faultHandler(regs*)+0xa0>
c0016921:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016924:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016928:	83 e5 01             	and    ebp,0x1
c001692b:	74 30                	je     c001695d <Vm::faultHandler(regs*)+0x2b4>
c001692d:	83 e9 04             	sub    ecx,0x4
c0016930:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016936:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001693c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001693f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016942:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016948:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001694c:	0f 84 0c 04 00 00    	je     c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016952:	80 ce 02             	or     dh,0x2
c0016955:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016958:	e9 01 04 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c001695d:	83 e9 02             	sub    ecx,0x2
c0016960:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016966:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016969:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001696d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016973:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016977:	74 05                	je     c001697e <Vm::faultHandler(regs*)+0x2d5>
c0016979:	80 ce 02             	or     dh,0x2
c001697c:	eb 03                	jmp    c0016981 <Vm::faultHandler(regs*)+0x2d8>
c001697e:	80 e6 fd             	and    dh,0xfd
c0016981:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016985:	e9 d4 03 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c001698a:	83 e5 01             	and    ebp,0x1
c001698d:	74 2a                	je     c00169b9 <Vm::faultHandler(regs*)+0x310>
c001698f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016991:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016997:	81 ca 00 02 02 00    	or     edx,0x20200
c001699d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00169a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00169a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169a8:	c1 e8 09             	shr    eax,0x9
c00169ab:	83 e0 01             	and    eax,0x1
c00169ae:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00169b1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00169b4:	83 c0 04             	add    eax,0x4
c00169b7:	eb 24                	jmp    c00169dd <Vm::faultHandler(regs*)+0x334>
c00169b9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00169bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00169c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00169c5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00169c8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00169ce:	c1 e8 09             	shr    eax,0x9
c00169d1:	83 e0 01             	and    eax,0x1
c00169d4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00169d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00169da:	83 c0 02             	add    eax,0x2
c00169dd:	25 ff ff 00 00       	and    eax,0xffff
c00169e2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00169e5:	e9 74 03 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c00169ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169ee:	3d ee 00 00 00       	cmp    eax,0xee
c00169f3:	75 10                	jne    c0016a05 <Vm::faultHandler(regs*)+0x35c>
c00169f5:	83 ec 0c             	sub    esp,0xc
c00169f8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00169fb:	e8 70 f7 ff ff       	call   c0016170 <Vm::mainloop3(unsigned long)>
c0016a00:	e9 44 03 00 00       	jmp    c0016d49 <Vm::faultHandler(regs*)+0x6a0>
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a10:	51                   	push   ecx
c0016a11:	50                   	push   eax
c0016a12:	53                   	push   ebx
c0016a13:	e8 84 fb ff ff       	call   c001659c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016a18:	83 c4 20             	add    esp,0x20
c0016a1b:	e9 41 03 00 00       	jmp    c0016d61 <Vm::faultHandler(regs*)+0x6b8>
c0016a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a25:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016a29:	e9 30 03 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016a2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a33:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016a37:	e9 22 03 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016a3c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016a3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a44:	74 2b                	je     c0016a71 <Vm::faultHandler(regs*)+0x3c8>
c0016a46:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016a4d:	76 22                	jbe    c0016a71 <Vm::faultHandler(regs*)+0x3c8>
c0016a4f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a53:	50                   	push   eax
c0016a54:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a58:	50                   	push   eax
c0016a59:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a5d:	50                   	push   eax
c0016a5e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a62:	50                   	push   eax
c0016a63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a67:	50                   	push   eax
c0016a68:	6a 6c                	push   0x6c
c0016a6a:	6a 6c                	push   0x6c
c0016a6c:	e9 bd 01 00 00       	jmp    c0016c2e <Vm::faultHandler(regs*)+0x585>
c0016a71:	83 ec 0c             	sub    esp,0xc
c0016a74:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a78:	0f b7 f6             	movzx  esi,si
c0016a7b:	50                   	push   eax
c0016a7c:	e8 3c f6 ff ff       	call   c00160bd <Vm::inbv(unsigned short)>
c0016a81:	83 c4 0c             	add    esp,0xc
c0016a84:	0f b6 c0             	movzx  eax,al
c0016a87:	50                   	push   eax
c0016a88:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016a8c:	50                   	push   eax
c0016a8d:	56                   	push   esi
c0016a8e:	e8 d6 fb ff ff       	call   c0016669 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016a93:	83 c4 10             	add    esp,0x10
c0016a96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a99:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016a9d:	74 03                	je     c0016aa2 <Vm::faultHandler(regs*)+0x3f9>
c0016a9f:	48                   	dec    eax
c0016aa0:	eb 01                	jmp    c0016aa3 <Vm::faultHandler(regs*)+0x3fa>
c0016aa2:	40                   	inc    eax
c0016aa3:	0f b7 c0             	movzx  eax,ax
c0016aa6:	e9 8b 00 00 00       	jmp    c0016b36 <Vm::faultHandler(regs*)+0x48d>
c0016aab:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016aae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ab1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016ab6:	74 29                	je     c0016ae1 <Vm::faultHandler(regs*)+0x438>
c0016ab8:	3d ff ff 00 00       	cmp    eax,0xffff
c0016abd:	76 22                	jbe    c0016ae1 <Vm::faultHandler(regs*)+0x438>
c0016abf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016ac3:	50                   	push   eax
c0016ac4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016ac8:	50                   	push   eax
c0016ac9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016acd:	50                   	push   eax
c0016ace:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016ad2:	50                   	push   eax
c0016ad3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ad7:	50                   	push   eax
c0016ad8:	6a 6d                	push   0x6d
c0016ada:	6a 6d                	push   0x6d
c0016adc:	e9 4d 01 00 00       	jmp    c0016c2e <Vm::faultHandler(regs*)+0x585>
c0016ae1:	0f b7 c8             	movzx  ecx,ax
c0016ae4:	0f b7 f6             	movzx  esi,si
c0016ae7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016aea:	83 e5 01             	and    ebp,0x1
c0016aed:	74 20                	je     c0016b0f <Vm::faultHandler(regs*)+0x466>
c0016aef:	ed                   	in     eax,dx
c0016af0:	55                   	push   ebp
c0016af1:	50                   	push   eax
c0016af2:	51                   	push   ecx
c0016af3:	56                   	push   esi
c0016af4:	e8 9b fb ff ff       	call   c0016694 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016af9:	83 c4 10             	add    esp,0x10
c0016afc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016aff:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b03:	74 05                	je     c0016b0a <Vm::faultHandler(regs*)+0x461>
c0016b05:	83 e8 04             	sub    eax,0x4
c0016b08:	eb 27                	jmp    c0016b31 <Vm::faultHandler(regs*)+0x488>
c0016b0a:	83 c0 04             	add    eax,0x4
c0016b0d:	eb 22                	jmp    c0016b31 <Vm::faultHandler(regs*)+0x488>
c0016b0f:	66 ed                	in     ax,dx
c0016b11:	0f b7 c0             	movzx  eax,ax
c0016b14:	57                   	push   edi
c0016b15:	50                   	push   eax
c0016b16:	51                   	push   ecx
c0016b17:	56                   	push   esi
c0016b18:	e8 61 fb ff ff       	call   c001667e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016b1d:	83 c4 10             	add    esp,0x10
c0016b20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016b23:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016b27:	74 05                	je     c0016b2e <Vm::faultHandler(regs*)+0x485>
c0016b29:	83 e8 02             	sub    eax,0x2
c0016b2c:	eb 03                	jmp    c0016b31 <Vm::faultHandler(regs*)+0x488>
c0016b2e:	83 c0 02             	add    eax,0x2
c0016b31:	25 ff ff 00 00       	and    eax,0xffff
c0016b36:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016b39:	e9 20 02 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016b3e:	8d 46 ff             	lea    eax,[esi-0x1]
c0016b41:	0f b6 f0             	movzx  esi,al
c0016b44:	83 fe 05             	cmp    esi,0x5
c0016b47:	77 23                	ja     c0016b6c <Vm::faultHandler(regs*)+0x4c3>
c0016b49:	ff 24 b5 2c 37 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc8d4]
c0016b50:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016b55:	eb 15                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x4c3>
c0016b57:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016b5b:	eb 0f                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x4c3>
c0016b5d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016b61:	eb 09                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x4c3>
c0016b63:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016b67:	eb 03                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x4c3>
c0016b69:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016b6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016b6f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016b74:	74 29                	je     c0016b9f <Vm::faultHandler(regs*)+0x4f6>
c0016b76:	3d ff ff 00 00       	cmp    eax,0xffff
c0016b7b:	76 22                	jbe    c0016b9f <Vm::faultHandler(regs*)+0x4f6>
c0016b7d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b81:	50                   	push   eax
c0016b82:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b86:	50                   	push   eax
c0016b87:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b8b:	50                   	push   eax
c0016b8c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b90:	50                   	push   eax
c0016b91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b95:	50                   	push   eax
c0016b96:	6a 6e                	push   0x6e
c0016b98:	6a 6e                	push   0x6e
c0016b9a:	e9 8f 00 00 00       	jmp    c0016c2e <Vm::faultHandler(regs*)+0x585>
c0016b9f:	0f b7 c0             	movzx  eax,ax
c0016ba2:	52                   	push   edx
c0016ba3:	52                   	push   edx
c0016ba4:	50                   	push   eax
c0016ba5:	57                   	push   edi
c0016ba6:	e8 8a fa ff ff       	call   c0016635 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016bab:	59                   	pop    ecx
c0016bac:	0f b6 c0             	movzx  eax,al
c0016baf:	5e                   	pop    esi
c0016bb0:	50                   	push   eax
c0016bb1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016bb5:	50                   	push   eax
c0016bb6:	e8 15 f5 ff ff       	call   c00160d0 <Vm::outbv(unsigned short, unsigned char)>
c0016bbb:	83 c4 10             	add    esp,0x10
c0016bbe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016bc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016bc5:	74 03                	je     c0016bca <Vm::faultHandler(regs*)+0x521>
c0016bc7:	48                   	dec    eax
c0016bc8:	eb 01                	jmp    c0016bcb <Vm::faultHandler(regs*)+0x522>
c0016bca:	40                   	inc    eax
c0016bcb:	0f b7 c0             	movzx  eax,ax
c0016bce:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016bd1:	e9 88 01 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016bd6:	8d 46 ff             	lea    eax,[esi-0x1]
c0016bd9:	0f b6 f0             	movzx  esi,al
c0016bdc:	83 fe 05             	cmp    esi,0x5
c0016bdf:	77 1e                	ja     c0016bff <Vm::faultHandler(regs*)+0x556>
c0016be1:	ff 24 b5 44 37 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdc8bc]
c0016be8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016bec:	eb 11                	jmp    c0016bff <Vm::faultHandler(regs*)+0x556>
c0016bee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016bf1:	eb 0c                	jmp    c0016bff <Vm::faultHandler(regs*)+0x556>
c0016bf3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016bf6:	eb 07                	jmp    c0016bff <Vm::faultHandler(regs*)+0x556>
c0016bf8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016bfb:	eb 02                	jmp    c0016bff <Vm::faultHandler(regs*)+0x556>
c0016bfd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016bff:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016c02:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016c07:	74 37                	je     c0016c40 <Vm::faultHandler(regs*)+0x597>
c0016c09:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016c0f:	76 2f                	jbe    c0016c40 <Vm::faultHandler(regs*)+0x597>
c0016c11:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016c15:	50                   	push   eax
c0016c16:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016c1a:	50                   	push   eax
c0016c1b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016c1f:	50                   	push   eax
c0016c20:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016c24:	50                   	push   eax
c0016c25:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016c29:	50                   	push   eax
c0016c2a:	6a 6f                	push   0x6f
c0016c2c:	6a 6f                	push   0x6f
c0016c2e:	68 cf 36 02 c0       	push   0xc00236cf
c0016c33:	e8 2c 03 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016c38:	83 c4 20             	add    esp,0x20
c0016c3b:	e9 83 01 00 00       	jmp    c0016dc3 <Vm::faultHandler(regs*)+0x71a>
c0016c40:	0f b7 d7             	movzx  edx,di
c0016c43:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016c46:	0f b7 c6             	movzx  eax,si
c0016c49:	81 e1 00 04 00 00    	and    ecx,0x400
c0016c4f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016c52:	83 e5 01             	and    ebp,0x1
c0016c55:	74 1d                	je     c0016c74 <Vm::faultHandler(regs*)+0x5cb>
c0016c57:	55                   	push   ebp
c0016c58:	55                   	push   ebp
c0016c59:	50                   	push   eax
c0016c5a:	52                   	push   edx
c0016c5b:	e8 f8 f9 ff ff       	call   c0016658 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016c60:	83 c4 10             	add    esp,0x10
c0016c63:	89 fa                	mov    edx,edi
c0016c65:	ef                   	out    dx,eax
c0016c66:	85 c9                	test   ecx,ecx
c0016c68:	74 05                	je     c0016c6f <Vm::faultHandler(regs*)+0x5c6>
c0016c6a:	83 ee 04             	sub    esi,0x4
c0016c6d:	eb 21                	jmp    c0016c90 <Vm::faultHandler(regs*)+0x5e7>
c0016c6f:	83 c6 04             	add    esi,0x4
c0016c72:	eb 1c                	jmp    c0016c90 <Vm::faultHandler(regs*)+0x5e7>
c0016c74:	55                   	push   ebp
c0016c75:	55                   	push   ebp
c0016c76:	50                   	push   eax
c0016c77:	52                   	push   edx
c0016c78:	e8 c9 f9 ff ff       	call   c0016646 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016c7d:	83 c4 10             	add    esp,0x10
c0016c80:	89 fa                	mov    edx,edi
c0016c82:	66 ef                	out    dx,ax
c0016c84:	85 c9                	test   ecx,ecx
c0016c86:	74 05                	je     c0016c8d <Vm::faultHandler(regs*)+0x5e4>
c0016c88:	83 ee 02             	sub    esi,0x2
c0016c8b:	eb 03                	jmp    c0016c90 <Vm::faultHandler(regs*)+0x5e7>
c0016c8d:	83 c6 02             	add    esi,0x2
c0016c90:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016c96:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016c99:	e9 c0 00 00 00       	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016c9e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016cac:	50                   	push   eax
c0016cad:	e8 0b f4 ff ff       	call   c00160bd <Vm::inbv(unsigned short)>
c0016cb2:	0f b6 c0             	movzx  eax,al
c0016cb5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016cb8:	eb 3a                	jmp    c0016cf4 <Vm::faultHandler(regs*)+0x64b>
c0016cba:	83 e5 01             	and    ebp,0x1
c0016cbd:	74 07                	je     c0016cc6 <Vm::faultHandler(regs*)+0x61d>
c0016cbf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016cc3:	ed                   	in     eax,dx
c0016cc4:	eb 14                	jmp    c0016cda <Vm::faultHandler(regs*)+0x631>
c0016cc6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016cc9:	66 31 f6             	xor    si,si
c0016ccc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016ccf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016cd3:	66 ed                	in     ax,dx
c0016cd5:	0f b7 c0             	movzx  eax,ax
c0016cd8:	09 f0                	or     eax,esi
c0016cda:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016cdd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016ce1:	eb 7e                	jmp    c0016d61 <Vm::faultHandler(regs*)+0x6b8>
c0016ce3:	52                   	push   edx
c0016ce4:	52                   	push   edx
c0016ce5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016ce9:	50                   	push   eax
c0016cea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016cee:	50                   	push   eax
c0016cef:	e8 dc f3 ff ff       	call   c00160d0 <Vm::outbv(unsigned short, unsigned char)>
c0016cf4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016cf8:	eb 4f                	jmp    c0016d49 <Vm::faultHandler(regs*)+0x6a0>
c0016cfa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016cfd:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016d01:	83 e5 01             	and    ebp,0x1
c0016d04:	74 03                	je     c0016d09 <Vm::faultHandler(regs*)+0x660>
c0016d06:	ef                   	out    dx,eax
c0016d07:	eb d4                	jmp    c0016cdd <Vm::faultHandler(regs*)+0x634>
c0016d09:	66 ef                	out    dx,ax
c0016d0b:	eb d0                	jmp    c0016cdd <Vm::faultHandler(regs*)+0x634>
c0016d0d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d1b:	50                   	push   eax
c0016d1c:	e8 9c f3 ff ff       	call   c00160bd <Vm::inbv(unsigned short)>
c0016d21:	0f b6 c0             	movzx  eax,al
c0016d24:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016d27:	eb 1d                	jmp    c0016d46 <Vm::faultHandler(regs*)+0x69d>
c0016d29:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016d2c:	83 e5 01             	and    ebp,0x1
c0016d2f:	74 03                	je     c0016d34 <Vm::faultHandler(regs*)+0x68b>
c0016d31:	ed                   	in     eax,dx
c0016d32:	eb 0d                	jmp    c0016d41 <Vm::faultHandler(regs*)+0x698>
c0016d34:	66 ed                	in     ax,dx
c0016d36:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016d39:	0f b7 c0             	movzx  eax,ax
c0016d3c:	66 31 d2             	xor    dx,dx
c0016d3f:	09 d0                	or     eax,edx
c0016d41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d44:	eb 18                	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016d46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	eb 13                	jmp    c0016d61 <Vm::faultHandler(regs*)+0x6b8>
c0016d4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016d54:	83 e5 01             	and    ebp,0x1
c0016d57:	74 03                	je     c0016d5c <Vm::faultHandler(regs*)+0x6b3>
c0016d59:	ef                   	out    dx,eax
c0016d5a:	eb 02                	jmp    c0016d5e <Vm::faultHandler(regs*)+0x6b5>
c0016d5c:	66 ef                	out    dx,ax
c0016d5e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d61:	b0 01                	mov    al,0x1
c0016d63:	eb 60                	jmp    c0016dc5 <Vm::faultHandler(regs*)+0x71c>
c0016d65:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016d69:	50                   	push   eax
c0016d6a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016d6e:	50                   	push   eax
c0016d6f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016d73:	50                   	push   eax
c0016d74:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016d78:	50                   	push   eax
c0016d79:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016d7d:	50                   	push   eax
c0016d7e:	52                   	push   edx
c0016d7f:	52                   	push   edx
c0016d80:	68 fc 36 02 c0       	push   0xc00236fc
c0016d85:	e8 da 01 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016d8a:	83 c4 20             	add    esp,0x20
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	6a 60                	push   0x60
c0016d92:	e8 26 f3 ff ff       	call   c00160bd <Vm::inbv(unsigned short)>
c0016d97:	83 c4 10             	add    esp,0x10
c0016d9a:	0f b6 d0             	movzx  edx,al
c0016d9d:	83 fa 1c             	cmp    edx,0x1c
c0016da0:	74 05                	je     c0016da7 <Vm::faultHandler(regs*)+0x6fe>
c0016da2:	83 fa 5a             	cmp    edx,0x5a
c0016da5:	75 e6                	jne    c0016d8d <Vm::faultHandler(regs*)+0x6e4>
c0016da7:	0f b6 c0             	movzx  eax,al
c0016daa:	83 f8 1c             	cmp    eax,0x1c
c0016dad:	74 05                	je     c0016db4 <Vm::faultHandler(regs*)+0x70b>
c0016daf:	83 f8 5a             	cmp    eax,0x5a
c0016db2:	75 0f                	jne    c0016dc3 <Vm::faultHandler(regs*)+0x71a>
c0016db4:	83 ec 0c             	sub    esp,0xc
c0016db7:	6a 60                	push   0x60
c0016db9:	e8 ff f2 ff ff       	call   c00160bd <Vm::inbv(unsigned short)>
c0016dbe:	83 c4 10             	add    esp,0x10
c0016dc1:	eb e4                	jmp    c0016da7 <Vm::faultHandler(regs*)+0x6fe>
c0016dc3:	31 c0                	xor    eax,eax
c0016dc5:	83 c4 2c             	add    esp,0x2c
c0016dc8:	5b                   	pop    ebx
c0016dc9:	5e                   	pop    esi
c0016dca:	5f                   	pop    edi
c0016dcb:	5d                   	pop    ebp
c0016dcc:	c3                   	ret    
c0016dcd:	90                   	nop

c0016dce <noCopro(unsigned long)>:
c0016dce:	c3                   	ret    
c0016dcf:	90                   	nop

c0016dd0 <CPU::close(int, int, void*)>:
c0016dd0:	31 c0                	xor    eax,eax
c0016dd2:	c3                   	ret    

c0016dd3 <x86ReadCMOS(unsigned char)>:
c0016dd3:	83 ec 14             	sub    esp,0x14
c0016dd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016dda:	88 04 24             	mov    BYTE PTR [esp],al
c0016ddd:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016de2:	0f b6 c0             	movzx  eax,al
c0016de5:	85 c0                	test   eax,eax
c0016de7:	74 04                	je     c0016ded <x86ReadCMOS(unsigned char)+0x1a>
c0016de9:	b2 00                	mov    dl,0x0
c0016deb:	eb 02                	jmp    c0016def <x86ReadCMOS(unsigned char)+0x1c>
c0016ded:	b2 80                	mov    dl,0x80
c0016def:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016df2:	09 d0                	or     eax,edx
c0016df4:	0f b6 c0             	movzx  eax,al
c0016df7:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016dfe:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016e02:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016e06:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016e0b:	ee                   	out    dx,al
c0016e0c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016e13:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016e18:	89 c2                	mov    edx,eax
c0016e1a:	ec                   	in     al,dx
c0016e1b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016e1f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016e23:	83 c4 14             	add    esp,0x14
c0016e26:	c3                   	ret    

c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>:
c0016e27:	83 ec 18             	sub    esp,0x18
c0016e2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e32:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016e36:	88 04 24             	mov    BYTE PTR [esp],al
c0016e39:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0016e3e:	0f b6 c0             	movzx  eax,al
c0016e41:	85 c0                	test   eax,eax
c0016e43:	74 04                	je     c0016e49 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016e45:	b2 00                	mov    dl,0x0
c0016e47:	eb 02                	jmp    c0016e4b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016e49:	b2 80                	mov    dl,0x80
c0016e4b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016e4f:	09 d0                	or     eax,edx
c0016e51:	0f b6 c0             	movzx  eax,al
c0016e54:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016e5b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016e5f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016e63:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016e68:	ee                   	out    dx,al
c0016e69:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016e6d:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016e74:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016e78:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016e7c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016e81:	ee                   	out    dx,al
c0016e82:	90                   	nop
c0016e83:	83 c4 18             	add    esp,0x18
c0016e86:	c3                   	ret    

c0016e87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016e87:	60                   	pusha  
c0016e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e90:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e94:	9c                   	pushf  
c0016e95:	fa                   	cli    
c0016e96:	0f 09                	wbinvd 
c0016e98:	0f 30                	wrmsr  
c0016e9a:	9d                   	popf   
c0016e9b:	89 c2                	mov    edx,eax
c0016e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ea1:	89 10                	mov    DWORD PTR [eax],edx
c0016ea3:	61                   	popa   
c0016ea4:	90                   	nop
c0016ea5:	c3                   	ret    

c0016ea6 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016ea6:	60                   	pusha  
c0016ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016eab:	89 c1                	mov    ecx,eax
c0016ead:	9c                   	pushf  
c0016eae:	fa                   	cli    
c0016eaf:	0f 09                	wbinvd 
c0016eb1:	31 c0                	xor    eax,eax
c0016eb3:	31 d2                	xor    edx,edx
c0016eb5:	0f 32                	rdmsr  
c0016eb7:	9d                   	popf   
c0016eb8:	89 c2                	mov    edx,eax
c0016eba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ebe:	89 10                	mov    DWORD PTR [eax],edx
c0016ec0:	61                   	popa   
c0016ec1:	90                   	nop
c0016ec2:	c3                   	ret    

c0016ec3 <AMD_K6_writeback(int, int, int)>:
c0016ec3:	83 ec 20             	sub    esp,0x20
c0016ec6:	a1 a0 cd 02 c0       	mov    eax,ds:0xc002cda0
c0016ecb:	c1 e8 14             	shr    eax,0x14
c0016ece:	c1 e8 02             	shr    eax,0x2
c0016ed1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ed5:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016eda:	0f 85 9e 00 00 00    	jne    c0016f7e <AMD_K6_writeback(int, int, int)+0xbb>
c0016ee0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ee4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ee8:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016eed:	75 19                	jne    c0016f08 <AMD_K6_writeback(int, int, int)+0x45>
c0016eef:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016ef4:	7f 0a                	jg     c0016f00 <AMD_K6_writeback(int, int, int)+0x3d>
c0016ef6:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016efe:	eb 08                	jmp    c0016f08 <AMD_K6_writeback(int, int, int)+0x45>
c0016f00:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016f08:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016f0d:	7c 6e                	jl     c0016f7d <AMD_K6_writeback(int, int, int)+0xba>
c0016f0f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016f14:	7e 09                	jle    c0016f1f <AMD_K6_writeback(int, int, int)+0x5c>
c0016f16:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016f1b:	74 36                	je     c0016f53 <AMD_K6_writeback(int, int, int)+0x90>
c0016f1d:	eb 5e                	jmp    c0016f7d <AMD_K6_writeback(int, int, int)+0xba>
c0016f1f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f23:	50                   	push   eax
c0016f24:	68 82 00 00 c0       	push   0xc0000082
c0016f29:	e8 78 ff ff ff       	call   c0016ea6 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f2e:	83 c4 08             	add    esp,0x8
c0016f31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016f35:	01 c0                	add    eax,eax
c0016f37:	83 e0 7f             	and    eax,0x7f
c0016f3a:	89 c2                	mov    edx,eax
c0016f3c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f40:	50                   	push   eax
c0016f41:	6a 00                	push   0x0
c0016f43:	52                   	push   edx
c0016f44:	68 82 00 00 c0       	push   0xc0000082
c0016f49:	e8 39 ff ff ff       	call   c0016e87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016f4e:	83 c4 10             	add    esp,0x10
c0016f51:	eb 2b                	jmp    c0016f7e <AMD_K6_writeback(int, int, int)+0xbb>
c0016f53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f57:	50                   	push   eax
c0016f58:	68 82 00 00 c0       	push   0xc0000082
c0016f5d:	e8 44 ff ff ff       	call   c0016ea6 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016f62:	83 c4 08             	add    esp,0x8
c0016f65:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f69:	50                   	push   eax
c0016f6a:	6a 00                	push   0x0
c0016f6c:	6a 00                	push   0x0
c0016f6e:	68 82 00 00 c0       	push   0xc0000082
c0016f73:	e8 0f ff ff ff       	call   c0016e87 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	eb 01                	jmp    c0016f7e <AMD_K6_writeback(int, int, int)+0xbb>
c0016f7d:	90                   	nop
c0016f7e:	90                   	nop
c0016f7f:	83 c4 20             	add    esp,0x20
c0016f82:	c3                   	ret    

c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016f83:	56                   	push   esi
c0016f84:	53                   	push   ebx
c0016f85:	a1 a0 50 02 c0       	mov    eax,ds:0xc00250a0
c0016f8a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016f8e:	75 32                	jne    c0016fc2 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016f90:	8b 15 60 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d760
c0016f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f9a:	89 10                	mov    DWORD PTR [eax],edx
c0016f9c:	8b 15 5c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d75c
c0016fa2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fa6:	89 10                	mov    DWORD PTR [eax],edx
c0016fa8:	8b 15 58 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d758
c0016fae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fb2:	89 10                	mov    DWORD PTR [eax],edx
c0016fb4:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c0016fba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fbe:	89 10                	mov    DWORD PTR [eax],edx
c0016fc0:	eb 5c                	jmp    c001701e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016fc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc6:	ba 00 00 00 00       	mov    edx,0x0
c0016fcb:	89 d1                	mov    ecx,edx
c0016fcd:	0f a2                	cpuid  
c0016fcf:	89 c6                	mov    esi,eax
c0016fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd5:	89 30                	mov    DWORD PTR [eax],esi
c0016fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fdb:	89 18                	mov    DWORD PTR [eax],ebx
c0016fdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fe1:	89 08                	mov    DWORD PTR [eax],ecx
c0016fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fe7:	89 10                	mov    DWORD PTR [eax],edx
c0016fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fed:	a3 a0 50 02 c0       	mov    ds:0xc00250a0,eax
c0016ff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ff8:	a3 60 d7 02 c0       	mov    ds:0xc002d760,eax
c0016ffd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017001:	8b 00                	mov    eax,DWORD PTR [eax]
c0017003:	a3 5c d7 02 c0       	mov    ds:0xc002d75c,eax
c0017008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001700c:	8b 00                	mov    eax,DWORD PTR [eax]
c001700e:	a3 58 d7 02 c0       	mov    ds:0xc002d758,eax
c0017013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017017:	8b 00                	mov    eax,DWORD PTR [eax]
c0017019:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c001701e:	5b                   	pop    ebx
c001701f:	5e                   	pop    esi
c0017020:	c3                   	ret    

c0017021 <cpuidCheckEDX(unsigned int)>:
c0017021:	83 ec 10             	sub    esp,0x10
c0017024:	89 e0                	mov    eax,esp
c0017026:	50                   	push   eax
c0017027:	8d 44 24 08          	lea    eax,[esp+0x8]
c001702b:	50                   	push   eax
c001702c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017030:	50                   	push   eax
c0017031:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017035:	50                   	push   eax
c0017036:	6a 01                	push   0x1
c0017038:	e8 46 ff ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001703d:	83 c4 14             	add    esp,0x14
c0017040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017043:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017047:	0f 95 c0             	setne  al
c001704a:	83 c4 10             	add    esp,0x10
c001704d:	c3                   	ret    

c001704e <cpuidCheckECX(unsigned int)>:
c001704e:	83 ec 10             	sub    esp,0x10
c0017051:	89 e0                	mov    eax,esp
c0017053:	50                   	push   eax
c0017054:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017058:	50                   	push   eax
c0017059:	8d 44 24 10          	lea    eax,[esp+0x10]
c001705d:	50                   	push   eax
c001705e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017062:	50                   	push   eax
c0017063:	6a 01                	push   0x1
c0017065:	e8 19 ff ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001706a:	83 c4 14             	add    esp,0x14
c001706d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017071:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017075:	0f 95 c0             	setne  al
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	c3                   	ret    

c001707c <cpuidCheckExtendedEBX(unsigned int)>:
c001707c:	83 ec 10             	sub    esp,0x10
c001707f:	89 e0                	mov    eax,esp
c0017081:	50                   	push   eax
c0017082:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017086:	50                   	push   eax
c0017087:	8d 44 24 10          	lea    eax,[esp+0x10]
c001708b:	50                   	push   eax
c001708c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017090:	50                   	push   eax
c0017091:	6a 07                	push   0x7
c0017093:	e8 eb fe ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017098:	83 c4 14             	add    esp,0x14
c001709b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001709f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00170a3:	0f 95 c0             	setne  al
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	c3                   	ret    

c00170aa <cpuidCheckExtendedECX(unsigned int)>:
c00170aa:	83 ec 10             	sub    esp,0x10
c00170ad:	89 e0                	mov    eax,esp
c00170af:	50                   	push   eax
c00170b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00170b4:	50                   	push   eax
c00170b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00170b9:	50                   	push   eax
c00170ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00170be:	50                   	push   eax
c00170bf:	6a 07                	push   0x7
c00170c1:	e8 bd fe ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170c6:	83 c4 14             	add    esp,0x14
c00170c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170cd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00170d1:	0f 95 c0             	setne  al
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	c3                   	ret    

c00170d8 <HalDetectFeatures()>:
c00170d8:	57                   	push   edi
c00170d9:	56                   	push   esi
c00170da:	53                   	push   ebx
c00170db:	81 ec 90 00 00 00    	sub    esp,0x90
c00170e1:	83 ec 04             	sub    esp,0x4
c00170e4:	6a 08                	push   0x8
c00170e6:	6a 00                	push   0x0
c00170e8:	68 8c d7 02 c0       	push   0xc002d78c
c00170ed:	e8 fe 93 fe ff       	call   c00004f0 <memset>
c00170f2:	83 c4 10             	add    esp,0x10
c00170f5:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00170fa:	83 c8 04             	or     eax,0x4
c00170fd:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017102:	e8 f2 90 fe ff       	call   c00001f9 <detectCPUID>
c0017107:	85 c0                	test   eax,eax
c0017109:	0f 95 c0             	setne  al
c001710c:	83 e0 01             	and    eax,0x1
c001710f:	83 e0 01             	and    eax,0x1
c0017112:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017115:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001711a:	83 e0 fd             	and    eax,0xfffffffd
c001711d:	88 c2                	mov    dl,al
c001711f:	88 c8                	mov    al,cl
c0017121:	09 d0                	or     eax,edx
c0017123:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017128:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001712d:	83 e0 02             	and    eax,0x2
c0017130:	0f b6 c0             	movzx  eax,al
c0017133:	85 c0                	test   eax,eax
c0017135:	0f 84 7f 02 00 00    	je     c00173ba <HalDetectFeatures()+0x2e2>
c001713b:	83 ec 0c             	sub    esp,0xc
c001713e:	6a 20                	push   0x20
c0017140:	e8 dc fe ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017145:	83 c4 10             	add    esp,0x10
c0017148:	83 e0 01             	and    eax,0x1
c001714b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017152:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017157:	83 e0 f7             	and    eax,0xfffffff7
c001715a:	88 c2                	mov    dl,al
c001715c:	88 c8                	mov    al,cl
c001715e:	09 d0                	or     eax,edx
c0017160:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017165:	83 ec 0c             	sub    esp,0xc
c0017168:	68 00 00 00 04       	push   0x4000000
c001716d:	e8 af fe ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017172:	83 c4 10             	add    esp,0x10
c0017175:	89 c1                	mov    ecx,eax
c0017177:	83 e1 01             	and    ecx,0x1
c001717a:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c001717f:	83 e0 fe             	and    eax,0xfffffffe
c0017182:	88 c2                	mov    dl,al
c0017184:	88 c8                	mov    al,cl
c0017186:	09 d0                	or     eax,edx
c0017188:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c001718d:	83 ec 0c             	sub    esp,0xc
c0017190:	68 80 00 00 00       	push   0x80
c0017195:	e8 87 fe ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c001719a:	83 c4 10             	add    esp,0x10
c001719d:	89 c1                	mov    ecx,eax
c001719f:	c1 e1 07             	shl    ecx,0x7
c00171a2:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00171a7:	83 e0 7f             	and    eax,0x7f
c00171aa:	88 c2                	mov    dl,al
c00171ac:	88 c8                	mov    al,cl
c00171ae:	09 d0                	or     eax,edx
c00171b0:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00171b5:	83 ec 0c             	sub    esp,0xc
c00171b8:	68 00 00 80 00       	push   0x800000
c00171bd:	e8 5f fe ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c00171c2:	83 c4 10             	add    esp,0x10
c00171c5:	83 e0 01             	and    eax,0x1
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	c1 e1 05             	shl    ecx,0x5
c00171cd:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00171d2:	83 e0 df             	and    eax,0xffffffdf
c00171d5:	88 c2                	mov    dl,al
c00171d7:	88 c8                	mov    al,cl
c00171d9:	09 d0                	or     eax,edx
c00171db:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00171e0:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00171e5:	83 e0 01             	and    eax,0x1
c00171e8:	75 0c                	jne    c00171f6 <HalDetectFeatures()+0x11e>
c00171ea:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00171ef:	25 00 04 00 00       	and    eax,0x400
c00171f4:	74 0f                	je     c0017205 <HalDetectFeatures()+0x12d>
c00171f6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00171fb:	83 e0 fe             	and    eax,0xfffffffe
c00171fe:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017203:	eb 28                	jmp    c001722d <HalDetectFeatures()+0x155>
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	68 00 02 00 00       	push   0x200
c001720d:	e8 0f fe ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017212:	83 c4 10             	add    esp,0x10
c0017215:	89 c1                	mov    ecx,eax
c0017217:	83 e1 01             	and    ecx,0x1
c001721a:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001721f:	83 e0 fe             	and    eax,0xfffffffe
c0017222:	88 c2                	mov    dl,al
c0017224:	88 c8                	mov    al,cl
c0017226:	09 d0                	or     eax,edx
c0017228:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c001722d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017232:	83 e0 01             	and    eax,0x1
c0017235:	0f b6 c0             	movzx  eax,al
c0017238:	85 c0                	test   eax,eax
c001723a:	74 1c                	je     c0017258 <HalDetectFeatures()+0x180>
c001723c:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017241:	83 e0 08             	and    eax,0x8
c0017244:	0f b6 c0             	movzx  eax,al
c0017247:	85 c0                	test   eax,eax
c0017249:	75 0d                	jne    c0017258 <HalDetectFeatures()+0x180>
c001724b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017250:	83 e0 fe             	and    eax,0xfffffffe
c0017253:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	68 5c 37 02 c0       	push   0xc002375c
c0017260:	e8 ff fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017265:	83 c4 10             	add    esp,0x10
c0017268:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c001726d:	83 e0 fe             	and    eax,0xfffffffe
c0017270:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017275:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001727d:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017285:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001728d:	85 c0                	test   eax,eax
c001728f:	0f 84 ab 00 00 00    	je     c0017340 <HalDetectFeatures()+0x268>
c0017295:	83 ec 0c             	sub    esp,0xc
c0017298:	6a 01                	push   0x1
c001729a:	e8 af fd ff ff       	call   c001704e <cpuidCheckECX(unsigned int)>
c001729f:	83 c4 10             	add    esp,0x10
c00172a2:	83 e0 01             	and    eax,0x1
c00172a5:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00172a8:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00172ad:	83 e0 fd             	and    eax,0xfffffffd
c00172b0:	88 c2                	mov    dl,al
c00172b2:	88 c8                	mov    al,cl
c00172b4:	09 d0                	or     eax,edx
c00172b6:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00172bb:	83 ec 0c             	sub    esp,0xc
c00172be:	68 00 02 00 00       	push   0x200
c00172c3:	e8 86 fd ff ff       	call   c001704e <cpuidCheckECX(unsigned int)>
c00172c8:	83 c4 10             	add    esp,0x10
c00172cb:	83 e0 01             	and    eax,0x1
c00172ce:	89 c1                	mov    ecx,eax
c00172d0:	c1 e1 04             	shl    ecx,0x4
c00172d3:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c00172d8:	83 e0 ef             	and    eax,0xffffffef
c00172db:	88 c2                	mov    dl,al
c00172dd:	88 c8                	mov    al,cl
c00172df:	09 d0                	or     eax,edx
c00172e1:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	68 00 00 08 00       	push   0x80000
c00172ee:	e8 5b fd ff ff       	call   c001704e <cpuidCheckECX(unsigned int)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	83 e0 01             	and    eax,0x1
c00172f9:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017300:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017305:	83 e0 fb             	and    eax,0xfffffffb
c0017308:	88 c2                	mov    dl,al
c001730a:	88 c8                	mov    al,cl
c001730c:	09 d0                	or     eax,edx
c001730e:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017313:	83 ec 0c             	sub    esp,0xc
c0017316:	68 00 00 10 00       	push   0x100000
c001731b:	e8 2e fd ff ff       	call   c001704e <cpuidCheckECX(unsigned int)>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	83 e0 01             	and    eax,0x1
c0017326:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001732d:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017332:	83 e0 f7             	and    eax,0xfffffff7
c0017335:	88 c2                	mov    dl,al
c0017337:	88 c8                	mov    al,cl
c0017339:	09 d0                	or     eax,edx
c001733b:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017340:	83 ec 0c             	sub    esp,0xc
c0017343:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017347:	50                   	push   eax
c0017348:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001734c:	50                   	push   eax
c001734d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017351:	50                   	push   eax
c0017352:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017356:	50                   	push   eax
c0017357:	68 00 00 00 80       	push   0x80000000
c001735c:	e8 22 fc ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017361:	83 c4 20             	add    esp,0x20
c0017364:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017368:	3d 00 00 00 80       	cmp    eax,0x80000000
c001736d:	76 4b                	jbe    c00173ba <HalDetectFeatures()+0x2e2>
c001736f:	83 ec 0c             	sub    esp,0xc
c0017372:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017376:	50                   	push   eax
c0017377:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001737b:	50                   	push   eax
c001737c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017380:	50                   	push   eax
c0017381:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017385:	50                   	push   eax
c0017386:	68 01 00 00 80       	push   0x80000001
c001738b:	e8 f3 fb ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017390:	83 c4 20             	add    esp,0x20
c0017393:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017398:	83 e0 bf             	and    eax,0xffffffbf
c001739b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173a0:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173a5:	83 e0 fd             	and    eax,0xfffffffd
c00173a8:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173ad:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00173b2:	83 e0 fe             	and    eax,0xfffffffe
c00173b5:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00173ba:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c00173bf:	25 00 04 00 00       	and    eax,0x400
c00173c4:	74 0d                	je     c00173d3 <HalDetectFeatures()+0x2fb>
c00173c6:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173cb:	83 e0 fb             	and    eax,0xfffffffb
c00173ce:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00173d3:	c6 05 88 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d788,0x1
c00173da:	83 ec 04             	sub    esp,0x4
c00173dd:	6a 0d                	push   0xd
c00173df:	6a 00                	push   0x0
c00173e1:	68 70 d7 02 c0       	push   0xc002d770
c00173e6:	e8 05 91 fe ff       	call   c00004f0 <memset>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00173f3:	83 e0 02             	and    eax,0x2
c00173f6:	0f b6 c0             	movzx  eax,al
c00173f9:	85 c0                	test   eax,eax
c00173fb:	0f 84 16 08 00 00    	je     c0017c17 <HalDetectFeatures()+0xb3f>
c0017401:	83 ec 0c             	sub    esp,0xc
c0017404:	6a 10                	push   0x10
c0017406:	e8 16 fc ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	83 e0 01             	and    eax,0x1
c0017411:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017418:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001741d:	83 e0 f7             	and    eax,0xfffffff7
c0017420:	88 c2                	mov    dl,al
c0017422:	88 c8                	mov    al,cl
c0017424:	09 d0                	or     eax,edx
c0017426:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001742b:	83 ec 0c             	sub    esp,0xc
c001742e:	6a 40                	push   0x40
c0017430:	e8 ec fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017435:	83 c4 10             	add    esp,0x10
c0017438:	83 e0 01             	and    eax,0x1
c001743b:	89 c1                	mov    ecx,eax
c001743d:	c1 e1 04             	shl    ecx,0x4
c0017440:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017445:	83 e0 ef             	and    eax,0xffffffef
c0017448:	88 c2                	mov    dl,al
c001744a:	88 c8                	mov    al,cl
c001744c:	09 d0                	or     eax,edx
c001744e:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017453:	83 ec 0c             	sub    esp,0xc
c0017456:	6a 08                	push   0x8
c0017458:	e8 c4 fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	83 e0 01             	and    eax,0x1
c0017463:	89 c1                	mov    ecx,eax
c0017465:	c1 e1 05             	shl    ecx,0x5
c0017468:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001746d:	83 e0 df             	and    eax,0xffffffdf
c0017470:	88 c2                	mov    dl,al
c0017472:	88 c8                	mov    al,cl
c0017474:	09 d0                	or     eax,edx
c0017476:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c001747b:	83 ec 0c             	sub    esp,0xc
c001747e:	68 00 20 00 00       	push   0x2000
c0017483:	e8 99 fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017488:	83 c4 10             	add    esp,0x10
c001748b:	83 e0 01             	and    eax,0x1
c001748e:	89 c1                	mov    ecx,eax
c0017490:	c1 e1 06             	shl    ecx,0x6
c0017493:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017498:	83 e0 bf             	and    eax,0xffffffbf
c001749b:	88 c2                	mov    dl,al
c001749d:	88 c8                	mov    al,cl
c001749f:	09 d0                	or     eax,edx
c00174a1:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	68 00 00 01 00       	push   0x10000
c00174ae:	e8 6e fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	89 c1                	mov    ecx,eax
c00174b8:	c1 e1 07             	shl    ecx,0x7
c00174bb:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c00174c0:	83 e0 7f             	and    eax,0x7f
c00174c3:	88 c2                	mov    dl,al
c00174c5:	88 c8                	mov    al,cl
c00174c7:	09 d0                	or     eax,edx
c00174c9:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c00174ce:	83 ec 0c             	sub    esp,0xc
c00174d1:	6a 01                	push   0x1
c00174d3:	e8 49 fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	83 e0 01             	and    eax,0x1
c00174de:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00174e5:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c00174ea:	83 e0 f7             	and    eax,0xfffffff7
c00174ed:	88 c2                	mov    dl,al
c00174ef:	88 c8                	mov    al,cl
c00174f1:	09 d0                	or     eax,edx
c00174f3:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c00174f8:	83 ec 0c             	sub    esp,0xc
c00174fb:	68 00 08 00 00       	push   0x800
c0017500:	e8 1c fb ff ff       	call   c0017021 <cpuidCheckEDX(unsigned int)>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	89 c1                	mov    ecx,eax
c001750a:	83 e1 01             	and    ecx,0x1
c001750d:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017512:	83 e0 fe             	and    eax,0xfffffffe
c0017515:	88 c2                	mov    dl,al
c0017517:	88 c8                	mov    al,cl
c0017519:	09 d0                	or     eax,edx
c001751b:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017520:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017525:	83 e0 40             	and    eax,0x40
c0017528:	0f b6 c0             	movzx  eax,al
c001752b:	85 c0                	test   eax,eax
c001752d:	74 0a                	je     c0017539 <HalDetectFeatures()+0x461>
c001752f:	c7 05 68 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d768,0x100
c0017539:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c001753e:	83 e0 80             	and    eax,0xffffff80
c0017541:	0f b6 c0             	movzx  eax,al
c0017544:	85 c0                	test   eax,eax
c0017546:	74 0a                	je     c0017552 <HalDetectFeatures()+0x47a>
c0017548:	c7 05 64 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d764,0x80
c0017552:	83 ec 0c             	sub    esp,0xc
c0017555:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017559:	50                   	push   eax
c001755a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001755e:	50                   	push   eax
c001755f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017563:	50                   	push   eax
c0017564:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017568:	50                   	push   eax
c0017569:	6a 00                	push   0x0
c001756b:	e8 13 fa ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017570:	83 c4 20             	add    esp,0x20
c0017573:	c7 44 24 48 70 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d770
c001757b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001757f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017583:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001758b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001758f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017593:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017597:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001759b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001759f:	89 c6                	mov    esi,eax
c00175a1:	89 d7                	mov    edi,edx
c00175a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175a5:	89 c8                	mov    eax,ecx
c00175a7:	89 fa                	mov    edx,edi
c00175a9:	89 f3                	mov    ebx,esi
c00175ab:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00175af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175b3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175b7:	b8 74 d7 02 c0       	mov    eax,0xc002d774
c00175bc:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00175c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00175c8:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00175d0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00175d4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00175d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00175dc:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00175e0:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00175e4:	89 c6                	mov    esi,eax
c00175e6:	89 d7                	mov    edi,edx
c00175e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175ea:	89 c8                	mov    eax,ecx
c00175ec:	89 fa                	mov    edx,edi
c00175ee:	89 f3                	mov    ebx,esi
c00175f0:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c00175f4:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c00175f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175fc:	b8 78 d7 02 c0       	mov    eax,0xc002d778
c0017601:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017608:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001760c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017610:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017618:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001761f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017623:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017627:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001762e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0017632:	89 c6                	mov    esi,eax
c0017634:	89 d7                	mov    edi,edx
c0017636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017638:	89 c8                	mov    eax,ecx
c001763a:	89 fa                	mov    edx,edi
c001763c:	89 f3                	mov    ebx,esi
c001763e:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017642:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017646:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001764a:	83 ec 08             	sub    esp,0x8
c001764d:	68 6e 37 02 c0       	push   0xc002376e
c0017652:	68 70 d7 02 c0       	push   0xc002d770
c0017657:	e8 f4 90 fe ff       	call   c0000750 <strcmp>
c001765c:	83 c4 10             	add    esp,0x10
c001765f:	85 c0                	test   eax,eax
c0017661:	74 19                	je     c001767c <HalDetectFeatures()+0x5a4>
c0017663:	83 ec 08             	sub    esp,0x8
c0017666:	68 7b 37 02 c0       	push   0xc002377b
c001766b:	68 70 d7 02 c0       	push   0xc002d770
c0017670:	e8 db 90 fe ff       	call   c0000750 <strcmp>
c0017675:	83 c4 10             	add    esp,0x10
c0017678:	85 c0                	test   eax,eax
c001767a:	75 04                	jne    c0017680 <HalDetectFeatures()+0x5a8>
c001767c:	b0 01                	mov    al,0x1
c001767e:	eb 02                	jmp    c0017682 <HalDetectFeatures()+0x5aa>
c0017680:	b0 00                	mov    al,0x0
c0017682:	0f b6 c0             	movzx  eax,al
c0017685:	85 c0                	test   eax,eax
c0017687:	74 0f                	je     c0017698 <HalDetectFeatures()+0x5c0>
c0017689:	c7 05 84 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x2
c0017693:	e9 0d 03 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017698:	83 ec 08             	sub    esp,0x8
c001769b:	68 88 37 02 c0       	push   0xc0023788
c00176a0:	68 70 d7 02 c0       	push   0xc002d770
c00176a5:	e8 a6 90 fe ff       	call   c0000750 <strcmp>
c00176aa:	83 c4 10             	add    esp,0x10
c00176ad:	85 c0                	test   eax,eax
c00176af:	74 19                	je     c00176ca <HalDetectFeatures()+0x5f2>
c00176b1:	83 ec 08             	sub    esp,0x8
c00176b4:	68 95 37 02 c0       	push   0xc0023795
c00176b9:	68 70 d7 02 c0       	push   0xc002d770
c00176be:	e8 8d 90 fe ff       	call   c0000750 <strcmp>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	85 c0                	test   eax,eax
c00176c8:	75 04                	jne    c00176ce <HalDetectFeatures()+0x5f6>
c00176ca:	b0 01                	mov    al,0x1
c00176cc:	eb 02                	jmp    c00176d0 <HalDetectFeatures()+0x5f8>
c00176ce:	b0 00                	mov    al,0x0
c00176d0:	0f b6 c0             	movzx  eax,al
c00176d3:	85 c0                	test   eax,eax
c00176d5:	74 0f                	je     c00176e6 <HalDetectFeatures()+0x60e>
c00176d7:	c7 05 84 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x4
c00176e1:	e9 bf 02 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c00176e6:	83 ec 08             	sub    esp,0x8
c00176e9:	68 a2 37 02 c0       	push   0xc00237a2
c00176ee:	68 70 d7 02 c0       	push   0xc002d770
c00176f3:	e8 58 90 fe ff       	call   c0000750 <strcmp>
c00176f8:	83 c4 10             	add    esp,0x10
c00176fb:	85 c0                	test   eax,eax
c00176fd:	74 19                	je     c0017718 <HalDetectFeatures()+0x640>
c00176ff:	83 ec 08             	sub    esp,0x8
c0017702:	68 af 37 02 c0       	push   0xc00237af
c0017707:	68 70 d7 02 c0       	push   0xc002d770
c001770c:	e8 3f 90 fe ff       	call   c0000750 <strcmp>
c0017711:	83 c4 10             	add    esp,0x10
c0017714:	85 c0                	test   eax,eax
c0017716:	75 04                	jne    c001771c <HalDetectFeatures()+0x644>
c0017718:	b0 01                	mov    al,0x1
c001771a:	eb 02                	jmp    c001771e <HalDetectFeatures()+0x646>
c001771c:	b0 00                	mov    al,0x0
c001771e:	0f b6 c0             	movzx  eax,al
c0017721:	85 c0                	test   eax,eax
c0017723:	74 0f                	je     c0017734 <HalDetectFeatures()+0x65c>
c0017725:	c7 05 84 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x5
c001772f:	e9 71 02 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017734:	83 ec 08             	sub    esp,0x8
c0017737:	68 bc 37 02 c0       	push   0xc00237bc
c001773c:	68 70 d7 02 c0       	push   0xc002d770
c0017741:	e8 0a 90 fe ff       	call   c0000750 <strcmp>
c0017746:	83 c4 10             	add    esp,0x10
c0017749:	85 c0                	test   eax,eax
c001774b:	0f 94 c0             	sete   al
c001774e:	0f b6 c0             	movzx  eax,al
c0017751:	85 c0                	test   eax,eax
c0017753:	74 0f                	je     c0017764 <HalDetectFeatures()+0x68c>
c0017755:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c001775f:	e9 41 02 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017764:	83 ec 08             	sub    esp,0x8
c0017767:	68 c9 37 02 c0       	push   0xc00237c9
c001776c:	68 70 d7 02 c0       	push   0xc002d770
c0017771:	e8 da 8f fe ff       	call   c0000750 <strcmp>
c0017776:	83 c4 10             	add    esp,0x10
c0017779:	85 c0                	test   eax,eax
c001777b:	0f 94 c0             	sete   al
c001777e:	0f b6 c0             	movzx  eax,al
c0017781:	85 c0                	test   eax,eax
c0017783:	74 0f                	je     c0017794 <HalDetectFeatures()+0x6bc>
c0017785:	c7 05 84 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x3
c001778f:	e9 11 02 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017794:	83 ec 08             	sub    esp,0x8
c0017797:	68 88 37 02 c0       	push   0xc0023788
c001779c:	68 70 d7 02 c0       	push   0xc002d770
c00177a1:	e8 aa 8f fe ff       	call   c0000750 <strcmp>
c00177a6:	83 c4 10             	add    esp,0x10
c00177a9:	85 c0                	test   eax,eax
c00177ab:	0f 94 c0             	sete   al
c00177ae:	0f b6 c0             	movzx  eax,al
c00177b1:	85 c0                	test   eax,eax
c00177b3:	74 0f                	je     c00177c4 <HalDetectFeatures()+0x6ec>
c00177b5:	c7 05 84 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x6
c00177bf:	e9 e1 01 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c00177c4:	83 ec 08             	sub    esp,0x8
c00177c7:	68 d6 37 02 c0       	push   0xc00237d6
c00177cc:	68 70 d7 02 c0       	push   0xc002d770
c00177d1:	e8 7a 8f fe ff       	call   c0000750 <strcmp>
c00177d6:	83 c4 10             	add    esp,0x10
c00177d9:	85 c0                	test   eax,eax
c00177db:	0f 94 c0             	sete   al
c00177de:	0f b6 c0             	movzx  eax,al
c00177e1:	85 c0                	test   eax,eax
c00177e3:	74 0f                	je     c00177f4 <HalDetectFeatures()+0x71c>
c00177e5:	c7 05 84 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x7
c00177ef:	e9 b1 01 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c00177f4:	83 ec 08             	sub    esp,0x8
c00177f7:	68 e3 37 02 c0       	push   0xc00237e3
c00177fc:	68 70 d7 02 c0       	push   0xc002d770
c0017801:	e8 4a 8f fe ff       	call   c0000750 <strcmp>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	85 c0                	test   eax,eax
c001780b:	0f 94 c0             	sete   al
c001780e:	0f b6 c0             	movzx  eax,al
c0017811:	85 c0                	test   eax,eax
c0017813:	74 0f                	je     c0017824 <HalDetectFeatures()+0x74c>
c0017815:	c7 05 84 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x8
c001781f:	e9 81 01 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017824:	83 ec 08             	sub    esp,0x8
c0017827:	68 f0 37 02 c0       	push   0xc00237f0
c001782c:	68 70 d7 02 c0       	push   0xc002d770
c0017831:	e8 1a 8f fe ff       	call   c0000750 <strcmp>
c0017836:	83 c4 10             	add    esp,0x10
c0017839:	85 c0                	test   eax,eax
c001783b:	0f 94 c0             	sete   al
c001783e:	0f b6 c0             	movzx  eax,al
c0017841:	85 c0                	test   eax,eax
c0017843:	74 0f                	je     c0017854 <HalDetectFeatures()+0x77c>
c0017845:	c7 05 84 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x9
c001784f:	e9 51 01 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017854:	83 ec 08             	sub    esp,0x8
c0017857:	68 fd 37 02 c0       	push   0xc00237fd
c001785c:	68 70 d7 02 c0       	push   0xc002d770
c0017861:	e8 ea 8e fe ff       	call   c0000750 <strcmp>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	85 c0                	test   eax,eax
c001786b:	0f 94 c0             	sete   al
c001786e:	0f b6 c0             	movzx  eax,al
c0017871:	85 c0                	test   eax,eax
c0017873:	74 0f                	je     c0017884 <HalDetectFeatures()+0x7ac>
c0017875:	c7 05 84 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xa
c001787f:	e9 21 01 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017884:	83 ec 08             	sub    esp,0x8
c0017887:	68 0a 38 02 c0       	push   0xc002380a
c001788c:	68 70 d7 02 c0       	push   0xc002d770
c0017891:	e8 ba 8e fe ff       	call   c0000750 <strcmp>
c0017896:	83 c4 10             	add    esp,0x10
c0017899:	85 c0                	test   eax,eax
c001789b:	0f 94 c0             	sete   al
c001789e:	0f b6 c0             	movzx  eax,al
c00178a1:	85 c0                	test   eax,eax
c00178a3:	74 0f                	je     c00178b4 <HalDetectFeatures()+0x7dc>
c00178a5:	c7 05 84 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xb
c00178af:	e9 f1 00 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c00178b4:	83 ec 08             	sub    esp,0x8
c00178b7:	68 17 38 02 c0       	push   0xc0023817
c00178bc:	68 70 d7 02 c0       	push   0xc002d770
c00178c1:	e8 8a 8e fe ff       	call   c0000750 <strcmp>
c00178c6:	83 c4 10             	add    esp,0x10
c00178c9:	85 c0                	test   eax,eax
c00178cb:	0f 94 c0             	sete   al
c00178ce:	0f b6 c0             	movzx  eax,al
c00178d1:	85 c0                	test   eax,eax
c00178d3:	74 0f                	je     c00178e4 <HalDetectFeatures()+0x80c>
c00178d5:	c7 05 84 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xc
c00178df:	e9 c1 00 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c00178e4:	83 ec 08             	sub    esp,0x8
c00178e7:	68 24 38 02 c0       	push   0xc0023824
c00178ec:	68 70 d7 02 c0       	push   0xc002d770
c00178f1:	e8 5a 8e fe ff       	call   c0000750 <strcmp>
c00178f6:	83 c4 10             	add    esp,0x10
c00178f9:	85 c0                	test   eax,eax
c00178fb:	0f 94 c0             	sete   al
c00178fe:	0f b6 c0             	movzx  eax,al
c0017901:	85 c0                	test   eax,eax
c0017903:	74 0f                	je     c0017914 <HalDetectFeatures()+0x83c>
c0017905:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001790f:	e9 91 00 00 00       	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017914:	83 ec 08             	sub    esp,0x8
c0017917:	68 31 38 02 c0       	push   0xc0023831
c001791c:	68 70 d7 02 c0       	push   0xc002d770
c0017921:	e8 2a 8e fe ff       	call   c0000750 <strcmp>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	85 c0                	test   eax,eax
c001792b:	0f 94 c0             	sete   al
c001792e:	0f b6 c0             	movzx  eax,al
c0017931:	85 c0                	test   eax,eax
c0017933:	74 0c                	je     c0017941 <HalDetectFeatures()+0x869>
c0017935:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001793f:	eb 64                	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c0017941:	83 ec 08             	sub    esp,0x8
c0017944:	68 3e 38 02 c0       	push   0xc002383e
c0017949:	68 70 d7 02 c0       	push   0xc002d770
c001794e:	e8 fd 8d fe ff       	call   c0000750 <strcmp>
c0017953:	83 c4 10             	add    esp,0x10
c0017956:	85 c0                	test   eax,eax
c0017958:	0f 94 c0             	sete   al
c001795b:	0f b6 c0             	movzx  eax,al
c001795e:	85 c0                	test   eax,eax
c0017960:	74 0c                	je     c001796e <HalDetectFeatures()+0x896>
c0017962:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c001796c:	eb 37                	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c001796e:	83 ec 08             	sub    esp,0x8
c0017971:	68 4b 38 02 c0       	push   0xc002384b
c0017976:	68 70 d7 02 c0       	push   0xc002d770
c001797b:	e8 d0 8d fe ff       	call   c0000750 <strcmp>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	85 c0                	test   eax,eax
c0017985:	0f 94 c0             	sete   al
c0017988:	0f b6 c0             	movzx  eax,al
c001798b:	85 c0                	test   eax,eax
c001798d:	74 0c                	je     c001799b <HalDetectFeatures()+0x8c3>
c001798f:	c7 05 84 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d784,0xd
c0017999:	eb 0a                	jmp    c00179a5 <HalDetectFeatures()+0x8cd>
c001799b:	c7 05 84 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x0
c00179a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00179a9:	83 f8 06             	cmp    eax,0x6
c00179ac:	0f 86 cc 00 00 00    	jbe    c0017a7e <HalDetectFeatures()+0x9a6>
c00179b2:	83 ec 0c             	sub    esp,0xc
c00179b5:	68 80 00 00 00       	push   0x80
c00179ba:	e8 bd f6 ff ff       	call   c001707c <cpuidCheckExtendedEBX(unsigned int)>
c00179bf:	83 c4 10             	add    esp,0x10
c00179c2:	89 c1                	mov    ecx,eax
c00179c4:	83 e1 01             	and    ecx,0x1
c00179c7:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c00179cc:	83 e0 fe             	and    eax,0xfffffffe
c00179cf:	88 c2                	mov    dl,al
c00179d1:	88 c8                	mov    al,cl
c00179d3:	09 d0                	or     eax,edx
c00179d5:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c00179da:	83 ec 0c             	sub    esp,0xc
c00179dd:	68 00 00 10 00       	push   0x100000
c00179e2:	e8 95 f6 ff ff       	call   c001707c <cpuidCheckExtendedEBX(unsigned int)>
c00179e7:	83 c4 10             	add    esp,0x10
c00179ea:	83 e0 01             	and    eax,0x1
c00179ed:	89 c1                	mov    ecx,eax
c00179ef:	c1 e1 06             	shl    ecx,0x6
c00179f2:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c00179f7:	83 e0 bf             	and    eax,0xffffffbf
c00179fa:	88 c2                	mov    dl,al
c00179fc:	88 c8                	mov    al,cl
c00179fe:	09 d0                	or     eax,edx
c0017a00:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a05:	83 ec 0c             	sub    esp,0xc
c0017a08:	68 00 00 04 00       	push   0x40000
c0017a0d:	e8 6a f6 ff ff       	call   c001707c <cpuidCheckExtendedEBX(unsigned int)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	83 e0 01             	and    eax,0x1
c0017a18:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017a1b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017a20:	83 e0 fd             	and    eax,0xfffffffd
c0017a23:	88 c2                	mov    dl,al
c0017a25:	88 c8                	mov    al,cl
c0017a27:	09 d0                	or     eax,edx
c0017a29:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a2e:	83 ec 0c             	sub    esp,0xc
c0017a31:	6a 04                	push   0x4
c0017a33:	e8 72 f6 ff ff       	call   c00170aa <cpuidCheckExtendedECX(unsigned int)>
c0017a38:	83 c4 10             	add    esp,0x10
c0017a3b:	83 e0 01             	and    eax,0x1
c0017a3e:	89 c1                	mov    ecx,eax
c0017a40:	c1 e1 05             	shl    ecx,0x5
c0017a43:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017a48:	83 e0 df             	and    eax,0xffffffdf
c0017a4b:	88 c2                	mov    dl,al
c0017a4d:	88 c8                	mov    al,cl
c0017a4f:	09 d0                	or     eax,edx
c0017a51:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	6a 20                	push   0x20
c0017a5b:	e8 4a f6 ff ff       	call   c00170aa <cpuidCheckExtendedECX(unsigned int)>
c0017a60:	83 c4 10             	add    esp,0x10
c0017a63:	83 e0 01             	and    eax,0x1
c0017a66:	89 c1                	mov    ecx,eax
c0017a68:	c1 e1 04             	shl    ecx,0x4
c0017a6b:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017a70:	83 e0 ef             	and    eax,0xffffffef
c0017a73:	88 c2                	mov    dl,al
c0017a75:	88 c8                	mov    al,cl
c0017a77:	09 d0                	or     eax,edx
c0017a79:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017a7e:	83 ec 0c             	sub    esp,0xc
c0017a81:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017a85:	50                   	push   eax
c0017a86:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017a8a:	50                   	push   eax
c0017a8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017a8f:	50                   	push   eax
c0017a90:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017a94:	50                   	push   eax
c0017a95:	6a 01                	push   0x1
c0017a97:	e8 e7 f4 ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017a9c:	83 c4 20             	add    esp,0x20
c0017a9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa3:	83 e0 0f             	and    eax,0xf
c0017aa6:	a2 80 d7 02 c0       	mov    ds:0xc002d780,al
c0017aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aaf:	c1 e8 04             	shr    eax,0x4
c0017ab2:	83 e0 0f             	and    eax,0xf
c0017ab5:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017aba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017abe:	c1 e8 08             	shr    eax,0x8
c0017ac1:	83 e0 0f             	and    eax,0xf
c0017ac4:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017ac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017acd:	c1 e8 0c             	shr    eax,0xc
c0017ad0:	83 e0 03             	and    eax,0x3
c0017ad3:	a2 7f d7 02 c0       	mov    ds:0xc002d77f,al
c0017ad8:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017add:	0f b6 c0             	movzx  eax,al
c0017ae0:	83 f8 06             	cmp    eax,0x6
c0017ae3:	74 0d                	je     c0017af2 <HalDetectFeatures()+0xa1a>
c0017ae5:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017aea:	0f b6 c0             	movzx  eax,al
c0017aed:	83 f8 0f             	cmp    eax,0xf
c0017af0:	75 18                	jne    c0017b0a <HalDetectFeatures()+0xa32>
c0017af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017af6:	c1 e8 10             	shr    eax,0x10
c0017af9:	c1 e0 04             	shl    eax,0x4
c0017afc:	88 c2                	mov    dl,al
c0017afe:	a0 7e d7 02 c0       	mov    al,ds:0xc002d77e
c0017b03:	09 d0                	or     eax,edx
c0017b05:	a2 7e d7 02 c0       	mov    ds:0xc002d77e,al
c0017b0a:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017b0f:	0f b6 c0             	movzx  eax,al
c0017b12:	83 f8 0f             	cmp    eax,0xf
c0017b15:	75 15                	jne    c0017b2c <HalDetectFeatures()+0xa54>
c0017b17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b1b:	c1 e8 14             	shr    eax,0x14
c0017b1e:	88 c2                	mov    dl,al
c0017b20:	a0 7d d7 02 c0       	mov    al,ds:0xc002d77d
c0017b25:	01 d0                	add    eax,edx
c0017b27:	a2 7d d7 02 c0       	mov    ds:0xc002d77d,al
c0017b2c:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017b34:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0017b3c:	85 c0                	test   eax,eax
c0017b3e:	74 2d                	je     c0017b6d <HalDetectFeatures()+0xa95>
c0017b40:	83 ec 0c             	sub    esp,0xc
c0017b43:	68 00 00 00 40       	push   0x40000000
c0017b48:	e8 01 f5 ff ff       	call   c001704e <cpuidCheckECX(unsigned int)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	83 e0 01             	and    eax,0x1
c0017b53:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017b5a:	a0 8e d7 02 c0       	mov    al,ds:0xc002d78e
c0017b5f:	83 e0 fb             	and    eax,0xfffffffb
c0017b62:	88 c2                	mov    dl,al
c0017b64:	88 c8                	mov    al,cl
c0017b66:	09 d0                	or     eax,edx
c0017b68:	a2 8e d7 02 c0       	mov    ds:0xc002d78e,al
c0017b6d:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b72:	83 c8 04             	or     eax,0x4
c0017b75:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b7a:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b7f:	83 c8 08             	or     eax,0x8
c0017b82:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b87:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017b8c:	83 c8 10             	or     eax,0x10
c0017b8f:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017b94:	83 ec 0c             	sub    esp,0xc
c0017b97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b9b:	50                   	push   eax
c0017b9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017ba0:	50                   	push   eax
c0017ba1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017ba5:	50                   	push   eax
c0017ba6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017baa:	50                   	push   eax
c0017bab:	68 00 00 00 80       	push   0x80000000
c0017bb0:	e8 ce f3 ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017bb5:	83 c4 20             	add    esp,0x20
c0017bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bbc:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017bc1:	0f 86 96 01 00 00    	jbe    c0017d5d <HalDetectFeatures()+0xc85>
c0017bc7:	83 ec 0c             	sub    esp,0xc
c0017bca:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017bce:	50                   	push   eax
c0017bcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017bd3:	50                   	push   eax
c0017bd4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017bd8:	50                   	push   eax
c0017bd9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017bdd:	50                   	push   eax
c0017bde:	68 01 00 00 80       	push   0x80000001
c0017be3:	e8 9b f3 ff ff       	call   c0016f83 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017be8:	83 c4 20             	add    esp,0x20
c0017beb:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017bf0:	83 e0 7f             	and    eax,0x7f
c0017bf3:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017bf8:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017bfd:	83 e0 fb             	and    eax,0xfffffffb
c0017c00:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c05:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017c0a:	83 e0 fd             	and    eax,0xfffffffd
c0017c0d:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017c12:	e9 46 01 00 00       	jmp    c0017d5d <HalDetectFeatures()+0xc85>
c0017c17:	83 ec 08             	sub    esp,0x8
c0017c1a:	68 bc 37 02 c0       	push   0xc00237bc
c0017c1f:	68 70 d7 02 c0       	push   0xc002d770
c0017c24:	e8 17 8a fe ff       	call   c0000640 <strcpy>
c0017c29:	83 c4 10             	add    esp,0x10
c0017c2c:	c7 05 84 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x1
c0017c36:	e8 88 85 fe ff       	call   c00001c3 <is486>
c0017c3b:	85 c0                	test   eax,eax
c0017c3d:	0f 95 c0             	setne  al
c0017c40:	0f b6 c0             	movzx  eax,al
c0017c43:	85 c0                	test   eax,eax
c0017c45:	0f 84 8d 00 00 00    	je     c0017cd8 <HalDetectFeatures()+0xc00>
c0017c4b:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c50:	83 c8 04             	or     eax,0x4
c0017c53:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c58:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c5d:	83 c8 08             	or     eax,0x8
c0017c60:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c65:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017c6a:	83 c8 10             	or     eax,0x10
c0017c6d:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017c72:	0f 20 c0             	mov    eax,cr0
c0017c75:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017c79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c7d:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017c84:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017c8b:	83 e0 04             	and    eax,0x4
c0017c8e:	74 1e                	je     c0017cae <HalDetectFeatures()+0xbd6>
c0017c90:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017c97:	83 e0 10             	and    eax,0x10
c0017c9a:	75 12                	jne    c0017cae <HalDetectFeatures()+0xbd6>
c0017c9c:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017ca1:	83 e0 f7             	and    eax,0xfffffff7
c0017ca4:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017ca9:	e9 af 00 00 00       	jmp    c0017d5d <HalDetectFeatures()+0xc85>
c0017cae:	e8 eb 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017cb3:	83 e0 01             	and    eax,0x1
c0017cb6:	83 e0 01             	and    eax,0x1
c0017cb9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017cc0:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017cc5:	83 e0 f7             	and    eax,0xfffffff7
c0017cc8:	88 c2                	mov    dl,al
c0017cca:	88 c8                	mov    al,cl
c0017ccc:	09 d0                	or     eax,edx
c0017cce:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017cd3:	e9 85 00 00 00       	jmp    c0017d5d <HalDetectFeatures()+0xc85>
c0017cd8:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cdd:	83 e0 fb             	and    eax,0xfffffffb
c0017ce0:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017ce5:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cea:	83 e0 f7             	and    eax,0xfffffff7
c0017ced:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017cf2:	a0 8f d7 02 c0       	mov    al,ds:0xc002d78f
c0017cf7:	83 e0 ef             	and    eax,0xffffffef
c0017cfa:	a2 8f d7 02 c0       	mov    ds:0xc002d78f,al
c0017cff:	0f 20 c0             	mov    eax,cr0
c0017d02:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017d06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d0a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017d11:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017d18:	83 e0 04             	and    eax,0x4
c0017d1b:	74 1b                	je     c0017d38 <HalDetectFeatures()+0xc60>
c0017d1d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017d24:	83 e0 10             	and    eax,0x10
c0017d27:	75 0f                	jne    c0017d38 <HalDetectFeatures()+0xc60>
c0017d29:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d2e:	83 e0 f7             	and    eax,0xfffffff7
c0017d31:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d36:	eb 25                	jmp    c0017d5d <HalDetectFeatures()+0xc85>
c0017d38:	e8 61 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017d3d:	83 e0 01             	and    eax,0x1
c0017d40:	83 e0 01             	and    eax,0x1
c0017d43:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017d4a:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d4f:	83 e0 f7             	and    eax,0xfffffff7
c0017d52:	88 c2                	mov    dl,al
c0017d54:	88 c8                	mov    al,cl
c0017d56:	09 d0                	or     eax,edx
c0017d58:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d5d:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d62:	83 e0 08             	and    eax,0x8
c0017d65:	0f b6 c0             	movzx  eax,al
c0017d68:	85 c0                	test   eax,eax
c0017d6a:	75 25                	jne    c0017d91 <HalDetectFeatures()+0xcb9>
c0017d6c:	e8 2d 84 fe ff       	call   c000019e <hasLegacyFPU>
c0017d71:	83 e0 01             	and    eax,0x1
c0017d74:	83 e0 01             	and    eax,0x1
c0017d77:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017d7e:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d83:	83 e0 f7             	and    eax,0xfffffff7
c0017d86:	88 c2                	mov    dl,al
c0017d88:	88 c8                	mov    al,cl
c0017d8a:	09 d0                	or     eax,edx
c0017d8c:	a2 90 d7 02 c0       	mov    ds:0xc002d790,al
c0017d91:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c0017d96:	83 e0 08             	and    eax,0x8
c0017d99:	0f b6 c0             	movzx  eax,al
c0017d9c:	85 c0                	test   eax,eax
c0017d9e:	74 0d                	je     c0017dad <HalDetectFeatures()+0xcd5>
c0017da0:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017da5:	83 c8 10             	or     eax,0x10
c0017da8:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017dad:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017db2:	83 e0 10             	and    eax,0x10
c0017db5:	0f b6 c0             	movzx  eax,al
c0017db8:	85 c0                	test   eax,eax
c0017dba:	75 23                	jne    c0017ddf <HalDetectFeatures()+0xd07>
c0017dbc:	e8 65 7f 00 00       	call   c001fd26 <x87Detect>
c0017dc1:	83 e0 01             	and    eax,0x1
c0017dc4:	83 e0 01             	and    eax,0x1
c0017dc7:	89 c1                	mov    ecx,eax
c0017dc9:	c1 e1 04             	shl    ecx,0x4
c0017dcc:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017dd1:	83 e0 ef             	and    eax,0xffffffef
c0017dd4:	88 c2                	mov    dl,al
c0017dd6:	88 c8                	mov    al,cl
c0017dd8:	09 d0                	or     eax,edx
c0017dda:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017ddf:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017de4:	83 e0 01             	and    eax,0x1
c0017de7:	0f b6 c0             	movzx  eax,al
c0017dea:	85 c0                	test   eax,eax
c0017dec:	75 2d                	jne    c0017e1b <HalDetectFeatures()+0xd43>
c0017dee:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017df3:	83 e0 02             	and    eax,0x2
c0017df6:	0f b6 c0             	movzx  eax,al
c0017df9:	85 c0                	test   eax,eax
c0017dfb:	75 1e                	jne    c0017e1b <HalDetectFeatures()+0xd43>
c0017dfd:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e02:	83 e0 04             	and    eax,0x4
c0017e05:	0f b6 c0             	movzx  eax,al
c0017e08:	85 c0                	test   eax,eax
c0017e0a:	75 0f                	jne    c0017e1b <HalDetectFeatures()+0xd43>
c0017e0c:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e11:	83 e0 08             	and    eax,0x8
c0017e14:	0f b6 c0             	movzx  eax,al
c0017e17:	85 c0                	test   eax,eax
c0017e19:	74 0d                	je     c0017e28 <HalDetectFeatures()+0xd50>
c0017e1b:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e20:	83 c8 80             	or     eax,0xffffff80
c0017e23:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017e28:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e2d:	83 e0 10             	and    eax,0x10
c0017e30:	0f b6 c0             	movzx  eax,al
c0017e33:	85 c0                	test   eax,eax
c0017e35:	74 2f                	je     c0017e66 <HalDetectFeatures()+0xd8e>
c0017e37:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e3c:	83 e0 80             	and    eax,0xffffff80
c0017e3f:	0f b6 c0             	movzx  eax,al
c0017e42:	85 c0                	test   eax,eax
c0017e44:	75 20                	jne    c0017e66 <HalDetectFeatures()+0xd8e>
c0017e46:	e8 95 7e 00 00       	call   c001fce0 <sseDetect>
c0017e4b:	83 e0 01             	and    eax,0x1
c0017e4e:	89 c1                	mov    ecx,eax
c0017e50:	c1 e1 07             	shl    ecx,0x7
c0017e53:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e58:	83 e0 7f             	and    eax,0x7f
c0017e5b:	88 c2                	mov    dl,al
c0017e5d:	88 c8                	mov    al,cl
c0017e5f:	09 d0                	or     eax,edx
c0017e61:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017e66:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017e6b:	83 e0 80             	and    eax,0xffffff80
c0017e6e:	0f b6 c0             	movzx  eax,al
c0017e71:	85 c0                	test   eax,eax
c0017e73:	74 1c                	je     c0017e91 <HalDetectFeatures()+0xdb9>
c0017e75:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e7a:	83 e0 20             	and    eax,0x20
c0017e7d:	0f b6 c0             	movzx  eax,al
c0017e80:	85 c0                	test   eax,eax
c0017e82:	75 0d                	jne    c0017e91 <HalDetectFeatures()+0xdb9>
c0017e84:	a0 8d d7 02 c0       	mov    al,ds:0xc002d78d
c0017e89:	83 e0 df             	and    eax,0xffffffdf
c0017e8c:	a2 8d d7 02 c0       	mov    ds:0xc002d78d,al
c0017e91:	c6 05 88 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d788,0x0
c0017e98:	90                   	nop
c0017e99:	81 c4 90 00 00 00    	add    esp,0x90
c0017e9f:	5b                   	pop    ebx
c0017ea0:	5e                   	pop    esi
c0017ea1:	5f                   	pop    edi
c0017ea2:	c3                   	ret    

c0017ea3 <HalEnableNMI()>:
c0017ea3:	c6 05 6c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d76c,0x1
c0017eaa:	6a 10                	push   0x10
c0017eac:	e8 22 ef ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c0017eb1:	83 c4 04             	add    esp,0x4
c0017eb4:	90                   	nop
c0017eb5:	c3                   	ret    

c0017eb6 <HalDisableNMI()>:
c0017eb6:	c6 05 6c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d76c,0x0
c0017ebd:	6a 10                	push   0x10
c0017ebf:	e8 0f ef ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c0017ec4:	83 c4 04             	add    esp,0x4
c0017ec7:	90                   	nop
c0017ec8:	c3                   	ret    

c0017ec9 <HalGetNMIState()>:
c0017ec9:	a0 6c d7 02 c0       	mov    al,ds:0xc002d76c
c0017ece:	c3                   	ret    

c0017ecf <x86rdmsr(unsigned int)>:
c0017ecf:	83 ec 1c             	sub    esp,0x1c
c0017ed2:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017ed7:	83 e0 08             	and    eax,0x8
c0017eda:	0f b6 c0             	movzx  eax,al
c0017edd:	85 c0                	test   eax,eax
c0017edf:	75 10                	jne    c0017ef1 <x86rdmsr(unsigned int)+0x22>
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	68 57 38 02 c0       	push   0xc0023857
c0017ee9:	e8 b8 6d ff ff       	call   c000eca6 <KePanic(char const*)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef5:	89 c1                	mov    ecx,eax
c0017ef7:	0f 32                	rdmsr  
c0017ef9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017efd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f09:	83 c4 1c             	add    esp,0x1c
c0017f0c:	c3                   	ret    

c0017f0d <x86wrmsr(unsigned int, unsigned long long)>:
c0017f0d:	83 ec 1c             	sub    esp,0x1c
c0017f10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f20:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f25:	83 e0 08             	and    eax,0x8
c0017f28:	0f b6 c0             	movzx  eax,al
c0017f2b:	85 c0                	test   eax,eax
c0017f2d:	75 10                	jne    c0017f3f <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	68 5d 38 02 c0       	push   0xc002385d
c0017f37:	e8 6a 6d ff ff       	call   c000eca6 <KePanic(char const*)>
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017f43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017f4b:	0f 30                	wrmsr  
c0017f4d:	90                   	nop
c0017f4e:	83 c4 1c             	add    esp,0x1c
c0017f51:	c3                   	ret    

c0017f52 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017f52:	83 ec 0c             	sub    esp,0xc
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f5c:	e8 48 e7 ff ff       	call   c00166a9 <Vm::faultHandler(regs*)>
c0017f61:	83 c4 10             	add    esp,0x10
c0017f64:	83 c4 0c             	add    esp,0xc
c0017f67:	c3                   	ret    

c0017f68 <HalFindRSDP()>:
c0017f68:	83 ec 1c             	sub    esp,0x1c
c0017f6b:	a1 ac cd 02 c0       	mov    eax,ds:0xc002cdac
c0017f70:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017f75:	7e 0c                	jle    c0017f83 <HalFindRSDP()+0x1b>
c0017f77:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0017f7c:	25 00 04 00 00       	and    eax,0x400
c0017f81:	74 0d                	je     c0017f90 <HalFindRSDP()+0x28>
c0017f83:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f88:	83 e0 fb             	and    eax,0xfffffffb
c0017f8b:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017f90:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017f95:	83 e0 04             	and    eax,0x4
c0017f98:	0f b6 c0             	movzx  eax,al
c0017f9b:	85 c0                	test   eax,eax
c0017f9d:	75 07                	jne    c0017fa6 <HalFindRSDP()+0x3e>
c0017f9f:	b8 00 00 00 00       	mov    eax,0x0
c0017fa4:	eb 53                	jmp    c0017ff9 <HalFindRSDP()+0x91>
c0017fa6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017fae:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017fb6:	77 2f                	ja     c0017fe7 <HalFindRSDP()+0x7f>
c0017fb8:	83 ec 04             	sub    esp,0x4
c0017fbb:	6a 08                	push   0x8
c0017fbd:	68 63 38 02 c0       	push   0xc0023863
c0017fc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017fc6:	e8 b5 83 fe ff       	call   c0000380 <memcmp>
c0017fcb:	83 c4 10             	add    esp,0x10
c0017fce:	85 c0                	test   eax,eax
c0017fd0:	0f 94 c0             	sete   al
c0017fd3:	0f b6 c0             	movzx  eax,al
c0017fd6:	85 c0                	test   eax,eax
c0017fd8:	74 06                	je     c0017fe0 <HalFindRSDP()+0x78>
c0017fda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fde:	eb 19                	jmp    c0017ff9 <HalFindRSDP()+0x91>
c0017fe0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017fe5:	eb c7                	jmp    c0017fae <HalFindRSDP()+0x46>
c0017fe7:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017fec:	83 e0 fb             	and    eax,0xfffffffb
c0017fef:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c0017ff4:	b8 00 00 00 00       	mov    eax,0x0
c0017ff9:	83 c4 1c             	add    esp,0x1c
c0017ffc:	c3                   	ret    

c0017ffd <HalHandlePageFault(void*, void*)>:
c0017ffd:	83 ec 1c             	sub    esp,0x1c
c0018000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018004:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018007:	83 ec 08             	sub    esp,0x8
c001800a:	50                   	push   eax
c001800b:	68 a8 3a 02 c0       	push   0xc0023aa8
c0018010:	e8 4f ef fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018015:	83 c4 10             	add    esp,0x10
c0018018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001801c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001801f:	83 ec 08             	sub    esp,0x8
c0018022:	50                   	push   eax
c0018023:	68 6c 38 02 c0       	push   0xc002386c
c0018028:	e8 37 ef fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001802d:	83 c4 10             	add    esp,0x10
c0018030:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018035:	8b 00                	mov    eax,DWORD PTR [eax]
c0018037:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001803a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018040:	0f 20 d2             	mov    edx,cr2
c0018043:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018047:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001804b:	83 ec 08             	sub    esp,0x8
c001804e:	52                   	push   edx
c001804f:	50                   	push   eax
c0018050:	e8 8b ad ff ff       	call   c0012de0 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001805c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018060:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018063:	83 ec 08             	sub    esp,0x8
c0018066:	50                   	push   eax
c0018067:	68 81 38 02 c0       	push   0xc0023881
c001806c:	e8 f3 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018078:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001807b:	83 ec 08             	sub    esp,0x8
c001807e:	50                   	push   eax
c001807f:	68 9b 38 02 c0       	push   0xc002389b
c0018084:	e8 db ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018091:	83 ec 08             	sub    esp,0x8
c0018094:	50                   	push   eax
c0018095:	68 b0 38 02 c0       	push   0xc00238b0
c001809a:	e8 c5 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00180a6:	83 c4 1c             	add    esp,0x1c
c00180a9:	c3                   	ret    

c00180aa <HalHandleOpcodeFault(void*, void*)>:
c00180aa:	83 ec 1c             	sub    esp,0x1c
c00180ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00180b5:	a0 88 d7 02 c0       	mov    al,ds:0xc002d788
c00180ba:	0f b6 c0             	movzx  eax,al
c00180bd:	85 c0                	test   eax,eax
c00180bf:	74 25                	je     c00180e6 <HalHandleOpcodeFault(void*, void*)+0x3c>
c00180c1:	83 ec 0c             	sub    esp,0xc
c00180c4:	68 dc 3a 02 c0       	push   0xc0023adc
c00180c9:	e8 96 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00180ce:	83 c4 10             	add    esp,0x10
c00180d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180d5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00180d8:	8d 50 19             	lea    edx,[eax+0x19]
c00180db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00180e2:	b0 01                	mov    al,0x1
c00180e4:	eb 02                	jmp    c00180e8 <HalHandleOpcodeFault(void*, void*)+0x3e>
c00180e6:	b0 00                	mov    al,0x0
c00180e8:	83 c4 1c             	add    esp,0x1c
c00180eb:	c3                   	ret    

c00180ec <HalDisplayDebugInfo(void*)>:
c00180ec:	83 ec 2c             	sub    esp,0x2c
c00180ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00180f7:	0f 20 c0             	mov    eax,cr0
c00180fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180fe:	0f 20 d0             	mov    eax,cr2
c0018101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018105:	0f 20 d8             	mov    eax,cr3
c0018108:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001810c:	0f 20 e0             	mov    eax,cr4
c001810f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018117:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001811a:	83 ec 08             	sub    esp,0x8
c001811d:	50                   	push   eax
c001811e:	68 cb 38 02 c0       	push   0xc00238cb
c0018123:	e8 3c ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018128:	83 c4 10             	add    esp,0x10
c001812b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001812f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018132:	83 ec 08             	sub    esp,0x8
c0018135:	50                   	push   eax
c0018136:	68 bc 38 02 c0       	push   0xc00238bc
c001813b:	e8 24 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018140:	83 c4 10             	add    esp,0x10
c0018143:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018147:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001814a:	83 ec 08             	sub    esp,0x8
c001814d:	50                   	push   eax
c001814e:	68 c7 38 02 c0       	push   0xc00238c7
c0018153:	e8 0c ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001815f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018162:	83 ec 08             	sub    esp,0x8
c0018165:	50                   	push   eax
c0018166:	68 d6 38 02 c0       	push   0xc00238d6
c001816b:	e8 f4 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018177:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001817a:	83 ec 08             	sub    esp,0x8
c001817d:	50                   	push   eax
c001817e:	68 e1 38 02 c0       	push   0xc00238e1
c0018183:	e8 dc ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018188:	83 c4 10             	add    esp,0x10
c001818b:	83 ec 08             	sub    esp,0x8
c001818e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018192:	68 ec 38 02 c0       	push   0xc00238ec
c0018197:	e8 c8 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001819c:	83 c4 10             	add    esp,0x10
c001819f:	83 ec 08             	sub    esp,0x8
c00181a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00181a6:	68 f7 38 02 c0       	push   0xc00238f7
c00181ab:	e8 b4 ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181b7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00181ba:	c1 e0 05             	shl    eax,0x5
c00181bd:	8d 90 00 4e 02 c0    	lea    edx,[eax-0x3ffdb200]
c00181c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181c7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00181ca:	83 ec 04             	sub    esp,0x4
c00181cd:	52                   	push   edx
c00181ce:	50                   	push   eax
c00181cf:	68 02 39 02 c0       	push   0xc0023902
c00181d4:	e8 8b ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181e7:	83 ec 0c             	sub    esp,0xc
c00181ea:	50                   	push   eax
c00181eb:	e8 67 8f ff ff       	call   c0011157 <setActiveTerminal(VgaText*)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00181f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00181fe:	83 ec 08             	sub    esp,0x8
c0018201:	68 11 39 02 c0       	push   0xc0023911
c0018206:	50                   	push   eax
c0018207:	e8 98 92 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001820c:	83 c4 10             	add    esp,0x10
c001820f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018214:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001821a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001821e:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018221:	83 ec 08             	sub    esp,0x8
c0018224:	52                   	push   edx
c0018225:	50                   	push   eax
c0018226:	e8 33 92 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018233:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018239:	83 ec 08             	sub    esp,0x8
c001823c:	68 1f 39 02 c0       	push   0xc002391f
c0018241:	50                   	push   eax
c0018242:	e8 5d 92 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001824f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018255:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001825a:	8b 12                	mov    edx,DWORD PTR [edx]
c001825c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001825f:	83 c2 0c             	add    edx,0xc
c0018262:	83 ec 08             	sub    esp,0x8
c0018265:	52                   	push   edx
c0018266:	50                   	push   eax
c0018267:	e8 38 92 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001826c:	83 c4 10             	add    esp,0x10
c001826f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018274:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001827a:	83 ec 08             	sub    esp,0x8
c001827d:	68 28 39 02 c0       	push   0xc0023928
c0018282:	50                   	push   eax
c0018283:	e8 1c 92 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018290:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018296:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001829a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001829d:	83 ec 08             	sub    esp,0x8
c00182a0:	52                   	push   edx
c00182a1:	50                   	push   eax
c00182a2:	e8 b7 91 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182b5:	83 ec 08             	sub    esp,0x8
c00182b8:	68 30 39 02 c0       	push   0xc0023930
c00182bd:	50                   	push   eax
c00182be:	e8 e1 91 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00182c3:	83 c4 10             	add    esp,0x10
c00182c6:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182d1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182d5:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00182d8:	83 ec 08             	sub    esp,0x8
c00182db:	52                   	push   edx
c00182dc:	50                   	push   eax
c00182dd:	e8 7c 91 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c00182e2:	83 c4 10             	add    esp,0x10
c00182e5:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00182ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182f0:	83 ec 08             	sub    esp,0x8
c00182f3:	68 38 39 02 c0       	push   0xc0023938
c00182f8:	50                   	push   eax
c00182f9:	e8 a6 91 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00182fe:	83 c4 10             	add    esp,0x10
c0018301:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018306:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001830c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018310:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018313:	83 ec 08             	sub    esp,0x8
c0018316:	52                   	push   edx
c0018317:	50                   	push   eax
c0018318:	e8 41 91 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018325:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001832b:	83 ec 08             	sub    esp,0x8
c001832e:	68 40 39 02 c0       	push   0xc0023940
c0018333:	50                   	push   eax
c0018334:	e8 6b 91 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018339:	83 c4 10             	add    esp,0x10
c001833c:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018341:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018347:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001834b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001834e:	83 ec 08             	sub    esp,0x8
c0018351:	52                   	push   edx
c0018352:	50                   	push   eax
c0018353:	e8 06 91 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c0018358:	83 c4 10             	add    esp,0x10
c001835b:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018360:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018366:	83 ec 08             	sub    esp,0x8
c0018369:	68 48 39 02 c0       	push   0xc0023948
c001836e:	50                   	push   eax
c001836f:	e8 30 91 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001837c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018382:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018386:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018389:	83 ec 08             	sub    esp,0x8
c001838c:	52                   	push   edx
c001838d:	50                   	push   eax
c001838e:	e8 cb 90 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c0018393:	83 c4 10             	add    esp,0x10
c0018396:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001839b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183a1:	83 ec 08             	sub    esp,0x8
c00183a4:	68 50 39 02 c0       	push   0xc0023950
c00183a9:	50                   	push   eax
c00183aa:	e8 f5 90 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00183af:	83 c4 10             	add    esp,0x10
c00183b2:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183c1:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00183c4:	83 ec 08             	sub    esp,0x8
c00183c7:	52                   	push   edx
c00183c8:	50                   	push   eax
c00183c9:	e8 90 90 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183d6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183dc:	83 ec 08             	sub    esp,0x8
c00183df:	68 58 39 02 c0       	push   0xc0023958
c00183e4:	50                   	push   eax
c00183e5:	e8 ba 90 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c00183f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00183f8:	83 ec 08             	sub    esp,0x8
c00183fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00183ff:	50                   	push   eax
c0018400:	e8 59 90 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c0018405:	83 c4 10             	add    esp,0x10
c0018408:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001840d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018413:	83 ec 08             	sub    esp,0x8
c0018416:	68 61 39 02 c0       	push   0xc0023961
c001841b:	50                   	push   eax
c001841c:	e8 83 90 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018421:	83 c4 10             	add    esp,0x10
c0018424:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018429:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001842f:	83 ec 08             	sub    esp,0x8
c0018432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018436:	50                   	push   eax
c0018437:	e8 22 90 ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018444:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001844a:	83 ec 08             	sub    esp,0x8
c001844d:	68 69 39 02 c0       	push   0xc0023969
c0018452:	50                   	push   eax
c0018453:	e8 4c 90 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018458:	83 c4 10             	add    esp,0x10
c001845b:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c0018460:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018466:	83 ec 08             	sub    esp,0x8
c0018469:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001846d:	50                   	push   eax
c001846e:	e8 eb 8f ff ff       	call   c001145e <VgaText::putx(unsigned int)>
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	fa                   	cli    
c0018477:	f4                   	hlt    
c0018478:	eb fe                	jmp    c0018478 <HalDisplayDebugInfo(void*)+0x38c>

c001847a <HalReceivedNMI()>:
c001847a:	83 ec 1c             	sub    esp,0x1c
c001847d:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018488:	89 c2                	mov    edx,eax
c001848a:	ec                   	in     al,dx
c001848b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001848f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018493:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018497:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001849e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184a2:	89 c2                	mov    edx,eax
c00184a4:	ec                   	in     al,dx
c00184a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00184a9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00184ad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184b1:	83 ec 0c             	sub    esp,0xc
c00184b4:	68 71 39 02 c0       	push   0xc0023971
c00184b9:	e8 a6 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00184c6:	83 e0 10             	and    eax,0x10
c00184c9:	74 10                	je     c00184db <HalReceivedNMI()+0x61>
c00184cb:	83 ec 0c             	sub    esp,0xc
c00184ce:	68 82 39 02 c0       	push   0xc0023982
c00184d3:	e8 ce 67 ff ff       	call   c000eca6 <KePanic(char const*)>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00184e0:	83 e0 40             	and    eax,0x40
c00184e3:	74 10                	je     c00184f5 <HalReceivedNMI()+0x7b>
c00184e5:	83 ec 0c             	sub    esp,0xc
c00184e8:	68 8f 39 02 c0       	push   0xc002398f
c00184ed:	e8 b4 67 ff ff       	call   c000eca6 <KePanic(char const*)>
c00184f2:	83 c4 10             	add    esp,0x10
c00184f5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00184f9:	0f be c0             	movsx  eax,al
c00184fc:	85 c0                	test   eax,eax
c00184fe:	79 10                	jns    c0018510 <HalReceivedNMI()+0x96>
c0018500:	83 ec 0c             	sub    esp,0xc
c0018503:	68 99 39 02 c0       	push   0xc0023999
c0018508:	e8 99 67 ff ff       	call   c000eca6 <KePanic(char const*)>
c001850d:	83 c4 10             	add    esp,0x10
c0018510:	90                   	nop
c0018511:	83 c4 1c             	add    esp,0x1c
c0018514:	c3                   	ret    

c0018515 <HalSystemIdle()>:
c0018515:	56                   	push   esi
c0018516:	53                   	push   ebx
c0018517:	83 ec 14             	sub    esp,0x14
c001851a:	a0 90 d7 02 c0       	mov    al,ds:0xc002d790
c001851f:	83 e0 10             	and    eax,0x10
c0018522:	0f b6 c0             	movzx  eax,al
c0018525:	85 c0                	test   eax,eax
c0018527:	74 43                	je     c001856c <HalSystemIdle()+0x57>
c0018529:	83 ec 0c             	sub    esp,0xc
c001852c:	68 e1 00 00 00       	push   0xe1
c0018531:	e8 99 f9 ff ff       	call   c0017ecf <x86rdmsr(unsigned int)>
c0018536:	83 c4 10             	add    esp,0x10
c0018539:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001853d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018541:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018545:	83 e0 02             	and    eax,0x2
c0018548:	89 c3                	mov    ebx,eax
c001854a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001854e:	83 e0 00             	and    eax,0x0
c0018551:	89 c6                	mov    esi,eax
c0018553:	83 ec 04             	sub    esp,0x4
c0018556:	56                   	push   esi
c0018557:	53                   	push   ebx
c0018558:	68 e1 00 00 00       	push   0xe1
c001855d:	e8 ab f9 ff ff       	call   c0017f0d <x86wrmsr(unsigned int, unsigned long long)>
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	e8 2a 7c fe ff       	call   c0000194 <doTPAUSE>
c001856a:	eb 01                	jmp    c001856d <HalSystemIdle()+0x58>
c001856c:	f4                   	hlt    
c001856d:	90                   	nop
c001856e:	83 c4 14             	add    esp,0x14
c0018571:	5b                   	pop    ebx
c0018572:	5e                   	pop    esi
c0018573:	c3                   	ret    

c0018574 <i386SaveCoprocessor(void*)>:
c0018574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018578:	83 c0 3f             	add    eax,0x3f
c001857b:	83 e0 c0             	and    eax,0xffffffc0
c001857e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018582:	ff 25 50 d7 02 c0    	jmp    DWORD PTR ds:0xc002d750

c0018588 <i386LoadCoprocessor(void*)>:
c0018588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001858c:	83 c0 3f             	add    eax,0x3f
c001858f:	83 e0 c0             	and    eax,0xffffffc0
c0018592:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018596:	ff 25 4c d7 02 c0    	jmp    DWORD PTR ds:0xc002d74c

c001859c <x87EmulHandler(regs*, void*)>:
c001859c:	53                   	push   ebx
c001859d:	83 ec 08             	sub    esp,0x8
c00185a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185a5:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00185a9:	74 10                	je     c00185bb <x87EmulHandler(regs*, void*)+0x1f>
c00185ab:	83 ec 0c             	sub    esp,0xc
c00185ae:	68 a6 39 02 c0       	push   0xc00239a6
c00185b3:	e8 ee 66 ff ff       	call   c000eca6 <KePanic(char const*)>
c00185b8:	83 c4 10             	add    esp,0x10
c00185bb:	0f 20 c0             	mov    eax,cr0
c00185be:	a8 08                	test   al,0x8
c00185c0:	74 59                	je     c001861b <x87EmulHandler(regs*, void*)+0x7f>
c00185c2:	0f 06                	clts   
c00185c4:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00185c9:	85 c0                	test   eax,eax
c00185cb:	74 0e                	je     c00185db <x87EmulHandler(regs*, void*)+0x3f>
c00185cd:	83 ec 0c             	sub    esp,0xc
c00185d0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00185d3:	e8 9c ff ff ff       	call   c0018574 <i386SaveCoprocessor(void*)>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00185e1:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00185e5:	75 12                	jne    c00185f9 <x87EmulHandler(regs*, void*)+0x5d>
c00185e7:	83 ec 0c             	sub    esp,0xc
c00185ea:	68 40 02 00 00       	push   0x240
c00185ef:	e8 6b 63 ff ff       	call   c000e95f <malloc>
c00185f4:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00185f7:	eb 10                	jmp    c0018609 <x87EmulHandler(regs*, void*)+0x6d>
c00185f9:	83 ec 0c             	sub    esp,0xc
c00185fc:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0018601:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018604:	e8 7f ff ff ff       	call   c0018588 <i386LoadCoprocessor(void*)>
c0018609:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c0018616:	83 c4 08             	add    esp,0x8
c0018619:	5b                   	pop    ebx
c001861a:	c3                   	ret    
c001861b:	83 ec 0c             	sub    esp,0xc
c001861e:	68 ba 39 02 c0       	push   0xc00239ba
c0018623:	e8 3c e9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018628:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018630:	83 c4 18             	add    esp,0x18
c0018633:	5b                   	pop    ebx
c0018634:	e9 b7 d9 ff ff       	jmp    c0015ff0 <Thr::terminateFromIRQ(int)>

c0018639 <HalInitialiseCoprocessor()>:
c0018639:	83 ec 10             	sub    esp,0x10
c001863c:	c7 05 48 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d748,0x0
c0018646:	6a 00                	push   0x0
c0018648:	68 9c 85 01 c0       	push   0xc001859c
c001864d:	6a 07                	push   0x7
c001864f:	e8 9d 06 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018654:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	a8 80                	test   al,0x80
c001865e:	74 1c                	je     c001867c <HalInitialiseCoprocessor()+0x43>
c0018660:	c7 05 50 d7 02 c0 f8 fc 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fcf8
c001866a:	c7 05 4c d7 02 c0 00 fd 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fd00
c0018674:	83 c4 0c             	add    esp,0xc
c0018677:	e9 8c 76 00 00       	jmp    c001fd08 <sseInit>
c001867c:	a8 10                	test   al,0x10
c001867e:	74 1c                	je     c001869c <HalInitialiseCoprocessor()+0x63>
c0018680:	c7 05 50 d7 02 c0 47 fd 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc001fd47
c001868a:	c7 05 4c d7 02 c0 4e fd 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc001fd4e
c0018694:	83 c4 0c             	add    esp,0xc
c0018697:	e9 b9 76 00 00       	jmp    c001fd55 <x87Init>
c001869c:	c7 05 50 d7 02 c0 ce 6d 01 c0 	mov    DWORD PTR ds:0xc002d750,0xc0016dce
c00186a6:	c7 05 4c d7 02 c0 ce 6d 01 c0 	mov    DWORD PTR ds:0xc002d74c,0xc0016dce
c00186b0:	0f 20 c0             	mov    eax,cr0
c00186b3:	83 c8 04             	or     eax,0x4
c00186b6:	0f 22 c0             	mov    cr0,eax
c00186b9:	83 c4 0c             	add    esp,0xc
c00186bc:	c3                   	ret    

c00186bd <HalPanic(char const*)>:
c00186bd:	53                   	push   ebx
c00186be:	83 ec 10             	sub    esp,0x10
c00186c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00186c5:	fa                   	cli    
c00186c6:	53                   	push   ebx
c00186c7:	68 d0 39 02 c0       	push   0xc00239d0
c00186cc:	e8 93 e8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00186d1:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c00186d6:	83 c4 10             	add    esp,0x10
c00186d9:	85 c0                	test   eax,eax
c00186db:	74 09                	je     c00186e6 <HalPanic(char const*)+0x29>
c00186dd:	83 ec 0c             	sub    esp,0xc
c00186e0:	53                   	push   ebx
c00186e1:	ff d0                	call   eax
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	a1 34 ce 02 c0       	mov    eax,ds:0xc002ce34
c00186eb:	85 c0                	test   eax,eax
c00186ed:	0f 84 dc 00 00 00    	je     c00187cf <HalPanic(char const*)+0x112>
c00186f3:	52                   	push   edx
c00186f4:	6a 01                	push   0x1
c00186f6:	6a 0f                	push   0xf
c00186f8:	50                   	push   eax
c00186f9:	e8 b4 88 ff ff       	call   c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00186fe:	59                   	pop    ecx
c00186ff:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018705:	e8 98 8a ff ff       	call   c00111a2 <VgaText::clearScreen()>
c001870a:	58                   	pop    eax
c001870b:	5a                   	pop    edx
c001870c:	68 97 2a 02 c0       	push   0xc0022a97
c0018711:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018717:	e8 ce 88 ff ff       	call   c0010fea <VgaText::setTitle(char*)>
c001871c:	83 c4 0c             	add    esp,0xc
c001871f:	6a 01                	push   0x1
c0018721:	6a 0f                	push   0xf
c0018723:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018729:	e8 84 88 ff ff       	call   c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001872e:	59                   	pop    ecx
c001872f:	58                   	pop    eax
c0018730:	68 e9 39 02 c0       	push   0xc00239e9
c0018735:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001873b:	e8 64 8d ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018740:	83 c4 0c             	add    esp,0xc
c0018743:	6a 0f                	push   0xf
c0018745:	6a 01                	push   0x1
c0018747:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001874d:	e8 60 88 ff ff       	call   c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018752:	58                   	pop    eax
c0018753:	5a                   	pop    edx
c0018754:	68 f2 39 02 c0       	push   0xc00239f2
c0018759:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001875f:	e8 40 8d ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018764:	83 c4 0c             	add    esp,0xc
c0018767:	6a 01                	push   0x1
c0018769:	6a 0f                	push   0xf
c001876b:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018771:	e8 3c 88 ff ff       	call   c0010fb2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018776:	59                   	pop    ecx
c0018777:	58                   	pop    eax
c0018778:	68 36 3a 02 c0       	push   0xc0023a36
c001877d:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018783:	e8 1c 8d ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c0018788:	58                   	pop    eax
c0018789:	5a                   	pop    edx
c001878a:	68 ff 39 02 c0       	push   0xc00239ff
c001878f:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c0018795:	e8 0a 8d ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001879a:	59                   	pop    ecx
c001879b:	58                   	pop    eax
c001879c:	68 39 3a 02 c0       	push   0xc0023a39
c00187a1:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187a7:	e8 f8 8c ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00187ac:	58                   	pop    eax
c00187ad:	5a                   	pop    edx
c00187ae:	53                   	push   ebx
c00187af:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187b5:	e8 ea 8c ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00187ba:	59                   	pop    ecx
c00187bb:	5b                   	pop    ebx
c00187bc:	68 36 3a 02 c0       	push   0xc0023a36
c00187c1:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c00187c7:	e8 d8 8c ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	eb fe                	jmp    c00187cf <HalPanic(char const*)+0x112>

c00187d1 <HalQueryPerformanceCounter()>:
c00187d1:	31 c0                	xor    eax,eax
c00187d3:	31 d2                	xor    edx,edx
c00187d5:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c00187dc:	75 02                	jne    c00187e0 <HalQueryPerformanceCounter()+0xf>
c00187de:	0f 31                	rdtsc  
c00187e0:	c3                   	ret    

c00187e1 <HalInitialise()>:
c00187e1:	53                   	push   ebx
c00187e2:	83 ec 08             	sub    esp,0x8
c00187e5:	c6 05 40 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d740,0x0
c00187ec:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c00187f1:	83 e0 fe             	and    eax,0xfffffffe
c00187f4:	a2 8c d7 02 c0       	mov    ds:0xc002d78c,al
c00187f9:	e8 d2 07 00 00       	call   c0018fd0 <picOpen()>
c00187fe:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c0018805:	74 0a                	je     c0018811 <HalInitialise()+0x30>
c0018807:	e8 14 07 00 00       	call   c0018f20 <picDisable()>
c001880c:	e8 bf 6a 00 00       	call   c001f2d0 <apicOpen()>
c0018811:	bb 0f 00 00 00       	mov    ebx,0xf
c0018816:	50                   	push   eax
c0018817:	6a 00                	push   0x0
c0018819:	68 0c e0 00 c0       	push   0xc000e00c
c001881e:	6a 00                	push   0x0
c0018820:	e8 cc 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018825:	83 c4 0c             	add    esp,0xc
c0018828:	6a 00                	push   0x0
c001882a:	68 0c e0 00 c0       	push   0xc000e00c
c001882f:	6a 01                	push   0x1
c0018831:	e8 bb 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018836:	83 c4 0c             	add    esp,0xc
c0018839:	6a 00                	push   0x0
c001883b:	68 fc df 00 c0       	push   0xc000dffc
c0018840:	6a 02                	push   0x2
c0018842:	e8 aa 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018847:	83 c4 0c             	add    esp,0xc
c001884a:	6a 00                	push   0x0
c001884c:	68 0c e0 00 c0       	push   0xc000e00c
c0018851:	6a 03                	push   0x3
c0018853:	e8 99 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018858:	83 c4 0c             	add    esp,0xc
c001885b:	6a 00                	push   0x0
c001885d:	68 0c e0 00 c0       	push   0xc000e00c
c0018862:	6a 04                	push   0x4
c0018864:	e8 88 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018869:	83 c4 0c             	add    esp,0xc
c001886c:	6a 00                	push   0x0
c001886e:	68 0c e0 00 c0       	push   0xc000e00c
c0018873:	6a 05                	push   0x5
c0018875:	e8 77 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001887a:	83 c4 0c             	add    esp,0xc
c001887d:	6a 00                	push   0x0
c001887f:	68 40 e0 00 c0       	push   0xc000e040
c0018884:	6a 06                	push   0x6
c0018886:	e8 66 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001888b:	83 c4 0c             	add    esp,0xc
c001888e:	6a 00                	push   0x0
c0018890:	68 94 e0 00 c0       	push   0xc000e094
c0018895:	6a 08                	push   0x8
c0018897:	e8 55 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001889c:	83 c4 0c             	add    esp,0xc
c001889f:	6a 00                	push   0x0
c00188a1:	68 0c e0 00 c0       	push   0xc000e00c
c00188a6:	6a 09                	push   0x9
c00188a8:	e8 44 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188ad:	83 c4 0c             	add    esp,0xc
c00188b0:	6a 00                	push   0x0
c00188b2:	68 0c e0 00 c0       	push   0xc000e00c
c00188b7:	6a 0a                	push   0xa
c00188b9:	e8 33 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188be:	83 c4 0c             	add    esp,0xc
c00188c1:	6a 00                	push   0x0
c00188c3:	68 0c e0 00 c0       	push   0xc000e00c
c00188c8:	6a 0b                	push   0xb
c00188ca:	e8 22 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188cf:	83 c4 0c             	add    esp,0xc
c00188d2:	6a 00                	push   0x0
c00188d4:	68 44 df 00 c0       	push   0xc000df44
c00188d9:	6a 0d                	push   0xd
c00188db:	e8 11 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188e0:	83 c4 0c             	add    esp,0xc
c00188e3:	6a 00                	push   0x0
c00188e5:	68 98 df 00 c0       	push   0xc000df98
c00188ea:	6a 0e                	push   0xe
c00188ec:	e8 00 04 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	50                   	push   eax
c00188f5:	6a 00                	push   0x0
c00188f7:	68 0c e0 00 c0       	push   0xc000e00c
c00188fc:	53                   	push   ebx
c00188fd:	43                   	inc    ebx
c00188fe:	e8 ee 03 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018903:	83 c4 10             	add    esp,0x10
c0018906:	83 fb 1e             	cmp    ebx,0x1e
c0018909:	75 e9                	jne    c00188f4 <HalInitialise()+0x113>
c001890b:	50                   	push   eax
c001890c:	6a 00                	push   0x0
c001890e:	68 39 0e 01 c0       	push   0xc0010e39
c0018913:	6a 60                	push   0x60
c0018915:	e8 d7 03 00 00       	call   c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001891a:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001891f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018929:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018930:	e8 2a 60 ff ff       	call   c000e95f <malloc>
c0018935:	89 04 24             	mov    DWORD PTR [esp],eax
c0018938:	89 c3                	mov    ebx,eax
c001893a:	e8 ff 0d 00 00       	call   c001973e <RTC::RTC()>
c001893f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018949:	5a                   	pop    edx
c001894a:	59                   	pop    ecx
c001894b:	53                   	push   ebx
c001894c:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0018952:	e8 0b 07 ff ff       	call   c0009062 <Device::addChild(Device*)>
c0018957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018959:	6a 00                	push   0x0
c001895b:	6a 00                	push   0x0
c001895d:	6a 00                	push   0x0
c001895f:	53                   	push   ebx
c0018960:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018963:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0018968:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001896e:	83 c4 28             	add    esp,0x28
c0018971:	5b                   	pop    ebx
c0018972:	c3                   	ret    

c0018973 <HalMakeBeep(int)>:
c0018973:	53                   	push   ebx
c0018974:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018978:	85 db                	test   ebx,ebx
c001897a:	75 07                	jne    c0018983 <HalMakeBeep(int)+0x10>
c001897c:	e4 61                	in     al,0x61
c001897e:	83 e0 fc             	and    eax,0xfffffffc
c0018981:	eb 26                	jmp    c00189a9 <HalMakeBeep(int)+0x36>
c0018983:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018988:	99                   	cdq    
c0018989:	f7 fb                	idiv   ebx
c001898b:	89 c1                	mov    ecx,eax
c001898d:	b0 b6                	mov    al,0xb6
c001898f:	e6 43                	out    0x43,al
c0018991:	88 c8                	mov    al,cl
c0018993:	e6 42                	out    0x42,al
c0018995:	89 c8                	mov    eax,ecx
c0018997:	c1 e8 08             	shr    eax,0x8
c001899a:	e6 42                	out    0x42,al
c001899c:	e4 61                	in     al,0x61
c001899e:	89 c2                	mov    edx,eax
c00189a0:	83 ca 03             	or     edx,0x3
c00189a3:	38 d0                	cmp    al,dl
c00189a5:	74 04                	je     c00189ab <HalMakeBeep(int)+0x38>
c00189a7:	88 d0                	mov    al,dl
c00189a9:	e6 61                	out    0x61,al
c00189ab:	5b                   	pop    ebx
c00189ac:	c3                   	ret    

c00189ad <HalGetRand()>:
c00189ad:	31 c0                	xor    eax,eax
c00189af:	c3                   	ret    

c00189b0 <HalEndOfInterrupt(int)>:
c00189b0:	80 3d 40 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d740,0x0
c00189b7:	74 1d                	je     c00189d6 <HalEndOfInterrupt(int)+0x26>
c00189b9:	83 ec 18             	sub    esp,0x18
c00189bc:	6a 1b                	push   0x1b
c00189be:	e8 0c f5 ff ff       	call   c0017ecf <x86rdmsr(unsigned int)>
c00189c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00189c8:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00189d2:	83 c4 1c             	add    esp,0x1c
c00189d5:	c3                   	ret    
c00189d6:	e9 79 07 00 00       	jmp    c0019154 <picEOI(int)>

c00189db <HalRestart()>:
c00189db:	c3                   	ret    

c00189dc <HalShutdown()>:
c00189dc:	c3                   	ret    

c00189dd <HalSleep()>:
c00189dd:	c3                   	ret    

c00189de <CPU::CPU()>:
c00189de:	83 ec 0c             	sub    esp,0xc
c00189e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189e5:	83 ec 08             	sub    esp,0x8
c00189e8:	68 ab 37 02 c0       	push   0xc00237ab
c00189ed:	50                   	push   eax
c00189ee:	e8 d1 07 ff ff       	call   c00091c4 <Device::Device(char const*)>
c00189f3:	83 c4 10             	add    esp,0x10
c00189f6:	ba 08 3b 02 c0       	mov    edx,0xc0023b08
c00189fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ff:	89 10                	mov    DWORD PTR [eax],edx
c0018a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a05:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a13:	05 64 01 00 00       	add    eax,0x164
c0018a18:	83 ec 0c             	sub    esp,0xc
c0018a1b:	50                   	push   eax
c0018a1c:	e8 c7 56 ff ff       	call   c000e0e8 <GDT::GDT()>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a28:	05 68 09 00 00       	add    eax,0x968
c0018a2d:	83 ec 0c             	sub    esp,0xc
c0018a30:	50                   	push   eax
c0018a31:	e8 06 59 ff ff       	call   c000e33c <IDT::IDT()>
c0018a36:	83 c4 10             	add    esp,0x10
c0018a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a3d:	05 68 11 00 00       	add    eax,0x1168
c0018a42:	83 ec 0c             	sub    esp,0xc
c0018a45:	50                   	push   eax
c0018a46:	e8 f9 8e ff ff       	call   c0011944 <TSS::TSS()>
c0018a4b:	83 c4 10             	add    esp,0x10
c0018a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a52:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018a5c:	90                   	nop
c0018a5d:	83 c4 0c             	add    esp,0xc
c0018a60:	c3                   	ret    
c0018a61:	90                   	nop

c0018a62 <CPU::setupSMEP()>:
c0018a62:	0f 20 e0             	mov    eax,cr4
c0018a65:	0d 00 00 10 00       	or     eax,0x100000
c0018a6a:	0f 22 e0             	mov    cr4,eax
c0018a6d:	c3                   	ret    

c0018a6e <CPU::setupUMIP()>:
c0018a6e:	0f 20 e0             	mov    eax,cr4
c0018a71:	80 cc 08             	or     ah,0x8
c0018a74:	0f 22 e0             	mov    cr4,eax
c0018a77:	c3                   	ret    

c0018a78 <CPU::setupTSC()>:
c0018a78:	0f 20 e0             	mov    eax,cr4
c0018a7b:	83 c8 04             	or     eax,0x4
c0018a7e:	0f 22 e0             	mov    cr4,eax
c0018a81:	c3                   	ret    

c0018a82 <CPU::setupLargePages()>:
c0018a82:	0f 20 e0             	mov    eax,cr4
c0018a85:	83 c8 10             	or     eax,0x10
c0018a88:	0f 22 e0             	mov    cr4,eax
c0018a8b:	c3                   	ret    

c0018a8c <CPU::setupPAT()>:
c0018a8c:	f6 05 8c d7 02 c0 08 	test   BYTE PTR ds:0xc002d78c,0x8
c0018a93:	74 28                	je     c0018abd <CPU::setupPAT()+0x31>
c0018a95:	53                   	push   ebx
c0018a96:	83 ec 14             	sub    esp,0x14
c0018a99:	68 77 02 00 00       	push   0x277
c0018a9e:	e8 2c f4 ff ff       	call   c0017ecf <x86rdmsr(unsigned int)>
c0018aa3:	83 c4 0c             	add    esp,0xc
c0018aa6:	83 e2 f8             	and    edx,0xfffffff8
c0018aa9:	83 ca 01             	or     edx,0x1
c0018aac:	52                   	push   edx
c0018aad:	50                   	push   eax
c0018aae:	68 77 02 00 00       	push   0x277
c0018ab3:	e8 55 f4 ff ff       	call   c0017f0d <x86wrmsr(unsigned int, unsigned long long)>
c0018ab8:	83 c4 18             	add    esp,0x18
c0018abb:	5b                   	pop    ebx
c0018abc:	c3                   	ret    
c0018abd:	c3                   	ret    

c0018abe <CPU::setupMTRR()>:
c0018abe:	c3                   	ret    
c0018abf:	90                   	nop

c0018ac0 <CPU::setupGlobalPages()>:
c0018ac0:	0f 20 e0             	mov    eax,cr4
c0018ac3:	0c 80                	or     al,0x80
c0018ac5:	0f 22 e0             	mov    cr4,eax
c0018ac8:	c3                   	ret    
c0018ac9:	90                   	nop

c0018aca <CPU::allowUsermodeDataAccess()>:
c0018aca:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018ad1:	74 03                	je     c0018ad6 <CPU::allowUsermodeDataAccess()+0xc>
c0018ad3:	0f 01 cb             	stac   
c0018ad6:	c3                   	ret    
c0018ad7:	90                   	nop

c0018ad8 <CPU::prohibitUsermodeDataAccess()>:
c0018ad8:	f6 05 8f d7 02 c0 40 	test   BYTE PTR ds:0xc002d78f,0x40
c0018adf:	74 03                	je     c0018ae4 <CPU::prohibitUsermodeDataAccess()+0xc>
c0018ae1:	0f 01 ca             	clac   
c0018ae4:	c3                   	ret    
c0018ae5:	90                   	nop

c0018ae6 <CPU::setupSMAP()>:
c0018ae6:	0f 20 e0             	mov    eax,cr4
c0018ae9:	0d 00 00 20 00       	or     eax,0x200000
c0018aee:	0f 22 e0             	mov    cr4,eax
c0018af1:	eb e5                	jmp    c0018ad8 <CPU::prohibitUsermodeDataAccess()>
c0018af3:	90                   	nop

c0018af4 <CPU::setupFeatures()>:
c0018af4:	53                   	push   ebx
c0018af5:	83 ec 08             	sub    esp,0x8
c0018af8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018afc:	f6 05 8f d7 02 c0 20 	test   BYTE PTR ds:0xc002d78f,0x20
c0018b03:	74 18                	je     c0018b1d <CPU::setupFeatures()+0x29>
c0018b05:	83 ec 0c             	sub    esp,0xc
c0018b08:	68 44 3a 02 c0       	push   0xc0023a44
c0018b0d:	e8 52 e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b15:	e8 54 ff ff ff       	call   c0018a6e <CPU::setupUMIP()>
c0018b1a:	83 c4 10             	add    esp,0x10
c0018b1d:	f6 05 8e d7 02 c0 08 	test   BYTE PTR ds:0xc002d78e,0x8
c0018b24:	74 18                	je     c0018b3e <CPU::setupFeatures()+0x4a>
c0018b26:	83 ec 0c             	sub    esp,0xc
c0018b29:	68 4e 3a 02 c0       	push   0xc0023a4e
c0018b2e:	e8 31 e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b36:	e8 3d ff ff ff       	call   c0018a78 <CPU::setupTSC()>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	f6 05 8e d7 02 c0 20 	test   BYTE PTR ds:0xc002d78e,0x20
c0018b45:	74 18                	je     c0018b5f <CPU::setupFeatures()+0x6b>
c0018b47:	83 ec 0c             	sub    esp,0xc
c0018b4a:	68 57 3a 02 c0       	push   0xc0023a57
c0018b4f:	e8 10 e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b57:	e8 26 ff ff ff       	call   c0018a82 <CPU::setupLargePages()>
c0018b5c:	83 c4 10             	add    esp,0x10
c0018b5f:	f6 05 8e d7 02 c0 40 	test   BYTE PTR ds:0xc002d78e,0x40
c0018b66:	74 18                	je     c0018b80 <CPU::setupFeatures()+0x8c>
c0018b68:	83 ec 0c             	sub    esp,0xc
c0018b6b:	68 60 3a 02 c0       	push   0xc0023a60
c0018b70:	e8 ef e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b78:	e8 43 ff ff ff       	call   c0018ac0 <CPU::setupGlobalPages()>
c0018b7d:	83 c4 10             	add    esp,0x10
c0018b80:	f6 05 8e d7 02 c0 80 	test   BYTE PTR ds:0xc002d78e,0x80
c0018b87:	74 18                	je     c0018ba1 <CPU::setupFeatures()+0xad>
c0018b89:	83 ec 0c             	sub    esp,0xc
c0018b8c:	68 72 3a 02 c0       	push   0xc0023a72
c0018b91:	e8 ce e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b99:	e8 ee fe ff ff       	call   c0018a8c <CPU::setupPAT()>
c0018b9e:	83 c4 10             	add    esp,0x10
c0018ba1:	f6 05 90 d7 02 c0 04 	test   BYTE PTR ds:0xc002d790,0x4
c0018ba8:	74 11                	je     c0018bbb <CPU::setupFeatures()+0xc7>
c0018baa:	c7 44 24 10 7b 3a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023a7b
c0018bb2:	83 c4 08             	add    esp,0x8
c0018bb5:	5b                   	pop    ebx
c0018bb6:	e9 a9 e3 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0018bbb:	83 c4 08             	add    esp,0x8
c0018bbe:	5b                   	pop    ebx
c0018bbf:	c3                   	ret    

c0018bc0 <CPU::open(int, int, void*)>:
c0018bc0:	55                   	push   ebp
c0018bc1:	57                   	push   edi
c0018bc2:	56                   	push   esi
c0018bc3:	53                   	push   ebx
c0018bc4:	83 ec 18             	sub    esp,0x18
c0018bc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018bcb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018bcf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018bd3:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c0018bd9:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018bdf:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018be5:	50                   	push   eax
c0018be6:	e8 5f 55 ff ff       	call   c000e14a <GDT::setup()>
c0018beb:	83 c4 0c             	add    esp,0xc
c0018bee:	6a 00                	push   0x0
c0018bf0:	68 ef be ad de       	push   0xdeadbeef
c0018bf5:	55                   	push   ebp
c0018bf6:	e8 8d 8d ff ff       	call   c0011988 <TSS::setup(unsigned long, unsigned long)>
c0018bfb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018bfe:	e8 65 8d ff ff       	call   c0011968 <TSS::flush()>
c0018c03:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018c09:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c0c:	e8 a1 57 ff ff       	call   c000e3b2 <IDT::setup()>
c0018c11:	b8 00 04 00 00       	mov    eax,0x400
c0018c16:	0f 23 f8             	mov    dr7,eax
c0018c19:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0018c23:	e8 72 62 ff ff       	call   c000ee9a <Phys::allocatePage()>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0018c31:	85 f6                	test   esi,esi
c0018c33:	89 38                	mov    DWORD PTR [eax],edi
c0018c35:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018c3b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018c3e:	74 10                	je     c0018c50 <CPU::open(int, int, void*)+0x90>
c0018c40:	50                   	push   eax
c0018c41:	50                   	push   eax
c0018c42:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018c48:	56                   	push   esi
c0018c49:	e8 2c 97 ff ff       	call   c001237a <VAS::setCPUSpecific(unsigned long)>
c0018c4e:	eb 0d                	jmp    c0018c5d <CPU::open(int, int, void*)+0x9d>
c0018c50:	83 ec 0c             	sub    esp,0xc
c0018c53:	68 85 3a 02 c0       	push   0xc0023a85
c0018c58:	e8 49 60 ff ff       	call   c000eca6 <KePanic(char const*)>
c0018c5d:	83 c4 10             	add    esp,0x10
c0018c60:	83 ec 0c             	sub    esp,0xc
c0018c63:	68 93 3a 02 c0       	push   0xc0023a93
c0018c68:	e8 97 39 ff ff       	call   c000c604 <KeSetBootMessage(char const*)>
c0018c6d:	e8 6f fb ff ff       	call   c00187e1 <HalInitialise()>
c0018c72:	a1 90 cd 02 c0       	mov    eax,ds:0xc002cd90
c0018c77:	83 e0 10             	and    eax,0x10
c0018c7a:	83 f8 01             	cmp    eax,0x1
c0018c7d:	19 c0                	sbb    eax,eax
c0018c7f:	83 e0 46             	and    eax,0x46
c0018c82:	83 c0 1e             	add    eax,0x1e
c0018c85:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c88:	e8 70 1a ff ff       	call   c000a6fd <setupTimer(int)>
c0018c8d:	83 c4 10             	add    esp,0x10
c0018c90:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c0018c96:	f6 05 90 cd 02 c0 20 	test   BYTE PTR ds:0xc002cd90,0x20
c0018c9d:	74 0c                	je     c0018cab <CPU::open(int, int, void*)+0xeb>
c0018c9f:	83 ec 0c             	sub    esp,0xc
c0018ca2:	53                   	push   ebx
c0018ca3:	e8 4c fe ff ff       	call   c0018af4 <CPU::setupFeatures()>
c0018ca8:	83 c4 10             	add    esp,0x10
c0018cab:	83 c4 0c             	add    esp,0xc
c0018cae:	31 c0                	xor    eax,eax
c0018cb0:	5b                   	pop    ebx
c0018cb1:	5e                   	pop    esi
c0018cb2:	5f                   	pop    edi
c0018cb3:	5d                   	pop    ebp
c0018cb4:	c3                   	ret    

c0018cb5 <convertLegacyIRQNumber(int)>:
c0018cb5:	83 ec 0c             	sub    esp,0xc
c0018cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cbc:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018cc3:	74 0c                	je     c0018cd1 <convertLegacyIRQNumber(int)+0x1c>
c0018cc5:	83 f8 0f             	cmp    eax,0xf
c0018cc8:	7f 0b                	jg     c0018cd5 <convertLegacyIRQNumber(int)+0x20>
c0018cca:	0f b6 80 88 46 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb978]
c0018cd1:	83 c4 0c             	add    esp,0xc
c0018cd4:	c3                   	ret    
c0018cd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	68 2c 3b 02 c0       	push   0xc0023b2c
c0018ce1:	e8 c0 5f ff ff       	call   c000eca6 <KePanic(char const*)>
c0018ce6:	83 c4 10             	add    esp,0x10
c0018ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ced:	83 c4 0c             	add    esp,0xc
c0018cf0:	c3                   	ret    

c0018cf1 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018cf1:	56                   	push   esi
c0018cf2:	31 c0                	xor    eax,eax
c0018cf4:	53                   	push   ebx
c0018cf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018cf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018cfd:	89 ca                	mov    edx,ecx
c0018cff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018d03:	c1 e2 04             	shl    edx,0x4
c0018d06:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0018d0e:	74 17                	je     c0018d27 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0018d10:	83 c0 01             	add    eax,0x1
c0018d13:	83 f8 04             	cmp    eax,0x4
c0018d16:	75 ee                	jne    c0018d06 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018d18:	c7 44 24 0c 8d 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023b8d
c0018d20:	5b                   	pop    ebx
c0018d21:	5e                   	pop    esi
c0018d22:	e9 7f 5f ff ff       	jmp    c000eca6 <KePanic(char const*)>
c0018d27:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018d2a:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0018d31:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c0018d38:	5b                   	pop    ebx
c0018d39:	5e                   	pop    esi
c0018d3a:	c3                   	ret    

c0018d3b <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018d3b:	57                   	push   edi
c0018d3c:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018d43:	56                   	push   esi
c0018d44:	53                   	push   ebx
c0018d45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018d49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d4d:	74 54                	je     c0018da3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c0018d4f:	89 c7                	mov    edi,eax
c0018d51:	84 c0                	test   al,al
c0018d53:	74 1d                	je     c0018d72 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018d55:	83 fe 0f             	cmp    esi,0xf
c0018d58:	0f 8f d5 00 00 00    	jg     c0018e33 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c0018d5e:	0f b6 b6 88 46 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdb978]
c0018d65:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c0018d6d:	d1 ef                	shr    edi,1
c0018d6f:	83 e7 01             	and    edi,0x1
c0018d72:	83 ec 08             	sub    esp,0x8
c0018d75:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018d7a:	31 db                	xor    ebx,ebx
c0018d7c:	50                   	push   eax
c0018d7d:	68 9a 3b 02 c0       	push   0xc0023b9a
c0018d82:	e8 dd e1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018d87:	83 c4 10             	add    esp,0x10
c0018d8a:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0018d8f:	85 c0                	test   eax,eax
c0018d91:	7f 55                	jg     c0018de8 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018d93:	83 ec 0c             	sub    esp,0xc
c0018d96:	68 b1 3b 02 c0       	push   0xc0023bb1
c0018d9b:	e8 06 5f ff ff       	call   c000eca6 <KePanic(char const*)>
c0018da0:	83 c4 10             	add    esp,0x10
c0018da3:	8d 7e 20             	lea    edi,[esi+0x20]
c0018da6:	89 f8                	mov    eax,edi
c0018da8:	31 d2                	xor    edx,edx
c0018daa:	c1 e0 04             	shl    eax,0x4
c0018dad:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0018db4:	85 c9                	test   ecx,ecx
c0018db6:	0f 84 8e 00 00 00    	je     c0018e4a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018dbc:	83 c2 01             	add    edx,0x1
c0018dbf:	83 fa 04             	cmp    edx,0x4
c0018dc2:	75 e9                	jne    c0018dad <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	68 68 3b 02 c0       	push   0xc0023b68
c0018dcc:	e8 d5 5e ff ff       	call   c000eca6 <KePanic(char const*)>
c0018dd1:	83 c4 10             	add    esp,0x10
c0018dd4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018dd9:	5b                   	pop    ebx
c0018dda:	5e                   	pop    esi
c0018ddb:	5f                   	pop    edi
c0018ddc:	c3                   	ret    
c0018ddd:	83 c3 01             	add    ebx,0x1
c0018de0:	39 1d e0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e0,ebx
c0018de6:	7e ab                	jle    c0018d93 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018de8:	83 ec 08             	sub    esp,0x8
c0018deb:	8b 04 9d 00 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1f00]
c0018df2:	56                   	push   esi
c0018df3:	50                   	push   eax
c0018df4:	e8 63 66 00 00       	call   c001f45c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018df9:	83 c4 10             	add    esp,0x10
c0018dfc:	84 c0                	test   al,al
c0018dfe:	74 dd                	je     c0018ddd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018e00:	83 ec 04             	sub    esp,0x4
c0018e03:	89 f8                	mov    eax,edi
c0018e05:	8b 1c 9d 00 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1f00]
c0018e0c:	0f b6 f8             	movzx  edi,al
c0018e0f:	57                   	push   edi
c0018e10:	8d 7e 20             	lea    edi,[esi+0x20]
c0018e13:	6a 00                	push   0x0
c0018e15:	89 f8                	mov    eax,edi
c0018e17:	0f b6 c0             	movzx  eax,al
c0018e1a:	50                   	push   eax
c0018e1b:	89 f0                	mov    eax,esi
c0018e1d:	6a 00                	push   0x0
c0018e1f:	0f b6 c0             	movzx  eax,al
c0018e22:	6a 00                	push   0x0
c0018e24:	50                   	push   eax
c0018e25:	53                   	push   ebx
c0018e26:	e8 9d 67 00 00       	call   c001f5c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018e2b:	83 c4 20             	add    esp,0x20
c0018e2e:	e9 73 ff ff ff       	jmp    c0018da6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018e33:	83 ec 0c             	sub    esp,0xc
c0018e36:	31 ff                	xor    edi,edi
c0018e38:	68 2c 3b 02 c0       	push   0xc0023b2c
c0018e3d:	e8 64 5e ff ff       	call   c000eca6 <KePanic(char const*)>
c0018e42:	83 c4 10             	add    esp,0x10
c0018e45:	e9 28 ff ff ff       	jmp    c0018d72 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018e4a:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018e4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e51:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c0018e58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e5c:	5b                   	pop    ebx
c0018e5d:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018e64:	89 f0                	mov    eax,esi
c0018e66:	5e                   	pop    esi
c0018e67:	5f                   	pop    edi
c0018e68:	c3                   	ret    

c0018e69 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018e71:	c1 e0 04             	shl    eax,0x4
c0018e74:	8d 50 10             	lea    edx,[eax+0x10]
c0018e77:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c0018e7d:	74 08                	je     c0018e87 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018e7f:	83 c0 04             	add    eax,0x4
c0018e82:	39 d0                	cmp    eax,edx
c0018e84:	75 f1                	jne    c0018e77 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018e86:	c3                   	ret    
c0018e87:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018e91:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018e9b:	eb e2                	jmp    c0018e7f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018e9d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018e9d:	53                   	push   ebx
c0018e9e:	83 ec 08             	sub    esp,0x8
c0018ea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018ea5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018eaa:	74 09                	je     c0018eb5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018eac:	f6 05 8c d7 02 c0 01 	test   BYTE PTR ds:0xc002d78c,0x1
c0018eb3:	75 37                	jne    c0018eec <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018eb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eb9:	83 c0 20             	add    eax,0x20
c0018ebc:	c1 e0 04             	shl    eax,0x4
c0018ebf:	8d 50 10             	lea    edx,[eax+0x10]
c0018ec2:	39 98 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ebx
c0018ec8:	74 0c                	je     c0018ed6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018eca:	83 c0 04             	add    eax,0x4
c0018ecd:	39 d0                	cmp    eax,edx
c0018ecf:	75 f1                	jne    c0018ec2 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018ed1:	83 c4 08             	add    esp,0x8
c0018ed4:	5b                   	pop    ebx
c0018ed5:	c3                   	ret    
c0018ed6:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0018ee0:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018eea:	eb de                	jmp    c0018eca <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018eec:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018ef1:	7f 11                	jg     c0018f04 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef7:	0f b6 80 88 46 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdb978]
c0018efe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018f02:	eb b1                	jmp    c0018eb5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	68 be 3b 02 c0       	push   0xc0023bbe
c0018f0c:	e8 95 5d ff ff       	call   c000eca6 <KePanic(char const*)>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	eb 9f                	jmp    c0018eb5 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018f16:	66 90                	xchg   ax,ax

c0018f18 <picIoWait()>:
c0018f18:	eb 00                	jmp    c0018f1a <picIoWait()+0x2>
c0018f1a:	eb 00                	jmp    c0018f1c <picIoWait()+0x4>
c0018f1c:	90                   	nop
c0018f1d:	c3                   	ret    
c0018f1e:	66 90                	xchg   ax,ax

c0018f20 <picDisable()>:
c0018f20:	83 ec 10             	sub    esp,0x10
c0018f23:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018f2a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018f2f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018f33:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018f38:	ee                   	out    dx,al
c0018f39:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018f40:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018f45:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018f49:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018f4e:	ee                   	out    dx,al
c0018f4f:	90                   	nop
c0018f50:	83 c4 10             	add    esp,0x10
c0018f53:	c3                   	ret    

c0018f54 <picGetIRQReg(int)>:
c0018f54:	83 ec 10             	sub    esp,0x10
c0018f57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f5b:	0f b6 c0             	movzx  eax,al
c0018f5e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018f65:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018f69:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018f6d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018f72:	ee                   	out    dx,al
c0018f73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f77:	0f b6 c0             	movzx  eax,al
c0018f7a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018f81:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018f85:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018f89:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018f8e:	ee                   	out    dx,al
c0018f8f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018f96:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018f9b:	89 c2                	mov    edx,eax
c0018f9d:	ec                   	in     al,dx
c0018f9e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fa2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fa6:	0f b6 c0             	movzx  eax,al
c0018fa9:	c1 e0 08             	shl    eax,0x8
c0018fac:	89 c1                	mov    ecx,eax
c0018fae:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018fb5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018fba:	89 c2                	mov    edx,eax
c0018fbc:	ec                   	in     al,dx
c0018fbd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018fc1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018fc5:	0f b6 c0             	movzx  eax,al
c0018fc8:	09 c8                	or     eax,ecx
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	c3                   	ret    
c0018fce:	66 90                	xchg   ax,ax

c0018fd0 <picOpen()>:
c0018fd0:	83 ec 50             	sub    esp,0x50
c0018fd3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018fda:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018fdf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018fe3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fe7:	ee                   	out    dx,al
c0018fe8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018fef:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018ff4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018ff8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ffc:	ee                   	out    dx,al
c0018ffd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019005:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001900d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019018:	89 c2                	mov    edx,eax
c001901a:	ec                   	in     al,dx
c001901b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001901f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019023:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019027:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001902e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019032:	89 c2                	mov    edx,eax
c0019034:	ec                   	in     al,dx
c0019035:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019039:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001903d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019041:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019048:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001904d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019051:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019055:	ee                   	out    dx,al
c0019056:	e8 bd fe ff ff       	call   c0018f18 <picIoWait()>
c001905b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019062:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019067:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001906b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001906f:	ee                   	out    dx,al
c0019070:	e8 a3 fe ff ff       	call   c0018f18 <picIoWait()>
c0019075:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019079:	0f b6 c0             	movzx  eax,al
c001907c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019083:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019087:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001908b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001908f:	ee                   	out    dx,al
c0019090:	e8 83 fe ff ff       	call   c0018f18 <picIoWait()>
c0019095:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019099:	0f b6 c0             	movzx  eax,al
c001909c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00190a3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00190a7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00190ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190af:	ee                   	out    dx,al
c00190b0:	e8 63 fe ff ff       	call   c0018f18 <picIoWait()>
c00190b5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00190bc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00190c1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00190c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00190c9:	ee                   	out    dx,al
c00190ca:	e8 49 fe ff ff       	call   c0018f18 <picIoWait()>
c00190cf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00190d6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00190db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00190df:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190e3:	ee                   	out    dx,al
c00190e4:	e8 2f fe ff ff       	call   c0018f18 <picIoWait()>
c00190e9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00190f0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00190f5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00190f9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00190fd:	ee                   	out    dx,al
c00190fe:	e8 15 fe ff ff       	call   c0018f18 <picIoWait()>
c0019103:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001910a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001910f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019113:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019117:	ee                   	out    dx,al
c0019118:	e8 fb fd ff ff       	call   c0018f18 <picIoWait()>
c001911d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019122:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019129:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001912d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019131:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019135:	ee                   	out    dx,al
c0019136:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001913b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019142:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019146:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001914a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001914e:	ee                   	out    dx,al
c001914f:	90                   	nop
c0019150:	83 c4 50             	add    esp,0x50
c0019153:	c3                   	ret    

c0019154 <picEOI(int)>:
c0019154:	83 ec 10             	sub    esp,0x10
c0019157:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001915c:	75 1e                	jne    c001917c <picEOI(int)+0x28>
c001915e:	6a 0b                	push   0xb
c0019160:	e8 ef fd ff ff       	call   c0018f54 <picGetIRQReg(int)>
c0019165:	83 c4 04             	add    esp,0x4
c0019168:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001916d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019172:	25 80 00 00 00       	and    eax,0x80
c0019177:	74 73                	je     c00191ec <picEOI(int)+0x98>
c0019179:	8d 76 00             	lea    esi,[esi+0x0]
c001917c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019181:	75 31                	jne    c00191b4 <picEOI(int)+0x60>
c0019183:	6a 0b                	push   0xb
c0019185:	e8 ca fd ff ff       	call   c0018f54 <picGetIRQReg(int)>
c001918a:	83 c4 04             	add    esp,0x4
c001918d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019196:	98                   	cwde   
c0019197:	85 c0                	test   eax,eax
c0019199:	78 19                	js     c00191b4 <picEOI(int)+0x60>
c001919b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00191a2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00191a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00191ab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00191b0:	ee                   	out    dx,al
c00191b1:	eb 3d                	jmp    c00191f0 <picEOI(int)+0x9c>
c00191b3:	90                   	nop
c00191b4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00191b9:	7e 19                	jle    c00191d4 <picEOI(int)+0x80>
c00191bb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00191c2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00191c7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00191cb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00191d0:	ee                   	out    dx,al
c00191d1:	8d 76 00             	lea    esi,[esi+0x0]
c00191d4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00191db:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00191e0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00191e4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00191e9:	ee                   	out    dx,al
c00191ea:	eb 04                	jmp    c00191f0 <picEOI(int)+0x9c>
c00191ec:	90                   	nop
c00191ed:	8d 76 00             	lea    esi,[esi+0x0]
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	c3                   	ret    

c00191f4 <RTC::open(int, int, void*)>:
c00191f4:	31 c0                	xor    eax,eax
c00191f6:	c3                   	ret    
c00191f7:	90                   	nop

c00191f8 <RTC::close(int, int, void*)>:
c00191f8:	31 c0                	xor    eax,eax
c00191fa:	c3                   	ret    
c00191fb:	90                   	nop

c00191fc <RTC::timeInSecondsUTC()>:
c00191fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019200:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019206:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001920c:	c3                   	ret    
c001920d:	90                   	nop

c001920e <RTC::timeInDatetimeUTC()>:
c001920e:	53                   	push   ebx
c001920f:	83 ec 14             	sub    esp,0x14
c0019212:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001921a:	8b 10                	mov    edx,DWORD PTR [eax]
c001921c:	50                   	push   eax
c001921d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019220:	83 c4 0c             	add    esp,0xc
c0019223:	52                   	push   edx
c0019224:	50                   	push   eax
c0019225:	53                   	push   ebx
c0019226:	e8 ab fb fe ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c001922b:	89 d8                	mov    eax,ebx
c001922d:	83 c4 14             	add    esp,0x14
c0019230:	5b                   	pop    ebx
c0019231:	c2 04 00             	ret    0x4

c0019234 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019234:	56                   	push   esi
c0019235:	53                   	push   ebx
c0019236:	83 ec 14             	sub    esp,0x14
c0019239:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001923d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001923f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019242:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019246:	52                   	push   edx
c0019247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001924b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001924f:	50                   	push   eax
c0019250:	e8 81 fb fe ff       	call   c0008dd6 <KeSecondsToDatetime(unsigned long long)>
c0019255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019259:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001925d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019261:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019265:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019269:	89 f0                	mov    eax,esi
c001926b:	83 c4 20             	add    esp,0x20
c001926e:	5b                   	pop    ebx
c001926f:	5e                   	pop    esi
c0019270:	ff e0                	jmp    eax

c0019272 <RTC::~RTC()>:
c0019272:	83 ec 0c             	sub    esp,0xc
c0019275:	ba e8 3b 02 c0       	mov    edx,0xc0023be8
c001927a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001927e:	89 10                	mov    DWORD PTR [eax],edx
c0019280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019284:	83 ec 0c             	sub    esp,0xc
c0019287:	50                   	push   eax
c0019288:	e8 db f8 fe ff       	call   c0008b68 <Clock::~Clock()>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	90                   	nop
c0019291:	83 c4 0c             	add    esp,0xc
c0019294:	c3                   	ret    
c0019295:	90                   	nop

c0019296 <RTC::~RTC()>:
c0019296:	83 ec 0c             	sub    esp,0xc
c0019299:	83 ec 0c             	sub    esp,0xc
c001929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192a0:	e8 cd ff ff ff       	call   c0019272 <RTC::~RTC()>
c00192a5:	83 c4 10             	add    esp,0x10
c00192a8:	83 ec 08             	sub    esp,0x8
c00192ab:	68 60 01 00 00       	push   0x160
c00192b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192b4:	e8 0b 34 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c00192b9:	83 c4 10             	add    esp,0x10
c00192bc:	83 c4 0c             	add    esp,0xc
c00192bf:	c3                   	ret    

c00192c0 <RTC::get_update_in_progress_flag()>:
c00192c0:	83 ec 18             	sub    esp,0x18
c00192c3:	6a 0a                	push   0xa
c00192c5:	e8 09 db ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00192ca:	83 c4 1c             	add    esp,0x1c
c00192cd:	0f b6 c0             	movzx  eax,al
c00192d0:	c1 e8 07             	shr    eax,0x7
c00192d3:	c3                   	ret    

c00192d4 <RTC::completeRTCRefresh()>:
c00192d4:	55                   	push   ebp
c00192d5:	57                   	push   edi
c00192d6:	56                   	push   esi
c00192d7:	53                   	push   ebx
c00192d8:	83 ec 3c             	sub    esp,0x3c
c00192db:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c00192e1:	83 ec 0c             	sub    esp,0xc
c00192e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00192e8:	e8 d3 ff ff ff       	call   c00192c0 <RTC::get_update_in_progress_flag()>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	84 c0                	test   al,al
c00192f2:	74 0e                	je     c0019302 <RTC::completeRTCRefresh()+0x2e>
c00192f4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00192fa:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019300:	73 df                	jae    c00192e1 <RTC::completeRTCRefresh()+0xd>
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	6a 00                	push   0x0
c0019307:	e8 c7 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001930c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019313:	89 c5                	mov    ebp,eax
c0019315:	e8 b9 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001931a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019321:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019325:	e8 a9 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001932a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019331:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019335:	e8 99 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001933a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019341:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019345:	e8 89 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001934a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019351:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019355:	e8 79 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001935a:	0f b6 c0             	movzx  eax,al
c001935d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019361:	83 c4 10             	add    esp,0x10
c0019364:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c001936a:	83 ec 0c             	sub    esp,0xc
c001936d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019371:	e8 4a ff ff ff       	call   c00192c0 <RTC::get_update_in_progress_flag()>
c0019376:	83 c4 10             	add    esp,0x10
c0019379:	84 c0                	test   al,al
c001937b:	74 0e                	je     c001938b <RTC::completeRTCRefresh()+0xb7>
c001937d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019383:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019389:	73 df                	jae    c001936a <RTC::completeRTCRefresh()+0x96>
c001938b:	83 ec 0c             	sub    esp,0xc
c001938e:	6a 00                	push   0x0
c0019390:	e8 3e da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c0019395:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001939c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00193a0:	e8 2e da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00193a5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193ac:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00193b0:	e8 1e da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00193b5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00193bc:	88 c3                	mov    bl,al
c00193be:	e8 10 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00193c3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00193ca:	89 c6                	mov    esi,eax
c00193cc:	e8 02 da ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00193d1:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c00193d8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00193dc:	e8 f2 d9 ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00193e1:	89 e9                	mov    ecx,ebp
c00193e3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00193e7:	0f b6 f8             	movzx  edi,al
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	0f b6 eb             	movzx  ebp,bl
c00193f0:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00193f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193f9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00193fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019402:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019406:	0f 94 c0             	sete   al
c0019409:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001940d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0019411:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019416:	0f 94 c2             	sete   dl
c0019419:	21 d0                	and    eax,edx
c001941b:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001941f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019423:	0f 94 c2             	sete   dl
c0019426:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001942a:	21 c2                	and    edx,eax
c001942c:	89 f0                	mov    eax,esi
c001942e:	0f b6 c0             	movzx  eax,al
c0019431:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019435:	89 f0                	mov    eax,esi
c0019437:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001943b:	0f 94 c0             	sete   al
c001943e:	21 d0                	and    eax,edx
c0019440:	31 d2                	xor    edx,edx
c0019442:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019446:	0f 94 c2             	sete   dl
c0019449:	85 c2                	test   edx,eax
c001944b:	75 27                	jne    c0019474 <RTC::completeRTCRefresh()+0x1a0>
c001944d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019451:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019455:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019459:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001945d:	89 f0                	mov    eax,esi
c001945f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0019463:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019467:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001946b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001946f:	e9 f0 fe ff ff       	jmp    c0019364 <RTC::completeRTCRefresh()+0x90>
c0019474:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c0019478:	75 d3                	jne    c001944d <RTC::completeRTCRefresh()+0x179>
c001947a:	83 ec 0c             	sub    esp,0xc
c001947d:	6a 0b                	push   0xb
c001947f:	e8 4f d9 ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c0019484:	83 c4 10             	add    esp,0x10
c0019487:	a8 04                	test   al,0x4
c0019489:	75 7a                	jne    c0019505 <RTC::completeRTCRefresh()+0x231>
c001948b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001948f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019493:	83 e1 0f             	and    ecx,0xf
c0019496:	c1 ea 04             	shr    edx,0x4
c0019499:	83 e6 0f             	and    esi,0xf
c001949c:	6b d2 0a             	imul   edx,edx,0xa
c001949f:	c1 ef 04             	shr    edi,0x4
c00194a2:	01 d1                	add    ecx,edx
c00194a4:	6b ff 0a             	imul   edi,edi,0xa
c00194a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00194ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00194af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194b3:	c1 ea 04             	shr    edx,0x4
c00194b6:	83 e1 0f             	and    ecx,0xf
c00194b9:	6b d2 0a             	imul   edx,edx,0xa
c00194bc:	01 d1                	add    ecx,edx
c00194be:	89 ea                	mov    edx,ebp
c00194c0:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00194c4:	c1 ea 04             	shr    edx,0x4
c00194c7:	89 d9                	mov    ecx,ebx
c00194c9:	83 e2 07             	and    edx,0x7
c00194cc:	83 e1 0f             	and    ecx,0xf
c00194cf:	6b d2 0a             	imul   edx,edx,0xa
c00194d2:	83 e3 80             	and    ebx,0xffffff80
c00194d5:	01 d1                	add    ecx,edx
c00194d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00194db:	09 cb                	or     ebx,ecx
c00194dd:	c1 ea 04             	shr    edx,0x4
c00194e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00194e4:	6b d2 0a             	imul   edx,edx,0xa
c00194e7:	83 e1 0f             	and    ecx,0xf
c00194ea:	01 d6                	add    esi,edx
c00194ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00194f0:	c1 ea 04             	shr    edx,0x4
c00194f3:	6b d2 0a             	imul   edx,edx,0xa
c00194f6:	01 d1                	add    ecx,edx
c00194f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194fc:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019500:	83 e2 0f             	and    edx,0xf
c0019503:	01 d7                	add    edi,edx
c0019505:	a8 02                	test   al,0x2
c0019507:	75 15                	jne    c001951e <RTC::completeRTCRefresh()+0x24a>
c0019509:	f6 c3 80             	test   bl,0x80
c001950c:	74 10                	je     c001951e <RTC::completeRTCRefresh()+0x24a>
c001950e:	83 e3 7f             	and    ebx,0x7f
c0019511:	b9 18 00 00 00       	mov    ecx,0x18
c0019516:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019519:	99                   	cdq    
c001951a:	f7 f9                	idiv   ecx
c001951c:	88 d3                	mov    bl,dl
c001951e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0019524:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001952a:	77 06                	ja     c0019532 <RTC::completeRTCRefresh()+0x25e>
c001952c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0019532:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019537:	31 c9                	xor    ecx,ecx
c0019539:	c1 e0 10             	shl    eax,0x10
c001953c:	89 cf                	mov    edi,ecx
c001953e:	c1 e5 10             	shl    ebp,0x10
c0019541:	31 d2                	xor    edx,edx
c0019543:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0019549:	09 c7                	or     edi,eax
c001954b:	89 f0                	mov    eax,esi
c001954d:	89 f9                	mov    ecx,edi
c001954f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019553:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0019557:	88 c2                	mov    dl,al
c0019559:	88 d9                	mov    cl,bl
c001955b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001955f:	0f b7 c2             	movzx  eax,dx
c0019562:	09 e8                	or     eax,ebp
c0019564:	89 c2                	mov    edx,eax
c0019566:	50                   	push   eax
c0019567:	50                   	push   eax
c0019568:	51                   	push   ecx
c0019569:	52                   	push   edx
c001956a:	e8 e8 f6 fe ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c001956f:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019573:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019579:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001957f:	83 c4 4c             	add    esp,0x4c
c0019582:	5b                   	pop    ebx
c0019583:	5e                   	pop    esi
c0019584:	5f                   	pop    edi
c0019585:	5d                   	pop    ebp
c0019586:	c3                   	ret    
c0019587:	90                   	nop

c0019588 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0019588:	55                   	push   ebp
c0019589:	57                   	push   edi
c001958a:	56                   	push   esi
c001958b:	53                   	push   ebx
c001958c:	83 ec 34             	sub    esp,0x34
c001958f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019593:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0019597:	6a 00                	push   0x0
c0019599:	89 fb                	mov    ebx,edi
c001959b:	6a 00                	push   0x0
c001959d:	e8 85 d8 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00195a2:	5d                   	pop    ebp
c00195a3:	58                   	pop    eax
c00195a4:	6a 00                	push   0x0
c00195a6:	6a 02                	push   0x2
c00195a8:	e8 7a d8 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00195ad:	31 d2                	xor    edx,edx
c00195af:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c00195b6:	89 f9                	mov    ecx,edi
c00195b8:	89 f8                	mov    eax,edi
c00195ba:	c1 e9 10             	shr    ecx,0x10
c00195bd:	0f b6 c4             	movzx  eax,ah
c00195c0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00195c4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00195c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195cc:	b9 64 00 00 00       	mov    ecx,0x64
c00195d1:	89 f0                	mov    eax,esi
c00195d3:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00195d7:	89 f0                	mov    eax,esi
c00195d9:	0f b6 c4             	movzx  eax,ah
c00195dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195e0:	89 f0                	mov    eax,esi
c00195e2:	c1 e8 10             	shr    eax,0x10
c00195e5:	f7 f1                	div    ecx
c00195e7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00195eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00195ef:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00195f3:	e8 db d7 ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	89 c5                	mov    ebp,eax
c00195fd:	a8 04                	test   al,0x4
c00195ff:	75 6e                	jne    c001966f <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019601:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019605:	31 d2                	xor    edx,edx
c0019607:	0f b6 c1             	movzx  eax,cl
c001960a:	b9 0a 00 00 00       	mov    ecx,0xa
c001960f:	f7 f1                	div    ecx
c0019611:	c1 e0 04             	shl    eax,0x4
c0019614:	09 d0                	or     eax,edx
c0019616:	31 d2                	xor    edx,edx
c0019618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001961c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0019621:	f7 f1                	div    ecx
c0019623:	c1 e0 04             	shl    eax,0x4
c0019626:	09 d0                	or     eax,edx
c0019628:	31 d2                	xor    edx,edx
c001962a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001962e:	0f b6 c3             	movzx  eax,bl
c0019631:	f7 f1                	div    ecx
c0019633:	c1 e0 04             	shl    eax,0x4
c0019636:	09 d0                	or     eax,edx
c0019638:	31 d2                	xor    edx,edx
c001963a:	89 c3                	mov    ebx,eax
c001963c:	89 f0                	mov    eax,esi
c001963e:	0f b6 c0             	movzx  eax,al
c0019641:	f7 f1                	div    ecx
c0019643:	c1 e0 04             	shl    eax,0x4
c0019646:	09 d0                	or     eax,edx
c0019648:	31 d2                	xor    edx,edx
c001964a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001964e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019653:	f7 f1                	div    ecx
c0019655:	c1 e0 04             	shl    eax,0x4
c0019658:	09 d0                	or     eax,edx
c001965a:	31 d2                	xor    edx,edx
c001965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019664:	f7 f1                	div    ecx
c0019666:	c1 e0 04             	shl    eax,0x4
c0019669:	09 d0                	or     eax,edx
c001966b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001966f:	83 e5 02             	and    ebp,0x2
c0019672:	75 1e                	jne    c0019692 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019674:	0f b6 c3             	movzx  eax,bl
c0019677:	83 f8 0b             	cmp    eax,0xb
c001967a:	76 10                	jbe    c001968c <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001967c:	8d 53 f4             	lea    edx,[ebx-0xc]
c001967f:	88 d3                	mov    bl,dl
c0019681:	84 d2                	test   dl,dl
c0019683:	75 02                	jne    c0019687 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c0019685:	b3 0c                	mov    bl,0xc
c0019687:	83 cb 80             	or     ebx,0xffffff80
c001968a:	eb 06                	jmp    c0019692 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001968c:	85 c0                	test   eax,eax
c001968e:	75 02                	jne    c0019692 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019690:	b3 0c                	mov    bl,0xc
c0019692:	0f b6 db             	movzx  ebx,bl
c0019695:	50                   	push   eax
c0019696:	50                   	push   eax
c0019697:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001969c:	52                   	push   edx
c001969d:	6a 00                	push   0x0
c001969f:	e8 83 d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196a4:	5a                   	pop    edx
c00196a5:	59                   	pop    ecx
c00196a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196ab:	50                   	push   eax
c00196ac:	6a 02                	push   0x2
c00196ae:	e8 74 d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196b3:	5e                   	pop    esi
c00196b4:	5f                   	pop    edi
c00196b5:	53                   	push   ebx
c00196b6:	6a 04                	push   0x4
c00196b8:	e8 6a d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196bd:	5d                   	pop    ebp
c00196be:	58                   	pop    eax
c00196bf:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00196c4:	52                   	push   edx
c00196c5:	6a 07                	push   0x7
c00196c7:	e8 5b d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196cc:	58                   	pop    eax
c00196cd:	5a                   	pop    edx
c00196ce:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00196d3:	50                   	push   eax
c00196d4:	6a 08                	push   0x8
c00196d6:	e8 4c d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196db:	59                   	pop    ecx
c00196dc:	5b                   	pop    ebx
c00196dd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00196e2:	55                   	push   ebp
c00196e3:	6a 09                	push   0x9
c00196e5:	e8 3d d7 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00196ea:	5e                   	pop    esi
c00196eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00196ef:	e8 e0 fb ff ff       	call   c00192d4 <RTC::completeRTCRefresh()>
c00196f4:	83 c4 3c             	add    esp,0x3c
c00196f7:	b0 01                	mov    al,0x1
c00196f9:	5b                   	pop    ebx
c00196fa:	5e                   	pop    esi
c00196fb:	5f                   	pop    edi
c00196fc:	5d                   	pop    ebp
c00196fd:	c3                   	ret    

c00196fe <rtcIRQHandler(regs*, void*)>:
c00196fe:	53                   	push   ebx
c00196ff:	83 ec 14             	sub    esp,0x14
c0019702:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019706:	6a 0c                	push   0xc
c0019708:	e8 c6 d6 ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	a8 80                	test   al,0x80
c0019712:	74 24                	je     c0019738 <rtcIRQHandler(regs*, void*)+0x3a>
c0019714:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001971b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0019722:	66 ff 05 94 d7 02 c0 	inc    WORD PTR ds:0xc002d794
c0019729:	75 0d                	jne    c0019738 <rtcIRQHandler(regs*, void*)+0x3a>
c001972b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001972f:	83 c4 08             	add    esp,0x8
c0019732:	5b                   	pop    ebx
c0019733:	e9 9c fb ff ff       	jmp    c00192d4 <RTC::completeRTCRefresh()>
c0019738:	83 c4 08             	add    esp,0x8
c001973b:	5b                   	pop    ebx
c001973c:	c3                   	ret    
c001973d:	90                   	nop

c001973e <RTC::RTC()>:
c001973e:	83 ec 1c             	sub    esp,0x1c
c0019741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019745:	83 ec 08             	sub    esp,0x8
c0019748:	68 cb 3b 02 c0       	push   0xc0023bcb
c001974d:	50                   	push   eax
c001974e:	e8 df f3 fe ff       	call   c0008b32 <Clock::Clock(char const*)>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	ba e8 3b 02 c0       	mov    edx,0xc0023be8
c001975b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001975f:	89 10                	mov    DWORD PTR [eax],edx
c0019761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019765:	83 ec 0c             	sub    esp,0xc
c0019768:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001976c:	6a 01                	push   0x1
c001976e:	68 fe 96 01 c0       	push   0xc00196fe
c0019773:	6a 08                	push   0x8
c0019775:	50                   	push   eax
c0019776:	e8 93 f8 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001977b:	83 c4 20             	add    esp,0x20
c001977e:	89 c2                	mov    edx,eax
c0019780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019784:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001978a:	fa                   	cli    
c001978b:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0019790:	83 c0 01             	add    eax,0x1
c0019793:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c0019798:	83 ec 0c             	sub    esp,0xc
c001979b:	6a 0b                	push   0xb
c001979d:	e8 31 d6 ff ff       	call   c0016dd3 <x86ReadCMOS(unsigned char)>
c00197a2:	83 c4 10             	add    esp,0x10
c00197a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00197a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00197ad:	83 c8 10             	or     eax,0x10
c00197b0:	0f b6 c0             	movzx  eax,al
c00197b3:	83 ec 08             	sub    esp,0x8
c00197b6:	50                   	push   eax
c00197b7:	6a 0b                	push   0xb
c00197b9:	e8 69 d6 ff ff       	call   c0016e27 <x86WriteCMOS(unsigned char, unsigned char)>
c00197be:	83 c4 10             	add    esp,0x10
c00197c1:	83 ec 0c             	sub    esp,0xc
c00197c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197c8:	e8 07 fb ff ff       	call   c00192d4 <RTC::completeRTCRefresh()>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	f0 83 2d b0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6b0,0x1
c00197d8:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c00197dd:	85 c0                	test   eax,eax
c00197df:	75 01                	jne    c00197e2 <RTC::RTC()+0xa4>
c00197e1:	fb                   	sti    
c00197e2:	90                   	nop
c00197e3:	83 c4 1c             	add    esp,0x1c
c00197e6:	c3                   	ret    
c00197e7:	90                   	nop

c00197e8 <HalConsoleScroll(int, int)>:
c00197e8:	83 ec 10             	sub    esp,0x10
c00197eb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00197f3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00197fb:	90                   	nop
c00197fc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019801:	0f 8f e1 00 00 00    	jg     c00198e8 <HalConsoleScroll(int, int)+0x100>
c0019807:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001980f:	90                   	nop
c0019810:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019818:	0f 8f be 00 00 00    	jg     c00198dc <HalConsoleScroll(int, int)+0xf4>
c001981e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019822:	89 d0                	mov    eax,edx
c0019824:	c1 e0 02             	shl    eax,0x2
c0019827:	01 d0                	add    eax,edx
c0019829:	c1 e0 05             	shl    eax,0x5
c001982c:	89 c2                	mov    edx,eax
c001982e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019832:	01 d0                	add    eax,edx
c0019834:	89 c2                	mov    edx,eax
c0019836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001983a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001983d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019841:	89 d0                	mov    eax,edx
c0019843:	c1 e0 02             	shl    eax,0x2
c0019846:	01 d0                	add    eax,edx
c0019848:	c1 e0 05             	shl    eax,0x5
c001984b:	89 c2                	mov    edx,eax
c001984d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019851:	01 d0                	add    eax,edx
c0019853:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001985d:	01 c2                	add    edx,eax
c001985f:	8a 01                	mov    al,BYTE PTR [ecx]
c0019861:	88 02                	mov    BYTE PTR [edx],al
c0019863:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019868:	75 66                	jne    c00198d0 <HalConsoleScroll(int, int)+0xe8>
c001986a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001986e:	83 e0 01             	and    eax,0x1
c0019871:	74 39                	je     c00198ac <HalConsoleScroll(int, int)+0xc4>
c0019873:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019877:	83 e0 0f             	and    eax,0xf
c001987a:	88 c2                	mov    dl,al
c001987c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019880:	c1 e0 04             	shl    eax,0x4
c0019883:	09 d0                	or     eax,edx
c0019885:	88 c1                	mov    cl,al
c0019887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001988b:	89 d0                	mov    eax,edx
c001988d:	c1 e0 02             	shl    eax,0x2
c0019890:	01 d0                	add    eax,edx
c0019892:	c1 e0 05             	shl    eax,0x5
c0019895:	89 c2                	mov    edx,eax
c0019897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001989b:	01 d0                	add    eax,edx
c001989d:	89 c2                	mov    edx,eax
c001989f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198a3:	01 d0                	add    eax,edx
c00198a5:	88 ca                	mov    dl,cl
c00198a7:	88 10                	mov    BYTE PTR [eax],dl
c00198a9:	eb 25                	jmp    c00198d0 <HalConsoleScroll(int, int)+0xe8>
c00198ab:	90                   	nop
c00198ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198b0:	89 d0                	mov    eax,edx
c00198b2:	c1 e0 02             	shl    eax,0x2
c00198b5:	01 d0                	add    eax,edx
c00198b7:	c1 e0 05             	shl    eax,0x5
c00198ba:	89 c2                	mov    edx,eax
c00198bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198c0:	01 d0                	add    eax,edx
c00198c2:	89 c2                	mov    edx,eax
c00198c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00198c8:	01 d0                	add    eax,edx
c00198ca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00198cd:	8d 76 00             	lea    esi,[esi+0x0]
c00198d0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00198d5:	e9 36 ff ff ff       	jmp    c0019810 <HalConsoleScroll(int, int)+0x28>
c00198da:	66 90                	xchg   ax,ax
c00198dc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00198e1:	e9 16 ff ff ff       	jmp    c00197fc <HalConsoleScroll(int, int)+0x14>
c00198e6:	66 90                	xchg   ax,ax
c00198e8:	90                   	nop
c00198e9:	83 c4 10             	add    esp,0x10
c00198ec:	c3                   	ret    
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]

c00198f0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00198f0:	83 ec 14             	sub    esp,0x14
c00198f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198f7:	88 04 24             	mov    BYTE PTR [esp],al
c00198fa:	8a 04 24             	mov    al,BYTE PTR [esp]
c00198fd:	0f b6 c0             	movzx  eax,al
c0019900:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019904:	89 d1                	mov    ecx,edx
c0019906:	83 e1 0f             	and    ecx,0xf
c0019909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001990d:	c1 e2 04             	shl    edx,0x4
c0019910:	0f b6 d2             	movzx  edx,dl
c0019913:	09 ca                	or     edx,ecx
c0019915:	c1 e2 08             	shl    edx,0x8
c0019918:	09 d0                	or     eax,edx
c001991a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001991f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019927:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001992b:	89 d0                	mov    eax,edx
c001992d:	c1 e0 02             	shl    eax,0x2
c0019930:	01 d0                	add    eax,edx
c0019932:	c1 e0 04             	shl    eax,0x4
c0019935:	89 c2                	mov    edx,eax
c0019937:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001993b:	01 d0                	add    eax,edx
c001993d:	01 c0                	add    eax,eax
c001993f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0019943:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019947:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001994c:	66 89 02             	mov    WORD PTR [edx],ax
c001994f:	90                   	nop
c0019950:	83 c4 14             	add    esp,0x14
c0019953:	c3                   	ret    

c0019954 <HalConsoleCursorUpdate(int, int)>:
c0019954:	83 ec 20             	sub    esp,0x20
c0019957:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001995b:	89 c2                	mov    edx,eax
c001995d:	c1 e2 02             	shl    edx,0x2
c0019960:	01 d0                	add    eax,edx
c0019962:	c1 e0 04             	shl    eax,0x4
c0019965:	89 c2                	mov    edx,eax
c0019967:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001996b:	01 d0                	add    eax,edx
c001996d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0019972:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019979:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001997e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019982:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019986:	ee                   	out    dx,al
c0019987:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001998c:	0f b6 c0             	movzx  eax,al
c001998f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0019996:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001999a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001999e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199a2:	ee                   	out    dx,al
c00199a3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00199aa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00199af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00199b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00199b7:	ee                   	out    dx,al
c00199b8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00199bd:	c1 e8 08             	shr    eax,0x8
c00199c0:	0f b6 c0             	movzx  eax,al
c00199c3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00199ca:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00199ce:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00199d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199d6:	ee                   	out    dx,al
c00199d7:	90                   	nop
c00199d8:	83 c4 20             	add    esp,0x20
c00199db:	c3                   	ret    

c00199dc <FAT::getName()>:
c00199dc:	b8 1c 3c 02 c0       	mov    eax,0xc0023c1c
c00199e1:	c3                   	ret    
c00199e2:	66 90                	xchg   ax,ax

c00199e4 <FAT::tell(void*, unsigned long long*)>:
c00199e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00199e9:	75 09                	jne    c00199f4 <FAT::tell(void*, unsigned long long*)+0x10>
c00199eb:	b8 04 00 00 00       	mov    eax,0x4
c00199f0:	c3                   	ret    
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00199f9:	75 09                	jne    c0019a04 <FAT::tell(void*, unsigned long long*)+0x20>
c00199fb:	b8 04 00 00 00       	mov    eax,0x4
c0019a00:	c3                   	ret    
c0019a01:	8d 76 00             	lea    esi,[esi+0x0]
c0019a04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019a0b:	ba 00 00 00 00       	mov    edx,0x0
c0019a10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a14:	89 01                	mov    DWORD PTR [ecx],eax
c0019a16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a19:	b8 00 00 00 00       	mov    eax,0x0
c0019a1e:	c3                   	ret    
c0019a1f:	90                   	nop

c0019a20 <FAT::stat(void*, unsigned long long*)>:
c0019a20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a25:	75 09                	jne    c0019a30 <FAT::stat(void*, unsigned long long*)+0x10>
c0019a27:	b8 04 00 00 00       	mov    eax,0x4
c0019a2c:	c3                   	ret    
c0019a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a35:	75 09                	jne    c0019a40 <FAT::stat(void*, unsigned long long*)+0x20>
c0019a37:	b8 04 00 00 00       	mov    eax,0x4
c0019a3c:	c3                   	ret    
c0019a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019a47:	ba 00 00 00 00       	mov    edx,0x0
c0019a4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019a50:	89 01                	mov    DWORD PTR [ecx],eax
c0019a52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a55:	b8 00 00 00 00       	mov    eax,0x0
c0019a5a:	c3                   	ret    
c0019a5b:	90                   	nop

c0019a5c <FAT::~FAT()>:
c0019a5c:	83 ec 0c             	sub    esp,0xc
c0019a5f:	ba 68 3c 02 c0       	mov    edx,0xc0023c68
c0019a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a68:	89 10                	mov    DWORD PTR [eax],edx
c0019a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a6e:	83 ec 0c             	sub    esp,0xc
c0019a71:	50                   	push   eax
c0019a72:	e8 1d e3 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0019a77:	83 c4 10             	add    esp,0x10
c0019a7a:	90                   	nop
c0019a7b:	83 c4 0c             	add    esp,0xc
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <FAT::~FAT()>:
c0019a80:	83 ec 0c             	sub    esp,0xc
c0019a83:	83 ec 0c             	sub    esp,0xc
c0019a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a8a:	e8 cd ff ff ff       	call   c0019a5c <FAT::~FAT()>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	83 ec 08             	sub    esp,0x8
c0019a95:	6a 08                	push   0x8
c0019a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a9b:	e8 24 2c ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	83 c4 0c             	add    esp,0xc
c0019aa6:	c3                   	ret    
c0019aa7:	90                   	nop

c0019aa8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019aa8:	83 ec 1c             	sub    esp,0x1c
c0019aab:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019ab2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019ab7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019abb:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019ac2:	83 f8 ff             	cmp    eax,0xffffffff
c0019ac5:	75 35                	jne    c0019afc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0019ac7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019acb:	88 c2                	mov    dl,al
c0019acd:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ad2:	01 d0                	add    eax,edx
c0019ad4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019ad8:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019ade:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ae2:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019ae9:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019aee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019af2:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019af9:	eb 19                	jmp    c0019b14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019afb:	90                   	nop
c0019afc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019b00:	88 c2                	mov    dl,al
c0019b02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b06:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019b0d:	01 d0                	add    eax,edx
c0019b0f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019b13:	90                   	nop
c0019b14:	83 ec 04             	sub    esp,0x4
c0019b17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019b1f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019b23:	50                   	push   eax
c0019b24:	e8 8f b6 fe ff       	call   c00051b8 <f_getlabel>
c0019b29:	83 c4 10             	add    esp,0x10
c0019b2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019b35:	75 09                	jne    c0019b40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019b37:	b8 00 00 00 00       	mov    eax,0x0
c0019b3c:	eb 0a                	jmp    c0019b48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019b3e:	66 90                	xchg   ax,ax
c0019b40:	b8 01 00 00 00       	mov    eax,0x1
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]
c0019b48:	83 c4 1c             	add    esp,0x1c
c0019b4b:	c3                   	ret    

c0019b4c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019b4c:	57                   	push   edi
c0019b4d:	83 ec 58             	sub    esp,0x58
c0019b50:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019b58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b5c:	b8 00 00 00 00       	mov    eax,0x0
c0019b61:	b9 0f 00 00 00       	mov    ecx,0xf
c0019b66:	fc                   	cld    
c0019b67:	89 d7                	mov    edi,edx
c0019b69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019b6b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019b6f:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019b76:	83 f8 ff             	cmp    eax,0xffffffff
c0019b79:	75 35                	jne    c0019bb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019b7b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b7f:	88 c2                	mov    dl,al
c0019b81:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019b86:	01 d0                	add    eax,edx
c0019b88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b8c:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019b92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019b96:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019b9d:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ba2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019ba6:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019bad:	eb 19                	jmp    c0019bc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019baf:	90                   	nop
c0019bb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019bb4:	88 c2                	mov    dl,al
c0019bb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019bba:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019bc1:	01 d0                	add    eax,edx
c0019bc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bc7:	90                   	nop
c0019bc8:	83 ec 08             	sub    esp,0x8
c0019bcb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019bcf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bd3:	50                   	push   eax
c0019bd4:	e8 67 6c fe ff       	call   c0000840 <strcat>
c0019bd9:	83 c4 10             	add    esp,0x10
c0019bdc:	83 ec 0c             	sub    esp,0xc
c0019bdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019be3:	50                   	push   eax
c0019be4:	e8 20 b7 fe ff       	call   c0005309 <f_setlabel>
c0019be9:	83 c4 10             	add    esp,0x10
c0019bec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019bf0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019bf5:	75 09                	jne    c0019c00 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0019bf7:	b8 00 00 00 00       	mov    eax,0x0
c0019bfc:	eb 0a                	jmp    c0019c08 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0019bfe:	66 90                	xchg   ax,ax
c0019c00:	b8 01 00 00 00       	mov    eax,0x1
c0019c05:	8d 76 00             	lea    esi,[esi+0x0]
c0019c08:	83 c4 58             	add    esp,0x58
c0019c0b:	5f                   	pop    edi
c0019c0c:	c3                   	ret    
c0019c0d:	90                   	nop
c0019c0e:	66 90                	xchg   ax,ax

c0019c10 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019c10:	83 ec 2c             	sub    esp,0x2c
c0019c13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c1b:	83 ec 08             	sub    esp,0x8
c0019c1e:	68 40 3c 02 c0       	push   0xc0023c40
c0019c23:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c27:	e8 24 6b fe ff       	call   c0000750 <strcmp>
c0019c2c:	83 c4 10             	add    esp,0x10
c0019c2f:	85 c0                	test   eax,eax
c0019c31:	0f 94 c0             	sete   al
c0019c34:	0f b6 c0             	movzx  eax,al
c0019c37:	85 c0                	test   eax,eax
c0019c39:	74 0d                	je     c0019c48 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019c3b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019c43:	e9 c0 00 00 00       	jmp    c0019d08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019c48:	83 ec 08             	sub    esp,0x8
c0019c4b:	68 32 3c 02 c0       	push   0xc0023c32
c0019c50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c54:	e8 f7 6a fe ff       	call   c0000750 <strcmp>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	85 c0                	test   eax,eax
c0019c5e:	0f 94 c0             	sete   al
c0019c61:	0f b6 c0             	movzx  eax,al
c0019c64:	85 c0                	test   eax,eax
c0019c66:	74 10                	je     c0019c78 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019c68:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019c70:	e9 93 00 00 00       	jmp    c0019d08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019c75:	8d 76 00             	lea    esi,[esi+0x0]
c0019c78:	83 ec 08             	sub    esp,0x8
c0019c7b:	68 38 3c 02 c0       	push   0xc0023c38
c0019c80:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019c84:	e8 c7 6a fe ff       	call   c0000750 <strcmp>
c0019c89:	83 c4 10             	add    esp,0x10
c0019c8c:	85 c0                	test   eax,eax
c0019c8e:	0f 94 c0             	sete   al
c0019c91:	0f b6 c0             	movzx  eax,al
c0019c94:	85 c0                	test   eax,eax
c0019c96:	74 0c                	je     c0019ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019c98:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019ca0:	eb 66                	jmp    c0019d08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019ca2:	66 90                	xchg   ax,ax
c0019ca4:	83 ec 08             	sub    esp,0x8
c0019ca7:	68 5c 0e 02 c0       	push   0xc0020e5c
c0019cac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019cb0:	e8 9b 6a fe ff       	call   c0000750 <strcmp>
c0019cb5:	83 c4 10             	add    esp,0x10
c0019cb8:	85 c0                	test   eax,eax
c0019cba:	0f 94 c0             	sete   al
c0019cbd:	0f b6 c0             	movzx  eax,al
c0019cc0:	85 c0                	test   eax,eax
c0019cc2:	74 0c                	je     c0019cd0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0019cc4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019ccc:	eb 3a                	jmp    c0019d08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019cce:	66 90                	xchg   ax,ax
c0019cd0:	83 ec 08             	sub    esp,0x8
c0019cd3:	68 3e 3c 02 c0       	push   0xc0023c3e
c0019cd8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019cdc:	e8 6f 6a fe ff       	call   c0000750 <strcmp>
c0019ce1:	83 c4 10             	add    esp,0x10
c0019ce4:	85 c0                	test   eax,eax
c0019ce6:	0f 94 c0             	sete   al
c0019ce9:	0f b6 c0             	movzx  eax,al
c0019cec:	85 c0                	test   eax,eax
c0019cee:	74 0c                	je     c0019cfc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019cf0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019cf8:	eb 0e                	jmp    c0019d08 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019cfa:	66 90                	xchg   ax,ax
c0019cfc:	b8 08 00 00 00       	mov    eax,0x8
c0019d01:	e9 ea 00 00 00       	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019d06:	66 90                	xchg   ax,ax
c0019d08:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019d0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019d14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d18:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0019d22:	75 34                	jne    c0019d58 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019d24:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d28:	88 c2                	mov    dl,al
c0019d2a:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d2f:	01 d0                	add    eax,edx
c0019d31:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d35:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019d3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d3f:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019d46:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019d4b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019d4f:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019d56:	eb 18                	jmp    c0019d70 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019d58:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019d5c:	88 c2                	mov    dl,al
c0019d5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d62:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019d69:	01 d0                	add    eax,edx
c0019d6b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019d6f:	90                   	nop
c0019d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d74:	88 04 24             	mov    BYTE PTR [esp],al
c0019d77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019d7f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019d87:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019d8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019d94:	83 ec 0c             	sub    esp,0xc
c0019d97:	68 00 20 00 00       	push   0x2000
c0019d9c:	e8 be 4b ff ff       	call   c000e95f <malloc>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019da8:	68 00 20 00 00       	push   0x2000
c0019dad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019db1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019db5:	50                   	push   eax
c0019db6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019dba:	50                   	push   eax
c0019dbb:	e8 46 b8 fe ff       	call   c0005606 <f_mkfs>
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019dcc:	75 0a                	jne    c0019dd8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019dce:	b8 00 00 00 00       	mov    eax,0x0
c0019dd3:	eb 1b                	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019ddd:	75 09                	jne    c0019de8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019ddf:	b8 09 00 00 00       	mov    eax,0x9
c0019de4:	eb 0a                	jmp    c0019df0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019de6:	66 90                	xchg   ax,ax
c0019de8:	b8 01 00 00 00       	mov    eax,0x1
c0019ded:	8d 76 00             	lea    esi,[esi+0x0]
c0019df0:	83 c4 2c             	add    esp,0x2c
c0019df3:	c3                   	ret    

c0019df4 <FAT::tryMount(LogicalDisk*, int)>:
c0019df4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019dfa:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019dff:	83 f8 14             	cmp    eax,0x14
c0019e02:	75 18                	jne    c0019e1c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019e04:	83 ec 0c             	sub    esp,0xc
c0019e07:	68 44 3c 02 c0       	push   0xc0023c44
c0019e0c:	e8 95 4e ff ff       	call   c000eca6 <KePanic(char const*)>
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	b0 00                	mov    al,0x0
c0019e16:	e9 ed 01 00 00       	jmp    c001a008 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e1b:	90                   	nop
c0019e1c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019e23:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019e29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019e2f:	3d 00 02 00 00       	cmp    eax,0x200
c0019e34:	74 0a                	je     c0019e40 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019e36:	b0 00                	mov    al,0x0
c0019e38:	e9 cb 01 00 00       	jmp    c001a008 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019e40:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019e48:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019e4f:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c0019e56:	83 f8 ff             	cmp    eax,0xffffffff
c0019e59:	74 09                	je     c0019e64 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019e5b:	b0 01                	mov    al,0x1
c0019e5d:	e9 a6 01 00 00       	jmp    c001a008 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019e62:	66 90                	xchg   ax,ax
c0019e64:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019e6e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019e76:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019e7d:	88 c2                	mov    dl,al
c0019e7f:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019e84:	01 d0                	add    eax,edx
c0019e86:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019e8d:	8b 15 a0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7a0
c0019e93:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019e9a:	89 14 85 c0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2840],edx
c0019ea1:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ea6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019ead:	89 14 85 40 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27c0],edx
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	68 34 02 00 00       	push   0x234
c0019ebc:	e8 9e 4a ff ff       	call   c000e95f <malloc>
c0019ec1:	83 c4 10             	add    esp,0x10
c0019ec4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019ecb:	83 ec 04             	sub    esp,0x4
c0019ece:	6a 00                	push   0x0
c0019ed0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019ed7:	50                   	push   eax
c0019ed8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019edf:	e8 fd 9e fe ff       	call   c0003de1 <f_mount>
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019eee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019ef6:	74 1c                	je     c0019f14 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019ef8:	83 ec 0c             	sub    esp,0xc
c0019efb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019f02:	e8 78 4a ff ff       	call   c000e97f <rfree>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	b0 00                	mov    al,0x0
c0019f0c:	e9 f7 00 00 00       	jmp    c001a008 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019f11:	8d 76 00             	lea    esi,[esi+0x0]
c0019f14:	83 ec 04             	sub    esp,0x4
c0019f17:	68 00 01 00 00       	push   0x100
c0019f1c:	6a 00                	push   0x0
c0019f1e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f25:	50                   	push   eax
c0019f26:	e8 c5 65 fe ff       	call   c00004f0 <memset>
c0019f2b:	83 c4 10             	add    esp,0x10
c0019f2e:	83 ec 08             	sub    esp,0x8
c0019f31:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019f38:	50                   	push   eax
c0019f39:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f40:	50                   	push   eax
c0019f41:	e8 fa 68 fe ff       	call   c0000840 <strcat>
c0019f46:	83 c4 10             	add    esp,0x10
c0019f49:	83 ec 08             	sub    esp,0x8
c0019f4c:	68 52 3c 02 c0       	push   0xc0023c52
c0019f51:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019f58:	50                   	push   eax
c0019f59:	e8 e2 68 fe ff       	call   c0000840 <strcat>
c0019f5e:	83 c4 10             	add    esp,0x10
c0019f61:	83 ec 04             	sub    esp,0x4
c0019f64:	6a 01                	push   0x1
c0019f66:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019f6d:	50                   	push   eax
c0019f6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f72:	50                   	push   eax
c0019f73:	e8 cb 9e fe ff       	call   c0003e43 <f_open>
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019f82:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019f89:	85 c0                	test   eax,eax
c0019f8b:	74 0b                	je     c0019f98 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019f8d:	78 31                	js     c0019fc0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019f8f:	83 e8 04             	sub    eax,0x4
c0019f92:	83 f8 01             	cmp    eax,0x1
c0019f95:	77 29                	ja     c0019fc0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019f97:	90                   	nop
c0019f98:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019fa0:	83 ec 0c             	sub    esp,0xc
c0019fa3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fa7:	50                   	push   eax
c0019fa8:	e8 65 a6 fe ff       	call   c0004612 <f_close>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	90                   	nop
c0019fb1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019fb9:	85 c0                	test   eax,eax
c0019fbb:	74 43                	je     c001a000 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019fbd:	eb 31                	jmp    c0019ff0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019fbf:	90                   	nop
c0019fc0:	83 ec 0c             	sub    esp,0xc
c0019fc3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019fca:	e8 b0 49 ff ff       	call   c000e97f <rfree>
c0019fcf:	83 c4 10             	add    esp,0x10
c0019fd2:	83 ec 04             	sub    esp,0x4
c0019fd5:	6a 00                	push   0x0
c0019fd7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019fde:	50                   	push   eax
c0019fdf:	6a 00                	push   0x0
c0019fe1:	e8 fb 9d fe ff       	call   c0003de1 <f_mount>
c0019fe6:	83 c4 10             	add    esp,0x10
c0019fe9:	b0 00                	mov    al,0x0
c0019feb:	eb 1b                	jmp    c001a008 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019fed:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff0:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019ff5:	83 c0 01             	add    eax,0x1
c0019ff8:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c0019ffd:	8d 76 00             	lea    esi,[esi+0x0]
c001a000:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001a007:	90                   	nop
c001a008:	81 c4 4c 03 00 00    	add    esp,0x34c
c001a00e:	c3                   	ret    
c001a00f:	90                   	nop

c001a010 <FAT::allocateSwapfile(char const*, int)>:
c001a010:	55                   	push   ebp
c001a011:	57                   	push   edi
c001a012:	56                   	push   esi
c001a013:	53                   	push   ebx
c001a014:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a01a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a025:	83 ec 0c             	sub    esp,0xc
c001a028:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a02f:	e8 2b 49 ff ff       	call   c000e95f <malloc>
c001a034:	83 c4 10             	add    esp,0x10
c001a037:	89 c7                	mov    edi,eax
c001a039:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001a03e:	83 ec 04             	sub    esp,0x4
c001a041:	50                   	push   eax
c001a042:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a049:	57                   	push   edi
c001a04a:	e8 e3 e0 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001a04f:	83 c4 10             	add    esp,0x10
c001a052:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a059:	83 ec 04             	sub    esp,0x4
c001a05c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a060:	50                   	push   eax
c001a061:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a065:	50                   	push   eax
c001a066:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a06d:	e8 e0 e3 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001a072:	83 c4 10             	add    esp,0x10
c001a075:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a07c:	c1 e0 14             	shl    eax,0x14
c001a07f:	89 c7                	mov    edi,eax
c001a081:	89 c5                	mov    ebp,eax
c001a083:	c1 fd 1f             	sar    ebp,0x1f
c001a086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a08e:	89 f9                	mov    ecx,edi
c001a090:	31 c1                	xor    ecx,eax
c001a092:	89 cb                	mov    ebx,ecx
c001a094:	89 e9                	mov    ecx,ebp
c001a096:	31 d1                	xor    ecx,edx
c001a098:	89 ce                	mov    esi,ecx
c001a09a:	89 f0                	mov    eax,esi
c001a09c:	09 d8                	or     eax,ebx
c001a09e:	0f 84 9c 00 00 00    	je     c001a140 <FAT::allocateSwapfile(char const*, int)+0x130>
c001a0a4:	83 ec 0c             	sub    esp,0xc
c001a0a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0ae:	e8 6b e2 fe ff       	call   c000831e <File::unlink()>
c001a0b3:	83 c4 10             	add    esp,0x10
c001a0b6:	83 ec 08             	sub    esp,0x8
c001a0b9:	6a 12                	push   0x12
c001a0bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a0c2:	e8 89 e0 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a0c7:	83 c4 10             	add    esp,0x10
c001a0ca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a0d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a0d7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a0de:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001a0e5:	c1 e0 14             	shl    eax,0x14
c001a0e8:	83 ec 04             	sub    esp,0x4
c001a0eb:	6a 01                	push   0x1
c001a0ed:	50                   	push   eax
c001a0ee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001a0f5:	e8 9f b3 fe ff       	call   c0005499 <f_expand>
c001a0fa:	83 c4 10             	add    esp,0x10
c001a0fd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a104:	8b 00                	mov    eax,DWORD PTR [eax]
c001a106:	83 c0 10             	add    eax,0x10
c001a109:	8b 00                	mov    eax,DWORD PTR [eax]
c001a10b:	83 ec 0c             	sub    esp,0xc
c001a10e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a112:	52                   	push   edx
c001a113:	8d 54 24 30          	lea    edx,[esp+0x30]
c001a117:	52                   	push   edx
c001a118:	6a 00                	push   0x0
c001a11a:	68 00 04 00 00       	push   0x400
c001a11f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a126:	ff d0                	call   eax
c001a128:	83 c4 20             	add    esp,0x20
c001a12b:	83 ec 0c             	sub    esp,0xc
c001a12e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a135:	e8 74 e0 fe ff       	call   c00081ae <File::close()>
c001a13a:	83 c4 10             	add    esp,0x10
c001a13d:	8d 76 00             	lea    esi,[esi+0x0]
c001a140:	83 ec 08             	sub    esp,0x8
c001a143:	6a 01                	push   0x1
c001a145:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a14c:	e8 ff df fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001a151:	83 c4 10             	add    esp,0x10
c001a154:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a15b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a15d:	83 c0 0c             	add    eax,0xc
c001a160:	8b 00                	mov    eax,DWORD PTR [eax]
c001a162:	83 ec 0c             	sub    esp,0xc
c001a165:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a169:	52                   	push   edx
c001a16a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001a16e:	52                   	push   edx
c001a16f:	6a 00                	push   0x0
c001a171:	6a 04                	push   0x4
c001a173:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001a17a:	ff d0                	call   eax
c001a17c:	83 c4 20             	add    esp,0x20
c001a17f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001a186:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001a18c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001a193:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a19a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a19d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001a1a4:	83 ec 0c             	sub    esp,0xc
c001a1a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a1ae:	e8 fb df fe ff       	call   c00081ae <File::close()>
c001a1b3:	83 c4 10             	add    esp,0x10
c001a1b6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001a1bd:	ba 00 00 00 00       	mov    edx,0x0
c001a1c2:	81 c4 3c 04 00 00    	add    esp,0x43c
c001a1c8:	5b                   	pop    ebx
c001a1c9:	5e                   	pop    esi
c001a1ca:	5f                   	pop    edi
c001a1cb:	5d                   	pop    ebp
c001a1cc:	c3                   	ret    
c001a1cd:	90                   	nop
c001a1ce:	66 90                	xchg   ax,ax

c001a1d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a1d0:	57                   	push   edi
c001a1d1:	56                   	push   esi
c001a1d2:	53                   	push   ebx
c001a1d3:	81 ec 50 02 00 00    	sub    esp,0x250
c001a1d9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001a1e1:	74 0d                	je     c001a1f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001a1e3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001a1eb:	75 0f                	jne    c001a1fc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001a1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f0:	b8 04 00 00 00       	mov    eax,0x4
c001a1f5:	e9 3a 01 00 00       	jmp    c001a334 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a1fa:	66 90                	xchg   ax,ax
c001a1fc:	83 ec 08             	sub    esp,0x8
c001a1ff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a206:	50                   	push   eax
c001a207:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001a20e:	e8 cc a6 fe ff       	call   c00048df <f_readdir>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001a21d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001a224:	83 ec 0c             	sub    esp,0xc
c001a227:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a22e:	83 c0 16             	add    eax,0x16
c001a231:	50                   	push   eax
c001a232:	e8 39 63 fe ff       	call   c0000570 <strlen>
c001a237:	83 c4 10             	add    esp,0x10
c001a23a:	ba 00 00 00 00       	mov    edx,0x0
c001a23f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a243:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a247:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001a24e:	0f b6 c0             	movzx  eax,al
c001a251:	83 e0 10             	and    eax,0x10
c001a254:	74 0a                	je     c001a260 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001a256:	b8 02 00 00 00       	mov    eax,0x2
c001a25b:	eb 0b                	jmp    c001a268 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001a25d:	8d 76 00             	lea    esi,[esi+0x0]
c001a260:	b8 01 00 00 00       	mov    eax,0x1
c001a265:	8d 76 00             	lea    esi,[esi+0x0]
c001a268:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a26c:	83 ec 08             	sub    esp,0x8
c001a26f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001a276:	83 c0 16             	add    eax,0x16
c001a279:	50                   	push   eax
c001a27a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a27e:	83 c0 10             	add    eax,0x10
c001a281:	50                   	push   eax
c001a282:	e8 b9 63 fe ff       	call   c0000640 <strcpy>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001a291:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001a298:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a29c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001a2a3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001a2aa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001a2b1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001a2b8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001a2bf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001a2c6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001a2cd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001a2d4:	89 c6                	mov    esi,eax
c001a2d6:	89 d7                	mov    edi,edx
c001a2d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2da:	89 c8                	mov    eax,ecx
c001a2dc:	89 fa                	mov    edx,edi
c001a2de:	89 f3                	mov    ebx,esi
c001a2e0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001a2e7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001a2ee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001a2f5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001a2fc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a302:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001a309:	0f be c0             	movsx  eax,al
c001a30c:	85 c0                	test   eax,eax
c001a30e:	75 08                	jne    c001a318 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001a310:	b8 07 00 00 00       	mov    eax,0x7
c001a315:	eb 1d                	jmp    c001a334 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a317:	90                   	nop
c001a318:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001a31f:	85 c0                	test   eax,eax
c001a321:	75 09                	jne    c001a32c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001a323:	b8 00 00 00 00       	mov    eax,0x0
c001a328:	eb 0a                	jmp    c001a334 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001a32a:	66 90                	xchg   ax,ax
c001a32c:	b8 01 00 00 00       	mov    eax,0x1
c001a331:	8d 76 00             	lea    esi,[esi+0x0]
c001a334:	81 c4 50 02 00 00    	add    esp,0x250
c001a33a:	5b                   	pop    ebx
c001a33b:	5e                   	pop    esi
c001a33c:	5f                   	pop    edi
c001a33d:	c3                   	ret    
c001a33e:	66 90                	xchg   ax,ax

c001a340 <FAT::read(void*, unsigned long, void*, int*)>:
c001a340:	83 ec 1c             	sub    esp,0x1c
c001a343:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a348:	74 0a                	je     c001a354 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001a34a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a34f:	75 0b                	jne    c001a35c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001a351:	8d 76 00             	lea    esi,[esi+0x0]
c001a354:	b8 04 00 00 00       	mov    eax,0x4
c001a359:	eb 41                	jmp    c001a39c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a35b:	90                   	nop
c001a35c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a360:	50                   	push   eax
c001a361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a365:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a369:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a36d:	e8 94 9d fe ff       	call   c0004106 <f_read>
c001a372:	83 c4 10             	add    esp,0x10
c001a375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a379:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a37d:	89 c2                	mov    edx,eax
c001a37f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a383:	89 10                	mov    DWORD PTR [eax],edx
c001a385:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a389:	85 c0                	test   eax,eax
c001a38b:	75 07                	jne    c001a394 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a38d:	b8 00 00 00 00       	mov    eax,0x0
c001a392:	eb 08                	jmp    c001a39c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a394:	b8 01 00 00 00       	mov    eax,0x1
c001a399:	8d 76 00             	lea    esi,[esi+0x0]
c001a39c:	83 c4 1c             	add    esp,0x1c
c001a39f:	c3                   	ret    

c001a3a0 <FAT::write(void*, unsigned long, void*, int*)>:
c001a3a0:	83 ec 1c             	sub    esp,0x1c
c001a3a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a3a8:	74 0a                	je     c001a3b4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a3aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a3af:	75 0b                	jne    c001a3bc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	b8 04 00 00 00       	mov    eax,0x4
c001a3b9:	eb 41                	jmp    c001a3fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a3bb:	90                   	nop
c001a3bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a3c0:	50                   	push   eax
c001a3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a3c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a3cd:	e8 33 9f fe ff       	call   c0004305 <f_write>
c001a3d2:	83 c4 10             	add    esp,0x10
c001a3d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3dd:	89 c2                	mov    edx,eax
c001a3df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a3e3:	89 10                	mov    DWORD PTR [eax],edx
c001a3e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3e9:	85 c0                	test   eax,eax
c001a3eb:	75 07                	jne    c001a3f4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a3ed:	b8 00 00 00 00       	mov    eax,0x0
c001a3f2:	eb 08                	jmp    c001a3fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a3f4:	b8 01 00 00 00       	mov    eax,0x1
c001a3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3fc:	83 c4 1c             	add    esp,0x1c
c001a3ff:	c3                   	ret    

c001a400 <FAT::close(void*)>:
c001a400:	83 ec 1c             	sub    esp,0x1c
c001a403:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a408:	75 0a                	jne    c001a414 <FAT::close(void*)+0x14>
c001a40a:	b8 04 00 00 00       	mov    eax,0x4
c001a40f:	eb 3f                	jmp    c001a450 <FAT::close(void*)+0x50>
c001a411:	8d 76 00             	lea    esi,[esi+0x0]
c001a414:	83 ec 0c             	sub    esp,0xc
c001a417:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a41b:	e8 f2 a1 fe ff       	call   c0004612 <f_close>
c001a420:	83 c4 10             	add    esp,0x10
c001a423:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a427:	83 ec 0c             	sub    esp,0xc
c001a42a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a42e:	e8 3c 45 ff ff       	call   c000e96f <free>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a43a:	85 c0                	test   eax,eax
c001a43c:	75 0a                	jne    c001a448 <FAT::close(void*)+0x48>
c001a43e:	b8 00 00 00 00       	mov    eax,0x0
c001a443:	eb 0b                	jmp    c001a450 <FAT::close(void*)+0x50>
c001a445:	8d 76 00             	lea    esi,[esi+0x0]
c001a448:	b8 01 00 00 00       	mov    eax,0x1
c001a44d:	8d 76 00             	lea    esi,[esi+0x0]
c001a450:	83 c4 1c             	add    esp,0x1c
c001a453:	c3                   	ret    

c001a454 <FAT::closeDir(void*)>:
c001a454:	83 ec 1c             	sub    esp,0x1c
c001a457:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a45c:	75 0a                	jne    c001a468 <FAT::closeDir(void*)+0x14>
c001a45e:	b8 04 00 00 00       	mov    eax,0x4
c001a463:	eb 3f                	jmp    c001a4a4 <FAT::closeDir(void*)+0x50>
c001a465:	8d 76 00             	lea    esi,[esi+0x0]
c001a468:	83 ec 0c             	sub    esp,0xc
c001a46b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a46f:	e8 49 a4 fe ff       	call   c00048bd <f_closedir>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a482:	e8 e8 44 ff ff       	call   c000e96f <free>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a48e:	85 c0                	test   eax,eax
c001a490:	75 0a                	jne    c001a49c <FAT::closeDir(void*)+0x48>
c001a492:	b8 00 00 00 00       	mov    eax,0x0
c001a497:	eb 0b                	jmp    c001a4a4 <FAT::closeDir(void*)+0x50>
c001a499:	8d 76 00             	lea    esi,[esi+0x0]
c001a49c:	b8 01 00 00 00       	mov    eax,0x1
c001a4a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a4:	83 c4 1c             	add    esp,0x1c
c001a4a7:	c3                   	ret    

c001a4a8 <FAT::truncate(void*, unsigned long long)>:
c001a4a8:	83 ec 2c             	sub    esp,0x2c
c001a4ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a4c0:	75 0a                	jne    c001a4cc <FAT::truncate(void*, unsigned long long)+0x24>
c001a4c2:	b8 04 00 00 00       	mov    eax,0x4
c001a4c7:	eb 47                	jmp    c001a510 <FAT::truncate(void*, unsigned long long)+0x68>
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a4df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4e3:	83 ec 08             	sub    esp,0x8
c001a4e6:	50                   	push   eax
c001a4e7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a4eb:	e8 51 a1 fe ff       	call   c0004641 <f_lseek>
c001a4f0:	83 c4 10             	add    esp,0x10
c001a4f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4fb:	85 c0                	test   eax,eax
c001a4fd:	75 09                	jne    c001a508 <FAT::truncate(void*, unsigned long long)+0x60>
c001a4ff:	b8 00 00 00 00       	mov    eax,0x0
c001a504:	eb 0a                	jmp    c001a510 <FAT::truncate(void*, unsigned long long)+0x68>
c001a506:	66 90                	xchg   ax,ax
c001a508:	b8 01 00 00 00       	mov    eax,0x1
c001a50d:	8d 76 00             	lea    esi,[esi+0x0]
c001a510:	83 c4 2c             	add    esp,0x2c
c001a513:	c3                   	ret    

c001a514 <FAT::seek(void*, unsigned long long)>:
c001a514:	83 ec 2c             	sub    esp,0x2c
c001a517:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a51b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a51f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a527:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a52c:	75 0a                	jne    c001a538 <FAT::seek(void*, unsigned long long)+0x24>
c001a52e:	b8 04 00 00 00       	mov    eax,0x4
c001a533:	eb 33                	jmp    c001a568 <FAT::seek(void*, unsigned long long)+0x54>
c001a535:	8d 76 00             	lea    esi,[esi+0x0]
c001a538:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a53c:	83 ec 08             	sub    esp,0x8
c001a53f:	50                   	push   eax
c001a540:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a544:	e8 f8 a0 fe ff       	call   c0004641 <f_lseek>
c001a549:	83 c4 10             	add    esp,0x10
c001a54c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a554:	85 c0                	test   eax,eax
c001a556:	75 08                	jne    c001a560 <FAT::seek(void*, unsigned long long)+0x4c>
c001a558:	b8 00 00 00 00       	mov    eax,0x0
c001a55d:	eb 09                	jmp    c001a568 <FAT::seek(void*, unsigned long long)+0x54>
c001a55f:	90                   	nop
c001a560:	b8 01 00 00 00       	mov    eax,0x1
c001a565:	8d 76 00             	lea    esi,[esi+0x0]
c001a568:	83 c4 2c             	add    esp,0x2c
c001a56b:	c3                   	ret    

c001a56c <fatWrapperReadDisk>:
c001a56c:	53                   	push   ebx
c001a56d:	83 ec 18             	sub    esp,0x18
c001a570:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a574:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a578:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a57d:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a584:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a588:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a58c:	ba 00 00 00 00       	mov    edx,0x0
c001a591:	83 ec 0c             	sub    esp,0xc
c001a594:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a598:	53                   	push   ebx
c001a599:	52                   	push   edx
c001a59a:	50                   	push   eax
c001a59b:	51                   	push   ecx
c001a59c:	e8 17 fb fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001a5a1:	83 c4 20             	add    esp,0x20
c001a5a4:	83 c4 18             	add    esp,0x18
c001a5a7:	5b                   	pop    ebx
c001a5a8:	c3                   	ret    
c001a5a9:	8d 76 00             	lea    esi,[esi+0x0]

c001a5ac <fatWrapperWriteDisk>:
c001a5ac:	53                   	push   ebx
c001a5ad:	83 ec 18             	sub    esp,0x18
c001a5b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a5bd:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001a5c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a5c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5cc:	ba 00 00 00 00       	mov    edx,0x0
c001a5d1:	83 ec 0c             	sub    esp,0xc
c001a5d4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a5d8:	53                   	push   ebx
c001a5d9:	52                   	push   edx
c001a5da:	50                   	push   eax
c001a5db:	51                   	push   ecx
c001a5dc:	e8 43 fb fe ff       	call   c000a124 <LogicalDisk::write(unsigned long long, int, void*)>
c001a5e1:	83 c4 20             	add    esp,0x20
c001a5e4:	83 c4 18             	add    esp,0x18
c001a5e7:	5b                   	pop    ebx
c001a5e8:	c3                   	ret    
c001a5e9:	8d 76 00             	lea    esi,[esi+0x0]

c001a5ec <fatWrapperIoctl>:
c001a5ec:	53                   	push   ebx
c001a5ed:	83 ec 28             	sub    esp,0x28
c001a5f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a5f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5f8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a5fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a600:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a605:	83 f8 02             	cmp    eax,0x2
c001a608:	75 32                	jne    c001a63c <fatWrapperIoctl+0x50>
c001a60a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a60e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a612:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a617:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a61e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a624:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a62a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a62e:	66 89 02             	mov    WORD PTR [edx],ax
c001a631:	b8 00 00 00 00       	mov    eax,0x0
c001a636:	e9 c5 00 00 00       	jmp    c001a700 <fatWrapperIoctl+0x114>
c001a63b:	90                   	nop
c001a63c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a641:	83 f8 01             	cmp    eax,0x1
c001a644:	75 6a                	jne    c001a6b0 <fatWrapperIoctl+0xc4>
c001a646:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a64a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a64e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a653:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001a65a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a660:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a666:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a66c:	89 c8                	mov    eax,ecx
c001a66e:	89 da                	mov    edx,ebx
c001a670:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a674:	c1 e0 0a             	shl    eax,0xa
c001a677:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a67c:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001a683:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a689:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a68f:	89 cb                	mov    ebx,ecx
c001a691:	c1 fb 1f             	sar    ebx,0x1f
c001a694:	53                   	push   ebx
c001a695:	51                   	push   ecx
c001a696:	52                   	push   edx
c001a697:	50                   	push   eax
c001a698:	e8 c7 59 00 00       	call   c0020064 <__udivdi3>
c001a69d:	83 c4 10             	add    esp,0x10
c001a6a0:	89 c2                	mov    edx,eax
c001a6a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6a6:	89 10                	mov    DWORD PTR [eax],edx
c001a6a8:	b8 00 00 00 00       	mov    eax,0x0
c001a6ad:	eb 51                	jmp    c001a700 <fatWrapperIoctl+0x114>
c001a6af:	90                   	nop
c001a6b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6b5:	85 c0                	test   eax,eax
c001a6b7:	75 07                	jne    c001a6c0 <fatWrapperIoctl+0xd4>
c001a6b9:	b8 00 00 00 00       	mov    eax,0x0
c001a6be:	eb 40                	jmp    c001a700 <fatWrapperIoctl+0x114>
c001a6c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6c5:	83 f8 03             	cmp    eax,0x3
c001a6c8:	75 1a                	jne    c001a6e4 <fatWrapperIoctl+0xf8>
c001a6ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a6dc:	b8 00 00 00 00       	mov    eax,0x0
c001a6e1:	eb 1d                	jmp    c001a700 <fatWrapperIoctl+0x114>
c001a6e3:	90                   	nop
c001a6e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a6e9:	83 f8 04             	cmp    eax,0x4
c001a6ec:	75 0a                	jne    c001a6f8 <fatWrapperIoctl+0x10c>
c001a6ee:	b8 00 00 00 00       	mov    eax,0x0
c001a6f3:	eb 0b                	jmp    c001a700 <fatWrapperIoctl+0x114>
c001a6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f8:	b8 04 00 00 00       	mov    eax,0x4
c001a6fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a700:	83 c4 28             	add    esp,0x28
c001a703:	5b                   	pop    ebx
c001a704:	c3                   	ret    
c001a705:	90                   	nop
c001a706:	66 90                	xchg   ax,ax

c001a708 <FAT::FAT()>:
c001a708:	83 ec 1c             	sub    esp,0x1c
c001a70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a70f:	83 ec 0c             	sub    esp,0xc
c001a712:	50                   	push   eax
c001a713:	e8 58 d6 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a718:	83 c4 10             	add    esp,0x10
c001a71b:	ba 68 3c 02 c0       	mov    edx,0xc0023c68
c001a720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a724:	89 10                	mov    DWORD PTR [eax],edx
c001a726:	c7 05 a0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a0,0x0
c001a730:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a738:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a73d:	7f 19                	jg     c001a758 <FAT::FAT()+0x50>
c001a73f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a743:	c7 04 85 c0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2840],0xffffffff
c001a74e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a753:	eb e3                	jmp    c001a738 <FAT::FAT()+0x30>
c001a755:	8d 76 00             	lea    esi,[esi+0x0]
c001a758:	90                   	nop
c001a759:	83 c4 1c             	add    esp,0x1c
c001a75c:	c3                   	ret    
c001a75d:	90                   	nop
c001a75e:	66 90                	xchg   ax,ax

c001a760 <FAT::fixFilepath(char*)>:
c001a760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a764:	8a 00                	mov    al,BYTE PTR [eax]
c001a766:	0f be c0             	movsx  eax,al
c001a769:	83 f8 40             	cmp    eax,0x40
c001a76c:	7e 2e                	jle    c001a79c <FAT::fixFilepath(char*)+0x3c>
c001a76e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a772:	8a 00                	mov    al,BYTE PTR [eax]
c001a774:	83 e8 41             	sub    eax,0x41
c001a777:	88 c2                	mov    dl,al
c001a779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a77d:	88 10                	mov    BYTE PTR [eax],dl
c001a77f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a783:	8a 00                	mov    al,BYTE PTR [eax]
c001a785:	0f be c0             	movsx  eax,al
c001a788:	8b 04 85 c0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2840]
c001a78f:	83 c0 30             	add    eax,0x30
c001a792:	88 c2                	mov    dl,al
c001a794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a798:	88 10                	mov    BYTE PTR [eax],dl
c001a79a:	66 90                	xchg   ax,ax
c001a79c:	90                   	nop
c001a79d:	c3                   	ret    
c001a79e:	66 90                	xchg   ax,ax

c001a7a0 <FAT::open(char const*, void**, FileOpenMode)>:
c001a7a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a7a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a7ae:	74 0c                	je     c001a7bc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a7b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a7b8:	75 0e                	jne    c001a7c8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a7ba:	66 90                	xchg   ax,ax
c001a7bc:	b8 04 00 00 00       	mov    eax,0x4
c001a7c1:	e9 46 01 00 00       	jmp    c001a90c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a7c6:	66 90                	xchg   ax,ax
c001a7c8:	83 ec 08             	sub    esp,0x8
c001a7cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7d6:	50                   	push   eax
c001a7d7:	e8 64 5e fe ff       	call   c0000640 <strcpy>
c001a7dc:	83 c4 10             	add    esp,0x10
c001a7df:	83 ec 08             	sub    esp,0x8
c001a7e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7e6:	50                   	push   eax
c001a7e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a7ee:	e8 6d ff ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001a7f3:	83 c4 10             	add    esp,0x10
c001a7f6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a7fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a805:	83 e0 01             	and    eax,0x1
c001a808:	74 12                	je     c001a81c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a80a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a811:	83 c8 01             	or     eax,0x1
c001a814:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a81b:	90                   	nop
c001a81c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a823:	83 e0 04             	and    eax,0x4
c001a826:	74 24                	je     c001a84c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a828:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a82f:	83 c8 30             	or     eax,0x30
c001a832:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a839:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a840:	83 c8 02             	or     eax,0x2
c001a843:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a84a:	66 90                	xchg   ax,ax
c001a84c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a853:	83 e0 02             	and    eax,0x2
c001a856:	74 14                	je     c001a86c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a858:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a85f:	83 c8 02             	or     eax,0x2
c001a862:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a869:	8d 76 00             	lea    esi,[esi+0x0]
c001a86c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a873:	83 e0 08             	and    eax,0x8
c001a876:	74 14                	je     c001a88c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a878:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a87f:	83 c8 04             	or     eax,0x4
c001a882:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a889:	8d 76 00             	lea    esi,[esi+0x0]
c001a88c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a893:	83 e0 10             	and    eax,0x10
c001a896:	74 14                	je     c001a8ac <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a898:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a89f:	83 c8 08             	or     eax,0x8
c001a8a2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ac:	83 ec 0c             	sub    esp,0xc
c001a8af:	68 28 02 00 00       	push   0x228
c001a8b4:	e8 a6 40 ff ff       	call   c000e95f <malloc>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	89 c2                	mov    edx,eax
c001a8be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8c5:	89 10                	mov    DWORD PTR [eax],edx
c001a8c7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a8cf:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8d8:	83 ec 04             	sub    esp,0x4
c001a8db:	52                   	push   edx
c001a8dc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a8e0:	52                   	push   edx
c001a8e1:	50                   	push   eax
c001a8e2:	e8 5c 95 fe ff       	call   c0003e43 <f_open>
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a8f1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a8f9:	74 09                	je     c001a904 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a8fb:	b8 01 00 00 00       	mov    eax,0x1
c001a900:	eb 0a                	jmp    c001a90c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a902:	66 90                	xchg   ax,ax
c001a904:	b8 00 00 00 00       	mov    eax,0x0
c001a909:	8d 76 00             	lea    esi,[esi+0x0]
c001a90c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a912:	c3                   	ret    
c001a913:	90                   	nop

c001a914 <FAT::openDir(char const*, void**)>:
c001a914:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a91a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a922:	74 0c                	je     c001a930 <FAT::openDir(char const*, void**)+0x1c>
c001a924:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a92c:	75 0e                	jne    c001a93c <FAT::openDir(char const*, void**)+0x28>
c001a92e:	66 90                	xchg   ax,ax
c001a930:	b8 04 00 00 00       	mov    eax,0x4
c001a935:	e9 82 00 00 00       	jmp    c001a9bc <FAT::openDir(char const*, void**)+0xa8>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	83 ec 08             	sub    esp,0x8
c001a93f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a946:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a94a:	50                   	push   eax
c001a94b:	e8 f0 5c fe ff       	call   c0000640 <strcpy>
c001a950:	83 c4 10             	add    esp,0x10
c001a953:	83 ec 08             	sub    esp,0x8
c001a956:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a95a:	50                   	push   eax
c001a95b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a962:	e8 f9 fd ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001a967:	83 c4 10             	add    esp,0x10
c001a96a:	83 ec 0c             	sub    esp,0xc
c001a96d:	6a 30                	push   0x30
c001a96f:	e8 eb 3f ff ff       	call   c000e95f <malloc>
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	89 c2                	mov    edx,eax
c001a979:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a980:	89 10                	mov    DWORD PTR [eax],edx
c001a982:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a989:	8b 00                	mov    eax,DWORD PTR [eax]
c001a98b:	83 ec 08             	sub    esp,0x8
c001a98e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a992:	52                   	push   edx
c001a993:	50                   	push   eax
c001a994:	e8 59 9e fe ff       	call   c00047f2 <f_opendir>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a9a3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a9ab:	74 07                	je     c001a9b4 <FAT::openDir(char const*, void**)+0xa0>
c001a9ad:	b8 01 00 00 00       	mov    eax,0x1
c001a9b2:	eb 08                	jmp    c001a9bc <FAT::openDir(char const*, void**)+0xa8>
c001a9b4:	b8 00 00 00 00       	mov    eax,0x0
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a9c2:	c3                   	ret    
c001a9c3:	90                   	nop

c001a9c4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a9c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a9ca:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a9d2:	75 0c                	jne    c001a9e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a9d4:	b8 04 00 00 00       	mov    eax,0x4
c001a9d9:	e9 d6 00 00 00       	jmp    c001aab4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a9de:	66 90                	xchg   ax,ax
c001a9e0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a9e8:	75 0a                	jne    c001a9f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a9ea:	b8 04 00 00 00       	mov    eax,0x4
c001a9ef:	e9 c0 00 00 00       	jmp    c001aab4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a9f4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a9fc:	75 0a                	jne    c001aa08 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a9fe:	b8 04 00 00 00       	mov    eax,0x4
c001aa03:	e9 ac 00 00 00       	jmp    c001aab4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aa08:	83 ec 08             	sub    esp,0x8
c001aa0b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa12:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa19:	50                   	push   eax
c001aa1a:	e8 21 5c fe ff       	call   c0000640 <strcpy>
c001aa1f:	83 c4 10             	add    esp,0x10
c001aa22:	83 ec 08             	sub    esp,0x8
c001aa25:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001aa2c:	50                   	push   eax
c001aa2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa34:	e8 27 fd ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	83 ec 08             	sub    esp,0x8
c001aa3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa43:	50                   	push   eax
c001aa44:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001aa4b:	50                   	push   eax
c001aa4c:	e8 20 9f fe ff       	call   c0004971 <f_stat>
c001aa51:	83 c4 10             	add    esp,0x10
c001aa54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aa5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aa62:	85 c0                	test   eax,eax
c001aa64:	74 0a                	je     c001aa70 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001aa66:	83 f8 04             	cmp    eax,0x4
c001aa69:	74 39                	je     c001aaa4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001aa6b:	eb 3f                	jmp    c001aaac <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001aa6d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aa74:	0f b6 c0             	movzx  eax,al
c001aa77:	83 e0 10             	and    eax,0x10
c001aa7a:	0f 95 c2             	setne  dl
c001aa7d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001aa84:	88 10                	mov    BYTE PTR [eax],dl
c001aa86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8a:	ba 00 00 00 00       	mov    edx,0x0
c001aa8f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001aa96:	89 01                	mov    DWORD PTR [ecx],eax
c001aa98:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa9b:	b8 00 00 00 00       	mov    eax,0x0
c001aaa0:	eb 12                	jmp    c001aab4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aaa2:	66 90                	xchg   ax,ax
c001aaa4:	b8 02 00 00 00       	mov    eax,0x2
c001aaa9:	eb 09                	jmp    c001aab4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001aaab:	90                   	nop
c001aaac:	b8 01 00 00 00       	mov    eax,0x1
c001aab1:	8d 76 00             	lea    esi,[esi+0x0]
c001aab4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aaba:	c3                   	ret    
c001aabb:	90                   	nop

c001aabc <FAT::unlink(char const*)>:
c001aabc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aac2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aaca:	75 08                	jne    c001aad4 <FAT::unlink(char const*)+0x18>
c001aacc:	b8 04 00 00 00       	mov    eax,0x4
c001aad1:	eb 61                	jmp    c001ab34 <FAT::unlink(char const*)+0x78>
c001aad3:	90                   	nop
c001aad4:	83 ec 08             	sub    esp,0x8
c001aad7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aade:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aae2:	50                   	push   eax
c001aae3:	e8 58 5b fe ff       	call   c0000640 <strcpy>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	83 ec 08             	sub    esp,0x8
c001aaee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaf2:	50                   	push   eax
c001aaf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aafa:	e8 61 fc ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001aaff:	83 c4 10             	add    esp,0x10
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab09:	50                   	push   eax
c001ab0a:	e8 d4 a0 fe ff       	call   c0004be3 <f_unlink>
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ab20:	85 c0                	test   eax,eax
c001ab22:	75 08                	jne    c001ab2c <FAT::unlink(char const*)+0x70>
c001ab24:	b8 00 00 00 00       	mov    eax,0x0
c001ab29:	eb 09                	jmp    c001ab34 <FAT::unlink(char const*)+0x78>
c001ab2b:	90                   	nop
c001ab2c:	b8 01 00 00 00       	mov    eax,0x1
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab3a:	c3                   	ret    
c001ab3b:	90                   	nop

c001ab3c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab3c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ab42:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ab49:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ab50:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ab54:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ab58:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ab60:	75 0a                	jne    c001ab6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ab62:	b8 04 00 00 00       	mov    eax,0x4
c001ab67:	e9 7c 01 00 00       	jmp    c001ace8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001ab6c:	83 ec 08             	sub    esp,0x8
c001ab6f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab76:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ab7a:	50                   	push   eax
c001ab7b:	e8 c0 5a fe ff       	call   c0000640 <strcpy>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	83 ec 08             	sub    esp,0x8
c001ab86:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab8a:	50                   	push   eax
c001ab8b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ab92:	e8 c9 fb ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ab97:	83 c4 10             	add    esp,0x10
c001ab9a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001aba2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001abaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abaf:	83 e0 01             	and    eax,0x1
c001abb2:	74 14                	je     c001abc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001abb4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abbb:	83 c8 01             	or     eax,0x1
c001abbe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001abc5:	8d 76 00             	lea    esi,[esi+0x0]
c001abc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abcd:	83 e0 02             	and    eax,0x2
c001abd0:	74 12                	je     c001abe4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001abd2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abd9:	83 c8 20             	or     eax,0x20
c001abdc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001abe3:	90                   	nop
c001abe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abe9:	83 e0 04             	and    eax,0x4
c001abec:	74 12                	je     c001ac00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001abee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001abf5:	83 c8 04             	or     eax,0x4
c001abf8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001abff:	90                   	nop
c001ac00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ac05:	83 e0 08             	and    eax,0x8
c001ac08:	74 12                	je     c001ac1c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001ac0a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac11:	83 c8 02             	or     eax,0x2
c001ac14:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ac1b:	90                   	nop
c001ac1c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac21:	83 e0 01             	and    eax,0x1
c001ac24:	74 12                	je     c001ac38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001ac26:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac2d:	83 c8 01             	or     eax,0x1
c001ac30:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac37:	90                   	nop
c001ac38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac3d:	83 e0 02             	and    eax,0x2
c001ac40:	74 12                	je     c001ac54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001ac42:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac49:	83 c8 20             	or     eax,0x20
c001ac4c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac53:	90                   	nop
c001ac54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac59:	83 e0 04             	and    eax,0x4
c001ac5c:	74 12                	je     c001ac70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001ac5e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac65:	83 c8 04             	or     eax,0x4
c001ac68:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac6f:	90                   	nop
c001ac70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ac75:	83 e0 08             	and    eax,0x8
c001ac78:	74 12                	je     c001ac8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001ac7a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ac81:	83 c8 02             	or     eax,0x2
c001ac84:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ac8b:	90                   	nop
c001ac8c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001ac93:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ac9a:	09 d0                	or     eax,edx
c001ac9c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001aca3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001acab:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001acb3:	83 ec 04             	sub    esp,0x4
c001acb6:	52                   	push   edx
c001acb7:	50                   	push   eax
c001acb8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acbc:	50                   	push   eax
c001acbd:	e8 96 a3 fe ff       	call   c0005058 <f_chmod>
c001acc2:	83 c4 10             	add    esp,0x10
c001acc5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001accc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001acd3:	85 c0                	test   eax,eax
c001acd5:	75 09                	jne    c001ace0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001acd7:	b8 00 00 00 00       	mov    eax,0x0
c001acdc:	eb 0a                	jmp    c001ace8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001acde:	66 90                	xchg   ax,ax
c001ace0:	b8 01 00 00 00       	mov    eax,0x1
c001ace5:	8d 76 00             	lea    esi,[esi+0x0]
c001ace8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001acee:	c3                   	ret    
c001acef:	90                   	nop

c001acf0 <FAT::rename(char const*, char const*)>:
c001acf0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001acf6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001acfe:	74 0c                	je     c001ad0c <FAT::rename(char const*, char const*)+0x1c>
c001ad00:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ad08:	75 0e                	jne    c001ad18 <FAT::rename(char const*, char const*)+0x28>
c001ad0a:	66 90                	xchg   ax,ax
c001ad0c:	b8 04 00 00 00       	mov    eax,0x4
c001ad11:	e9 9e 00 00 00       	jmp    c001adb4 <FAT::rename(char const*, char const*)+0xc4>
c001ad16:	66 90                	xchg   ax,ax
c001ad18:	83 ec 08             	sub    esp,0x8
c001ad1b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad22:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ad29:	50                   	push   eax
c001ad2a:	e8 11 59 fe ff       	call   c0000640 <strcpy>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	83 ec 08             	sub    esp,0x8
c001ad35:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ad3c:	50                   	push   eax
c001ad3d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad44:	e8 17 fa ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ad49:	83 c4 10             	add    esp,0x10
c001ad4c:	83 ec 08             	sub    esp,0x8
c001ad4f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ad56:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ad5a:	50                   	push   eax
c001ad5b:	e8 e0 58 fe ff       	call   c0000640 <strcpy>
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	83 ec 08             	sub    esp,0x8
c001ad66:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad6a:	50                   	push   eax
c001ad6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ad72:	e8 e9 f9 ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	83 ec 08             	sub    esp,0x8
c001ad7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ad81:	50                   	push   eax
c001ad82:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ad89:	50                   	push   eax
c001ad8a:	e8 11 a1 fe ff       	call   c0004ea0 <f_rename>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ad99:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ada0:	85 c0                	test   eax,eax
c001ada2:	75 08                	jne    c001adac <FAT::rename(char const*, char const*)+0xbc>
c001ada4:	b8 00 00 00 00       	mov    eax,0x0
c001ada9:	eb 09                	jmp    c001adb4 <FAT::rename(char const*, char const*)+0xc4>
c001adab:	90                   	nop
c001adac:	b8 01 00 00 00       	mov    eax,0x1
c001adb1:	8d 76 00             	lea    esi,[esi+0x0]
c001adb4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001adba:	c3                   	ret    
c001adbb:	90                   	nop

c001adbc <FAT::mkdir(char const*)>:
c001adbc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001adc2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001adca:	75 08                	jne    c001add4 <FAT::mkdir(char const*)+0x18>
c001adcc:	b8 04 00 00 00       	mov    eax,0x4
c001add1:	eb 61                	jmp    c001ae34 <FAT::mkdir(char const*)+0x78>
c001add3:	90                   	nop
c001add4:	83 ec 08             	sub    esp,0x8
c001add7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001adde:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ade2:	50                   	push   eax
c001ade3:	e8 58 58 fe ff       	call   c0000640 <strcpy>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	83 ec 08             	sub    esp,0x8
c001adee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001adf2:	50                   	push   eax
c001adf3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001adfa:	e8 61 f9 ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001adff:	83 c4 10             	add    esp,0x10
c001ae02:	83 ec 0c             	sub    esp,0xc
c001ae05:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae09:	50                   	push   eax
c001ae0a:	e8 f6 9e fe ff       	call   c0004d05 <f_mkdir>
c001ae0f:	83 c4 10             	add    esp,0x10
c001ae12:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ae19:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ae20:	85 c0                	test   eax,eax
c001ae22:	75 08                	jne    c001ae2c <FAT::mkdir(char const*)+0x70>
c001ae24:	b8 00 00 00 00       	mov    eax,0x0
c001ae29:	eb 09                	jmp    c001ae34 <FAT::mkdir(char const*)+0x78>
c001ae2b:	90                   	nop
c001ae2c:	b8 01 00 00 00       	mov    eax,0x1
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ae3a:	c3                   	ret    
c001ae3b:	90                   	nop

c001ae3c <FAT::exists(char const*)>:
c001ae3c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ae42:	83 ec 08             	sub    esp,0x8
c001ae45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ae4c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae50:	50                   	push   eax
c001ae51:	e8 ea 57 fe ff       	call   c0000640 <strcpy>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	83 ec 08             	sub    esp,0x8
c001ae5c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ae60:	50                   	push   eax
c001ae61:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ae68:	e8 f3 f8 ff ff       	call   c001a760 <FAT::fixFilepath(char*)>
c001ae6d:	83 c4 10             	add    esp,0x10
c001ae70:	83 ec 08             	sub    esp,0x8
c001ae73:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ae7a:	50                   	push   eax
c001ae7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ae7f:	50                   	push   eax
c001ae80:	e8 ec 9a fe ff       	call   c0004971 <f_stat>
c001ae85:	83 c4 10             	add    esp,0x10
c001ae88:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ae8f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ae96:	85 c0                	test   eax,eax
c001ae98:	75 06                	jne    c001aea0 <FAT::exists(char const*)+0x64>
c001ae9a:	b0 01                	mov    al,0x1
c001ae9c:	eb 06                	jmp    c001aea4 <FAT::exists(char const*)+0x68>
c001ae9e:	66 90                	xchg   ax,ax
c001aea0:	b0 00                	mov    al,0x0
c001aea2:	66 90                	xchg   ax,ax
c001aea4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aeaa:	c3                   	ret    
c001aeab:	90                   	nop

c001aeac <isoReadDiscSectorHelper>:
c001aeac:	83 ec 2c             	sub    esp,0x2c
c001aeaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aeb3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeb7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001aebc:	83 e8 41             	sub    eax,0x41
c001aebf:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001aec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeca:	ba 00 00 00 00       	mov    edx,0x0
c001aecf:	83 ec 0c             	sub    esp,0xc
c001aed2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aed6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aeda:	52                   	push   edx
c001aedb:	50                   	push   eax
c001aedc:	51                   	push   ecx
c001aedd:	e8 d6 f1 fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001aee2:	83 c4 20             	add    esp,0x20
c001aee5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aee9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aeee:	74 0c                	je     c001aefc <isoReadDiscSectorHelper+0x50>
c001aef0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aef4:	c1 e0 0b             	shl    eax,0xb
c001aef7:	eb 0b                	jmp    c001af04 <isoReadDiscSectorHelper+0x58>
c001aef9:	8d 76 00             	lea    esi,[esi+0x0]
c001aefc:	b8 00 00 00 00       	mov    eax,0x0
c001af01:	8d 76 00             	lea    esi,[esi+0x0]
c001af04:	83 c4 2c             	add    esp,0x2c
c001af07:	c3                   	ret    

c001af08 <iso_kprintf>:
c001af08:	83 ec 0c             	sub    esp,0xc
c001af0b:	83 ec 08             	sub    esp,0x8
c001af0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af12:	68 0d 39 02 c0       	push   0xc002390d
c001af17:	e8 48 c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af1c:	83 c4 10             	add    esp,0x10
c001af1f:	90                   	nop
c001af20:	83 c4 0c             	add    esp,0xc
c001af23:	c3                   	ret    

c001af24 <iso_kprintfd>:
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	83 ec 08             	sub    esp,0x8
c001af2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af2e:	68 d9 1a 02 c0       	push   0xc0021ad9
c001af33:	e8 2c c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af38:	83 c4 10             	add    esp,0x10
c001af3b:	90                   	nop
c001af3c:	83 c4 0c             	add    esp,0xc
c001af3f:	c3                   	ret    

c001af40 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001af40:	b8 08 00 00 00       	mov    eax,0x8
c001af45:	c3                   	ret    

c001af46 <ISO9660::truncate(void*, unsigned long long)>:
c001af46:	b8 01 00 00 00       	mov    eax,0x1
c001af4b:	c3                   	ret    

c001af4c <ISO9660::getName()>:
c001af4c:	b8 cc 3c 02 c0       	mov    eax,0xc0023ccc
c001af51:	c3                   	ret    

c001af52 <ISO9660::closeDir(void*)>:
c001af52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af56:	8b 00                	mov    eax,DWORD PTR [eax]
c001af58:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001af5b:	90                   	nop

c001af5c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001af5c:	b8 01 00 00 00       	mov    eax,0x1
c001af61:	c3                   	ret    

c001af62 <ISO9660::unlink(char const*)>:
c001af62:	b8 01 00 00 00       	mov    eax,0x1
c001af67:	c3                   	ret    

c001af68 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001af68:	b8 03 00 00 00       	mov    eax,0x3
c001af6d:	c3                   	ret    

c001af6e <ISO9660::rename(char const*, char const*)>:
c001af6e:	b8 01 00 00 00       	mov    eax,0x1
c001af73:	c3                   	ret    

c001af74 <ISO9660::mkdir(char const*)>:
c001af74:	b8 01 00 00 00       	mov    eax,0x1
c001af79:	c3                   	ret    

c001af7a <ISO9660::~ISO9660()>:
c001af7a:	83 ec 0c             	sub    esp,0xc
c001af7d:	ba 0c 3e 02 c0       	mov    edx,0xc0023e0c
c001af82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af86:	89 10                	mov    DWORD PTR [eax],edx
c001af88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af8c:	83 ec 0c             	sub    esp,0xc
c001af8f:	50                   	push   eax
c001af90:	e8 ff cd fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001af95:	83 c4 10             	add    esp,0x10
c001af98:	90                   	nop
c001af99:	83 c4 0c             	add    esp,0xc
c001af9c:	c3                   	ret    
c001af9d:	90                   	nop

c001af9e <ISO9660::~ISO9660()>:
c001af9e:	83 ec 0c             	sub    esp,0xc
c001afa1:	83 ec 0c             	sub    esp,0xc
c001afa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afa8:	e8 cd ff ff ff       	call   c001af7a <ISO9660::~ISO9660()>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	83 ec 08             	sub    esp,0x8
c001afb3:	6a 08                	push   0x8
c001afb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afb9:	e8 06 17 ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c001afbe:	83 c4 10             	add    esp,0x10
c001afc1:	83 c4 0c             	add    esp,0xc
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop

c001afc6 <ISO9660::exists(char const*)>:
c001afc6:	83 ec 18             	sub    esp,0x18
c001afc9:	68 e7 3c 02 c0       	push   0xc0023ce7
c001afce:	e8 d3 3c ff ff       	call   c000eca6 <KePanic(char const*)>
c001afd3:	31 c0                	xor    eax,eax
c001afd5:	83 c4 1c             	add    esp,0x1c
c001afd8:	c3                   	ret    
c001afd9:	90                   	nop

c001afda <ISO9660::open(char const*, void**, FileOpenMode)>:
c001afda:	56                   	push   esi
c001afdb:	53                   	push   ebx
c001afdc:	53                   	push   ebx
c001afdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afe1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001afe5:	85 db                	test   ebx,ebx
c001afe7:	0f 84 ca 00 00 00    	je     c001b0b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001afed:	85 f6                	test   esi,esi
c001afef:	0f 84 c2 00 00 00    	je     c001b0b7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001aff5:	b8 03 00 00 00       	mov    eax,0x3
c001affa:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001afff:	0f 85 b7 00 00 00    	jne    c001b0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b005:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b007:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b00e:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b014:	74 1b                	je     c001b031 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b016:	85 c0                	test   eax,eax
c001b018:	74 10                	je     c001b02a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001b01a:	83 ec 0c             	sub    esp,0xc
c001b01d:	68 05 3d 02 c0       	push   0xc0023d05
c001b022:	e8 7f 3c ff ff       	call   c000eca6 <KePanic(char const*)>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	8a 03                	mov    al,BYTE PTR [ebx]
c001b02c:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b031:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b034:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b03b:	85 c0                	test   eax,eax
c001b03d:	74 09                	je     c001b048 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001b03f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b046:	74 48                	je     c001b090 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001b048:	83 ec 0c             	sub    esp,0xc
c001b04b:	68 15 3d 02 c0       	push   0xc0023d15
c001b050:	e8 0f bf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b055:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b058:	83 c4 10             	add    esp,0x10
c001b05b:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b062:	85 c0                	test   eax,eax
c001b064:	74 17                	je     c001b07d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001b066:	83 ec 0c             	sub    esp,0xc
c001b069:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b070:	68 35 3d 02 c0       	push   0xc0023d35
c001b075:	e8 ea be fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	83 ec 0c             	sub    esp,0xc
c001b080:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b087:	50                   	push   eax
c001b088:	e8 a1 bb fe ff       	call   c0006c2e <init_percd>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	83 c3 03             	add    ebx,0x3
c001b093:	51                   	push   ecx
c001b094:	51                   	push   ecx
c001b095:	6a 00                	push   0x0
c001b097:	53                   	push   ebx
c001b098:	e8 58 b6 fe ff       	call   c00066f5 <iso_open>
c001b09d:	83 c4 10             	add    esp,0x10
c001b0a0:	89 c2                	mov    edx,eax
c001b0a2:	b8 01 00 00 00       	mov    eax,0x1
c001b0a7:	83 fa ff             	cmp    edx,0xffffffff
c001b0aa:	74 10                	je     c001b0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b0ac:	83 c2 32             	add    edx,0x32
c001b0af:	31 c0                	xor    eax,eax
c001b0b1:	01 d2                	add    edx,edx
c001b0b3:	89 16                	mov    DWORD PTR [esi],edx
c001b0b5:	eb 05                	jmp    c001b0bc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001b0b7:	b8 04 00 00 00       	mov    eax,0x4
c001b0bc:	5a                   	pop    edx
c001b0bd:	5b                   	pop    ebx
c001b0be:	5e                   	pop    esi
c001b0bf:	c3                   	ret    

c001b0c0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b0c0:	53                   	push   ebx
c001b0c1:	83 ec 08             	sub    esp,0x8
c001b0c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0cc:	85 c0                	test   eax,eax
c001b0ce:	74 2d                	je     c001b0fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b0d0:	85 db                	test   ebx,ebx
c001b0d2:	74 29                	je     c001b0fd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001b0d4:	b9 02 00 00 00       	mov    ecx,0x2
c001b0d9:	52                   	push   edx
c001b0da:	99                   	cdq    
c001b0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0df:	f7 f9                	idiv   ecx
c001b0e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b0e5:	83 e8 32             	sub    eax,0x32
c001b0e8:	50                   	push   eax
c001b0e9:	e8 af b6 fe ff       	call   c000679d <iso_read>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	89 03                	mov    DWORD PTR [ebx],eax
c001b0f3:	09 d0                	or     eax,edx
c001b0f5:	0f 94 c0             	sete   al
c001b0f8:	0f b6 c0             	movzx  eax,al
c001b0fb:	eb 05                	jmp    c001b102 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001b0fd:	b8 04 00 00 00       	mov    eax,0x4
c001b102:	83 c4 08             	add    esp,0x8
c001b105:	5b                   	pop    ebx
c001b106:	c3                   	ret    
c001b107:	90                   	nop

c001b108 <ISO9660::seek(void*, unsigned long long)>:
c001b108:	57                   	push   edi
c001b109:	56                   	push   esi
c001b10a:	b8 04 00 00 00       	mov    eax,0x4
c001b10f:	51                   	push   ecx
c001b110:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b114:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b118:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b11c:	85 d2                	test   edx,edx
c001b11e:	74 26                	je     c001b146 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001b120:	6a 00                	push   0x0
c001b122:	b9 02 00 00 00       	mov    ecx,0x2
c001b127:	57                   	push   edi
c001b128:	89 d0                	mov    eax,edx
c001b12a:	56                   	push   esi
c001b12b:	99                   	cdq    
c001b12c:	f7 f9                	idiv   ecx
c001b12e:	83 e8 32             	sub    eax,0x32
c001b131:	50                   	push   eax
c001b132:	e8 7c b7 fe ff       	call   c00068b3 <iso_seek>
c001b137:	83 c4 10             	add    esp,0x10
c001b13a:	31 f0                	xor    eax,esi
c001b13c:	31 fa                	xor    edx,edi
c001b13e:	09 d0                	or     eax,edx
c001b140:	0f 95 c0             	setne  al
c001b143:	0f b6 c0             	movzx  eax,al
c001b146:	5a                   	pop    edx
c001b147:	5e                   	pop    esi
c001b148:	5f                   	pop    edi
c001b149:	c3                   	ret    

c001b14a <ISO9660::tell(void*, unsigned long long*)>:
c001b14a:	53                   	push   ebx
c001b14b:	83 ec 08             	sub    esp,0x8
c001b14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b152:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b156:	85 c0                	test   eax,eax
c001b158:	74 24                	je     c001b17e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b15a:	85 db                	test   ebx,ebx
c001b15c:	74 20                	je     c001b17e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001b15e:	83 ec 0c             	sub    esp,0xc
c001b161:	b9 02 00 00 00       	mov    ecx,0x2
c001b166:	99                   	cdq    
c001b167:	f7 f9                	idiv   ecx
c001b169:	83 e8 32             	sub    eax,0x32
c001b16c:	50                   	push   eax
c001b16d:	e8 c5 b7 fe ff       	call   c0006937 <iso_tell>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	89 03                	mov    DWORD PTR [ebx],eax
c001b177:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001b17a:	31 c0                	xor    eax,eax
c001b17c:	eb 05                	jmp    c001b183 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001b17e:	b8 04 00 00 00       	mov    eax,0x4
c001b183:	83 c4 08             	add    esp,0x8
c001b186:	5b                   	pop    ebx
c001b187:	c3                   	ret    

c001b188 <ISO9660::stat(void*, unsigned long long*)>:
c001b188:	53                   	push   ebx
c001b189:	83 ec 14             	sub    esp,0x14
c001b18c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b190:	68 59 3d 02 c0       	push   0xc0023d59
c001b195:	e8 ca bd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b1a2:	74 2c                	je     c001b1d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b1a4:	85 db                	test   ebx,ebx
c001b1a6:	74 28                	je     c001b1d0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001b1a8:	83 ec 0c             	sub    esp,0xc
c001b1ab:	b9 02 00 00 00       	mov    ecx,0x2
c001b1b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1b4:	99                   	cdq    
c001b1b5:	f7 f9                	idiv   ecx
c001b1b7:	83 e8 32             	sub    eax,0x32
c001b1ba:	50                   	push   eax
c001b1bb:	e8 a8 b7 fe ff       	call   c0006968 <iso_total>
c001b1c0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b1c7:	89 03                	mov    DWORD PTR [ebx],eax
c001b1c9:	83 c4 10             	add    esp,0x10
c001b1cc:	31 c0                	xor    eax,eax
c001b1ce:	eb 05                	jmp    c001b1d5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001b1d0:	b8 04 00 00 00       	mov    eax,0x4
c001b1d5:	83 c4 08             	add    esp,0x8
c001b1d8:	5b                   	pop    ebx
c001b1d9:	c3                   	ret    

c001b1da <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b1da:	55                   	push   ebp
c001b1db:	57                   	push   edi
c001b1dc:	56                   	push   esi
c001b1dd:	53                   	push   ebx
c001b1de:	83 ec 18             	sub    esp,0x18
c001b1e1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b1e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b1e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b1ed:	68 61 3d 02 c0       	push   0xc0023d61
c001b1f2:	e8 6d bd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	85 ff                	test   edi,edi
c001b1fc:	0f 94 c0             	sete   al
c001b1ff:	85 f6                	test   esi,esi
c001b201:	0f 94 c2             	sete   dl
c001b204:	09 d0                	or     eax,edx
c001b206:	a8 01                	test   al,0x1
c001b208:	0f 85 dd 00 00 00    	jne    c001b2eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b20e:	85 db                	test   ebx,ebx
c001b210:	0f 84 d5 00 00 00    	je     c001b2eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001b216:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b219:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001b21f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b226:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b22d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001b22f:	38 0d a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,cl
c001b235:	74 1b                	je     c001b252 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001b237:	85 c0                	test   eax,eax
c001b239:	74 10                	je     c001b24b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001b23b:	83 ec 0c             	sub    esp,0xc
c001b23e:	68 05 3d 02 c0       	push   0xc0023d05
c001b243:	e8 5e 3a ff ff       	call   c000eca6 <KePanic(char const*)>
c001b248:	83 c4 10             	add    esp,0x10
c001b24b:	8a 03                	mov    al,BYTE PTR [ebx]
c001b24d:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b252:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b255:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b25c:	85 c0                	test   eax,eax
c001b25e:	74 09                	je     c001b269 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001b260:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b267:	74 51                	je     c001b2ba <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b269:	83 ec 0c             	sub    esp,0xc
c001b26c:	68 69 3d 02 c0       	push   0xc0023d69
c001b271:	e8 ee bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b276:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b279:	83 c4 10             	add    esp,0x10
c001b27c:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001b284:	74 21                	je     c001b2a7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001b286:	83 ec 0c             	sub    esp,0xc
c001b289:	68 89 3d 02 c0       	push   0xc0023d89
c001b28e:	e8 d1 bc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b293:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b296:	83 c4 10             	add    esp,0x10
c001b299:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b2a0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b2a7:	83 ec 0c             	sub    esp,0xc
c001b2aa:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b2b1:	50                   	push   eax
c001b2b2:	e8 77 b9 fe ff       	call   c0006c2e <init_percd>
c001b2b7:	83 c4 10             	add    esp,0x10
c001b2ba:	83 c3 03             	add    ebx,0x3
c001b2bd:	52                   	push   edx
c001b2be:	52                   	push   edx
c001b2bf:	6a 00                	push   0x0
c001b2c1:	53                   	push   ebx
c001b2c2:	e8 2e b4 fe ff       	call   c00066f5 <iso_open>
c001b2c7:	83 c4 10             	add    esp,0x10
c001b2ca:	89 c5                	mov    ebp,eax
c001b2cc:	83 f8 ff             	cmp    eax,0xffffffff
c001b2cf:	75 21                	jne    c001b2f2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001b2d1:	50                   	push   eax
c001b2d2:	50                   	push   eax
c001b2d3:	6a 01                	push   0x1
c001b2d5:	53                   	push   ebx
c001b2d6:	e8 1a b4 fe ff       	call   c00066f5 <iso_open>
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	ba 02 00 00 00       	mov    edx,0x2
c001b2e3:	40                   	inc    eax
c001b2e4:	74 2b                	je     c001b311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b2e6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001b2e9:	eb 24                	jmp    c001b30f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001b2eb:	ba 04 00 00 00       	mov    edx,0x4
c001b2f0:	eb 1f                	jmp    c001b311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001b2f2:	83 ec 0c             	sub    esp,0xc
c001b2f5:	50                   	push   eax
c001b2f6:	e8 6d b6 fe ff       	call   c0006968 <iso_total>
c001b2fb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001b302:	89 07                	mov    DWORD PTR [edi],eax
c001b304:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b307:	e8 73 b4 fe ff       	call   c000677f <iso_close>
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	31 d2                	xor    edx,edx
c001b311:	83 c4 0c             	add    esp,0xc
c001b314:	89 d0                	mov    eax,edx
c001b316:	5b                   	pop    ebx
c001b317:	5e                   	pop    esi
c001b318:	5f                   	pop    edi
c001b319:	5d                   	pop    ebp
c001b31a:	c3                   	ret    
c001b31b:	90                   	nop

c001b31c <ISO9660::close(void*)>:
c001b31c:	83 ec 0c             	sub    esp,0xc
c001b31f:	b8 04 00 00 00       	mov    eax,0x4
c001b324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b328:	85 d2                	test   edx,edx
c001b32a:	74 1b                	je     c001b347 <ISO9660::close(void*)+0x2b>
c001b32c:	83 ec 0c             	sub    esp,0xc
c001b32f:	b9 02 00 00 00       	mov    ecx,0x2
c001b334:	89 d0                	mov    eax,edx
c001b336:	99                   	cdq    
c001b337:	f7 f9                	idiv   ecx
c001b339:	83 e8 32             	sub    eax,0x32
c001b33c:	50                   	push   eax
c001b33d:	e8 3d b4 fe ff       	call   c000677f <iso_close>
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	31 c0                	xor    eax,eax
c001b347:	83 c4 0c             	add    esp,0xc
c001b34a:	c3                   	ret    
c001b34b:	90                   	nop

c001b34c <ISO9660::openDir(char const*, void**)>:
c001b34c:	56                   	push   esi
c001b34d:	53                   	push   ebx
c001b34e:	50                   	push   eax
c001b34f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b353:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b357:	85 db                	test   ebx,ebx
c001b359:	0f 84 bd 00 00 00    	je     c001b41c <ISO9660::openDir(char const*, void**)+0xd0>
c001b35f:	85 f6                	test   esi,esi
c001b361:	0f 84 b5 00 00 00    	je     c001b41c <ISO9660::openDir(char const*, void**)+0xd0>
c001b367:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b369:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b370:	38 15 a0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8a0,dl
c001b376:	74 1b                	je     c001b393 <ISO9660::openDir(char const*, void**)+0x47>
c001b378:	85 c0                	test   eax,eax
c001b37a:	74 10                	je     c001b38c <ISO9660::openDir(char const*, void**)+0x40>
c001b37c:	83 ec 0c             	sub    esp,0xc
c001b37f:	68 05 3d 02 c0       	push   0xc0023d05
c001b384:	e8 1d 39 ff ff       	call   c000eca6 <KePanic(char const*)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	8a 03                	mov    al,BYTE PTR [ebx]
c001b38e:	a2 a0 d8 02 c0       	mov    ds:0xc002d8a0,al
c001b393:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b396:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001b39d:	85 c0                	test   eax,eax
c001b39f:	74 10                	je     c001b3b1 <ISO9660::openDir(char const*, void**)+0x65>
c001b3a1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b3a8:	74 1a                	je     c001b3c4 <ISO9660::openDir(char const*, void**)+0x78>
c001b3aa:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b3b1:	83 ec 0c             	sub    esp,0xc
c001b3b4:	0f be 05 a0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8a0
c001b3bb:	50                   	push   eax
c001b3bc:	e8 6d b8 fe ff       	call   c0006c2e <init_percd>
c001b3c1:	83 c4 10             	add    esp,0x10
c001b3c4:	83 c3 03             	add    ebx,0x3
c001b3c7:	50                   	push   eax
c001b3c8:	50                   	push   eax
c001b3c9:	6a 01                	push   0x1
c001b3cb:	53                   	push   ebx
c001b3cc:	e8 24 b3 fe ff       	call   c00066f5 <iso_open>
c001b3d1:	83 c4 10             	add    esp,0x10
c001b3d4:	89 c3                	mov    ebx,eax
c001b3d6:	83 f8 ff             	cmp    eax,0xffffffff
c001b3d9:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b3de:	75 1c                	jne    c001b3fc <ISO9660::openDir(char const*, void**)+0xb0>
c001b3e0:	53                   	push   ebx
c001b3e1:	53                   	push   ebx
c001b3e2:	68 ad 3d 02 c0       	push   0xc0023dad
c001b3e7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b3ed:	e8 b2 60 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	b8 01 00 00 00       	mov    eax,0x1
c001b3fa:	eb 25                	jmp    c001b421 <ISO9660::openDir(char const*, void**)+0xd5>
c001b3fc:	01 db                	add    ebx,ebx
c001b3fe:	51                   	push   ecx
c001b3ff:	83 c3 65             	add    ebx,0x65
c001b402:	51                   	push   ecx
c001b403:	68 c0 3d 02 c0       	push   0xc0023dc0
c001b408:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b40e:	e8 91 60 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001b413:	89 1e                	mov    DWORD PTR [esi],ebx
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	31 c0                	xor    eax,eax
c001b41a:	eb 05                	jmp    c001b421 <ISO9660::openDir(char const*, void**)+0xd5>
c001b41c:	b8 04 00 00 00       	mov    eax,0x4
c001b421:	5a                   	pop    edx
c001b422:	5b                   	pop    ebx
c001b423:	5e                   	pop    esi
c001b424:	c3                   	ret    
c001b425:	90                   	nop

c001b426 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b426:	55                   	push   ebp
c001b427:	57                   	push   edi
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b430:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b437:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b43e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b446:	0f 84 e7 00 00 00    	je     c001b533 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b44c:	85 db                	test   ebx,ebx
c001b44e:	0f 84 df 00 00 00    	je     c001b533 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	68 d3 3d 02 c0       	push   0xc0023dd3
c001b45c:	e8 03 bb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b461:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b468:	b9 02 00 00 00       	mov    ecx,0x2
c001b46d:	99                   	cdq    
c001b46e:	f7 f9                	idiv   ecx
c001b470:	83 e8 32             	sub    eax,0x32
c001b473:	89 04 24             	mov    DWORD PTR [esp],eax
c001b476:	e8 3f b5 fe ff       	call   c00069ba <iso_readdir>
c001b47b:	83 c4 10             	add    esp,0x10
c001b47e:	89 c6                	mov    esi,eax
c001b480:	85 c0                	test   eax,eax
c001b482:	75 37                	jne    c001b4bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b484:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b489:	56                   	push   esi
c001b48a:	56                   	push   esi
c001b48b:	68 de 3d 02 c0       	push   0xc0023dde
c001b490:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b496:	e8 09 60 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001b49b:	83 c4 0c             	add    esp,0xc
c001b49e:	68 10 01 00 00       	push   0x110
c001b4a3:	6a 00                	push   0x0
c001b4a5:	57                   	push   edi
c001b4a6:	e8 45 50 fe ff       	call   c00004f0 <memset>
c001b4ab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b4b1:	83 c4 10             	add    esp,0x10
c001b4b4:	b8 01 00 00 00       	mov    eax,0x1
c001b4b9:	eb 7d                	jmp    c001b538 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b4bb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b4c1:	8d 68 08             	lea    ebp,[eax+0x8]
c001b4c4:	83 ec 0c             	sub    esp,0xc
c001b4c7:	55                   	push   ebp
c001b4c8:	e8 a3 50 fe ff       	call   c0000570 <strlen>
c001b4cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b4d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b4d9:	83 c4 10             	add    esp,0x10
c001b4dc:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b4e0:	75 0a                	jne    c001b4ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b4e2:	b8 02 00 00 00       	mov    eax,0x2
c001b4e7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b4ea:	74 05                	je     c001b4f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b4ec:	b8 01 00 00 00       	mov    eax,0x1
c001b4f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4f5:	50                   	push   eax
c001b4f6:	50                   	push   eax
c001b4f7:	55                   	push   ebp
c001b4f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b4fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b500:	50                   	push   eax
c001b501:	e8 3a 51 fe ff       	call   c0000640 <strcpy>
c001b506:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b50d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b50f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b515:	5a                   	pop    edx
c001b516:	a1 d8 d6 02 c0       	mov    eax,ds:0xc002d6d8
c001b51b:	59                   	pop    ecx
c001b51c:	68 f1 3d 02 c0       	push   0xc0023df1
c001b521:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b527:	e8 78 5f ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001b52c:	83 c4 10             	add    esp,0x10
c001b52f:	31 c0                	xor    eax,eax
c001b531:	eb 05                	jmp    c001b538 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b533:	b8 04 00 00 00       	mov    eax,0x4
c001b538:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b53e:	5b                   	pop    ebx
c001b53f:	5e                   	pop    esi
c001b540:	5f                   	pop    edi
c001b541:	5d                   	pop    ebp
c001b542:	c3                   	ret    

c001b543 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b543:	57                   	push   edi
c001b544:	56                   	push   esi
c001b545:	53                   	push   ebx
c001b546:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b54a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b54e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b552:	39 35 a4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8a4,esi
c001b558:	0f be cb             	movsx  ecx,bl
c001b55b:	75 0b                	jne    c001b568 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b55d:	0f be 05 a4 50 02 c0 	movsx  eax,BYTE PTR ds:0xc00250a4
c001b564:	39 c8                	cmp    eax,ecx
c001b566:	74 47                	je     c001b5af <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	31 d2                	xor    edx,edx
c001b56d:	68 c0 d8 02 c0       	push   0xc002d8c0
c001b572:	6a 01                	push   0x1
c001b574:	52                   	push   edx
c001b575:	56                   	push   esi
c001b576:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001b57d:	e8 36 eb fe ff       	call   c000a0b8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b582:	83 c4 20             	add    esp,0x20
c001b585:	85 c0                	test   eax,eax
c001b587:	75 0e                	jne    c001b597 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b589:	89 35 a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,esi
c001b58f:	88 1d a4 50 02 c0    	mov    BYTE PTR ds:0xc00250a4,bl
c001b595:	eb 18                	jmp    c001b5af <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b597:	50                   	push   eax
c001b598:	68 00 08 00 00       	push   0x800
c001b59d:	6a 00                	push   0x0
c001b59f:	57                   	push   edi
c001b5a0:	e8 4b 4f fe ff       	call   c00004f0 <memset>
c001b5a5:	83 c4 10             	add    esp,0x10
c001b5a8:	b8 01 00 00 00       	mov    eax,0x1
c001b5ad:	eb 0e                	jmp    c001b5bd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b5af:	be c0 d8 02 c0       	mov    esi,0xc002d8c0
c001b5b4:	b9 00 08 00 00       	mov    ecx,0x800
c001b5b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5bb:	31 c0                	xor    eax,eax
c001b5bd:	5b                   	pop    ebx
c001b5be:	5e                   	pop    esi
c001b5bf:	5f                   	pop    edi
c001b5c0:	c3                   	ret    
c001b5c1:	90                   	nop

c001b5c2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b5c2:	53                   	push   ebx
c001b5c3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b5c9:	c7 05 a4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8a4,0xdeadbeef
c001b5d3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b5da:	8d 58 41             	lea    ebx,[eax+0x41]
c001b5dd:	0f be db             	movsx  ebx,bl
c001b5e0:	53                   	push   ebx
c001b5e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5e5:	50                   	push   eax
c001b5e6:	6a 10                	push   0x10
c001b5e8:	e8 56 ff ff ff       	call   c001b543 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5ed:	83 c4 10             	add    esp,0x10
c001b5f0:	31 d2                	xor    edx,edx
c001b5f2:	85 c0                	test   eax,eax
c001b5f4:	75 33                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b5f6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b5fb:	75 2c                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b5fd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b602:	75 25                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b604:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b609:	75 1e                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b60b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b610:	75 17                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b612:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b617:	75 10                	jne    c001b629 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b619:	83 ec 0c             	sub    esp,0xc
c001b61c:	53                   	push   ebx
c001b61d:	e8 0c b6 fe ff       	call   c0006c2e <init_percd>
c001b622:	83 c4 10             	add    esp,0x10
c001b625:	40                   	inc    eax
c001b626:	0f 95 c2             	setne  dl
c001b629:	88 d0                	mov    al,dl
c001b62b:	81 c4 08 08 00 00    	add    esp,0x808
c001b631:	5b                   	pop    ebx
c001b632:	c3                   	ret    
c001b633:	90                   	nop

c001b634 <ISO9660::ISO9660()>:
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63b:	83 ec 0c             	sub    esp,0xc
c001b63e:	50                   	push   eax
c001b63f:	e8 2c c7 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b644:	83 c4 10             	add    esp,0x10
c001b647:	ba 0c 3e 02 c0       	mov    edx,0xc0023e0c
c001b64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b650:	89 10                	mov    DWORD PTR [eax],edx
c001b652:	e8 e9 b6 fe ff       	call   c0006d40 <fs_iso9660_init>
c001b657:	90                   	nop
c001b658:	83 c4 0c             	add    esp,0xc
c001b65b:	c3                   	ret    

c001b65c <SoundCard::beginPlayback()>:
c001b65c:	c7 44 24 04 70 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023e70
c001b664:	e9 3d 36 ff ff       	jmp    c000eca6 <KePanic(char const*)>
c001b669:	90                   	nop

c001b66a <SoundCard::stopPlayback()>:
c001b66a:	c7 44 24 04 70 3e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023e70
c001b672:	e9 2f 36 ff ff       	jmp    c000eca6 <KePanic(char const*)>
c001b677:	90                   	nop

c001b678 <SoundCard::SoundCard(char const*)>:
c001b678:	83 ec 1c             	sub    esp,0x1c
c001b67b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67f:	83 ec 08             	sub    esp,0x8
c001b682:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b686:	50                   	push   eax
c001b687:	e8 38 db fe ff       	call   c00091c4 <Device::Device(char const*)>
c001b68c:	83 c4 10             	add    esp,0x10
c001b68f:	ba bc 3e 02 c0       	mov    edx,0xc0023ebc
c001b694:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b698:	89 10                	mov    DWORD PTR [eax],edx
c001b69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b69e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b6cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b6dd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6e5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b6ea:	7f 1a                	jg     c001b706 <SoundCard::SoundCard(char const*)+0x8e>
c001b6ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6f4:	83 c2 54             	add    edx,0x54
c001b6f7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b6ff:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b704:	eb df                	jmp    c001b6e5 <SoundCard::SoundCard(char const*)+0x6d>
c001b706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b70a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b711:	90                   	nop
c001b712:	83 c4 1c             	add    esp,0x1c
c001b715:	c3                   	ret    

c001b716 <SoundCard::~SoundCard()>:
c001b716:	83 ec 0c             	sub    esp,0xc
c001b719:	ba bc 3e 02 c0       	mov    edx,0xc0023ebc
c001b71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b722:	89 10                	mov    DWORD PTR [eax],edx
c001b724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	50                   	push   eax
c001b72c:	e8 33 d8 fe ff       	call   c0008f64 <Device::~Device()>
c001b731:	83 c4 10             	add    esp,0x10
c001b734:	90                   	nop
c001b735:	83 c4 0c             	add    esp,0xc
c001b738:	c3                   	ret    
c001b739:	90                   	nop

c001b73a <SoundCard::~SoundCard()>:
c001b73a:	83 ec 0c             	sub    esp,0xc
c001b73d:	83 ec 0c             	sub    esp,0xc
c001b740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b744:	e8 cd ff ff ff       	call   c001b716 <SoundCard::~SoundCard()>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	83 ec 08             	sub    esp,0x8
c001b74f:	68 e8 01 00 00       	push   0x1e8
c001b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b758:	e8 67 0f ff ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c001b75d:	83 c4 10             	add    esp,0x10
c001b760:	83 c4 0c             	add    esp,0xc
c001b763:	c3                   	ret    

c001b764 <SoundCard::configureRates(int, int, int)>:
c001b764:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b768:	31 c0                	xor    eax,eax
c001b76a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b771:	75 20                	jne    c001b793 <SoundCard::configureRates(int, int, int)+0x2f>
c001b773:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b777:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b77d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b781:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b791:	b0 01                	mov    al,0x1
c001b793:	c3                   	ret    

c001b794 <SoundCard::getSamples16(int, short*)>:
c001b794:	55                   	push   ebp
c001b795:	57                   	push   edi
c001b796:	31 ff                	xor    edi,edi
c001b798:	56                   	push   esi
c001b799:	53                   	push   ebx
c001b79a:	31 db                	xor    ebx,ebx
c001b79c:	83 ec 10             	sub    esp,0x10
c001b79f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b7a3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7a7:	8d 04 36             	lea    eax,[esi+esi*1]
c001b7aa:	50                   	push   eax
c001b7ab:	6a 00                	push   0x0
c001b7ad:	55                   	push   ebp
c001b7ae:	e8 3d 4d fe ff       	call   c00004f0 <memset>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7ba:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b7c1:	85 c0                	test   eax,eax
c001b7c3:	74 1b                	je     c001b7e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b7c5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b7c9:	75 15                	jne    c001b7e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b7cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b7cf:	55                   	push   ebp
c001b7d0:	56                   	push   esi
c001b7d1:	50                   	push   eax
c001b7d2:	e8 8d 03 00 00       	call   c001bb64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	39 c7                	cmp    edi,eax
c001b7dc:	7d 02                	jge    c001b7e0 <SoundCard::getSamples16(int, short*)+0x4c>
c001b7de:	89 c7                	mov    edi,eax
c001b7e0:	43                   	inc    ebx
c001b7e1:	83 fb 20             	cmp    ebx,0x20
c001b7e4:	75 d0                	jne    c001b7b6 <SoundCard::getSamples16(int, short*)+0x22>
c001b7e6:	83 c4 0c             	add    esp,0xc
c001b7e9:	89 f8                	mov    eax,edi
c001b7eb:	5b                   	pop    ebx
c001b7ec:	5e                   	pop    esi
c001b7ed:	5f                   	pop    edi
c001b7ee:	5d                   	pop    ebp
c001b7ef:	c3                   	ret    

c001b7f0 <SoundCard::getSamples32(int, int*)>:
c001b7f0:	55                   	push   ebp
c001b7f1:	57                   	push   edi
c001b7f2:	31 ff                	xor    edi,edi
c001b7f4:	56                   	push   esi
c001b7f5:	31 f6                	xor    esi,esi
c001b7f7:	53                   	push   ebx
c001b7f8:	83 ec 10             	sub    esp,0x10
c001b7fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7ff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b803:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b807:	c1 e0 02             	shl    eax,0x2
c001b80a:	50                   	push   eax
c001b80b:	6a 00                	push   0x0
c001b80d:	55                   	push   ebp
c001b80e:	e8 dd 4c fe ff       	call   c00004f0 <memset>
c001b813:	83 c4 10             	add    esp,0x10
c001b816:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 1b                	je     c001b83c <SoundCard::getSamples32(int, int*)+0x4c>
c001b821:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b825:	75 15                	jne    c001b83c <SoundCard::getSamples32(int, int*)+0x4c>
c001b827:	53                   	push   ebx
c001b828:	55                   	push   ebp
c001b829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b82d:	50                   	push   eax
c001b82e:	e8 fd 03 00 00       	call   c001bc30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b833:	83 c4 10             	add    esp,0x10
c001b836:	39 c6                	cmp    esi,eax
c001b838:	7d 02                	jge    c001b83c <SoundCard::getSamples32(int, int*)+0x4c>
c001b83a:	89 c6                	mov    esi,eax
c001b83c:	47                   	inc    edi
c001b83d:	83 ff 20             	cmp    edi,0x20
c001b840:	75 d4                	jne    c001b816 <SoundCard::getSamples32(int, int*)+0x26>
c001b842:	85 f6                	test   esi,esi
c001b844:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b84b:	75 0f                	jne    c001b85c <SoundCard::getSamples32(int, int*)+0x6c>
c001b84d:	85 c0                	test   eax,eax
c001b84f:	74 1b                	je     c001b86c <SoundCard::getSamples32(int, int*)+0x7c>
c001b851:	83 ec 0c             	sub    esp,0xc
c001b854:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b856:	53                   	push   ebx
c001b857:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b85a:	eb 0d                	jmp    c001b869 <SoundCard::getSamples32(int, int*)+0x79>
c001b85c:	85 c0                	test   eax,eax
c001b85e:	75 0c                	jne    c001b86c <SoundCard::getSamples32(int, int*)+0x7c>
c001b860:	83 ec 0c             	sub    esp,0xc
c001b863:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b865:	53                   	push   ebx
c001b866:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b869:	83 c4 10             	add    esp,0x10
c001b86c:	83 c4 0c             	add    esp,0xc
c001b86f:	89 f0                	mov    eax,esi
c001b871:	5b                   	pop    ebx
c001b872:	5e                   	pop    esi
c001b873:	5f                   	pop    edi
c001b874:	5d                   	pop    ebp
c001b875:	c3                   	ret    

c001b876 <SoundCard::addChannel(SoundPort*)>:
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	31 c0                	xor    eax,eax
c001b87b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b87f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b887:	74 1b                	je     c001b8a4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b889:	40                   	inc    eax
c001b88a:	83 f8 20             	cmp    eax,0x20
c001b88d:	75 f0                	jne    c001b87f <SoundCard::addChannel(SoundPort*)+0x9>
c001b88f:	83 ec 0c             	sub    esp,0xc
c001b892:	68 95 3e 02 c0       	push   0xc0023e95
c001b897:	e8 0a 34 ff ff       	call   c000eca6 <KePanic(char const*)>
c001b89c:	83 c4 10             	add    esp,0x10
c001b89f:	83 c8 ff             	or     eax,0xffffffff
c001b8a2:	eb 0b                	jmp    c001b8af <SoundCard::addChannel(SoundPort*)+0x39>
c001b8a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8a8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b8af:	83 c4 0c             	add    esp,0xc
c001b8b2:	c3                   	ret    
c001b8b3:	90                   	nop

c001b8b4 <SoundCard::removeChannel(int)>:
c001b8b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8bc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b8c7:	c3                   	ret    

c001b8c8 <SoundPort::SoundPort(int, int, int, int)>:
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8e6:	89 10                	mov    DWORD PTR [eax],edx
c001b8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b8fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b903:	75 13                	jne    c001b918 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b909:	8b 00                	mov    eax,DWORD PTR [eax]
c001b90b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b910:	01 c0                	add    eax,eax
c001b912:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b916:	66 90                	xchg   ax,ax
c001b918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b920:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b927:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b932:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b935:	c1 e0 02             	shl    eax,0x2
c001b938:	83 ec 0c             	sub    esp,0xc
c001b93b:	50                   	push   eax
c001b93c:	e8 1e 30 ff ff       	call   c000e95f <malloc>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	89 c2                	mov    edx,eax
c001b946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b94d:	90                   	nop
c001b94e:	83 c4 0c             	add    esp,0xc
c001b951:	c3                   	ret    
c001b952:	66 90                	xchg   ax,ax

c001b954 <SoundPort::~SoundPort()>:
c001b954:	83 ec 0c             	sub    esp,0xc
c001b957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b95e:	85 c0                	test   eax,eax
c001b960:	74 1e                	je     c001b980 <SoundPort::~SoundPort()+0x2c>
c001b962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b966:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b969:	83 ec 0c             	sub    esp,0xc
c001b96c:	50                   	push   eax
c001b96d:	e8 fd 2f ff ff       	call   c000e96f <free>
c001b972:	83 c4 10             	add    esp,0x10
c001b975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b979:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b980:	90                   	nop
c001b981:	83 c4 0c             	add    esp,0xc
c001b984:	c3                   	ret    
c001b985:	90                   	nop
c001b986:	66 90                	xchg   ax,ax

c001b988 <SoundPort::unpause()>:
c001b988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b98c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b990:	c3                   	ret    
c001b991:	90                   	nop
c001b992:	66 90                	xchg   ax,ax

c001b994 <SoundPort::pause()>:
c001b994:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b998:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop
c001b99e:	66 90                	xchg   ax,ax

c001b9a0 <SoundPort::getBufferUsed()>:
c001b9a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b9a7:	c3                   	ret    

c001b9a8 <SoundPort::getBufferSize()>:
c001b9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b9af:	c3                   	ret    

c001b9b0 <SoundPort::buffer8(signed char*, int)>:
c001b9b0:	55                   	push   ebp
c001b9b1:	57                   	push   edi
c001b9b2:	56                   	push   esi
c001b9b3:	53                   	push   ebx
c001b9b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b9bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b9bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b9c2:	74 70                	je     c001ba34 <SoundPort::buffer8(signed char*, int)+0x84>
c001b9c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b9c8:	85 c9                	test   ecx,ecx
c001b9ca:	7e 68                	jle    c001ba34 <SoundPort::buffer8(signed char*, int)+0x84>
c001b9cc:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001b9d0:	8d 48 01             	lea    ecx,[eax+0x1]
c001b9d3:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b9d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b9d9:	89 f1                	mov    ecx,esi
c001b9db:	c1 e1 18             	shl    ecx,0x18
c001b9de:	29 f1                	sub    ecx,esi
c001b9e0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b9e3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b9e6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b9e9:	74 51                	je     c001ba3c <SoundPort::buffer8(signed char*, int)+0x8c>
c001b9eb:	31 ff                	xor    edi,edi
c001b9ed:	eb 25                	jmp    c001ba14 <SoundPort::buffer8(signed char*, int)+0x64>
c001b9ef:	90                   	nop
c001b9f0:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001b9f5:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b9f8:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001b9fb:	89 f3                	mov    ebx,esi
c001b9fd:	c1 e3 18             	shl    ebx,0x18
c001ba00:	29 f3                	sub    ebx,esi
c001ba02:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ba05:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ba08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba0e:	74 1c                	je     c001ba2c <SoundPort::buffer8(signed char*, int)+0x7c>
c001ba10:	89 c7                	mov    edi,eax
c001ba12:	66 90                	xchg   ax,ax
c001ba14:	8d 47 01             	lea    eax,[edi+0x1]
c001ba17:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ba1b:	75 d3                	jne    c001b9f0 <SoundPort::buffer8(signed char*, int)+0x40>
c001ba1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba21:	8d 76 00             	lea    esi,[esi+0x0]
c001ba24:	5b                   	pop    ebx
c001ba25:	5e                   	pop    esi
c001ba26:	5f                   	pop    edi
c001ba27:	5d                   	pop    ebp
c001ba28:	c3                   	ret    
c001ba29:	8d 76 00             	lea    esi,[esi+0x0]
c001ba2c:	5b                   	pop    ebx
c001ba2d:	8d 47 02             	lea    eax,[edi+0x2]
c001ba30:	5e                   	pop    esi
c001ba31:	5f                   	pop    edi
c001ba32:	5d                   	pop    ebp
c001ba33:	c3                   	ret    
c001ba34:	5b                   	pop    ebx
c001ba35:	31 c0                	xor    eax,eax
c001ba37:	5e                   	pop    esi
c001ba38:	5f                   	pop    edi
c001ba39:	5d                   	pop    ebp
c001ba3a:	c3                   	ret    
c001ba3b:	90                   	nop
c001ba3c:	b8 01 00 00 00       	mov    eax,0x1
c001ba41:	eb e1                	jmp    c001ba24 <SoundPort::buffer8(signed char*, int)+0x74>
c001ba43:	90                   	nop

c001ba44 <SoundPort::buffer16(short*, int)>:
c001ba44:	55                   	push   ebp
c001ba45:	57                   	push   edi
c001ba46:	56                   	push   esi
c001ba47:	53                   	push   ebx
c001ba48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba4c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ba50:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ba53:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ba56:	74 70                	je     c001bac8 <SoundPort::buffer16(short*, int)+0x84>
c001ba58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba5c:	85 c9                	test   ecx,ecx
c001ba5e:	7e 68                	jle    c001bac8 <SoundPort::buffer16(short*, int)+0x84>
c001ba60:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001ba64:	8d 48 01             	lea    ecx,[eax+0x1]
c001ba67:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ba6a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ba6d:	89 f1                	mov    ecx,esi
c001ba6f:	c1 e1 10             	shl    ecx,0x10
c001ba72:	29 f1                	sub    ecx,esi
c001ba74:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ba77:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba7a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ba7d:	74 51                	je     c001bad0 <SoundPort::buffer16(short*, int)+0x8c>
c001ba7f:	31 ff                	xor    edi,edi
c001ba81:	eb 25                	jmp    c001baa8 <SoundPort::buffer16(short*, int)+0x64>
c001ba83:	90                   	nop
c001ba84:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001ba89:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ba8c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ba8f:	89 f3                	mov    ebx,esi
c001ba91:	c1 e3 10             	shl    ebx,0x10
c001ba94:	29 f3                	sub    ebx,esi
c001ba96:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ba99:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ba9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ba9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001baa2:	74 1c                	je     c001bac0 <SoundPort::buffer16(short*, int)+0x7c>
c001baa4:	89 c7                	mov    edi,eax
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	8d 47 01             	lea    eax,[edi+0x1]
c001baab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001baaf:	75 d3                	jne    c001ba84 <SoundPort::buffer16(short*, int)+0x40>
c001bab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bab5:	8d 76 00             	lea    esi,[esi+0x0]
c001bab8:	5b                   	pop    ebx
c001bab9:	5e                   	pop    esi
c001baba:	5f                   	pop    edi
c001babb:	5d                   	pop    ebp
c001babc:	c3                   	ret    
c001babd:	8d 76 00             	lea    esi,[esi+0x0]
c001bac0:	5b                   	pop    ebx
c001bac1:	8d 47 02             	lea    eax,[edi+0x2]
c001bac4:	5e                   	pop    esi
c001bac5:	5f                   	pop    edi
c001bac6:	5d                   	pop    ebp
c001bac7:	c3                   	ret    
c001bac8:	5b                   	pop    ebx
c001bac9:	31 c0                	xor    eax,eax
c001bacb:	5e                   	pop    esi
c001bacc:	5f                   	pop    edi
c001bacd:	5d                   	pop    ebp
c001bace:	c3                   	ret    
c001bacf:	90                   	nop
c001bad0:	b8 01 00 00 00       	mov    eax,0x1
c001bad5:	eb e1                	jmp    c001bab8 <SoundPort::buffer16(short*, int)+0x74>
c001bad7:	90                   	nop

c001bad8 <SoundPort::buffer32(int*, int)>:
c001bad8:	55                   	push   ebp
c001bad9:	57                   	push   edi
c001bada:	56                   	push   esi
c001badb:	53                   	push   ebx
c001badc:	83 ec 04             	sub    esp,0x4
c001badf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bae7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001baea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001baee:	89 04 24             	mov    DWORD PTR [esp],eax
c001baf1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001baf4:	74 5a                	je     c001bb50 <SoundPort::buffer32(int*, int)+0x78>
c001baf6:	85 c0                	test   eax,eax
c001baf8:	7e 56                	jle    c001bb50 <SoundPort::buffer32(int*, int)+0x78>
c001bafa:	8d 71 01             	lea    esi,[ecx+0x1]
c001bafd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001bb00:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001bb03:	8b 37                	mov    esi,DWORD PTR [edi]
c001bb05:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001bb08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb0e:	74 4c                	je     c001bb5c <SoundPort::buffer32(int*, int)+0x84>
c001bb10:	31 f6                	xor    esi,esi
c001bb12:	eb 1c                	jmp    c001bb30 <SoundPort::buffer32(int*, int)+0x58>
c001bb14:	8d 69 01             	lea    ebp,[ecx+0x1]
c001bb17:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001bb1a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001bb1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001bb20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001bb24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bb27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001bb2a:	74 18                	je     c001bb44 <SoundPort::buffer32(int*, int)+0x6c>
c001bb2c:	89 de                	mov    esi,ebx
c001bb2e:	66 90                	xchg   ax,ax
c001bb30:	8d 5e 01             	lea    ebx,[esi+0x1]
c001bb33:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001bb36:	75 dc                	jne    c001bb14 <SoundPort::buffer32(int*, int)+0x3c>
c001bb38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bb3b:	90                   	nop
c001bb3c:	83 c4 04             	add    esp,0x4
c001bb3f:	5b                   	pop    ebx
c001bb40:	5e                   	pop    esi
c001bb41:	5f                   	pop    edi
c001bb42:	5d                   	pop    ebp
c001bb43:	c3                   	ret    
c001bb44:	83 c4 04             	add    esp,0x4
c001bb47:	8d 46 02             	lea    eax,[esi+0x2]
c001bb4a:	5b                   	pop    ebx
c001bb4b:	5e                   	pop    esi
c001bb4c:	5f                   	pop    edi
c001bb4d:	5d                   	pop    ebp
c001bb4e:	c3                   	ret    
c001bb4f:	90                   	nop
c001bb50:	83 c4 04             	add    esp,0x4
c001bb53:	31 c0                	xor    eax,eax
c001bb55:	5b                   	pop    ebx
c001bb56:	5e                   	pop    esi
c001bb57:	5f                   	pop    edi
c001bb58:	5d                   	pop    ebp
c001bb59:	c3                   	ret    
c001bb5a:	66 90                	xchg   ax,ax
c001bb5c:	b8 01 00 00 00       	mov    eax,0x1
c001bb61:	eb d9                	jmp    c001bb3c <SoundPort::buffer32(int*, int)+0x64>
c001bb63:	90                   	nop

c001bb64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001bb64:	57                   	push   edi
c001bb65:	56                   	push   esi
c001bb66:	53                   	push   ebx
c001bb67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001bb6f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001bb75:	39 03                	cmp    DWORD PTR [ebx],eax
c001bb77:	74 13                	je     c001bb8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001bb79:	83 ec 0c             	sub    esp,0xc
c001bb7c:	68 e8 3e 02 c0       	push   0xc0023ee8
c001bb81:	e8 20 31 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bb86:	83 c4 10             	add    esp,0x10
c001bb89:	8d 76 00             	lea    esi,[esi+0x0]
c001bb8c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001bb92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001bb95:	74 11                	je     c001bba8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001bb97:	83 ec 0c             	sub    esp,0xc
c001bb9a:	68 27 3f 02 c0       	push   0xc0023f27
c001bb9f:	e8 02 31 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bba4:	83 c4 10             	add    esp,0x10
c001bba7:	90                   	nop
c001bba8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001bbae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001bbb1:	74 11                	je     c001bbc4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001bbb3:	83 ec 0c             	sub    esp,0xc
c001bbb6:	68 27 3f 02 c0       	push   0xc0023f27
c001bbbb:	e8 e6 30 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bbc0:	83 c4 10             	add    esp,0x10
c001bbc3:	90                   	nop
c001bbc4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001bbc7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001bbcb:	7e 07                	jle    c001bbd4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001bbcd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd4:	85 f6                	test   esi,esi
c001bbd6:	7e 2c                	jle    c001bc04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001bbd8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbdc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001bbdf:	31 c9                	xor    ecx,ecx
c001bbe1:	01 d7                	add    edi,edx
c001bbe3:	90                   	nop
c001bbe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001bbe7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001bbea:	85 c0                	test   eax,eax
c001bbec:	79 06                	jns    c001bbf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001bbee:	05 ff 7f 00 00       	add    eax,0x7fff
c001bbf3:	90                   	nop
c001bbf4:	c1 f8 0f             	sar    eax,0xf
c001bbf7:	83 c1 04             	add    ecx,0x4
c001bbfa:	66 01 02             	add    WORD PTR [edx],ax
c001bbfd:	83 c2 02             	add    edx,0x2
c001bc00:	39 d7                	cmp    edi,edx
c001bc02:	75 e0                	jne    c001bbe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001bc04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001bc07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bc0a:	83 ec 04             	sub    esp,0x4
c001bc0d:	29 f0                	sub    eax,esi
c001bc0f:	c1 e0 02             	shl    eax,0x2
c001bc12:	50                   	push   eax
c001bc13:	8d 04 b2             	lea    eax,[edx+esi*4]
c001bc16:	50                   	push   eax
c001bc17:	52                   	push   edx
c001bc18:	e8 b3 47 fe ff       	call   c00003d0 <memmove>
c001bc1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	29 f0                	sub    eax,esi
c001bc25:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001bc28:	89 f0                	mov    eax,esi
c001bc2a:	5b                   	pop    ebx
c001bc2b:	5e                   	pop    esi
c001bc2c:	5f                   	pop    edi
c001bc2d:	c3                   	ret    
c001bc2e:	66 90                	xchg   ax,ax

c001bc30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001bc30:	57                   	push   edi
c001bc31:	56                   	push   esi
c001bc32:	53                   	push   ebx
c001bc33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bc3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bc3f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001bc45:	39 06                	cmp    DWORD PTR [esi],eax
c001bc47:	74 13                	je     c001bc5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001bc49:	83 ec 0c             	sub    esp,0xc
c001bc4c:	68 08 3f 02 c0       	push   0xc0023f08
c001bc51:	e8 50 30 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bc56:	83 c4 10             	add    esp,0x10
c001bc59:	8d 76 00             	lea    esi,[esi+0x0]
c001bc5c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001bc62:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001bc65:	74 11                	je     c001bc78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001bc67:	83 ec 0c             	sub    esp,0xc
c001bc6a:	68 43 3f 02 c0       	push   0xc0023f43
c001bc6f:	e8 32 30 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	90                   	nop
c001bc78:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001bc7e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001bc81:	74 11                	je     c001bc94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	68 43 3f 02 c0       	push   0xc0023f43
c001bc8b:	e8 16 30 ff ff       	call   c000eca6 <KePanic(char const*)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	90                   	nop
c001bc94:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001bc97:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001bc9b:	7e 07                	jle    c001bca4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001bc9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bca1:	8d 76 00             	lea    esi,[esi+0x0]
c001bca4:	85 ff                	test   edi,edi
c001bca6:	7e 1c                	jle    c001bcc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001bca8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001bcaf:	31 c0                	xor    eax,eax
c001bcb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bcb7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001bcba:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001bcbd:	83 c0 04             	add    eax,0x4
c001bcc0:	39 c1                	cmp    ecx,eax
c001bcc2:	75 f0                	jne    c001bcb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001bcc4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001bcc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bcca:	83 ec 04             	sub    esp,0x4
c001bccd:	29 f8                	sub    eax,edi
c001bccf:	c1 e0 02             	shl    eax,0x2
c001bcd2:	50                   	push   eax
c001bcd3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bcd6:	50                   	push   eax
c001bcd7:	52                   	push   edx
c001bcd8:	e8 f3 46 fe ff       	call   c00003d0 <memmove>
c001bcdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	29 f8                	sub    eax,edi
c001bce5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001bce8:	89 f8                	mov    eax,edi
c001bcea:	5b                   	pop    ebx
c001bceb:	5e                   	pop    esi
c001bcec:	5f                   	pop    edi
c001bced:	c3                   	ret    

c001bcee <PCI::open(int, int, void*)>:
c001bcee:	83 ec 18             	sub    esp,0x18
c001bcf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bcf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bcff:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd01:	50                   	push   eax
c001bd02:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bd05:	31 c0                	xor    eax,eax
c001bd07:	83 c4 1c             	add    esp,0x1c
c001bd0a:	c3                   	ret    
c001bd0b:	90                   	nop

c001bd0c <PCI::close(int, int, void*)>:
c001bd0c:	31 c0                	xor    eax,eax
c001bd0e:	c3                   	ret    
c001bd0f:	90                   	nop

c001bd10 <PCI::PCI()>:
c001bd10:	83 ec 0c             	sub    esp,0xc
c001bd13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd17:	83 ec 08             	sub    esp,0x8
c001bd1a:	68 5f 3f 02 c0       	push   0xc0023f5f
c001bd1f:	50                   	push   eax
c001bd20:	e8 e7 cb fe ff       	call   c000890c <Bus::Bus(char const*)>
c001bd25:	83 c4 10             	add    esp,0x10
c001bd28:	ba 6c 40 02 c0       	mov    edx,0xc002406c
c001bd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd31:	89 10                	mov    DWORD PTR [eax],edx
c001bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd37:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001bd41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd45:	a3 c0 e0 02 c0       	mov    ds:0xc002e0c0,eax
c001bd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd54:	0f b6 d0             	movzx  edx,al
c001bd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd5b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd6c:	0f b6 d0             	movzx  edx,al
c001bd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd73:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bd82:	8d 50 01             	lea    edx,[eax+0x1]
c001bd85:	88 d1                	mov    cl,dl
c001bd87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001bd91:	0f b6 d0             	movzx  edx,al
c001bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd98:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bd9c:	83 c9 c0             	or     ecx,0xffffffc0
c001bd9f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bda3:	90                   	nop
c001bda4:	83 c4 0c             	add    esp,0xc
c001bda7:	c3                   	ret    

c001bda8 <PCI::readBAR8(unsigned int, int)>:
c001bda8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdb0:	f6 c2 01             	test   dl,0x1
c001bdb3:	74 07                	je     c001bdbc <PCI::readBAR8(unsigned int, int)+0x14>
c001bdb5:	83 e2 fc             	and    edx,0xfffffffc
c001bdb8:	01 c2                	add    edx,eax
c001bdba:	ec                   	in     al,dx
c001bdbb:	c3                   	ret    
c001bdbc:	83 e2 f0             	and    edx,0xfffffff0
c001bdbf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001bdc2:	c3                   	ret    
c001bdc3:	90                   	nop

c001bdc4 <PCI::readBAR16(unsigned int, int)>:
c001bdc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdcc:	f6 c2 01             	test   dl,0x1
c001bdcf:	74 08                	je     c001bdd9 <PCI::readBAR16(unsigned int, int)+0x15>
c001bdd1:	83 e2 fc             	and    edx,0xfffffffc
c001bdd4:	01 c2                	add    edx,eax
c001bdd6:	66 ed                	in     ax,dx
c001bdd8:	c3                   	ret    
c001bdd9:	83 e2 f0             	and    edx,0xfffffff0
c001bddc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001bde0:	c3                   	ret    
c001bde1:	90                   	nop

c001bde2 <PCI::readBAR32(unsigned int, int)>:
c001bde2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bde6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdea:	f6 c2 01             	test   dl,0x1
c001bded:	74 07                	je     c001bdf6 <PCI::readBAR32(unsigned int, int)+0x14>
c001bdef:	83 e2 fc             	and    edx,0xfffffffc
c001bdf2:	01 c2                	add    edx,eax
c001bdf4:	ed                   	in     eax,dx
c001bdf5:	c3                   	ret    
c001bdf6:	83 e2 f0             	and    edx,0xfffffff0
c001bdf9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001bdfc:	c3                   	ret    
c001bdfd:	90                   	nop

c001bdfe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001bdfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be0a:	f6 c2 01             	test   dl,0x1
c001be0d:	74 07                	je     c001be16 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001be0f:	83 e2 fc             	and    edx,0xfffffffc
c001be12:	01 ca                	add    edx,ecx
c001be14:	ee                   	out    dx,al
c001be15:	c3                   	ret    
c001be16:	83 e2 f0             	and    edx,0xfffffff0
c001be19:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001be1c:	c3                   	ret    
c001be1d:	90                   	nop

c001be1e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001be1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be2a:	f6 c2 01             	test   dl,0x1
c001be2d:	74 08                	je     c001be37 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001be2f:	83 e2 fc             	and    edx,0xfffffffc
c001be32:	01 ca                	add    edx,ecx
c001be34:	66 ef                	out    dx,ax
c001be36:	c3                   	ret    
c001be37:	83 e2 f0             	and    edx,0xfffffff0
c001be3a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001be3e:	c3                   	ret    
c001be3f:	90                   	nop

c001be40 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001be40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001be44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001be4c:	f6 c2 01             	test   dl,0x1
c001be4f:	74 07                	je     c001be58 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001be51:	83 e2 fc             	and    edx,0xfffffffc
c001be54:	01 ca                	add    edx,ecx
c001be56:	ef                   	out    dx,eax
c001be57:	c3                   	ret    
c001be58:	83 e2 f0             	and    edx,0xfffffff0
c001be5b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001be5e:	c3                   	ret    
c001be5f:	90                   	nop

c001be60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001be60:	55                   	push   ebp
c001be61:	57                   	push   edi
c001be62:	56                   	push   esi
c001be63:	53                   	push   ebx
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001be6c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001be70:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001be74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be78:	83 fe 07             	cmp    esi,0x7
c001be7b:	76 10                	jbe    c001be8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	68 67 3f 02 c0       	push   0xc0023f67
c001be85:	e8 1c 2e ff ff       	call   c000eca6 <KePanic(char const*)>
c001be8a:	83 c4 10             	add    esp,0x10
c001be8d:	0f b6 db             	movzx  ebx,bl
c001be90:	83 fb 0f             	cmp    ebx,0xf
c001be93:	76 10                	jbe    c001bea5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001be95:	83 ec 0c             	sub    esp,0xc
c001be98:	68 97 3f 02 c0       	push   0xc0023f97
c001be9d:	e8 04 2e ff ff       	call   c000eca6 <KePanic(char const*)>
c001bea2:	83 c4 10             	add    esp,0x10
c001bea5:	8d 04 36             	lea    eax,[esi+esi*1]
c001bea8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bead:	83 c8 f0             	or     eax,0xfffffff0
c001beb0:	ee                   	out    dx,al
c001beb1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001beb6:	89 e8                	mov    eax,ebp
c001beb8:	ee                   	out    dx,al
c001beb9:	83 c4 0c             	add    esp,0xc
c001bebc:	89 d8                	mov    eax,ebx
c001bebe:	89 f9                	mov    ecx,edi
c001bec0:	c1 e0 08             	shl    eax,0x8
c001bec3:	0f b6 d9             	movzx  ebx,cl
c001bec6:	83 e3 fc             	and    ebx,0xfffffffc
c001bec9:	09 d8                	or     eax,ebx
c001becb:	5b                   	pop    ebx
c001becc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bed1:	5e                   	pop    esi
c001bed2:	5f                   	pop    edi
c001bed3:	5d                   	pop    ebp
c001bed4:	c3                   	ret    
c001bed5:	90                   	nop

c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bed6:	57                   	push   edi
c001bed7:	56                   	push   esi
c001bed8:	53                   	push   ebx
c001bed9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bedd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bee1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bee7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001beeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001beef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bef3:	83 ff 01             	cmp    edi,0x1
c001bef6:	75 3f                	jne    c001bf37 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001bef8:	89 de                	mov    esi,ebx
c001befa:	0f b6 c0             	movzx  eax,al
c001befd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bf03:	c1 e0 10             	shl    eax,0x10
c001bf06:	0f b6 c9             	movzx  ecx,cl
c001bf09:	09 f0                	or     eax,esi
c001bf0b:	c1 e1 08             	shl    ecx,0x8
c001bf0e:	0f b6 d2             	movzx  edx,dl
c001bf11:	09 c8                	or     eax,ecx
c001bf13:	c1 e2 0b             	shl    edx,0xb
c001bf16:	09 d0                	or     eax,edx
c001bf18:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bf1d:	0d 00 00 00 80       	or     eax,0x80000000
c001bf22:	ef                   	out    dx,eax
c001bf23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bf28:	ed                   	in     eax,dx
c001bf29:	83 e3 02             	and    ebx,0x2
c001bf2c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bf33:	d3 e8                	shr    eax,cl
c001bf35:	eb 44                	jmp    c001bf7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bf37:	83 ff 02             	cmp    edi,0x2
c001bf3a:	75 2d                	jne    c001bf69 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bf3c:	83 ec 0c             	sub    esp,0xc
c001bf3f:	0f b6 c9             	movzx  ecx,cl
c001bf42:	0f b6 d2             	movzx  edx,dl
c001bf45:	0f b6 fb             	movzx  edi,bl
c001bf48:	0f b6 c0             	movzx  eax,al
c001bf4b:	57                   	push   edi
c001bf4c:	51                   	push   ecx
c001bf4d:	52                   	push   edx
c001bf4e:	50                   	push   eax
c001bf4f:	56                   	push   esi
c001bf50:	e8 0b ff ff ff       	call   c001be60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bf55:	89 c2                	mov    edx,eax
c001bf57:	ed                   	in     eax,dx
c001bf58:	83 e3 02             	and    ebx,0x2
c001bf5b:	83 c4 20             	add    esp,0x20
c001bf5e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bf65:	d3 e8                	shr    eax,cl
c001bf67:	eb 12                	jmp    c001bf7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bf69:	83 ec 0c             	sub    esp,0xc
c001bf6c:	68 c7 3f 02 c0       	push   0xc0023fc7
c001bf71:	e8 30 2d ff ff       	call   c000eca6 <KePanic(char const*)>
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	31 c0                	xor    eax,eax
c001bf7b:	5b                   	pop    ebx
c001bf7c:	5e                   	pop    esi
c001bf7d:	5f                   	pop    edi
c001bf7e:	c3                   	ret    
c001bf7f:	90                   	nop

c001bf80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bf80:	83 ec 18             	sub    esp,0x18
c001bf83:	6a 00                	push   0x0
c001bf85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf8a:	50                   	push   eax
c001bf8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf90:	50                   	push   eax
c001bf91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bf96:	50                   	push   eax
c001bf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf9b:	e8 36 ff ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfa0:	83 c4 2c             	add    esp,0x2c
c001bfa3:	c3                   	ret    

c001bfa4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bfa4:	83 ec 18             	sub    esp,0x18
c001bfa7:	6a 0e                	push   0xe
c001bfa9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfae:	50                   	push   eax
c001bfaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfb4:	50                   	push   eax
c001bfb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bfba:	50                   	push   eax
c001bfbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfbf:	e8 12 ff ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfc4:	83 c4 2c             	add    esp,0x2c
c001bfc7:	0f b6 c0             	movzx  eax,al
c001bfca:	c3                   	ret    
c001bfcb:	90                   	nop

c001bfcc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bfcc:	55                   	push   ebp
c001bfcd:	57                   	push   edi
c001bfce:	56                   	push   esi
c001bfcf:	53                   	push   ebx
c001bfd0:	83 ec 18             	sub    esp,0x18
c001bfd3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bfd8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bfdd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bfe2:	6a 0a                	push   0xa
c001bfe4:	56                   	push   esi
c001bfe5:	55                   	push   ebp
c001bfe6:	57                   	push   edi
c001bfe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bfeb:	e8 e6 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bff0:	83 c4 14             	add    esp,0x14
c001bff3:	89 c3                	mov    ebx,eax
c001bff5:	6a 0a                	push   0xa
c001bff7:	0f b6 db             	movzx  ebx,bl
c001bffa:	56                   	push   esi
c001bffb:	55                   	push   ebp
c001bffc:	57                   	push   edi
c001bffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c001:	e8 d0 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c006:	83 c4 2c             	add    esp,0x2c
c001c009:	25 00 ff 00 00       	and    eax,0xff00
c001c00e:	09 d8                	or     eax,ebx
c001c010:	5b                   	pop    ebx
c001c011:	5e                   	pop    esi
c001c012:	5f                   	pop    edi
c001c013:	5d                   	pop    ebp
c001c014:	c3                   	ret    
c001c015:	90                   	nop

c001c016 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c016:	83 ec 18             	sub    esp,0x18
c001c019:	6a 08                	push   0x8
c001c01b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c020:	50                   	push   eax
c001c021:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c026:	50                   	push   eax
c001c027:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c02c:	50                   	push   eax
c001c02d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c031:	e8 a0 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c036:	83 c4 2c             	add    esp,0x2c
c001c039:	0f b6 c4             	movzx  eax,ah
c001c03c:	c3                   	ret    
c001c03d:	90                   	nop

c001c03e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c03e:	83 ec 18             	sub    esp,0x18
c001c041:	6a 08                	push   0x8
c001c043:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c048:	50                   	push   eax
c001c049:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c04e:	50                   	push   eax
c001c04f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c054:	50                   	push   eax
c001c055:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c059:	e8 78 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c05e:	83 c4 2c             	add    esp,0x2c
c001c061:	c3                   	ret    

c001c062 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c062:	83 ec 18             	sub    esp,0x18
c001c065:	6a 3c                	push   0x3c
c001c067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c06c:	50                   	push   eax
c001c06d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c072:	50                   	push   eax
c001c073:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c078:	50                   	push   eax
c001c079:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c07d:	e8 54 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c082:	83 c4 2c             	add    esp,0x2c
c001c085:	c3                   	ret    

c001c086 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c086:	83 ec 18             	sub    esp,0x18
c001c089:	6a 18                	push   0x18
c001c08b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c090:	50                   	push   eax
c001c091:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c096:	50                   	push   eax
c001c097:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c09c:	50                   	push   eax
c001c09d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c0a1:	e8 30 fe ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0a6:	83 c4 2c             	add    esp,0x2c
c001c0a9:	0f b6 c4             	movzx  eax,ah
c001c0ac:	c3                   	ret    
c001c0ad:	90                   	nop

c001c0ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c0ae:	55                   	push   ebp
c001c0af:	57                   	push   edi
c001c0b0:	56                   	push   esi
c001c0b1:	53                   	push   ebx
c001c0b2:	83 ec 28             	sub    esp,0x28
c001c0b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001c0b9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001c0be:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001c0c3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001c0c8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c0cf:	8d 43 12             	lea    eax,[ebx+0x12]
c001c0d2:	83 c3 10             	add    ebx,0x10
c001c0d5:	0f b6 c0             	movzx  eax,al
c001c0d8:	0f b6 db             	movzx  ebx,bl
c001c0db:	50                   	push   eax
c001c0dc:	51                   	push   ecx
c001c0dd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001c0e1:	57                   	push   edi
c001c0e2:	55                   	push   ebp
c001c0e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0e7:	e8 ea fd ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0ec:	83 c4 14             	add    esp,0x14
c001c0ef:	89 c6                	mov    esi,eax
c001c0f1:	53                   	push   ebx
c001c0f2:	c1 e6 10             	shl    esi,0x10
c001c0f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c0f9:	51                   	push   ecx
c001c0fa:	57                   	push   edi
c001c0fb:	55                   	push   ebp
c001c0fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c100:	e8 d1 fd ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c105:	83 c4 3c             	add    esp,0x3c
c001c108:	0f b7 c0             	movzx  eax,ax
c001c10b:	5b                   	pop    ebx
c001c10c:	09 f0                	or     eax,esi
c001c10e:	5e                   	pop    esi
c001c10f:	5f                   	pop    edi
c001c110:	5d                   	pop    ebp
c001c111:	c3                   	ret    

c001c112 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c112:	55                   	push   ebp
c001c113:	57                   	push   edi
c001c114:	56                   	push   esi
c001c115:	53                   	push   ebx
c001c116:	83 ec 0c             	sub    esp,0xc
c001c119:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c11d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c121:	89 f5                	mov    ebp,esi
c001c123:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001c129:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c12d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c131:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c135:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c139:	83 f9 01             	cmp    ecx,0x1
c001c13c:	75 5d                	jne    c001c19b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001c13e:	0f b6 c8             	movzx  ecx,al
c001c141:	0f b6 d2             	movzx  edx,dl
c001c144:	c1 e1 10             	shl    ecx,0x10
c001c147:	c1 e2 0b             	shl    edx,0xb
c001c14a:	89 f0                	mov    eax,esi
c001c14c:	25 fc 00 00 00       	and    eax,0xfc
c001c151:	09 c1                	or     ecx,eax
c001c153:	89 e8                	mov    eax,ebp
c001c155:	0f b6 c0             	movzx  eax,al
c001c158:	c1 e0 08             	shl    eax,0x8
c001c15b:	09 c1                	or     ecx,eax
c001c15d:	09 d1                	or     ecx,edx
c001c15f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c164:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c16a:	89 c8                	mov    eax,ecx
c001c16c:	ef                   	out    dx,eax
c001c16d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c172:	ed                   	in     eax,dx
c001c173:	0f b7 db             	movzx  ebx,bx
c001c176:	83 e6 02             	and    esi,0x2
c001c179:	74 0a                	je     c001c185 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001c17b:	0f b7 d0             	movzx  edx,ax
c001c17e:	c1 e3 10             	shl    ebx,0x10
c001c181:	09 d3                	or     ebx,edx
c001c183:	eb 05                	jmp    c001c18a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001c185:	66 31 c0             	xor    ax,ax
c001c188:	09 c3                	or     ebx,eax
c001c18a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c18f:	89 c8                	mov    eax,ecx
c001c191:	ef                   	out    dx,eax
c001c192:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c197:	89 d8                	mov    eax,ebx
c001c199:	eb 41                	jmp    c001c1dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c19b:	83 f9 02             	cmp    ecx,0x2
c001c19e:	75 45                	jne    c001c1e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001c1a0:	83 ec 0c             	sub    esp,0xc
c001c1a3:	0f b6 d2             	movzx  edx,dl
c001c1a6:	89 f1                	mov    ecx,esi
c001c1a8:	0f b6 c0             	movzx  eax,al
c001c1ab:	0f b6 f1             	movzx  esi,cl
c001c1ae:	89 e9                	mov    ecx,ebp
c001c1b0:	56                   	push   esi
c001c1b1:	0f b6 c9             	movzx  ecx,cl
c001c1b4:	51                   	push   ecx
c001c1b5:	52                   	push   edx
c001c1b6:	50                   	push   eax
c001c1b7:	57                   	push   edi
c001c1b8:	e8 a3 fc ff ff       	call   c001be60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c1bd:	89 c2                	mov    edx,eax
c001c1bf:	ed                   	in     eax,dx
c001c1c0:	83 c4 20             	add    esp,0x20
c001c1c3:	0f b7 db             	movzx  ebx,bx
c001c1c6:	f6 c2 02             	test   dl,0x2
c001c1c9:	74 0c                	je     c001c1d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001c1cb:	0f b7 c8             	movzx  ecx,ax
c001c1ce:	89 d8                	mov    eax,ebx
c001c1d0:	c1 e0 10             	shl    eax,0x10
c001c1d3:	09 c8                	or     eax,ecx
c001c1d5:	eb 05                	jmp    c001c1dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001c1d7:	66 31 c0             	xor    ax,ax
c001c1da:	09 d8                	or     eax,ebx
c001c1dc:	ef                   	out    dx,eax
c001c1dd:	83 c4 0c             	add    esp,0xc
c001c1e0:	5b                   	pop    ebx
c001c1e1:	5e                   	pop    esi
c001c1e2:	5f                   	pop    edi
c001c1e3:	5d                   	pop    ebp
c001c1e4:	c3                   	ret    
c001c1e5:	c7 44 24 20 c7 3f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023fc7
c001c1ed:	83 c4 0c             	add    esp,0xc
c001c1f0:	5b                   	pop    ebx
c001c1f1:	5e                   	pop    esi
c001c1f2:	5f                   	pop    edi
c001c1f3:	5d                   	pop    ebp
c001c1f4:	e9 ad 2a ff ff       	jmp    c000eca6 <KePanic(char const*)>
c001c1f9:	90                   	nop

c001c1fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001c1fa:	55                   	push   ebp
c001c1fb:	57                   	push   edi
c001c1fc:	56                   	push   esi
c001c1fd:	53                   	push   ebx
c001c1fe:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001c204:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001c20b:	80 3d cc e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0cc,0x0
c001c212:	0f 85 bd 00 00 00    	jne    c001c2d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	68 14 01 00 00       	push   0x114
c001c220:	e8 3a 27 ff ff       	call   c000e95f <malloc>
c001c225:	83 c4 0c             	add    esp,0xc
c001c228:	89 c3                	mov    ebx,eax
c001c22a:	ff 35 d8 d6 02 c0    	push   DWORD PTR ds:0xc002d6d8
c001c230:	68 cd 3f 02 c0       	push   0xc0023fcd
c001c235:	50                   	push   eax
c001c236:	e8 f7 be fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001c23b:	83 c4 10             	add    esp,0x10
c001c23e:	85 db                	test   ebx,ebx
c001c240:	0f 84 67 02 00 00    	je     c001c4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c246:	56                   	push   esi
c001c247:	56                   	push   esi
c001c248:	6a 01                	push   0x1
c001c24a:	53                   	push   ebx
c001c24b:	e8 00 bf fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001c250:	83 c4 10             	add    esp,0x10
c001c253:	85 c0                	test   eax,eax
c001c255:	0f 85 52 02 00 00    	jne    c001c4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c25b:	52                   	push   edx
c001c25c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001c260:	50                   	push   eax
c001c261:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c265:	50                   	push   eax
c001c266:	53                   	push   ebx
c001c267:	e8 e6 c1 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001c26c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c270:	40                   	inc    eax
c001c271:	89 04 24             	mov    DWORD PTR [esp],eax
c001c274:	e8 e6 26 ff ff       	call   c000e95f <malloc>
c001c279:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c27d:	a3 c8 e0 02 c0       	mov    ds:0xc002e0c8,eax
c001c282:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001c286:	59                   	pop    ecx
c001c287:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c289:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001c28d:	51                   	push   ecx
c001c28e:	50                   	push   eax
c001c28f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c293:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001c297:	53                   	push   ebx
c001c298:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c29b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001c29f:	83 c4 20             	add    esp,0x20
c001c2a2:	89 c8                	mov    eax,ecx
c001c2a4:	99                   	cdq    
c001c2a5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001c2a9:	0f 85 fe 01 00 00    	jne    c001c4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c2af:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001c2b3:	0f 85 f4 01 00 00    	jne    c001c4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c2b9:	83 ec 0c             	sub    esp,0xc
c001c2bc:	53                   	push   ebx
c001c2bd:	e8 ec be fe ff       	call   c00081ae <File::close()>
c001c2c2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c2c6:	c6 05 cc e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0cc,0x1
c001c2cd:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c001c2d2:	83 c4 10             	add    esp,0x10
c001c2d5:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c001c2da:	8b 1d c8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0c8
c001c2e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2e4:	31 f6                	xor    esi,esi
c001c2e6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001c2ee:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001c2f5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001c2fa:	31 c9                	xor    ecx,ecx
c001c2fc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001c304:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001c309:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001c311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c315:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001c31d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c321:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c325:	0f 8e 82 01 00 00    	jle    c001c4ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001c32b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001c32e:	d4 40                	aam    0x40
c001c330:	d5 39                	aad    0x39
c001c332:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c336:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001c33a:	d4 40                	aam    0x40
c001c33c:	d5 39                	aad    0x39
c001c33e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c342:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001c346:	d4 40                	aam    0x40
c001c348:	d5 39                	aad    0x39
c001c34a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001c34e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001c352:	d4 40                	aam    0x40
c001c354:	d5 39                	aad    0x39
c001c356:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c35a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001c35e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001c362:	3c 56                	cmp    al,0x56
c001c364:	74 43                	je     c001c3a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001c366:	d4 40                	aam    0x40
c001c368:	d5 39                	aad    0x39
c001c36a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001c36d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001c371:	0f b6 c9             	movzx  ecx,cl
c001c374:	c1 e1 04             	shl    ecx,0x4
c001c377:	d4 40                	aam    0x40
c001c379:	d5 39                	aad    0x39
c001c37b:	83 e8 30             	sub    eax,0x30
c001c37e:	0f b6 c0             	movzx  eax,al
c001c381:	09 c1                	or     ecx,eax
c001c383:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001c387:	c1 e1 04             	shl    ecx,0x4
c001c38a:	d4 40                	aam    0x40
c001c38c:	d5 39                	aad    0x39
c001c38e:	83 e8 30             	sub    eax,0x30
c001c391:	0f b6 c0             	movzx  eax,al
c001c394:	09 c1                	or     ecx,eax
c001c396:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001c39a:	c1 e1 04             	shl    ecx,0x4
c001c39d:	d4 40                	aam    0x40
c001c39f:	d5 39                	aad    0x39
c001c3a1:	83 e8 30             	sub    eax,0x30
c001c3a4:	0f b6 c0             	movzx  eax,al
c001c3a7:	09 c1                	or     ecx,eax
c001c3a9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001c3ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c3b1:	3c 58                	cmp    al,0x58
c001c3b3:	74 47                	je     c001c3fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001c3b5:	d4 40                	aam    0x40
c001c3b7:	d5 39                	aad    0x39
c001c3b9:	8d 50 d0             	lea    edx,[eax-0x30]
c001c3bc:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001c3c0:	0f b6 d2             	movzx  edx,dl
c001c3c3:	c1 e2 04             	shl    edx,0x4
c001c3c6:	d4 40                	aam    0x40
c001c3c8:	d5 39                	aad    0x39
c001c3ca:	83 e8 30             	sub    eax,0x30
c001c3cd:	0f b6 c0             	movzx  eax,al
c001c3d0:	09 c2                	or     edx,eax
c001c3d2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001c3d6:	c1 e2 04             	shl    edx,0x4
c001c3d9:	d4 40                	aam    0x40
c001c3db:	d5 39                	aad    0x39
c001c3dd:	83 e8 30             	sub    eax,0x30
c001c3e0:	0f b6 c0             	movzx  eax,al
c001c3e3:	09 c2                	or     edx,eax
c001c3e5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001c3e9:	c1 e2 04             	shl    edx,0x4
c001c3ec:	d4 40                	aam    0x40
c001c3ee:	d5 39                	aad    0x39
c001c3f0:	83 e8 30             	sub    eax,0x30
c001c3f3:	0f b6 c0             	movzx  eax,al
c001c3f6:	09 c2                	or     edx,eax
c001c3f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3fc:	83 c6 10             	add    esi,0x10
c001c3ff:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001c403:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c407:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c40b:	83 fa 0a             	cmp    edx,0xa
c001c40e:	74 0b                	je     c001c41b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c410:	47                   	inc    edi
c001c411:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c415:	75 19                	jne    c001c430 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c417:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c41b:	31 c0                	xor    eax,eax
c001c41d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c422:	0f 94 c0             	sete   al
c001c425:	01 c6                	add    esi,eax
c001c427:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c42c:	75 0b                	jne    c001c439 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c42e:	eb 14                	jmp    c001c444 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c430:	46                   	inc    esi
c001c431:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c434:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c437:	eb ca                	jmp    c001c403 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c439:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c43e:	0f 85 dd fe ff ff    	jne    c001c321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c444:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c449:	74 10                	je     c001c45b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c44b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c450:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c455:	0f 85 c6 fe ff ff    	jne    c001c321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c45b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c45f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c463:	83 e8 30             	sub    eax,0x30
c001c466:	83 ef 30             	sub    edi,0x30
c001c469:	c1 e0 04             	shl    eax,0x4
c001c46c:	09 f8                	or     eax,edi
c001c46e:	0f b6 c0             	movzx  eax,al
c001c471:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c475:	0f 85 a6 fe ff ff    	jne    c001c321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c483:	83 e8 30             	sub    eax,0x30
c001c486:	83 ef 30             	sub    edi,0x30
c001c489:	c1 e0 04             	shl    eax,0x4
c001c48c:	09 f8                	or     eax,edi
c001c48e:	0f b6 c0             	movzx  eax,al
c001c491:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c495:	0f 85 86 fe ff ff    	jne    c001c321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c49b:	50                   	push   eax
c001c49c:	50                   	push   eax
c001c49d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c4a1:	50                   	push   eax
c001c4a2:	55                   	push   ebp
c001c4a3:	e8 98 41 fe ff       	call   c0000640 <strcpy>
c001c4a8:	83 c4 10             	add    esp,0x10
c001c4ab:	eb 06                	jmp    c001c4b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c4ad:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c4b1:	31 ed                	xor    ebp,ebp
c001c4b3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c4b9:	89 e8                	mov    eax,ebp
c001c4bb:	5b                   	pop    ebx
c001c4bc:	5e                   	pop    esi
c001c4bd:	5f                   	pop    edi
c001c4be:	5d                   	pop    ebp
c001c4bf:	c3                   	ret    

c001c4c0 <PCI::checkBus(unsigned char)>:
c001c4c0:	56                   	push   esi
c001c4c1:	53                   	push   ebx
c001c4c2:	31 db                	xor    ebx,ebx
c001c4c4:	51                   	push   ecx
c001c4c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c4ca:	52                   	push   edx
c001c4cb:	53                   	push   ebx
c001c4cc:	43                   	inc    ebx
c001c4cd:	56                   	push   esi
c001c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4d2:	e8 6f 03 00 00       	call   c001c846 <PCI::checkDevice(unsigned char, unsigned char)>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	83 fb 20             	cmp    ebx,0x20
c001c4dd:	75 eb                	jne    c001c4ca <PCI::checkBus(unsigned char)+0xa>
c001c4df:	58                   	pop    eax
c001c4e0:	5b                   	pop    ebx
c001c4e1:	5e                   	pop    esi
c001c4e2:	c3                   	ret    
c001c4e3:	90                   	nop

c001c4e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001c4e4:	55                   	push   ebp
c001c4e5:	57                   	push   edi
c001c4e6:	56                   	push   esi
c001c4e7:	53                   	push   ebx
c001c4e8:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c4ee:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c4f6:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c4fd:	3d ff ff 00 00       	cmp    eax,0xffff
c001c502:	0f 84 b7 01 00 00    	je     c001c6bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c508:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c510:	66 81 fb 06 04       	cmp    bx,0x406
c001c515:	75 32                	jne    c001c549 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c517:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c51f:	50                   	push   eax
c001c520:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c528:	50                   	push   eax
c001c529:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c531:	50                   	push   eax
c001c532:	55                   	push   ebp
c001c533:	e8 4e fb ff ff       	call   c001c086 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c538:	59                   	pop    ecx
c001c539:	0f b6 c0             	movzx  eax,al
c001c53c:	5b                   	pop    ebx
c001c53d:	50                   	push   eax
c001c53e:	55                   	push   ebp
c001c53f:	e8 7c ff ff ff       	call   c001c4c0 <PCI::checkBus(unsigned char)>
c001c544:	e9 16 01 00 00       	jmp    c001c65f <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c549:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c550:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c556:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c55a:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c561:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c569:	85 c0                	test   eax,eax
c001c56b:	74 36                	je     c001c5a3 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c56d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c570:	85 d2                	test   edx,edx
c001c572:	74 2b                	je     c001c59f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c574:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c57a:	31 f9                	xor    ecx,edi
c001c57c:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c582:	75 1b                	jne    c001c59f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c584:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c588:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c58e:	75 0f                	jne    c001c59f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c590:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c597:	39 f2                	cmp    edx,esi
c001c599:	0f 84 20 01 00 00    	je     c001c6bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c59f:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5a1:	eb c6                	jmp    c001c569 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c5a3:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c5a7:	be 00 40 02 c0       	mov    esi,0xc0024000
c001c5ac:	b9 07 00 00 00       	mov    ecx,0x7
c001c5b1:	fc                   	cld    
c001c5b2:	31 d2                	xor    edx,edx
c001c5b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5b6:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c5bd:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c5c1:	b9 12 00 00 00       	mov    ecx,0x12
c001c5c6:	83 ec 0c             	sub    esp,0xc
c001c5c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c5cb:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c5d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001c5d8:	f7 f1                	div    ecx
c001c5da:	83 c0 30             	add    eax,0x30
c001c5dd:	83 c2 30             	add    edx,0x30
c001c5e0:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c5e4:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c5e8:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c5f0:	31 d2                	xor    edx,edx
c001c5f2:	f7 f1                	div    ecx
c001c5f4:	83 c0 30             	add    eax,0x30
c001c5f7:	83 c2 30             	add    edx,0x30
c001c5fa:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c5fe:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c602:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c606:	50                   	push   eax
c001c607:	e8 f8 ff fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c615:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c61c:	75 46                	jne    c001c664 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	68 64 01 00 00       	push   0x164
c001c626:	e8 34 23 ff ff       	call   c000e95f <malloc>
c001c62b:	89 c3                	mov    ebx,eax
c001c62d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c630:	e8 39 11 00 00       	call   c001d76e <SATABus::SATABus()>
c001c635:	58                   	pop    eax
c001c636:	5a                   	pop    edx
c001c637:	53                   	push   ebx
c001c638:	55                   	push   ebp
c001c639:	e8 24 ca fe ff       	call   c0009062 <Device::addChild(Device*)>
c001c63e:	83 ec 1c             	sub    esp,0x1c
c001c641:	b9 09 00 00 00       	mov    ecx,0x9
c001c646:	89 e7                	mov    edi,esp
c001c648:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c64a:	53                   	push   ebx
c001c64b:	e8 58 c9 fe ff       	call   c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c650:	83 c4 30             	add    esp,0x30
c001c653:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c655:	6a 00                	push   0x0
c001c657:	6a 00                	push   0x0
c001c659:	6a 00                	push   0x0
c001c65b:	53                   	push   ebx
c001c65c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c65f:	83 c4 10             	add    esp,0x10
c001c662:	eb 5b                	jmp    c001c6bf <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c664:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c66a:	75 19                	jne    c001c685 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c66c:	83 ec 0c             	sub    esp,0xc
c001c66f:	68 70 02 00 00       	push   0x270
c001c674:	e8 e6 22 ff ff       	call   c000e95f <malloc>
c001c679:	89 c3                	mov    ebx,eax
c001c67b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c67e:	e8 93 02 00 00       	call   c001c916 <IDE::IDE()>
c001c683:	eb b0                	jmp    c001c635 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c685:	83 ec 0c             	sub    esp,0xc
c001c688:	68 58 01 00 00       	push   0x158
c001c68d:	e8 cd 22 ff ff       	call   c000e95f <malloc>
c001c692:	89 c3                	mov    ebx,eax
c001c694:	58                   	pop    eax
c001c695:	5a                   	pop    edx
c001c696:	68 e6 3f 02 c0       	push   0xc0023fe6
c001c69b:	53                   	push   ebx
c001c69c:	e8 75 cc fe ff       	call   c0009316 <DriverlessDevice::DriverlessDevice(char const*)>
c001c6a1:	59                   	pop    ecx
c001c6a2:	5f                   	pop    edi
c001c6a3:	53                   	push   ebx
c001c6a4:	55                   	push   ebp
c001c6a5:	e8 b8 c9 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001c6aa:	83 ec 1c             	sub    esp,0x1c
c001c6ad:	b9 09 00 00 00       	mov    ecx,0x9
c001c6b2:	89 e7                	mov    edi,esp
c001c6b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c6b6:	53                   	push   ebx
c001c6b7:	e8 ec c8 fe ff       	call   c0008fa8 <Device::preOpenPCI(PCIDeviceInfo)>
c001c6bc:	83 c4 30             	add    esp,0x30
c001c6bf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c6c5:	5b                   	pop    ebx
c001c6c6:	5e                   	pop    esi
c001c6c7:	5f                   	pop    edi
c001c6c8:	5d                   	pop    ebp
c001c6c9:	c3                   	ret    

c001c6ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c6ca:	55                   	push   ebp
c001c6cb:	57                   	push   edi
c001c6cc:	56                   	push   esi
c001c6cd:	53                   	push   ebx
c001c6ce:	83 ec 68             	sub    esp,0x68
c001c6d1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c6d5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c6dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6e0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c6e7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c6ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c6f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c6f7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c6fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c700:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c705:	6a 0c                	push   0xc
c001c707:	57                   	push   edi
c001c708:	53                   	push   ebx
c001c709:	56                   	push   esi
c001c70a:	55                   	push   ebp
c001c70b:	e8 c6 f7 ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c710:	83 c4 20             	add    esp,0x20
c001c713:	57                   	push   edi
c001c714:	53                   	push   ebx
c001c715:	56                   	push   esi
c001c716:	55                   	push   ebp
c001c717:	e8 b0 f8 ff ff       	call   c001bfcc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c71c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c721:	57                   	push   edi
c001c722:	53                   	push   ebx
c001c723:	56                   	push   esi
c001c724:	55                   	push   ebp
c001c725:	e8 38 f9 ff ff       	call   c001c062 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c72a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c72e:	83 c4 14             	add    esp,0x14
c001c731:	6a 3c                	push   0x3c
c001c733:	57                   	push   edi
c001c734:	53                   	push   ebx
c001c735:	56                   	push   esi
c001c736:	55                   	push   ebp
c001c737:	e8 9a f7 ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c73c:	0f b6 c4             	movzx  eax,ah
c001c73f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c743:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c747:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c74b:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001c750:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c756:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c75c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c760:	83 c4 20             	add    esp,0x20
c001c763:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c768:	74 30                	je     c001c79a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c76a:	31 c0                	xor    eax,eax
c001c76c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c770:	7e 28                	jle    c001c79a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c772:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c77a:	39 cb                	cmp    ebx,ecx
c001c77c:	75 19                	jne    c001c797 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c77e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c786:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c78a:	75 0b                	jne    c001c797 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c78c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c793:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c797:	40                   	inc    eax
c001c798:	eb d2                	jmp    c001c76c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c79a:	31 d2                	xor    edx,edx
c001c79c:	83 ec 0c             	sub    esp,0xc
c001c79f:	57                   	push   edi
c001c7a0:	53                   	push   ebx
c001c7a1:	56                   	push   esi
c001c7a2:	52                   	push   edx
c001c7a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c7a7:	55                   	push   ebp
c001c7a8:	e8 01 f9 ff ff       	call   c001c0ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c7ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c7b1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c7b5:	42                   	inc    edx
c001c7b6:	83 c4 20             	add    esp,0x20
c001c7b9:	83 fa 06             	cmp    edx,0x6
c001c7bc:	75 de                	jne    c001c79c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c7be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c7c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7c6:	c1 e2 08             	shl    edx,0x8
c001c7c9:	83 ec 0c             	sub    esp,0xc
c001c7cc:	0f b6 c4             	movzx  eax,ah
c001c7cf:	09 d0                	or     eax,edx
c001c7d1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c7d6:	6a 02                	push   0x2
c001c7d8:	57                   	push   edi
c001c7d9:	53                   	push   ebx
c001c7da:	56                   	push   esi
c001c7db:	55                   	push   ebp
c001c7dc:	e8 f5 f6 ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c7e1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c7e6:	83 c4 20             	add    esp,0x20
c001c7e9:	57                   	push   edi
c001c7ea:	53                   	push   ebx
c001c7eb:	56                   	push   esi
c001c7ec:	55                   	push   ebp
c001c7ed:	e8 24 f8 ff ff       	call   c001c016 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c7f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c7f6:	57                   	push   edi
c001c7f7:	53                   	push   ebx
c001c7f8:	56                   	push   esi
c001c7f9:	55                   	push   ebp
c001c7fa:	e8 81 f7 ff ff       	call   c001bf80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7ff:	b9 09 00 00 00       	mov    ecx,0x9
c001c804:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c809:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c80d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c811:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c815:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c819:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c81d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c821:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c825:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c829:	83 ec 0c             	sub    esp,0xc
c001c82c:	fc                   	cld    
c001c82d:	89 e7                	mov    edi,esp
c001c82f:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c833:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c835:	55                   	push   ebp
c001c836:	e8 a9 fc ff ff       	call   c001c4e4 <PCI::foundDevice(PCIDeviceInfo)>
c001c83b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c841:	5b                   	pop    ebx
c001c842:	5e                   	pop    esi
c001c843:	5f                   	pop    edi
c001c844:	5d                   	pop    ebp
c001c845:	c3                   	ret    

c001c846 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c846:	55                   	push   ebp
c001c847:	57                   	push   edi
c001c848:	56                   	push   esi
c001c849:	53                   	push   ebx
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c851:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c856:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c85b:	6a 00                	push   0x0
c001c85d:	56                   	push   esi
c001c85e:	57                   	push   edi
c001c85f:	55                   	push   ebp
c001c860:	e8 1b f7 ff ff       	call   c001bf80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c865:	6a 00                	push   0x0
c001c867:	56                   	push   esi
c001c868:	57                   	push   edi
c001c869:	55                   	push   ebp
c001c86a:	e8 5b fe ff ff       	call   c001c6ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c86f:	83 c4 20             	add    esp,0x20
c001c872:	6a 00                	push   0x0
c001c874:	56                   	push   esi
c001c875:	57                   	push   edi
c001c876:	55                   	push   ebp
c001c877:	e8 28 f7 ff ff       	call   c001bfa4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	a8 80                	test   al,0x80
c001c881:	74 2d                	je     c001c8b0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c883:	bb 01 00 00 00       	mov    ebx,0x1
c001c888:	53                   	push   ebx
c001c889:	56                   	push   esi
c001c88a:	57                   	push   edi
c001c88b:	55                   	push   ebp
c001c88c:	e8 ef f6 ff ff       	call   c001bf80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	0f b7 c0             	movzx  eax,ax
c001c897:	3d ff ff 00 00       	cmp    eax,0xffff
c001c89c:	74 0c                	je     c001c8aa <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c89e:	53                   	push   ebx
c001c89f:	56                   	push   esi
c001c8a0:	57                   	push   edi
c001c8a1:	55                   	push   ebp
c001c8a2:	e8 23 fe ff ff       	call   c001c6ca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c8a7:	83 c4 10             	add    esp,0x10
c001c8aa:	43                   	inc    ebx
c001c8ab:	83 fb 08             	cmp    ebx,0x8
c001c8ae:	75 d8                	jne    c001c888 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c8b0:	83 c4 0c             	add    esp,0xc
c001c8b3:	5b                   	pop    ebx
c001c8b4:	5e                   	pop    esi
c001c8b5:	5f                   	pop    edi
c001c8b6:	5d                   	pop    ebp
c001c8b7:	c3                   	ret    

c001c8b8 <PCI::detect()>:
c001c8b8:	56                   	push   esi
c001c8b9:	53                   	push   ebx
c001c8ba:	53                   	push   ebx
c001c8bb:	31 db                	xor    ebx,ebx
c001c8bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8c1:	6a 00                	push   0x0
c001c8c3:	6a 00                	push   0x0
c001c8c5:	6a 00                	push   0x0
c001c8c7:	56                   	push   esi
c001c8c8:	e8 d7 f6 ff ff       	call   c001bfa4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c8cd:	83 c4 10             	add    esp,0x10
c001c8d0:	a8 80                	test   al,0x80
c001c8d2:	75 21                	jne    c001c8f5 <PCI::detect()+0x3d>
c001c8d4:	51                   	push   ecx
c001c8d5:	51                   	push   ecx
c001c8d6:	6a 00                	push   0x0
c001c8d8:	56                   	push   esi
c001c8d9:	e8 e2 fb ff ff       	call   c001c4c0 <PCI::checkBus(unsigned char)>
c001c8de:	83 c4 10             	add    esp,0x10
c001c8e1:	eb 2a                	jmp    c001c90d <PCI::detect()+0x55>
c001c8e3:	52                   	push   edx
c001c8e4:	52                   	push   edx
c001c8e5:	53                   	push   ebx
c001c8e6:	43                   	inc    ebx
c001c8e7:	56                   	push   esi
c001c8e8:	e8 d3 fb ff ff       	call   c001c4c0 <PCI::checkBus(unsigned char)>
c001c8ed:	83 c4 10             	add    esp,0x10
c001c8f0:	83 fb 08             	cmp    ebx,0x8
c001c8f3:	74 18                	je     c001c90d <PCI::detect()+0x55>
c001c8f5:	53                   	push   ebx
c001c8f6:	6a 00                	push   0x0
c001c8f8:	6a 00                	push   0x0
c001c8fa:	56                   	push   esi
c001c8fb:	e8 80 f6 ff ff       	call   c001bf80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c900:	83 c4 10             	add    esp,0x10
c001c903:	0f b7 c0             	movzx  eax,ax
c001c906:	3d ff ff 00 00       	cmp    eax,0xffff
c001c90b:	74 d6                	je     c001c8e3 <PCI::detect()+0x2b>
c001c90d:	58                   	pop    eax
c001c90e:	5b                   	pop    ebx
c001c90f:	5e                   	pop    esi
c001c910:	c3                   	ret    
c001c911:	90                   	nop

c001c912 <IDE::close(int, int, void*)>:
c001c912:	83 c8 ff             	or     eax,0xffffffff
c001c915:	c3                   	ret    

c001c916 <IDE::IDE()>:
c001c916:	83 ec 0c             	sub    esp,0xc
c001c919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91d:	83 ec 08             	sub    esp,0x8
c001c920:	68 90 40 02 c0       	push   0xc0024090
c001c925:	50                   	push   eax
c001c926:	e8 91 ca fe ff       	call   c00093bc <HardDiskController::HardDiskController(char const*)>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	ba bc 41 02 c0       	mov    edx,0xc00241bc
c001c933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c937:	89 10                	mov    DWORD PTR [eax],edx
c001c939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c944:	90                   	nop
c001c945:	83 c4 0c             	add    esp,0xc
c001c948:	c3                   	ret    
c001c949:	90                   	nop

c001c94a <IDE::prepareInterrupt(unsigned char)>:
c001c94a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c94f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c953:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c95b:	c3                   	ret    

c001c95c <selectDrive(unsigned char, unsigned char)>:
c001c95c:	c3                   	ret    
c001c95d:	90                   	nop

c001c95e <IDE::getBase(unsigned char)>:
c001c95e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c963:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c967:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c96f:	c3                   	ret    

c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c970:	55                   	push   ebp
c001c971:	57                   	push   edi
c001c972:	56                   	push   esi
c001c973:	53                   	push   ebx
c001c974:	83 ec 1c             	sub    esp,0x1c
c001c977:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c97b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c97f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c982:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c986:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c98a:	80 f9 03             	cmp    cl,0x3
c001c98d:	77 4f                	ja     c001c9de <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c98f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c993:	0f b6 fa             	movzx  edi,dl
c001c996:	0f b6 db             	movzx  ebx,bl
c001c999:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c99c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c9a1:	80 ca 80             	or     dl,0x80
c001c9a4:	52                   	push   edx
c001c9a5:	6a 0c                	push   0xc
c001c9a7:	57                   	push   edi
c001c9a8:	56                   	push   esi
c001c9a9:	e8 c2 ff ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ae:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c9b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9b7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c9bb:	ee                   	out    dx,al
c001c9bc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c9c1:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001c9c5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c9c9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c9cd:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c9d5:	83 c4 2c             	add    esp,0x2c
c001c9d8:	5b                   	pop    ebx
c001c9d9:	5e                   	pop    esi
c001c9da:	5f                   	pop    edi
c001c9db:	5d                   	pop    ebp
c001c9dc:	eb 92                	jmp    c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9de:	0f b6 cb             	movzx  ecx,bl
c001c9e1:	83 f9 07             	cmp    ecx,0x7
c001c9e4:	77 12                	ja     c001c9f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c9e6:	0f b6 d2             	movzx  edx,dl
c001c9e9:	0f b6 db             	movzx  ebx,bl
c001c9ec:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001c9f4:	01 da                	add    edx,ebx
c001c9f6:	eb 2f                	jmp    c001ca27 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c9f8:	83 f9 0d             	cmp    ecx,0xd
c001c9fb:	77 13                	ja     c001ca10 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c9fd:	0f b6 d2             	movzx  edx,dl
c001ca00:	0f b6 db             	movzx  ebx,bl
c001ca03:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ca0a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ca0e:	eb 17                	jmp    c001ca27 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ca10:	83 f9 15             	cmp    ecx,0x15
c001ca13:	77 13                	ja     c001ca28 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ca15:	0f b6 d2             	movzx  edx,dl
c001ca18:	0f b6 db             	movzx  ebx,bl
c001ca1b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ca23:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ca27:	ee                   	out    dx,al
c001ca28:	83 c4 1c             	add    esp,0x1c
c001ca2b:	5b                   	pop    ebx
c001ca2c:	5e                   	pop    esi
c001ca2d:	5f                   	pop    edi
c001ca2e:	5d                   	pop    ebp
c001ca2f:	c3                   	ret    

c001ca30 <IDE::read(unsigned char, unsigned char)>:
c001ca30:	55                   	push   ebp
c001ca31:	57                   	push   edi
c001ca32:	56                   	push   esi
c001ca33:	53                   	push   ebx
c001ca34:	83 ec 1c             	sub    esp,0x1c
c001ca37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ca3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca3f:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ca42:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ca46:	3c 03                	cmp    al,0x3
c001ca48:	77 40                	ja     c001ca8a <IDE::read(unsigned char, unsigned char)+0x5a>
c001ca4a:	0f b6 f9             	movzx  edi,cl
c001ca4d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ca50:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ca55:	0c 80                	or     al,0x80
c001ca57:	50                   	push   eax
c001ca58:	6a 0c                	push   0xc
c001ca5a:	57                   	push   edi
c001ca5b:	56                   	push   esi
c001ca5c:	e8 0f ff ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca61:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ca66:	0f b6 d3             	movzx  edx,bl
c001ca69:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ca6d:	ec                   	in     al,dx
c001ca6e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ca72:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ca77:	52                   	push   edx
c001ca78:	6a 0c                	push   0xc
c001ca7a:	57                   	push   edi
c001ca7b:	56                   	push   esi
c001ca7c:	e8 ef fe ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca81:	83 c4 20             	add    esp,0x20
c001ca84:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ca88:	eb 4c                	jmp    c001cad6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca8a:	0f b6 d3             	movzx  edx,bl
c001ca8d:	83 fa 07             	cmp    edx,0x7
c001ca90:	77 12                	ja     c001caa4 <IDE::read(unsigned char, unsigned char)+0x74>
c001ca92:	0f b6 c9             	movzx  ecx,cl
c001ca95:	0f b6 d3             	movzx  edx,bl
c001ca98:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001caa0:	01 c2                	add    edx,eax
c001caa2:	eb 31                	jmp    c001cad5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001caa4:	83 fa 0d             	cmp    edx,0xd
c001caa7:	77 13                	ja     c001cabc <IDE::read(unsigned char, unsigned char)+0x8c>
c001caa9:	0f b6 c9             	movzx  ecx,cl
c001caac:	0f b6 d3             	movzx  edx,bl
c001caaf:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001cab6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001caba:	eb 19                	jmp    c001cad5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001cabc:	31 c0                	xor    eax,eax
c001cabe:	83 fa 15             	cmp    edx,0x15
c001cac1:	77 13                	ja     c001cad6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001cac3:	0f b6 c9             	movzx  ecx,cl
c001cac6:	0f b6 d3             	movzx  edx,bl
c001cac9:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001cad1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cad5:	ec                   	in     al,dx
c001cad6:	83 c4 1c             	add    esp,0x1c
c001cad9:	5b                   	pop    ebx
c001cada:	5e                   	pop    esi
c001cadb:	5f                   	pop    edi
c001cadc:	5d                   	pop    ebp
c001cadd:	c3                   	ret    

c001cade <IDE::waitInterrupt(unsigned char)>:
c001cade:	55                   	push   ebp
c001cadf:	57                   	push   edi
c001cae0:	56                   	push   esi
c001cae1:	53                   	push   ebx
c001cae2:	31 db                	xor    ebx,ebx
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001caeb:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001caf0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001caf8:	89 e8                	mov    eax,ebp
c001cafa:	84 c0                	test   al,al
c001cafc:	75 30                	jne    c001cb2e <IDE::waitInterrupt(unsigned char)+0x50>
c001cafe:	50                   	push   eax
c001caff:	6a 0c                	push   0xc
c001cb01:	56                   	push   esi
c001cb02:	57                   	push   edi
c001cb03:	e8 28 ff ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	a8 01                	test   al,0x1
c001cb0d:	75 27                	jne    c001cb36 <IDE::waitInterrupt(unsigned char)+0x58>
c001cb0f:	f6 c3 04             	test   bl,0x4
c001cb12:	75 12                	jne    c001cb26 <IDE::waitInterrupt(unsigned char)+0x48>
c001cb14:	83 fb 32             	cmp    ebx,0x32
c001cb17:	7e 0d                	jle    c001cb26 <IDE::waitInterrupt(unsigned char)+0x48>
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	6a 64                	push   0x64
c001cb1e:	e8 e9 8d ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	83 fb 3c             	cmp    ebx,0x3c
c001cb29:	74 0b                	je     c001cb36 <IDE::waitInterrupt(unsigned char)+0x58>
c001cb2b:	43                   	inc    ebx
c001cb2c:	eb c2                	jmp    c001caf0 <IDE::waitInterrupt(unsigned char)+0x12>
c001cb2e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001cb36:	83 c4 0c             	add    esp,0xc
c001cb39:	89 e8                	mov    eax,ebp
c001cb3b:	5b                   	pop    ebx
c001cb3c:	5e                   	pop    esi
c001cb3d:	5f                   	pop    edi
c001cb3e:	5d                   	pop    ebp
c001cb3f:	c3                   	ret    

c001cb40 <ideChannel0IRQHandler(regs*, void*)>:
c001cb40:	83 ec 10             	sub    esp,0x10
c001cb43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb47:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001cb4e:	6a 07                	push   0x7
c001cb50:	6a 00                	push   0x0
c001cb52:	50                   	push   eax
c001cb53:	e8 d8 fe ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001cb58:	83 c4 1c             	add    esp,0x1c
c001cb5b:	c3                   	ret    

c001cb5c <ideChannel1IRQHandler(regs*, void*)>:
c001cb5c:	83 ec 10             	sub    esp,0x10
c001cb5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb63:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cb6a:	6a 07                	push   0x7
c001cb6c:	6a 01                	push   0x1
c001cb6e:	50                   	push   eax
c001cb6f:	e8 bc fe ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001cb74:	83 c4 1c             	add    esp,0x1c
c001cb77:	c3                   	ret    

c001cb78 <IDE::enableIRQs(unsigned char, bool)>:
c001cb78:	57                   	push   edi
c001cb79:	b8 02 00 00 00       	mov    eax,0x2
c001cb7e:	56                   	push   esi
c001cb7f:	53                   	push   ebx
c001cb80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb84:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb88:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cb8d:	74 02                	je     c001cb91 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001cb8f:	31 c0                	xor    eax,eax
c001cb91:	0f b6 db             	movzx  ebx,bl
c001cb94:	bf 04 00 00 00       	mov    edi,0x4
c001cb99:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001cba0:	50                   	push   eax
c001cba1:	6a 0c                	push   0xc
c001cba3:	53                   	push   ebx
c001cba4:	56                   	push   esi
c001cba5:	e8 c6 fd ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbaa:	83 c4 10             	add    esp,0x10
c001cbad:	50                   	push   eax
c001cbae:	6a 0c                	push   0xc
c001cbb0:	53                   	push   ebx
c001cbb1:	56                   	push   esi
c001cbb2:	e8 79 fe ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001cbb7:	83 c4 10             	add    esp,0x10
c001cbba:	4f                   	dec    edi
c001cbbb:	75 f0                	jne    c001cbad <IDE::enableIRQs(unsigned char, bool)+0x35>
c001cbbd:	5b                   	pop    ebx
c001cbbe:	5e                   	pop    esi
c001cbbf:	5f                   	pop    edi
c001cbc0:	c3                   	ret    
c001cbc1:	90                   	nop

c001cbc2 <IDE::open(int, int, void*)>:
c001cbc2:	57                   	push   edi
c001cbc3:	56                   	push   esi
c001cbc4:	53                   	push   ebx
c001cbc5:	83 ec 10             	sub    esp,0x10
c001cbc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbcc:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cbd5:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cbde:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cbe5:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cbec:	0f 85 84 02 00 00    	jne    c001ce76 <IDE::open(int, int, void*)+0x2b4>
c001cbf2:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cbf8:	a8 70                	test   al,0x70
c001cbfa:	75 44                	jne    c001cc40 <IDE::open(int, int, void*)+0x7e>
c001cbfc:	ba 20 84 00 00       	mov    edx,0x8420
c001cc01:	0f a3 c2             	bt     edx,eax
c001cc04:	73 3a                	jae    c001cc40 <IDE::open(int, int, void*)+0x7e>
c001cc06:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cc0c:	83 ec 0c             	sub    esp,0xc
c001cc0f:	83 e0 fc             	and    eax,0xfffffffc
c001cc12:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cc19:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cc1f:	83 e0 fc             	and    eax,0xfffffffc
c001cc22:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cc29:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cc2f:	83 e0 fc             	and    eax,0xfffffffc
c001cc32:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cc39:	68 15 19 02 c0       	push   0xc0021915
c001cc3e:	eb 60                	jmp    c001cca0 <IDE::open(int, int, void*)+0xde>
c001cc40:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cc4a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cc54:	be 64 00 00 00       	mov    esi,0x64
c001cc59:	57                   	push   edi
c001cc5a:	57                   	push   edi
c001cc5b:	68 a8 40 02 c0       	push   0xc00240a8
c001cc60:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001cc64:	57                   	push   edi
c001cc65:	e8 d6 39 fe ff       	call   c0000640 <strcpy>
c001cc6a:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001cc71:	31 d2                	xor    edx,edx
c001cc73:	89 c8                	mov    eax,ecx
c001cc75:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc78:	f7 f6                	div    esi
c001cc7a:	be 0a 00 00 00       	mov    esi,0xa
c001cc7f:	83 c0 30             	add    eax,0x30
c001cc82:	31 d2                	xor    edx,edx
c001cc84:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cc88:	89 c8                	mov    eax,ecx
c001cc8a:	f7 f6                	div    esi
c001cc8c:	89 d1                	mov    ecx,edx
c001cc8e:	31 d2                	xor    edx,edx
c001cc90:	83 c1 30             	add    ecx,0x30
c001cc93:	f7 f6                	div    esi
c001cc95:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001cc99:	83 c2 30             	add    edx,0x30
c001cc9c:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001cca0:	e8 5f f9 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cca5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ccaa:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ccb1:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ccb8:	c1 e1 10             	shl    ecx,0x10
c001ccbb:	c1 e0 0b             	shl    eax,0xb
c001ccbe:	83 c4 10             	add    esp,0x10
c001ccc1:	09 c1                	or     ecx,eax
c001ccc3:	89 fa                	mov    edx,edi
c001ccc5:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cccc:	c1 e0 08             	shl    eax,0x8
c001cccf:	09 c1                	or     ecx,eax
c001ccd1:	89 c8                	mov    eax,ecx
c001ccd3:	0d 08 00 00 80       	or     eax,0x80000008
c001ccd8:	ef                   	out    dx,eax
c001ccd9:	be fc 0c 00 00       	mov    esi,0xcfc
c001ccde:	89 f2                	mov    edx,esi
c001cce0:	ed                   	in     eax,dx
c001cce1:	c1 e8 10             	shr    eax,0x10
c001cce4:	3d ff ff 00 00       	cmp    eax,0xffff
c001cce9:	0f 84 e5 00 00 00    	je     c001cdd4 <IDE::open(int, int, void*)+0x212>
c001ccef:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ccf5:	89 fa                	mov    edx,edi
c001ccf7:	89 c8                	mov    eax,ecx
c001ccf9:	ef                   	out    dx,eax
c001ccfa:	b0 fe                	mov    al,0xfe
c001ccfc:	89 f2                	mov    edx,esi
c001ccfe:	ee                   	out    dx,al
c001ccff:	89 c8                	mov    eax,ecx
c001cd01:	89 fa                	mov    edx,edi
c001cd03:	ef                   	out    dx,eax
c001cd04:	89 f2                	mov    edx,esi
c001cd06:	ed                   	in     eax,dx
c001cd07:	3c fe                	cmp    al,0xfe
c001cd09:	0f 85 85 00 00 00    	jne    c001cd94 <IDE::open(int, int, void*)+0x1d2>
c001cd0f:	83 ec 0c             	sub    esp,0xc
c001cd12:	68 4b 19 02 c0       	push   0xc002194b
c001cd17:	e8 e8 f8 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cd1c:	c7 04 24 ae 40 02 c0 	mov    DWORD PTR [esp],0xc00240ae
c001cd23:	e8 3c a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cd28:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cd32:	c7 04 24 8c 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b8c
c001cd39:	e8 c6 f8 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cd3e:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cd45:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cd4c:	c1 e1 10             	shl    ecx,0x10
c001cd4f:	c1 e0 08             	shl    eax,0x8
c001cd52:	89 fa                	mov    edx,edi
c001cd54:	09 c1                	or     ecx,eax
c001cd56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cd5d:	c1 e0 0b             	shl    eax,0xb
c001cd60:	09 c1                	or     ecx,eax
c001cd62:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cd68:	89 c8                	mov    eax,ecx
c001cd6a:	ef                   	out    dx,eax
c001cd6b:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cd71:	89 f2                	mov    edx,esi
c001cd73:	ee                   	out    dx,al
c001cd74:	89 c8                	mov    eax,ecx
c001cd76:	89 fa                	mov    edx,edi
c001cd78:	ef                   	out    dx,eax
c001cd79:	89 f2                	mov    edx,esi
c001cd7b:	ed                   	in     eax,dx
c001cd7c:	0f b6 c0             	movzx  eax,al
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001cd88:	74 5a                	je     c001cde4 <IDE::open(int, int, void*)+0x222>
c001cd8a:	83 ec 0c             	sub    esp,0xc
c001cd8d:	68 c3 40 02 c0       	push   0xc00240c3
c001cd92:	eb 48                	jmp    c001cddc <IDE::open(int, int, void*)+0x21a>
c001cd94:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cd9d:	75 2b                	jne    c001cdca <IDE::open(int, int, void*)+0x208>
c001cd9f:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001cda6:	3d 80 00 00 00       	cmp    eax,0x80
c001cdab:	74 07                	je     c001cdb4 <IDE::open(int, int, void*)+0x1f2>
c001cdad:	3d 8a 00 00 00       	cmp    eax,0x8a
c001cdb2:	75 16                	jne    c001cdca <IDE::open(int, int, void*)+0x208>
c001cdb4:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cdbb:	83 ec 0c             	sub    esp,0xc
c001cdbe:	68 3e 14 02 c0       	push   0xc002143e
c001cdc3:	e8 3c f8 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cdc8:	eb 17                	jmp    c001cde1 <IDE::open(int, int, void*)+0x21f>
c001cdca:	83 ec 0c             	sub    esp,0xc
c001cdcd:	68 cb 40 02 c0       	push   0xc00240cb
c001cdd2:	eb 08                	jmp    c001cddc <IDE::open(int, int, void*)+0x21a>
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	68 fc 40 02 c0       	push   0xc00240fc
c001cddc:	e8 c5 1e ff ff       	call   c000eca6 <KePanic(char const*)>
c001cde1:	83 c4 10             	add    esp,0x10
c001cde4:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001cdeb:	0f 84 bf 00 00 00    	je     c001ceb0 <IDE::open(int, int, void*)+0x2ee>
c001cdf1:	83 ec 0c             	sub    esp,0xc
c001cdf4:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cdfa:	83 e0 fc             	and    eax,0xfffffffc
c001cdfd:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ce04:	83 c0 08             	add    eax,0x8
c001ce07:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ce0e:	68 26 41 02 c0       	push   0xc0024126
c001ce13:	e8 4c a1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ce18:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ce1f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ce26:	50                   	push   eax
c001ce27:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ce2e:	50                   	push   eax
c001ce2f:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ce36:	50                   	push   eax
c001ce37:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001ce3d:	e8 94 f0 ff ff       	call   c001bed6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce42:	83 c4 18             	add    esp,0x18
c001ce45:	83 c8 07             	or     eax,0x7
c001ce48:	0f b7 c0             	movzx  eax,ax
c001ce4b:	50                   	push   eax
c001ce4c:	6a 04                	push   0x4
c001ce4e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ce55:	50                   	push   eax
c001ce56:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ce5d:	50                   	push   eax
c001ce5e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ce65:	50                   	push   eax
c001ce66:	ff 35 c0 e0 02 c0    	push   DWORD PTR ds:0xc002e0c0
c001ce6c:	e8 a1 f2 ff ff       	call   c001c112 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ce71:	83 c4 20             	add    esp,0x20
c001ce74:	eb 3a                	jmp    c001ceb0 <IDE::open(int, int, void*)+0x2ee>
c001ce76:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ce7c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce83:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ce8a:	05 06 02 00 00       	add    eax,0x206
c001ce8f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ce96:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ce9d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cea4:	05 06 02 00 00       	add    eax,0x206
c001cea9:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ceb0:	83 ec 0c             	sub    esp,0xc
c001ceb3:	68 c3 20 02 c0       	push   0xc00220c3
c001ceb8:	e8 47 f7 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cebd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cec3:	83 c4 10             	add    esp,0x10
c001cec6:	89 c2                	mov    edx,eax
c001cec8:	83 e2 0f             	and    edx,0xf
c001cecb:	83 fa 08             	cmp    edx,0x8
c001cece:	75 0a                	jne    c001ceda <IDE::open(int, int, void*)+0x318>
c001ced0:	83 e8 02             	sub    eax,0x2
c001ced3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ceda:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cee0:	89 c2                	mov    edx,eax
c001cee2:	83 e2 0f             	and    edx,0xf
c001cee5:	83 fa 08             	cmp    edx,0x8
c001cee8:	75 0a                	jne    c001cef4 <IDE::open(int, int, void*)+0x332>
c001ceea:	83 e8 02             	sub    eax,0x2
c001ceed:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cef4:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cefb:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cf02:	89 d0                	mov    eax,edx
c001cf04:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cf07:	8d 7a 01             	lea    edi,[edx+0x1]
c001cf0a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cf0e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cf12:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cf16:	83 e1 3f             	and    ecx,0x3f
c001cf19:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cf1d:	89 f9                	mov    ecx,edi
c001cf1f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cf26:	0f b6 c9             	movzx  ecx,cl
c001cf29:	8d 78 02             	lea    edi,[eax+0x2]
c001cf2c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cf2f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cf33:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cf37:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cf3b:	83 e2 3f             	and    edx,0x3f
c001cf3e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cf42:	89 f9                	mov    ecx,edi
c001cf44:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cf4a:	0f b6 d1             	movzx  edx,cl
c001cf4d:	8d 78 03             	lea    edi,[eax+0x3]
c001cf50:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cf53:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cf57:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cf5b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001cf5f:	83 e1 3f             	and    ecx,0x3f
c001cf62:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001cf66:	89 fa                	mov    edx,edi
c001cf68:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cf6e:	0f b6 ca             	movzx  ecx,dl
c001cf71:	8d 78 04             	lea    edi,[eax+0x4]
c001cf74:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cf77:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cf7b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cf7f:	89 fa                	mov    edx,edi
c001cf81:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cf87:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cf8b:	83 e2 3f             	and    edx,0x3f
c001cf8e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cf92:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cf99:	66 85 f6             	test   si,si
c001cf9c:	74 24                	je     c001cfc2 <IDE::open(int, int, void*)+0x400>
c001cf9e:	89 f9                	mov    ecx,edi
c001cfa0:	83 c0 05             	add    eax,0x5
c001cfa3:	0f b6 d1             	movzx  edx,cl
c001cfa6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cfa9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cfad:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cfb1:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cfb7:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cfbb:	83 e0 3f             	and    eax,0x3f
c001cfbe:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	68 3e 41 02 c0       	push   0xc002413e
c001cfca:	e8 35 f6 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cfcf:	58                   	pop    eax
c001cfd0:	5a                   	pop    edx
c001cfd1:	6a 00                	push   0x0
c001cfd3:	53                   	push   ebx
c001cfd4:	e8 71 f9 ff ff       	call   c001c94a <IDE::prepareInterrupt(unsigned char)>
c001cfd9:	59                   	pop    ecx
c001cfda:	5e                   	pop    esi
c001cfdb:	6a 01                	push   0x1
c001cfdd:	53                   	push   ebx
c001cfde:	e8 67 f9 ff ff       	call   c001c94a <IDE::prepareInterrupt(unsigned char)>
c001cfe3:	c7 04 24 8d 39 02 c0 	mov    DWORD PTR [esp],0xc002398d
c001cfea:	e8 15 f6 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001cfef:	83 c4 0c             	add    esp,0xc
c001cff2:	6a 00                	push   0x0
c001cff4:	6a 00                	push   0x0
c001cff6:	53                   	push   ebx
c001cff7:	e8 7c fb ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001cffc:	83 c4 0c             	add    esp,0xc
c001cfff:	6a 00                	push   0x0
c001d001:	6a 01                	push   0x1
c001d003:	53                   	push   ebx
c001d004:	e8 6f fb ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001d009:	c7 04 24 40 41 02 c0 	mov    DWORD PTR [esp],0xc0024140
c001d010:	e8 ef f5 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d015:	83 c4 10             	add    esp,0x10
c001d018:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001d01f:	74 3c                	je     c001d05d <IDE::open(int, int, void*)+0x49b>
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	53                   	push   ebx
c001d025:	6a 01                	push   0x1
c001d027:	68 40 cb 01 c0       	push   0xc001cb40
c001d02c:	6a 0e                	push   0xe
c001d02e:	53                   	push   ebx
c001d02f:	e8 da bf fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d034:	83 c4 14             	add    esp,0x14
c001d037:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d03d:	53                   	push   ebx
c001d03e:	6a 01                	push   0x1
c001d040:	68 5c cb 01 c0       	push   0xc001cb5c
c001d045:	6a 0f                	push   0xf
c001d047:	53                   	push   ebx
c001d048:	e8 c1 bf fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d04d:	83 c4 14             	add    esp,0x14
c001d050:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001d056:	68 92 1d 02 c0       	push   0xc0021d92
c001d05b:	eb 40                	jmp    c001d09d <IDE::open(int, int, void*)+0x4db>
c001d05d:	83 ec 0c             	sub    esp,0xc
c001d060:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001d06a:	53                   	push   ebx
c001d06b:	6a 00                	push   0x0
c001d06d:	68 40 cb 01 c0       	push   0xc001cb40
c001d072:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001d078:	53                   	push   ebx
c001d079:	e8 90 bf fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d07e:	83 c4 14             	add    esp,0x14
c001d081:	53                   	push   ebx
c001d082:	6a 00                	push   0x0
c001d084:	68 5c cb 01 c0       	push   0xc001cb5c
c001d089:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001d08f:	53                   	push   ebx
c001d090:	e8 79 bf fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d095:	83 c4 14             	add    esp,0x14
c001d098:	68 90 2a 02 c0       	push   0xc0022a90
c001d09d:	e8 62 f5 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	68 42 41 02 c0       	push   0xc0024142
c001d0ad:	e8 52 f5 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001d0ba:	c7 04 24 39 31 02 c0 	mov    DWORD PTR [esp],0xc0023139
c001d0c1:	e8 3e f5 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d0c6:	83 c4 0c             	add    esp,0xc
c001d0c9:	6a 07                	push   0x7
c001d0cb:	6a 00                	push   0x0
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 5d f9 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d0d3:	83 c4 0c             	add    esp,0xc
c001d0d6:	6a 07                	push   0x7
c001d0d8:	6a 01                	push   0x1
c001d0da:	53                   	push   ebx
c001d0db:	e8 50 f9 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d0e0:	c7 04 24 f8 27 02 c0 	mov    DWORD PTR [esp],0xc00227f8
c001d0e7:	e8 18 f5 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d0ec:	83 c4 0c             	add    esp,0xc
c001d0ef:	6a 01                	push   0x1
c001d0f1:	6a 00                	push   0x0
c001d0f3:	53                   	push   ebx
c001d0f4:	e8 7f fa ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001d0f9:	83 c4 0c             	add    esp,0xc
c001d0fc:	6a 01                	push   0x1
c001d0fe:	6a 01                	push   0x1
c001d100:	53                   	push   ebx
c001d101:	e8 72 fa ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001d106:	c7 04 24 45 41 02 c0 	mov    DWORD PTR [esp],0xc0024145
c001d10d:	e8 f2 f4 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d112:	83 c4 20             	add    esp,0x20
c001d115:	31 c0                	xor    eax,eax
c001d117:	5b                   	pop    ebx
c001d118:	5e                   	pop    esi
c001d119:	5f                   	pop    edi
c001d11a:	c3                   	ret    
c001d11b:	90                   	nop

c001d11c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001d11c:	55                   	push   ebp
c001d11d:	57                   	push   edi
c001d11e:	56                   	push   esi
c001d11f:	53                   	push   ebx
c001d120:	83 ec 1c             	sub    esp,0x1c
c001d123:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d127:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d12b:	8d 42 f8             	lea    eax,[edx-0x8]
c001d12e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d132:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d136:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d13a:	3c 03                	cmp    al,0x3
c001d13c:	77 5a                	ja     c001d198 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001d13e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d142:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d146:	0f b6 db             	movzx  ebx,bl
c001d149:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001d14c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d151:	0c 80                	or     al,0x80
c001d153:	50                   	push   eax
c001d154:	6a 0c                	push   0xc
c001d156:	53                   	push   ebx
c001d157:	56                   	push   esi
c001d158:	e8 13 f8 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d15d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d162:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d166:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d16a:	0f b6 d2             	movzx  edx,dl
c001d16d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d171:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d173:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d178:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001d17c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d180:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d184:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d18c:	83 c4 2c             	add    esp,0x2c
c001d18f:	5b                   	pop    ebx
c001d190:	5e                   	pop    esi
c001d191:	5f                   	pop    edi
c001d192:	5d                   	pop    ebp
c001d193:	e9 d8 f7 ff ff       	jmp    c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d198:	0f b6 c2             	movzx  eax,dl
c001d19b:	83 f8 07             	cmp    eax,0x7
c001d19e:	77 12                	ja     c001d1b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001d1a0:	0f b6 c2             	movzx  eax,dl
c001d1a3:	0f b6 db             	movzx  ebx,bl
c001d1a6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001d1ae:	01 c2                	add    edx,eax
c001d1b0:	eb 2f                	jmp    c001d1e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d1b2:	83 f8 0d             	cmp    eax,0xd
c001d1b5:	77 13                	ja     c001d1ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001d1b7:	0f b6 db             	movzx  ebx,bl
c001d1ba:	0f b6 d2             	movzx  edx,dl
c001d1bd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001d1c4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d1c8:	eb 17                	jmp    c001d1e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001d1ca:	83 f8 15             	cmp    eax,0x15
c001d1cd:	77 14                	ja     c001d1e3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001d1cf:	0f b6 db             	movzx  ebx,bl
c001d1d2:	0f b6 d2             	movzx  edx,dl
c001d1d5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001d1dd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d1e1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001d1e3:	83 c4 1c             	add    esp,0x1c
c001d1e6:	5b                   	pop    ebx
c001d1e7:	5e                   	pop    esi
c001d1e8:	5f                   	pop    edi
c001d1e9:	5d                   	pop    ebp
c001d1ea:	c3                   	ret    
c001d1eb:	90                   	nop

c001d1ec <IDE::detect()>:
c001d1ec:	55                   	push   ebp
c001d1ed:	57                   	push   edi
c001d1ee:	56                   	push   esi
c001d1ef:	53                   	push   ebx
c001d1f0:	81 ec 28 02 00 00    	sub    esp,0x228
c001d1f6:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001d1fd:	68 47 41 02 c0       	push   0xc0024147
c001d202:	e8 fd f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d207:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001d20d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001d211:	83 c4 10             	add    esp,0x10
c001d214:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001d219:	0f 85 2f 04 00 00    	jne    c001d64e <IDE::detect()+0x462>
c001d21f:	83 ec 0c             	sub    esp,0xc
c001d222:	31 f6                	xor    esi,esi
c001d224:	68 4a 41 02 c0       	push   0xc002414a
c001d229:	31 ff                	xor    edi,edi
c001d22b:	e8 d4 f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d230:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d237:	83 c4 10             	add    esp,0x10
c001d23a:	83 ec 0c             	sub    esp,0xc
c001d23d:	68 4d 41 02 c0       	push   0xc002414d
c001d242:	e8 bd f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d247:	83 c4 10             	add    esp,0x10
c001d24a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d251:	83 ec 0c             	sub    esp,0xc
c001d254:	31 ed                	xor    ebp,ebp
c001d256:	68 50 41 02 c0       	push   0xc0024150
c001d25b:	e8 a4 f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d260:	89 f8                	mov    eax,edi
c001d262:	c1 e0 06             	shl    eax,0x6
c001d265:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d26d:	c7 04 24 53 41 02 c0 	mov    DWORD PTR [esp],0xc0024153
c001d274:	e8 8b f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d279:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d27d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d285:	c1 e0 04             	shl    eax,0x4
c001d288:	83 c8 a0             	or     eax,0xffffffa0
c001d28b:	0f b6 c0             	movzx  eax,al
c001d28e:	50                   	push   eax
c001d28f:	6a 06                	push   0x6
c001d291:	56                   	push   esi
c001d292:	53                   	push   ebx
c001d293:	e8 d8 f6 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d298:	83 c4 1c             	add    esp,0x1c
c001d29b:	6a 0c                	push   0xc
c001d29d:	56                   	push   esi
c001d29e:	53                   	push   ebx
c001d29f:	e8 8c f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2a4:	83 c4 0c             	add    esp,0xc
c001d2a7:	6a 0c                	push   0xc
c001d2a9:	56                   	push   esi
c001d2aa:	53                   	push   ebx
c001d2ab:	e8 80 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2b0:	83 c4 0c             	add    esp,0xc
c001d2b3:	6a 0c                	push   0xc
c001d2b5:	56                   	push   esi
c001d2b6:	53                   	push   ebx
c001d2b7:	e8 74 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2bc:	83 c4 0c             	add    esp,0xc
c001d2bf:	6a 0c                	push   0xc
c001d2c1:	56                   	push   esi
c001d2c2:	53                   	push   ebx
c001d2c3:	e8 68 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2c8:	c7 04 24 56 41 02 c0 	mov    DWORD PTR [esp],0xc0024156
c001d2cf:	e8 30 f3 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d2d4:	68 ec 00 00 00       	push   0xec
c001d2d9:	6a 07                	push   0x7
c001d2db:	56                   	push   esi
c001d2dc:	53                   	push   ebx
c001d2dd:	e8 8e f6 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2e2:	83 c4 1c             	add    esp,0x1c
c001d2e5:	6a 0c                	push   0xc
c001d2e7:	56                   	push   esi
c001d2e8:	53                   	push   ebx
c001d2e9:	e8 42 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2ee:	83 c4 0c             	add    esp,0xc
c001d2f1:	6a 0c                	push   0xc
c001d2f3:	56                   	push   esi
c001d2f4:	53                   	push   ebx
c001d2f5:	e8 36 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d2fa:	83 c4 0c             	add    esp,0xc
c001d2fd:	6a 0c                	push   0xc
c001d2ff:	56                   	push   esi
c001d300:	53                   	push   ebx
c001d301:	e8 2a f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d306:	83 c4 0c             	add    esp,0xc
c001d309:	6a 0c                	push   0xc
c001d30b:	56                   	push   esi
c001d30c:	53                   	push   ebx
c001d30d:	e8 1e f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d312:	c7 04 24 59 41 02 c0 	mov    DWORD PTR [esp],0xc0024159
c001d319:	e8 e6 f2 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d31e:	83 c4 0c             	add    esp,0xc
c001d321:	6a 0c                	push   0xc
c001d323:	56                   	push   esi
c001d324:	53                   	push   ebx
c001d325:	e8 06 f7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d32a:	83 c4 10             	add    esp,0x10
c001d32d:	84 c0                	test   al,al
c001d32f:	75 1f                	jne    c001d350 <IDE::detect()+0x164>
c001d331:	83 ec 0c             	sub    esp,0xc
c001d334:	68 5c 41 02 c0       	push   0xc002415c
c001d339:	e8 c6 f2 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d33e:	e9 e9 02 00 00       	jmp    c001d62c <IDE::detect()+0x440>
c001d343:	a8 80                	test   al,0x80
c001d345:	74 21                	je     c001d368 <IDE::detect()+0x17c>
c001d347:	45                   	inc    ebp
c001d348:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001d34e:	7f 1e                	jg     c001d36e <IDE::detect()+0x182>
c001d350:	50                   	push   eax
c001d351:	6a 0c                	push   0xc
c001d353:	56                   	push   esi
c001d354:	53                   	push   ebx
c001d355:	e8 d6 f6 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d35a:	83 c4 10             	add    esp,0x10
c001d35d:	a8 01                	test   al,0x1
c001d35f:	74 e2                	je     c001d343 <IDE::detect()+0x157>
c001d361:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001d366:	eb 22                	jmp    c001d38a <IDE::detect()+0x19e>
c001d368:	a8 08                	test   al,0x8
c001d36a:	74 db                	je     c001d347 <IDE::detect()+0x15b>
c001d36c:	eb 17                	jmp    c001d385 <IDE::detect()+0x199>
c001d36e:	83 ec 0c             	sub    esp,0xc
c001d371:	6a 32                	push   0x32
c001d373:	e8 94 85 ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001d378:	83 c4 10             	add    esp,0x10
c001d37b:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001d381:	75 cd                	jne    c001d350 <IDE::detect()+0x164>
c001d383:	eb dc                	jmp    c001d361 <IDE::detect()+0x175>
c001d385:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001d38a:	83 ec 0c             	sub    esp,0xc
c001d38d:	68 5f 41 02 c0       	push   0xc002415f
c001d392:	e8 6d f2 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d397:	83 c4 10             	add    esp,0x10
c001d39a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d39f:	74 60                	je     c001d401 <IDE::detect()+0x215>
c001d3a1:	50                   	push   eax
c001d3a2:	6a 04                	push   0x4
c001d3a4:	56                   	push   esi
c001d3a5:	53                   	push   ebx
c001d3a6:	e8 85 f6 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d3ab:	83 c4 0c             	add    esp,0xc
c001d3ae:	89 c5                	mov    ebp,eax
c001d3b0:	6a 05                	push   0x5
c001d3b2:	56                   	push   esi
c001d3b3:	53                   	push   ebx
c001d3b4:	e8 77 f6 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d3b9:	83 c4 10             	add    esp,0x10
c001d3bc:	89 e9                	mov    ecx,ebp
c001d3be:	0f b6 c0             	movzx  eax,al
c001d3c1:	0f b6 e9             	movzx  ebp,cl
c001d3c4:	83 fd 14             	cmp    ebp,0x14
c001d3c7:	75 07                	jne    c001d3d0 <IDE::detect()+0x1e4>
c001d3c9:	3d eb 00 00 00       	cmp    eax,0xeb
c001d3ce:	eb 0e                	jmp    c001d3de <IDE::detect()+0x1f2>
c001d3d0:	3d 96 00 00 00       	cmp    eax,0x96
c001d3d5:	0f 85 54 02 00 00    	jne    c001d62f <IDE::detect()+0x443>
c001d3db:	83 fd 69             	cmp    ebp,0x69
c001d3de:	0f 85 4b 02 00 00    	jne    c001d62f <IDE::detect()+0x443>
c001d3e4:	68 a1 00 00 00       	push   0xa1
c001d3e9:	6a 07                	push   0x7
c001d3eb:	56                   	push   esi
c001d3ec:	53                   	push   ebx
c001d3ed:	e8 7e f5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3f2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001d3f9:	e8 0e 85 ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	83 ec 0c             	sub    esp,0xc
c001d404:	89 fd                	mov    ebp,edi
c001d406:	68 62 41 02 c0       	push   0xc0024162
c001d40b:	c1 e5 06             	shl    ebp,0x6
c001d40e:	e8 f1 f1 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d413:	01 dd                	add    ebp,ebx
c001d415:	8d 54 24 20          	lea    edx,[esp+0x20]
c001d419:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001d420:	52                   	push   edx
c001d421:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d425:	6a 00                	push   0x0
c001d427:	56                   	push   esi
c001d428:	53                   	push   ebx
c001d429:	e8 ee fc ff ff       	call   c001d11c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d42e:	83 c4 14             	add    esp,0x14
c001d431:	68 66 41 02 c0       	push   0xc0024166
c001d436:	e8 c9 f1 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d43b:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d440:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001d447:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001d44e:	89 f0                	mov    eax,esi
c001d450:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001d456:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d45a:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001d460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d464:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001d46b:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001d473:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d47a:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d482:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d488:	c7 04 24 6a 41 02 c0 	mov    DWORD PTR [esp],0xc002416a
c001d48f:	e8 70 f1 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d494:	83 c4 10             	add    esp,0x10
c001d497:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d49e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4a2:	74 09                	je     c001d4ad <IDE::detect()+0x2c1>
c001d4a4:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d4ab:	eb 07                	jmp    c001d4b4 <IDE::detect()+0x2c8>
c001d4ad:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d4b4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d4b8:	89 f8                	mov    eax,edi
c001d4ba:	83 ec 0c             	sub    esp,0xc
c001d4bd:	c1 e0 06             	shl    eax,0x6
c001d4c0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d4c3:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d4c9:	68 6e 41 02 c0       	push   0xc002416e
c001d4ce:	e8 31 f1 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d4d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4d7:	89 e8                	mov    eax,ebp
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d4df:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d4e2:	83 c0 02             	add    eax,0x2
c001d4e5:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d4eb:	83 c2 02             	add    edx,0x2
c001d4ee:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d4f1:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d4f7:	39 d5                	cmp    ebp,edx
c001d4f9:	75 e4                	jne    c001d4df <IDE::detect()+0x2f3>
c001d4fb:	89 f8                	mov    eax,edi
c001d4fd:	c1 e0 06             	shl    eax,0x6
c001d500:	01 d8                	add    eax,ebx
c001d502:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001d509:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d510:	c1 ea 09             	shr    edx,0x9
c001d513:	83 e2 01             	and    edx,0x1
c001d516:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001d51d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d523:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001d527:	74 0c                	je     c001d535 <IDE::detect()+0x349>
c001d529:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001d532:	0f 95 c2             	setne  dl
c001d535:	83 ec 0c             	sub    esp,0xc
c001d538:	89 fd                	mov    ebp,edi
c001d53a:	c1 e5 06             	shl    ebp,0x6
c001d53d:	01 dd                	add    ebp,ebx
c001d53f:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001d545:	68 72 41 02 c0       	push   0xc0024172
c001d54a:	e8 b5 f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001d557:	75 66                	jne    c001d5bf <IDE::detect()+0x3d3>
c001d559:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d560:	0f 84 b8 00 00 00    	je     c001d61e <IDE::detect()+0x432>
c001d566:	83 ec 0c             	sub    esp,0xc
c001d569:	68 76 41 02 c0       	push   0xc0024176
c001d56e:	e8 91 f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d573:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001d57a:	e8 e0 13 ff ff       	call   c000e95f <malloc>
c001d57f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d582:	89 c5                	mov    ebp,eax
c001d584:	e8 43 05 00 00       	call   c001dacc <ATA::ATA()>
c001d589:	c7 04 24 7a 41 02 c0 	mov    DWORD PTR [esp],0xc002417a
c001d590:	e8 6f f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d595:	59                   	pop    ecx
c001d596:	58                   	pop    eax
c001d597:	55                   	push   ebp
c001d598:	53                   	push   ebx
c001d599:	e8 c4 ba fe ff       	call   c0009062 <Device::addChild(Device*)>
c001d59e:	c7 04 24 7f 41 02 c0 	mov    DWORD PTR [esp],0xc002417f
c001d5a5:	e8 5a f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d5aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5ad:	53                   	push   ebx
c001d5ae:	57                   	push   edi
c001d5af:	6a 00                	push   0x0
c001d5b1:	55                   	push   ebp
c001d5b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5b5:	83 c4 14             	add    esp,0x14
c001d5b8:	68 84 41 02 c0       	push   0xc0024184
c001d5bd:	eb 57                	jmp    c001d616 <IDE::detect()+0x42a>
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	68 89 41 02 c0       	push   0xc0024189
c001d5c7:	e8 38 f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d5cc:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d5d3:	e8 87 13 ff ff       	call   c000e95f <malloc>
c001d5d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5db:	89 c5                	mov    ebp,eax
c001d5dd:	e8 98 0c 00 00       	call   c001e27a <ATAPI::ATAPI()>
c001d5e2:	c7 04 24 8f 41 02 c0 	mov    DWORD PTR [esp],0xc002418f
c001d5e9:	e8 16 f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d5ee:	58                   	pop    eax
c001d5ef:	5a                   	pop    edx
c001d5f0:	55                   	push   ebp
c001d5f1:	53                   	push   ebx
c001d5f2:	e8 6b ba fe ff       	call   c0009062 <Device::addChild(Device*)>
c001d5f7:	c7 04 24 96 41 02 c0 	mov    DWORD PTR [esp],0xc0024196
c001d5fe:	e8 01 f0 fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d603:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d606:	53                   	push   ebx
c001d607:	57                   	push   edi
c001d608:	6a 00                	push   0x0
c001d60a:	55                   	push   ebp
c001d60b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d60e:	83 c4 14             	add    esp,0x14
c001d611:	68 9d 41 02 c0       	push   0xc002419d
c001d616:	e8 e9 ef fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	47                   	inc    edi
c001d622:	68 a4 41 02 c0       	push   0xc00241a4
c001d627:	e8 d8 ef fe ff       	call   c000c604 <KeSetBootMessage(char const*)>
c001d62c:	83 c4 10             	add    esp,0x10
c001d62f:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001d633:	74 0c                	je     c001d641 <IDE::detect()+0x455>
c001d635:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001d63c:	e9 10 fc ff ff       	jmp    c001d251 <IDE::detect()+0x65>
c001d641:	4e                   	dec    esi
c001d642:	74 0a                	je     c001d64e <IDE::detect()+0x462>
c001d644:	be 01 00 00 00       	mov    esi,0x1
c001d649:	e9 ec fb ff ff       	jmp    c001d23a <IDE::detect()+0x4e>
c001d64e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d654:	5b                   	pop    ebx
c001d655:	5e                   	pop    esi
c001d656:	5f                   	pop    edi
c001d657:	5d                   	pop    ebp
c001d658:	c3                   	ret    
c001d659:	90                   	nop

c001d65a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d65a:	55                   	push   ebp
c001d65b:	57                   	push   edi
c001d65c:	56                   	push   esi
c001d65d:	53                   	push   ebx
c001d65e:	83 ec 1c             	sub    esp,0x1c
c001d661:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d665:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d66d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d671:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d675:	88 c3                	mov    bl,al
c001d677:	25 ff 00 00 00       	and    eax,0xff
c001d67c:	0f 84 88 00 00 00    	je     c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	89 c7                	mov    edi,eax
c001d687:	68 a8 41 02 c0       	push   0xc00241a8
c001d68c:	e8 d3 98 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	83 ff 01             	cmp    edi,0x1
c001d697:	74 6b                	je     c001d704 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d699:	83 ff 02             	cmp    edi,0x2
c001d69c:	75 58                	jne    c001d6f6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d69e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d6a3:	01 ff                	add    edi,edi
c001d6a5:	50                   	push   eax
c001d6a6:	09 fe                	or     esi,edi
c001d6a8:	6a 01                	push   0x1
c001d6aa:	89 f0                	mov    eax,esi
c001d6ac:	0f b6 f0             	movzx  esi,al
c001d6af:	c1 e6 06             	shl    esi,0x6
c001d6b2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d6ba:	50                   	push   eax
c001d6bb:	55                   	push   ebp
c001d6bc:	e8 6f f3 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	a8 01                	test   al,0x1
c001d6c6:	74 02                	je     c001d6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d6c8:	b3 07                	mov    bl,0x7
c001d6ca:	a8 02                	test   al,0x2
c001d6cc:	74 02                	je     c001d6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d6ce:	b3 03                	mov    bl,0x3
c001d6d0:	a8 04                	test   al,0x4
c001d6d2:	74 02                	je     c001d6d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d6d4:	b3 14                	mov    bl,0x14
c001d6d6:	a8 08                	test   al,0x8
c001d6d8:	74 02                	je     c001d6dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d6da:	b3 03                	mov    bl,0x3
c001d6dc:	a8 10                	test   al,0x10
c001d6de:	74 02                	je     c001d6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d6e0:	b3 15                	mov    bl,0x15
c001d6e2:	a8 20                	test   al,0x20
c001d6e4:	74 02                	je     c001d6e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d6e6:	b3 03                	mov    bl,0x3
c001d6e8:	a8 40                	test   al,0x40
c001d6ea:	74 02                	je     c001d6ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d6ec:	b3 16                	mov    bl,0x16
c001d6ee:	a8 80                	test   al,0x80
c001d6f0:	74 18                	je     c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d6f2:	b3 0d                	mov    bl,0xd
c001d6f4:	eb 14                	jmp    c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d6f6:	83 ff 03             	cmp    edi,0x3
c001d6f9:	74 0d                	je     c001d708 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d6fb:	83 ff 04             	cmp    edi,0x4
c001d6fe:	75 0a                	jne    c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d700:	b3 08                	mov    bl,0x8
c001d702:	eb 06                	jmp    c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d704:	b3 13                	mov    bl,0x13
c001d706:	eb 02                	jmp    c001d70a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d708:	b3 17                	mov    bl,0x17
c001d70a:	83 c4 1c             	add    esp,0x1c
c001d70d:	88 d8                	mov    al,bl
c001d70f:	5b                   	pop    ebx
c001d710:	5e                   	pop    esi
c001d711:	5f                   	pop    edi
c001d712:	5d                   	pop    ebp
c001d713:	c3                   	ret    

c001d714 <IDE::polling(unsigned char, unsigned int)>:
c001d714:	57                   	push   edi
c001d715:	56                   	push   esi
c001d716:	53                   	push   ebx
c001d717:	bb 04 00 00 00       	mov    ebx,0x4
c001d71c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d720:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d725:	52                   	push   edx
c001d726:	6a 0c                	push   0xc
c001d728:	56                   	push   esi
c001d729:	57                   	push   edi
c001d72a:	e8 01 f3 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d72f:	83 c4 10             	add    esp,0x10
c001d732:	4b                   	dec    ebx
c001d733:	75 f0                	jne    c001d725 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d735:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d73a:	50                   	push   eax
c001d73b:	6a 0c                	push   0xc
c001d73d:	56                   	push   esi
c001d73e:	57                   	push   edi
c001d73f:	e8 ec f2 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001d744:	83 c4 10             	add    esp,0x10
c001d747:	a8 01                	test   al,0x1
c001d749:	75 17                	jne    c001d762 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d74b:	a8 20                	test   al,0x20
c001d74d:	75 0f                	jne    c001d75e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d74f:	4b                   	dec    ebx
c001d750:	74 10                	je     c001d762 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d752:	a8 80                	test   al,0x80
c001d754:	75 e4                	jne    c001d73a <IDE::polling(unsigned char, unsigned int)+0x26>
c001d756:	a8 08                	test   al,0x8
c001d758:	74 e0                	je     c001d73a <IDE::polling(unsigned char, unsigned int)+0x26>
c001d75a:	31 c0                	xor    eax,eax
c001d75c:	eb 06                	jmp    c001d764 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d75e:	b0 01                	mov    al,0x1
c001d760:	eb 02                	jmp    c001d764 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d762:	b0 02                	mov    al,0x2
c001d764:	5b                   	pop    ebx
c001d765:	5e                   	pop    esi
c001d766:	5f                   	pop    edi
c001d767:	c3                   	ret    

c001d768 <SATABus::close(int, int, void*)>:
c001d768:	31 c0                	xor    eax,eax
c001d76a:	c3                   	ret    
c001d76b:	90                   	nop

c001d76c <SATABus::detect()>:
c001d76c:	c3                   	ret    
c001d76d:	90                   	nop

c001d76e <SATABus::SATABus()>:
c001d76e:	83 ec 0c             	sub    esp,0xc
c001d771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d775:	83 ec 08             	sub    esp,0x8
c001d778:	68 e0 41 02 c0       	push   0xc00241e0
c001d77d:	50                   	push   eax
c001d77e:	e8 39 bc fe ff       	call   c00093bc <HardDiskController::HardDiskController(char const*)>
c001d783:	83 c4 10             	add    esp,0x10
c001d786:	ba 0c 42 02 c0       	mov    edx,0xc002420c
c001d78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78f:	89 10                	mov    DWORD PTR [eax],edx
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	6a 50                	push   0x50
c001d796:	e8 dd 17 ff ff       	call   c000ef78 <Phys::allocateContiguousPages(int)>
c001d79b:	83 c4 10             	add    esp,0x10
c001d79e:	89 c2                	mov    edx,eax
c001d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7a4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d7aa:	83 ec 0c             	sub    esp,0xc
c001d7ad:	6a 50                	push   0x50
c001d7af:	e8 25 49 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001d7b4:	83 c4 10             	add    esp,0x10
c001d7b7:	89 c2                	mov    edx,eax
c001d7b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7bd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d7c3:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c001d7c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d7cc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d7d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d7d6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d7dc:	83 ec 0c             	sub    esp,0xc
c001d7df:	6a 03                	push   0x3
c001d7e1:	6a 50                	push   0x50
c001d7e3:	51                   	push   ecx
c001d7e4:	52                   	push   edx
c001d7e5:	50                   	push   eax
c001d7e6:	e8 bb 51 ff ff       	call   c00129a6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d7eb:	83 c4 20             	add    esp,0x20
c001d7ee:	90                   	nop
c001d7ef:	83 c4 0c             	add    esp,0xc
c001d7f2:	c3                   	ret    
c001d7f3:	90                   	nop

c001d7f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d7f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7f8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d7fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d7fe:	09 c2                	or     edx,eax
c001d800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d804:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d80a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d80c:	31 c0                	xor    eax,eax
c001d80e:	c1 e9 08             	shr    ecx,0x8
c001d811:	83 e1 0f             	and    ecx,0xf
c001d814:	39 c8                	cmp    eax,ecx
c001d816:	74 0a                	je     c001d822 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d818:	f6 c2 01             	test   dl,0x1
c001d81b:	74 08                	je     c001d825 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d81d:	d1 ea                	shr    edx,1
c001d81f:	40                   	inc    eax
c001d820:	eb f2                	jmp    c001d814 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d822:	83 c8 ff             	or     eax,0xffffffff
c001d825:	c3                   	ret    

c001d826 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d826:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d82a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d82d:	89 c2                	mov    edx,eax
c001d82f:	c1 ea 08             	shr    edx,0x8
c001d832:	83 e2 0f             	and    edx,0xf
c001d835:	4a                   	dec    edx
c001d836:	75 32                	jne    c001d86a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d838:	83 e0 0f             	and    eax,0xf
c001d83b:	83 f8 03             	cmp    eax,0x3
c001d83e:	75 2a                	jne    c001d86a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d840:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d843:	b8 02 00 00 00       	mov    eax,0x2
c001d848:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d84e:	74 1c                	je     c001d86c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d850:	b8 04 00 00 00       	mov    eax,0x4
c001d855:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d85b:	74 0f                	je     c001d86c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d85d:	31 c0                	xor    eax,eax
c001d85f:	83 fa 03             	cmp    edx,0x3
c001d862:	0f 94 c0             	sete   al
c001d865:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d869:	c3                   	ret    
c001d86a:	31 c0                	xor    eax,eax
c001d86c:	c3                   	ret    
c001d86d:	90                   	nop

c001d86e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d872:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d875:	0f ba e2 0f          	bt     edx,0xf
c001d879:	72 f7                	jb     c001d872 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d87b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d87e:	83 ca 10             	or     edx,0x10
c001d881:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d884:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d887:	83 ca 01             	or     edx,0x1
c001d88a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d88d:	c3                   	ret    

c001d88e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d88e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d892:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d895:	83 e2 fe             	and    edx,0xfffffffe
c001d898:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d89b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d89e:	83 e2 ef             	and    edx,0xffffffef
c001d8a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d8a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8a7:	0f ba e2 0e          	bt     edx,0xe
c001d8ab:	72 f7                	jb     c001d8a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d8ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d8b0:	0f ba e2 0f          	bt     edx,0xf
c001d8b4:	72 ee                	jb     c001d8a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d8b6:	c3                   	ret    
c001d8b7:	90                   	nop

c001d8b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d8b8:	55                   	push   ebp
c001d8b9:	57                   	push   edi
c001d8ba:	56                   	push   esi
c001d8bb:	53                   	push   ebx
c001d8bc:	83 ec 1c             	sub    esp,0x1c
c001d8bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d8c7:	53                   	push   ebx
c001d8c8:	56                   	push   esi
c001d8c9:	e8 c0 ff ff ff       	call   c001d88e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d8ce:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d8d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d8d8:	83 ec 0c             	sub    esp,0xc
c001d8db:	c1 e5 0a             	shl    ebp,0xa
c001d8de:	01 e8                	add    eax,ebp
c001d8e0:	89 03                	mov    DWORD PTR [ebx],eax
c001d8e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8e4:	68 00 04 00 00       	push   0x400
c001d8e9:	6a 00                	push   0x0
c001d8eb:	50                   	push   eax
c001d8ec:	e8 ff 2b fe ff       	call   c00004f0 <memset>
c001d8f1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d8f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d8fb:	01 e8                	add    eax,ebp
c001d8fd:	83 c4 1c             	add    esp,0x1c
c001d900:	89 03                	mov    DWORD PTR [ebx],eax
c001d902:	c1 e2 08             	shl    edx,0x8
c001d905:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d90c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d912:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d918:	01 f8                	add    eax,edi
c001d91a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d91d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d920:	68 00 01 00 00       	push   0x100
c001d925:	6a 00                	push   0x0
c001d927:	50                   	push   eax
c001d928:	e8 c3 2b fe ff       	call   c00004f0 <memset>
c001d92d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001d933:	01 fa                	add    edx,edi
c001d935:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d939:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d93c:	c1 e7 0d             	shl    edi,0xd
c001d93f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d946:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d94c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d952:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d956:	31 ff                	xor    edi,edi
c001d958:	83 c4 10             	add    esp,0x10
c001d95b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d961:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d965:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d96b:	83 c5 20             	add    ebp,0x20
c001d96e:	01 f8                	add    eax,edi
c001d970:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d973:	52                   	push   edx
c001d974:	68 00 01 00 00       	push   0x100
c001d979:	6a 00                	push   0x0
c001d97b:	50                   	push   eax
c001d97c:	e8 6f 2b fe ff       	call   c00004f0 <memset>
c001d981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d985:	83 c4 10             	add    esp,0x10
c001d988:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d98e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d995:	01 f8                	add    eax,edi
c001d997:	81 c7 00 01 00 00    	add    edi,0x100
c001d99d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d9a0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d9a6:	75 b3                	jne    c001d95b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001d9a8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d9af:	50                   	push   eax
c001d9b0:	50                   	push   eax
c001d9b1:	53                   	push   ebx
c001d9b2:	56                   	push   esi
c001d9b3:	e8 b6 fe ff ff       	call   c001d86e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d9b8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d9bf:	83 c4 2c             	add    esp,0x2c
c001d9c2:	5b                   	pop    ebx
c001d9c3:	5e                   	pop    esi
c001d9c4:	5f                   	pop    edi
c001d9c5:	5d                   	pop    ebp
c001d9c6:	c3                   	ret    
c001d9c7:	90                   	nop

c001d9c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d9c8:	55                   	push   ebp
c001d9c9:	57                   	push   edi
c001d9ca:	56                   	push   esi
c001d9cb:	53                   	push   ebx
c001d9cc:	31 db                	xor    ebx,ebx
c001d9ce:	83 ec 0c             	sub    esp,0xc
c001d9d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9d5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d9d9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d9dc:	f7 c7 01 00 00 00    	test   edi,0x1
c001d9e2:	74 7a                	je     c001da5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d9e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d9e8:	89 d8                	mov    eax,ebx
c001d9ea:	c1 e0 07             	shl    eax,0x7
c001d9ed:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d9f4:	55                   	push   ebp
c001d9f5:	56                   	push   esi
c001d9f6:	e8 2b fe ff ff       	call   c001d826 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d9fb:	5a                   	pop    edx
c001d9fc:	83 f8 01             	cmp    eax,0x1
c001d9ff:	59                   	pop    ecx
c001da00:	75 21                	jne    c001da23 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001da02:	50                   	push   eax
c001da03:	53                   	push   ebx
c001da04:	55                   	push   ebp
c001da05:	56                   	push   esi
c001da06:	e8 ad fe ff ff       	call   c001d8b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001da0b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001da12:	e8 48 0f ff ff       	call   c000e95f <malloc>
c001da17:	89 c5                	mov    ebp,eax
c001da19:	89 04 24             	mov    DWORD PTR [esp],eax
c001da1c:	e8 25 0f 00 00       	call   c001e946 <SATA::SATA()>
c001da21:	eb 24                	jmp    c001da47 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001da23:	83 f8 04             	cmp    eax,0x4
c001da26:	75 36                	jne    c001da5e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001da28:	51                   	push   ecx
c001da29:	53                   	push   ebx
c001da2a:	55                   	push   ebp
c001da2b:	56                   	push   esi
c001da2c:	e8 87 fe ff ff       	call   c001d8b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001da31:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001da38:	e8 22 0f ff ff       	call   c000e95f <malloc>
c001da3d:	89 c5                	mov    ebp,eax
c001da3f:	89 04 24             	mov    DWORD PTR [esp],eax
c001da42:	e8 97 12 00 00       	call   c001ecde <SATAPI::SATAPI()>
c001da47:	58                   	pop    eax
c001da48:	5a                   	pop    edx
c001da49:	55                   	push   ebp
c001da4a:	56                   	push   esi
c001da4b:	e8 12 b6 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001da50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001da53:	56                   	push   esi
c001da54:	6a 00                	push   0x0
c001da56:	53                   	push   ebx
c001da57:	55                   	push   ebp
c001da58:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001da5b:	83 c4 20             	add    esp,0x20
c001da5e:	d1 ef                	shr    edi,1
c001da60:	43                   	inc    ebx
c001da61:	83 fb 20             	cmp    ebx,0x20
c001da64:	0f 85 72 ff ff ff    	jne    c001d9dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001da6a:	83 c4 0c             	add    esp,0xc
c001da6d:	5b                   	pop    ebx
c001da6e:	5e                   	pop    esi
c001da6f:	5f                   	pop    edi
c001da70:	5d                   	pop    ebp
c001da71:	c3                   	ret    

c001da72 <SATABus::open(int, int, void*)>:
c001da72:	53                   	push   ebx
c001da73:	83 ec 08             	sub    esp,0x8
c001da76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da7a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001da80:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001da86:	e8 f1 79 ff ff       	call   c001547c <KeDisablePreemption()>
c001da8b:	52                   	push   edx
c001da8c:	52                   	push   edx
c001da8d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001da93:	53                   	push   ebx
c001da94:	e8 2f ff ff ff       	call   c001d9c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001da99:	e8 06 7a ff ff       	call   c00154a4 <KeRestorePreemption()>
c001da9e:	31 c0                	xor    eax,eax
c001daa0:	83 c4 18             	add    esp,0x18
c001daa3:	5b                   	pop    ebx
c001daa4:	c3                   	ret    
c001daa5:	90                   	nop

c001daa6 <ATA::close(int, int, void*)>:
c001daa6:	83 ec 0c             	sub    esp,0xc
c001daa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dab3:	85 c0                	test   eax,eax
c001dab5:	74 0c                	je     c001dac3 <ATA::close(int, int, void*)+0x1d>
c001dab7:	83 ec 0c             	sub    esp,0xc
c001daba:	8b 10                	mov    edx,DWORD PTR [eax]
c001dabc:	50                   	push   eax
c001dabd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dac0:	83 c4 10             	add    esp,0x10
c001dac3:	31 c0                	xor    eax,eax
c001dac5:	83 c4 0c             	add    esp,0xc
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <ATA::powerSaving(PowerSavingLevel)>:
c001daca:	c3                   	ret    
c001dacb:	90                   	nop

c001dacc <ATA::ATA()>:
c001dacc:	83 ec 0c             	sub    esp,0xc
c001dacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dad3:	83 ec 04             	sub    esp,0x4
c001dad6:	68 00 02 00 00       	push   0x200
c001dadb:	68 8d 43 02 c0       	push   0xc002438d
c001dae0:	50                   	push   eax
c001dae1:	e8 60 b9 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dae6:	83 c4 10             	add    esp,0x10
c001dae9:	ba f4 42 02 c0       	mov    edx,0xc00242f4
c001daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf2:	89 10                	mov    DWORD PTR [eax],edx
c001daf4:	90                   	nop
c001daf5:	83 c4 0c             	add    esp,0xc
c001daf8:	c3                   	ret    
c001daf9:	90                   	nop

c001dafa <ATA::flush(bool)>:
c001dafa:	53                   	push   ebx
c001dafb:	83 ec 08             	sub    esp,0x8
c001dafe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001db07:	83 f8 01             	cmp    eax,0x1
c001db0a:	19 c0                	sbb    eax,eax
c001db0c:	83 e0 fd             	and    eax,0xfffffffd
c001db0f:	05 ea 00 00 00       	add    eax,0xea
c001db14:	50                   	push   eax
c001db15:	6a 07                	push   0x7
c001db17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db1e:	50                   	push   eax
c001db1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db25:	e8 46 ee ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db2a:	83 c4 0c             	add    esp,0xc
c001db2d:	6a 00                	push   0x0
c001db2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db36:	50                   	push   eax
c001db37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db3d:	e8 d2 fb ff ff       	call   c001d714 <IDE::polling(unsigned char, unsigned int)>
c001db42:	83 c4 18             	add    esp,0x18
c001db45:	5b                   	pop    ebx
c001db46:	c3                   	ret    
c001db47:	90                   	nop

c001db48 <ATA::readyForCommand()>:
c001db48:	56                   	push   esi
c001db49:	53                   	push   ebx
c001db4a:	53                   	push   ebx
c001db4b:	31 db                	xor    ebx,ebx
c001db4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db51:	51                   	push   ecx
c001db52:	6a 0c                	push   0xc
c001db54:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001db5b:	50                   	push   eax
c001db5c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001db62:	e8 c9 ee ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001db67:	83 c4 10             	add    esp,0x10
c001db6a:	a8 88                	test   al,0x88
c001db6c:	74 1f                	je     c001db8d <ATA::readyForCommand()+0x45>
c001db6e:	43                   	inc    ebx
c001db6f:	83 fb 63             	cmp    ebx,0x63
c001db72:	7e dd                	jle    c001db51 <ATA::readyForCommand()+0x9>
c001db74:	83 ec 0c             	sub    esp,0xc
c001db77:	6a 0a                	push   0xa
c001db79:	e8 8e 7d ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001db87:	75 c8                	jne    c001db51 <ATA::readyForCommand()+0x9>
c001db89:	31 c0                	xor    eax,eax
c001db8b:	eb 02                	jmp    c001db8f <ATA::readyForCommand()+0x47>
c001db8d:	b0 01                	mov    al,0x1
c001db8f:	5a                   	pop    edx
c001db90:	5b                   	pop    ebx
c001db91:	5e                   	pop    esi
c001db92:	c3                   	ret    
c001db93:	90                   	nop

c001db94 <ATA::access(unsigned long long, int, void*, bool)>:
c001db94:	55                   	push   ebp
c001db95:	57                   	push   edi
c001db96:	56                   	push   esi
c001db97:	53                   	push   ebx
c001db98:	83 ec 2c             	sub    esp,0x2c
c001db9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001db9f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dba3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dba7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001dbaf:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001dbb3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbb7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001dbbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dbc1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dbc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dbcb:	c1 e0 06             	shl    eax,0x6
c001dbce:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001dbd6:	74 5d                	je     c001dc35 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001dbd8:	89 fa                	mov    edx,edi
c001dbda:	89 f0                	mov    eax,esi
c001dbdc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001dbe0:	c1 ea 1c             	shr    edx,0x1c
c001dbe3:	89 d1                	mov    ecx,edx
c001dbe5:	09 c1                	or     ecx,eax
c001dbe7:	74 25                	je     c001dc0e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001dbe9:	31 ed                	xor    ebp,ebp
c001dbeb:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001dbf2:	89 fa                	mov    edx,edi
c001dbf4:	89 f0                	mov    eax,esi
c001dbf6:	0f ad d0             	shrd   eax,edx,cl
c001dbf9:	d3 ea                	shr    edx,cl
c001dbfb:	f6 c1 20             	test   cl,0x20
c001dbfe:	74 02                	je     c001dc02 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001dc00:	89 d0                	mov    eax,edx
c001dc02:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001dc06:	45                   	inc    ebp
c001dc07:	83 fd 06             	cmp    ebp,0x6
c001dc0a:	75 df                	jne    c001dbeb <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001dc0c:	eb 76                	jmp    c001dc84 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001dc0e:	89 f0                	mov    eax,esi
c001dc10:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001dc15:	89 fa                	mov    edx,edi
c001dc17:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dc1e:	0f ac d0 10          	shrd   eax,edx,0x10
c001dc22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dc27:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dc2b:	c1 ee 18             	shr    esi,0x18
c001dc2e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001dc33:	eb 56                	jmp    c001dc8b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001dc35:	6a 00                	push   0x0
c001dc37:	6a 3f                	push   0x3f
c001dc39:	57                   	push   edi
c001dc3a:	56                   	push   esi
c001dc3b:	e8 24 25 00 00       	call   c0020164 <__umoddi3>
c001dc40:	83 c4 10             	add    esp,0x10
c001dc43:	40                   	inc    eax
c001dc44:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001dc48:	6a 00                	push   0x0
c001dc4a:	68 f0 03 00 00       	push   0x3f0
c001dc4f:	57                   	push   edi
c001dc50:	56                   	push   esi
c001dc51:	e8 0e 24 00 00       	call   c0020064 <__udivdi3>
c001dc56:	83 c4 10             	add    esp,0x10
c001dc59:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001dc5e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001dc65:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001dc6a:	6a 00                	push   0x0
c001dc6c:	6a 3f                	push   0x3f
c001dc6e:	57                   	push   edi
c001dc6f:	56                   	push   esi
c001dc70:	e8 ef 23 00 00       	call   c0020064 <__udivdi3>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	83 e0 0f             	and    eax,0xf
c001dc7b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dc80:	89 c6                	mov    esi,eax
c001dc82:	eb 07                	jmp    c001dc8b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001dc84:	31 f6                	xor    esi,esi
c001dc86:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001dc8b:	55                   	push   ebp
c001dc8c:	6a 00                	push   0x0
c001dc8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc95:	50                   	push   eax
c001dc96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc9a:	e8 d9 ee ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001dc9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dca2:	e8 a1 fe ff ff       	call   c001db48 <ATA::readyForCommand()>
c001dca7:	83 c4 10             	add    esp,0x10
c001dcaa:	84 c0                	test   al,al
c001dcac:	75 0a                	jne    c001dcb8 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001dcae:	be 01 00 00 00       	mov    esi,0x1
c001dcb3:	e9 c2 02 00 00       	jmp    c001df7a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001dcb8:	fa                   	cli    
c001dcb9:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dcbf:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001dcc5:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001dcca:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dcd0:	75 0a                	jne    c001dcdc <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001dcd2:	c1 e0 04             	shl    eax,0x4
c001dcd5:	09 c6                	or     esi,eax
c001dcd7:	83 ce a0             	or     esi,0xffffffa0
c001dcda:	eb 08                	jmp    c001dce4 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001dcdc:	c1 e0 04             	shl    eax,0x4
c001dcdf:	09 c6                	or     esi,eax
c001dce1:	83 ce e0             	or     esi,0xffffffe0
c001dce4:	89 f0                	mov    eax,esi
c001dce6:	0f b6 d2             	movzx  edx,dl
c001dce9:	0f b6 f0             	movzx  esi,al
c001dcec:	56                   	push   esi
c001dced:	6a 06                	push   0x6
c001dcef:	52                   	push   edx
c001dcf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dcf6:	e8 75 ec ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcfb:	83 c4 10             	add    esp,0x10
c001dcfe:	6a 00                	push   0x0
c001dd00:	6a 01                	push   0x1
c001dd02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd09:	50                   	push   eax
c001dd0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd10:	e8 5b ec ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd15:	83 c4 10             	add    esp,0x10
c001dd18:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001dd1d:	83 f8 02             	cmp    eax,0x2
c001dd20:	75 6e                	jne    c001dd90 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001dd22:	6a 00                	push   0x0
c001dd24:	6a 08                	push   0x8
c001dd26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd2d:	50                   	push   eax
c001dd2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd34:	e8 37 ec ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd39:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001dd3e:	50                   	push   eax
c001dd3f:	6a 09                	push   0x9
c001dd41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd48:	50                   	push   eax
c001dd49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd4f:	e8 1c ec ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd54:	83 c4 20             	add    esp,0x20
c001dd57:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001dd5c:	50                   	push   eax
c001dd5d:	6a 0a                	push   0xa
c001dd5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd66:	50                   	push   eax
c001dd67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd6d:	e8 fe eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd72:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001dd77:	50                   	push   eax
c001dd78:	6a 0b                	push   0xb
c001dd7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd81:	50                   	push   eax
c001dd82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dd88:	e8 e3 eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd8d:	83 c4 20             	add    esp,0x20
c001dd90:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001dd95:	50                   	push   eax
c001dd96:	6a 02                	push   0x2
c001dd98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dd9f:	50                   	push   eax
c001dda0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dda6:	e8 c5 eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddab:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ddb0:	50                   	push   eax
c001ddb1:	6a 03                	push   0x3
c001ddb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddba:	50                   	push   eax
c001ddbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddc1:	e8 aa eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddc6:	83 c4 20             	add    esp,0x20
c001ddc9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001ddce:	50                   	push   eax
c001ddcf:	6a 04                	push   0x4
c001ddd1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddd8:	50                   	push   eax
c001ddd9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dddf:	e8 8c eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dde9:	50                   	push   eax
c001ddea:	6a 05                	push   0x5
c001ddec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ddf3:	50                   	push   eax
c001ddf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ddfa:	e8 71 eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddff:	83 c4 20             	add    esp,0x20
c001de02:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001de07:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001de0c:	74 13                	je     c001de21 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001de0e:	83 f8 02             	cmp    eax,0x2
c001de11:	74 20                	je     c001de33 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001de13:	48                   	dec    eax
c001de14:	0f 85 94 fe ff ff    	jne    c001dcae <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001de1a:	b8 30 00 00 00       	mov    eax,0x30
c001de1f:	eb 1e                	jmp    c001de3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001de21:	83 f8 02             	cmp    eax,0x2
c001de24:	74 14                	je     c001de3a <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001de26:	48                   	dec    eax
c001de27:	b8 20 00 00 00       	mov    eax,0x20
c001de2c:	74 11                	je     c001de3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001de2e:	e9 7b fe ff ff       	jmp    c001dcae <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001de33:	b8 34 00 00 00       	mov    eax,0x34
c001de38:	eb 05                	jmp    c001de3f <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001de3a:	b8 24 00 00 00       	mov    eax,0x24
c001de3f:	50                   	push   eax
c001de40:	6a 07                	push   0x7
c001de42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de49:	50                   	push   eax
c001de4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de50:	e8 1b eb ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de55:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001de5c:	83 c4 10             	add    esp,0x10
c001de5f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001de66:	75 01                	jne    c001de69 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001de68:	fb                   	sti    
c001de69:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001de6d:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001de72:	85 f6                	test   esi,esi
c001de74:	0f 84 dd 00 00 00    	je     c001df57 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001de7a:	57                   	push   edi
c001de7b:	6a 01                	push   0x1
c001de7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001de84:	50                   	push   eax
c001de85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001de8b:	e8 84 f8 ff ff       	call   c001d714 <IDE::polling(unsigned char, unsigned int)>
c001de90:	83 c4 10             	add    esp,0x10
c001de93:	0f b6 c0             	movzx  eax,al
c001de96:	85 c0                	test   eax,eax
c001de98:	74 23                	je     c001debd <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001de9a:	50                   	push   eax
c001de9b:	89 c6                	mov    esi,eax
c001de9d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001dea4:	50                   	push   eax
c001dea5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001deac:	50                   	push   eax
c001dead:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001deb3:	e8 a2 f7 ff ff       	call   c001d65a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001deb8:	e9 ba 00 00 00       	jmp    c001df77 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001debd:	85 ed                	test   ebp,ebp
c001debf:	74 49                	je     c001df0a <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001dec1:	fa                   	cli    
c001dec2:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001dec8:	31 c9                	xor    ecx,ecx
c001deca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dece:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ded2:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ded6:	51                   	push   ecx
c001ded7:	51                   	push   ecx
c001ded8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dedf:	50                   	push   eax
c001dee0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dee6:	e8 73 ea ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001deeb:	89 c2                	mov    edx,eax
c001deed:	89 f8                	mov    eax,edi
c001deef:	66 ef                	out    dx,ax
c001def1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001def5:	83 c4 10             	add    esp,0x10
c001def8:	41                   	inc    ecx
c001def9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001deff:	75 c9                	jne    c001deca <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001df01:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001df08:	eb 35                	jmp    c001df3f <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001df0a:	fa                   	cli    
c001df0b:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001df11:	52                   	push   edx
c001df12:	52                   	push   edx
c001df13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001df1a:	50                   	push   eax
c001df1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001df21:	e8 38 ea ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001df26:	b9 00 01 00 00       	mov    ecx,0x100
c001df2b:	89 c2                	mov    edx,eax
c001df2d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001df31:	fc                   	cld    
c001df32:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001df35:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001df3c:	83 c4 10             	add    esp,0x10
c001df3f:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001df46:	75 01                	jne    c001df49 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001df48:	fb                   	sti    
c001df49:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001df51:	4e                   	dec    esi
c001df52:	e9 1b ff ff ff       	jmp    c001de72 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001df57:	31 f6                	xor    esi,esi
c001df59:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001df5e:	74 1a                	je     c001df7a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001df60:	50                   	push   eax
c001df61:	50                   	push   eax
c001df62:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001df67:	83 f8 02             	cmp    eax,0x2
c001df6a:	0f 94 c0             	sete   al
c001df6d:	0f b6 c0             	movzx  eax,al
c001df70:	50                   	push   eax
c001df71:	53                   	push   ebx
c001df72:	e8 83 fb ff ff       	call   c001dafa <ATA::flush(bool)>
c001df77:	83 c4 10             	add    esp,0x10
c001df7a:	83 c4 2c             	add    esp,0x2c
c001df7d:	89 f0                	mov    eax,esi
c001df7f:	5b                   	pop    ebx
c001df80:	5e                   	pop    esi
c001df81:	5f                   	pop    edi
c001df82:	5d                   	pop    ebp
c001df83:	c3                   	ret    

c001df84 <ATA::read(unsigned long long, int, void*)>:
c001df84:	57                   	push   edi
c001df85:	b8 04 00 00 00       	mov    eax,0x4
c001df8a:	56                   	push   esi
c001df8b:	53                   	push   ebx
c001df8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df94:	8d 7a ff             	lea    edi,[edx-0x1]
c001df97:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001df9b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001df9f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dfa5:	77 25                	ja     c001dfcc <ATA::read(unsigned long long, int, void*)+0x48>
c001dfa7:	b8 06 00 00 00       	mov    eax,0x6
c001dfac:	85 f6                	test   esi,esi
c001dfae:	74 1c                	je     c001dfcc <ATA::read(unsigned long long, int, void*)+0x48>
c001dfb0:	50                   	push   eax
c001dfb1:	50                   	push   eax
c001dfb2:	6a 00                	push   0x0
c001dfb4:	56                   	push   esi
c001dfb5:	52                   	push   edx
c001dfb6:	53                   	push   ebx
c001dfb7:	51                   	push   ecx
c001dfb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfbc:	e8 d3 fb ff ff       	call   c001db94 <ATA::access(unsigned long long, int, void*, bool)>
c001dfc1:	83 c4 20             	add    esp,0x20
c001dfc4:	85 c0                	test   eax,eax
c001dfc6:	0f 95 c0             	setne  al
c001dfc9:	0f b6 c0             	movzx  eax,al
c001dfcc:	5b                   	pop    ebx
c001dfcd:	5e                   	pop    esi
c001dfce:	5f                   	pop    edi
c001dfcf:	c3                   	ret    

c001dfd0 <ATA::write(unsigned long long, int, void*)>:
c001dfd0:	57                   	push   edi
c001dfd1:	b8 04 00 00 00       	mov    eax,0x4
c001dfd6:	56                   	push   esi
c001dfd7:	53                   	push   ebx
c001dfd8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dfdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dfe0:	8d 7a ff             	lea    edi,[edx-0x1]
c001dfe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dfe7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001dfeb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dff1:	77 25                	ja     c001e018 <ATA::write(unsigned long long, int, void*)+0x48>
c001dff3:	b8 06 00 00 00       	mov    eax,0x6
c001dff8:	85 f6                	test   esi,esi
c001dffa:	74 1c                	je     c001e018 <ATA::write(unsigned long long, int, void*)+0x48>
c001dffc:	50                   	push   eax
c001dffd:	50                   	push   eax
c001dffe:	6a 01                	push   0x1
c001e000:	56                   	push   esi
c001e001:	52                   	push   edx
c001e002:	53                   	push   ebx
c001e003:	51                   	push   ecx
c001e004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e008:	e8 87 fb ff ff       	call   c001db94 <ATA::access(unsigned long long, int, void*, bool)>
c001e00d:	83 c4 20             	add    esp,0x20
c001e010:	85 c0                	test   eax,eax
c001e012:	0f 95 c0             	setne  al
c001e015:	0f b6 c0             	movzx  eax,al
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	c3                   	ret    

c001e01c <ATA::detectCHS()>:
c001e01c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e020:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001e026:	c1 e0 06             	shl    eax,0x6
c001e029:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001e02f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001e039:	c7 44 24 04 30 42 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024230
c001e041:	e9 60 0c ff ff       	jmp    c000eca6 <KePanic(char const*)>

c001e046 <ATA::open(int, int, void*)>:
c001e046:	53                   	push   ebx
c001e047:	83 ec 08             	sub    esp,0x8
c001e04a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e04e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e052:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e056:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e05c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e062:	c1 e0 06             	shl    eax,0x6
c001e065:	01 d0                	add    eax,edx
c001e067:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001e06e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001e074:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001e07b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e085:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001e08b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e092:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001e099:	75 0c                	jne    c001e0a7 <ATA::open(int, int, void*)+0x61>
c001e09b:	83 ec 0c             	sub    esp,0xc
c001e09e:	53                   	push   ebx
c001e09f:	e8 78 ff ff ff       	call   c001e01c <ATA::detectCHS()>
c001e0a4:	83 c4 10             	add    esp,0x10
c001e0a7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e0ad:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e0b3:	c1 e0 06             	shl    eax,0x6
c001e0b6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001e0bd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e0c7:	d1 e8                	shr    eax,1
c001e0c9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e0cf:	6a 04                	push   0x4
c001e0d1:	6a 0c                	push   0xc
c001e0d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0da:	50                   	push   eax
c001e0db:	52                   	push   edx
c001e0dc:	e8 8f e8 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0e1:	90                   	nop
c001e0e2:	90                   	nop
c001e0e3:	6a 00                	push   0x0
c001e0e5:	6a 0c                	push   0xc
c001e0e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e0ee:	50                   	push   eax
c001e0ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e0f5:	e8 76 e8 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0fa:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e100:	83 c4 20             	add    esp,0x20
c001e103:	c1 e0 06             	shl    eax,0x6
c001e106:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001e10c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001e113:	0f 84 00 01 00 00    	je     c001e219 <ATA::open(int, int, void*)+0x1d3>
c001e119:	83 ec 0c             	sub    esp,0xc
c001e11c:	6a 08                	push   0x8
c001e11e:	e8 55 0e ff ff       	call   c000ef78 <Phys::allocateContiguousPages(int)>
c001e123:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e129:	c7 04 24 42 42 02 c0 	mov    DWORD PTR [esp],0xc0024242
c001e130:	e8 2f 8e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e135:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001e13c:	e8 98 3f ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001e141:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e147:	6a 03                	push   0x3
c001e149:	50                   	push   eax
c001e14a:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e150:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e156:	e8 61 46 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e15b:	83 c4 20             	add    esp,0x20
c001e15e:	e8 37 0d ff ff       	call   c000ee9a <Phys::allocatePage()>
c001e163:	83 ec 0c             	sub    esp,0xc
c001e166:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001e16c:	6a 01                	push   0x1
c001e16e:	e8 66 3f ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001e173:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001e179:	6a 03                	push   0x3
c001e17b:	50                   	push   eax
c001e17c:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001e182:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e188:	e8 2f 46 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e18d:	83 c4 14             	add    esp,0x14
c001e190:	68 7b 42 02 c0       	push   0xc002427b
c001e195:	e8 ca 8d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e19a:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001e1a1:	50                   	push   eax
c001e1a2:	6a 12                	push   0x12
c001e1a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1ab:	50                   	push   eax
c001e1ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1b2:	e8 b9 e7 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1b7:	83 c4 20             	add    esp,0x20
c001e1ba:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001e1c0:	0f b6 c4             	movzx  eax,ah
c001e1c3:	50                   	push   eax
c001e1c4:	6a 13                	push   0x13
c001e1c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1cd:	50                   	push   eax
c001e1ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1d4:	e8 97 e7 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1d9:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001e1e0:	50                   	push   eax
c001e1e1:	6a 14                	push   0x14
c001e1e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1ea:	50                   	push   eax
c001e1eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1f1:	e8 7a e7 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1f6:	83 c4 20             	add    esp,0x20
c001e1f9:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001e200:	50                   	push   eax
c001e201:	6a 15                	push   0x15
c001e203:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e20a:	50                   	push   eax
c001e20b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e211:	e8 5a e7 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	83 ec 0c             	sub    esp,0xc
c001e21c:	53                   	push   ebx
c001e21d:	e8 8c b2 fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001e222:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e225:	e8 24 c1 fe ff       	call   c000a34e <createPartitionsForDisk(PhysicalDisk*)>
c001e22a:	31 c0                	xor    eax,eax
c001e22c:	83 c4 18             	add    esp,0x18
c001e22f:	5b                   	pop    ebx
c001e230:	c3                   	ret    

c001e231 <combineCharAndColour(char, unsigned char)>:
c001e231:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e236:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001e23c:	c1 e0 08             	shl    eax,0x8
c001e23f:	09 d0                	or     eax,edx
c001e241:	c3                   	ret    

c001e242 <combineColours(unsigned char, unsigned char)>:
c001e242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e247:	c1 e0 04             	shl    eax,0x4
c001e24a:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <ATAPI::write(unsigned long long, int, void*)>:
c001e250:	b8 03 00 00 00       	mov    eax,0x3
c001e255:	c3                   	ret    

c001e256 <ATAPI::close(int, int, void*)>:
c001e256:	83 ec 0c             	sub    esp,0xc
c001e259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e263:	85 c0                	test   eax,eax
c001e265:	74 0c                	je     c001e273 <ATAPI::close(int, int, void*)+0x1d>
c001e267:	83 ec 0c             	sub    esp,0xc
c001e26a:	8b 10                	mov    edx,DWORD PTR [eax]
c001e26c:	50                   	push   eax
c001e26d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e270:	83 c4 10             	add    esp,0x10
c001e273:	31 c0                	xor    eax,eax
c001e275:	83 c4 0c             	add    esp,0xc
c001e278:	c3                   	ret    
c001e279:	90                   	nop

c001e27a <ATAPI::ATAPI()>:
c001e27a:	83 ec 0c             	sub    esp,0xc
c001e27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e281:	83 ec 04             	sub    esp,0x4
c001e284:	68 00 08 00 00       	push   0x800
c001e289:	68 2d 44 02 c0       	push   0xc002442d
c001e28e:	50                   	push   eax
c001e28f:	e8 b2 b1 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e294:	83 c4 10             	add    esp,0x10
c001e297:	ba 3c 43 02 c0       	mov    edx,0xc002433c
c001e29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a0:	89 10                	mov    DWORD PTR [eax],edx
c001e2a2:	90                   	nop
c001e2a3:	83 c4 0c             	add    esp,0xc
c001e2a6:	c3                   	ret    
c001e2a7:	90                   	nop

c001e2a8 <ATAPI::readyForCommand()>:
c001e2a8:	56                   	push   esi
c001e2a9:	53                   	push   ebx
c001e2aa:	53                   	push   ebx
c001e2ab:	31 db                	xor    ebx,ebx
c001e2ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2b1:	51                   	push   ecx
c001e2b2:	6a 0c                	push   0xc
c001e2b4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e2bb:	50                   	push   eax
c001e2bc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e2c2:	e8 69 e7 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001e2c7:	83 c4 10             	add    esp,0x10
c001e2ca:	a8 88                	test   al,0x88
c001e2cc:	74 25                	je     c001e2f3 <ATAPI::readyForCommand()+0x4b>
c001e2ce:	43                   	inc    ebx
c001e2cf:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001e2d5:	7e da                	jle    c001e2b1 <ATAPI::readyForCommand()+0x9>
c001e2d7:	83 ec 0c             	sub    esp,0xc
c001e2da:	68 5e 01 00 00       	push   0x15e
c001e2df:	e8 28 76 ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001e2ed:	75 c2                	jne    c001e2b1 <ATAPI::readyForCommand()+0x9>
c001e2ef:	31 c0                	xor    eax,eax
c001e2f1:	eb 02                	jmp    c001e2f5 <ATAPI::readyForCommand()+0x4d>
c001e2f3:	b0 01                	mov    al,0x1
c001e2f5:	5a                   	pop    edx
c001e2f6:	5b                   	pop    ebx
c001e2f7:	5e                   	pop    esi
c001e2f8:	c3                   	ret    
c001e2f9:	90                   	nop

c001e2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001e2fa:	55                   	push   ebp
c001e2fb:	57                   	push   edi
c001e2fc:	56                   	push   esi
c001e2fd:	53                   	push   ebx
c001e2fe:	83 ec 20             	sub    esp,0x20
c001e301:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001e305:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001e309:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001e30d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e311:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e315:	6a 01                	push   0x1
c001e317:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e31e:	50                   	push   eax
c001e31f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e325:	e8 4e e8 ff ff       	call   c001cb78 <IDE::enableIRQs(unsigned char, bool)>
c001e32a:	5e                   	pop    esi
c001e32b:	58                   	pop    eax
c001e32c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e333:	50                   	push   eax
c001e334:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e33a:	e8 0b e6 ff ff       	call   c001c94a <IDE::prepareInterrupt(unsigned char)>
c001e33f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e342:	e8 61 ff ff ff       	call   c001e2a8 <ATAPI::readyForCommand()>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	84 c0                	test   al,al
c001e34c:	75 0a                	jne    c001e358 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001e34e:	bb 01 00 00 00       	mov    ebx,0x1
c001e353:	e9 60 02 00 00       	jmp    c001e5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e358:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001e35e:	c1 e0 04             	shl    eax,0x4
c001e361:	0f b6 c0             	movzx  eax,al
c001e364:	50                   	push   eax
c001e365:	6a 06                	push   0x6
c001e367:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e36e:	50                   	push   eax
c001e36f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e375:	e8 f6 e5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e37a:	6a 00                	push   0x0
c001e37c:	6a 01                	push   0x1
c001e37e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e385:	50                   	push   eax
c001e386:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e38c:	e8 df e5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e391:	83 c4 20             	add    esp,0x20
c001e394:	0f b6 c3             	movzx  eax,bl
c001e397:	0f b6 df             	movzx  ebx,bh
c001e39a:	50                   	push   eax
c001e39b:	6a 04                	push   0x4
c001e39d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3a4:	50                   	push   eax
c001e3a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3ab:	e8 c0 e5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3b0:	53                   	push   ebx
c001e3b1:	6a 05                	push   0x5
c001e3b3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3ba:	50                   	push   eax
c001e3bb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3c1:	e8 aa e5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3c6:	83 c4 20             	add    esp,0x20
c001e3c9:	68 a0 00 00 00       	push   0xa0
c001e3ce:	6a 07                	push   0x7
c001e3d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3d7:	50                   	push   eax
c001e3d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3de:	e8 8d e5 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3e3:	83 c4 0c             	add    esp,0xc
c001e3e6:	6a 01                	push   0x1
c001e3e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e3ef:	50                   	push   eax
c001e3f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e3f6:	e8 19 f3 ff ff       	call   c001d714 <IDE::polling(unsigned char, unsigned int)>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	0f b6 d8             	movzx  ebx,al
c001e401:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001e407:	85 db                	test   ebx,ebx
c001e409:	74 20                	je     c001e42b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001e40b:	53                   	push   ebx
c001e40c:	0f b6 c0             	movzx  eax,al
c001e40f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001e416:	52                   	push   edx
c001e417:	50                   	push   eax
c001e418:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e41e:	e8 37 f2 ff ff       	call   c001d65a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e423:	83 c4 10             	add    esp,0x10
c001e426:	e9 8d 01 00 00       	jmp    c001e5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e42b:	0f b6 c0             	movzx  eax,al
c001e42e:	53                   	push   ebx
c001e42f:	53                   	push   ebx
c001e430:	50                   	push   eax
c001e431:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e437:	e8 22 e5 ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001e43c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e440:	b9 06 00 00 00       	mov    ecx,0x6
c001e445:	89 c2                	mov    edx,eax
c001e447:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001e44a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001e44e:	83 c4 10             	add    esp,0x10
c001e451:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001e456:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e45a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e460:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e467:	85 db                	test   ebx,ebx
c001e469:	0f 84 ec 00 00 00    	je     c001e55b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001e46f:	51                   	push   ecx
c001e470:	51                   	push   ecx
c001e471:	52                   	push   edx
c001e472:	50                   	push   eax
c001e473:	e8 66 e6 ff ff       	call   c001cade <IDE::waitInterrupt(unsigned char)>
c001e478:	83 c4 10             	add    esp,0x10
c001e47b:	84 c0                	test   al,al
c001e47d:	0f 84 cb fe ff ff    	je     c001e34e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e483:	56                   	push   esi
c001e484:	56                   	push   esi
c001e485:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e48c:	50                   	push   eax
c001e48d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e493:	e8 b2 e4 ff ff       	call   c001c94a <IDE::prepareInterrupt(unsigned char)>
c001e498:	83 c4 0c             	add    esp,0xc
c001e49b:	6a 04                	push   0x4
c001e49d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4a4:	50                   	push   eax
c001e4a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4ab:	e8 80 e5 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001e4b0:	83 c4 0c             	add    esp,0xc
c001e4b3:	89 c6                	mov    esi,eax
c001e4b5:	6a 05                	push   0x5
c001e4b7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e4be:	50                   	push   eax
c001e4bf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e4c5:	e8 66 e5 ff ff       	call   c001ca30 <IDE::read(unsigned char, unsigned char)>
c001e4ca:	89 f1                	mov    ecx,esi
c001e4cc:	0f b6 c0             	movzx  eax,al
c001e4cf:	0f b6 f1             	movzx  esi,cl
c001e4d2:	c1 e0 08             	shl    eax,0x8
c001e4d5:	09 c6                	or     esi,eax
c001e4d7:	d1 fe                	sar    esi,1
c001e4d9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e4e5:	74 41                	je     c001e528 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001e4e7:	31 c9                	xor    ecx,ecx
c001e4e9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e4ef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e4f6:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001e4fa:	75 0a                	jne    c001e506 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001e4fc:	01 c9                	add    ecx,ecx
c001e4fe:	01 cd                	add    ebp,ecx
c001e500:	4b                   	dec    ebx
c001e501:	e9 54 ff ff ff       	jmp    c001e45a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001e506:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001e50b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e50f:	51                   	push   ecx
c001e510:	51                   	push   ecx
c001e511:	52                   	push   edx
c001e512:	50                   	push   eax
c001e513:	e8 46 e4 ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001e518:	89 c2                	mov    edx,eax
c001e51a:	89 f0                	mov    eax,esi
c001e51c:	66 ef                	out    dx,ax
c001e51e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e522:	83 c4 10             	add    esp,0x10
c001e525:	41                   	inc    ecx
c001e526:	eb c1                	jmp    c001e4e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001e528:	31 f6                	xor    esi,esi
c001e52a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001e530:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001e537:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001e53b:	75 06                	jne    c001e543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001e53d:	01 f6                	add    esi,esi
c001e53f:	01 f5                	add    ebp,esi
c001e541:	eb bd                	jmp    c001e500 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001e543:	51                   	push   ecx
c001e544:	51                   	push   ecx
c001e545:	52                   	push   edx
c001e546:	50                   	push   eax
c001e547:	e8 12 e4 ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001e54c:	89 c2                	mov    edx,eax
c001e54e:	66 ed                	in     ax,dx
c001e550:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001e555:	83 c4 10             	add    esp,0x10
c001e558:	46                   	inc    esi
c001e559:	eb cf                	jmp    c001e52a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001e55b:	51                   	push   ecx
c001e55c:	51                   	push   ecx
c001e55d:	52                   	push   edx
c001e55e:	50                   	push   eax
c001e55f:	e8 7a e5 ff ff       	call   c001cade <IDE::waitInterrupt(unsigned char)>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	84 c0                	test   al,al
c001e569:	0f 84 df fd ff ff    	je     c001e34e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001e56f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e574:	52                   	push   edx
c001e575:	52                   	push   edx
c001e576:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e57d:	50                   	push   eax
c001e57e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e584:	e8 c1 e3 ff ff       	call   c001c94a <IDE::prepareInterrupt(unsigned char)>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	50                   	push   eax
c001e58d:	50                   	push   eax
c001e58e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001e595:	50                   	push   eax
c001e596:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001e59c:	e8 bd e3 ff ff       	call   c001c95e <IDE::getBase(unsigned char)>
c001e5a1:	8d 50 07             	lea    edx,[eax+0x7]
c001e5a4:	ec                   	in     al,dx
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	a8 88                	test   al,0x88
c001e5aa:	74 0a                	je     c001e5b6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001e5ac:	4b                   	dec    ebx
c001e5ad:	75 dd                	jne    c001e58c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001e5af:	bb 02 00 00 00       	mov    ebx,0x2
c001e5b4:	eb 02                	jmp    c001e5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001e5b6:	31 db                	xor    ebx,ebx
c001e5b8:	83 c4 1c             	add    esp,0x1c
c001e5bb:	89 d8                	mov    eax,ebx
c001e5bd:	5b                   	pop    ebx
c001e5be:	5e                   	pop    esi
c001e5bf:	5f                   	pop    edi
c001e5c0:	5d                   	pop    ebp
c001e5c1:	c3                   	ret    

c001e5c2 <ATAPI::diskRemoved()>:
c001e5c2:	53                   	push   ebx
c001e5c3:	83 ec 14             	sub    esp,0x14
c001e5c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e5ca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e5d1:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e5d7:	e8 62 ba fe ff       	call   c000a03e <LogicalDisk::unmount()>
c001e5dc:	58                   	pop    eax
c001e5dd:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e5e3:	e8 f0 c3 fe ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c001e5e8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e5ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e5f2:	83 c4 18             	add    esp,0x18
c001e5f5:	5b                   	pop    ebx
c001e5f6:	e9 cd c3 fe ff       	jmp    c000a9c8 <VCache::invalidateReadBuffer()>
c001e5fb:	90                   	nop

c001e5fc <ATAPI::eject()>:
c001e5fc:	57                   	push   edi
c001e5fd:	b9 03 00 00 00       	mov    ecx,0x3
c001e602:	53                   	push   ebx
c001e603:	83 ec 14             	sub    esp,0x14
c001e606:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e60a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e60e:	fc                   	cld    
c001e60f:	31 c0                	xor    eax,eax
c001e611:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e613:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e618:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e61d:	50                   	push   eax
c001e61e:	50                   	push   eax
c001e61f:	6a 00                	push   0x0
c001e621:	6a 00                	push   0x0
c001e623:	6a 00                	push   0x0
c001e625:	6a 02                	push   0x2
c001e627:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e62b:	50                   	push   eax
c001e62c:	53                   	push   ebx
c001e62d:	e8 c8 fc ff ff       	call   c001e2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e632:	83 c4 14             	add    esp,0x14
c001e635:	53                   	push   ebx
c001e636:	e8 87 ff ff ff       	call   c001e5c2 <ATAPI::diskRemoved()>
c001e63b:	83 c4 24             	add    esp,0x24
c001e63e:	31 c0                	xor    eax,eax
c001e640:	5b                   	pop    ebx
c001e641:	5f                   	pop    edi
c001e642:	c3                   	ret    
c001e643:	90                   	nop

c001e644 <ATAPI::diskInserted()>:
c001e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e648:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e64f:	c3                   	ret    

c001e650 <ATAPI::detectMedia()>:
c001e650:	56                   	push   esi
c001e651:	53                   	push   ebx
c001e652:	83 ec 28             	sub    esp,0x28
c001e655:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e659:	6a 0c                	push   0xc
c001e65b:	6a 00                	push   0x0
c001e65d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e661:	56                   	push   esi
c001e662:	e8 89 1e fe ff       	call   c00004f0 <memset>
c001e667:	58                   	pop    eax
c001e668:	5a                   	pop    edx
c001e669:	6a 00                	push   0x0
c001e66b:	6a 00                	push   0x0
c001e66d:	6a 00                	push   0x0
c001e66f:	6a 00                	push   0x0
c001e671:	56                   	push   esi
c001e672:	53                   	push   ebx
c001e673:	e8 82 fc ff ff       	call   c001e2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e678:	83 c4 1c             	add    esp,0x1c
c001e67b:	6a 0c                	push   0xc
c001e67d:	6a 00                	push   0x0
c001e67f:	56                   	push   esi
c001e680:	e8 6b 1e fe ff       	call   c00004f0 <memset>
c001e685:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e68a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e68f:	59                   	pop    ecx
c001e690:	58                   	pop    eax
c001e691:	6a 01                	push   0x1
c001e693:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e697:	50                   	push   eax
c001e698:	6a 00                	push   0x0
c001e69a:	6a 12                	push   0x12
c001e69c:	56                   	push   esi
c001e69d:	53                   	push   ebx
c001e69e:	e8 57 fc ff ff       	call   c001e2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e6a3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e6a7:	83 c4 20             	add    esp,0x20
c001e6aa:	83 e0 7f             	and    eax,0x7f
c001e6ad:	83 f8 70             	cmp    eax,0x70
c001e6b0:	74 15                	je     c001e6c7 <ATAPI::detectMedia()+0x77>
c001e6b2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e6b9:	75 0c                	jne    c001e6c7 <ATAPI::detectMedia()+0x77>
c001e6bb:	83 ec 0c             	sub    esp,0xc
c001e6be:	53                   	push   ebx
c001e6bf:	e8 80 ff ff ff       	call   c001e644 <ATAPI::diskInserted()>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e6cb:	83 e0 0f             	and    eax,0xf
c001e6ce:	83 f8 02             	cmp    eax,0x2
c001e6d1:	75 1b                	jne    c001e6ee <ATAPI::detectMedia()+0x9e>
c001e6d3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e6d8:	75 2d                	jne    c001e707 <ATAPI::detectMedia()+0xb7>
c001e6da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e6e1:	74 24                	je     c001e707 <ATAPI::detectMedia()+0xb7>
c001e6e3:	83 ec 0c             	sub    esp,0xc
c001e6e6:	53                   	push   ebx
c001e6e7:	e8 d6 fe ff ff       	call   c001e5c2 <ATAPI::diskRemoved()>
c001e6ec:	eb 16                	jmp    c001e704 <ATAPI::detectMedia()+0xb4>
c001e6ee:	85 c0                	test   eax,eax
c001e6f0:	75 15                	jne    c001e707 <ATAPI::detectMedia()+0xb7>
c001e6f2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e6f9:	75 0c                	jne    c001e707 <ATAPI::detectMedia()+0xb7>
c001e6fb:	83 ec 0c             	sub    esp,0xc
c001e6fe:	53                   	push   ebx
c001e6ff:	e8 40 ff ff ff       	call   c001e644 <ATAPI::diskInserted()>
c001e704:	83 c4 10             	add    esp,0x10
c001e707:	83 c4 24             	add    esp,0x24
c001e70a:	5b                   	pop    ebx
c001e70b:	5e                   	pop    esi
c001e70c:	c3                   	ret    
c001e70d:	90                   	nop

c001e70e <ATAPI::open(int, int, void*)>:
c001e70e:	56                   	push   esi
c001e70f:	53                   	push   ebx
c001e710:	50                   	push   eax
c001e711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e715:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e71d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e723:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e729:	c1 e0 06             	shl    eax,0x6
c001e72c:	01 d0                	add    eax,edx
c001e72e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e735:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e73b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e742:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e74c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e752:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e759:	6a 04                	push   0x4
c001e75b:	6a 0c                	push   0xc
c001e75d:	51                   	push   ecx
c001e75e:	52                   	push   edx
c001e75f:	e8 0c e2 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e764:	90                   	nop
c001e765:	90                   	nop
c001e766:	6a 00                	push   0x0
c001e768:	6a 0c                	push   0xc
c001e76a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e771:	50                   	push   eax
c001e772:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e778:	e8 f3 e1 ff ff       	call   c001c970 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e77d:	83 c4 14             	add    esp,0x14
c001e780:	68 78 01 00 00       	push   0x178
c001e785:	e8 d5 01 ff ff       	call   c000e95f <malloc>
c001e78a:	83 c4 0c             	add    esp,0xc
c001e78d:	89 c6                	mov    esi,eax
c001e78f:	6a 00                	push   0x0
c001e791:	68 ff ff ff 7f       	push   0x7fffffff
c001e796:	6a 00                	push   0x0
c001e798:	6a 00                	push   0x0
c001e79a:	53                   	push   ebx
c001e79b:	68 df 44 02 c0       	push   0xc00244df
c001e7a0:	50                   	push   eax
c001e7a1:	e8 d6 b6 fe ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7a6:	83 c4 14             	add    esp,0x14
c001e7a9:	56                   	push   esi
c001e7aa:	e8 8d b7 fe ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c001e7af:	5a                   	pop    edx
c001e7b0:	0f be c0             	movsx  eax,al
c001e7b3:	59                   	pop    ecx
c001e7b4:	50                   	push   eax
c001e7b5:	68 24 43 02 c0       	push   0xc0024324
c001e7ba:	e8 a5 87 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e7bf:	58                   	pop    eax
c001e7c0:	5a                   	pop    edx
c001e7c1:	56                   	push   esi
c001e7c2:	53                   	push   ebx
c001e7c3:	e8 9a a8 fe ff       	call   c0009062 <Device::addChild(Device*)>
c001e7c8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e7ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7d1:	e8 d8 ac fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001e7d6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e7dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7e0:	e8 6b fe ff ff       	call   c001e650 <ATAPI::detectMedia()>
c001e7e5:	83 c4 14             	add    esp,0x14
c001e7e8:	31 c0                	xor    eax,eax
c001e7ea:	5b                   	pop    ebx
c001e7eb:	5e                   	pop    esi
c001e7ec:	c3                   	ret    
c001e7ed:	90                   	nop

c001e7ee <ATAPI::read(unsigned long long, int, void*)>:
c001e7ee:	55                   	push   ebp
c001e7ef:	57                   	push   edi
c001e7f0:	56                   	push   esi
c001e7f1:	53                   	push   ebx
c001e7f2:	83 ec 1c             	sub    esp,0x1c
c001e7f5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e7f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e7fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e801:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e808:	74 3c                	je     c001e846 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e80a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e80e:	b9 03 00 00 00       	mov    ecx,0x3
c001e813:	fc                   	cld    
c001e814:	31 c0                	xor    eax,eax
c001e816:	0f ce                	bswap  esi
c001e818:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e81a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e81f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e823:	89 e8                	mov    eax,ebp
c001e825:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e829:	50                   	push   eax
c001e82a:	50                   	push   eax
c001e82b:	55                   	push   ebp
c001e82c:	c1 e5 0b             	shl    ebp,0xb
c001e82f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e833:	6a 00                	push   0x0
c001e835:	55                   	push   ebp
c001e836:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e83a:	50                   	push   eax
c001e83b:	53                   	push   ebx
c001e83c:	e8 b9 fa ff ff       	call   c001e2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e841:	83 c4 20             	add    esp,0x20
c001e844:	eb 1a                	jmp    c001e860 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e846:	83 ec 0c             	sub    esp,0xc
c001e849:	53                   	push   ebx
c001e84a:	e8 01 fe ff ff       	call   c001e650 <ATAPI::detectMedia()>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e859:	75 af                	jne    c001e80a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e85b:	b8 02 00 00 00       	mov    eax,0x2
c001e860:	83 c4 1c             	add    esp,0x1c
c001e863:	5b                   	pop    ebx
c001e864:	5e                   	pop    esi
c001e865:	5f                   	pop    edi
c001e866:	5d                   	pop    ebp
c001e867:	c3                   	ret    

c001e868 <SATA::close(int, int, void*)>:
c001e868:	83 ec 0c             	sub    esp,0xc
c001e86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e86f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e875:	85 c0                	test   eax,eax
c001e877:	74 0c                	je     c001e885 <SATA::close(int, int, void*)+0x1d>
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e87e:	50                   	push   eax
c001e87f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e882:	83 c4 10             	add    esp,0x10
c001e885:	31 c0                	xor    eax,eax
c001e887:	83 c4 0c             	add    esp,0xc
c001e88a:	c3                   	ret    
c001e88b:	90                   	nop

c001e88c <SATA::powerSaving(PowerSavingLevel)>:
c001e88c:	c3                   	ret    
c001e88d:	90                   	nop

c001e88e <SATA::open(int, int, void*)>:
c001e88e:	56                   	push   esi
c001e88f:	53                   	push   ebx
c001e890:	83 ec 10             	sub    esp,0x10
c001e893:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e897:	68 6c 43 02 c0       	push   0xc002436c
c001e89c:	e8 c3 86 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e8a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e8a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e8af:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e8b5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e8bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e8c3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e8cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e8d3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e8da:	e8 bb 05 ff ff       	call   c000ee9a <Phys::allocatePage()>
c001e8df:	89 c6                	mov    esi,eax
c001e8e1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e8e7:	81 c6 00 10 00 00    	add    esi,0x1000
c001e8ed:	e8 a8 05 ff ff       	call   c000ee9a <Phys::allocatePage()>
c001e8f2:	83 c4 10             	add    esp,0x10
c001e8f5:	39 c6                	cmp    esi,eax
c001e8f7:	74 10                	je     c001e909 <SATA::open(int, int, void*)+0x7b>
c001e8f9:	83 ec 0c             	sub    esp,0xc
c001e8fc:	68 78 43 02 c0       	push   0xc0024378
c001e901:	e8 a0 03 ff ff       	call   c000eca6 <KePanic(char const*)>
c001e906:	83 c4 10             	add    esp,0x10
c001e909:	83 ec 0c             	sub    esp,0xc
c001e90c:	6a 02                	push   0x2
c001e90e:	e8 c6 37 ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001e913:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e919:	6a 03                	push   0x3
c001e91b:	50                   	push   eax
c001e91c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e922:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001e928:	e8 8f 3e ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001e92d:	83 c4 14             	add    esp,0x14
c001e930:	53                   	push   ebx
c001e931:	e8 78 ab fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001e936:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e939:	e8 10 ba fe ff       	call   c000a34e <createPartitionsForDisk(PhysicalDisk*)>
c001e93e:	83 c4 14             	add    esp,0x14
c001e941:	31 c0                	xor    eax,eax
c001e943:	5b                   	pop    ebx
c001e944:	5e                   	pop    esi
c001e945:	c3                   	ret    

c001e946 <SATA::SATA()>:
c001e946:	83 ec 0c             	sub    esp,0xc
c001e949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94d:	83 ec 04             	sub    esp,0x4
c001e950:	68 00 02 00 00       	push   0x200
c001e955:	68 8c 43 02 c0       	push   0xc002438c
c001e95a:	50                   	push   eax
c001e95b:	e8 e6 aa fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e960:	83 c4 10             	add    esp,0x10
c001e963:	ba fc 43 02 c0       	mov    edx,0xc00243fc
c001e968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96c:	89 10                	mov    DWORD PTR [eax],edx
c001e96e:	90                   	nop
c001e96f:	83 c4 0c             	add    esp,0xc
c001e972:	c3                   	ret    
c001e973:	90                   	nop

c001e974 <SATA::access(unsigned long long, int, void*, bool)>:
c001e974:	55                   	push   ebp
c001e975:	57                   	push   edi
c001e976:	56                   	push   esi
c001e977:	53                   	push   ebx
c001e978:	83 ec 2c             	sub    esp,0x2c
c001e97b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e97f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e983:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e987:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e98b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e98f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e993:	fa                   	cli    
c001e994:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c001e99a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e99f:	7e 10                	jle    c001e9b1 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 9c 43 02 c0       	push   0xc002439c
c001e9a9:	e8 f8 02 ff ff       	call   c000eca6 <KePanic(char const*)>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e9b7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e9bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9c7:	89 d0                	mov    eax,edx
c001e9c9:	c1 e0 07             	shl    eax,0x7
c001e9cc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e9d0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e9da:	51                   	push   ecx
c001e9db:	8d 42 02             	lea    eax,[edx+0x2]
c001e9de:	51                   	push   ecx
c001e9df:	c1 e0 07             	shl    eax,0x7
c001e9e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e9e6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e9ea:	50                   	push   eax
c001e9eb:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e9f1:	e8 fe ed ff ff       	call   c001d7f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e9f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e9fa:	83 c4 10             	add    esp,0x10
c001e9fd:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ea02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea06:	0f 84 a4 01 00 00    	je     c001ebb0 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001ea0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ea10:	c1 e0 09             	shl    eax,0x9
c001ea13:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ea18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ea1c:	74 0e                	je     c001ea2c <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001ea1e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ea24:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ea28:	89 c1                	mov    ecx,eax
c001ea2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea2c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ea32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ea36:	8d 42 02             	lea    eax,[edx+0x2]
c001ea39:	c1 e0 07             	shl    eax,0x7
c001ea3c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ea40:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea42:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ea48:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ea4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea52:	c1 e1 05             	shl    ecx,0x5
c001ea55:	01 c8                	add    eax,ecx
c001ea57:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea5b:	83 e1 01             	and    ecx,0x1
c001ea5e:	89 ce                	mov    esi,ecx
c001ea60:	8a 08                	mov    cl,BYTE PTR [eax]
c001ea62:	c1 e6 06             	shl    esi,0x6
c001ea65:	83 e1 bf             	and    ecx,0xffffffbf
c001ea68:	09 f1                	or     ecx,esi
c001ea6a:	88 08                	mov    BYTE PTR [eax],cl
c001ea6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ea6e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ea74:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ea7a:	89 08                	mov    DWORD PTR [eax],ecx
c001ea7c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ea82:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ea88:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ea8e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ea91:	50                   	push   eax
c001ea92:	68 90 00 00 00       	push   0x90
c001ea97:	6a 00                	push   0x0
c001ea99:	56                   	push   esi
c001ea9a:	e8 51 1a fe ff       	call   c00004f0 <memset>
c001ea9f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001eaa5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001eaab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eaaf:	83 c4 10             	add    esp,0x10
c001eab2:	48                   	dec    eax
c001eab3:	25 ff ff 3f 00       	and    eax,0x3fffff
c001eab8:	89 c1                	mov    ecx,eax
c001eaba:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001eac0:	25 00 00 c0 ff       	and    eax,0xffc00000
c001eac5:	09 c8                	or     eax,ecx
c001eac7:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001eacd:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ead3:	83 c8 80             	or     eax,0xffffff80
c001ead6:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001eadc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eadf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eae3:	25 00 7f 00 00       	and    eax,0x7f00
c001eae8:	0d 27 80 ff ff       	or     eax,0xffff8027
c001eaed:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001eaf2:	66 89 06             	mov    WORD PTR [esi],ax
c001eaf5:	b0 35                	mov    al,0x35
c001eaf7:	75 02                	jne    c001eafb <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001eaf9:	b0 25                	mov    al,0x25
c001eafb:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001eafe:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001eb02:	89 e8                	mov    eax,ebp
c001eb04:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001eb08:	c1 e8 10             	shr    eax,0x10
c001eb0b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001eb0e:	89 e8                	mov    eax,ebp
c001eb10:	c1 e8 18             	shr    eax,0x18
c001eb13:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001eb16:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001eb1a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001eb1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb21:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001eb24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001eb28:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001eb2c:	89 d6                	mov    esi,edx
c001eb2e:	31 c0                	xor    eax,eax
c001eb30:	c1 e6 07             	shl    esi,0x7
c001eb33:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001eb37:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001eb3d:	80 e1 88             	and    cl,0x88
c001eb40:	74 0a                	je     c001eb4c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001eb42:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eb47:	74 0a                	je     c001eb53 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001eb49:	40                   	inc    eax
c001eb4a:	eb eb                	jmp    c001eb37 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001eb4c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eb51:	75 0a                	jne    c001eb5d <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001eb53:	83 ec 0c             	sub    esp,0xc
c001eb56:	68 d5 43 02 c0       	push   0xc00243d5
c001eb5b:	eb 36                	jmp    c001eb93 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001eb5d:	b8 01 00 00 00       	mov    eax,0x1
c001eb62:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001eb66:	c1 e2 07             	shl    edx,0x7
c001eb69:	d3 e0                	shl    eax,cl
c001eb6b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001eb6f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001eb75:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001eb7b:	85 c8                	test   eax,ecx
c001eb7d:	74 25                	je     c001eba4 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001eb7f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001eb85:	0f ba e1 1e          	bt     ecx,0x1e
c001eb89:	73 ea                	jae    c001eb75 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001eb8b:	83 ec 0c             	sub    esp,0xc
c001eb8e:	68 e3 43 02 c0       	push   0xc00243e3
c001eb93:	e8 cc 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb98:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001eb9f:	83 c4 10             	add    esp,0x10
c001eba2:	eb 13                	jmp    c001ebb7 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001eba4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ebaa:	0f ba e0 1e          	bt     eax,0x1e
c001ebae:	73 18                	jae    c001ebc8 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001ebb0:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ebb7:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c001ebbe:	75 01                	jne    c001ebc1 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001ebc0:	fb                   	sti    
c001ebc1:	b8 01 00 00 00       	mov    eax,0x1
c001ebc6:	eb 2c                	jmp    c001ebf4 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ebc8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ebcd:	75 10                	jne    c001ebdf <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001ebcf:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ebd5:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ebd9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ebdd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ebdf:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c001ebe6:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c001ebeb:	85 c0                	test   eax,eax
c001ebed:	75 03                	jne    c001ebf2 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001ebef:	fb                   	sti    
c001ebf0:	eb 02                	jmp    c001ebf4 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001ebf2:	31 c0                	xor    eax,eax
c001ebf4:	83 c4 2c             	add    esp,0x2c
c001ebf7:	5b                   	pop    ebx
c001ebf8:	5e                   	pop    esi
c001ebf9:	5f                   	pop    edi
c001ebfa:	5d                   	pop    ebp
c001ebfb:	c3                   	ret    

c001ebfc <SATA::read(unsigned long long, int, void*)>:
c001ebfc:	57                   	push   edi
c001ebfd:	b8 04 00 00 00       	mov    eax,0x4
c001ec02:	56                   	push   esi
c001ec03:	53                   	push   ebx
c001ec04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ec08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ec0c:	8d 7a ff             	lea    edi,[edx-0x1]
c001ec0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ec13:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ec17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ec1d:	77 25                	ja     c001ec44 <SATA::read(unsigned long long, int, void*)+0x48>
c001ec1f:	b8 06 00 00 00       	mov    eax,0x6
c001ec24:	85 f6                	test   esi,esi
c001ec26:	74 1c                	je     c001ec44 <SATA::read(unsigned long long, int, void*)+0x48>
c001ec28:	50                   	push   eax
c001ec29:	50                   	push   eax
c001ec2a:	6a 00                	push   0x0
c001ec2c:	56                   	push   esi
c001ec2d:	52                   	push   edx
c001ec2e:	53                   	push   ebx
c001ec2f:	51                   	push   ecx
c001ec30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ec34:	e8 3b fd ff ff       	call   c001e974 <SATA::access(unsigned long long, int, void*, bool)>
c001ec39:	83 c4 20             	add    esp,0x20
c001ec3c:	85 c0                	test   eax,eax
c001ec3e:	0f 95 c0             	setne  al
c001ec41:	0f b6 c0             	movzx  eax,al
c001ec44:	5b                   	pop    ebx
c001ec45:	5e                   	pop    esi
c001ec46:	5f                   	pop    edi
c001ec47:	c3                   	ret    

c001ec48 <SATA::write(unsigned long long, int, void*)>:
c001ec48:	55                   	push   ebp
c001ec49:	b8 04 00 00 00       	mov    eax,0x4
c001ec4e:	57                   	push   edi
c001ec4f:	56                   	push   esi
c001ec50:	53                   	push   ebx
c001ec51:	83 ec 0c             	sub    esp,0xc
c001ec54:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ec58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ec5c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ec5f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ec63:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ec67:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ec6d:	77 3d                	ja     c001ecac <SATA::write(unsigned long long, int, void*)+0x64>
c001ec6f:	b8 06 00 00 00       	mov    eax,0x6
c001ec74:	85 ed                	test   ebp,ebp
c001ec76:	74 34                	je     c001ecac <SATA::write(unsigned long long, int, void*)+0x64>
c001ec78:	c1 e3 09             	shl    ebx,0x9
c001ec7b:	01 eb                	add    ebx,ebp
c001ec7d:	89 d6                	mov    esi,edx
c001ec7f:	89 cf                	mov    edi,ecx
c001ec81:	83 c6 01             	add    esi,0x1
c001ec84:	83 d7 00             	adc    edi,0x0
c001ec87:	50                   	push   eax
c001ec88:	50                   	push   eax
c001ec89:	6a 01                	push   0x1
c001ec8b:	55                   	push   ebp
c001ec8c:	81 c5 00 02 00 00    	add    ebp,0x200
c001ec92:	6a 01                	push   0x1
c001ec94:	51                   	push   ecx
c001ec95:	52                   	push   edx
c001ec96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ec9a:	e8 d5 fc ff ff       	call   c001e974 <SATA::access(unsigned long long, int, void*, bool)>
c001ec9f:	83 c4 20             	add    esp,0x20
c001eca2:	89 f2                	mov    edx,esi
c001eca4:	89 f9                	mov    ecx,edi
c001eca6:	39 dd                	cmp    ebp,ebx
c001eca8:	75 d3                	jne    c001ec7d <SATA::write(unsigned long long, int, void*)+0x35>
c001ecaa:	31 c0                	xor    eax,eax
c001ecac:	83 c4 0c             	add    esp,0xc
c001ecaf:	5b                   	pop    ebx
c001ecb0:	5e                   	pop    esi
c001ecb1:	5f                   	pop    edi
c001ecb2:	5d                   	pop    ebp
c001ecb3:	c3                   	ret    

c001ecb4 <SATAPI::write(unsigned long long, int, void*)>:
c001ecb4:	b8 03 00 00 00       	mov    eax,0x3
c001ecb9:	c3                   	ret    

c001ecba <SATAPI::close(int, int, void*)>:
c001ecba:	83 ec 0c             	sub    esp,0xc
c001ecbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ecc7:	85 c0                	test   eax,eax
c001ecc9:	74 0c                	je     c001ecd7 <SATAPI::close(int, int, void*)+0x1d>
c001eccb:	83 ec 0c             	sub    esp,0xc
c001ecce:	8b 10                	mov    edx,DWORD PTR [eax]
c001ecd0:	50                   	push   eax
c001ecd1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ecd4:	83 c4 10             	add    esp,0x10
c001ecd7:	31 c0                	xor    eax,eax
c001ecd9:	83 c4 0c             	add    esp,0xc
c001ecdc:	c3                   	ret    
c001ecdd:	90                   	nop

c001ecde <SATAPI::SATAPI()>:
c001ecde:	83 ec 0c             	sub    esp,0xc
c001ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece5:	83 ec 04             	sub    esp,0x4
c001ece8:	68 00 08 00 00       	push   0x800
c001eced:	68 2c 44 02 c0       	push   0xc002442c
c001ecf2:	50                   	push   eax
c001ecf3:	e8 4e a7 fe ff       	call   c0009446 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ecf8:	83 c4 10             	add    esp,0x10
c001ecfb:	ba 20 45 02 c0       	mov    edx,0xc0024520
c001ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed04:	89 10                	mov    DWORD PTR [eax],edx
c001ed06:	90                   	nop
c001ed07:	83 c4 0c             	add    esp,0xc
c001ed0a:	c3                   	ret    
c001ed0b:	90                   	nop

c001ed0c <SATAPI::diskRemoved()>:
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <SATAPI::diskInserted()>:
c001ed0e:	83 ec 18             	sub    esp,0x18
c001ed11:	68 38 44 02 c0       	push   0xc0024438
c001ed16:	e8 49 82 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ed1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed1f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ed26:	83 c4 1c             	add    esp,0x1c
c001ed29:	c3                   	ret    

c001ed2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ed2a:	55                   	push   ebp
c001ed2b:	57                   	push   edi
c001ed2c:	56                   	push   esi
c001ed2d:	53                   	push   ebx
c001ed2e:	83 ec 34             	sub    esp,0x34
c001ed31:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ed35:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ed39:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ed3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ed41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ed45:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ed4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ed51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ed55:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001ed5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ed5f:	83 c0 02             	add    eax,0x2
c001ed62:	c1 e0 07             	shl    eax,0x7
c001ed65:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ed69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed71:	c1 e0 07             	shl    eax,0x7
c001ed74:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ed78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ed7c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ed86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ed8a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ed90:	e8 5f ea ff ff       	call   c001d7f4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ed95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ed99:	83 c4 10             	add    esp,0x10
c001ed9c:	b8 01 00 00 00       	mov    eax,0x1
c001eda1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001eda6:	0f 84 53 02 00 00    	je     c001efff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001edac:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001edb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001edbe:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001edc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edc8:	c1 e1 05             	shl    ecx,0x5
c001edcb:	01 c8                	add    eax,ecx
c001edcd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001edcf:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001edd5:	81 c9 25 00 01 00    	or     ecx,0x10025
c001eddb:	89 08                	mov    DWORD PTR [eax],ecx
c001eddd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ede3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ede9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001edef:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001edf2:	8d 7b 40             	lea    edi,[ebx+0x40]
c001edf5:	50                   	push   eax
c001edf6:	68 90 00 00 00       	push   0x90
c001edfb:	6a 00                	push   0x0
c001edfd:	53                   	push   ebx
c001edfe:	e8 ed 16 fe ff       	call   c00004f0 <memset>
c001ee03:	b9 0c 00 00 00       	mov    ecx,0xc
c001ee08:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ee0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ee0e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ee14:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ee18:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ee1e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ee22:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ee26:	48                   	dec    eax
c001ee27:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ee2c:	89 c1                	mov    ecx,eax
c001ee2e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ee34:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ee39:	09 c8                	or     eax,ecx
c001ee3b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ee41:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001ee47:	83 c8 80             	or     eax,0xffffff80
c001ee4a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001ee50:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ee53:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ee57:	25 00 7f 00 00       	and    eax,0x7f00
c001ee5c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ee60:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ee65:	66 89 03             	mov    WORD PTR [ebx],ax
c001ee68:	89 d0                	mov    eax,edx
c001ee6a:	c1 ea 18             	shr    edx,0x18
c001ee6d:	c1 e8 10             	shr    eax,0x10
c001ee70:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ee73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ee76:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ee7a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ee7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee81:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ee84:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ee88:	83 c4 10             	add    esp,0x10
c001ee8b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ee8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee93:	31 c0                	xor    eax,eax
c001ee95:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ee9b:	80 e1 88             	and    cl,0x88
c001ee9e:	74 0a                	je     c001eeaa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001eea0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eea5:	74 0a                	je     c001eeb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001eea7:	40                   	inc    eax
c001eea8:	eb eb                	jmp    c001ee95 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001eeaa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001eeaf:	75 43                	jne    c001eef4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001eeb1:	83 ec 0c             	sub    esp,0xc
c001eeb4:	68 50 44 02 c0       	push   0xc0024450
c001eeb9:	e8 a6 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eebe:	58                   	pop    eax
c001eebf:	5a                   	pop    edx
c001eec0:	68 65 44 02 c0       	push   0xc0024465
c001eec5:	ff 35 34 ce 02 c0    	push   DWORD PTR ds:0xc002ce34
c001eecb:	e8 d4 25 ff ff       	call   c00114a4 <VgaText::puts(char const*)>
c001eed0:	59                   	pop    ecx
c001eed1:	5b                   	pop    ebx
c001eed2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eed6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001eedc:	e8 ad e9 ff ff       	call   c001d88e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001eee1:	5e                   	pop    esi
c001eee2:	5f                   	pop    edi
c001eee3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001eee7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001eeed:	e8 7c e9 ff ff       	call   c001d86e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001eef2:	eb 48                	jmp    c001ef3c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001eef4:	be 01 00 00 00       	mov    esi,0x1
c001eef9:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001eefd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ef01:	d3 e6                	shl    esi,cl
c001ef03:	c1 e7 07             	shl    edi,0x7
c001ef06:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ef0c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ef11:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ef15:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ef1b:	85 c6                	test   esi,eax
c001ef1d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ef23:	0f 84 a3 00 00 00    	je     c001efcc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001ef29:	0f ba e0 1e          	bt     eax,0x1e
c001ef2d:	73 1a                	jae    c001ef49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	68 77 44 02 c0       	push   0xc0024477
c001ef37:	e8 28 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ef3c:	83 c4 10             	add    esp,0x10
c001ef3f:	b8 01 00 00 00       	mov    eax,0x1
c001ef44:	e9 b6 00 00 00       	jmp    c001efff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ef49:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ef4f:	83 f8 0d             	cmp    eax,0xd
c001ef52:	77 0a                	ja     c001ef5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001ef54:	83 ec 0c             	sub    esp,0xc
c001ef57:	68 c8 00 00 00       	push   0xc8
c001ef5c:	eb 28                	jmp    c001ef86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ef5e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ef64:	83 f8 0d             	cmp    eax,0xd
c001ef67:	77 0a                	ja     c001ef73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001ef69:	83 ec 0c             	sub    esp,0xc
c001ef6c:	68 58 02 00 00       	push   0x258
c001ef71:	eb 13                	jmp    c001ef86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001ef73:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ef79:	83 f8 06             	cmp    eax,0x6
c001ef7c:	77 10                	ja     c001ef8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	68 dc 05 00 00       	push   0x5dc
c001ef86:	e8 81 69 ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001ef8b:	83 c4 10             	add    esp,0x10
c001ef8e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ef92:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ef95:	75 06                	jne    c001ef9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001ef97:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ef9b:	74 15                	je     c001efb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001ef9d:	83 fb 06             	cmp    ebx,0x6
c001efa0:	77 10                	ja     c001efb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001efa2:	83 ec 0c             	sub    esp,0xc
c001efa5:	68 c4 09 00 00       	push   0x9c4
c001efaa:	e8 5d 69 ff ff       	call   c001590c <milliTenthSleep(unsigned int)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	43                   	inc    ebx
c001efb3:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001efb9:	0f 85 56 ff ff ff    	jne    c001ef15 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001efbf:	83 ec 0c             	sub    esp,0xc
c001efc2:	68 8a 44 02 c0       	push   0xc002448a
c001efc7:	e9 6b ff ff ff       	jmp    c001ef37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001efcc:	0f ba e0 1e          	bt     eax,0x1e
c001efd0:	73 0d                	jae    c001efdf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	68 9e 44 02 c0       	push   0xc002449e
c001efda:	e9 58 ff ff ff       	jmp    c001ef37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001efdf:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001efe4:	74 17                	je     c001effd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001efe6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001efeb:	74 10                	je     c001effd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001efed:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001eff3:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001eff7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001effb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001effd:	31 c0                	xor    eax,eax
c001efff:	83 c4 2c             	add    esp,0x2c
c001f002:	5b                   	pop    ebx
c001f003:	5e                   	pop    esi
c001f004:	5f                   	pop    edi
c001f005:	5d                   	pop    ebp
c001f006:	c3                   	ret    
c001f007:	90                   	nop

c001f008 <SATAPI::eject()>:
c001f008:	57                   	push   edi
c001f009:	b9 03 00 00 00       	mov    ecx,0x3
c001f00e:	83 ec 18             	sub    esp,0x18
c001f011:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f015:	fc                   	cld    
c001f016:	31 c0                	xor    eax,eax
c001f018:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f01a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f01f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f024:	50                   	push   eax
c001f025:	6a 00                	push   0x0
c001f027:	6a 00                	push   0x0
c001f029:	6a 00                	push   0x0
c001f02b:	6a 00                	push   0x0
c001f02d:	6a 02                	push   0x2
c001f02f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f033:	50                   	push   eax
c001f034:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f038:	e8 ed fc ff ff       	call   c001ed2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f03d:	31 c0                	xor    eax,eax
c001f03f:	83 c4 38             	add    esp,0x38
c001f042:	5f                   	pop    edi
c001f043:	c3                   	ret    

c001f044 <SATAPI::detectMedia()>:
c001f044:	53                   	push   ebx
c001f045:	83 ec 14             	sub    esp,0x14
c001f048:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f04c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f052:	e8 81 b9 fe ff       	call   c000a9d8 <VCache::writeWriteBuffer()>
c001f057:	59                   	pop    ecx
c001f058:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f05e:	e8 65 b9 fe ff       	call   c000a9c8 <VCache::invalidateReadBuffer()>
c001f063:	c7 04 24 b3 44 02 c0 	mov    DWORD PTR [esp],0xc00244b3
c001f06a:	e8 f5 7e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f06f:	83 c4 10             	add    esp,0x10
c001f072:	31 c0                	xor    eax,eax
c001f074:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001f07b:	85 d2                	test   edx,edx
c001f07d:	74 0f                	je     c001f08e <SATAPI::detectMedia()+0x4a>
c001f07f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001f085:	75 07                	jne    c001f08e <SATAPI::detectMedia()+0x4a>
c001f087:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001f08e:	40                   	inc    eax
c001f08f:	83 f8 1a             	cmp    eax,0x1a
c001f092:	75 e0                	jne    c001f074 <SATAPI::detectMedia()+0x30>
c001f094:	83 c4 08             	add    esp,0x8
c001f097:	5b                   	pop    ebx
c001f098:	c3                   	ret    
c001f099:	90                   	nop

c001f09a <SATAPI::open(int, int, void*)>:
c001f09a:	56                   	push   esi
c001f09b:	53                   	push   ebx
c001f09c:	51                   	push   ecx
c001f09d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0a5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f0af:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f0b5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f0bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0c3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f0cd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f0d3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f0da:	e8 bb fd fe ff       	call   c000ee9a <Phys::allocatePage()>
c001f0df:	89 c6                	mov    esi,eax
c001f0e1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f0e7:	81 c6 00 10 00 00    	add    esi,0x1000
c001f0ed:	e8 a8 fd fe ff       	call   c000ee9a <Phys::allocatePage()>
c001f0f2:	39 c6                	cmp    esi,eax
c001f0f4:	74 10                	je     c001f106 <SATAPI::open(int, int, void*)+0x6c>
c001f0f6:	83 ec 0c             	sub    esp,0xc
c001f0f9:	68 c8 44 02 c0       	push   0xc00244c8
c001f0fe:	e8 a3 fb fe ff       	call   c000eca6 <KePanic(char const*)>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	83 ec 0c             	sub    esp,0xc
c001f109:	6a 02                	push   0x2
c001f10b:	e8 c9 2f ff ff       	call   c00120d9 <Virt::allocateKernelVirtualPages(int)>
c001f110:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f116:	6a 03                	push   0x3
c001f118:	50                   	push   eax
c001f119:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f11f:	ff 35 d0 ce 02 c0    	push   DWORD PTR ds:0xc002ced0
c001f125:	e8 92 36 ff ff       	call   c00127bc <VAS::mapPage(unsigned long, unsigned long, int)>
c001f12a:	83 c4 14             	add    esp,0x14
c001f12d:	68 78 01 00 00       	push   0x178
c001f132:	e8 28 f8 fe ff       	call   c000e95f <malloc>
c001f137:	83 c4 0c             	add    esp,0xc
c001f13a:	89 c6                	mov    esi,eax
c001f13c:	6a 00                	push   0x0
c001f13e:	68 ff ff ff 7f       	push   0x7fffffff
c001f143:	6a 00                	push   0x0
c001f145:	6a 00                	push   0x0
c001f147:	53                   	push   ebx
c001f148:	68 de 44 02 c0       	push   0xc00244de
c001f14d:	50                   	push   eax
c001f14e:	e8 29 ad fe ff       	call   c0009e7c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f153:	83 c4 14             	add    esp,0x14
c001f156:	56                   	push   esi
c001f157:	e8 e0 ad fe ff       	call   c0009f3c <LogicalDisk::assignDriveLetter()>
c001f15c:	5a                   	pop    edx
c001f15d:	0f be c0             	movsx  eax,al
c001f160:	59                   	pop    ecx
c001f161:	50                   	push   eax
c001f162:	68 24 43 02 c0       	push   0xc0024324
c001f167:	e8 f8 7d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f16c:	58                   	pop    eax
c001f16d:	5a                   	pop    edx
c001f16e:	56                   	push   esi
c001f16f:	53                   	push   ebx
c001f170:	e8 ed 9e fe ff       	call   c0009062 <Device::addChild(Device*)>
c001f175:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001f17b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f17e:	e8 2b a3 fe ff       	call   c00094ae <PhysicalDisk::startCache()>
c001f183:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f18a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f18d:	e8 b2 fe ff ff       	call   c001f044 <SATAPI::detectMedia()>
c001f192:	83 c4 14             	add    esp,0x14
c001f195:	31 c0                	xor    eax,eax
c001f197:	5b                   	pop    ebx
c001f198:	5e                   	pop    esi
c001f199:	c3                   	ret    

c001f19a <SATAPI::read(unsigned long long, int, void*)>:
c001f19a:	57                   	push   edi
c001f19b:	56                   	push   esi
c001f19c:	53                   	push   ebx
c001f19d:	83 ec 30             	sub    esp,0x30
c001f1a0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f1a4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001f1a8:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f1ac:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f1b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f1b8:	83 fe 04             	cmp    esi,0x4
c001f1bb:	7e 10                	jle    c001f1cd <SATAPI::read(unsigned long long, int, void*)+0x33>
c001f1bd:	83 ec 0c             	sub    esp,0xc
c001f1c0:	68 ec 44 02 c0       	push   0xc00244ec
c001f1c5:	e8 dc fa fe ff       	call   c000eca6 <KePanic(char const*)>
c001f1ca:	83 c4 10             	add    esp,0x10
c001f1cd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f1d3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f1d9:	51                   	push   ecx
c001f1da:	50                   	push   eax
c001f1db:	83 c0 02             	add    eax,0x2
c001f1de:	c1 e0 07             	shl    eax,0x7
c001f1e1:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001f1e7:	50                   	push   eax
c001f1e8:	52                   	push   edx
c001f1e9:	e8 ca e6 ff ff       	call   c001d8b8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f1ee:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f1f2:	b9 03 00 00 00       	mov    ecx,0x3
c001f1f7:	fc                   	cld    
c001f1f8:	31 c0                	xor    eax,eax
c001f1fa:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f1fc:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001f201:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001f206:	83 c4 0c             	add    esp,0xc
c001f209:	6a 00                	push   0x0
c001f20b:	6a 00                	push   0x0
c001f20d:	6a 00                	push   0x0
c001f20f:	6a 00                	push   0x0
c001f211:	6a 02                	push   0x2
c001f213:	8d 44 24 30          	lea    eax,[esp+0x30]
c001f217:	50                   	push   eax
c001f218:	53                   	push   ebx
c001f219:	e8 0c fb ff ff       	call   c001ed2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f21e:	83 c4 20             	add    esp,0x20
c001f221:	85 c0                	test   eax,eax
c001f223:	75 44                	jne    c001f269 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001f225:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f229:	b9 03 00 00 00       	mov    ecx,0x3
c001f22e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f230:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f234:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001f239:	0f c8                	bswap  eax
c001f23b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001f23f:	89 f0                	mov    eax,esi
c001f241:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001f245:	50                   	push   eax
c001f246:	56                   	push   esi
c001f247:	c1 e6 0b             	shl    esi,0xb
c001f24a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001f24e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f256:	56                   	push   esi
c001f257:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001f25b:	50                   	push   eax
c001f25c:	53                   	push   ebx
c001f25d:	e8 c8 fa ff ff       	call   c001ed2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f262:	83 c4 20             	add    esp,0x20
c001f265:	85 c0                	test   eax,eax
c001f267:	74 14                	je     c001f27d <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001f269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f26d:	83 ec 0c             	sub    esp,0xc
c001f270:	53                   	push   ebx
c001f271:	e8 ce fd ff ff       	call   c001f044 <SATAPI::detectMedia()>
c001f276:	83 c4 10             	add    esp,0x10
c001f279:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f27d:	83 c4 30             	add    esp,0x30
c001f280:	5b                   	pop    ebx
c001f281:	5e                   	pop    esi
c001f282:	5f                   	pop    edi
c001f283:	c3                   	ret    

c001f284 <IOAPIC::close(int, int, void*)>:
c001f284:	b8 00 00 00 00       	mov    eax,0x0
c001f289:	c3                   	ret    

c001f28a <apicGetBase()>:
c001f28a:	55                   	push   ebp
c001f28b:	89 e5                	mov    ebp,esp
c001f28d:	83 ec 08             	sub    esp,0x8
c001f290:	83 ec 0c             	sub    esp,0xc
c001f293:	68 50 45 02 c0       	push   0xc0024550
c001f298:	e8 09 fa fe ff       	call   c000eca6 <KePanic(char const*)>
c001f29d:	83 c4 10             	add    esp,0x10
c001f2a0:	b8 00 00 00 00       	mov    eax,0x0
c001f2a5:	c9                   	leave  
c001f2a6:	c3                   	ret    
c001f2a7:	90                   	nop

c001f2a8 <IOAPIC::IOAPIC()>:
c001f2a8:	83 ec 0c             	sub    esp,0xc
c001f2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2af:	83 ec 08             	sub    esp,0x8
c001f2b2:	68 5f 45 02 c0       	push   0xc002455f
c001f2b7:	50                   	push   eax
c001f2b8:	e8 07 9f fe ff       	call   c00091c4 <Device::Device(char const*)>
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	ba 80 45 02 c0       	mov    edx,0xc0024580
c001f2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c9:	89 10                	mov    DWORD PTR [eax],edx
c001f2cb:	90                   	nop
c001f2cc:	83 c4 0c             	add    esp,0xc
c001f2cf:	c3                   	ret    

c001f2d0 <apicOpen()>:
c001f2d0:	55                   	push   ebp
c001f2d1:	89 e5                	mov    ebp,esp
c001f2d3:	53                   	push   ebx
c001f2d4:	83 ec 34             	sub    esp,0x34
c001f2d7:	83 ec 0c             	sub    esp,0xc
c001f2da:	68 67 45 02 c0       	push   0xc0024567
c001f2df:	e8 80 7c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f2e4:	83 c4 10             	add    esp,0x10
c001f2e7:	a0 20 e1 02 c0       	mov    al,ds:0xc002e120
c001f2ec:	83 f0 01             	xor    eax,0x1
c001f2ef:	0f b6 c0             	movzx  eax,al
c001f2f2:	85 c0                	test   eax,eax
c001f2f4:	0f 84 a3 00 00 00    	je     c001f39d <apicOpen()+0xcd>
c001f2fa:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001f2fe:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001f303:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f307:	0f b6 c0             	movzx  eax,al
c001f30a:	39 c2                	cmp    edx,eax
c001f30c:	0f 83 84 00 00 00    	jae    c001f396 <apicOpen()+0xc6>
c001f312:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001f319:	83 ec 0c             	sub    esp,0xc
c001f31c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001f31f:	e8 3b f6 fe ff       	call   c000e95f <malloc>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	89 c3                	mov    ebx,eax
c001f329:	83 ec 0c             	sub    esp,0xc
c001f32c:	53                   	push   ebx
c001f32d:	e8 76 ff ff ff       	call   c001f2a8 <IOAPIC::IOAPIC()>
c001f332:	83 c4 10             	add    esp,0x10
c001f335:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001f338:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001f33c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001f33f:	89 14 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],edx
c001f346:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c001f34b:	83 c0 01             	add    eax,0x1
c001f34e:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001f353:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001f358:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001f35e:	83 ec 08             	sub    esp,0x8
c001f361:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f364:	50                   	push   eax
c001f365:	e8 f8 9c fe ff       	call   c0009062 <Device::addChild(Device*)>
c001f36a:	83 c4 10             	add    esp,0x10
c001f36d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f370:	8b 00                	mov    eax,DWORD PTR [eax]
c001f372:	83 c0 08             	add    eax,0x8
c001f375:	8b 00                	mov    eax,DWORD PTR [eax]
c001f377:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001f37b:	6a 00                	push   0x0
c001f37d:	6a 00                	push   0x0
c001f37f:	52                   	push   edx
c001f380:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001f383:	ff d0                	call   eax
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001f38b:	83 c0 01             	add    eax,0x1
c001f38e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001f391:	e9 68 ff ff ff       	jmp    c001f2fe <apicOpen()+0x2e>
c001f396:	c6 05 20 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e120,0x1
c001f39d:	e8 e8 fe ff ff       	call   c001f28a <apicGetBase()>
c001f3a2:	05 f0 00 00 00       	add    eax,0xf0
c001f3a7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f3aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f3ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3af:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001f3b2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001f3b9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001f3c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001f3c3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001f3c6:	89 10                	mov    DWORD PTR [eax],edx
c001f3c8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001f3cf:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001f3d4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001f3d7:	7d 7c                	jge    c001f455 <apicOpen()+0x185>
c001f3d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f3dc:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f3e3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001f3e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f3e9:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f3f0:	c1 e8 08             	shr    eax,0x8
c001f3f3:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001f3f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f3fa:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001f401:	c1 e8 18             	shr    eax,0x18
c001f404:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001f407:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001f40b:	3d ff 00 00 00       	cmp    eax,0xff
c001f410:	75 3a                	jne    c001f44c <apicOpen()+0x17c>
c001f412:	e8 73 fe ff ff       	call   c001f28a <apicGetBase()>
c001f417:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001f41b:	83 fa 01             	cmp    edx,0x1
c001f41e:	75 07                	jne    c001f427 <apicOpen()+0x157>
c001f420:	ba 60 03 00 00       	mov    edx,0x360
c001f425:	eb 05                	jmp    c001f42c <apicOpen()+0x15c>
c001f427:	ba 50 03 00 00       	mov    edx,0x350
c001f42c:	01 d0                	add    eax,edx
c001f42e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f431:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f434:	8b 00                	mov    eax,DWORD PTR [eax]
c001f436:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001f439:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001f440:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001f444:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f447:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001f44a:	89 10                	mov    DWORD PTR [eax],edx
c001f44c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001f450:	e9 7a ff ff ff       	jmp    c001f3cf <apicOpen()+0xff>
c001f455:	90                   	nop
c001f456:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f459:	c9                   	leave  
c001f45a:	c3                   	ret    
c001f45b:	90                   	nop

c001f45c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001f45c:	55                   	push   ebp
c001f45d:	89 e5                	mov    ebp,esp
c001f45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f462:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f468:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f46b:	72 1d                	jb     c001f48a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f470:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001f476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f479:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001f47f:	01 d0                	add    eax,edx
c001f481:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001f484:	73 04                	jae    c001f48a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001f486:	b0 01                	mov    al,0x1
c001f488:	eb 02                	jmp    c001f48c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001f48a:	b0 00                	mov    al,0x0
c001f48c:	5d                   	pop    ebp
c001f48d:	c3                   	ret    

c001f48e <IOAPIC::read(int)>:
c001f48e:	55                   	push   ebp
c001f48f:	89 e5                	mov    ebp,esp
c001f491:	83 ec 10             	sub    esp,0x10
c001f494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f497:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f49d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f4a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f4a3:	0f b6 d0             	movzx  edx,al
c001f4a6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f4a9:	89 10                	mov    DWORD PTR [eax],edx
c001f4ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f4ae:	83 c0 10             	add    eax,0x10
c001f4b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4b3:	c9                   	leave  
c001f4b4:	c3                   	ret    
c001f4b5:	90                   	nop

c001f4b6 <IOAPIC::open(int, int, void*)>:
c001f4b6:	55                   	push   ebp
c001f4b7:	89 e5                	mov    ebp,esp
c001f4b9:	57                   	push   edi
c001f4ba:	56                   	push   esi
c001f4bb:	53                   	push   ebx
c001f4bc:	83 ec 04             	sub    esp,0x4
c001f4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001f4c5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f4d4:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c001f4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4de:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f4ed:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c001f4f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f4f7:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f500:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001f506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f509:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f50f:	0f b6 f0             	movzx  esi,al
c001f512:	89 d0                	mov    eax,edx
c001f514:	ba 00 00 00 00       	mov    edx,0x0
c001f519:	89 c7                	mov    edi,eax
c001f51b:	83 e7 ff             	and    edi,0xffffffff
c001f51e:	89 f9                	mov    ecx,edi
c001f520:	0f b6 da             	movzx  ebx,dl
c001f523:	89 c8                	mov    eax,ecx
c001f525:	89 da                	mov    edx,ebx
c001f527:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001f52a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001f52d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001f531:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001f535:	83 e0 00             	and    eax,0x0
c001f538:	09 d0                	or     eax,edx
c001f53a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001f53e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f541:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001f547:	8d 50 01             	lea    edx,[eax+0x1]
c001f54a:	88 d1                	mov    cl,dl
c001f54c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001f54f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001f555:	0f b6 d0             	movzx  edx,al
c001f558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f55b:	83 c2 08             	add    edx,0x8
c001f55e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001f562:	0f b6 c9             	movzx  ecx,cl
c001f565:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001f56b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001f56f:	6a 01                	push   0x1
c001f571:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f574:	e8 15 ff ff ff       	call   c001f48e <IOAPIC::read(int)>
c001f579:	83 c4 08             	add    esp,0x8
c001f57c:	c1 f8 10             	sar    eax,0x10
c001f57f:	0f b6 c0             	movzx  eax,al
c001f582:	8d 50 01             	lea    edx,[eax+0x1]
c001f585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f588:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001f58e:	b8 00 00 00 00       	mov    eax,0x0
c001f593:	8d 65 f4             	lea    esp,[ebp-0xc]
c001f596:	5b                   	pop    ebx
c001f597:	5e                   	pop    esi
c001f598:	5f                   	pop    edi
c001f599:	5d                   	pop    ebp
c001f59a:	c3                   	ret    
c001f59b:	90                   	nop

c001f59c <IOAPIC::write(int, int)>:
c001f59c:	55                   	push   ebp
c001f59d:	89 e5                	mov    ebp,esp
c001f59f:	83 ec 10             	sub    esp,0x10
c001f5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001f5a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f5ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001f5ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f5b1:	0f b6 d0             	movzx  edx,al
c001f5b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f5b7:	89 10                	mov    DWORD PTR [eax],edx
c001f5b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001f5bc:	8d 50 10             	lea    edx,[eax+0x10]
c001f5bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f5c2:	89 02                	mov    DWORD PTR [edx],eax
c001f5c4:	90                   	nop
c001f5c5:	c9                   	leave  
c001f5c6:	c3                   	ret    
c001f5c7:	90                   	nop

c001f5c8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001f5c8:	55                   	push   ebp
c001f5c9:	89 e5                	mov    ebp,esp
c001f5cb:	53                   	push   ebx
c001f5cc:	83 ec 2c             	sub    esp,0x2c
c001f5cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f5d2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f5d5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f5d8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f5db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f5de:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f5e1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f5e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f5e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f5ea:	88 d8                	mov    al,bl
c001f5ec:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f5ef:	88 c8                	mov    al,cl
c001f5f1:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f5f4:	88 d0                	mov    al,dl
c001f5f6:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f5f9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f5fd:	83 c0 08             	add    eax,0x8
c001f600:	01 c0                	add    eax,eax
c001f602:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f605:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f609:	83 c0 08             	add    eax,0x8
c001f60c:	01 c0                	add    eax,eax
c001f60e:	83 c0 01             	add    eax,0x1
c001f611:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f614:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f617:	50                   	push   eax
c001f618:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f61b:	e8 6e fe ff ff       	call   c001f48e <IOAPIC::read(int)>
c001f620:	83 c4 08             	add    esp,0x8
c001f623:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f626:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f62d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f630:	c1 e0 18             	shl    eax,0x18
c001f633:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f636:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f639:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f63c:	52                   	push   edx
c001f63d:	50                   	push   eax
c001f63e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f641:	e8 56 ff ff ff       	call   c001f59c <IOAPIC::write(int, int)>
c001f646:	83 c4 0c             	add    esp,0xc
c001f649:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f64c:	50                   	push   eax
c001f64d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f650:	e8 39 fe ff ff       	call   c001f48e <IOAPIC::read(int)>
c001f655:	83 c4 08             	add    esp,0x8
c001f658:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f65b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f662:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f669:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f670:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f674:	85 c0                	test   eax,eax
c001f676:	74 09                	je     c001f681 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f678:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f67f:	eb 07                	jmp    c001f688 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f681:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f688:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f68c:	85 c0                	test   eax,eax
c001f68e:	74 09                	je     c001f699 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f690:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f697:	eb 07                	jmp    c001f6a0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f699:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f6a0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f6a7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f6ab:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f6ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f6b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f6b4:	52                   	push   edx
c001f6b5:	50                   	push   eax
c001f6b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f6b9:	e8 de fe ff ff       	call   c001f59c <IOAPIC::write(int, int)>
c001f6be:	83 c4 0c             	add    esp,0xc
c001f6c1:	90                   	nop
c001f6c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f6c5:	c9                   	leave  
c001f6c6:	c3                   	ret    
c001f6c7:	90                   	nop

c001f6c8 <APICTimer::close(int, int, void*)>:
c001f6c8:	b8 00 00 00 00       	mov    eax,0x0
c001f6cd:	c3                   	ret    
c001f6ce:	66 90                	xchg   ax,ax

c001f6d0 <apicTimerHandler(regs*, void*)>:
c001f6d0:	83 ec 0c             	sub    esp,0xc
c001f6d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f6d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6d9:	b8 10 27 00 00       	mov    eax,0x2710
c001f6de:	ba 00 00 00 00       	mov    edx,0x0
c001f6e3:	f7 f1                	div    ecx
c001f6e5:	83 ec 0c             	sub    esp,0xc
c001f6e8:	50                   	push   eax
c001f6e9:	e8 4a b0 fe ff       	call   c000a738 <timerHandler(unsigned int)>
c001f6ee:	83 c4 10             	add    esp,0x10
c001f6f1:	90                   	nop
c001f6f2:	83 c4 0c             	add    esp,0xc
c001f6f5:	c3                   	ret    
c001f6f6:	66 90                	xchg   ax,ax

c001f6f8 <APICTimer::open(int, int, void*)>:
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001f701:	83 c0 24             	add    eax,0x24
c001f704:	8b 00                	mov    eax,DWORD PTR [eax]
c001f706:	83 ec 08             	sub    esp,0x8
c001f709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f711:	ff d0                	call   eax
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f71e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f728:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f72c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f732:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f736:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f73c:	83 ec 0c             	sub    esp,0xc
c001f73f:	51                   	push   ecx
c001f740:	6a 01                	push   0x1
c001f742:	68 d0 f6 01 c0       	push   0xc001f6d0
c001f747:	52                   	push   edx
c001f748:	50                   	push   eax
c001f749:	e8 c0 98 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f74e:	83 c4 20             	add    esp,0x20
c001f751:	89 c2                	mov    edx,eax
c001f753:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f757:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f75d:	b8 00 00 00 00       	mov    eax,0x0
c001f762:	83 c4 0c             	add    esp,0xc
c001f765:	c3                   	ret    
c001f766:	66 90                	xchg   ax,ax

c001f768 <APICTimer::write(int)>:
c001f768:	83 ec 0c             	sub    esp,0xc
c001f76b:	83 ec 0c             	sub    esp,0xc
c001f76e:	68 a4 45 02 c0       	push   0xc00245a4
c001f773:	e8 2e f5 fe ff       	call   c000eca6 <KePanic(char const*)>
c001f778:	83 c4 10             	add    esp,0x10
c001f77b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f77f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f783:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f789:	90                   	nop
c001f78a:	83 c4 0c             	add    esp,0xc
c001f78d:	c3                   	ret    
c001f78e:	66 90                	xchg   ax,ax

c001f790 <APICTimer::APICTimer()>:
c001f790:	83 ec 0c             	sub    esp,0xc
c001f793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f797:	83 ec 08             	sub    esp,0x8
c001f79a:	68 b4 45 02 c0       	push   0xc00245b4
c001f79f:	50                   	push   eax
c001f7a0:	e8 c7 ae fe ff       	call   c000a66c <Timer::Timer(char const*)>
c001f7a5:	83 c4 10             	add    esp,0x10
c001f7a8:	ba c8 45 02 c0       	mov    edx,0xc00245c8
c001f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b1:	89 10                	mov    DWORD PTR [eax],edx
c001f7b3:	90                   	nop
c001f7b4:	83 c4 0c             	add    esp,0xc
c001f7b7:	c3                   	ret    

c001f7b8 <PIT::write(int)>:
c001f7b8:	83 ec 10             	sub    esp,0x10
c001f7bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f7bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f7c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f7c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f7cd:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c001f7d2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f7d7:	89 c2                	mov    edx,eax
c001f7d9:	c1 fa 1f             	sar    edx,0x1f
c001f7dc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f7e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7e4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f7eb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f7f0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f7f4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f7f9:	ee                   	out    dx,al
c001f7fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7fe:	0f b6 c0             	movzx  eax,al
c001f801:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f808:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f80c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f810:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f815:	ee                   	out    dx,al
c001f816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f81a:	c1 f8 08             	sar    eax,0x8
c001f81d:	0f b6 c0             	movzx  eax,al
c001f820:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f827:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f82b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f82f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f834:	ee                   	out    dx,al
c001f835:	90                   	nop
c001f836:	83 c4 10             	add    esp,0x10
c001f839:	c3                   	ret    
c001f83a:	66 90                	xchg   ax,ax

c001f83c <pitHandler(regs*, void*)>:
c001f83c:	83 ec 0c             	sub    esp,0xc
c001f83f:	8b 0d 24 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e124
c001f845:	b8 10 27 00 00       	mov    eax,0x2710
c001f84a:	89 c2                	mov    edx,eax
c001f84c:	c1 fa 1f             	sar    edx,0x1f
c001f84f:	f7 f9                	idiv   ecx
c001f851:	83 ec 0c             	sub    esp,0xc
c001f854:	50                   	push   eax
c001f855:	e8 de ae fe ff       	call   c000a738 <timerHandler(unsigned int)>
c001f85a:	83 c4 10             	add    esp,0x10
c001f85d:	90                   	nop
c001f85e:	83 c4 0c             	add    esp,0xc
c001f861:	c3                   	ret    
c001f862:	66 90                	xchg   ax,ax

c001f864 <PIT::open(int, int, void*)>:
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f86d:	83 c0 24             	add    eax,0x24
c001f870:	8b 00                	mov    eax,DWORD PTR [eax]
c001f872:	83 ec 08             	sub    esp,0x8
c001f875:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f879:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f87d:	ff d0                	call   eax
c001f87f:	83 c4 10             	add    esp,0x10
c001f882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f886:	83 ec 0c             	sub    esp,0xc
c001f889:	6a 00                	push   0x0
c001f88b:	6a 01                	push   0x1
c001f88d:	68 3c f8 01 c0       	push   0xc001f83c
c001f892:	6a 00                	push   0x0
c001f894:	50                   	push   eax
c001f895:	e8 74 97 fe ff       	call   c000900e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f89a:	83 c4 20             	add    esp,0x20
c001f89d:	89 c2                	mov    edx,eax
c001f89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f8a9:	b8 00 00 00 00       	mov    eax,0x0
c001f8ae:	83 c4 0c             	add    esp,0xc
c001f8b1:	c3                   	ret    
c001f8b2:	66 90                	xchg   ax,ax

c001f8b4 <PIT::close(int, int, void*)>:
c001f8b4:	83 ec 0c             	sub    esp,0xc
c001f8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c9:	6a 01                	push   0x1
c001f8cb:	68 3c f8 01 c0       	push   0xc001f83c
c001f8d0:	6a 00                	push   0x0
c001f8d2:	50                   	push   eax
c001f8d3:	e8 6c 97 fe ff       	call   c0009044 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f8d8:	83 c4 10             	add    esp,0x10
c001f8db:	b8 00 00 00 00       	mov    eax,0x0
c001f8e0:	83 c4 0c             	add    esp,0xc
c001f8e3:	c3                   	ret    

c001f8e4 <PIT::PIT()>:
c001f8e4:	83 ec 0c             	sub    esp,0xc
c001f8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8eb:	83 ec 08             	sub    esp,0x8
c001f8ee:	68 f0 45 02 c0       	push   0xc00245f0
c001f8f3:	50                   	push   eax
c001f8f4:	e8 73 ad fe ff       	call   c000a66c <Timer::Timer(char const*)>
c001f8f9:	83 c4 10             	add    esp,0x10
c001f8fc:	ba 18 46 02 c0       	mov    edx,0xc0024618
c001f901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f905:	89 10                	mov    DWORD PTR [eax],edx
c001f907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f911:	0f b6 d0             	movzx  edx,al
c001f914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f918:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f91f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f923:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f929:	0f b6 d0             	movzx  edx,al
c001f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f930:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f939:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f93f:	8d 50 01             	lea    edx,[eax+0x1]
c001f942:	88 d1                	mov    cl,dl
c001f944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f948:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f94e:	0f b6 d0             	movzx  edx,al
c001f951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f955:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f959:	83 e1 3f             	and    ecx,0x3f
c001f95c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f960:	90                   	nop
c001f961:	83 c4 0c             	add    esp,0xc
c001f964:	c3                   	ret    
c001f965:	66 90                	xchg   ax,ax
c001f967:	66 90                	xchg   ax,ax
c001f969:	66 90                	xchg   ax,ax
c001f96b:	66 90                	xchg   ax,ax
c001f96d:	66 90                	xchg   ax,ax
c001f96f:	90                   	nop

c001f970 <avxDetect>:
c001f970:	b8 01 00 00 00       	mov    eax,0x1
c001f975:	0f a2                	cpuid  
c001f977:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f97d:	74 15                	je     c001f994 <avxDetect.noAVX>
c001f97f:	b8 01 00 00 00       	mov    eax,0x1
c001f984:	0f a2                	cpuid  
c001f986:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f98c:	74 06                	je     c001f994 <avxDetect.noAVX>
c001f98e:	b8 01 00 00 00       	mov    eax,0x1
c001f993:	c3                   	ret    

c001f994 <avxDetect.noAVX>:
c001f994:	b8 00 00 00 00       	mov    eax,0x0
c001f999:	c3                   	ret    

c001f99a <avxSave>:
c001f99a:	53                   	push   ebx
c001f99b:	52                   	push   edx
c001f99c:	31 c0                	xor    eax,eax
c001f99e:	48                   	dec    eax
c001f99f:	89 c2                	mov    edx,eax
c001f9a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9a5:	0f ae 23             	xsave  [ebx]
c001f9a8:	5a                   	pop    edx
c001f9a9:	5b                   	pop    ebx
c001f9aa:	c3                   	ret    

c001f9ab <avxLoad>:
c001f9ab:	53                   	push   ebx
c001f9ac:	52                   	push   edx
c001f9ad:	31 c0                	xor    eax,eax
c001f9af:	48                   	dec    eax
c001f9b0:	89 c2                	mov    edx,eax
c001f9b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9b6:	0f ae 2b             	xrstor [ebx]
c001f9b9:	5a                   	pop    edx
c001f9ba:	5b                   	pop    ebx
c001f9bb:	c3                   	ret    

c001f9bc <avxInit>:
c001f9bc:	e8 47 03 00 00       	call   c001fd08 <sseInit>
c001f9c1:	50                   	push   eax
c001f9c2:	51                   	push   ecx
c001f9c3:	0f 20 e0             	mov    eax,cr4
c001f9c6:	0d 00 00 04 00       	or     eax,0x40000
c001f9cb:	0f 22 e0             	mov    cr4,eax
c001f9ce:	31 c9                	xor    ecx,ecx
c001f9d0:	0f 01 d0             	xgetbv 
c001f9d3:	0d 07 00 00 00       	or     eax,0x7
c001f9d8:	0f 01 d1             	xsetbv 
c001f9db:	59                   	pop    ecx
c001f9dc:	58                   	pop    eax
c001f9dd:	c3                   	ret    

c001f9de <avxClose>:
c001f9de:	c3                   	ret    
c001f9df:	90                   	nop

c001f9e0 <isr0>:
c001f9e0:	fa                   	cli    
c001f9e1:	68 00 00 00 00       	push   0x0
c001f9e6:	68 00 00 00 00       	push   0x0
c001f9eb:	e9 56 01 00 00       	jmp    c001fb46 <int_common_stub>

c001f9f0 <isr1>:
c001f9f0:	fa                   	cli    
c001f9f1:	6a 00                	push   0x0
c001f9f3:	6a 01                	push   0x1
c001f9f5:	e9 4c 01 00 00       	jmp    c001fb46 <int_common_stub>

c001f9fa <isr2>:
c001f9fa:	fa                   	cli    
c001f9fb:	6a 00                	push   0x0
c001f9fd:	6a 02                	push   0x2
c001f9ff:	e9 42 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa04 <isr3>:
c001fa04:	fa                   	cli    
c001fa05:	6a 00                	push   0x0
c001fa07:	6a 03                	push   0x3
c001fa09:	e9 38 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa0e <isr4>:
c001fa0e:	fa                   	cli    
c001fa0f:	6a 00                	push   0x0
c001fa11:	6a 04                	push   0x4
c001fa13:	e9 2e 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa18 <isr5>:
c001fa18:	fa                   	cli    
c001fa19:	6a 00                	push   0x0
c001fa1b:	6a 05                	push   0x5
c001fa1d:	e9 24 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa22 <isr6>:
c001fa22:	fa                   	cli    
c001fa23:	6a 00                	push   0x0
c001fa25:	6a 06                	push   0x6
c001fa27:	e9 1a 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa2c <isr7>:
c001fa2c:	fa                   	cli    
c001fa2d:	6a 00                	push   0x0
c001fa2f:	6a 07                	push   0x7
c001fa31:	e9 10 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa36 <isr8>:
c001fa36:	fa                   	cli    
c001fa37:	6a 08                	push   0x8
c001fa39:	e9 08 01 00 00       	jmp    c001fb46 <int_common_stub>

c001fa3e <isr9>:
c001fa3e:	fa                   	cli    
c001fa3f:	6a 00                	push   0x0
c001fa41:	6a 09                	push   0x9
c001fa43:	e9 fe 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa48 <isr10>:
c001fa48:	fa                   	cli    
c001fa49:	6a 0a                	push   0xa
c001fa4b:	e9 f6 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa50 <isr11>:
c001fa50:	fa                   	cli    
c001fa51:	6a 0b                	push   0xb
c001fa53:	e9 ee 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa58 <isr12>:
c001fa58:	fa                   	cli    
c001fa59:	6a 0c                	push   0xc
c001fa5b:	e9 e6 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa60 <isr13>:
c001fa60:	fa                   	cli    
c001fa61:	6a 0d                	push   0xd
c001fa63:	53                   	push   ebx
c001fa64:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fa68:	81 fb 36 fc 01 c0    	cmp    ebx,0xc001fc36
c001fa6e:	5b                   	pop    ebx
c001fa6f:	0f 84 c3 01 00 00    	je     c001fc38 <finishSignal2>
c001fa75:	e9 cc 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa7a <isr14>:
c001fa7a:	fa                   	cli    
c001fa7b:	6a 0e                	push   0xe
c001fa7d:	e9 c4 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa82 <isr15>:
c001fa82:	fa                   	cli    
c001fa83:	6a 00                	push   0x0
c001fa85:	6a 0f                	push   0xf
c001fa87:	e9 ba 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa8c <isr16>:
c001fa8c:	fa                   	cli    
c001fa8d:	6a 00                	push   0x0
c001fa8f:	6a 10                	push   0x10
c001fa91:	e9 b0 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fa96 <isr17>:
c001fa96:	fa                   	cli    
c001fa97:	6a 00                	push   0x0
c001fa99:	6a 11                	push   0x11
c001fa9b:	e9 a6 00 00 00       	jmp    c001fb46 <int_common_stub>

c001faa0 <isr18>:
c001faa0:	fa                   	cli    
c001faa1:	6a 00                	push   0x0
c001faa3:	6a 12                	push   0x12
c001faa5:	e9 9c 00 00 00       	jmp    c001fb46 <int_common_stub>

c001faaa <irq3>:
c001faaa:	fa                   	cli    
c001faab:	6a 00                	push   0x0
c001faad:	6a 23                	push   0x23
c001faaf:	e9 92 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fab4 <irq4>:
c001fab4:	fa                   	cli    
c001fab5:	6a 00                	push   0x0
c001fab7:	6a 24                	push   0x24
c001fab9:	e9 88 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fabe <irq5>:
c001fabe:	fa                   	cli    
c001fabf:	6a 00                	push   0x0
c001fac1:	6a 25                	push   0x25
c001fac3:	e9 7e 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fac8 <irq6>:
c001fac8:	fa                   	cli    
c001fac9:	6a 00                	push   0x0
c001facb:	6a 26                	push   0x26
c001facd:	e9 74 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fad2 <irq7>:
c001fad2:	fa                   	cli    
c001fad3:	6a 00                	push   0x0
c001fad5:	6a 27                	push   0x27
c001fad7:	e9 6a 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fadc <irq8>:
c001fadc:	fa                   	cli    
c001fadd:	6a 00                	push   0x0
c001fadf:	6a 28                	push   0x28
c001fae1:	e9 60 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fae6 <irq9>:
c001fae6:	fa                   	cli    
c001fae7:	6a 00                	push   0x0
c001fae9:	6a 29                	push   0x29
c001faeb:	e9 56 00 00 00       	jmp    c001fb46 <int_common_stub>

c001faf0 <irq10>:
c001faf0:	fa                   	cli    
c001faf1:	6a 00                	push   0x0
c001faf3:	6a 2a                	push   0x2a
c001faf5:	e9 4c 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fafa <irq11>:
c001fafa:	fa                   	cli    
c001fafb:	6a 00                	push   0x0
c001fafd:	6a 2b                	push   0x2b
c001faff:	e9 42 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fb04 <irq12>:
c001fb04:	fa                   	cli    
c001fb05:	6a 00                	push   0x0
c001fb07:	6a 2c                	push   0x2c
c001fb09:	e9 38 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fb0e <irq13>:
c001fb0e:	fa                   	cli    
c001fb0f:	6a 00                	push   0x0
c001fb11:	6a 2d                	push   0x2d
c001fb13:	e9 2e 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fb18 <irq14>:
c001fb18:	fa                   	cli    
c001fb19:	6a 00                	push   0x0
c001fb1b:	6a 2e                	push   0x2e
c001fb1d:	e9 24 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fb22 <irq15>:
c001fb22:	fa                   	cli    
c001fb23:	6a 00                	push   0x0
c001fb25:	6a 2f                	push   0x2f
c001fb27:	e9 1a 00 00 00       	jmp    c001fb46 <int_common_stub>

c001fb2c <irq1>:
c001fb2c:	fa                   	cli    
c001fb2d:	6a 00                	push   0x0
c001fb2f:	6a 21                	push   0x21
c001fb31:	eb 13                	jmp    c001fb46 <int_common_stub>

c001fb33 <irq2>:
c001fb33:	fa                   	cli    
c001fb34:	6a 00                	push   0x0
c001fb36:	6a 22                	push   0x22
c001fb38:	eb 0c                	jmp    c001fb46 <int_common_stub>

c001fb3a <isr96>:
c001fb3a:	6a 00                	push   0x0
c001fb3c:	6a 60                	push   0x60
c001fb3e:	fb                   	sti    
c001fb3f:	eb 37                	jmp    c001fb78 <syscall_common_stub>

c001fb41 <irq0>:
c001fb41:	fa                   	cli    
c001fb42:	6a 00                	push   0x0
c001fb44:	6a 20                	push   0x20

c001fb46 <int_common_stub>:
c001fb46:	60                   	pusha  
c001fb47:	1e                   	push   ds
c001fb48:	06                   	push   es
c001fb49:	0f a0                	push   fs
c001fb4b:	0f a8                	push   gs
c001fb4d:	66 b8 10 00          	mov    ax,0x10
c001fb51:	66 8e d8             	mov    ds,ax
c001fb54:	66 8e c0             	mov    es,ax
c001fb57:	66 8e e0             	mov    fs,ax
c001fb5a:	66 8e e8             	mov    gs,ax
c001fb5d:	54                   	push   esp
c001fb5e:	fc                   	cld    
c001fb5f:	e8 50 e2 fe ff       	call   c000ddb4 <int_handler>
c001fb64:	81 c4 04 00 00 00    	add    esp,0x4
c001fb6a:	0f a9                	pop    gs
c001fb6c:	0f a1                	pop    fs
c001fb6e:	07                   	pop    es
c001fb6f:	1f                   	pop    ds
c001fb70:	61                   	popa   
c001fb71:	81 c4 08 00 00 00    	add    esp,0x8
c001fb77:	cf                   	iret   

c001fb78 <syscall_common_stub>:
c001fb78:	60                   	pusha  
c001fb79:	1e                   	push   ds
c001fb7a:	06                   	push   es
c001fb7b:	0f a0                	push   fs
c001fb7d:	0f a8                	push   gs
c001fb7f:	66 b8 10 00          	mov    ax,0x10
c001fb83:	66 8e d8             	mov    ds,ax
c001fb86:	66 8e c0             	mov    es,ax
c001fb89:	66 8e e0             	mov    fs,ax
c001fb8c:	66 8e e8             	mov    gs,ax
c001fb8f:	54                   	push   esp
c001fb90:	fc                   	cld    
c001fb91:	e8 1e e2 fe ff       	call   c000ddb4 <int_handler>
c001fb96:	81 c4 04 00 00 00    	add    esp,0x4
c001fb9c:	0f a9                	pop    gs
c001fb9e:	0f a1                	pop    fs
c001fba0:	07                   	pop    es
c001fba1:	1f                   	pop    ds
c001fba2:	e8 bc 03 ff ff       	call   c000ff63 <KiCheckSignalZ>
c001fba7:	3d 00 00 00 00       	cmp    eax,0x0
c001fbac:	0f 84 c0 00 00 00    	je     c001fc72 <skipSignals>
c001fbb2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001fbb7:	61                   	popa   
c001fbb8:	53                   	push   ebx
c001fbb9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001fbbf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001fbc2:	5b                   	pop    ebx
c001fbc3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001fbc8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001fbcb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001fbce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fbd1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001fbd4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001fbd7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001fbda:	81 c4 08 00 00 00    	add    esp,0x8
c001fbe0:	5e                   	pop    esi
c001fbe1:	5b                   	pop    ebx
c001fbe2:	59                   	pop    ecx
c001fbe3:	5a                   	pop    edx
c001fbe4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001fbe7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001fbea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001fbed:	52                   	push   edx
c001fbee:	51                   	push   ecx
c001fbef:	53                   	push   ebx
c001fbf0:	56                   	push   esi
c001fbf1:	81 ec 08 00 00 00    	sub    esp,0x8
c001fbf7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001fbfa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001fbfd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001fc00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fc03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fc06:	60                   	pusha  
c001fc07:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001fc0d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001fc10:	89 e3                	mov    ebx,esp
c001fc12:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001fc15:	52                   	push   edx
c001fc16:	68 36 fc 01 c0       	push   0xc001fc36
c001fc1b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001fc1e:	89 dc                	mov    esp,ebx
c001fc20:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001fc23:	68 23 00 00 00       	push   0x23
c001fc28:	51                   	push   ecx
c001fc29:	68 02 02 00 00       	push   0x202
c001fc2e:	68 1b 00 00 00       	push   0x1b
c001fc33:	ff 36                	push   DWORD PTR [esi]
c001fc35:	cf                   	iret   

c001fc36 <finishSignal>:
c001fc36:	cd 0f                	int    0xf

c001fc38 <finishSignal2>:
c001fc38:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001fc3e:	e8 9d 03 ff ff       	call   c000ffe0 <KiFinishSignalZ>
c001fc43:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001fc49:	68 23 00 00 00       	push   0x23
c001fc4e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001fc51:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001fc54:	68 1b 00 00 00       	push   0x1b
c001fc59:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001fc5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fc5f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001fc62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001fc65:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001fc68:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001fc6b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001fc6e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001fc71:	cf                   	iret   

c001fc72 <skipSignals>:
c001fc72:	61                   	popa   
c001fc73:	81 c4 08 00 00 00    	add    esp,0x8
c001fc79:	cf                   	iret   
c001fc7a:	90                   	nop
c001fc7b:	90                   	nop

c001fc7c <irq16>:
c001fc7c:	fa                   	cli    
c001fc7d:	6a 00                	push   0x0
c001fc7f:	6a 30                	push   0x30
c001fc81:	e9 c0 fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fc86 <irq17>:
c001fc86:	fa                   	cli    
c001fc87:	6a 00                	push   0x0
c001fc89:	6a 31                	push   0x31
c001fc8b:	e9 b6 fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fc90 <irq18>:
c001fc90:	fa                   	cli    
c001fc91:	6a 00                	push   0x0
c001fc93:	6a 32                	push   0x32
c001fc95:	e9 ac fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fc9a <irq19>:
c001fc9a:	fa                   	cli    
c001fc9b:	6a 00                	push   0x0
c001fc9d:	6a 33                	push   0x33
c001fc9f:	e9 a2 fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fca4 <irq20>:
c001fca4:	fa                   	cli    
c001fca5:	6a 00                	push   0x0
c001fca7:	6a 34                	push   0x34
c001fca9:	e9 98 fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fcae <irq21>:
c001fcae:	fa                   	cli    
c001fcaf:	6a 00                	push   0x0
c001fcb1:	6a 35                	push   0x35
c001fcb3:	e9 8e fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fcb8 <irq22>:
c001fcb8:	fa                   	cli    
c001fcb9:	6a 00                	push   0x0
c001fcbb:	6a 36                	push   0x36
c001fcbd:	e9 84 fe ff ff       	jmp    c001fb46 <int_common_stub>

c001fcc2 <irq23>:
c001fcc2:	fa                   	cli    
c001fcc3:	6a 00                	push   0x0
c001fcc5:	6a 37                	push   0x37
c001fcc7:	e9 7a fe ff ff       	jmp    c001fb46 <int_common_stub>
c001fccc:	66 90                	xchg   ax,ax
c001fcce:	66 90                	xchg   ax,ax

c001fcd0 <i386GetRDRAND>:
c001fcd0:	b9 64 00 00 00       	mov    ecx,0x64

c001fcd5 <retry>:
c001fcd5:	0f c7 f0             	rdrand eax
c001fcd8:	72 05                	jb     c001fcdf <retry.done>
c001fcda:	e2 f9                	loop   c001fcd5 <retry>

c001fcdc <retry.fail>:
c001fcdc:	31 c0                	xor    eax,eax
c001fcde:	c3                   	ret    

c001fcdf <retry.done>:
c001fcdf:	c3                   	ret    

c001fce0 <sseDetect>:
c001fce0:	b8 01 00 00 00       	mov    eax,0x1
c001fce5:	0f a2                	cpuid  
c001fce7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001fced:	74 06                	je     c001fcf5 <sseDetect.noSSE>
c001fcef:	b8 01 00 00 00       	mov    eax,0x1
c001fcf4:	c3                   	ret    

c001fcf5 <sseDetect.noSSE>:
c001fcf5:	31 c0                	xor    eax,eax
c001fcf7:	c3                   	ret    

c001fcf8 <sseSave>:
c001fcf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcfc:	0f ae 00             	fxsave [eax]
c001fcff:	c3                   	ret    

c001fd00 <sseLoad>:
c001fd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd04:	0f ae 08             	fxrstor [eax]
c001fd07:	c3                   	ret    

c001fd08 <sseInit>:
c001fd08:	e8 48 00 00 00       	call   c001fd55 <x87Init>
c001fd0d:	0f 20 e0             	mov    eax,cr4
c001fd10:	66 0d 00 06          	or     ax,0x600
c001fd14:	0f 22 e0             	mov    cr4,eax
c001fd17:	c3                   	ret    

c001fd18 <sseClose>:
c001fd18:	c3                   	ret    
c001fd19:	66 90                	xchg   ax,ax
c001fd1b:	66 90                	xchg   ax,ax
c001fd1d:	66 90                	xchg   ax,ax
c001fd1f:	90                   	nop

c001fd20 <value_37F>:
c001fd20:	7f 03                	jg     c001fd25 <value_37A+0x1>

c001fd22 <value_37E>:
c001fd22:	7e 03                	jle    c001fd27 <x87Detect+0x1>

c001fd24 <value_37A>:
c001fd24:	7a 03                	jp     c001fd29 <x87Detect+0x3>

c001fd26 <x87Detect>:
c001fd26:	53                   	push   ebx
c001fd27:	51                   	push   ecx
c001fd28:	52                   	push   edx
c001fd29:	b8 01 00 00 00       	mov    eax,0x1
c001fd2e:	0f a2                	cpuid  
c001fd30:	f7 c2 01 00 00 00    	test   edx,0x1
c001fd36:	74 06                	je     c001fd3e <x87Detect.nox87>
c001fd38:	b8 01 00 00 00       	mov    eax,0x1
c001fd3d:	c3                   	ret    

c001fd3e <x87Detect.nox87>:
c001fd3e:	b8 00 00 00 00       	mov    eax,0x0
c001fd43:	5a                   	pop    edx
c001fd44:	59                   	pop    ecx
c001fd45:	5b                   	pop    ebx
c001fd46:	c3                   	ret    

c001fd47 <x87Save>:
c001fd47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd4b:	dd 30                	fnsave [eax]
c001fd4d:	c3                   	ret    

c001fd4e <x87Load>:
c001fd4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd52:	dd 20                	frstor [eax]
c001fd54:	c3                   	ret    

c001fd55 <x87Init>:
c001fd55:	0f 20 c0             	mov    eax,cr0
c001fd58:	66 25 fb ff          	and    ax,0xfffb
c001fd5c:	66 0d 22 00          	or     ax,0x22
c001fd60:	0f 22 c0             	mov    cr0,eax
c001fd63:	db e3                	fninit 
c001fd65:	0f 06                	clts   
c001fd67:	d9 2d 24 fd 01 c0    	fldcw  WORD PTR ds:0xc001fd24
c001fd6d:	c3                   	ret    

c001fd6e <x87Close>:
c001fd6e:	c3                   	ret    
c001fd6f:	90                   	nop

c001fd70 <__do_global_ctors_aux>:
c001fd70:	a1 24 0d 02 c0       	mov    eax,ds:0xc0020d24
c001fd75:	83 f8 ff             	cmp    eax,0xffffffff
c001fd78:	74 1a                	je     c001fd94 <__do_global_ctors_aux+0x24>
c001fd7a:	55                   	push   ebp
c001fd7b:	89 e5                	mov    ebp,esp
c001fd7d:	53                   	push   ebx
c001fd7e:	52                   	push   edx
c001fd7f:	bb 24 0d 02 c0       	mov    ebx,0xc0020d24
c001fd84:	ff d0                	call   eax
c001fd86:	83 eb 04             	sub    ebx,0x4
c001fd89:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd8b:	83 f8 ff             	cmp    eax,0xffffffff
c001fd8e:	75 f4                	jne    c001fd84 <__do_global_ctors_aux+0x14>
c001fd90:	58                   	pop    eax
c001fd91:	5b                   	pop    ebx
c001fd92:	5d                   	pop    ebp
c001fd93:	c3                   	ret    
c001fd94:	c3                   	ret    
c001fd95:	66 90                	xchg   ax,ax
c001fd97:	90                   	nop

c001fd98 <__divdi3>:
c001fd98:	55                   	push   ebp
c001fd99:	57                   	push   edi
c001fd9a:	56                   	push   esi
c001fd9b:	53                   	push   ebx
c001fd9c:	83 ec 1c             	sub    esp,0x1c
c001fd9f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001fda3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fda7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fdaa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fdae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fdb6:	85 db                	test   ebx,ebx
c001fdb8:	0f 88 8e 00 00 00    	js     c001fe4c <__divdi3+0xb4>
c001fdbe:	89 dd                	mov    ebp,ebx
c001fdc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fdc8:	89 d3                	mov    ebx,edx
c001fdca:	85 d2                	test   edx,edx
c001fdcc:	79 0d                	jns    c001fddb <__divdi3+0x43>
c001fdce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001fdd2:	f7 d8                	neg    eax
c001fdd4:	83 d2 00             	adc    edx,0x0
c001fdd7:	f7 da                	neg    edx
c001fdd9:	89 d3                	mov    ebx,edx
c001fddb:	89 c7                	mov    edi,eax
c001fddd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fde0:	85 db                	test   ebx,ebx
c001fde2:	75 48                	jne    c001fe2c <__divdi3+0x94>
c001fde4:	39 ef                	cmp    edi,ebp
c001fde6:	76 24                	jbe    c001fe0c <__divdi3+0x74>
c001fde8:	89 ea                	mov    edx,ebp
c001fdea:	f7 f7                	div    edi
c001fdec:	89 c1                	mov    ecx,eax
c001fdee:	31 f6                	xor    esi,esi
c001fdf0:	89 c8                	mov    eax,ecx
c001fdf2:	89 f2                	mov    edx,esi
c001fdf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fdf8:	85 c9                	test   ecx,ecx
c001fdfa:	74 07                	je     c001fe03 <__divdi3+0x6b>
c001fdfc:	f7 d8                	neg    eax
c001fdfe:	83 d2 00             	adc    edx,0x0
c001fe01:	f7 da                	neg    edx
c001fe03:	83 c4 1c             	add    esp,0x1c
c001fe06:	5b                   	pop    ebx
c001fe07:	5e                   	pop    esi
c001fe08:	5f                   	pop    edi
c001fe09:	5d                   	pop    ebp
c001fe0a:	c3                   	ret    
c001fe0b:	90                   	nop
c001fe0c:	85 ff                	test   edi,edi
c001fe0e:	75 0b                	jne    c001fe1b <__divdi3+0x83>
c001fe10:	b8 01 00 00 00       	mov    eax,0x1
c001fe15:	31 d2                	xor    edx,edx
c001fe17:	f7 f3                	div    ebx
c001fe19:	89 c7                	mov    edi,eax
c001fe1b:	31 d2                	xor    edx,edx
c001fe1d:	89 e8                	mov    eax,ebp
c001fe1f:	f7 f7                	div    edi
c001fe21:	89 c6                	mov    esi,eax
c001fe23:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fe26:	f7 f7                	div    edi
c001fe28:	89 c1                	mov    ecx,eax
c001fe2a:	eb c4                	jmp    c001fdf0 <__divdi3+0x58>
c001fe2c:	39 eb                	cmp    ebx,ebp
c001fe2e:	77 3c                	ja     c001fe6c <__divdi3+0xd4>
c001fe30:	0f bd f3             	bsr    esi,ebx
c001fe33:	83 f6 1f             	xor    esi,0x1f
c001fe36:	75 40                	jne    c001fe78 <__divdi3+0xe0>
c001fe38:	39 eb                	cmp    ebx,ebp
c001fe3a:	72 09                	jb     c001fe45 <__divdi3+0xad>
c001fe3c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fe3f:	0f 87 97 00 00 00    	ja     c001fedc <__divdi3+0x144>
c001fe45:	b9 01 00 00 00       	mov    ecx,0x1
c001fe4a:	eb a4                	jmp    c001fdf0 <__divdi3+0x58>
c001fe4c:	f7 d9                	neg    ecx
c001fe4e:	83 d3 00             	adc    ebx,0x0
c001fe51:	f7 db                	neg    ebx
c001fe53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001fe56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001fe5a:	89 dd                	mov    ebp,ebx
c001fe5c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001fe64:	e9 5f ff ff ff       	jmp    c001fdc8 <__divdi3+0x30>
c001fe69:	8d 76 00             	lea    esi,[esi+0x0]
c001fe6c:	31 f6                	xor    esi,esi
c001fe6e:	31 c9                	xor    ecx,ecx
c001fe70:	e9 7b ff ff ff       	jmp    c001fdf0 <__divdi3+0x58>
c001fe75:	8d 76 00             	lea    esi,[esi+0x0]
c001fe78:	b8 20 00 00 00       	mov    eax,0x20
c001fe7d:	29 f0                	sub    eax,esi
c001fe7f:	89 f1                	mov    ecx,esi
c001fe81:	d3 e3                	shl    ebx,cl
c001fe83:	89 fa                	mov    edx,edi
c001fe85:	88 c1                	mov    cl,al
c001fe87:	d3 ea                	shr    edx,cl
c001fe89:	09 da                	or     edx,ebx
c001fe8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fe8f:	89 f1                	mov    ecx,esi
c001fe91:	d3 e7                	shl    edi,cl
c001fe93:	89 eb                	mov    ebx,ebp
c001fe95:	88 c1                	mov    cl,al
c001fe97:	d3 eb                	shr    ebx,cl
c001fe99:	89 f1                	mov    ecx,esi
c001fe9b:	d3 e5                	shl    ebp,cl
c001fe9d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001fea0:	88 c1                	mov    cl,al
c001fea2:	d3 ea                	shr    edx,cl
c001fea4:	09 d5                	or     ebp,edx
c001fea6:	89 e8                	mov    eax,ebp
c001fea8:	89 da                	mov    edx,ebx
c001feaa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001feae:	89 d3                	mov    ebx,edx
c001feb0:	89 c5                	mov    ebp,eax
c001feb2:	f7 e7                	mul    edi
c001feb4:	39 d3                	cmp    ebx,edx
c001feb6:	72 18                	jb     c001fed0 <__divdi3+0x138>
c001feb8:	74 0a                	je     c001fec4 <__divdi3+0x12c>
c001feba:	89 e9                	mov    ecx,ebp
c001febc:	31 f6                	xor    esi,esi
c001febe:	e9 2d ff ff ff       	jmp    c001fdf0 <__divdi3+0x58>
c001fec3:	90                   	nop
c001fec4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001fec7:	89 f1                	mov    ecx,esi
c001fec9:	d3 e7                	shl    edi,cl
c001fecb:	39 c7                	cmp    edi,eax
c001fecd:	73 eb                	jae    c001feba <__divdi3+0x122>
c001fecf:	90                   	nop
c001fed0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001fed3:	31 f6                	xor    esi,esi
c001fed5:	e9 16 ff ff ff       	jmp    c001fdf0 <__divdi3+0x58>
c001feda:	66 90                	xchg   ax,ax
c001fedc:	31 c9                	xor    ecx,ecx
c001fede:	e9 0d ff ff ff       	jmp    c001fdf0 <__divdi3+0x58>
c001fee3:	90                   	nop

c001fee4 <__moddi3>:
c001fee4:	55                   	push   ebp
c001fee5:	57                   	push   edi
c001fee6:	56                   	push   esi
c001fee7:	53                   	push   ebx
c001fee8:	83 ec 2c             	sub    esp,0x2c
c001feeb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001feef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fef3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fef7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001fefb:	85 db                	test   ebx,ebx
c001fefd:	0f 88 85 00 00 00    	js     c001ff88 <__moddi3+0xa4>
c001ff03:	89 de                	mov    esi,ebx
c001ff05:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ff0d:	89 d7                	mov    edi,edx
c001ff0f:	85 d2                	test   edx,edx
c001ff11:	79 09                	jns    c001ff1c <__moddi3+0x38>
c001ff13:	f7 d8                	neg    eax
c001ff15:	83 d2 00             	adc    edx,0x0
c001ff18:	f7 da                	neg    edx
c001ff1a:	89 d7                	mov    edi,edx
c001ff1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff20:	89 cd                	mov    ebp,ecx
c001ff22:	85 ff                	test   edi,edi
c001ff24:	75 52                	jne    c001ff78 <__moddi3+0x94>
c001ff26:	89 c3                	mov    ebx,eax
c001ff28:	39 f0                	cmp    eax,esi
c001ff2a:	76 24                	jbe    c001ff50 <__moddi3+0x6c>
c001ff2c:	89 c8                	mov    eax,ecx
c001ff2e:	89 f2                	mov    edx,esi
c001ff30:	f7 f3                	div    ebx
c001ff32:	89 d6                	mov    esi,edx
c001ff34:	89 f0                	mov    eax,esi
c001ff36:	31 d2                	xor    edx,edx
c001ff38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff3c:	85 c9                	test   ecx,ecx
c001ff3e:	74 07                	je     c001ff47 <__moddi3+0x63>
c001ff40:	f7 d8                	neg    eax
c001ff42:	83 d2 00             	adc    edx,0x0
c001ff45:	f7 da                	neg    edx
c001ff47:	83 c4 2c             	add    esp,0x2c
c001ff4a:	5b                   	pop    ebx
c001ff4b:	5e                   	pop    esi
c001ff4c:	5f                   	pop    edi
c001ff4d:	5d                   	pop    ebp
c001ff4e:	c3                   	ret    
c001ff4f:	90                   	nop
c001ff50:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ff54:	85 db                	test   ebx,ebx
c001ff56:	75 0d                	jne    c001ff65 <__moddi3+0x81>
c001ff58:	b8 01 00 00 00       	mov    eax,0x1
c001ff5d:	31 d2                	xor    edx,edx
c001ff5f:	f7 f7                	div    edi
c001ff61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff65:	89 f0                	mov    eax,esi
c001ff67:	31 d2                	xor    edx,edx
c001ff69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ff6d:	f7 f7                	div    edi
c001ff6f:	89 e8                	mov    eax,ebp
c001ff71:	f7 f7                	div    edi
c001ff73:	89 d6                	mov    esi,edx
c001ff75:	eb bd                	jmp    c001ff34 <__moddi3+0x50>
c001ff77:	90                   	nop
c001ff78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ff7c:	39 f7                	cmp    edi,esi
c001ff7e:	76 20                	jbe    c001ffa0 <__moddi3+0xbc>
c001ff80:	89 c8                	mov    eax,ecx
c001ff82:	89 f2                	mov    edx,esi
c001ff84:	eb b2                	jmp    c001ff38 <__moddi3+0x54>
c001ff86:	66 90                	xchg   ax,ax
c001ff88:	f7 d9                	neg    ecx
c001ff8a:	83 d3 00             	adc    ebx,0x0
c001ff8d:	f7 db                	neg    ebx
c001ff8f:	89 de                	mov    esi,ebx
c001ff91:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ff99:	e9 6f ff ff ff       	jmp    c001ff0d <__moddi3+0x29>
c001ff9e:	66 90                	xchg   ax,ax
c001ffa0:	0f bd c7             	bsr    eax,edi
c001ffa3:	83 f0 1f             	xor    eax,0x1f
c001ffa6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ffaa:	75 24                	jne    c001ffd0 <__moddi3+0xec>
c001ffac:	39 f7                	cmp    edi,esi
c001ffae:	72 06                	jb     c001ffb6 <__moddi3+0xd2>
c001ffb0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001ffb4:	77 0c                	ja     c001ffc2 <__moddi3+0xde>
c001ffb6:	89 e9                	mov    ecx,ebp
c001ffb8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ffbc:	19 fe                	sbb    esi,edi
c001ffbe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ffc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ffc6:	89 f2                	mov    edx,esi
c001ffc8:	e9 6b ff ff ff       	jmp    c001ff38 <__moddi3+0x54>
c001ffcd:	8d 76 00             	lea    esi,[esi+0x0]
c001ffd0:	b8 20 00 00 00       	mov    eax,0x20
c001ffd5:	89 c2                	mov    edx,eax
c001ffd7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffdb:	29 da                	sub    edx,ebx
c001ffdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ffe1:	88 d9                	mov    cl,bl
c001ffe3:	d3 e7                	shl    edi,cl
c001ffe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffe9:	88 d1                	mov    cl,dl
c001ffeb:	d3 e8                	shr    eax,cl
c001ffed:	09 c7                	or     edi,eax
c001ffef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fff3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fff7:	89 d8                	mov    eax,ebx
c001fff9:	88 d9                	mov    cl,bl
c001fffb:	d3 e7                	shl    edi,cl
c001fffd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020001:	89 f3                	mov    ebx,esi
c0020003:	88 d1                	mov    cl,dl
c0020005:	d3 eb                	shr    ebx,cl
c0020007:	89 c7                	mov    edi,eax
c0020009:	88 c1                	mov    cl,al
c002000b:	d3 e6                	shl    esi,cl
c002000d:	89 e8                	mov    eax,ebp
c002000f:	88 d1                	mov    cl,dl
c0020011:	d3 e8                	shr    eax,cl
c0020013:	09 f0                	or     eax,esi
c0020015:	89 f9                	mov    ecx,edi
c0020017:	d3 e5                	shl    ebp,cl
c0020019:	89 da                	mov    edx,ebx
c002001b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002001f:	89 d3                	mov    ebx,edx
c0020021:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020025:	89 c6                	mov    esi,eax
c0020027:	89 d1                	mov    ecx,edx
c0020029:	39 d3                	cmp    ebx,edx
c002002b:	72 27                	jb     c0020054 <__moddi3+0x170>
c002002d:	74 21                	je     c0020050 <__moddi3+0x16c>
c002002f:	29 f5                	sub    ebp,esi
c0020031:	19 cb                	sbb    ebx,ecx
c0020033:	89 de                	mov    esi,ebx
c0020035:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020039:	d3 e6                	shl    esi,cl
c002003b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002003f:	89 f9                	mov    ecx,edi
c0020041:	d3 ed                	shr    ebp,cl
c0020043:	09 ee                	or     esi,ebp
c0020045:	89 f0                	mov    eax,esi
c0020047:	d3 eb                	shr    ebx,cl
c0020049:	89 da                	mov    edx,ebx
c002004b:	e9 e8 fe ff ff       	jmp    c001ff38 <__moddi3+0x54>
c0020050:	39 c5                	cmp    ebp,eax
c0020052:	73 db                	jae    c002002f <__moddi3+0x14b>
c0020054:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020058:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002005c:	89 d1                	mov    ecx,edx
c002005e:	89 c6                	mov    esi,eax
c0020060:	eb cd                	jmp    c002002f <__moddi3+0x14b>
c0020062:	66 90                	xchg   ax,ax

c0020064 <__udivdi3>:
c0020064:	55                   	push   ebp
c0020065:	57                   	push   edi
c0020066:	56                   	push   esi
c0020067:	53                   	push   ebx
c0020068:	83 ec 1c             	sub    esp,0x1c
c002006b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002006f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020073:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020077:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002007b:	85 d2                	test   edx,edx
c002007d:	75 41                	jne    c00200c0 <__udivdi3+0x5c>
c002007f:	39 f7                	cmp    edi,esi
c0020081:	76 15                	jbe    c0020098 <__udivdi3+0x34>
c0020083:	89 e8                	mov    eax,ebp
c0020085:	89 f2                	mov    edx,esi
c0020087:	f7 f7                	div    edi
c0020089:	31 db                	xor    ebx,ebx
c002008b:	89 da                	mov    edx,ebx
c002008d:	83 c4 1c             	add    esp,0x1c
c0020090:	5b                   	pop    ebx
c0020091:	5e                   	pop    esi
c0020092:	5f                   	pop    edi
c0020093:	5d                   	pop    ebp
c0020094:	c3                   	ret    
c0020095:	8d 76 00             	lea    esi,[esi+0x0]
c0020098:	89 f9                	mov    ecx,edi
c002009a:	85 ff                	test   edi,edi
c002009c:	75 0b                	jne    c00200a9 <__udivdi3+0x45>
c002009e:	b8 01 00 00 00       	mov    eax,0x1
c00200a3:	31 d2                	xor    edx,edx
c00200a5:	f7 f7                	div    edi
c00200a7:	89 c1                	mov    ecx,eax
c00200a9:	31 d2                	xor    edx,edx
c00200ab:	89 f0                	mov    eax,esi
c00200ad:	f7 f1                	div    ecx
c00200af:	89 c3                	mov    ebx,eax
c00200b1:	89 e8                	mov    eax,ebp
c00200b3:	f7 f1                	div    ecx
c00200b5:	89 da                	mov    edx,ebx
c00200b7:	83 c4 1c             	add    esp,0x1c
c00200ba:	5b                   	pop    ebx
c00200bb:	5e                   	pop    esi
c00200bc:	5f                   	pop    edi
c00200bd:	5d                   	pop    ebp
c00200be:	c3                   	ret    
c00200bf:	90                   	nop
c00200c0:	39 f2                	cmp    edx,esi
c00200c2:	77 1c                	ja     c00200e0 <__udivdi3+0x7c>
c00200c4:	0f bd da             	bsr    ebx,edx
c00200c7:	83 f3 1f             	xor    ebx,0x1f
c00200ca:	75 24                	jne    c00200f0 <__udivdi3+0x8c>
c00200cc:	39 f2                	cmp    edx,esi
c00200ce:	72 08                	jb     c00200d8 <__udivdi3+0x74>
c00200d0:	39 ef                	cmp    edi,ebp
c00200d2:	0f 87 84 00 00 00    	ja     c002015c <__udivdi3+0xf8>
c00200d8:	b8 01 00 00 00       	mov    eax,0x1
c00200dd:	eb ac                	jmp    c002008b <__udivdi3+0x27>
c00200df:	90                   	nop
c00200e0:	31 db                	xor    ebx,ebx
c00200e2:	31 c0                	xor    eax,eax
c00200e4:	89 da                	mov    edx,ebx
c00200e6:	83 c4 1c             	add    esp,0x1c
c00200e9:	5b                   	pop    ebx
c00200ea:	5e                   	pop    esi
c00200eb:	5f                   	pop    edi
c00200ec:	5d                   	pop    ebp
c00200ed:	c3                   	ret    
c00200ee:	66 90                	xchg   ax,ax
c00200f0:	b8 20 00 00 00       	mov    eax,0x20
c00200f5:	29 d8                	sub    eax,ebx
c00200f7:	88 d9                	mov    cl,bl
c00200f9:	d3 e2                	shl    edx,cl
c00200fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00200ff:	89 fa                	mov    edx,edi
c0020101:	88 c1                	mov    cl,al
c0020103:	d3 ea                	shr    edx,cl
c0020105:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020109:	09 d1                	or     ecx,edx
c002010b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002010f:	88 d9                	mov    cl,bl
c0020111:	d3 e7                	shl    edi,cl
c0020113:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020117:	89 f7                	mov    edi,esi
c0020119:	88 c1                	mov    cl,al
c002011b:	d3 ef                	shr    edi,cl
c002011d:	88 d9                	mov    cl,bl
c002011f:	d3 e6                	shl    esi,cl
c0020121:	89 ea                	mov    edx,ebp
c0020123:	88 c1                	mov    cl,al
c0020125:	d3 ea                	shr    edx,cl
c0020127:	09 d6                	or     esi,edx
c0020129:	89 f0                	mov    eax,esi
c002012b:	89 fa                	mov    edx,edi
c002012d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020131:	89 d7                	mov    edi,edx
c0020133:	89 c6                	mov    esi,eax
c0020135:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020139:	39 d7                	cmp    edi,edx
c002013b:	72 13                	jb     c0020150 <__udivdi3+0xec>
c002013d:	74 09                	je     c0020148 <__udivdi3+0xe4>
c002013f:	89 f0                	mov    eax,esi
c0020141:	31 db                	xor    ebx,ebx
c0020143:	e9 43 ff ff ff       	jmp    c002008b <__udivdi3+0x27>
c0020148:	88 d9                	mov    cl,bl
c002014a:	d3 e5                	shl    ebp,cl
c002014c:	39 c5                	cmp    ebp,eax
c002014e:	73 ef                	jae    c002013f <__udivdi3+0xdb>
c0020150:	8d 46 ff             	lea    eax,[esi-0x1]
c0020153:	31 db                	xor    ebx,ebx
c0020155:	e9 31 ff ff ff       	jmp    c002008b <__udivdi3+0x27>
c002015a:	66 90                	xchg   ax,ax
c002015c:	31 c0                	xor    eax,eax
c002015e:	e9 28 ff ff ff       	jmp    c002008b <__udivdi3+0x27>
c0020163:	90                   	nop

c0020164 <__umoddi3>:
c0020164:	55                   	push   ebp
c0020165:	57                   	push   edi
c0020166:	56                   	push   esi
c0020167:	53                   	push   ebx
c0020168:	83 ec 1c             	sub    esp,0x1c
c002016b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002016f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020173:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020177:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002017b:	89 da                	mov    edx,ebx
c002017d:	85 c0                	test   eax,eax
c002017f:	75 37                	jne    c00201b8 <__umoddi3+0x54>
c0020181:	39 df                	cmp    edi,ebx
c0020183:	76 13                	jbe    c0020198 <__umoddi3+0x34>
c0020185:	89 f0                	mov    eax,esi
c0020187:	f7 f7                	div    edi
c0020189:	89 d0                	mov    eax,edx
c002018b:	31 d2                	xor    edx,edx
c002018d:	83 c4 1c             	add    esp,0x1c
c0020190:	5b                   	pop    ebx
c0020191:	5e                   	pop    esi
c0020192:	5f                   	pop    edi
c0020193:	5d                   	pop    ebp
c0020194:	c3                   	ret    
c0020195:	8d 76 00             	lea    esi,[esi+0x0]
c0020198:	89 fd                	mov    ebp,edi
c002019a:	85 ff                	test   edi,edi
c002019c:	75 0b                	jne    c00201a9 <__umoddi3+0x45>
c002019e:	b8 01 00 00 00       	mov    eax,0x1
c00201a3:	31 d2                	xor    edx,edx
c00201a5:	f7 f7                	div    edi
c00201a7:	89 c5                	mov    ebp,eax
c00201a9:	89 d8                	mov    eax,ebx
c00201ab:	31 d2                	xor    edx,edx
c00201ad:	f7 f5                	div    ebp
c00201af:	89 f0                	mov    eax,esi
c00201b1:	f7 f5                	div    ebp
c00201b3:	89 d0                	mov    eax,edx
c00201b5:	eb d4                	jmp    c002018b <__umoddi3+0x27>
c00201b7:	90                   	nop
c00201b8:	89 f1                	mov    ecx,esi
c00201ba:	39 d8                	cmp    eax,ebx
c00201bc:	76 0a                	jbe    c00201c8 <__umoddi3+0x64>
c00201be:	89 f0                	mov    eax,esi
c00201c0:	83 c4 1c             	add    esp,0x1c
c00201c3:	5b                   	pop    ebx
c00201c4:	5e                   	pop    esi
c00201c5:	5f                   	pop    edi
c00201c6:	5d                   	pop    ebp
c00201c7:	c3                   	ret    
c00201c8:	0f bd e8             	bsr    ebp,eax
c00201cb:	83 f5 1f             	xor    ebp,0x1f
c00201ce:	75 1c                	jne    c00201ec <__umoddi3+0x88>
c00201d0:	39 d8                	cmp    eax,ebx
c00201d2:	72 04                	jb     c00201d8 <__umoddi3+0x74>
c00201d4:	39 f7                	cmp    edi,esi
c00201d6:	77 08                	ja     c00201e0 <__umoddi3+0x7c>
c00201d8:	89 da                	mov    edx,ebx
c00201da:	29 fe                	sub    esi,edi
c00201dc:	19 c2                	sbb    edx,eax
c00201de:	89 f1                	mov    ecx,esi
c00201e0:	89 c8                	mov    eax,ecx
c00201e2:	83 c4 1c             	add    esp,0x1c
c00201e5:	5b                   	pop    ebx
c00201e6:	5e                   	pop    esi
c00201e7:	5f                   	pop    edi
c00201e8:	5d                   	pop    ebp
c00201e9:	c3                   	ret    
c00201ea:	66 90                	xchg   ax,ax
c00201ec:	ba 20 00 00 00       	mov    edx,0x20
c00201f1:	29 ea                	sub    edx,ebp
c00201f3:	89 e9                	mov    ecx,ebp
c00201f5:	d3 e0                	shl    eax,cl
c00201f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00201fb:	89 f8                	mov    eax,edi
c00201fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020201:	88 d1                	mov    cl,dl
c0020203:	d3 e8                	shr    eax,cl
c0020205:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020209:	09 c1                	or     ecx,eax
c002020b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002020f:	89 e9                	mov    ecx,ebp
c0020211:	d3 e7                	shl    edi,cl
c0020213:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020217:	89 d8                	mov    eax,ebx
c0020219:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002021d:	88 d1                	mov    cl,dl
c002021f:	d3 e8                	shr    eax,cl
c0020221:	89 c7                	mov    edi,eax
c0020223:	89 e9                	mov    ecx,ebp
c0020225:	d3 e3                	shl    ebx,cl
c0020227:	89 f0                	mov    eax,esi
c0020229:	88 d1                	mov    cl,dl
c002022b:	d3 e8                	shr    eax,cl
c002022d:	09 d8                	or     eax,ebx
c002022f:	89 e9                	mov    ecx,ebp
c0020231:	d3 e6                	shl    esi,cl
c0020233:	89 f3                	mov    ebx,esi
c0020235:	89 fa                	mov    edx,edi
c0020237:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002023b:	89 d1                	mov    ecx,edx
c002023d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020241:	89 c6                	mov    esi,eax
c0020243:	89 d7                	mov    edi,edx
c0020245:	39 d1                	cmp    ecx,edx
c0020247:	72 27                	jb     c0020270 <__umoddi3+0x10c>
c0020249:	74 21                	je     c002026c <__umoddi3+0x108>
c002024b:	89 ca                	mov    edx,ecx
c002024d:	29 f3                	sub    ebx,esi
c002024f:	19 fa                	sbb    edx,edi
c0020251:	89 d0                	mov    eax,edx
c0020253:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020257:	d3 e0                	shl    eax,cl
c0020259:	89 e9                	mov    ecx,ebp
c002025b:	d3 eb                	shr    ebx,cl
c002025d:	09 d8                	or     eax,ebx
c002025f:	d3 ea                	shr    edx,cl
c0020261:	83 c4 1c             	add    esp,0x1c
c0020264:	5b                   	pop    ebx
c0020265:	5e                   	pop    esi
c0020266:	5f                   	pop    edi
c0020267:	5d                   	pop    ebp
c0020268:	c3                   	ret    
c0020269:	8d 76 00             	lea    esi,[esi+0x0]
c002026c:	39 c3                	cmp    ebx,eax
c002026e:	73 db                	jae    c002024b <__umoddi3+0xe7>
c0020270:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020274:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020278:	89 d7                	mov    edi,edx
c002027a:	89 c6                	mov    esi,eax
c002027c:	eb cd                	jmp    c002024b <__umoddi3+0xe7>

Disassembly of section .init:

c002027e <_init>:
c002027e:	55                   	push   ebp
c002027f:	89 e5                	mov    ebp,esp
c0020281:	e8 6e fe fd ff       	call   c00000f4 <frame_dummy>
c0020286:	e8 e5 fa ff ff       	call   c001fd70 <__do_global_ctors_aux>
c002028b:	5d                   	pop    ebp
c002028c:	c3                   	ret    

Disassembly of section .fini:

c002028d <_fini>:
c002028d:	55                   	push   ebp
c002028e:	89 e5                	mov    ebp,esp
c0020290:	e8 ef fd fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020295:	5d                   	pop    ebp
c0020296:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020298 <DriverlessDevice::~DriverlessDevice()>:
c0020298:	ba 40 1c 02 c0       	mov    edx,0xc0021c40
c002029d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202a1:	89 10                	mov    DWORD PTR [eax],edx
c00202a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202a7:	50                   	push   eax
c00202a8:	e8 b7 8c fe ff       	call   c0008f64 <Device::~Device()>
c00202ad:	83 c4 04             	add    esp,0x4
c00202b0:	90                   	nop
c00202b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00202b2 <DriverlessDevice::~DriverlessDevice()>:
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202bc:	e8 d7 ff ff ff       	call   c0020298 <DriverlessDevice::~DriverlessDevice()>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	83 ec 08             	sub    esp,0x8
c00202c7:	68 58 01 00 00       	push   0x158
c00202cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202d0:	e8 ef c3 fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c00202d5:	83 c4 10             	add    esp,0x10
c00202d8:	83 c4 0c             	add    esp,0xc
c00202db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00202dc <LinkedList<Device>::addElement(Device*)>:
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00202e4:	75 10                	jne    c00202f6 <LinkedList<Device>::addElement(Device*)+0x1a>
c00202e6:	83 ec 0c             	sub    esp,0xc
c00202e9:	68 d4 1b 02 c0       	push   0xc0021bd4
c00202ee:	e8 b3 e9 fe ff       	call   c000eca6 <KePanic(char const*)>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00202fc:	85 c0                	test   eax,eax
c00202fe:	74 3a                	je     c002033a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020304:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020307:	85 c0                	test   eax,eax
c0020309:	74 2f                	je     c002033a <LinkedList<Device>::addElement(Device*)+0x5e>
c002030b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020312:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020316:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002031c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020324:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002032e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020338:	eb 68                	jmp    c00203a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c002033a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002033e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020340:	85 c0                	test   eax,eax
c0020342:	75 4e                	jne    c0020392 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002034b:	85 c0                	test   eax,eax
c002034d:	75 43                	jne    c0020392 <LinkedList<Device>::addElement(Device*)+0xb6>
c002034f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020353:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020357:	89 10                	mov    DWORD PTR [eax],edx
c0020359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002035d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020361:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002036b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020379:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002037c:	85 c0                	test   eax,eax
c002037e:	74 22                	je     c00203a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020380:	83 ec 0c             	sub    esp,0xc
c0020383:	68 f6 1b 02 c0       	push   0xc0021bf6
c0020388:	e8 19 e9 fe ff       	call   c000eca6 <KePanic(char const*)>
c002038d:	83 c4 10             	add    esp,0x10
c0020390:	eb 10                	jmp    c00203a2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020392:	83 ec 0c             	sub    esp,0xc
c0020395:	68 00 1c 02 c0       	push   0xc0021c00
c002039a:	e8 07 e9 fe ff       	call   c000eca6 <KePanic(char const*)>
c002039f:	83 c4 10             	add    esp,0x10
c00203a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203a6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00203a9:	8d 50 01             	lea    edx,[eax+0x1]
c00203ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203b3:	90                   	nop
c00203b4:	83 c4 0c             	add    esp,0xc
c00203b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00203b8 <LinkedList<Device>::LinkedList()>:
c00203b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203f8:	90                   	nop
c00203f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00203fc <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00203fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020400:	8b 00                	mov    eax,DWORD PTR [eax]
c0020402:	85 c0                	test   eax,eax
c0020404:	75 0e                	jne    c0020414 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002040a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002040d:	85 c0                	test   eax,eax
c002040f:	75 03                	jne    c0020414 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020411:	b0 01                	mov    al,0x1
c0020413:	c3                   	ret    
c0020414:	b0 00                	mov    al,0x0
c0020416:	90                   	nop
c0020417:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020418 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002041c:	8b 00                	mov    eax,DWORD PTR [eax]
c002041e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020420 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020427:	8b 00                	mov    eax,DWORD PTR [eax]
c0020429:	85 c0                	test   eax,eax
c002042b:	75 17                	jne    c0020444 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002042d:	83 ec 0c             	sub    esp,0xc
c0020430:	68 70 1e 02 c0       	push   0xc0021e70
c0020435:	e8 6c e8 fe ff       	call   c000eca6 <KePanic(char const*)>
c002043a:	83 c4 10             	add    esp,0x10
c002043d:	e9 96 00 00 00       	jmp    c00204d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020442:	66 90                	xchg   ax,ax
c0020444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002044b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002044e:	85 c0                	test   eax,eax
c0020450:	0f 95 c0             	setne  al
c0020453:	0f b6 c0             	movzx  eax,al
c0020456:	85 c0                	test   eax,eax
c0020458:	74 12                	je     c002046c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002045a:	83 ec 0c             	sub    esp,0xc
c002045d:	68 bb 1e 02 c0       	push   0xc0021ebb
c0020462:	e8 3f e8 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020467:	83 c4 10             	add    esp,0x10
c002046a:	66 90                	xchg   ax,ax
c002046c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020470:	8b 00                	mov    eax,DWORD PTR [eax]
c0020472:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020475:	85 c0                	test   eax,eax
c0020477:	0f 94 c0             	sete   al
c002047a:	0f b6 c0             	movzx  eax,al
c002047d:	85 c0                	test   eax,eax
c002047f:	74 33                	je     c00204b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020485:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002049d:	83 f8 01             	cmp    eax,0x1
c00204a0:	74 22                	je     c00204c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00204a2:	83 ec 0c             	sub    esp,0xc
c00204a5:	68 94 1e 02 c0       	push   0xc0021e94
c00204aa:	e8 f7 e7 fe ff       	call   c000eca6 <KePanic(char const*)>
c00204af:	83 c4 10             	add    esp,0x10
c00204b2:	eb 10                	jmp    c00204c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00204b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00204ba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00204bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c1:	89 10                	mov    DWORD PTR [eax],edx
c00204c3:	90                   	nop
c00204c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00204ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00204d5:	8d 76 00             	lea    esi,[esi+0x0]
c00204d8:	83 c4 0c             	add    esp,0xc
c00204db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00204dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00204dc:	83 ec 0c             	sub    esp,0xc
c00204df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00204e4:	75 12                	jne    c00204f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00204e6:	83 ec 0c             	sub    esp,0xc
c00204e9:	68 d4 1b 02 c0       	push   0xc0021bd4
c00204ee:	e8 b3 e7 fe ff       	call   c000eca6 <KePanic(char const*)>
c00204f3:	83 c4 10             	add    esp,0x10
c00204f6:	66 90                	xchg   ax,ax
c00204f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00204fe:	85 c0                	test   eax,eax
c0020500:	74 36                	je     c0020538 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0020502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020509:	85 c0                	test   eax,eax
c002050b:	74 2b                	je     c0020538 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002050d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020514:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020518:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002051b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020523:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002052a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002052d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020534:	eb 6a                	jmp    c00205a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0020536:	66 90                	xchg   ax,ax
c0020538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002053c:	8b 00                	mov    eax,DWORD PTR [eax]
c002053e:	85 c0                	test   eax,eax
c0020540:	75 4e                	jne    c0020590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0020542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020549:	85 c0                	test   eax,eax
c002054b:	75 43                	jne    c0020590 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020551:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020555:	89 10                	mov    DWORD PTR [eax],edx
c0020557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002055b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002055f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020566:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020569:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020577:	85 c0                	test   eax,eax
c0020579:	74 25                	je     c00205a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	68 f6 1b 02 c0       	push   0xc0021bf6
c0020583:	e8 1e e7 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	eb 13                	jmp    c00205a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002058d:	8d 76 00             	lea    esi,[esi+0x0]
c0020590:	83 ec 0c             	sub    esp,0xc
c0020593:	68 00 1c 02 c0       	push   0xc0021c00
c0020598:	e8 09 e7 fe ff       	call   c000eca6 <KePanic(char const*)>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00205a7:	8d 50 01             	lea    edx,[eax+0x1]
c00205aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00205b1:	90                   	nop
c00205b2:	83 c4 0c             	add    esp,0xc
c00205b5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00205b8 <ACPI::~ACPI()>:
c00205b8:	83 ec 0c             	sub    esp,0xc
c00205bb:	ba 4c 22 02 c0       	mov    edx,0xc002224c
c00205c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205c4:	89 10                	mov    DWORD PTR [eax],edx
c00205c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ca:	83 ec 0c             	sub    esp,0xc
c00205cd:	50                   	push   eax
c00205ce:	e8 91 89 fe ff       	call   c0008f64 <Device::~Device()>
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	90                   	nop
c00205d7:	83 c4 0c             	add    esp,0xc
c00205da:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00205dc <ACPI::~ACPI()>:
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	83 ec 0c             	sub    esp,0xc
c00205e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e6:	e8 cd ff ff ff       	call   c00205b8 <ACPI::~ACPI()>
c00205eb:	83 c4 10             	add    esp,0x10
c00205ee:	83 ec 08             	sub    esp,0x8
c00205f1:	68 64 12 00 00       	push   0x1264
c00205f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205fa:	e8 c5 c0 fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c00205ff:	83 c4 10             	add    esp,0x10
c0020602:	83 c4 0c             	add    esp,0xc
c0020605:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020608 <LinkedList<Device>::~LinkedList()>:
c0020608:	90                   	nop
c0020609:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002060c <LinkedList<Device>::isEmpty()>:
c002060c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020610:	8b 00                	mov    eax,DWORD PTR [eax]
c0020612:	85 c0                	test   eax,eax
c0020614:	75 0e                	jne    c0020624 <LinkedList<Device>::isEmpty()+0x18>
c0020616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002061a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002061d:	85 c0                	test   eax,eax
c002061f:	75 03                	jne    c0020624 <LinkedList<Device>::isEmpty()+0x18>
c0020621:	b0 01                	mov    al,0x1
c0020623:	c3                   	ret    
c0020624:	b0 00                	mov    al,0x0
c0020626:	90                   	nop
c0020627:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020628 <LinkedList<Device>::getFirstElement()>:
c0020628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002062c:	8b 00                	mov    eax,DWORD PTR [eax]
c002062e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020630 <LinkedList<Device>::removeFirst()>:
c0020630:	83 ec 0c             	sub    esp,0xc
c0020633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020637:	8b 00                	mov    eax,DWORD PTR [eax]
c0020639:	85 c0                	test   eax,eax
c002063b:	75 17                	jne    c0020654 <LinkedList<Device>::removeFirst()+0x24>
c002063d:	83 ec 0c             	sub    esp,0xc
c0020640:	68 70 1e 02 c0       	push   0xc0021e70
c0020645:	e8 5c e6 fe ff       	call   c000eca6 <KePanic(char const*)>
c002064a:	83 c4 10             	add    esp,0x10
c002064d:	e9 92 00 00 00       	jmp    c00206e4 <LinkedList<Device>::removeFirst()+0xb4>
c0020652:	66 90                	xchg   ax,ax
c0020654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002065b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020661:	85 c0                	test   eax,eax
c0020663:	74 13                	je     c0020678 <LinkedList<Device>::removeFirst()+0x48>
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	68 bb 1e 02 c0       	push   0xc0021ebb
c002066d:	e8 34 e6 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020672:	83 c4 10             	add    esp,0x10
c0020675:	8d 76 00             	lea    esi,[esi+0x0]
c0020678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067c:	8b 00                	mov    eax,DWORD PTR [eax]
c002067e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020684:	85 c0                	test   eax,eax
c0020686:	75 34                	jne    c00206bc <LinkedList<Device>::removeFirst()+0x8c>
c0020688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020696:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002069d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00206a4:	83 f8 01             	cmp    eax,0x1
c00206a7:	74 27                	je     c00206d0 <LinkedList<Device>::removeFirst()+0xa0>
c00206a9:	83 ec 0c             	sub    esp,0xc
c00206ac:	68 94 1e 02 c0       	push   0xc0021e94
c00206b1:	e8 f0 e5 fe ff       	call   c000eca6 <KePanic(char const*)>
c00206b6:	83 c4 10             	add    esp,0x10
c00206b9:	eb 15                	jmp    c00206d0 <LinkedList<Device>::removeFirst()+0xa0>
c00206bb:	90                   	nop
c00206bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00206c2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00206c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206cc:	89 10                	mov    DWORD PTR [eax],edx
c00206ce:	66 90                	xchg   ax,ax
c00206d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00206d7:	8d 50 ff             	lea    edx,[eax-0x1]
c00206da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00206e1:	8d 76 00             	lea    esi,[esi+0x0]
c00206e4:	83 c4 0c             	add    esp,0xc
c00206e7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00206e8 <Computer::~Computer()>:
c00206e8:	83 ec 0c             	sub    esp,0xc
c00206eb:	ba ec 24 02 c0       	mov    edx,0xc00224ec
c00206f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206f4:	89 10                	mov    DWORD PTR [eax],edx
c00206f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206fa:	83 ec 0c             	sub    esp,0xc
c00206fd:	50                   	push   eax
c00206fe:	e8 61 88 fe ff       	call   c0008f64 <Device::~Device()>
c0020703:	83 c4 10             	add    esp,0x10
c0020706:	90                   	nop
c0020707:	83 c4 0c             	add    esp,0xc
c002070a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002070c <Computer::~Computer()>:
c002070c:	83 ec 0c             	sub    esp,0xc
c002070f:	83 ec 0c             	sub    esp,0xc
c0020712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020716:	e8 cd ff ff ff       	call   c00206e8 <Computer::~Computer()>
c002071b:	83 c4 10             	add    esp,0x10
c002071e:	83 ec 08             	sub    esp,0x8
c0020721:	68 6c 01 00 00       	push   0x16c
c0020726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002072a:	e8 95 bf fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	83 c4 0c             	add    esp,0xc
c0020735:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020736 <idleCommon()>:
c0020736:	83 ec 0c             	sub    esp,0xc
c0020739:	fa                   	cli    
c002073a:	ff 05 b0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6b0
c0020740:	e8 cf 4f ff ff       	call   c0015714 <schedule()>
c0020745:	f0 ff 0d b0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6b0
c002074c:	83 3d b0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6b0,0x0
c0020753:	75 01                	jne    c0020756 <idleCommon()+0x20>
c0020755:	fb                   	sti    
c0020756:	83 c4 0c             	add    esp,0xc
c0020759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002075a <LinkedList<UnixFile>::~LinkedList()>:
c002075a:	90                   	nop
c002075b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002075c <LinkedList<UnixFile>::LinkedList()>:
c002075c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020760:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002076a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020775:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002077c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020780:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002078a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020795:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002079c:	90                   	nop
c002079d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002079e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002079e:	83 ec 0c             	sub    esp,0xc
c00207a1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00207a6:	75 10                	jne    c00207b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00207a8:	83 ec 0c             	sub    esp,0xc
c00207ab:	68 d4 1b 02 c0       	push   0xc0021bd4
c00207b0:	e8 f1 e4 fe ff       	call   c000eca6 <KePanic(char const*)>
c00207b5:	83 c4 10             	add    esp,0x10
c00207b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00207be:	85 c0                	test   eax,eax
c00207c0:	74 34                	je     c00207f6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00207c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207c9:	85 c0                	test   eax,eax
c00207cb:	74 29                	je     c00207f6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00207cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207d8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00207db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00207e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00207e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00207f4:	eb 65                	jmp    c002085b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00207f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00207fc:	85 c0                	test   eax,eax
c00207fe:	75 4b                	jne    c002084b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020804:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020807:	85 c0                	test   eax,eax
c0020809:	75 40                	jne    c002084b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002080b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002080f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020813:	89 10                	mov    DWORD PTR [eax],edx
c0020815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020819:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002081d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020827:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020832:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020835:	85 c0                	test   eax,eax
c0020837:	74 22                	je     c002085b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020839:	83 ec 0c             	sub    esp,0xc
c002083c:	68 f6 1b 02 c0       	push   0xc0021bf6
c0020841:	e8 60 e4 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020846:	83 c4 10             	add    esp,0x10
c0020849:	eb 10                	jmp    c002085b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002084b:	83 ec 0c             	sub    esp,0xc
c002084e:	68 00 1c 02 c0       	push   0xc0021c00
c0020853:	e8 4e e4 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020858:	83 c4 10             	add    esp,0x10
c002085b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020862:	8d 50 01             	lea    edx,[eax+0x1]
c0020865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002086c:	90                   	nop
c002086d:	83 c4 0c             	add    esp,0xc
c0020870:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020872 <LinkedList<UnixFile>::getFirstElement()>:
c0020872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020876:	8b 00                	mov    eax,DWORD PTR [eax]
c0020878:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002087a <LinkedList<UnixFile>::removeFirst()>:
c002087a:	83 ec 0c             	sub    esp,0xc
c002087d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020881:	8b 00                	mov    eax,DWORD PTR [eax]
c0020883:	85 c0                	test   eax,eax
c0020885:	75 12                	jne    c0020899 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020887:	83 ec 0c             	sub    esp,0xc
c002088a:	68 70 1e 02 c0       	push   0xc0021e70
c002088f:	e8 12 e4 fe ff       	call   c000eca6 <KePanic(char const*)>
c0020894:	83 c4 10             	add    esp,0x10
c0020897:	eb 7e                	jmp    c0020917 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0020899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208a3:	85 c0                	test   eax,eax
c00208a5:	74 10                	je     c00208b7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00208a7:	83 ec 0c             	sub    esp,0xc
c00208aa:	68 bb 1e 02 c0       	push   0xc0021ebb
c00208af:	e8 f2 e3 fe ff       	call   c000eca6 <KePanic(char const*)>
c00208b4:	83 c4 10             	add    esp,0x10
c00208b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208c0:	85 c0                	test   eax,eax
c00208c2:	75 33                	jne    c00208f7 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00208c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00208d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208e0:	83 f8 01             	cmp    eax,0x1
c00208e3:	74 21                	je     c0020906 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00208e5:	83 ec 0c             	sub    esp,0xc
c00208e8:	68 94 1e 02 c0       	push   0xc0021e94
c00208ed:	e8 b4 e3 fe ff       	call   c000eca6 <KePanic(char const*)>
c00208f2:	83 c4 10             	add    esp,0x10
c00208f5:	eb 0f                	jmp    c0020906 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00208f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00208fd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020904:	89 10                	mov    DWORD PTR [eax],edx
c0020906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002090a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002090d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020914:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020917:	83 c4 0c             	add    esp,0xc
c002091a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002091c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002091c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020920:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020923:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020924 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020928:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002092b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002092c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002092c:	90                   	nop
c002092d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020930 <ThreadControlBlock::ThreadControlBlock()>:
c0020930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020934:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002093b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002093f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020946:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002094a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020955:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002095c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020960:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002096b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002096f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020973:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020977:	90                   	nop
c0020978:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002097c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002097c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020986:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002098a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020995:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002099c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00209a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00209b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00209b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00209bc:	90                   	nop
c00209bd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00209be <CPU::~CPU()>:
c00209be:	83 ec 0c             	sub    esp,0xc
c00209c1:	ba 08 3b 02 c0       	mov    edx,0xc0023b08
c00209c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209ca:	89 10                	mov    DWORD PTR [eax],edx
c00209cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209d0:	83 ec 0c             	sub    esp,0xc
c00209d3:	50                   	push   eax
c00209d4:	e8 8b 85 fe ff       	call   c0008f64 <Device::~Device()>
c00209d9:	83 c4 10             	add    esp,0x10
c00209dc:	90                   	nop
c00209dd:	83 c4 0c             	add    esp,0xc
c00209e0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00209e2 <CPU::~CPU()>:
c00209e2:	83 ec 0c             	sub    esp,0xc
c00209e5:	83 ec 0c             	sub    esp,0xc
c00209e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209ec:	e8 cd ff ff ff       	call   c00209be <CPU::~CPU()>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	83 ec 08             	sub    esp,0x8
c00209f7:	68 78 11 00 00       	push   0x1178
c00209fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a00:	e8 bf bc fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020a05:	83 c4 10             	add    esp,0x10
c0020a08:	83 c4 0c             	add    esp,0xc
c0020a0b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0020a0c <PCI::~PCI()>:
c0020a0c:	83 ec 0c             	sub    esp,0xc
c0020a0f:	ba 6c 40 02 c0       	mov    edx,0xc002406c
c0020a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a18:	89 10                	mov    DWORD PTR [eax],edx
c0020a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1e:	83 ec 0c             	sub    esp,0xc
c0020a21:	50                   	push   eax
c0020a22:	e8 1d 7f fe ff       	call   c0008944 <Bus::~Bus()>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	90                   	nop
c0020a2b:	83 c4 0c             	add    esp,0xc
c0020a2e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020a30 <PCI::~PCI()>:
c0020a30:	83 ec 0c             	sub    esp,0xc
c0020a33:	83 ec 0c             	sub    esp,0xc
c0020a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a3a:	e8 cd ff ff ff       	call   c0020a0c <PCI::~PCI()>
c0020a3f:	83 c4 10             	add    esp,0x10
c0020a42:	83 ec 08             	sub    esp,0x8
c0020a45:	68 5c 01 00 00       	push   0x15c
c0020a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a4e:	e8 71 bc fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020a53:	83 c4 10             	add    esp,0x10
c0020a56:	83 c4 0c             	add    esp,0xc
c0020a59:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0020a5a <IDE::~IDE()>:
c0020a5a:	83 ec 0c             	sub    esp,0xc
c0020a5d:	ba bc 41 02 c0       	mov    edx,0xc00241bc
c0020a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a66:	89 10                	mov    DWORD PTR [eax],edx
c0020a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a6c:	83 ec 0c             	sub    esp,0xc
c0020a6f:	50                   	push   eax
c0020a70:	e8 7f 89 fe ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0020a75:	83 c4 10             	add    esp,0x10
c0020a78:	90                   	nop
c0020a79:	83 c4 0c             	add    esp,0xc
c0020a7c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020a7e <IDE::~IDE()>:
c0020a7e:	83 ec 0c             	sub    esp,0xc
c0020a81:	83 ec 0c             	sub    esp,0xc
c0020a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a88:	e8 cd ff ff ff       	call   c0020a5a <IDE::~IDE()>
c0020a8d:	83 c4 10             	add    esp,0x10
c0020a90:	83 ec 08             	sub    esp,0x8
c0020a93:	68 70 02 00 00       	push   0x270
c0020a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a9c:	e8 23 bc fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020aa1:	83 c4 10             	add    esp,0x10
c0020aa4:	83 c4 0c             	add    esp,0xc
c0020aa7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020aa8 <SATABus::~SATABus()>:
c0020aa8:	83 ec 0c             	sub    esp,0xc
c0020aab:	ba 0c 42 02 c0       	mov    edx,0xc002420c
c0020ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ab4:	89 10                	mov    DWORD PTR [eax],edx
c0020ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	50                   	push   eax
c0020abe:	e8 31 89 fe ff       	call   c00093f4 <HardDiskController::~HardDiskController()>
c0020ac3:	83 c4 10             	add    esp,0x10
c0020ac6:	90                   	nop
c0020ac7:	83 c4 0c             	add    esp,0xc
c0020aca:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020acc <SATABus::~SATABus()>:
c0020acc:	83 ec 0c             	sub    esp,0xc
c0020acf:	83 ec 0c             	sub    esp,0xc
c0020ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ad6:	e8 cd ff ff ff       	call   c0020aa8 <SATABus::~SATABus()>
c0020adb:	83 c4 10             	add    esp,0x10
c0020ade:	83 ec 08             	sub    esp,0x8
c0020ae1:	68 64 01 00 00       	push   0x164
c0020ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aea:	e8 d5 bb fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020aef:	83 c4 10             	add    esp,0x10
c0020af2:	83 c4 0c             	add    esp,0xc
c0020af5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020af6 <ATA::~ATA()>:
c0020af6:	83 ec 0c             	sub    esp,0xc
c0020af9:	ba f4 42 02 c0       	mov    edx,0xc00242f4
c0020afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b02:	89 10                	mov    DWORD PTR [eax],edx
c0020b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b08:	83 ec 0c             	sub    esp,0xc
c0020b0b:	50                   	push   eax
c0020b0c:	e8 c5 89 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	90                   	nop
c0020b15:	83 c4 0c             	add    esp,0xc
c0020b18:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0020b1a <ATA::~ATA()>:
c0020b1a:	83 ec 0c             	sub    esp,0xc
c0020b1d:	83 ec 0c             	sub    esp,0xc
c0020b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b24:	e8 cd ff ff ff       	call   c0020af6 <ATA::~ATA()>
c0020b29:	83 c4 10             	add    esp,0x10
c0020b2c:	83 ec 08             	sub    esp,0x8
c0020b2f:	68 8c 01 00 00       	push   0x18c
c0020b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b38:	e8 87 bb fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020b3d:	83 c4 10             	add    esp,0x10
c0020b40:	83 c4 0c             	add    esp,0xc
c0020b43:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020b44 <ATAPI::~ATAPI()>:
c0020b44:	83 ec 0c             	sub    esp,0xc
c0020b47:	ba 3c 43 02 c0       	mov    edx,0xc002433c
c0020b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b50:	89 10                	mov    DWORD PTR [eax],edx
c0020b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b56:	83 ec 0c             	sub    esp,0xc
c0020b59:	50                   	push   eax
c0020b5a:	e8 77 89 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020b5f:	83 c4 10             	add    esp,0x10
c0020b62:	90                   	nop
c0020b63:	83 c4 0c             	add    esp,0xc
c0020b66:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020b68 <ATAPI::~ATAPI()>:
c0020b68:	83 ec 0c             	sub    esp,0xc
c0020b6b:	83 ec 0c             	sub    esp,0xc
c0020b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b72:	e8 cd ff ff ff       	call   c0020b44 <ATAPI::~ATAPI()>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	83 ec 08             	sub    esp,0x8
c0020b7d:	68 84 01 00 00       	push   0x184
c0020b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b86:	e8 39 bb fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020b8b:	83 c4 10             	add    esp,0x10
c0020b8e:	83 c4 0c             	add    esp,0xc
c0020b91:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0020b92 <SATA::~SATA()>:
c0020b92:	83 ec 0c             	sub    esp,0xc
c0020b95:	ba fc 43 02 c0       	mov    edx,0xc00243fc
c0020b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b9e:	89 10                	mov    DWORD PTR [eax],edx
c0020ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba4:	83 ec 0c             	sub    esp,0xc
c0020ba7:	50                   	push   eax
c0020ba8:	e8 29 89 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	90                   	nop
c0020bb1:	83 c4 0c             	add    esp,0xc
c0020bb4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020bb6 <SATA::~SATA()>:
c0020bb6:	83 ec 0c             	sub    esp,0xc
c0020bb9:	83 ec 0c             	sub    esp,0xc
c0020bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bc0:	e8 cd ff ff ff       	call   c0020b92 <SATA::~SATA()>
c0020bc5:	83 c4 10             	add    esp,0x10
c0020bc8:	83 ec 08             	sub    esp,0x8
c0020bcb:	68 7c 01 00 00       	push   0x17c
c0020bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020bd4:	e8 eb ba fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	83 c4 0c             	add    esp,0xc
c0020bdf:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020be0 <SATAPI::~SATAPI()>:
c0020be0:	83 ec 0c             	sub    esp,0xc
c0020be3:	ba 20 45 02 c0       	mov    edx,0xc0024520
c0020be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bec:	89 10                	mov    DWORD PTR [eax],edx
c0020bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf2:	83 ec 0c             	sub    esp,0xc
c0020bf5:	50                   	push   eax
c0020bf6:	e8 db 88 fe ff       	call   c00094d6 <PhysicalDisk::~PhysicalDisk()>
c0020bfb:	83 c4 10             	add    esp,0x10
c0020bfe:	90                   	nop
c0020bff:	83 c4 0c             	add    esp,0xc
c0020c02:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020c04 <SATAPI::~SATAPI()>:
c0020c04:	83 ec 0c             	sub    esp,0xc
c0020c07:	83 ec 0c             	sub    esp,0xc
c0020c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c0e:	e8 cd ff ff ff       	call   c0020be0 <SATAPI::~SATAPI()>
c0020c13:	83 c4 10             	add    esp,0x10
c0020c16:	83 ec 08             	sub    esp,0x8
c0020c19:	68 84 01 00 00       	push   0x184
c0020c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c22:	e8 9d ba fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020c27:	83 c4 10             	add    esp,0x10
c0020c2a:	83 c4 0c             	add    esp,0xc
c0020c2d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020c2e <IOAPIC::~IOAPIC()>:
c0020c2e:	83 ec 0c             	sub    esp,0xc
c0020c31:	ba 80 45 02 c0       	mov    edx,0xc0024580
c0020c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c3a:	89 10                	mov    DWORD PTR [eax],edx
c0020c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c40:	83 ec 0c             	sub    esp,0xc
c0020c43:	50                   	push   eax
c0020c44:	e8 1b 83 fe ff       	call   c0008f64 <Device::~Device()>
c0020c49:	83 c4 10             	add    esp,0x10
c0020c4c:	90                   	nop
c0020c4d:	83 c4 0c             	add    esp,0xc
c0020c50:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020c52 <IOAPIC::~IOAPIC()>:
c0020c52:	83 ec 0c             	sub    esp,0xc
c0020c55:	83 ec 0c             	sub    esp,0xc
c0020c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c5c:	e8 cd ff ff ff       	call   c0020c2e <IOAPIC::~IOAPIC()>
c0020c61:	83 c4 10             	add    esp,0x10
c0020c64:	83 ec 08             	sub    esp,0x8
c0020c67:	68 68 01 00 00       	push   0x168
c0020c6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c70:	e8 4f ba fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020c75:	83 c4 10             	add    esp,0x10
c0020c78:	83 c4 0c             	add    esp,0xc
c0020c7b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020c7c <APICTimer::~APICTimer()>:
c0020c7c:	83 ec 0c             	sub    esp,0xc
c0020c7f:	ba c8 45 02 c0       	mov    edx,0xc00245c8
c0020c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c88:	89 10                	mov    DWORD PTR [eax],edx
c0020c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c8e:	83 ec 0c             	sub    esp,0xc
c0020c91:	50                   	push   eax
c0020c92:	e8 0d 9a fe ff       	call   c000a6a4 <Timer::~Timer()>
c0020c97:	83 c4 10             	add    esp,0x10
c0020c9a:	90                   	nop
c0020c9b:	83 c4 0c             	add    esp,0xc
c0020c9e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020ca0 <APICTimer::~APICTimer()>:
c0020ca0:	83 ec 0c             	sub    esp,0xc
c0020ca3:	83 ec 0c             	sub    esp,0xc
c0020ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020caa:	e8 cd ff ff ff       	call   c0020c7c <APICTimer::~APICTimer()>
c0020caf:	83 c4 10             	add    esp,0x10
c0020cb2:	83 ec 08             	sub    esp,0x8
c0020cb5:	68 60 01 00 00       	push   0x160
c0020cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cbe:	e8 01 ba fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020cc3:	83 c4 10             	add    esp,0x10
c0020cc6:	83 c4 0c             	add    esp,0xc
c0020cc9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020ccc <PIT::~PIT()>:
c0020ccc:	83 ec 0c             	sub    esp,0xc
c0020ccf:	ba 18 46 02 c0       	mov    edx,0xc0024618
c0020cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd8:	89 10                	mov    DWORD PTR [eax],edx
c0020cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cde:	83 ec 0c             	sub    esp,0xc
c0020ce1:	50                   	push   eax
c0020ce2:	e8 bd 99 fe ff       	call   c000a6a4 <Timer::~Timer()>
c0020ce7:	83 c4 10             	add    esp,0x10
c0020cea:	90                   	nop
c0020ceb:	83 c4 0c             	add    esp,0xc
c0020cee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020cf0 <PIT::~PIT()>:
c0020cf0:	83 ec 0c             	sub    esp,0xc
c0020cf3:	83 ec 0c             	sub    esp,0xc
c0020cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cfa:	e8 cd ff ff ff       	call   c0020ccc <PIT::~PIT()>
c0020cff:	83 c4 10             	add    esp,0x10
c0020d02:	83 ec 08             	sub    esp,0x8
c0020d05:	68 5c 01 00 00       	push   0x15c
c0020d0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d0e:	e8 b1 b9 fe ff       	call   c000c6c4 <operator delete(void*, unsigned long)>
c0020d13:	83 c4 10             	add    esp,0x10
c0020d16:	83 c4 0c             	add    esp,0xc
c0020d19:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be cb 28 02 c0       	mov    esi,0xc00228cb
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be e7 28 02 c0       	mov    esi,0xc00228e7
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
